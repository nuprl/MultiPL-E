language: cs
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var result = l.GroupBy(x =>
    x).Where(g => g.Count() > 1).Select(x => x.Key).ToList();\n        if (result.Count
    != 1) return false;\n        return l.All(x => x == 0);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f19ddf97c621469b99fc91e589463669>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f19ddf97c621469b99fc91e589463669>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Sort the list using QuickSort\n
    \       l.Sort();\n        var left = 0;\n        var right = 0;\n        var
    total = 0;\n        var isPairFound = false;\n        while (left < l.Count &&
    right < l.Count) {\n            total = left + right;\n            if (total <
    l.Count) {\n                left++;\n            } else {\n                right++;\n
    \           }\n            if (total <= 0) {\n                isPairFound = true;\n
    \           }\n        }\n        if (!isPairFound) {\n            return false;\n
    \       }\n        // Reverse the list using QuickSort\n        l.Reverse();\n
    \       left = 0;\n        right = 0;\n        total = 0;\n        isPairFound
    = false;\n        while (left < l.Count && right < l.Count) {\n            total
    = left + right;\n            if (total < l.Count) {\n                left++;\n
    \           } else {\n                right++;\n            }\n            if
    (total > 0) {\n                isPairFound = true;\n            }\n        }\n
    \       if (isPairFound) {\n            l.Reverse();\n        }\n        // If
    the list is sorted in reverse order, then all pairs of elements sum to zero.\n
    \       // If so, return true since there are two distinct elements in the list
    that sum to zero.\n        // If the list is sorted in normal order, then no pairs
    of elements sum to zero.\n        // If so, return false since no two distinct
    elements sum to zero.\n        return (left == 0 && right == 0);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a96b3c147b224b3cb791349443a4b835>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a96b3c147b224b3cb791349443a4b835>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, int> dict
    = new Dictionary<long, int>();\n        foreach(long item in l)\n            dict.Add(item,
    1);\n        long total = 0;\n        foreach (long key in dict.Keys)\n            total
    += key;\n        if (total != 0) return false;\n        foreach (long key in l)\n
    \           dict.TryGetValue(key, out int value);\n        return dict.Values.Count()
    == 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same
    key has already been added. Key: 1\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00019]
    in <513f0d60f5704e0a977a2404b566f2a1>:0 \n  at Problem.Main (System.String[] args)
    [0x0003b] in <513f0d60f5704e0a977a2404b566f2a1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: An item with the same key has already been added. Key:
    1\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key,
    TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00019]
    in <513f0d60f5704e0a977a2404b566f2a1>:0 \n  at Problem.Main (System.String[] args)
    [0x0003b] in <513f0d60f5704e0a977a2404b566f2a1>:0 \n"
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) return false;\n
    \       l.Sort();\n        var sum = 0;\n        var i = 1;\n        var j = l.Count
    - 1;\n        bool found = false;\n        while (i<j) {\n            var sum
    = i + j;\n            if (sum > 0) {\n                if (sum == l[i]) {\n                    if
    (found == false) { found = true }\n                    i++;\n                }\n
    \               else if (sum == l[j]) {\n                    if (found == false)
    { found = true }\n                    j--;\n                }\n                else
    {\n                    if (sum != l[i] && sum != l[j]) { found = false }\n                }\n
    \           }\n            else {\n                if (sum != l[i]) {\n                    if
    (found == false) { found = true }\n                    i++;\n                }\n
    \               else {\n                    if (sum != l[j]) {\n                        if
    (found == false) { found = true }\n                        j--;\n                    }\n
    \                   else {\n                        if (found == true) { found
    = false }\n                    }\n                }\n            }\n        }\n
    \       return found;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcnxiygrx.cs(33,56): error CS1002: ; expected

    /tmp/tmpcnxiygrx.cs(37,56): error CS1002: ; expected

    /tmp/tmpcnxiygrx.cs(41,69): error CS1002: ; expected

    /tmp/tmpcnxiygrx.cs(46,56): error CS1002: ; expected

    /tmp/tmpcnxiygrx.cs(51,60): error CS1002: ; expected

    /tmp/tmpcnxiygrx.cs(55,60): error CS1002: ; expected

    '
  timestamp: 1659976874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool result = false;\n        List<long>
    pairs = new List<long>();\n        HashSet<long> elements = new HashSet<long>();\n
    \       long sum = 0;\n        foreach (long i in l) {\n            if (elements.Contains(i))
    {\n                pairs.Add(i);\n            } else {\n                elements.Add(i);\n
    \               sum += i;\n            }\n        }\n        if (pairs.Count >
    0 && pairs.Count == elements.Count) {\n            result = true;\n        } else
    {\n            result = false;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86d2ad47012a4a40bc88f907aacb1624>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86d2ad47012a4a40bc88f907aacb1624>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2)\n            return
    false;\n        long[] c = l.ToArray();\n        ulong sum = c[0] + c[0];\n        ulong
    sum2 = sum;\n        ulong sum3 = sum;\n        ulong sum4 = sum;\n        for
    (int i = 0; i < c.Length - 1; i++) {\n            sum += c[i + 1];\n            sum2
    += c[i + 1];\n            sum3 += c[i + 1];\n            sum4 += c[i + 1];\n        }\n
    \       return sum == 0 && sum2 == 0 && sum3 == 0 && sum4 == 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp25ew3zu8.cs(26,21): error CS0266: Cannot implicitly convert type ''long''
    to ''ulong''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp25ew3zu8.cs(31,13): error CS0034: Operator ''+='' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp25ew3zu8.cs(32,13): error CS0034: Operator ''+='' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp25ew3zu8.cs(33,13): error CS0034: Operator ''+='' is ambiguous on operands
    of type ''ulong'' and ''long''

    /tmp/tmp25ew3zu8.cs(34,13): error CS0034: Operator ''+='' is ambiguous on operands
    of type ''ulong'' and ''long''

    '
  timestamp: 1659976874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Distinct().Count()
    == 2 \n                && l.Sum() == 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd8da7bedfc843b2a15602b0bf47e995>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd8da7bedfc843b2a15602b0bf47e995>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> twoSum = new List<long>();\n
    \       foreach (long number in l) {\n            twoSum.Add(Add(number, l.Where(x
    => x != number).FirstOrDefault()));\n        }\n        return twoSum.Count ==
    2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa79b9qbb.cs(25,24): error CS0103: The name ''Add'' does not exist in the
    current context

    '
  timestamp: 1659976874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) return false;\n
    \       if (l.Count == 1) return l.ElementAt(0) == 0;\n        long first = l.ElementAt(0);\n
    \       int n = l.Count;\n        long pairs = first + first + first;\n        long
    zeros = 0;\n        if (pairs == 0)\n            return true;\n        if (pairs
    == 1) return false;\n        if (pairs == n) return true;\n        long temp =
    pairs;\n        while (pairs % n != 0) {\n            pairs--;\n        }\n        while
    (pairs > 0) {\n            pairs--;\n            zeros += temp;\n            temp
    = pairs;\n            if (pairs == 0) return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b3cb11fe2894cac85ed41cd4aefeed2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b3cb11fe2894cac85ed41cd4aefeed2>:0
    \n"
  stdout: ''
  timestamp: 1659976875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Count > 0 &&\n            l.Distinct().Count()
    == l.Count &&\n            l.Sum() == 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873f54528f094ffdaa75fa63487d91b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <873f54528f094ffdaa75fa63487d91b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long n = l.Count;\n        if
    (n <= 1) return false;\n\n        long sum = 0;\n        long last = 0;\n        for
    (int i = 0; i < n - 1; i++) {\n            long c = l[i];\n            long d
    = l[i + 1];\n            if (c < 0 || d < 0) {\n                return false;\n
    \           }\n\n            sum += c;\n            last += d;\n        }\n\n
    \       if (sum == 0 && last == 0) {\n            return false;\n        }\n\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <682a581bfdca491eafcfdb20ddcb8bdc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <682a581bfdca491eafcfdb20ddcb8bdc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new List<int>();\n
    \       foreach(long x in l) {\n            var sum = x + x;\n            if (pairs.Contains(sum))\n
    \               return false;\n            pairs.Add(sum);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdmrvkyp3.cs(26,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdmrvkyp3.cs(28,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int max = l.Max();\n        int
    min = l.Min();\n\n        int sum = max - min + 1;\n        for (int i = 0; i
    < l.Count - 1; i++) {\n            long a = l[i];\n            long b = l[i +
    1];\n            if (a + b == sum) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpignir9s6.cs(23,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpignir9s6.cs(24,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = l.Sum();\n        //
    pairs with sum 0 and length less than two\n        bool flag = false;\n        if
    (sum == 0) {\n            return flag;\n        }\n        bool isEqual = false;\n
    \       foreach (long i in l) {\n            if (sum - i == 0) {\n                isEqual
    = true;\n                break;\n            }\n        }\n        flag = isEqual;\n
    \       return flag;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77a917dc1c2940b7bbe0666c75ff882a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77a917dc1c2940b7bbe0666c75ff882a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long first = 0;\n        long
    second = 0;\n        long sum = 0;\n        for (int i = 0; i < l.Count - 1; i++)
    {\n            first = l[i];\n            second = l[i + 1];\n            sum
    = first + second;\n            if (sum == 0) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fab60c36e29e4f44b422f5505a4b7d4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fab60c36e29e4f44b422f5505a4b7d4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long s = 0;\n        foreach
    (var pair in l) {\n            s += pair;\n            if (s == 0) {\n                return
    true;\n            }\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <190e3905037f454588d74132dbc724e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <190e3905037f454588d74132dbc724e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var l1 = l.ToLookup(x => x);\n
    \       var l2 = l1.Select(x => x.First()).ToList();\n        if (l2.Count < 2)
    return false;\n        var sum = 0;\n        foreach (var item in l1) {\n            var
    a = item;\n            sum += a;\n        }\n        if (sum < 0) return false;\n
    \       var sum2 = 0;\n        foreach (var item in l2) {\n            sum2 +=
    item;\n        }\n        return sum == 0 || sum2 == 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpijn7aq57.cs(29,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''int'' and ''IGrouping<long, long>''

    /tmp/tmpijn7aq57.cs(34,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var d = new Dictionary<long,
    int>();\n        foreach(var a in l) {\n            int b;\n            if (d.TryGetValue(a,
    out b)) b = b + 1;\n            else b = 0;\n            d[a] = b;\n        }\n
    \       long s = 0;\n        foreach(var b in d) {\n            s = s - b;\n            if
    (s <= 0) return true;\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3_5tldfw.cs(32,17): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''KeyValuePair<long, int>''

    '
  timestamp: 1659976874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Debug.Assert(l.Count > 0);\n
    \       if (l.Count == 1) {\n            return false;\n        }\n        //
    Use a hash table: O(n)\n        // We can use this hash table to speed up the
    process if we have two\n        // elements that sum to zero.\n        Hashtable
    ht = new Hashtable();\n        long x = l[0];\n        long y = 0;\n        foreach
    (long z in l) {\n            y = x + z;\n            if (ht.Contains(y)) {\n                return
    true;\n            }\n            ht.Add(y, z);\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbe7kk6l.cs(30,9): error CS0246: The type or namespace name ''Hashtable''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpmbe7kk6l.cs(30,28): error CS0246: The type or namespace name ''Hashtable''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976874
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long[] nums = l.ToArray();\n
    \       long[] indexes = new long[nums.Length];\n        Array.Sort(nums, indexes);\n
    \       long sum = 0;\n        long prevIndex = (long)-1;\n        for (long i
    = 0; i < nums.Length; i++) {\n            if (i == 0) {\n                continue;\n
    \           }\n            if (nums[i] <= nums[prevIndex]) {\n                sum
    += nums[i];\n                prevIndex = i;\n            } else {\n                sum
    -= nums[prevIndex];\n                prevIndex = i;\n            }\n        }\n
    \       if (sum == 0)\n            return true;\n        else\n            return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T]
    l) [0x00035] in <14c7280f2a37409480434775bcc1efe2>:0 \n  at Problem.Main (System.String[]
    args) [0x00017] in <14c7280f2a37409480434775bcc1efe2>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00035]
    in <14c7280f2a37409480434775bcc1efe2>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <14c7280f2a37409480434775bcc1efe2>:0 \n"
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var zeros = new List<long>();\n
    \       foreach (var el in l) {\n            zeros.Add(el);\n        }\n\n        //
    sort the list so we don't have to run a O(n log n) sort \n        zeros.Sort();\n
    \       var minZero = zeros.First();\n\n        // remove pairs smaller than our
    minimum zero.\n        var smallerIndices = zeros.Where(e => e < minZero).ToArray();\n
    \       foreach (var index in smallerIndices) {\n            zeros.RemoveAt(index);\n
    \       }\n\n        // return false if there aren't two distinct elements that
    sum to zero.\n        return zeros.Count() < 2;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz8zhklg2.cs(35,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) return false;\n\n
    \       long sum = 0L;\n        bool result = true;\n        for (int i = 0; i
    < l.Count - 1; i++) {\n            sum += l[i];\n            if (sum != 0) {\n
    \               result = false;\n                break;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <221f0db314bd4676acb7ea562fced727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <221f0db314bd4676acb7ea562fced727>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long total;\n        return
    l.Select(x => (total += x, total)).GroupBy(x => x).Any(x => x.Count() == 1);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkt1aja4w.cs(24,31): error CS0165: Use of unassigned local variable ''total''

    '
  timestamp: 1659976874
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 3)\n            return
    false;\n        long first_item = l.First();\n        long second_item = l.Last();\n
    \       long first_item_repeated = l.Skip(1).First();\n        long second_item_repeated
    = l.Skip(2).First();\n        if (first_item == second_item && first_item_repeated
    == second_item_repeated)\n            return true;\n        long first_item_plus_second_item_repeated
    = first_item_repeated + second_item_repeated;\n        long second_item_plus_first_item_repeated
    = second_item_repeated + first_item_repeated;\n        if (first_item + second_item_repeated
    == 0L && first_item_repeated == second_item_repeated) {\n            if (first_item_plus_second_item_repeated
    == 0L && second_item_plus_first_item_repeated == 0L)\n                return true;\n
    \           if (first_item_plus_second_item_repeated == second_item_plus_first_item_repeated)\n
    \               return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <790027b25de44b949ff4c2c82b6aeb7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <790027b25de44b949ff4c2c82b6aeb7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var sum = 0;\n        var
    first = l.First();\n        var last = l.Last();\n        foreach(var element
    in l) {\n            if (element < 0 || element > 0) return false;\n            sum
    += element;\n            if (sum > 0) return false;\n        }\n        if (sum
    == 0) return true;\n        foreach(var element in l) {\n            if (element
    < 0 || element > 0) return false;\n            sum += element;\n        }\n        if
    (sum == 0) return true;\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc9w0i6kw.cs(28,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpc9w0i6kw.cs(34,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976875
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Distinct().Count()
    == 2 && l.First() + l.Last() == 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9ba52bee3d14b8f97c1ae680f6015bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9ba52bee3d14b8f97c1ae680f6015bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int count = 0;\n        for(int
    i = 0; i < l.Count; i++) {\n            long current = l[i];\n            for(int
    j = i + 1; j < l.Count; j++) {\n                if(current + l[j] == 0) {\n                    count++;\n
    \                   if(count > 1) {\n                        return true;\n                    }\n
    \               }\n            }\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e00490b3c164544adf26a1ca540532b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e00490b3c164544adf26a1ca540532b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var sum = new List<long>(l.Count);\n
    \       long s = 0;\n        foreach (var x in l)\n        {\n            s +=
    x;\n        }\n        foreach (var x in l)\n        {\n            int i = Convert.ToInt32(x
    - s);\n            if (i == 0)\n            {\n                sum.Add(x);\n            }\n
    \       }\n        return sum.Count != 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adb3e1bd4f4c405ab315b23d866ff85d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adb3e1bd4f4c405ab315b23d866ff85d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Debug.Assert(l.Count>0);\n
    \       var two = new HashSet<long>();\n        var three = new HashSet<long>();\n
    \       for (int i=0; i<l.Count; i++) {\n            two.Add(l[i]);\n            if
    (i != l.Count-1 && l[i]+l[i+1] != 0) {\n                three.Add(l[i]+l[i+1]);\n
    \           }\n        }\n        return two.Count == 2 && three.Count == 2;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cc414ac84dc4a4aaa679b179e9a32c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cc414ac84dc4a4aaa679b179e9a32c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 3) return false;\n
    \       long s = 0;\n        long sum = 0;\n        foreach (long x in l)\n            sum
    += x;\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] ==
    l[i + 1]) {\n                s++;\n                if (s == 0) return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08548471bad942cebd25a4ac477199de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08548471bad942cebd25a4ac477199de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var l2 = l.ToArray();\n        var
    pairs = l2.Zip(l2, (a, b) => new {a = a, b = b}).Where(x => x.a + x.b != 0).Select(x
    => new {x.a, x.b}).ToArray();\n        return pairs.Count == 1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcrw9oixt.cs(25,16): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) {\n            return
    false;\n        }\n        var first = l.First();\n        var last = l.Last();\n
    \       var sum = 0;\n        foreach (var x in l) {\n            sum += x;\n
    \       }\n        if (sum == 0) {\n            return false;\n        }\n        long
    first = first;\n        long last = last;\n        long sum = 0;\n        for
    (int i = 0; i < l.Count; i++) {\n            if (i % 2 == 0) {\n                sum
    += l[i];\n            } else {\n                if (sum == 0) {\n                    return
    false;\n                }\n                if (l[i] != (first + last) / 2) {\n
    \                   return false;\n                }\n                first =
    l[i];\n                last = l[i];\n                sum = 0;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0_8gywqt.cs(30,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0_8gywqt.cs(35,14): error CS0128: A local variable or function named ''first''
    is already defined in this scope

    /tmp/tmp0_8gywqt.cs(36,14): error CS0128: A local variable or function named ''last''
    is already defined in this scope

    /tmp/tmp0_8gywqt.cs(37,14): error CS0128: A local variable or function named ''sum''
    is already defined in this scope

    /tmp/tmp0_8gywqt.cs(40,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0_8gywqt.cs(37,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    '
  timestamp: 1659976875
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var result = l.Select(x =>
    new {\n            num = x,\n            sum = x.ToString().Sum(c => c - 48),\n
    \       }).GroupBy(x => x.sum).Select(x => new {\n            sum = x.Key,\n            list
    = x.ToList()\n        }).ToList();\n        return result.First(x => x.list.Count()
    == 2 && x.list[1] == 0).Any();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4og25dty.cs(30,57): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''<anonymous type: long num, int sum>'' and ''int''

    '
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> lCopy = new List<long>(l);\n
    \       bool firstElem = false;\n        long firstElemSum = lCopy.First();\n
    \       long secondElemSum = lCopy.Last();\n\n        foreach (long sum in lCopy)
    {\n            if (sum == firstElemSum) {\n                if (sum == secondElemSum)
    {\n                    firstElem = true;\n                } else {\n                    return
    false;\n                }\n            } else {\n                return false;\n
    \           }\n        }\n\n        return firstElem;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f711695bd84a472990670382d8cbcf66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f711695bd84a472990670382d8cbcf66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Your code here\n        \n
    \       return l.Count == l.Distinct().Count();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bd3bbe1b6b54720a537888c56c8a64d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bd3bbe1b6b54720a537888c56c8a64d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool foundOne = false;\n        bool
    foundTwo = false;\n\n        for (int i = 0; i < l.Count - 1; ++i) {\n            long
    a = l[i];\n            long b = l[i + 1];\n            if (b == 0) return false;\n
    \           if (a == 0) return false;\n\n            // find the two values that
    can sum up to zero\n            long value = a;\n            do {\n                value
    += b;\n                ++i;\n                if (value == 0) {\n                    foundOne
    = true;\n                    foundTwo = true;\n                    break;\n                }\n
    \               value -= b;\n            } while (value < 0);\n        }\n\n        return
    foundOne && foundTwo;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new HashSet<long>();\n
    \       foreach (var a in l) {\n            var b = l.Where(x => x == a).FirstOrDefault();\n
    \           if (b != 0) {\n                pairs.Add(a);\n                pairs.Add(b);\n
    \           }\n        }\n\n        if (pairs.Count != 0)\n            return
    true;\n\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52f9be57f22d4fb291f0a628afcf21d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52f9be57f22d4fb291f0a628afcf21d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) return false;\n
    \       long sum = 0;\n        foreach (var element in l) {\n            sum +=
    element;\n            if (sum > 0) return false;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea276cd21de247dda30ec0fb60dbfdac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea276cd21de247dda30ec0fb60dbfdac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        int
    n = 0;\n        int i = 0;\n        bool hasSumToZero = false;\n\n        while
    (i<l.Count) {\n            sum += l[i];\n            n++;\n            if (sum
    == 0) {\n                hasSumToZero = true;\n                break;\n            }\n
    \           i++;\n        }\n        if (hasSumToZero == false) return true;\n\n
    \       List<long> list = new List<long>();\n        for (int j = 1; j <= n; j++)
    {\n            if (j == n) break;\n            list.Add(l[j-1]+l[j]);\n        }\n
    \       if (list.Count == 0) return true;\n\n        if (list.Count() == 1) return
    false;\n\n        return PairsSumToZero(list);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3e9679d3c9b464cba819497b5643444>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3e9679d3c9b464cba819497b5643444>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = l.Sum();\n        return
    l.Count >= 2 && sum == 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0046792691ca4f88994f66917f45d26e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0046792691ca4f88994f66917f45d26e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> pairs = new List<long>();\n
    \       for (int i = 0; i < l.Count - 1; i++) {\n            for (int j = i +
    1; j < l.Count; j++) {\n                if (l[i] + l[j] == 0) {\n                    pairs.Add(l[i]);\n
    \                   pairs.Add(l[j]);\n                    break;\n                }\n
    \           }\n        }\n        return pairs.Count == 2 ? true : false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> set = new HashSet<long>();\n
    \       foreach (long x in l)\n            set.Add(x);\n        return set.Count()
    == 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38193677a45b4154be46b04670740826>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38193677a45b4154be46b04670740826>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) return false;\n
    \       SortedSet<long> set = new SortedSet<long>();\n        foreach (long x
    in l) {\n            set.Add(x);\n        }\n        long x = l.First();\n        for
    (int i = 1; i < l.Count; i++) {\n            long y = l.ElementAt(i);\n            long
    ys = y - x;\n            if (set.Contains(ys) && set.Count > 1) return true;\n
    \           x = y;\n        }\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7qef7j6.cs(25,23): error CS0136: A local or parameter named ''x'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l == null) return false;\n
    \       long sum = 0;\n        bool found = false;\n        long current = l.First();\n
    \       foreach (long element in l.Skip(1))\n            sum += element;\n        found
    = (sum == 0);\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <866fcd0765d34f1a81ac4aef090116c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <866fcd0765d34f1a81ac4aef090116c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Debug.Assert(l != null &&
    l.Count > 0);\n\n        var n = l.Count;\n        if (n == 1) return true;\n\n
    \       Debug.Assert(l.Count == 2);\n\n        long[] left = new long[2];\n        long[]
    right = new long[2];\n\n        left[0] = l[0];\n        left[1] = l[1];\n\n        right[0]
    = l[0];\n        right[1] = l[1];\n\n        for (var i = 2; i <= n; i++) {\n
    \           left[i] = l[i - 1];\n            right[i] = l[i - 2];\n\n            var
    pair1 = left[i];\n            var pair2 = right[i];\n\n            var sum1 =
    pair1 + pair2;\n            var sum2 = pair2 + pair1;\n\n            if (sum1
    == 0 || sum2 == 0) {\n                return false;\n            }\n\n            if
    (sum1 == sum2) {\n                return false;\n            }\n        }\n\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00000]
    in <bbb1cbf43b8d4e2880e1ae8fcf4b3c53>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <bbb1cbf43b8d4e2880e1ae8fcf4b3c53>:0 \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException:
    Index was outside the bounds of the array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T]
    l) [0x00085] in <bbb1cbf43b8d4e2880e1ae8fcf4b3c53>:0 \n  at Problem.Main (System.String[]
    args) [0x00017] in <bbb1cbf43b8d4e2880e1ae8fcf4b3c53>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00085]
    in <bbb1cbf43b8d4e2880e1ae8fcf4b3c53>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <bbb1cbf43b8d4e2880e1ae8fcf4b3c53>:0 \n"
  stdout: ''
  timestamp: 1659976876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int[] count = new int[l.Count];\n
    \       long sum = 0;\n        for (int i = 0; i < l.Count; i++) {\n            count[i]
    = 0;\n        }\n        for (int i = 0; i < l.Count; i++) {\n            count[l[i]]++;\n
    \           sum += l[i];\n        }\n        foreach (int count in count) {\n
    \           if (count > 1) {\n                return false;\n            }\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa9y0h2q_.cs(32,22): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() == 0) {\n            return
    false;\n        }\n\n        Dictionary<long, long> pairs = new Dictionary<long,
    long>();\n\n        foreach (long n in l) {\n            long first = n;\n            long
    second = n;\n\n            do {\n                pairs[first] = second;\n                first
    = pairs[first];\n                second = pairs[second];\n            } while
    (first != second);\n\n            if (second == 0) {\n                return false;\n
    \           }\n        }\n\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57f02accb5964a8eb35d8cc6144713e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57f02accb5964a8eb35d8cc6144713e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (long i in l) {\n            sum += i;\n        }\n        int counter = 0;\n
    \       foreach (long i in l) {\n            counter++;\n            if (counter
    == 2) {\n                return true;\n            }\n            if (counter
    > 2 && sum > 0) {\n                return false;\n            }\n            sum
    -= i;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44378ae929bb49118cb957d6d2380750>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44378ae929bb49118cb957d6d2380750>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // TODO: write code here\n
    \       if (l.Count == 0) {\n            return false;\n        }\n        if
    (l.Count == 1) {\n            return true;\n        }\n        long totalSum =
    0;\n        foreach (long number in l) {\n            totalSum += number;\n        }\n
    \       long start = 0;\n        long end = l.Count - 1;\n        bool result
    = true;\n        while (start < end) {\n            long sum = totalSum;\n            if
    (sum < 0)\n                sum *= -1;\n            long sum2 = totalSum;\n            if
    (sum2 < 0)\n                sum2 *= -1;\n            long newSum = sum + sum2;\n
    \           if (newSum != 0) {\n                result = false;\n                break;\n
    \           }\n            totalSum = sum;\n            end -= 1;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5265e0bfb092488fa8fb568c10aa99ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5265e0bfb092488fa8fb568c10aa99ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = l.Select(x =>
    new {x = x, sum = x - 0L}).GroupBy(x => x.x).ToList();\n        var zeros = pairs.Where(x
    => x.Sum() == 0L).Select(x => x.x).ToArray();\n        return zeros.Length ==
    2 && zeros.Contains(l.First());\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptsjrxnrc.cs(24,38): error CS1929: ''IGrouping<long, <anonymous type: long
    x, long sum>>'' does not contain a definition for ''Sum'' and the best extension
    method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)'' requires a receiver
    of type ''ParallelQuery<int>''

    '
  timestamp: 1659976876
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int[] pairs = new int[l.Count];\n
    \       int pair = 0;\n        long sum = 0;\n        int i;\n        for (i =
    0; i < l.Count; i++) {\n            pair = l[i] % 2;\n            if (pair ==
    0) {\n                if (sum == 0) {\n                    pairs[i] = 1;\n                }
    else {\n                    pairs[i] = pair;\n                }\n            }\n
    \           sum += pair;\n        }\n        for (int j = 0; j < l.Count; j++)
    {\n            if (pairs[j] == 0) {\n                return false;\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmqyesl8_.cs(28,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976876
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = l.Sum();\n        for
    (int i = 0; i < l.Count; i++) {\n            if (l[i] - sum != 0) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a026849f8211403e91366625c63e6b8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a026849f8211403e91366625c63e6b8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 3)\n            return
    false;\n        \n        var sum = 0;\n        long x = 0;\n        long y =
    0;\n        for (int i = 0; i < l.Count; i++)\n        {\n            sum += l[i];\n
    \           if (sum > 0)\n            {\n                x = l[i];\n                break;\n
    \           }\n        }\n\n        sum = 0;\n        for (int i = l.Count - 1;
    i >= 0; i--)\n        {\n            sum += l[i];\n            if (sum > 0)\n
    \           {\n                y = l[i];\n                break;\n            }\n
    \       }\n\n        if (sum == 0)\n            return true;\n\n        for (int
    i = 0; i < l.Count; i++)\n        {\n            if (i != 0)\n            {\n
    \               int index = (int)(x / l[i - 1]);\n                int remainder
    = (int)(x % l[i - 1]);\n                if (index > -1)\n                {\n                    if
    (remainder == 0 || l[index] != remainder)\n                    {\n                        return
    false;\n                    }\n                }\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgmhvxus.cs(31,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxgmhvxus.cs(42,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        long
    twoSum = 0;\n\n        l.ForEach(x => sum += x);\n        if (l.Count > 1) {\n
    \           l.Sort();\n            for (int i = 0; i < l.Count - 1; i++) {\n                twoSum
    += l[i];\n                twoSum += l[i + 1];\n            }\n            return
    twoSum == sum;\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bcaa95b69bc4407bd079c56e1a71c64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bcaa95b69bc4407bd079c56e1a71c64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int n = (int)l.Count;\n        long[]
    arr = l.ToArray();\n        Debug.Assert(n < arr.Length);\n        long last =
    0;\n        long sum = 0;\n        int cnt = 0;\n        for (int i = 0; i < n;
    ++i) {\n            sum += arr[i];\n            if (sum == 0) return true;\n            if
    (arr[i] > last) {\n                ++cnt;\n                if (cnt == 2)\n                    return
    true;\n            }\n            last = arr[i];\n            sum = 0;\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00000]
    in <23c291ec3afe4a9cb98f62175a42a307>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <23c291ec3afe4a9cb98f62175a42a307>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23c291ec3afe4a9cb98f62175a42a307>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String messa"
  stdout: ''
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var zeros = new HashSet<long>(l);\n
    \       var twos = new HashSet<long>();\n        foreach (var i in l)\n            twos.Add(i);\n
    \       var sum = twos.Sum();\n        if (twos.Count == 0)\n            return
    false;\n        if (twos.Count == 1)\n            return true;\n        if (twos.Count()
    == 2)\n        {\n            if (twos.First() + twos.Last() == sum)\n                return
    true;\n            return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0dc53f367fd405bbc4252d06fbf1091>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0dc53f367fd405bbc4252d06fbf1091>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) return false;\n
    \       var pairs = new List<Pair<long, long>>();\n        var seen = new HashSet<long>();\n
    \       for (var i = 0; i != l.Count; ++i) {\n            if (seen.Contains(l[i]))
    {\n                return false;\n            }\n            seen.Add(l[i]);\n
    \           for (var j = i + 1; j <= l.Count; ++j) {\n                if (seen.Contains(l[j]))
    {\n                    return false;\n                }\n                seen.Add(l[j]);\n
    \               pairs.Add(new Pair<long, long>(l[i], l[j]));\n            }\n
    \       }\n        // if pairs contains only two elements, then no solution\n
    \       return pairs.Count == 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbeafjimn.cs(24,30): error CS0246: The type or namespace name ''Pair<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpbeafjimn.cs(36,31): error CS0246: The type or namespace name ''Pair<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var zeros = new List<long>();\n
    \       long sum = 0;\n        long max = 0;\n        foreach (var el in l) {\n
    \           if (el > 0) {\n                sum += el;\n            }\n            else
    if (el < 0) {\n                sum -= el;\n            }\n            if (sum
    > max) {\n                max = sum;\n            }\n        }\n        if (max
    == 0) {\n            return false;\n        }\n        var counts = l.GroupBy(x
    => (x - zeros).ToString(\"x\")).Select(g => new { Value = g.Key, Count = g.Count()
    });\n        return counts.Count(x => x.Count == 2) == 1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1keh6cuv.cs(40,38): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    /tmp/tmp1keh6cuv.cs(41,34): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long total = 0;\n        foreach
    (long i in l)\n            total += i;\n        if (total == 0)\n            return
    true;\n        long m = l.Count;\n        long n = m - 1;\n        long d = n
    - 1;\n        long r = 3.14159265358979323846;\n        double dm = Math.Sqrt(d);\n
    \       double dn = Math.Sqrt(n);\n        double d = Math.Sqrt(d);\n        double
    m = Math.Sqrt(m);\n        bool flag = true;\n        for (int i = 1; i <= m;
    i++) {\n            double f = (double)m * Math.Sqrt(2 * i / dm);\n            double
    g = (double)2 * i / dm + 1;\n            double h = Math.Sqrt(Math.Pow(d, i) /
    (2 * dn));\n            if (f * g * h > 0) {\n                flag = false;\n
    \               return flag;\n            }\n        }\n        return flag;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ndn52zg.cs(31,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5ndn52zg.cs(34,16): error CS0128: A local variable or function named ''d''
    is already defined in this scope

    /tmp/tmp5ndn52zg.cs(35,16): error CS0128: A local variable or function named ''m''
    is already defined in this scope

    /tmp/tmp5ndn52zg.cs(31,14): warning CS0219: The variable ''r'' is assigned but
    its value is never used

    '
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) {\n            return
    false;\n        }\n        Dictionary<long, List<long>> d = new Dictionary<long,
    List<long>>();\n        foreach (long x in l)\n            d[x] = new List<long>();\n
    \       foreach (long x in l)\n            d[x].Add(x);\n        foreach (KeyValuePair<long,
    List<long>> kvp in d) {\n            if (kvp.Value.Count() > 1) {\n                return
    false;\n            }\n            long y = kvp.Key;\n            for (int i =
    0; i < kvp.Value.Count(); ++i) {\n                long z = kvp.Value[i];\n                if
    (z < y || (z == y && i != 0)) {\n                    return false;\n                }\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55d14db2f5004b208c47424351ac63e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55d14db2f5004b208c47424351ac63e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var list1 = l.Distinct();\n
    \       var list2 = l.OrderBy(x => x).ToList();\n        list1.AddRange(list2);\n
    \       for (int i = 0; i != list1.Count; i++) {\n            if (list1[i] ==
    0) return true;\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3804ghe.cs(25,15): error CS1061: ''IEnumerable<long>'' does not contain
    a definition for ''AddRange'' and no accessible extension method ''AddRange''
    accepting a first argument of type ''IEnumerable<long>'' could be found (are you
    missing a using directive or an assembly reference?)

    /tmp/tmpe3804ghe.cs(26,25): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpe3804ghe.cs(27,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IEnumerable<long>''

    '
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (long val in l)\n            sum += val;\n        // if there exists two distinct
    elements in the list that sum to zero,\n        // then there must be at least
    one pair to sum to zero.\n        // that is, the list contains a pair of numbers
    with sum zero.\n        return (l.Count == 1) || (l.Count > 1 && (l.Distinct().Count()
    <= 1 || sum == 0));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6c8672d9a0b4f3996d6a068ce967c71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6c8672d9a0b4f3996d6a068ce967c71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var first = l[0];\n        var
    second = l[1];\n        long total = first + second;\n        return total < 0L
    ? false : total > 0L && l.Count == 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eaa4f85aae3644c18196ae80b3741dd5>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PairsSumToZero
    (System.Collections.Generic.List`1[T] l) [0x00009] in <eaa4f85aae3644c18196ae80b3741dd5>:0
    \n  at Problem.Main (System.String[] args) [0x0009e] in <eaa4f85aae3644c18196ae80b3741dd5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PairsSumToZero
    (System.Collections.Generic.List`1[T] l) [0x00009] in <eaa4f85aae3644c18196ae80b3741dd5>:0
    \n  at Problem.Main (System.String[] args) [0x0009e] in <eaa4f85aae3644c18196ae80b3741dd5>:0
    \n"
  stdout: ''
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> l1 = new List<long>();\n
    \       List<long> l2 = new List<long>();\n        bool result = false;\n        foreach
    (long e in l) {\n            if (l2.Contains(e)) {\n                result = true;\n
    \           } else {\n                l2.Add(e);\n                if (e == 0)
    {\n                    result = true;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef3d03d4ef29465bb8742292bbe109d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef3d03d4ef29465bb8742292bbe109d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool result = false;\n        var
    set = new HashSet<long>();\n        foreach (var item in l) {\n            if
    (set.Contains(item)) {\n                result = true;\n            }\n            else
    {\n                set.Add(item);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <398d3db9ce834d52b57847cb802836f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <398d3db9ce834d52b57847cb802836f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2)\n            return
    false;\n        long sum = 0;\n        long s = 0;\n        long sum2 = 0;\n        foreach
    (long x in l)\n            s += x;\n        long h = 0;\n        long k = 0;\n
    \       foreach (long x in l)\n            h += (x % 2 == 0);\n        long g
    = h % 2;\n        long r = g != 0;\n        while (k < l.Count) {\n            sum2
    = sum + l[k];\n            if (sum2 > 0)\n                sum -= sum2;\n            sum
    += l[k];\n            if (sum > 0)\n                sum -= sum;\n            k++;\n
    \       }\n        return sum == 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ha04qkw.cs(33,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmp6ha04qkw.cs(35,18): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmp6ha04qkw.cs(37,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6ha04qkw.cs(40,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) return false;\n
    \       if (l.Count < 2) return false;\n        long i = 0;\n        long total
    = 0;\n        for (int j = 0; j < l.Count; j++) {\n            total = total +
    l[j];\n            if (total < 0) {\n                total = total * (-1);\n            }\n
    \           if (total == 0) {\n                i = j;\n                break;\n
    \           }\n        }\n        if (i == l.Count) return true;\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c17a2e50dd346049c74aab2686f1f22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c17a2e50dd346049c74aab2686f1f22>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        BigInteger n = BigInteger.Zero;\n
    \       BigInteger sum = 0;\n\n        foreach (var i in l) {\n            sum
    += i;\n            n = n.Multiply(BigInteger.Pow(BigInteger.One, i.Value)).Add(sum);\n
    \       }\n\n        return (n.ToString(10).PadLeft(20, '0').ToUpper() == l.Select(x
    => x.ToString(\"x\")).Aggregate((a, b) => a + b));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4c48ignr.cs(28,61): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp4c48ignr.cs(28,69): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Add(BigInteger, BigInteger)''

    /tmp/tmp4c48ignr.cs(31,28): error CS1503: Argument 1: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long total = 0;\n        bool
    found = false;\n        foreach (long i in l) {\n            total += i;\n            if
    (total == 0) {\n                found = true;\n                break;\n            }\n
    \       }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88c342450f114fef9ec56f28499245bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88c342450f114fef9ec56f28499245bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // This solution is adapted
    from http://stackoverflow.com/a/5301899/1077692\n        // and translated into
    c#.\n        // It works by building a hash table of sets of pairs.\n        HashSet<Pair<long,
    long>> sets = new HashSet<Pair<long, long>>();\n        foreach (var p in l)\n
    \           sets.Add(new Pair<long, long>(p, p.Clone()));\n\n        // If the
    number of unique sets is greater than 2, then there are\n        // multiple distinct
    elements that sum to zero.\n        return sets.Count() > 1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpozqzovu6.cs(26,17): error CS0246: The type or namespace name ''Pair<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpozqzovu6.cs(26,54): error CS0246: The type or namespace name ''Pair<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpozqzovu6.cs(28,26): error CS0246: The type or namespace name ''Pair<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpozqzovu6.cs(28,48): error CS1061: ''long'' does not contain a definition
    for ''Clone'' and no accessible extension method ''Clone'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Debug.Assert(l.Count > 0);\n
    \       if (l.Count == 1)\n            return false;\n        var l2 = l.Where(e
    => e != 0L).ToList();\n        if (l2.Count != l.Count)\n            return false;\n\n
    \       int l2_minus_minus_one = l2.Count - 1;\n        int l_minus_minus_one
    = l.Count - 1;\n        bool l2_minus_minus_one_equals_l_minus_minus_one = (l2[l2_minus_minus_one]
    - l[l2_minus_minus_one] == 0L);\n        bool l_minus_minus_one_equals_l2_minus_minus_one
    = (l[l2_minus_minus_one] - l2[l2_minus_minus_one] == 0L);\n\n        // l2[l2_minus_minus_one]
    == l[l2_minus_minus_one]\n        if (l2_minus_minus_one_equals_l_minus_minus_one)\n
    \           return false;\n\n        // l[l2_minus_minus_one] == l2[l2_minus_minus_one]\n
    \       if (l_minus_minus_one_equals_l2_minus_minus_one)\n            return false;\n\n
    \       // l2[l2_minus_minus_one] + l2[l2_minus_minus_one]\n        int sum =
    (l2[l2_minus_minus_one] + l2[l2_minus_minus_one]) + l[l2_minus_minus_one];\n        if
    (sum == 0L) {\n            // l2[l2_minus_minus_one] == l[l2_minus_minus_one]\n
    \           // l[l2_minus_minus_one] == l2[l2_minus_minus_one]\n            //
    l[l2_minus_minus_one] + l2[l2_minus_minus_one] == l2[l2_minus_minus_one] + l2[l2_minus_minus_one]\n
    \           if (l2_minus_minus_one_equals_l_minus_minus_one && l_minus_minus_one_equals_l2_minus_minus_one)\n
    \               return true;\n            return false;\n        }\n\n        bool
    sum_in_right_neighborhood = false;\n\n        int l2_minus_minus_two = l2.Count
    - 2;\n        int l_minus_minus_two = l.Count - 2;\n        bool l2_minus_minus_two_equals_l_minus_minus_two
    = (l2[l2_minus_minus_two] - l[l2_minus_minus_two] == 0L);\n        bool l_min\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4v8khi1v.cs(59,19): error CS1002: ; expected

    '
  timestamp: 1659976877
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long zeros = 0;\n        foreach(var
    i in l) {\n            zeros += i;\n        }\n        long sum = l.Sum();\n        if(sum
    < zeros) {\n            return false;\n        } else if(sum > zeros) {\n            return
    true;\n        } else {\n            foreach(var i in l) {\n                long
    new_zeros = zeros + i;\n                if(new_zeros == sum) {\n                    return
    true;\n                }\n            }\n            return false;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d41824971a649559f0b1a6d833b722d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d41824971a649559f0b1a6d833b722d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int max = l.Max();\n        int
    min = l.Min();\n        double sum = 0;\n        foreach (int a in l)\n            sum
    += a;\n        bool result = (sum == 0);\n        double average = (sum / l.Count);\n
    \       Console.WriteLine(\"max {0,-15} | min {0,-15} | sum {0,-15} |\", max,
    min, sum);\n        Console.WriteLine(\"average {0,-15} | result {0,-15} |\",
    average, result);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0ugf0q3.cs(23,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpf0ugf0q3.cs(24,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count <= 1) return false;\n
    \       if (l.Count == 1) return true;\n\n        long sum = 0;\n        long
    sum2 = 0;\n        foreach (long i in l) {\n            sum += i;\n            sum2
    += i * i;\n        }\n\n        // If the sum is zero, there cannot be any pairs
    with this sum.\n        if (sum == 0) return false;\n\n        // If the sum is
    non-zero, there must be at least one pair of (non-zero)\n        // elements with
    this sum.\n        if (sum2 == sum) return false;\n\n        // We have to sum
    up each pair one at a time, and check if each\n        // element in the pair
    is equal to the sum. This means that the pair\n        // contains at least one
    pair of zero-sum elements, and no elements are\n        // distinct by that pair.\n
    \       bool found = false;\n        foreach (var p in l.Take(l.Count / 2)) {\n
    \           int count = 0;\n            foreach (var i in l) {\n                if
    (i != p && i != 0) {\n                    count += 1;\n                    if
    (count == 2) {\n                        found = true;\n                    }\n
    \               }\n            }\n        }\n        return found;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af613ccaf9ba42cd9569b075252793b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af613ccaf9ba42cd9569b075252793b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (var x in l)\n            sum += x;\n        bool equal = false;\n        foreach
    (var x in l)\n            equal |= (x == 0);\n        return equal && !(l.Count
    - l.FindAll(n => n == 0).Count);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmopwc2ao.cs(29,25): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''int''

    '
  timestamp: 1659976878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var sum = 0;\n        foreach
    (var e in l)\n            sum += e;\n        List<long> zeros = new List<long>();\n
    \       foreach (var e in l)\n            if (e == 0)\n                zeros.Add(e);\n
    \       if (zeros.Count == 1)\n            return false;\n        else if (zeros.Count
    > 1)\n            return true;\n        return Enumerable.Range(0, l.Count - 1).All(i
    =>\n        Enumerable.Range(i + 1, l.Count - i).All(j =>\n        PairsSumToZero(l.GetRange(i,
    l.Count - j).ToList())));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmeiuq530.cs(25,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) {\n            throw
    new ArgumentException(\"List cannot be empty.\", \"l\");\n        }\n\n        long
    sum = 0;\n        long sum2 = 0;\n        foreach (long num in l) {\n            sum
    += num;\n            sum2 += num;\n        }\n        return sum == 0 && sum2
    == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9b4e0b2f4544601923cf09d96488f2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9b4e0b2f4544601923cf09d96488f2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // this algorithm is based
    on this one\n        bool ok = false;\n        long sum = 0;\n        long zero
    = 0;\n        long count = 0;\n        foreach (long n in l) {\n            if
    (n == 0) {\n                count++;\n                zero = n;\n            }
    else {\n                sum += n;\n            }\n        }\n        if (count
    <= 2) {\n            if (sum != 0) {\n                ok = true;\n            }\n
    \       }\n        return ok;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98e696126a7340b3863e0cd0780b2406>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98e696126a7340b3863e0cd0780b2406>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // write your code here\n
    \       List<long> result = new List<long>();\n        long total = 0L;\n        foreach
    (long element in l) {\n            if (total < 0 && element < 0) {\n                result.Add(element);\n
    \               total = element;\n            } else if (total >= 0 && element
    > 0) {\n                total = total + element;\n                if (total ==
    0) {\n                    return true;\n                } else {\n                    result.Add(total);\n
    \               }\n                total = 0L;\n            } else if (total <
    0 && element < 0) {\n                total = element;\n            } else if (total
    < 0 && element > 0) {\n                result.Add(element);\n                total
    = element;\n            } else {\n                return false;\n            }\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f8745c072ce4defb334c26bcb94ee4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f8745c072ce4defb334c26bcb94ee4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long total = 0;\n        for
    (long k : l)\n            total += k;\n        if (l.Count == 2) return l[0] +
    l[1] == 0;\n        long x = 0;\n        for (long k : l)\n            if (k >
    0) {\n                long y = k - total;\n                x += (x << 1) + y;\n
    \           }\n        return x == 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6j5pa7uy.cs(24,21): error CS1002: ; expected

    /tmp/tmp6j5pa7uy.cs(24,21): error CS1525: Invalid expression term '':''

    /tmp/tmp6j5pa7uy.cs(24,21): error CS1001: Identifier expected

    /tmp/tmp6j5pa7uy.cs(28,21): error CS1002: ; expected

    /tmp/tmp6j5pa7uy.cs(28,21): error CS1525: Invalid expression term '':''

    /tmp/tmp6j5pa7uy.cs(28,21): error CS1001: Identifier expected

    '
  timestamp: 1659976877
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() < 2) {\n            return
    false;\n        }\n        long first_element = l[0];\n        long second_element
    = l[1];\n\n        long sum_of_first_two_elements = first_element + second_element;\n\n
    \       if (sum_of_first_two_elements > 0) {\n            long threeSum = 0;\n
    \           threeSum = first_element + second_element + third_element;\n\n            bool
    pair_sum_to_zero = (threeSum == 0);\n            return pair_sum_to_zero;\n        }
    else {\n            return false;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppbw6ggxc.cs(33,57): error CS0103: The name ''third_element'' does not
    exist in the current context

    '
  timestamp: 1659976878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, long> myDict
    = new Dictionary<long, long>();\n        foreach (var x in l) {\n            if
    (myDict.ContainsKey(x - myDict[x])) {\n                return false;\n            }\n
    \           myDict[x] = x;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:
    The given key '1' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PairsSumToZero
    (System.Collections.Generic.List`1[T] l) [0x0001a] in <ed8925539fe7420e9b94e4ef7f34e0c8>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <ed8925539fe7420e9b94e4ef7f34e0c8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException:
    The given key '1' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PairsSumToZero
    (System.Collections.Generic.List`1[T] l) [0x0001a] in <ed8925539fe7420e9b94e4ef7f34e0c8>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <ed8925539fe7420e9b94e4ef7f34e0c8>:0
    \n"
  stdout: ''
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var s = l.Sum();\n        if
    (s == 0L) return false;\n        HashSet<long> hs = new HashSet<long>();\n        for
    (int i = 0; i < l.Count; i++)\n            if (hs.Add(l[i])) \n                return
    true;\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bf030ef50cb4a5cbc68b71e9a112f16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7bf030ef50cb4a5cbc68b71e9a112f16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // return whether a pairwise
    list with only two distinct elements sums to zero.\n        // pairs (i,j): i
    - j\n        // the list must be sorted in ascending order.\n        if (l.Count
    < 2) {\n            return false;\n        }\n        long i = 0;\n        long
    j = 1;\n        long sum = 0;\n        while (i + j < l.Count) {\n            sum
    += l[(i + j) / 2];\n            if (sum == 0) {\n                return true;\n
    \           }\n            i += 1;\n            j += 1;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdj0539sq.cs(33,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long num = 0;\n        long
    temp = 0;\n        bool result = false;\n        foreach(var x in l)\n        {\n
    \           temp += x;\n            if (temp == 0) result = true;\n            num
    += x;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97f7fb817ac84d9581f9ef5b42052409>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97f7fb817ac84d9581f9ef5b42052409>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (long n in l) {\n            if (n != 0) sum += n;\n        }\n        return
    sum == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9901d509227d4eb1aa4c8c3f54d08a2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9901d509227d4eb1aa4c8c3f54d08a2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) {\n            return
    false;\n        }\n        var sum = l.Sum();\n        int i = 0;\n        int
    j = 0;\n        while (i < l.Count && j < l.Count) {\n            if (l[i] ==
    0) {\n                i++;\n                continue;\n            }\n            if
    (l[j] == 0) {\n                j++;\n                continue;\n            }\n
    \           if (l[i] + l[j] == sum) {\n                return true;\n            }\n
    \           if (l[i] + l[j] > sum) {\n                j++;\n            } else
    {\n                i++;\n            }\n        }\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a81675d6ff24ae7b4ad1e4b3d120129>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a81675d6ff24ae7b4ad1e4b3d120129>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool okay = true;\n        HashSet<long>
    seen = new HashSet<long>();\n        foreach (long e in l) {\n            if (seen.Contains(e))
    {\n                okay = false;\n                break;\n            }\n            seen.Add(e);\n
    \       }\n        return okay;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7e4ae2fdcd04ceeb4ba6249ae27d868>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7e4ae2fdcd04ceeb4ba6249ae27d868>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976878
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // create a hashset to store
    the numbers that sum to 0\n        HashSet<long> numbers = new HashSet<long>();\n
    \       // find all the numbers that sum to 0\n        foreach (long number in
    l) {\n            if (number > 0) {\n                numbers.Add(number);\n            }\n
    \       }\n        // if the hash set has two distinct numbers, then there exist
    two\n        // distinct integers that sum to zero.\n        return numbers.Count()
    == 2\n            && numbers.Contains(0L) && numbers.Contains(0L);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce94c68477ba45fb82b4563cb578eb08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce94c68477ba45fb82b4563cb578eb08>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() == 0) return
    false;\n        bool oneZero = l.Sum() >= 0L;\n        bool twoZero = l.Sum()
    <= 0L;\n        if (oneZero && twoZero) return true;\n        if (oneZero) return
    true;\n        return false;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ce507fdca6d494ea9096e92958c7d28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ce507fdca6d494ea9096e92958c7d28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new List<Tuple<long,
    long>>();\n        foreach (var n in l)\n            if (l.Sum() == 0)\n                pairs.Add(new
    Tuple<long, long>(n, l.Sum()));\n        return pairs.Distinct().Count() == 2;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <041b5f652b714b2fa551c0ddffc6064b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <041b5f652b714b2fa551c0ddffc6064b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var set = new HashSet<long>();\n
    \       foreach (var i in l)\n            set.Add(i);\n\n        if (set.Count
    == 0)\n            return false;\n\n        foreach (var i in l)\n            set.Remove(i);\n\n
    \       return set.Count == 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd834f3466864614b2549275a0ca4ee0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd834f3466864614b2549275a0ca4ee0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long pairs = 0;\n        long
    sum = 0;\n        for (int i = 0; i < l.Count - 1; i++) {\n            pairs +=
    l[i] * l[i + 1];\n            sum += l[i];\n        }\n        return (sum ==
    0) && (pairs < 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3569f091b7994208aff49212cb8616cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3569f091b7994208aff49212cb8616cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new List<Tuple<long,
    long>>();\n        foreach (var item in l)\n        {\n            if (item.Equals(0))\n
    \           {\n                continue;\n            }\n            var pair
    = (item - item.Equals(0L)) >> 1;\n            if (pairs.Contains(pair))\n            {\n
    \               return true;\n            }\n            pairs.Add(pair);\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp96jql8ul.cs(30,25): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> pairs = new
    HashSet<long>();\n        foreach (long x in l)\n            pairs.Add(x);\n        bool
    result = false;\n        foreach (long x in l) {\n            if (pairs.Contains(x
    - 1))\n                pairs.Remove(x - 1);\n            else {\n                result
    = true;\n                break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <624fac7277ff4deaa90aa0f50b83e44b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <624fac7277ff4deaa90aa0f50b83e44b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() > 2) {\n            return
    false;\n        }\n        if (l.Count() == 2) {\n            return (l.ElementAt(0)
    == l.ElementAt(1) || l.ElementAt(0) == (0 - l.ElementAt(1)));\n        }\n        if
    (l.Count() == 3) {\n            return (l.ElementAt(0) == l.ElementAt(1) && l.ElementAt(1)
    == l.ElementAt(2) || l.ElementAt(0) == (0 - l.ElementAt(1)) && l.ElementAt(1)
    == (0 - l.ElementAt(2)));\n        }\n        if (l.Count() == 4) {\n            return
    (l.ElementAt(0) == l.ElementAt(1) && l.ElementAt(1) == l.ElementAt(2) && l.ElementAt(2)
    == l.ElementAt(3) ||\n            l.ElementAt(0) == (0 - l.ElementAt(1)) && l.ElementAt(1)
    == (0 - l.ElementAt(2)) && l.ElementAt(2) == (0 - l.ElementAt(3)));\n        }\n
    \       if (l.Count() == 5) {\n            return (l.ElementAt(0) == l.ElementAt(1)
    && l.ElementAt(1) == l.ElementAt(2) && l.ElementAt(2) == l.ElementAt(3) && l.ElementAt(3)
    == l.ElementAt(4) ||\n            l.ElementAt(0) == (0 - l.ElementAt(1)) && l.ElementAt(1)
    == (0 - l.ElementAt(2)) && l.ElementAt(2) == (0 - l.ElementAt(3)) && l.ElementAt(3)
    == (0 - l.ElementAt(4)));\n        }\n        if (l.Count() == 6) {\n            return
    (l.ElementAt(0) == l.ElementAt(1) && l.ElementAt(1) == l.ElementAt(2) && l.ElementAt(2)
    == l.ElementAt(3) && l.ElementAt(3) == l.ElementAt(4) && l.ElementAt(4) == l.ElementAt(5)
    ||\n            l.ElementAt(0) == (0 - l.ElementAt(1)) && l.ElementAt(1) == (0
    - l.ElementAt(2)) && l.ElementAt(2) == (0 - l.ElementAt(3)) && l.ElementAt(3)
    == (0 - l.ElementAt(4)) && l.ElementAt(4) == (0 - l.ElementAt(5)));\n        }\n
    \       if (l.Count() == 7) {\n            return (l.ElementAt(0) == l.ElementAt(1)
    && l.ElementAt(1) == l.ElementAt(2) && l.ElementAt(2) == l.ElementAt(3) && l.ElementAt(3)
    == l.ElementAt(4) && l.ElementAt(4) == l.ElementAt(5) && l.ElementAt(5) == l.ElementAt(6)
    ||\n            l.ElementAt(0) == (0 - l.ElementAt(1)) && l.ElementAt(1) == (0
    - l.ElementAt(2)) && l.ElementAt(2) == (0 - l.ElementAt(3)) && l.ElementAt(3)
    == (0 - l.ElementAt(4)) \n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg0t37qq1.cs(46,177): error CS1026: ) expected

    /tmp/tmpg0t37qq1.cs(46,177): error CS1002: ; expected

    /tmp/tmpg0t37qq1.cs(48,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpg0t37qq1.cs(60,2): error CS1513: } expected

    '
  timestamp: 1659976878
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() < 2) return
    false;\n        long[] values = new long[l.Count - 1];\n        for (int i = 1;
    i < l.Count; i++) values[i - 1] = (long)Math.Pow(2L, i);\n        if (values.All(i
    => l.Take(i).Sum() == 0)) \n            return true;\n        long first = l.Take(values.Length).Sum();\n
    \       long second = l.Skip(values.Length).Take(values.Length).Sum();\n        if
    (first == second)\n            return false;\n        long third = l.Take(3).Sum();\n
    \       long fourth = l.Skip(3).Sum();\n        if (first + second == third +
    fourth)\n            return false;\n        long fifth = l.Take(5).Sum();\n        long
    sixth = l.Skip(5).Sum();\n        if (first + second + third == fifth + sixth)\n
    \           return false;\n        long seventh = l.Take(7).Sum();\n        long
    eighth = l.Skip(7).Sum();\n        if (first + second + third + fourth == seventh
    + eighth)\n            return false;\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncnhvap8.cs(26,36): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) {\n            return
    false;\n        }\n        List<long> l1 = l.ToList<long>();\n        Debug.Assert(l1.Count
    >= 2);\n\n        long n = l1.Count;\n        Debug.Assert(n > 1);\n        if
    (l1[n - 1] == 0) {\n            return true;\n        }\n\n        HashSet<long>
    set = new HashSet<long>(l1);\n        for (long i = 0; i < l1.Count - 1; i++)
    {\n            long v1 = l1.ElementAtOrDefault(i);\n            long v2 = l1.ElementAtOrDefault(++i);\n
    \           set.Add(v1 + v2);\n            set.Remove(v1 - v2);\n        }\n\n
    \       if (set.Count < 2) {\n            return false;\n        }\n\n        foreach
    (long v in set) {\n            if (v != 0) {\n                return false;\n
    \           }\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7b_n_yy.cs(31,16): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpc7b_n_yy.cs(37,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpc7b_n_yy.cs(38,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // your solution goes here\n
    \       Dictionary<int, List<long>> dictionary = new Dictionary<int, List<long>>();\n
    \       for (int i = 0; i < l.Count; i++)\n        {\n            dictionary.AddOrReplace(l[i],
    new List<long>());\n        }\n\n        foreach(var entry in dictionary)\n        {\n
    \           var currentPair = entry.Key;\n            foreach (var otherPair in
    dictionary)\n            {\n                if (entry.Value == 0 && otherPair.Value
    != 0)\n                {\n                    dictionary.Remove(currentPair);\n
    \                   dictionary.Remove(otherPair);\n                    return
    true;\n                }\n            }\n        }\n\n        foreach (var entry
    in dictionary)\n        {\n            var currentPair = entry.Key;\n            foreach
    (var otherPair in dictionary)\n            {\n                if (entry.Value
    == 0 && otherPair.Value == 0)\n                {\n                    dictionary.Remove(currentPair);\n
    \                   dictionary.Remove(otherPair);\n                    return
    true;\n                }\n            }\n        }\n\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctsxt0a7.cs(27,24): error CS1061: ''Dictionary<int, List<long>>'' does
    not contain a definition for ''AddOrReplace'' and no accessible extension method
    ''AddOrReplace'' accepting a first argument of type ''Dictionary<int, List<long>>''
    could be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpctsxt0a7.cs(35,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmpctsxt0a7.cs(35,41): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmpctsxt0a7.cs(38,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<int,
    System.Collections.Generic.List<long>>'' to ''int''

    /tmp/tmpctsxt0a7.cs(49,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmpctsxt0a7.cs(49,41): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmpctsxt0a7.cs(52,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<int,
    System.Collections.Generic.List<long>>'' to ''int''

    '
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool one = false;\n        bool
    two = false;\n\n        // We only need to keep track of two distinct elements
    that sum to zero.\n        // The rest will add up later.\n        List<int> elements
    = new List<int>();\n\n        for (int i = 0; i < l.Count; i++) {\n            int
    sum = 0;\n            bool found = false;\n\n            for (int j = 0; j < elements.Count;
    j++) {\n                sum += l[i];\n                if (sum == 0)\n                    found
    = true;\n                if (sum > 0)\n                    break;\n            }\n\n
    \           if (found)\n                continue;\n\n            elements.Add(l[i]);\n
    \       }\n\n        for (int i = 0; i < elements.Count; i++) {\n            int
    sum = 0;\n            for (int j = 0; j < elements.Count; j++) {\n                sum
    += elements[j];\n                if (sum > 0)\n                    break;\n            }\n\n
    \           if (sum == 0) {\n                one = true;\n                break;\n
    \           }\n        }\n\n        for (int i = 0; i < elements.Count; i++) {\n
    \           int sum = 0;\n            for (int j = 0; j < elements.Count; j++)
    {\n                sum += elements[j];\n                if (sum < 0)\n                    break;\n
    \           }\n\n            if (sum == 0)\n                two = true;\n        }\n\n
    \       return one && two;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp323vz2kd.cs(35,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp323vz2kd.cs(45,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) {\n            return
    false;\n        }\n\n        var n = l.Count;\n        var m = n;\n        var
    sum = 0;\n\n        while (m > 1) {\n            m >>= 1;\n            sum -=
    (l[m] + l[m - 1]);\n        }\n\n        return (sum == 0L);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqix5bgzs.cs(33,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long zero = 0;\n        long
    sum = 0;\n        long currSum = 0;\n        foreach(var e in l) {\n            sum
    += e;\n            currSum += e;\n            if (sum - currSum == 0)\n                return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba0718abdb354cacb103d9ffe5d9413a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba0718abdb354cacb103d9ffe5d9413a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int n = l.Count;\n        for
    (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if
    (l[i] + l[j] == 0)\n                    return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool ret = true;\n        long
    tempSum = 0;\n        foreach (var item in l) {\n            if (tempSum != 0)
    tempSum += item;\n            else ret = false;\n            if (tempSum == 0)
    break;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1da08e722eb5420db42b8ba034dfeb14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1da08e722eb5420db42b8ba034dfeb14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) return false;\n
    \       long sum = 0;\n        for (int i = 0; i < l.Count; i++) {\n            sum
    += l[i];\n        }\n        bool leftPairFound = false;\n        bool rightPairFound
    = false;\n        for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i]
    == sum - 1 && sum == 0) {\n                leftPairFound = true;\n            }\n
    \           if (sum == 0 && l[i] == sum - 1) {\n                rightPairFound
    = true;\n            }\n        }\n        return leftPairFound && rightPairFound;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01de14948bf8415ba2e0db3da009fa00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01de14948bf8415ba2e0db3da009fa00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // This solution first sorts
    the list.\n        // Then we look for pairs whose sum to zero.\n        // The
    pairs are ordered from smallest to largest.\n        l.Sort();\n        if (l.Count
    == 1) return false;\n        if (l.Count == 2) return true;\n        if (l.Count
    > 2 && l.Skip(1).SequenceEqual(l.Take(2))) return false;\n        long a = l[0],
    b = l[1];\n        long c = a + b == 0 ? b : a + b;\n        List<long> pairs
    = new List<long>();\n        List<long> pairs1 = new List<long>();\n        List<long>
    pairs2 = new List<long>();\n        long sum = 0;\n        foreach (long d in
    l) {\n            if (d == c) {\n                pairs.Add(d);\n                sum
    += d;\n            }\n            if (sum == 0) {\n                pairs1.Add(d);\n
    \               pairs2.Add(c);\n            }\n        }\n        if (pairs.Count
    != 1 && pairs.Count != 2) {\n            return false;\n        }\n        if
    (pairs1.Count != 1 && pairs1.Count != 2) {\n            return false;\n        }\n
    \       if (pairs2.Count != 1 && pairs2.Count != 2) {\n            return false;\n
    \       }\n        long d = pairs1[0], e = pairs2[0];\n        return pairs.Contains(d)
    && pairs.Contains(e) && pairs.Count == 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvplkn_fr.cs(36,23): error CS0136: A local or parameter named ''d'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 1) {\n            return
    false;\n        }\n        var results = new List<long>();\n        var pairs
    = l.GroupBy(x => new long[] { x % 2, x % 3 + x % 5 }).Where(x => x.Count() ==
    2).Select(x => x.Key).ToList();\n        var zeroes = l.Where(x => x % 2 == 0);\n
    \       foreach (var pair in pairs) {\n            int a = pair[0];\n            int
    b = pair[1];\n            bool pairValid = false;\n            foreach (var zero
    in zeroes) {\n                if (zero > a && zero > b) {\n                    pairValid
    = true;\n                    break;\n                }\n            }\n            if
    (pairValid) {\n                results.Add(pair[0]);\n                results.Add(pair[1]);\n
    \           }\n        }\n        if (results.Count != 0) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_t7ss4k6.cs(30,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_t7ss4k6.cs(31,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long total = 0;\n        bool
    any = false;\n        foreach (long num in l) {\n            total = total + num;\n
    \           if (total < 0) {\n                any = true;\n                break;\n
    \           }\n        }\n        return !any;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a27f8d79c014370878253a682a23d8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a27f8d79c014370878253a682a23d8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.TakeWhile(i => l.TakeWhile(j
    => i + j == 0).Count() == 2).Count() != l.Count() - 1;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a059cb124204317a5c9599fb6f54643>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a059cb124204317a5c9599fb6f54643>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() != 2)\n            return
    false;\n        int sum = 0;\n        foreach (int i in l)\n            sum +=
    i;\n        if (sum != 0)\n            return false;\n        int first = 0;\n
    \       int second = l.Count - 1;\n        if (first == second)\n            return
    false;\n        while (first < second) {\n            int m = (first + second)
    / 2;\n            if (m[first] - m[second] == 0)\n                return true;\n
    \           if (m[first] + m[second] >= 0)\n                first = m+1;\n            else\n
    \               second = m - 1;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphgfxwlbt.cs(36,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmphgfxwlbt.cs(36,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmphgfxwlbt.cs(38,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmphgfxwlbt.cs(38,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    '
  timestamp: 1659976879
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.GroupBy(x => x).Any(g
    => g.Sum() != 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f796aa990f0d48ceadf75db6742db9a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f796aa990f0d48ceadf75db6742db9a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> result = new List<long>();\n
    \       foreach (int item in l) {\n            bool found = false;\n            foreach
    (int r in result) {\n                found = found || item+r == 0;\n            }\n
    \           if (!found) {\n                result.Add(item);\n            }\n
    \       }\n        return result.Count == 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <880026a4a4434d078edad4a6fe87c40d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <880026a4a4434d078edad4a6fe87c40d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count <= 1) return false;\n\n
    \       var first = l.Take(l.Count / 2);\n        var second = l.Skip(l.Count
    / 2);\n\n        var sum = first.Sum();\n        var second = second.Sum();\n\n
    \       if (sum != 0 || second != 0) return false;\n\n        var firstHash =
    first.OrderBy(x => x).ToArray();\n        var secondHash = second.OrderBy(x =>
    x).ToArray();\n\n        return firstHash == secondHash;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpand_gk4e.cs(29,13): error CS0128: A local variable or function named ''second''
    is already defined in this scope

    /tmp/tmpand_gk4e.cs(31,25): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''IEnumerable<long>'' and ''int''

    '
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0)\n            return
    false;\n        int n = l.Count;\n        long sum = 0;\n        for (int i =
    0; i < n; i++) {\n            long x = l[i];\n            sum += x;\n        }\n
    \       if (sum == 0)\n            return false;\n        long[] x = l.ToArray();\n
    \       Array.Sort(x);\n        for (int i = 0; i < n; i++) {\n            long
    y = x[i];\n            while (y + 1 < n && sum - y > 0) {\n                sum
    += y;\n                y += 1;\n            }\n            if (sum == 0)\n                return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpurvply2e.cs(28,18): error CS0136: A local or parameter named ''x'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976879
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 1) return false;\n
    \       if (l.Count == 2) return true;\n\n        var a = l[0], b = l[1], c =
    l[0], d = l[1], e = l[0];\n        while (true) {\n            if (a + b == c
    && a + d == e && b + d == e) return true;\n            if (b + c == d && b + e
    == e) return true;\n            if (c + d == e && c + e == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return true;\n            if
    (b + d == e) return true;\n            if (c + d == e) return true;\n            if
    (c + d == e) return true;\n            if (b + c == d) return true;\n            if
    (a + b == c) return true;\n            if (a + d == e) return \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3z_8k9_s.cs(88,35): error CS1525: Invalid expression term ''}''

    /tmp/tmp3z_8k9_s.cs(88,35): error CS1002: ; expected

    /tmp/tmp3z_8k9_s.cs(90,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3z_8k9_s.cs(102,2): error CS1513: } expected

    '
  timestamp: 1659976879
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0 || l.Count
    == 1) return false;\n        var two = l.Skip(1).Skip(1).FirstOrDefault();\n        var
    three = l.Skip(1).FirstOrDefault();\n        if (two == null || three == null)
    return false;\n        if (two + three == 0) return true;\n        if (three >
    two) return PairsSumToZero(l);\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976885
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // write your code here\n
    \       bool check = false;\n        foreach (var i in l) {\n            foreach
    (var j in l) {\n                if (i != j && i != 0 && j != 0 && i + j == 0 &&
    i != j && i != 0 && j != 0)\n                    check = true;\n            }\n
    \       }\n        return check;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long zero = l.Sum();\n        return
    l.Distinct().Count() >= 2\n            && l.First() + (l.Last() - l.First()) ==
    zero;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81ed261113cd48f9ba2e2128000586fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81ed261113cd48f9ba2e2128000586fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool a = false;\n        int
    count = 0;\n        long sum = 0;\n        long sum2;\n        foreach(var el
    in l) {\n            sum += el;\n        }\n        sum2 = 0;\n        foreach(var
    el in l) {\n            sum2 += el;\n        }\n        if (sum == 0 && sum2 ==
    0) {\n            count++;\n        }\n        else {\n            if (sum ==
    0 && sum2 > 0) {\n                count++;\n                a = true;\n            }\n
    \           else if (sum > 0 && sum2 == 0) {\n                count++;\n            }\n
    \           else if (sum < 0 && sum2 > 0) {\n                count++;\n                a
    = true;\n            }\n            else {\n                count++;\n            }\n
    \       }\n        if (count == l.Count) {\n            a = true;\n        }\n
    \       return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54d18c93bc2d491da660c63d15e45d50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54d18c93bc2d491da660c63d15e45d50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> l2 = new List<long>(l);\n
    \       long zeroSum = GetZeroSum(l);\n        l2.Remove(zeroSum);\n        if
    (l2.Count == 1) return false;\n        return l2.Contains(zeroSum);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1jn8gcg4.cs(24,24): error CS0103: The name ''GetZeroSum'' does not exist
    in the current context

    '
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool foundTwoPairs = false;\n
    \       long sum = 0;\n        long count = 0;\n        foreach (long x in l)
    {\n            sum += x;\n            if (sum == 0) count++;\n            if (count
    > 2) foundTwoPairs = true;\n        }\n        return foundTwoPairs;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13213a88e4dc46fe81e43cd9a9b7e609>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13213a88e4dc46fe81e43cd9a9b7e609>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (long i in l) {\n            sum += i;\n        }\n\n        long zero = 0;\n
    \       foreach (long i in l) {\n            zero += i;\n        }\n\n        return
    ((sum + zero) == 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0f521343d044af9b073d096c245ef42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0f521343d044af9b073d096c245ef42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l == null || l.Count ==
    0) return false;\n        long s = 0;\n        bool hasTwoPairs = false;\n        foreach
    (var el in l) {\n            if (s == 0) {\n                s = el;\n            }\n
    \           else if (el == 0 || el == s) return false;\n            else if (el
    != s) {\n                hasTwoPairs = true;\n                s = el;\n            }\n
    \       }\n        return hasTwoPairs;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3501342410814a7eb1000757de92a3b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3501342410814a7eb1000757de92a3b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = l.Sum();\n        if
    (sum < 0)\n            sum = -sum;\n        return l.Distinct().Count() != 2 ||
    l.Count(a => a > 0) != 2 || l.Count(a => a < 0) == 0 || sum == 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb5783a593ae4b6b961435317d04328f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb5783a593ae4b6b961435317d04328f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new Dictionary<long,
    long>();\n        foreach (var number in l) {\n            if (pairs.TryGetValue(number
    - 1, out long value)) {\n                if (value != 0) {\n                    return
    false;\n                }\n            }\n            pairs[number] = 1;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d9da0d477f8479eb9c98828aa31e05f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d9da0d477f8479eb9c98828aa31e05f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // your solution here\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn4bqkp3z.cs(22,24): error CS0161: ''Problem.PairsSumToZero(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long x = 0;\n        foreach
    (var n in l)\n            x += n;\n        if (x == 0)\n            return false;\n
    \       long y = 0;\n        foreach (var n in l)\n            y -= n;\n        if
    (y == 0)\n            return true;\n        return false;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <538abfb0c2064b7e97fb644bdb5f8987>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <538abfb0c2064b7e97fb644bdb5f8987>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, long> dictionary
    = new Dictionary<long, long>();\n        foreach (long k in l) {\n            if
    (dictionary.ContainsKey(k)) {\n                dictionary.Add(k, dictionary[k]
    + k);\n            } else {\n                dictionary.Add(k, k);\n            }\n
    \       }\n        return dictionary.ContainsKey(0);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1705fceb33c0481aba685b6e84060572>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key
    has already been added. Key: 1\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x0002f]
    in <1705fceb33c0481aba685b6e84060572>:0 \n  at Problem.Main (System.String[] args)
    [0x0003b] in <1705fceb33c0481aba685b6e84060572>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: An item with the same key has already been added. Key:
    1\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key,
    TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x0002f]
    in <1705"
  stdout: ''
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new List<long>();\n
    \       var sum = l.Sum();\n        var i = 0;\n        while (i < l.Count) {\n
    \           pairs.Add(l[i]);\n            pairs.Add(sum - l[i]);\n            i++;\n
    \       }\n        var i = l.Count - 1;\n        while (i > 0) {\n            pairs.Add(l[i]);\n
    \           pairs.Add(sum - l[i]);\n            i--;\n        }\n        if (pairs.Count()
    == 2) return true;\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz_n1_xmo.cs(31,13): error CS0128: A local variable or function named ''i''
    is already defined in this scope

    '
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) return false;\n
    \       if (l.Count == 1) return l.Sum() == 0;\n        long[] arr = l.ToArray();\n
    \       long[] arr2 = new long[arr.Length];\n        long total = 0;\n        Array.Sort(arr);\n
    \       foreach (var l in arr) {\n            arr2[arr2.Length - 1 - l]++;\n            total
    += l;\n        }\n        if (arr2.Length > 0) {\n            for (int i = 1;
    i < arr2.Length; i++) {\n                if (arr2[i] == arr2[i-1]) return true;\n
    \           }\n            return false;\n        } else {\n            long sum
    = 0;\n            long product = 1;\n            for (int i = 2; i < arr.Length;
    i++) {\n                if (arr[i] > 0) product *= arr[i];\n                sum
    += arr[i];\n            }\n            return sum == 0 || product == 0;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk_wkjwcl.cs(29,22): error CS0136: A local or parameter named ''l'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) {\n            return
    false;\n        }\n\n        var sum = 0;\n        long last_val = l[0];\n        foreach
    (var item in l) {\n            sum += item;\n            if (sum > last_val) {\n
    \               return false;\n            }\n            last_val = sum;\n        }\n\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpujpb9zxp.cs(30,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var a = l.ToArray();\n        var
    sum = a.Sum();\n        // if there are two elements in the list that sum to zero\n
    \       if (a.Length > 0) {\n            // then there must be two distinct elements\n
    \           if ((a.Length == 2 && sum == 0) && a[0] == a[1]) return true;\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <416c6bee13eb4024bd9a6f9b69b9fb1e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <416c6bee13eb4024bd9a6f9b69b9fb1e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0)\n            return
    false;\n        int max_1 = l[0], max_2 = l[0];\n        for (int i = 1; i < l.Count;
    i++) {\n            if (l[i] > max_1)\n                max_2 = max_1;\n            else
    if (max_1 != max_2)\n                return false;\n            max_1 = l[i];\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpao075p6r.cs(25,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpao075p6r.cs(25,35): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpao075p6r.cs(31,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) return false;\n
    \       int first_sum = l.First();\n        int second_sum = l.First();\n        foreach
    (var x in l.Skip(1))\n        {\n            if (x < 0)\n                return
    false;\n            int sum = x + x;\n            if (sum == first_sum)\n            {\n
    \               second_sum = x;\n            }\n            if (sum == second_sum)\n
    \           {\n                first_sum = x;\n            }\n        }\n        return
    first_sum == 0 && second_sum == 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr4hja4a2.cs(24,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpr4hja4a2.cs(25,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpr4hja4a2.cs(30,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpr4hja4a2.cs(33,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpr4hja4a2.cs(37,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976880
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> pairs = new List<long>();\n
    \       foreach (var e in l) {\n            pairs.Add(e);\n            pairs.Add(0L
    - e);\n        }\n        HashSet<long> pairset = new HashSet<long>(pairs);\n
    \       if (pairset.Count() == 2) return true;\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4929cef1c1d4438084b6b348b1bee5c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4929cef1c1d4438084b6b348b1bee5c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long[] arr = l.ToArray();\n
    \       Array.Sort(arr);\n        long sum = arr.Sum();\n\n        for (int i
    = 0; i < arr.Length; i++) {\n            long j = i;\n            while (j++ <
    arr.Length) {\n                if (arr[j] - arr[i] > 0)\n                    break;\n
    \           }\n\n            if (j == arr.Length || arr[j] != 0)\n                return
    false;\n        }\n\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e36f1953deb14b0da6cb0c46d60deb28>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T]
    l) [0x00021] in <e36f1953deb14b0da6cb0c46d60deb28>:0 \n  at Problem.Main (System.String[]
    args) [0x0009e] in <e36f1953deb14b0da6cb0c46d60deb28>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00021]
    in <e36f1953deb14b0da6cb0c46d60deb28>:0 \n  at Problem.Main (System.String[] args)
    [0x0009e] in <e36f1953deb14b0da6cb0c46d60deb28>:0 \n"
  stdout: ''
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int[] c = new int[l.Count];\n
    \       long[] v = new long[l.Count];\n        int i, j, k;\n        for (i =
    0, j = 0, k = -1; i < l.Count && j != k; ++i, ++j) {\n            c[k] = j;\n
    \           v[i] = l[i];\n            for (; k >= 0 && v[k] == v[i]; ++k)\n            }\n
    \       return (c[0] == 0 && v[c.Length - 1] == 0);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqmessl6a.cs(29,48): error CS1525: Invalid expression term ''}''

    /tmp/tmpqmessl6a.cs(29,48): error CS1002: ; expected

    '
  timestamp: 1659976880
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count() < 2)\n            return
    false;\n\n        var l = l.OrderByDescending(x => x).ToList();\n\n        long
    twoSum = 0;\n        foreach (var item in l)\n        {\n            if (twoSum
    < 0 || twoSum == item || twoSum == item + l[0])\n            {\n                twoSum
    = item + l[0];\n            }\n        }\n\n        return twoSum == 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxmm4oiqa.cs(23,13): error CS0841: Cannot use local variable ''l'' before
    it is declared

    /tmp/tmpxmm4oiqa.cs(26,13): error CS0136: A local or parameter named ''l'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpxmm4oiqa.cs(26,17): error CS0841: Cannot use local variable ''l'' before
    it is declared

    '
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool flag = false;\n        HashSet<long>
    set = new HashSet<long>(l);\n        foreach(var x in set) {\n            foreach(var
    y in set) {\n                if(x == 0 && y == 0) return true;\n                if(x
    == y && x != 0) return false;\n            }\n        }\n        flag = false;\n
    \       foreach(var x in set) {\n            flag = flag || l.Contains(x);\n        }\n
    \       return flag;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73e9e29133074cf3aac0f77eed82e0af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73e9e29133074cf3aac0f77eed82e0af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Write your code here\n
    \       var zero = new List<long>();\n        var notZero = new List<long>();\n
    \       foreach (var n in l) {\n            if (n == 0) {\n                zero.Add(n);\n
    \           } else {\n                notZero.Add(n);\n            }\n        }\n\n
    \       if (zero.Count != notZero.Count && zero.Count != zero.Distinct().Count)
    {\n            return false;\n        } else {\n            if (zero.Count !=
    zero.Distinct().Count) {\n                return true;\n            }\n        }\n\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwkx0tuv.cs(34,44): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpdwkx0tuv.cs(37,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> zero = new List<long>();\n
    \       List<long> non_zero = new List<long>();\n        foreach (var n in l)
    {\n            zero.Add(0L);\n            non_zero.Add(n);\n        }\n        zero.Sort();\n
    \       non_zero.Sort();\n        long last_non_zero = 0;\n        bool ok = false;\n
    \       foreach (var n in non_zero) {\n            long cur_zero = 0;\n            for
    (int i = 1; i < zero.Count; i++) {\n                if (zero[i] == 0L) {\n                    cur_zero++;\n
    \                   if (cur_zero > last_non_zero) {\n                        ok
    = true;\n                        break;\n                    }\n                }
    else {\n                    break;\n                }\n            }\n            last_non_zero
    = cur_zero;\n            if (ok) {\n                break;\n            }\n        }\n
    \       return ok;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c7c55781d194ba78a60c0df18605a28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c7c55781d194ba78a60c0df18605a28>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long s = 0;\n        bool
    found = false;\n        foreach (long i in l) {\n            s += i;\n            if
    (s == 0) {\n                found = true;\n                break;\n            }\n
    \       }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa00dd92aea34162bb8bc8da1a231d4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa00dd92aea34162bb8bc8da1a231d4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var result = new Dictionary<long,
    long>();\n        foreach (var i in l) {\n            long sum = 0;\n            for
    (int j = 0; j < l.Count; j++)\n                sum += l[j];\n            if (result.ContainsKey(sum))\n
    \               return false;\n            result.Add(i, sum);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <efedeef1f46641728e3d4d78090b37cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <efedeef1f46641728e3d4d78090b37cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (long x in l)\n            sum += x;\n\n        int n = l.Count;\n\n        //
    precondition: n > 0\n        if (n == 0)\n            return false;\n\n        //
    precondition: n >= 1\n        if (n == 1)\n            return l[0] > 0;\n\n        //
    precondition: n - 1 >= 2\n        if (n - 1 >= 2)\n            return l[0] < 0
    && l[1] > 0;\n\n        // precondition: n - 2 >= 3\n        if (n - 2 >= 3)\n
    \           return l[0] < 0 && l[1] < 0 && l[2] > 0;\n\n        // precondition:
    n - 3 >= 4\n        if (n - 3 >= 4)\n            return l[0] < 0 && l[1] < 0 &&
    l[2] < 0 && l[3] > 0;\n\n        // precondition: n - 4 >= 5\n        if (n -
    4 >= 5)\n            return l[0] < 0 && l[1] < 0 && l[2] < 0 && l[3] < 0 && l[4]
    > 0;\n\n        // precondition: n - 5 >= 6\n        if (n - 5 >= 6)\n            return
    l[0] < 0 && l[1] < 0 && l[2] < 0 && l[3] < 0 && l[4] < 0 && l[5] > 0;\n\n        //
    precondition: n - 6 >= 7\n        if (n - 6 >= 7)\n            return l[0] < 0
    && l[1] < 0 && l[2] < 0 && l[3] < 0 && l[4] < 0 && l[5] < 0 && l[6] > 0;\n\n        //
    precondition: n - 7 >= 8\n        if (n - 7 >= 8)\n            return l[0] < 0
    && l[1] < 0 && l[2] < 0 && l[3] < 0 && l[4] < 0 && l[5] < 0 && l[6] < 0 && l[7]
    > 0;\n\n        // precondition: n >= 9\n        return l[0] < 0 && l[1] < 0 &&
    l[2] < 0 && l[3] < 0 && l[4] < 0 && l[5] < 0 && l[6] < 0 && l[7] < 0 && l[8] >
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10ced87ec41540319a3257a51fd7ac98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10ced87ec41540319a3257a51fd7ac98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0)\n            return
    false;\n        int s = l.Sum();\n        if (s > 0)\n            return false;\n
    \       var first = l[0];\n        if (l.Count() == 1)\n            return true;\n
    \       var second = l[1];\n        if (s.Equals(0) && first.Equals(second))\n
    \           return true;\n        var sum = l.Take(2).Sum();\n        return s.Equals(0)
    || sum.Equals(0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_h628zqi.cs(25,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Distinct().Count()
    != 1 && l.Sum() == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e94a9e28c254abb89979523dc48168a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e94a9e28c254abb89979523dc48168a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new List<long>();\n
    \       for (int i = 0; i < l.Count - 1; i++)\n            for (int j = i + 1;
    j < l.Count; j++)\n                if (l[i] + l[j] == 0)\n                    pairs.Add(l[i]
    + l[j]);\n        if (pairs.Count == 0)\n            return false;\n        var
    pairsWithSameSum = pairs.Distinct().ToList();\n        return pairsWithSameSum.Count
    == 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50173d292c8f45b088291fcd6123cf01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50173d292c8f45b088291fcd6123cf01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Distinct().Count()
    == 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9dc5e04a14e42b2aa6b61ac417d2b38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9dc5e04a14e42b2aa6b61ac417d2b38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) {\n            return
    false;\n        }\n        // Use an int variable to save O(n) memory.\n        int
    sum = 0;\n        foreach (var i in l) {\n            sum += i;\n        }\n        bool
    result = false;\n        if (sum == 0) {\n            result = true;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv8pw53dr.cs(29,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        BigInteger zero = new BigInteger(\"0\");\n
    \       BigInteger sum = new BigInteger(\"0\");\n        for (int i = 0; i < l.Count;
    i++) {\n            sum += l[i];\n        }\n        BigInteger twoSum = BigInteger.TwoSum(l.ToArray());\n
    \       return sum.Equals(twoSum, twoSum);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprw4fwnmv.cs(23,42): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmprw4fwnmv.cs(24,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmprw4fwnmv.cs(28,40): error CS0117: ''BigInteger'' does not contain a definition
    for ''TwoSum''

    /tmp/tmprw4fwnmv.cs(29,16): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    '
  timestamp: 1659976881
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) {\n            return
    false;\n        }\n        var sumToZero = l.Distinct().Sum();\n        return
    sumToZero == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00f2d5e38d064ca39ea7b9236405b832>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00f2d5e38d064ca39ea7b9236405b832>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var d = l.Distinct().Count();\n
    \       return d == 2;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5021c8e01b9b425ab491c3ef664c9720>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5021c8e01b9b425ab491c3ef664c9720>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool result = false;\n        if
    (l.Count > 0) {\n            l.Sort();\n            List<int> li = new List<int>();\n
    \           foreach (var i in l) {\n                int temp = i;\n                li[li.Count
    - 1] = temp;\n                li.Add((int)Math.Abs(temp));\n            }\n            result
    = li.Distinct().Count() == 2;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaty0lpd6.cs(28,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long total = 0;\n        foreach
    (var i in l) {\n            total += i;\n        }\n        if (total == 0)\n
    \           return true;\n        long remainder = total % 2;\n        return
    (remainder == 0) == (l[l.Count - 1] % 2) == 0;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc6tu5mls.cs(30,16): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''bool'' and ''long''

    '
  timestamp: 1659976881
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new List<int>((int)l.Count);\n
    \       var seen = new List<long>(l.Count);\n\n        for (int i = 0; i < l.Count;
    i++) {\n            if (seen[i] != -1L) {\n                for (int j = i+1; j
    < l.Count; j++) {\n                    if (seen[j] == -1L && l.ElementAt(i) ==
    l.ElementAt(j)) {\n                        seen[j] = l.ElementAt(i);\n                        pairs.Add(j);\n
    \                       pairs.Add(i);\n                        break;\n                    }\n
    \               }\n            }\n        }\n        if (pairs.Count == 0)\n            return
    true;\n        for (int i = 0; i < pairs.Count; i++) {\n            int j = pairs[i];\n
    \           if (seen[j] == 0L && i != 0) {\n                return false;\n            }\n
    \           seen[j] = 0;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PairsSumToZero
    (System.Collections.Generic.List`1[T] l) [0x00021] in <51567b22ae8d483d8c76ec694ab8e2ef>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <51567b22ae8d483d8c76ec694ab8e2ef>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.PairsSumToZero
    (System.Collections.Generic.List`1[T] l) [0x00021] in <51567b22ae8d483d8c76ec694ab8e2ef>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <51567b22ae8d483d8c76ec694ab8e2ef>:0
    \n"
  stdout: ''
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool found = false;\n        for
    (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] + l[i + 1] == 0)\n                found
    = true;\n        }\n        return found;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a679042536d4b0c84eb82ec49cb9830>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a679042536d4b0c84eb82ec49cb9830>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) return false;\n
    \       var sum = 0;\n        int i = 0;\n        foreach (var e in l) {\n            sum
    += e;\n            if (sum > 0) return false;\n            i += 1;\n            if
    (sum < 0) return false;\n            sum += i;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp084kb4f1.cs(27,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        var
    two = l.Where((x, i) => i % 2 == 0);\n        foreach (var pair in two) {\n            sum
    += pair;\n        }\n        if (sum == 0) return false;\n        var three =
    l.Where((x, i) => i % 3 == 0);\n        foreach (var pair in three) {\n            sum
    -= pair;\n        }\n        if (sum != 0) return false;\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c27507c6e5be434dac455ac9c4ce6359>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c27507c6e5be434dac455ac9c4ce6359>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> result = new List<long>();\n
    \       bool result = false;\n        bool first = true;\n        foreach (var
    x in l) {\n            if (first) {\n                result.Add(x);\n                if
    (x - 0 == 0)\n                    first = false;\n            } else {\n                int
    xx = x - 0;\n                int yy = result[result.Count - 1] - 0;\n                if
    (xx == yy) {\n                    if (result.Count > 1)\n                        result.RemoveAt(result.Count
    - 1);\n                } else {\n                    result.Add(x);\n                    result
    = PairsSumToZero(result);\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgesfr295.cs(24,14): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpgesfr295.cs(32,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgesfr295.cs(33,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgesfr295.cs(39,30): error CS0029: Cannot implicitly convert type ''bool''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpgesfr295.cs(43,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''bool''

    /tmp/tmpgesfr295.cs(24,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    '
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Distinct().Count()
    == 2 &&\n               l.Where((t, i) => t%2 == i%2).All(x => x == 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <927ec2bc7535434cac31d5d3465a442f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <927ec2bc7535434cac31d5d3465a442f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> zeroes = new List<long>();\n
    \       List<long> nonzeroes = new List<long>();\n        for (int i = 0; i <
    l.Count; i++) {\n            if (l[i] == 0) {\n                zeroes.Add(l[i]);\n
    \           }\n            else {\n                nonzeroes.Add(l[i]);\n            }\n
    \       }\n        // find pairs of zeroes\n        List<long> zeroePairs = zeroes.GroupBy(x
    => x).Where(x => x.Count() == 2).Select(x => x.First()).ToList();\n        //
    find pairs of nonzeros\n        List<long> nonzeroPairs = nonzeroes.GroupBy(x
    => x).Where(x => x.Count() == 2).Select(x => x.First()).ToList();\n        return
    zeroePairs.Count() != nonzeroPairs.Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f8eff647b7b4571a9da01be62abe6e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f8eff647b7b4571a9da01be62abe6e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2) return false;\n
    \       var pairs = new List<Pair<long, long>>();\n        for (int i = 0; i <
    l.Count; i++) {\n            pairs.Add(new Pair<long, long>(l[i], l[(i + 1) %
    l.Count]));\n        }\n        return l.GroupBy(p => p.Item1).All(g => g.Count()
    == 2 && g.Select(p => p.Item2).Sum() == 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppisj3ic1.cs(24,30): error CS0246: The type or namespace name ''Pair<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmppisj3ic1.cs(26,27): error CS0246: The type or namespace name ''Pair<,>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmppisj3ic1.cs(28,33): error CS1061: ''long'' does not contain a definition
    for ''Item1'' and no accessible extension method ''Item1'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Dictionary<long, long> pairs
    = new Dictionary<long, long>();\n        bool found = false;\n        foreach
    (long n in l) {\n            if (pairs.ContainsKey(n)) {\n                pairs[n]
    += n;\n            }\n            else {\n                pairs[n] = n;\n            }\n
    \           if (pairs[pair.Key] == 0) {\n                found = true;\n                break;\n
    \           }\n        }\n        return found;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgi7t50za.cs(32,23): error CS0103: The name ''pair'' does not exist in
    the current context

    '
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l == null) return false;\n
    \       if (l.Count == 0) return false;\n        var zeros = new List<long>();\n
    \       var zeros_index = 0;\n        long sum = 0;\n        long x = 0;\n        foreach
    (var x in l) {\n            sum += x;\n            if (sum > 0) {\n                zeros.Add(x);\n
    \           }\n            if (sum == 0) zeros_index++;\n        }\n        if
    (zeros_index > 1) {\n            bool a = PairsSumToZero(l.SubList(0, zeros_index));\n
    \           bool b = PairsSumToZero(l.SubList(zeros_index + 1, l.Count));\n            return
    a && b;\n        }\n        bool a = true;\n        if (sum > 0) {\n            zeros
    = l.Take(zeros_index).ToList();\n            a.RemoveAll(y => !PairsSumToZero(l.Skip(zeros_index).Take(l.Count()
    - 1).ToList()));\n        }\n        return a;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa47mv0_a.cs(29,22): error CS0136: A local or parameter named ''x'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpa47mv0_a.cs(37,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpa47mv0_a.cs(37,39): error CS1061: ''List<long>'' does not contain a definition
    for ''SubList'' and no accessible extension method ''SubList'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpa47mv0_a.cs(38,39): error CS1061: ''List<long>'' does not contain a definition
    for ''SubList'' and no accessible extension method ''SubList'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpa47mv0_a.cs(44,15): error CS1061: ''bool'' does not contain a definition
    for ''RemoveAll'' and no accessible extension method ''RemoveAll'' accepting a
    first argument of type ''bool'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpa47mv0_a.cs(28,14): warning CS0219: The variable ''x'' is assigned but
    its value is never used

    '
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0)\n            return
    false;\n        Dictionary<long, long> pairs = new Dictionary<long, long>();\n
    \       long zero = 0;\n        for (int i = 0; i < l.Count - 1; i++) {\n            long
    x = l[i];\n            long y = l[i + 1];\n            if (x == y && x != 0)\n
    \               return false;\n            if (pairs.ContainsKey(x))\n                pairs[x]
    += y;\n            else\n                pairs.Add(x, y);\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c4aa0ffacb1467c9298039f4dbe9404>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c4aa0ffacb1467c9298039f4dbe9404>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return l.Select(x => (x.Equals(0L)
    ? x : 0L)).Distinct().Count() == 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27b746c6ac5c4f6caf077b7cab8b788b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27b746c6ac5c4f6caf077b7cab8b788b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> pairs = new List<long>();\n
    \       pairs.Add(l.Count);\n        pairs.AddRange(l.ToArray());\n        List<long>
    zeros = new List<long>();\n        zeroes.Add(0);\n        zeroes.AddRange((new
    long[]{l.Count}).ToArray());\n        IEnumerable<long> combos = Enumerable.Range(1,
    l.Count)\n            .Except(pairs.ToArray())\n            .Where(n => !zeros.Contains(n));\n
    \       long sum = 0;\n        foreach (long n in combos) {\n            sum +=
    n;\n        }\n        return sum != 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpailojdob.cs(27,9): error CS0103: The name ''zeroes'' does not exist in
    the current context

    /tmp/tmpailojdob.cs(28,9): error CS0103: The name ''zeroes'' does not exist in
    the current context

    /tmp/tmpailojdob.cs(29,36): error CS1929: ''IEnumerable<int>'' does not contain
    a definition for ''Except'' and the best extension method overload ''ParallelEnumerable.Except<long>(ParallelQuery<long>,
    IEnumerable<long>)'' requires a receiver of type ''ParallelQuery<long>''

    '
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        return PairsSumToZero(l, 0,
    0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_0k3kmfm.cs(23,16): error CS1501: No overload for method ''PairsSumToZero''
    takes 3 arguments

    '
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Debug.Assert(l.Count > 0,
    \"List of size zero not allowed.\");\n        Debug.Assert(l.Count <= Int64.MaxValue,
    \"List of size too big for Int64.\");\n        Debug.Assert(l.Count >= 1, \"List
    of size too small for Int64.\");\n\n        long twoSum = 0;\n        long twoSumIndex
    = 0;\n        long currentSum = 0;\n\n        for (int i = 1; i < l.Count; i++)
    {\n            currentSum = l[i];\n            if (currentSum == 0)\n                return
    false;\n            twoSum = twoSumIndex + currentSum;\n            if (twoSum
    > 0)\n                twoSumIndex += currentSum;\n            else\n                twoSumIndex
    -= currentSum;\n        }\n        return true;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac0cf2d09654c328b2e237acce7c6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac0cf2d09654c328b2e237acce7c6a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2)\n            return
    false;\n        // Sort by descending order\n        l.Sort();\n        // If
    two elements sum to zero, then there should be no two elements\n        // whose
    sum differs by more than one\n        var diffs = l.Sum() - l.Take(2).Sum();\n
    \       if (diffs > 1)\n            return false;\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24c795884e684871b468b6a23d07825c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24c795884e684871b468b6a23d07825c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        HashSet<long> seen = new HashSet<long>();\n
    \       foreach (var x in l) {\n            if (seen.Contains(x)) {\n                return
    false;\n            }\n            seen.Add(x);\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ebec1a68dd544f2a81fbcd24695e350>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ebec1a68dd544f2a81fbcd24695e350>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var seen = new HashSet<long>();\n
    \       var pairs = l.Select((n,idx) => new {n = n, idx = idx}).GroupBy(x => x.n).ToList();\n\n
    \       if (pairs.Count < 2) return false;\n\n        var a = pairs[0].First();\n
    \       var b = pairs[0].Last();\n        var c = pairs[1].First();\n        var
    d = pairs[1].Last();\n\n        var zeros = Enumerable.Repeat(0, 2).ToList();\n
    \       zeros.Remove(a.n + b.n);\n\n        zeros = zeros.Where(z => z > 0).Distinct().ToList();\n
    \       zeros.Remove(a.n);\n        zeros.Remove(b.n);\n\n        foreach (var
    z in zeros)\n        {\n            bool aInZero = false;\n            bool bInZero
    = false;\n            bool cInZero = false;\n            bool dInZero = false;\n\n
    \           foreach (var p in pairs)\n            {\n                if (p.idx
    != 0)\n                {\n                    long p1 = p.First().n;\n                    long
    p2 = p.Last().n;\n                    long p3 = p1[p.idx - 1];\n                    long
    p4 = p2[p.idx - 1];\n                    if (p1.Equals(z) && p2.Equals(z) && p3.Equals(z)
    && p4.Equals(z))\n                    {\n                        if (p.First().Equals(a))\n
    \                           aInZero = true;\n                        if (p.First().Equals(b))\n
    \                           bInZero = true;\n                        if (p.First().Equals(c))\n
    \                           cInZero = true;\n                        if (p.First().Equals(d))\n
    \                           dInZero = true;\n                    }\n                }\n
    \           }\n\n            if (!aInZero && !bInZero && !cInZero && !dInZero)\n
    \           {\n                return true;\n            }\n        }\n\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyf7ise5f.cs(34,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpyf7ise5f.cs(37,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpyf7ise5f.cs(38,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpyf7ise5f.cs(49,23): error CS1061: ''IGrouping<long, <anonymous type: long
    n, int idx>>'' does not contain a definition for ''idx'' and no accessible extension
    method ''idx'' accepting a first argument of type ''IGrouping<long, <anonymous
    type: long n, int idx>>'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpyf7ise5f.cs(53,36): error CS1061: ''IGrouping<long, <anonymous type: long
    n, int idx>>'' does not contain a definition for ''idx'' and no accessible extension
    method ''idx'' accepting a first argument of type ''IGrouping<long, <anonymous
    type: long n, int idx>>'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpyf7ise5f.cs(54,36): error CS1061: ''IGrouping<long, <anonymous type: long
    n, int idx>>'' does not contain a definition for ''idx'' and no accessible extension
    method ''idx'' accepting a first argument of type ''IGrouping<long, <anonymous
    type: long n, int idx>>'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (long n in l)\n            sum += n;\n        if (sum == 0)\n            return
    false;\n        long[] ns = new long[l.Count];\n        List<long> nse = new List<long>();\n
    \       for (int i = 0; i < l.Count; i++) {\n            long n = l[i];\n            while
    (n > sum) {\n                for (int j = 0; j < nse.Count; j++) {\n                    long
    ns = nse[j];\n                    nse[j] = ns;\n                    ns[j] -= n;\n
    \                   if (ns[j] == 0)\n                        return true;\n                }\n
    \               nse[nse.Count] = n;\n                n++;\n            }\n            ns[i]
    = n;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp66zed0t8.cs(34,26): error CS0136: A local or parameter named ''ns'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp66zed0t8.cs(36,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp66zed0t8.cs(37,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0) return false;\n
    \       long sum = 0;\n        long maxSum = l.Aggregate(0L, (acc, e) => {\n            if
    (e != 0) { sum += e; }\n            return sum;\n        });\n        return maxSum
    == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd72a317d9b94ff19ed13b7ab214962d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd72a317d9b94ff19ed13b7ab214962d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Debug.Assert(l.Count > 0,
    \"l must have at least one element\");\n        if (l.Count == 1) return false;\n
    \       var a = l.Take(l.Count - 1);\n        var b = l.Skip(1);\n        long
    sumA = a.Sum();\n        long sumB = b.Sum();\n        if (sumA > sumB) return
    false;\n        var i = sumA + sumB;\n        var lt = new List<long>();\n        foreach
    (long i in a)\n            lt.Add(i == a[i + 1])\n            ;\n        foreach
    (long i in b)\n            lt.Add(i == b[i - 1])\n            ;\n        if (lt.Count
    > 0) return true;\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb9k2q425.cs(32,23): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpb9k2q425.cs(33,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IEnumerable<long>''

    /tmp/tmpb9k2q425.cs(35,23): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpb9k2q425.cs(36,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IEnumerable<long>''

    '
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (var v in l)\n            sum += v;\n        long zero = l.Sum();\n        return
    sum == zero;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd421e2929da409fb8ffca0b4a0e7223>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd421e2929da409fb8ffca0b4a0e7223>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2)\n            return
    false;\n\n        // create an array of all pairs of positive numbers in the list\n
    \       long[] numbers = l.Select(n => n < 0 ? -n : n).ToArray();\n        var
    r = new int[numbers.Length];\n        // the count of the number of pairs where
    the sum is zero\n        int pairCount = 0;\n\n        for (int i = 0; i < numbers.Length;
    i++) {\n            int left = i;\n            int right = i;\n            for
    (int j = i + 1; j < numbers.Length; j++) {\n                if (numbers[i] + numbers[j]
    > 0)\n                    break;\n                if (numbers[j] - numbers[i]
    > 0) {\n                    left = j;\n                    right = j;\n                    break;\n
    \               }\n            }\n\n            if (numbers[left] == numbers[right])
    {\n                r[i] = 1;\n                r[left] = 1;\n                pairCount++;\n
    \           }\n        }\n\n        return pairCount != l.Count - 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de9f42d4ff4240aba4fe290b67fbc850>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de9f42d4ff4240aba4fe290b67fbc850>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        List<long> zeros = new List<long>();\n
    \       List<long> nonZeros = new List<long>();\n        for (int i = 0; i < l.Count;
    i++) {\n            if (l[i] == 0) {\n                zeros.Add(l[i]);\n            }
    else {\n                nonZeros.Add(l[i]);\n            }\n        }\n        return
    nonZeros.Count == 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbee55ac98b246418def3084b0a54b63>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbee55ac98b246418def3084b0a54b63>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // the variable i will hold
    the sum of the integers\n        int i = 0;\n        // the variable j will hold
    the sum of the integers\n        int j = 0;\n        // the variable k will hold
    the index of the first integer\n        // that is greater than 0 in the list\n
    \       int k = 0;\n        // the variable l will hold the number of integers
    in the list\n        int l = l.Count;\n        // i will hold the sum of the integers\n
    \       for (int j = 0; j < l; j++) {\n            // j will hold the sum of the
    integers\n            i += l[j];\n            // k will hold the index of the
    first integer\n            // that is greater than 0 in the list\n            if
    (l[j] > 0) k++;\n        }\n        // if the sum of i equals 0, then there are
    two distinct integers\n        // that sum to zero\n        if (i == 0) return
    false;\n        // i will hold the sum of the integers\n        int i = i;\n        //
    k will hold the index of the first integer\n        // that is greater than 0
    in the list\n        if (k == 0) return false;\n        // l will hold the number
    of integers in the list\n        int l = l.Count;\n        for (int j = 0; j <
    l; j++, k++) {\n            // j will hold the sum of the integers\n            i
    += l[j];\n            // k will hold the index of the first integer\n            //
    that is greater than 0 in the list\n            if (l[j] > 0) k++;\n        }\n
    \       // if the sum of i equals 0, then there are two distinct integers\n        //
    that sum to zero\n        if (i == 0) return false;\n        return true;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx_jus1d0.cs(31,13): error CS0136: A local or parameter named ''l'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpx_jus1d0.cs(31,19): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''int''. Did you intend to invoke the method?

    /tmp/tmpx_jus1d0.cs(33,18): error CS0136: A local or parameter named ''j'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpx_jus1d0.cs(35,18): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpx_jus1d0.cs(38,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpx_jus1d0.cs(44,13): error CS0128: A local variable or function named ''i''
    is already defined in this scope

    /tmp/tmpx_jus1d0.cs(49,13): error CS0128: A local variable or function named ''l''
    is already defined in this scope

    /tmp/tmpx_jus1d0.cs(49,19): error CS0428: Cannot convert method group ''Count''
    to non-delegate type ''int''. Did you intend to invoke the method?

    /tmp/tmpx_jus1d0.cs(50,18): error CS0136: A local or parameter named ''j'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpx_jus1d0.cs(52,18): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpx_jus1d0.cs(55,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpx_jus1d0.cs(31,17): error CS0165: Use of unassigned local variable ''l''

    /tmp/tmpx_jus1d0.cs(26,13): warning CS0219: The variable ''j'' is assigned but
    its value is never used

    '
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // Sort list to speed up comparison\n
    \       l.Sort();\n\n        // Sum all numbers in the list\n        long sum
    = l.Sum();\n\n        // If sum is zero then any pair in the list will sum to
    zero\n        if (sum == 0) {\n            return true;\n        }\n\n        //
    Sum all pairs up to and including current sum value\n        long sumOfPreviousPairSum
    = sum;\n\n        // Iterate through list one item at a time\n        for (int
    i = 0; i < l.Count - 1; i++) {\n            // Calculate sum of all previous pairs\n
    \           long previousSumOfPreviousPairSum = sumOfPreviousPairSum;\n\n            //
    Sum of current pair\n            long previousSum = sum;\n\n            // Get
    last number in the pair\n            long lastNumber = l[i];\n\n            //
    Iterate through list again one item at a time\n            for (int j = i + 1;
    j < l.Count; j++) {\n                // Calculate sum of all previous pairs\n
    \               long currentSumOfPreviousPairSum = previousSumOfPreviousPairSum;\n\n
    \               // Sum of current pair\n                long currentSum = previousSum;\n\n
    \               // Get current number in the pair\n                long currentNumber
    = l[j];\n\n                // Compare current sum with the sum of previous pairs\n
    \               if (currentSum + currentNumber != sumOfPreviousPairSum) {\n                    //
    If the sum does not add up to the current sum, then the\n                    //
    sum must equal the sum of previous pairs.\n                    return false;\n
    \               }\n\n                // Compare last number in the pair with the
    sum of previous pairs\n                long currentLastNumber = currentNumber;\n\n
    \               // If last number is not zero, then the sum must equal the\n                //
    sum of previous pairs\n                if (currentLastNumber != 0) {\n                    return
    false;\n                }\n\n                // Compare current sum with sum of
    previous pairs\n                long currentSumOfCurrentPairSum = currentSum;\n\n
    \               // Sum of current pair\n                currentSum = currentSumOfPreviousPairSum;\n\n
    \               // Get current number in the pair\n                currentNumber
    = previousSumOfPreviousPairSum;\n\n                // Compare current sum with
    the sum of previous pairs\n                if (currentSumOfCurrentPairSum + currentNumber
    != currentSumOfPreviousPairSum) {\n                    // If the sum does not
    add up to the current sum, then the\n                    // sum must equal the
    sum of previous pairs.\n                    return false;\n                }\n\n
    \               // Increment sum so that we can compare it to the sum of\n                //
    the next pair\n                sum += currentNumber;\n            }\n\n            //
    Increment sum so that we can compare it to the sum of\n            // the next
    pair\n            sum += lastNumber;\n        }\n\n        // If the current sum
    matches the current sum then there is at\n        // least one pair of numbers
    that sums to zero.\n        return (sum == sumOfPreviousPairSum);\n    }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_1hx0jn.cs(118,1): error CS1022: Type or namespace definition, or end-of-file
    expected

    '
  timestamp: 1659976882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long[] sums = l.Select(x =>
    (long)x).ToArray();\n        Array.Sort(sums);\n        long sum = (long)0;\n
    \       for (int i = 0; i < sums.Length; i++) {\n            sum += sums[i];\n
    \           while (sum > 0) {\n                if (sums[i] == sum - 1) return
    true;\n                sum -= sums[i];\n            }\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e3de7ce23014405af6851d0a750b8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e3de7ce23014405af6851d0a750b8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int n = l.Count;\n        if
    (n <= 1) return false;\n        ArrayList a = new ArrayList();\n        ArrayList
    b = new ArrayList();\n        int sum = 0;\n        long x = l[0];\n        a.Add(x);\n
    \       b.Add(x);\n        for (int i = 1; i < n; i++) {\n            sum += l[i];\n
    \           if (sum == 0) return false;\n            a.Add(sum);\n            b.Add(sum);\n
    \       }\n        for (int i = 0; i < n; i++) {\n            int j = 0;\n            while
    (j + 1 < n && a[j] == a[j + 1]) {\n                j++;\n            }\n            if
    (a[j] == a[j]) return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsvntcof5.cs(25,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpsvntcof5.cs(25,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpsvntcof5.cs(26,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpsvntcof5.cs(26,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpsvntcof5.cs(32,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long total = 0;\n        long
    two = 0;\n        for (int i = 0; i < l.Count - 1; i++) {\n            total +=
    l[i];\n            if (total < 0) {\n                two++;\n                total
    = 0;\n            }\n            if (two == 2) {\n                return true;\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfe0075180ab44c4b9bf4714a874aecf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfe0075180ab44c4b9bf4714a874aecf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long sum = 0;\n        foreach
    (long i in l) {\n            sum += i;\n        }\n        return l.Distinct().Count()
    == l.Count() && (l.Count() == 0 || sum == 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae0ca633314140e7a69221fdaf4c1147>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae0ca633314140e7a69221fdaf4c1147>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = new List<long>();\n
    \       l.ForEach(x => pairs.Add(x + x));\n        if (pairs.Any()) {\n            long
    sum = 0;\n            var res = pairs.Where(x => !pairs.Contains(x - x)).ToList();\n
    \           foreach (var item in res)\n                sum += item;\n            return
    (sum == 0);\n        }\n        else\n            return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a732e761da2840b0998951538f210991>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a732e761da2840b0998951538f210991>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2)\n            return
    false;\n        long s = 0;\n        foreach (var x in l)\n            s += x;\n
    \       if (s == 0)\n            return false;\n        long n = l.Count - 1;\n
    \       while (n > 0 && (n - 1) % 2 == 0) {\n            long m = (n + 1) / 2;\n
    \           s = s + l[n] + l[m];\n            n = m;\n        }\n        return
    s == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsr9q0v24.cs(33,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpsr9q0v24.cs(33,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count == 0)\n            return
    true;\n        int x = 0;\n        int y = 0;\n        var pairs = new List<Tuple<int,
    int>>();\n        foreach (var item in l) {\n            x += (item % 2 == 0);\n
    \           y += (item % 3 == 0);\n            pairs.Add(new Tuple<int, int>(x,
    y));\n        }\n        // find pair that sums to zero\n        var pair = pairs.Where(t
    => t.Item1 + t.Item2 == 0).FirstOrDefault();\n        // return false if there
    is no such pair\n        return pair == null || !pair.Item1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4okt_dm.cs(29,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''int'' and ''bool''

    /tmp/tmpi4okt_dm.cs(30,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''int'' and ''bool''

    /tmp/tmpi4okt_dm.cs(36,32): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''int''

    '
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var pairs = l.Where((n, i)
    => i <= l.Count - 2).ToList();\n        if (pairs.Count == 0)\n            return
    false;\n        double dSum = 0;\n        foreach (var p in pairs) {\n            dSum
    += p;\n        }\n        if (dSum == 0)\n            return true;\n        var
    foundSum = 0;\n        foreach (var p in pairs) {\n            foundSum += p;\n
    \           if (foundSum == dSum)\n                return true;\n        }\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9t6rlhxb.cs(34,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count <= 2) return false;\n
    \       long twoSum = 0;\n        foreach (var el in l)\n        {\n            if
    (el < 0) throw new ArgumentOutOfRangeException(\"el\");\n            if (twoSum
    > el) twoSum = el;\n        }\n        if (twoSum < 0) return false;\n        long
    last = 0;\n        foreach (var el in l)\n        {\n            if (el >= 0)
    last = el;\n        }\n        if (twoSum + last == 0) return true;\n        return
    false; // if last > twoSum\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33ecf6117de64f1ab0fe83a391d88067>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: el\n  at Problem.PairsSumToZero
    (System.Collections.Generic.List`1[T] l) [0x0003c] in <33ecf6117de64f1ab0fe83a391d88067>:0
    \n  at Problem.Main (System.String[] args) [0x0003b] in <33ecf6117de64f1ab0fe83a391d88067>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: el\n  at Problem.PairsSumToZero
    (System.Collections.Generic.List`1[T] l) [0x0003c] in <33ecf6117de64f1ab0fe83a391d88067>:0
    \n  at Problem.Main (System.String[] args) [0x0003b] in <33ecf6117de64f1ab0fe83a391d88067>:0
    \n"
  stdout: ''
  timestamp: 1659976884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2)\n            return
    false;\n        List<long> m = new List<long>();\n        long[] a = l.ToArray();\n
    \       for (int i = 1; i < a.Length; i++) {\n            long sum = 0;\n            for
    (int j = i; j < a.Length; j++) {\n                sum += a[j];\n            }\n
    \           m.Add(sum);\n        }\n        bool flag = true;\n        for (int
    i = 1; i < a.Length; i++) {\n            if (a[i] != 0)\n                for (int
    j = i; j < a.Length; j++) {\n                    if (a[j] != 0) {\n                        flag
    = false;\n                        break;\n                    }\n                }\n
    \       }\n        return flag;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L,
    (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L}))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfd1e075197248b6a020bda2b18d0e5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfd1e075197248b6a020bda2b18d0e5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        Debug.Assert(l != null);\n
    \       Debug.Assert(l.Count != 0);\n        Debug.Assert(l.Count > 0);\n        Debug.Assert(l.All(l
    => l >= 0));\n\n        long a = 0;\n        long b = 0;\n        long c = 0;\n
    \       long d = 1;\n\n        for (int i = 0; i < l.Count; i++) {\n            if
    (i != l.Count - 1) {\n                a += l[i];\n                c += d;\n            }\n
    \           if (i < l.Count - 1) {\n                b += l[i];\n                d
    *= -2;\n            }\n        }\n\n        Debug.Assert(a == 0 && b == 0 && c
    == 0 && d == 0);\n        if (a == 0 && b == 0 && c == 0 && d == 0) {\n            return
    false;\n        }\n        if (a != 0 || b != 0 || c != 0 || d != 0) {\n            return
    false;\n        }\n        return true;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00000]
    in <950db60f732d4930abb7ef61875899ac>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <950db60f732d4930abb7ef61875899ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x00000]
    in <950db60f732d4930abb7ef61875899ac>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <950db60f732d4930abb7ef61875899ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMes"
  stdout: ''
  timestamp: 1659976884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        var totalPairs = l.Count *
    l.Count;\n        var pairs = new List<int>();\n        var count = 0;\n        for
    (int i = 0; i < l.Count; i++) {\n            count += l[i];\n            for (int
    j = i + 1; j < l.Count; j++) {\n                var a = count / l[j];\n                var
    b = count % l[j];\n                if (a == 0 && b != 0) {\n                    pairs.Add(count);\n
    \                   pairs.Add(j);\n                    count += l[j];\n                }\n
    \           }\n        }\n        for (int i = 0; i < totalPairs; i++) {\n            if
    (pairs.Contains(i)) {\n                return true;\n            }\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5q3xoz0o.cs(27,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5q3xoz0o.cs(34,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l == null || l.Count <=
    1) return false;\n        int sum = 0;\n        int count = l.Count;\n        for
    (int i = 0; i < count; ++i) {\n            sum += l[i];\n        }\n        for
    (int i = count - 1; i >= 0; --i) {\n            sum -= l[i];\n            if (sum
    < 0) return false;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbzujyzuw.cs(27,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbzujyzuw.cs(30,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l.Count != 2) {\n            return
    false;\n        }\n        long sum = 0;\n        for (int i = 0; i < l.Count
    - 1; i++) {\n            sum += l[i] + l[i + 1];\n            if (sum == 0) {\n
    \               return true;\n            }\n        }\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17d7753f40a54da09384f0778ec8666a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17d7753f40a54da09384f0778ec8666a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        bool seenOne = false;\n        bool
    seenTwo = false;\n        bool seenZero = false;\n        foreach (int i in l)
    {\n            seenZero ^= (i != 0);\n            seenOne ^= (i == 1);\n            seenTwo
    ^= (i != 1 && i != 0);\n        }\n        return (seenZero && seenOne && seenTwo);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a47828cbbfd4f978da05c819a0c486d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a47828cbbfd4f978da05c819a0c486d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        int count = l.Count;\n        if
    (count == 0) return false;\n        if (count == 1) return l[0] == 0;\n        \n
    \       int[] pairSums = new int[count];\n        for (int i = 0; i < count; i++)\n
    \           pairSums[i] = 0;\n        \n        foreach (long item in l)\n            pairSums[item
    % count]++;\n        \n        int k = 0;\n        for (int i = 0; i < count;
    i++) {\n            if (pairSums[i] > 0) {\n                for (int j = k; j
    < i; j++)\n                    pairSums[j] = pairSums[j] - 1;\n                k++;\n
    \           }\n        }\n        \n        bool res = true;\n        foreach
    (int value in pairSums) {\n            if (value == 0)\n                return
    false;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b3409520e814ba5bd182339891f239e>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T]
    l) [0x0006c] in <8b3409520e814ba5bd182339891f239e>:0 \n  at Problem.Main (System.String[]
    args) [0x0003b] in <8b3409520e814ba5bd182339891f239e>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.PairsSumToZero (System.Collections.Generic.List`1[T] l) [0x0006c]
    in <8b3409520e814ba5bd182339891f239e>:0 \n  at Problem.Main (System.String[] args)
    [0x0003b] in <8b3409520e814ba5bd182339891f239e>:0 \n"
  stdout: ''
  timestamp: 1659976884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        long zeroSum = 0L;\n        long
    x = 0L;\n        foreach(long y in l) {\n            x += y;\n            zeroSum
    += x;\n        }\n        if (zeroSum == 0)\n            return false;\n        if
    (l.Count % 2 == 1) {\n            return (l.Last() - l.First()) == (zeroSum -
    x);\n        }\n        long halfLength = l.Count / 2;\n        return (l.Last()
    - l.First()) == (zeroSum - (l.Count % 2 == 1 ? l.Count - halfLength : halfLength));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aed80a723139484993991e791031dba5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aed80a723139484993991e791031dba5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        // If there are more than
    two elements, there's no way to tell\n        // whether pairs sum to zero or
    not.\n        if (l.Count < 2) {\n            return false;\n        }\n        //
    We need to keep track of the elements in pairs.\n        // To do this, we'll
    use a HashSet<Tuple<long, long>>.\n        HashSet<Tuple<long, long>> pairs =
    new HashSet<Tuple<long, long>>();\n        // We start by checking the first element
    against every other element.\n        // If any pair sums to zero, that means
    that the first element\n        // must sum to zero, and we'll return false.\n
    \       if (l.First() == 0) {\n            foreach(var item in l.Skip(1).Take(l.Count
    - 1)) {\n                if (item == 0) {\n                    return false;\n
    \               }\n                pairs.Add(Tuple.Create(item, 0));\n            }\n
    \       }\n        // Otherwise, we start adding pairs as long as there are any
    pairs.\n        // If any pair sums to zero, we'll return false.\n        while
    (pairs.Count > 0) {\n            var pair = pairs.First();\n            if (pair.Item1
    + pair.Item2 == 0) {\n                return false;\n            }\n            pairs.Remove(pair);\n
    \           pairs.Add(Tuple.Create(pair.Item1 + pair.Item2, pair.Item1));\n            pairs.Add(Tuple.Create(pair.Item2,
    pair.Item2 + pair.Item1));\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw46ysk5d.cs(39,27): error CS1503: Argument 1: cannot convert from ''System.Tuple<long,
    int>'' to ''System.Tuple<long, long>''

    '
  timestamp: 1659976884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        if (l == null || l.Count <
    2) {\n            return false;\n        }\n        int n = l.Count;\n        for
    (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n
    \               if (l[i] + l[j] == 0) {\n                    return true;\n                }\n
    \           }\n        }\n        return false;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L}))) == (true));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L, (long)9L,
    (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976884
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    //
    it returns true if there are two distinct elements in the list that\n    // sum
    to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L,
    (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n
    \   // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L,
    (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>>
    PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public
    static bool PairsSumToZero(List<long> l) {\n        double a = Math.Abs(l.Sum());
    // Sum of all the numbers in l.\n        if (a == 0.0) return true;\n        var
    b = l.Skip(1).Take(l.Count - 1).Select(x => Math.Abs(x)).ToList(); // List of
    numbers in l but not in a pair with numbers before and after.\n        // Checking
    for two distinct numbers that sum to zero.\n        if (b.Distinct().Count() ==
    2) return true;\n        if (b.Distinct().Count() == 1) return false;\n        //
    If we have more numbers then we try to find if there are two distinct numbers
    that sum to zero.\n        bool pairSumToZero = true;\n        var c = l.Take(l.Count
    - 1).ToList(); // List of numbers in l but not in a pair with numbers before and
    after.\n        foreach (var d in c)\n        {\n            if (pairSumToZero)\n
    \           {\n                pairSumToZero = b.Contains(Math.Abs(d)) && b.Contains(Math.Abs(d
    + a));\n            }\n            else\n            {\n                pairSumToZero
    = b.Contains(Math.Abs(d));\n            }\n        }\n        return pairSumToZero;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n
    \   Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L,
    (long)-2L, (long)1L}))) == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)1L})))
    == (false));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)3L, (long)2L, (long)30L}))) == (true));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)3L, (long)2L, (long)31L})))
    == (true));\n    Debug.Assert(PairsSumToZero((new List<long>(new long[]{(long)-3L,
    (long)9L, (long)-1L, (long)4L, (long)2L, (long)30L}))) == (false));\n    Debug.Assert(PairsSumToZero((new
    List<long>(new long[]{(long)-3L, (long)9L, (long)-1L, (long)4L, (long)2L, (long)31L})))
    == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu7xpcewm.cs(36,71): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    '
  timestamp: 1659976884
