name: HumanEval_71_triangle_area
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given the lengths of the three sides of a triangle. Return the\
  \ area of\n    // the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
  \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
  \    // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n   \
  \ // >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float\
  \ TriangleArea(long a, long b, long c) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),\
  \ (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n\
  \    Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),\
  \ (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n\
  \    Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),\
  \ (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==\
  \ (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n\
  \    }\n\n}\n"
completions: ["        long s = (a + b + c) / 2;\n        long area = Math.Sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n        float triangleArea = (float)area;\n\
    \        if (triangleArea >= (long)Math.Sqrt(3)) {\n            triangleArea =\
    \ triangleArea / 3;\n        }\n        return triangleArea;", "        //get\
    \ the sum of any two sides\n        long sum = a + b;\n        if (sum > c) {\n\
    \            //the sum is greater then the third side\n            sum = sum -\
    \ c;\n        }\n        float area;\n        //area calculation is based on this\
    \ formula:\n        area = (float)Math.Sqrt(Math.Pow(sum, 2.0f) / 2f);\n     \
    \   return area;", "        bool isValidTriangle;\n        if (a+b > c && b+c\
    \ > a && a+c > b) {\n            isValidTriangle = true;\n        } else {\n \
    \           isValidTriangle = false;\n        }\n        return isValidTriangle\
    \ ? Math.Round(Convert.ToDecimal(a*b*c)/Convert.ToDecimal(a+b+c), 2) : float.NaN;",
  "        float s = 0.0f;\n        if (a + b > c) {\n            s = (a * b) / (a\
    \ + b + c);\n            s = Math.Round(s, 2);\n        } else {\n           \
    \ s = -1;\n        }\n        return s;", "        if (a + b > c && b + c > a\
    \ && a + c > b) {\n            return (float) Math.Sqrt(\n                (a +\
    \ b + c) * (a + c - b) * (b - c - a));\n        } else {\n            return -1.0f;\n\
    \        }", "        float area = TriangleArea(a, b, c);\n        if (area !=\
    \ -1L) return Math.Round(area, 2);\n        return -1L;", "        //int c = (int)\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long ab = a - b;\n    \
    \    long ac = c - a;\n        long ba = b - b;\n        long bc = b - c;\n  \
    \      long cb = c - b;\n        if (ab > ac) {\n            long acb = ac - bc;\n\
    \            long b = a + b;\n            long c = b + c;\n            long abc\
    \ = ab + bc;\n            long abbc = abb + cb;\n            long bbb = b - b;\n\
    \            long cc = c + c;\n            if (acb >= bbb + cc) {\n          \
    \      long abbc = abb - cb;\n                return ((abbc / 2.0f) + (cb / 2.0f))\
    \ * Math.Sqrt(abbc / 4.0f);\n            }\n        }\n        if (ab < ac) {\n\
    \            long acb = ac - bc;\n            long b = a + b;\n            long\
    \ c = b + c;\n            long abc = ab + bc;\n            long abbc = abb + cb;\n\
    \            long bbb = b - b;\n            long cc = c + c;\n            if (acb\
    \ < bbb + cc) {\n                long abbc = abb - cb;\n                return\
    \ ((abbc / 2.0f) + (cb / 2.0f)) * Math.Sqrt(abbc / 4.0f);\n            }\n   \
    \     }\n        if (ab == ac) {\n            long acb = ac - bc;\n          \
    \  long b = a + b;\n            long c = b + c;\n            long abc = ab + bc;\n\
    \            long abbc = abb + cb;\n            long bbb = b - b;\n          \
    \  long cc = c + c;\n            return ((abbc / 2.0f) + (cb / 2.0f)) * Math.Sqrt(abbc\
    \ / 4.0f);\n        }\n        return -1;", "        double s = (a + b + c) /\
    \ 2.0;\n        return s * (s - a) * (s - b) * (s - c);", "        long s = a\
    \ + b + c;\n        float x = s * s * (s * (s - a) * (s - b) * (s - c));\n   \
    \     float y = (float) Math.Sqrt((x * x) + (a * b) + (c * c));\n        return\
    \ Math.Round(y*100.0)/100.0;", "        long ab, ac, sum;\n        ab = b + c;\n\
    \        ac = a * 2;\n        sum = (long)Math.Sqrt(Math.Pow(ac, 2) + Math.Pow(ab,\
    \ 2));\n        return (float)(sum / 2.0);", "        long p = a + b + c;\n  \
    \      if (p <= 1) return -1;\n        float area;\n        double areaDouble\
    \ = p.Area / 2;\n        area = Math.Round(areaDouble, 2);\n        return area;",
  "        double side1 = Convert.ToDouble(a);\n        double side2 = Convert.ToDouble(b);\n\
    \        double side3 = Convert.ToDouble(c);\n        long sum = side1 + side2\
    \ + side3;\n        long max = Math.Max(side1, Math.Max(side2, side3));\n    \
    \    long min = Math.Min(side1, Math.Min(side2, side3));\n\n        if (sum ==\
    \ side1 && sum == side2 && sum == side3) {\n            return (0.0f);\n     \
    \   } else if (sum == side1 && sum != side2 && sum != side3) {\n            return\
    \ (0.0f);\n        } else if (sum == side1 && sum == side2 && sum != side3) {\n\
    \            return (0.0f);\n        } else if (sum == side1 && sum != side2 &&\
    \ sum == side3) {\n            return (0.0f);\n        } else if (sum == side1\
    \ && sum == side2 && sum == side3) {\n            return (0.0f);\n        } else\
    \ if (sum != side1 && sum != side2 && sum != side3) {\n            return (0.0f);\n\
    \        } else if (sum != side1 && sum == side2 && sum != side3) {\n        \
    \    return (0.0f);\n        } else if (sum != side1 && sum == side2 && sum ==\
    \ side3) {\n            return (0.0f);\n        } else if (sum != side1 && sum\
    \ != side2 && sum == side3) {\n            return (0.0f);\n        } else if (sum\
    \ != side1 && sum != side2 && sum != side3) {\n            return (0.0f);\n  \
    \      } else if (sum != side1 && sum == side2 && sum != side3) {\n          \
    \  return (0.0f);\n        } else if (sum != side1 && sum != side2 && sum == side3)\
    \ {\n            return (0.0f);\n        } else if (sum != side1 && sum == side2\
    \ && sum != side3) {\n            return (0.0f);\n        } else if (sum != side1\
    \ && sum != side2 && sum != side3) {\n            return (0.0f);\n        } else\
    \ if (sum == side1 && sum == side2 && sum != side3) {\n            return (0.0f);\n\
    \        } else if (sum == side1 && sum != side2 && sum == side3) {\n        \
    \    return (0.0f);\n        } else if (sum == side1 && sum == side2 && sum !=\
    \ side3) {\n            return (0.0f);\n        } else if (sum == side1 && sum\
    \ != side2 && sum == side3) {\n            return (0.0f);\n        } else if (sum\
    \ == side1 && sum != side2 && sum != side3) {\n            return (0.0f);\n  \
    \      } else if (sum == side1 && sum == side2 && sum == side3) {\n          \
    \  return (0.0f);\n        } else if (sum == side1 && sum != side2 && sum != side3)\
    \ {\n            return (0.0f);\n        } else if (sum == side1 && sum == side2\
    \ && sum == side3) {\n            return (", "        var bc = b * c;\n      \
    \  var ab = a * b;\n\n        if (bc <= ab) {\n            return 0;\n       \
    \ }\n        if (a < b) {\n            return -1;\n        }\n\n        long abc\
    \ = ab + bc;\n        if (abc > bc) {\n            return -1;\n        }\n   \
    \     return (b - a + bc + ab) / 2;", '        return Math.Acos(Math.Sqrt(Math.Pow(b
    + c - a, 2) / (2 * a)));', "        float area = (float)a;\n        area = area\
    \ + b + c + ((long)(a * b * c));\n        area = area / 2;\n        return area;",
  "        if (a * a + b * b > c * c)\n            return -1;\n        return (a *\
    \ b * c) / Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));", "        float area =\
    \ 0;\n        if ((a + b > c) || (b + c > a) || (c + a > b)) {\n            return\
    \ (float)-1;\n        }\n        float s = (a + b + c) / 2;\n        float area\
    \ = (a * b * c) / Math.Sqrt((2 * s) * (s - a) * (s - b) * (s - c));\n        area\
    \ = Math.Round(area, 2);\n        return area;", "        float h = (float)Math.Sqrt(a\
    \ * a + b * b + c * c) / 3;\n        if (h > 0)\n            return (float)Math.Round(h,\
    \ 2);\n        else\n            return (float)-1L;", "        float answer =\
    \ (float)Math.Sqrt(a * b + c * c);\n        // TODO: round answer down to two\
    \ decimal points\n        return answer;", "        Debug.Assert(a > 0);\n   \
    \     Debug.Assert(b > 0);\n        Debug.Assert(c > 0);\n        Debug.Assert(a\
    \ <= b);\n        Debug.Assert(a <= c);\n        Debug.Assert(b <= c);\n     \
    \   return (a * b) / Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));",
  "        double s = (a*a + b*b - c*c)/2.0;\n        return Math.Round(s * 100.0\
    \ / Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2)), 2); ", "        float d = b -\
    \ a;\n        float e = c - b;\n        float f = 2.0f * d / e;\n        return\
    \ Math.Sqrt(f * f * f + 1.0f);", "        double side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        double side2 = Math.Sqrt(Math.Pow(c, 2) - Math.Pow(side1,\
    \ 2));\n        double side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) - Math.Pow(c,\
    \ 2));\n        double area = (side1 * side2 * side3) / 2;\n        if (Math.Abs(area)\
    \ < 1.0e-10) {\n            area = -1.0f;\n        }\n        return Math.Round(area,\
    \ 2, MidpointRounding.AwayFromZero);", "        // Solve the equation\n      \
    \  return ((a + b + c) / 2L) * Math.Sqrt(Math.Pow(a + b + c, 2L) / 4L);", "  \
    \      // TODO: Write your code here.\n        long sum = 0;\n        sum += a;\n\
    \        sum += b;\n        sum += c;\n        if (sum > a * a + b * b + c * c)\
    \ {\n            float area = Math.Sqrt(Math.Pow(a / 2, 2) + Math.Pow(b / 2, 2)\
    \ + Math.Pow(c / 2, 2));\n            if (area > 0.0f) {\n                return\
    \ area;\n            } else {\n                return -1L;\n            }\n  \
    \      } else {\n            return -1L;\n        }", "        float area = 0f;\n\
    \        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n            area =\
    \ .5f * Math.Sqrt(Math.Pow((a + b - c), 2L) + Math.Pow((a - b + c), 2L) + Math.Pow((b\
    \ - a + c), 2L));\n            area = Math.Round(area, 2L);\n        }\n     \
    \   return area;", "        var d = (a + b + c) / 2;\n        if (a > b + c) {\n\
    \            a -= d;\n            c += d;\n        }\n        if (b > a + c) {\n\
    \            b -= d;\n            c += d;\n        }\n        return Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2) - Math.Pow(d, 2));", "        if (a + b\
    \ > c) {\n            return (float)System.Math.Sqrt((float)(a * a + b * b + c\
    \ * c - a * b * c) / (float)(Math.Pow(a, b) + Math.Pow(b, 2) + Math.Pow(c, 2)));\n\
    \        }\n        return -1.0f;", "        long sum = a+b+c;\n        if (sum\
    \ < a) return (float)a;\n        if (sum < b) return (float)b;\n        if (sum\
    \ < c) return (float)c;\n        return (float)((float)sum-a)*((float)sum-b)*((float)sum-c);",
  "        Debug.Assert(a < b && b < c);\n        long d = 0;\n        if (c == 0)\
    \ return 0F;\n        if (a > b) d = b - c;\n        else d = c - a;\n       \
    \ long e = (a + b + d) / 2;\n        if (d >= e - a + b) {\n            if (d\
    \ > b) return 0F;\n            float result = ((float)(a / 2)) * ((float)(e /\
    \ 2) - b);\n            return Math.Round(result, 2, MidpointRounding.AwayFromZero);\n\
    \        }\n        float f = (a / 2) * ((e / 2) - b) * ((e / 2) - b) / a;\n \
    \       return Math.Round(f, 2, MidpointRounding.AwayFromZero);", "        double\
    \ s = (a+b+c)/2;\n        double area = Math.Sqrt(s * (s-a) * (s-b) * (s-c));\n\
    \        if (Math.Abs(a-c) <= Math.Abs(a-b)) {\n            return (float)Math.Round(area,2);\n\
    \        }\n        return -1;", "        float area = 0;\n        float total\
    \ = (a + b + c) / 2;\n        while (a > b) {\n            a -= total;\n     \
    \       b += total;\n            total += total;\n        }\n        if (b > c)\
    \ {\n            b -= total;\n            c += total;\n            total += total;\n\
    \        }\n        if ((a + b) > c) {\n            while (a > b) {\n        \
    \        a -= total;\n                b += total;\n                total += total;\n\
    \            }\n        }\n        area = total * (b - a);\n        return Math.Round(area,\
    \ 2, MidpointRounding.AwayFromZero);", '        return Math.Sqrt(Math.Pow(a, 2)
    + Math.Pow(b, 2) + Math.Pow(c, 2)) * .5;', "        float area = (b * b) - (4\
    \ * a * c);\n        if (area > 0)\n            area = Math.Sqrt(area);\n    \
    \    if ((a * a + b * b) > c)\n            return -1;\n        return area;",
  "        long ab = a + b;\n        long ac = a + c;\n        long bc = b + c;\n\
    \        long abc = ab + bc;\n        return abc == ab ? ab : -1;", "        Debug.Assert(a\
    \ < b, \"a should be less than b\");\n        Debug.Assert(a < c, \"a should be\
    \ less than c\");\n        Debug.Assert(b < c, \"b should be less than c\");\n\
    \        return Math.Sqrt(Math.Pow((a + b + c), 2) / (3 * (a + b)));", "     \
    \   float area, temp;\n        bool valid, valid2;\n        valid = a > 0 && b\
    \ > 0 && c > 0;\n        valid2 = b > a && c > b;\n        if (valid) {\n    \
    \        area = (a * a + b * b + c * c - a * b - c * a + b * c - a * c) / (2 *\
    \ (float)Math.Sqrt(float.MaxValue));\n            if (area >= (float)(-b * c -\
    \ a * b))\n                area = Math.Round(Convert.ToSingle(area, System.Globalization.CultureInfo.InvariantCulture),\
    \ 2);\n            else {\n                temp = float.MaxValue;\n          \
    \      area = -1;\n            }\n        } else {\n            area = -1;\n \
    \       }\n        return area;", "        //  Your code goes here\n        if\
    \ (a + b > c) {\n            return Math.Sqrt(Math.Pow(c + b - a * b, 2)) / 2;\n\
    \        }\n        if (b + c > a) {\n            return Math.Sqrt(Math.Pow(a\
    \ + b - c * a, 2)) / 2;\n        }\n        if (c * c > a * b) {\n           \
    \ return -1;\n        }\n        return 0;", '        return ((float)(a * b))
    / Math.Sqrt((float)(a * a + b * b + c * c));', "        float sum = (a + b + c)\
    \ / 2.0f;\n        if (Math.Abs(a - b) > Math.Abs(a - c)) {\n            return\
    \ (float)Math.Sqrt(sum * (sum - a * b) / c);\n        } else {\n            return\
    \ (float)Math.Sqrt(sum * (sum - a - c) / b);\n        }", "        if (a > c &&\
    \ b > c) {\n            return (float)(Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2)) - Math.Pow(a, 2));\n        }\n        if (a == 0 || b == 0 || c == 0)\n\
    \            return -1;\n        return 0;", "        long sum = a + b + c;\n\
    \        long maxsum = sum;\n        if (c > b) maxsum = maxsum - c;\n       \
    \ if (a > b) maxsum = maxsum - a;\n        return Math.Round((float)maxsum / 3f,\
    \ 2);", "        if (a >= b && b >= c && c >= a + b)\n            return (float)Math.Sqrt(a\
    \ * b * c);\n        else\n            return -1F;", "        return Math.Abs(Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2)) \n                        - Math.Pow(a,\
    \ 2) * Math.Pow(b, 2) * Math.Pow(c, 2)) / 2;", "        float area = -1;\n   \
    \     bool valid = true;\n        while (b > c) {\n            if (b < c) {\n\
    \                c = b - (long)Math.Sqrt(b * b - (double)(a * a - c * c));\n \
    \           }\n            else {\n                b = b - (long)Math.Sqrt(b *\
    \ b - (double)(a * a - b * b));\n            }\n            valid = valid && (b\
    \ > 0);\n            area = Math.Abs(area) + (float)(b) * Math.Sqrt(b * b - (double)(a\
    \ * a - b * b));\n        }\n        return valid\n            ? (float)Math.Sqrt(area\
    \ / a)\n            : -1;", "        long abc = a + b + c;\n        return abc\
    \ * abc > c ? (float)abc / 2f : -1f;", "        float sum = a + b + c;\n     \
    \   return Math.Abs(sum) / 2;", "        long a2 = (a * a);\n        long b2 =\
    \ (b * b); \n        long c2 = (c * c);\n        long d = Math.Sqrt(a2 + b2 +\
    \ c2);\n        long e = Math.Sqrt(a2 + b2);\n        long f = Math.Sqrt(c2 +\
    \ a2);\n        long g = Math.Sqrt(b2 + c2);\n        long h = (a + b + c) / 2;\n\
    \        long x = ((b2 - c2 - a2) / h) / 2;\n        long y = ((f2 - e2 - f2)\
    \ / h) / 2;\n        long z = ((a2 - f2 - a2) / h) / 2;\n        float area =\
    \ (float)(a * x + b * y + c * z) / 2;\n        if (Math.Abs(area - Math.Sqrt(area\
    \ + Math.Sqrt(area + area))) > 0.0000001f)\n            return area;\n       \
    \ else\n            return -1.0f;", "        // Initialize result to -1\n    \
    \    float result=-1f;\n        // Initialize sums to 0\n        long sumA=0L;\n\
    \        long sumB=0L;\n        long sumC=0L;\n        // If all three sides are\
    \ valid, the triangle is valid\n        if (a>0L&&b>0L&&c>0L) {\n            //\
    \ Sum all sides\n            sumA=a+b+c;\n            // Sum two sides\n     \
    \       sumB=a+b+a;\n            // Sum three sides\n            sumC=a+a+b;\n\
    \            // Check if sum of two sides is greater \n            // than the\
    \ sum of three sides\n            if (sumA>sumB&&sumB>sumC) {\n              \
    \  // Check if sum of two sides is greater than the third side\n             \
    \   // which is sum of two sides\n                if (sumA>sumB) {\n         \
    \           // Sum three sides\n                    sumC=a+a+b;\n            \
    \        // Check if sum of two sides is greater \n                    // than\
    \ the third side\n                    if (sumA>sumC) {\n                     \
    \   // Calculate area (square root of sum of two sides)\n                    \
    \    result=Math.Sqrt(sumA/2);\n                    }\n                }\n   \
    \         }\n        }\n        return result;", "        Debug.Assert(a != 0);\n\
    \        Debug.Assert(b != 0);\n        Debug.Assert(c != 0);\n        Debug.Assert(c\
    \ > 0);\n        Debug.Assert(b > a);\n        Debug.Assert(b > a);\n        Debug.Assert(a\
    \ > 0);\n        Debug.Assert(b > 0);\n        Debug.Assert(c > 0);\n        Debug.Assert(c\
    \ < b);\n        Debug.Assert(b < a);\n        Debug.Assert(c < a);\n\n      \
    \  // Now we know a, b and c are all greater than 0, we can do the math\n    \
    \    long area;\n        Debug.Assert(c >= (a + b));\n        Debug.Assert(b >=\
    \ (a + c));\n        Debug.Assert(a >= (b + c));\n        Debug.Assert(b >= (a\
    \ + c));\n        Debug.Assert(a >= (b + c));\n        Debug.Assert(c >= (a +\
    \ b));\n        Debug.Assert(c >= (b + a));\n        Debug.Assert(c >= (a + a));\n\
    \        Debug.Assert(c >= (b + b));\n        Debug.Assert(c >= (a + b));\n  \
    \      area = (b * b) - ((a * c) - (a * b)) / 2;\n        // Now the area is positive\
    \ if we found a triangle, and negative otherwise.\n        return area > 0 ? Math.Round(area,\
    \ 2) : -1;", "        float area = ((b * b) - (4 * a * c));\n        return Math.Abs(area)\
    \ < 0.00001F ? -1F : Math.Round(area, 2);", '        return Math.Sqrt(Math.Pow((a
    + b), 2) + Math.Pow((c + b), 2));', '        return a < b ? a + b + c : b + a
    + c;', "        long sumA = a + b;\n        long sumB = a + c;\n        long sumC\
    \ = c + b;\n        if ((sumA > sumB) || (sumB > sumC)) {\n            return\
    \ -1.0f;\n        }\n        return (float)(Math.Sqrt(sumA * sumB - sumC * sumC));",
  "        double sumOfTwoSides = a + b;\n        double sumOfThreeSides = a + b +\
    \ c;\n        if (sumOfTwoSides >= sumOfThreeSides)\n            return MathF.Round((sumOfTwoSides\
    \ * b) / 6);\n        return -1;", "        long d = b - a;\n        long e =\
    \ c - b;\n        if (d > 0 && e > 0) {\n            long f = (d + e) / 2;\n \
    \           long g = (b - f) * 0.5f;\n            long h = (c - g) * 0.5f;\n \
    \           long k = Math.Sqrt(f * f + g * g + h * h);\n            return (float)(k\
    \ / 2);\n        }\n        if (d < 0 && e < 0) {\n            long g = -d;\n\
    \            long h = (c + g) * 0.5f;\n            long f = (b - h) * 0.5f;\n\
    \            long k = Math.Sqrt(f * f + h * h + g * g);\n            return (float)(k\
    \ / 2);\n        }\n        if (d == 0 && e > 0) {\n            long h = d;\n\
    \            long f = (c + h) * 0.5f;\n            long g = (b - f) * 0.5f;\n\
    \            long k = Math.Sqrt(f * f + g * g + h * h);\n            return (float)(k\
    \ / 2);\n        }\n        if (d == 0 && e < 0) {\n            long f = -d;\n\
    \            long g = (c + f) * 0.5f;\n            long h = (b - g) * 0.5f;\n\
    \            long k = Math.Sqrt(f * f + g * g + h * h);\n            return (float)(k\
    \ / 2);\n        }\n        if (e == 0) {\n            return (float)(Math.Sqrt((double)d\
    \ / (double)a));\n        }\n        return -1;", "        float area = 0.0;\n\
    \        if ((a + b > c) && (c > b)) {\n            float a1 = (a + b - c) / 2.0;\n\
    \            float b1 = (b + c - a) / 2.0;\n            float c1 = c - a - b;\n\
    \            if (a1 > b1) {\n                float temp = a1;\n              \
    \  a1 = b1;\n                b1 = temp;\n            }\n            if (a1 > c1)\
    \ {\n                float temp = a1;\n                a1 = c1;\n            \
    \    c1 = temp;\n            }\n            area = a1 * b1 * c1;\n           \
    \ area = Math.Round(area, 2);\n        }\n        else {\n            area = -1;\n\
    \        }\n        return area;", "        float a = float.Parse(a.ToString());\n\
    \        float b = float.Parse(b.ToString());\n        float c = float.Parse(c.ToString());\n\
    \        float s = a + b + c;\n        if (s > 0) {\n            if (a >= b) {\n\
    \                return c;\n            } else if (b >= c) {\n               \
    \ return a;\n            } else {\n                return b;\n            }\n\
    \        } else {\n            if (a >= b) {\n                return a;\n    \
    \        } else if (b >= c) {\n                return b;\n            } else {\n\
    \                return c;\n            }\n        }", "        Debug.Assert(a\
    \ < b, \"a must be less than b\");\n        Debug.Assert(b < c, \"b must be less\
    \ than c\");\n        long a1 = (long)(Math.Sqrt(Math.Pow(a, 2L) + Math.Pow(b,\
    \ 2L) + Math.Pow(c, 2L)));\n        if (a1 < b) Debug.Assert(a < b, \"a must be\
    \ less than b\");\n        if (a1 < c) Debug.Assert(a < c, \"a must be less than\
    \ c\");\n        if (a1 > c) Debug.Assert(a > c, \"a must be greater than c\"\
    );\n        return a1 / 2L;", '        return a > c ? b * b : (a + b) * (a - c)
    * (b + c);', "        // The sum of the two sides is greater than the third side\
    \ because they \n        // are parallel sides of the triangle. \n        if ((a\
    \ + b > c) && (a + c > b) && (b + c > a)) {\n            // The area of the triangle\
    \ is equal to the hypotenuse times the\n            // area of the sides times\
    \ their respective areas multiplied by \n            // the correct sign. \n \
    \           float areal = (float)Math.Sqrt(a * a + b * b + c * c);\n         \
    \   return areal * sign / 2f;\n        }\n        return -1f;", "        float\
    \ area = 0.0f;\n        long s1 = a + b, b1 = b + c, c1 = c + b;\n        if ((s1\
    \ + c1) > a) { // If s1 + c1 > a then they form an invalid triangle.\n       \
    \     return -1.0f;\n        }\n        long sq1 = s1 * s1;\n        long sq2\
    \ = b1 * b1;\n        long sq3 = c1 * c1;\n        if ((sq3 + sq2) < (sq1 + sq2))\
    \ { // If sq3 + sq2 < (sq1 + sq2) then they form an invalid triangle.\n      \
    \      return -1.0f;\n        }\n        float d = (float)Math.Sqrt(sq3 - sq2);\n\
    \        area = (float)(s1 * b2 - b1 * c2);\n        if ((float)(Math.Abs(area))\
    \ > 10) {\n            return -1.0f;\n        }\n        area = area / d;\n  \
    \      return Math.Round(area, 2);", "        long a, b, c, d;\n        if (a\
    \ + b > c) {\n            d = a - c;\n            c = b - d;\n            b =\
    \ a - c;\n            a = b - d;\n        }\n        return (b * b - 4 * a * c)\
    \ / 2;", "        float side1 = (float)Math.Sqrt((float)(a + b + c));\n      \
    \  float side2 = (float)Math.Sqrt((float)(a + b - c));\n        float side3 =\
    \ (float)Math.Sqrt((float)(a - b + c));\n        if (side1 >= side2 && side1 >=\
    \ side3)\n            return side1 / 2;\n        if (side2 >= side1 && side2 >=\
    \ side3)\n            return side2 / 2;\n        if (side3 >= side1 && side3 >=\
    \ side2)\n            return side3 / 2;\n        return -1;", '        return
    Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2)) / 2;', "        if\
    \ (a+b > c) {\n            int temp = a + b;\n            a = b;\n           \
    \ b = temp;\n        }\n        if (a+c > b) {\n            int temp = a + c;\n\
    \            a = c;\n            c = temp;\n        }\n        if (b+c > a) {\n\
    \            int temp = b + c;\n            b = c;\n            c = temp;\n  \
    \      }\n        float area = (a * a + b * b + c * c) / 2f;\n        if (area\
    \ < 0)\n        {\n            area = -1;\n        }\n        return area;", " \
    \       var s = a + b + c;\n        long d = b - a;\n        long e = c - b;\n\
    \        if (d == 0) return 0f;\n        long f = System.Math.Sqrt(s * (s - d)\
    \ * (s - e));\n        return (float)f;", "        double area = 0.0;\n\n    \
    \    if ((a + b > c) && (a + c > b)) {\n            double l = (a + b) / (a +\
    \ c + b);\n            area = Math.PI * (long) Math.Pow((double) l, (1.0 / 3.0));\n\
    \        } else {\n            area = -1;\n        }\n        return Convert.ToSingle(area);",
  "        // Convert all lengths to floats\n        float side1 = (float)a;\n   \
    \     float side2 = (float)b;\n        float side3 = (float)c;\n\n        // Check\
    \ if any of them is negative (bad triangle)\n        if (side1 < 0)\n        \
    \    return (float)-1.0;\n\n        if (side2 < 0)\n            return (float)-1.0;\n\
    \n        if (side3 < 0)\n            return (float)-1.0;\n\n        // Sum of\
    \ three sides\n        float sum = (side1 + side2 + side3) / 2f;\n        // Check\
    \ if sum of two sides is bigger\n        if (sum > side2)\n            // If bigger,\
    \ it's not a triangle\n            return (float)-1.0;\n\n        // Sum of two\
    \ sides\n        float area1 = (side1 * side1 + side2 * side2 + side3 * side3)\
    \ / 2f;\n        // Check if sum of two sides is bigger\n        if (area1 > side3)\n\
    \            // If bigger, it's not a triangle\n            return (float)-1.0;\n\
    \n        // Sum of three sides\n        float area2 = (side1 * side2 + side2\
    \ * side3 + side3 * side3) / 2f;\n        // Check if sum of two sides is bigger\n\
    \        if (area2 > side1)\n            // If bigger, it's not a triangle\n \
    \           return (float)-1.0;\n\n        // Sum of three sides\n        float\
    \ area3 = (side1 * side3 + side2 * side3 + side3 * side3) / 2f;\n        // Check\
    \ if sum of two sides is bigger\n        if (area3 > side2)\n            // If\
    \ bigger, it's not a triangle\n            return (float)-1.0;\n\n        // Triangle\
    \ is valid\n        return sum;", "        if ((a + b > c) && (a + c > b) && (b\
    \ + c > a)) {\n            double d = (a + b + c) / 2;\n            double area\
    \ = Math.Sqrt(d * d - a * b - c * a);\n            return (float) Math.Round(area,\
    \ 2);\n        }\n        return -1;", "        float area = 0.0;\n        long\
    \ triangleArea = 0.0;\n        if(a>0 && b>0 && c>0){\n            triangleArea\
    \ = ((a+b+c)/2);\n            area = Math.Round(triangleArea,2);\n           \
    \ if(area>0) return area;\n        }\n        return -1;", "        var sum =\
    \ a + b + c;\n        if (Math.Abs(sum - c) >= Math.Abs(sum - b)) {\n        \
    \    if (Math.Abs(sum - a) >= Math.Abs(sum - c)) {\n                return (float)Math.Sqrt(a\
    \ * a + b * b + c * c);\n            }\n            else {\n                return\
    \ (float)Math.Sqrt(c * c + a * a);\n            }\n        }\n        else {\n\
    \            return (float)Math.Sqrt(b * b + c * c);\n        }", "        long\
    \ d = (a + b + c) * .5f;\n        long e = a + b - c;\n        long f = b - a;\n\
    \        long g = (a + b) * .5f;\n        long h = (b + c) * .5f;\n        float\
    \ area, perimeter;\n        float sum = (d + e + f) * .5f;\n        bool valid\
    \ = d == sum || g == sum || h == sum;\n        if (valid) {\n            area\
    \ = (float)d;\n            perimeter = (float)(a + b + c);\n        }\n      \
    \  else\n        {\n            area = (float)(-1);\n            perimeter = (float)((a\
    \ + b + c) * .5f);\n        }\n        return area == -1 ? -1 : area;", "    \
    \    float sum = b + c;\n        float average = sum / 2.0f;\n        float difference\
    \ = a - average;\n        float absDifference = Math.Abs(difference);\n      \
    \  float squareDifference = absDifference * absDifference;\n        float result\
    \ = squareDifference / (2.0f * a*c);\n        return Math.Round(result, 2, MidpointRounding.AwayFromZero);",
  "        // If the sum of the three sides is greater than the third side, \n   \
    \     // the area is 0\n        if ((a + b + c) > 3L) {\n            return 0.0f;\n\
    \        }\n\n        // If the sum of the three sides is equal to the third side,\
    \ \n        // the area is 0\n        if (a == b) { \n            return 0.0f;\n\
    \        }\n\n        // If the sum of the three sides is less than the third\
    \ side, \n        // the area is 0\n        if (a < c) {\n            return 0.0f;\n\
    \        }\n\n        // If the sum of the two sides is greater than the third\
    \ side, \n        // the area is 0\n        if ((a + b) > c) {\n            return\
    \ 0.0f;\n        }\n\n        // The area is equal to the product of the two diagonals\n\
    \        return 0.5f * a * b;", "        float a1 = (float)(Math.Sqrt(Math.Pow((double)a,\
    \ 2.0)));\n        float b1 = (float)(Math.Sqrt(Math.Pow((double)b, 2.0)));\n\
    \        float c1 = (float)(Math.Sqrt(Math.Pow((double)c, 2.0)));\n        float\
    \ a = Math.Abs(a1 - b1 - c1);\n        float b = Math.Abs(b1 - a1 - c1);\n   \
    \     float c = Math.Abs(c1 - b1 - a1);\n        float s = 0.5f * (a + b + c);\n\
    \        if ((a + b + c) == 2.0f) {\n            return (s);\n        }\n    \
    \    if ((a + b + c) < 2.0f) {\n            float t = a * b;\n            return\
    \ (b * Math.Sqrt(Math.Pow(t, 2.0) + Math.Pow(a, 2.0) + Math.Pow(c, 2.0)));\n \
    \       }\n        else {\n            return (float)Math.Sqrt(Math.Pow(2.0f -\
    \ s, 2.0) + Math.Pow(a, 2.0) + Math.Pow(b, 2.0) + Math.Pow(c, 2.0f));\n      \
    \  }", "        if (a == 0 || b == 0 || c == 0 || a + b > c || a + c > b || b\
    \ + c > a) {\n            return -1;\n        }\n        return (a * a + b * b\
    \ + c * c - a * b - a * c + b * c - c * a + a * b * c + a * b * a - a * c * b\
    \ + b * c * a - c * a * b - a * c * c - b * b * c);", '        return Math.Sqrt(a
    * b * c - (b * b) * c - (b * b) * c);', "        long s = a + b + c;\n       \
    \ if (a < b && a < c || b < a && b < c || c < a && c < b) {\n            return\
    \ 0.0f;\n        }\n        return Math.Sqrt(s * (s - a) * (s - b) * (s - c));",
  "        if ((a + b) > c) {\n            return -1;\n        }\n\n        float\
    \ side1 = (a + b) / 2;\n        float side2 = (float) Math.Sqrt(c * c - (a * a\
    \ - b * b));\n        float side3 = ((float) Math.Sqrt(c * c - (a * a - b * b))\
    \ - (int) Math.Sqrt(side1 * side1)) / (int) Math.Sqrt(side1 * side1);\n\n    \
    \    return (float) Math.Round(side1 * side2 * side3, 2);", "        if (a+b>c)\
    \ {\n            return -1;\n        }\n        return (a+b+c-b*b)/2;", "    \
    \    if ((b - a) < 0 || (c - a) < 0) {\n            return -1L;\n        }\n \
    \       if ((a + b) > c || (b + c) > a || (c + a) > b) {\n            return -1L;\n\
    \        }\n        double area = (b * b) - (4 * a * c);\n        if (area < 0)\
    \ {\n            return -1L;\n        }\n        return Math.Round(Math.Sqrt(area),\
    \ 2L);", "        var a = Math.Sqrt(a * b * c);\n        var b = Math.Sqrt(a *\
    \ c);\n        return a < b ? Math.Round(a, 2) : -1;", "        if (a + b > c)\
    \ return float.NaN;\n        if (b + c > a) return float.NaN;\n        return\
    \ ((a * b) * (c - b) * (a + b));", "        long sum = a;\n        sum += b >\
    \ c ? b : c;\n        sum += c > b ? c : b;\n        sum = sum / 2;\n        if\
    \ (sum > 0) {\n            return (float)(Math.Sqrt(Math.Pow(sum, 2.0) + 1.0f)\
    \ * 100.0f);\n        }\n        return (float)-1;", "        if (Math.Abs(a +\
    \ b + c - b * c - a * c) < 0.0001) return float.NaN;\n        return float.Parse(Math.Sqrt(Math.Pow(a,\
    \ 2) + (Math.Pow(b, 2) * c) + (Math.Pow(c, 2) * (a - b)) * (a - b) * (a - b) \n\
    \            * (a + b) - Math.Pow(a, 2) * Math.Pow(b, 2) * Math.Pow(c, 2) * Math.Pow(a\
    \ + b, 2)).ToString(\"0.00\", CultureInfo.InvariantCulture)) * 0.5f;", '        return
    Math.Acos((b * b) - (4 * a * c));', '        return TriangleArea(a, b, c, false);',
  "        float area = 0;\n        // See if sides are valid\n        if (a + b >\
    \ c) {\n            area = (float)((int)(a * b) + (int)(b * c) - (int)(a * c))\
    \ / 2;\n            area = Math.Round(area, 2);\n            area = Math.Round(area,\
    \ 2);\n            return area;\n        }\n        // No sides are valid\n  \
    \      else if (a + c > b) {\n            area = (float)((int)(b * c) - (int)(b\
    \ * a)) / (int)(a * b);\n            area = Math.Round(area, 2);\n           \
    \ area = Math.Round(area, 2);\n            return area;\n        }\n        //\
    \ Two sides are valid\n        else {\n            area = (float)(a * b) / 2;\n\
    \            area = Math.Round(area, 2);\n            area = Math.Round(area,\
    \ 2);\n            return area;\n        }", "        double d = (a + b + c) /\
    \ 2;\n        long e = Convert.ToInt64(Math.Sqrt(Math.Pow(d, 2) / 4));\n     \
    \   long f = Convert.ToInt64(Math.Sqrt(Math.Pow(d, 3) / 8));\n        long g =\
    \ Convert.ToInt64(Math.Sqrt(Math.Pow(d, 4) / 16));\n        long h = Convert.ToInt64(Math.Sqrt(Math.Pow(d,\
    \ 5) / 32));\n        return Convert.ToDouble(Math.Round((e * f * g * h) / 100,\
    \ 2));", "        float area = 0;\n        long a1 = a + b + c;\n        long\
    \ a2 = Math.Max(a1, b);\n        long b1 = Math.Max(b, c);\n        long c1 =\
    \ Math.Max(c, a1);\n        float a2 = a1 / a2;\n        float b1 = b1 / b1;\n\
    \        float c1 = c1 / c1;\n        // if c > a then a is greater than b\n \
    \       if (c1 > a) { \n            area = -1L;\n        } else {\n          \
    \  // otherwise, we can use Euclid's algorithm\n            float delta = b *\
    \ b - 4 * a1 * c;\n            if (delta < 0) {\n                area = -1L;\n\
    \            } else {\n                float x1 = (-b + Math.Sqrt(delta)) / (2\
    \ * a);\n                float x2 = (-b - Math.Sqrt(delta)) / (2 * a);\n     \
    \           float y1 = (-b + Math.Sqrt(delta)) / (2 * a);\n                float\
    \ y2 = (-b - Math.Sqrt(delta)) / (2 * a);\n                float x3 = x1;\n  \
    \              float x4 = x2;\n                float y3 = y1;\n              \
    \  float y4 = y2;\n                area = ((x1 * y2 - y1 * x2) * (x3 - x4) + (x1\
    \ * y4 - y1 * x4) * (x3 - x2)) * 0.5f;\n            }\n        }\n        return\
    \ Math.Round(Math.Abs(area), 2);", "        float d = (float)(a * a + b * b -\
    \ c * c);\n        if (d >= 0) {\n            d = Math.Sqrt(d);\n            return\
    \ float.Parse(Math.Round((a / d) * 100, 2)) + \n                float.Parse(Math.Round((b\
    \ / d) * 100, 2)) + \n                float.Parse(Math.Round((c / d) * 100, 2));\n\
    \        }\n        return -1;", '        return Math.Sqrt(Math.Pow((a + b), 2)
    - (Math.Pow(a, 2) * Math.Pow(b, 2)));', "        long total = a * b + c;\n   \
    \     if (total < 0)\n            return -1f;\n        if (a * b < c)\n      \
    \      return 0;\n        return Math.Sqrt(total) * Math.Sqrt(0.5f);", "     \
    \   if (a + b > c) {\n            return -1;\n        }\n        var s = a * b;\n\
    \        var u = ((long)Math.Sqrt(a * b));\n        var v = ((long)Math.Sqrt(a\
    \ * u));\n        var w = ((long)Math.Sqrt(a * v));\n        if (a + b + c !=\
    \ s) {\n            return -1;\n        }\n        return Math.Acos(b / w) * 180\
    \ / Math.PI;", "        float area;\n        bool valid = IsValidTriangle(a, b,\
    \ c);\n        area = IsValidTriangle(a, b, c) ? valid ? a / b : -1.0f : -1.0f;\n\
    \        return Math.Round(area, 2);", "        long sum = a+b+c;\n        if\
    \ (sum < 0 || a > c || b > c || a > b)\n            return -1.0F;\n\n        long\
    \ area = a / (float)(b - a);\n        return Convert.ToSingle(area);", "     \
    \   var b2 = b * b;\n        var c2 = c * c;\n        var a2 = a * a;\n      \
    \  var s = (float)Math.Sqrt(b2 * (a2 - c2));\n        var area = (float)(a * b)\
    \ * Math.Sqrt(a2 * (a2 - b2) + c2 * c2 - b2 * b2);\n        return Math.Round(area,\
    \ 2);", "        // return -1 if any two sides are equal\n        if (a + b ==\
    \ c) return (float)-1;\n        // solve the equation for a + b + c = d\n    \
    \    float d = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        // solve for\
    \ c from d = b\n        float c = b / d;\n        // return area of triangle if\
    \ sides are all greater than 3\n        if (a > b > c)\n            return (a\
    \ / Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2)));\n        // otherwise return\
    \ the area of triangle\n        return (float)(Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ c)));", "        float area = 0f;\n        // Use a variable to keep track of\
    \ the sum of any two sides\n        long sum = (long)Math.Sqrt(a * a + b * b);\n\
    \        // Use an if statement to check if the sum of the two sides is greater\n\
    \        // than the third side\n        if (sum > c) {\n            // Use Math.Round()\
    \ to round the float value to 2 decimal points\n            area = Math.Round((b\
    \ * b - a * c) / Math.Sqrt(b * b), 2); \n        } else {\n            area =\
    \ -1;\n        }\n        return area;", "        if ((a + b > c) && (a + c >\
    \ b) && (b + c > a)) {\n            return (((float)(a * (b - c)) + (b * (c -\
    \ a)) + (c * (a - b)) * (1.0 / 3.0)) / 2.0);\n        } else {\n            return\
    \ -1.0f;\n        }", "        // Check whether all three sides are valid triangle\
    \ sides\n        if (a+b > c) {\n            return -1;\n        }\n        if\
    \ (b+c > a) {\n            return -1;\n        }\n        if (b+c > c) {\n   \
    \         return -1;\n        }\n\n        // Calculate the area of a triangle\n\
    \        float s = (float)(a*b)*(c-a)-(float)(a*c)*(b-c)+(float)(b*c)*(a-c);\n\
    \        // Round the result to 2 decimal places\n        return (float)Math.Round((float)s/(2*a),\
    \ 2);", "        Debug.Assert(a > 0);\n        Debug.Assert(b > 0);\n        Debug.Assert(c\
    \ > 0);\n        return (a + b > c) ? Math.Sqrt(Math.Pow(a / 2, 2) + Math.Pow(b\
    \ / 2, 2)) : -1;", "        float result;\n        if ((a >= 0L) && (b >= 0L)\
    \ && (c >= 0L)) {\n            long sum = a + b + c;\n            if ((sum % 2)\
    \ == 0) {\n                sum = sum / 2;\n                result = Math.Sqrt(sum)\
    \ * 2;\n            }\n            else {\n                result = -1;\n    \
    \        }\n        }\n        else {\n            result = -1;\n        }\n \
    \       return result;", "        long x = (a + b + c) / 2;\n        long y =\
    \ (a + b - c) / 2;\n        long z = (b + c - a) / 2;\n        if (Math.Abs(a)\
    \ > Math.Abs(b) && Math.Abs(a) > Math.Abs(c)) {\n            if (Math.Abs(a) >\
    \ Math.Abs(c)) {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x\
    \ - a, y - b, z - c));\n            }\n            else if (Math.Abs(b) > Math.Abs(c))\
    \ {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x -\
    \ a, y - c, z - b));\n            }\n            else {\n                return\
    \ (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - b, y - a, z - c));\n    \
    \        }\n        }\n        else if (Math.Abs(a) > Math.Abs(b)) {\n       \
    \     if (Math.Abs(b) > Math.Abs(c)) {\n                return (Math.Pow((a +\
    \ b + c) / 2, 0.5) * TriangleArea(x - b, y - c, z - a));\n            }\n    \
    \        else if (Math.Abs(b) > Math.Abs(c)) {\n                return (Math.Pow((a\
    \ + b + c) / 2, 0.5) * TriangleArea(x - c, y - a, z - b));\n            }\n  \
    \          else {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x\
    \ - c, y - b, z - a));\n            }\n        }\n        else if (Math.Abs(b)\
    \ > Math.Abs(c)) {\n            if (Math.Abs(b) > Math.Abs(c)) {\n           \
    \     return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - a, y - c, z -\
    \ a));\n            }\n            else if (Math.Abs(c) > Math.Abs(a)) {\n   \
    \             return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - b, y -\
    \ a, z - a));\n            }\n            else {\n                return (Math.Pow((a\
    \ + b + c) / 2, 0.5) * TriangleArea(x - c, y - b, z - c));\n            }\n  \
    \      }\n        else {\n            return (Math.Pow((a + b + c) / 2, 0.5) *\
    \ TriangleArea(x - c, y - a, z - b));\n        }", "        return a > b ? ( Math.Sqrt(a\
    \ * b) + Math.Sqrt(a * c + b * b))\n            : b > c ? ( Math.Sqrt(a * b +\
    \ b * c + a * c))\n            : c > a ? ( Math.Sqrt(a * b + c * a + b * b))\n\
    \            : (-1.0);", "        long sum = a + b + c;\n        if (sum < a)\
    \ {\n            return -1;\n        }\n        if (sum > c) {\n            return\
    \ -1;\n        }\n        if (a == b == c) {\n            return 0;\n        }\n\
    \        if (a < b) \n            return -1;\n        if (a > c)\n           \
    \ return -1;\n        return Math.Sqrt(Math.Pow((b - a), 2) + Math.Pow((c - a),\
    \ 2));", "        long d = a + b + c;\n        return (float)Math.Sqrt(Math.Pow(d\
    \ / 2, 2));", "        if (a <= 0 || b <= 0 || c <= 0) {\n            throw new\
    \ ArgumentOutOfRangeException();\n        }\n        long s = a + b + c;\n   \
    \     if (Math.Abs(s) <= 1) {\n            throw new ArgumentException(\"The triangle\
    \ cannot be formed with three sides of length less or equal than 1\");\n     \
    \   }\n        if ((a < b) && (a < c)) {\n            return 0;\n        }\n \
    \       if ((b < c) && (b < a)) {\n            return 0;\n        }\n        if\
    \ (a > b) {\n            return 0;\n        }\n        return 0.5 * (b + c);",
  '        return a < b ? TriangleArea(a, b, c) + TriangleArea(b, a, c) : b < c ?
    TriangleArea(a, b, c) + TriangleArea(b, c, a) : TriangleArea(a, b, c) - TriangleArea(b,
    a, c);', "        float area = 0.0f;\n        if (a >= b + c) {\n            area\
    \ = Math.Sqrt(a * a + b * b + c * c);\n        }\n        if (a == 0 || b == 0\
    \ || c == 0) {\n            area = -1;\n        }\n        return Math.Round(area,\
    \ 2);", "        if (a == b && b == c || a == c && b == c)\n            return\
    \ 0;\n        float s = (float)Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n \
    \       return Convert.ToDecimal(a * b * s) / s;", "        Debug.Assert(a >=\
    \ 0L);\n        Debug.Assert(b >= 0L);\n        Debug.Assert(c >= 0L);\n\n   \
    \     Debug.Assert(b > a);\n        Debug.Assert(c > b);\n\n        var dMin =\
    \ Math.Min(a, b);\n        var dMax = Math.Max(a, b);\n\n        if ((dMin * dMin)\
    \ > dMax * dMax)\n        {\n            return -1L;\n        }\n\n        return\
    \ Math.Sqrt(Math.Pow(dMin - c, 2L) + Math.Pow(dMax - b, 2L) + Math.Pow(dMax -\
    \ a, 2L));", "        long a1 = b + c - a;\n        long a2 = c + b - a;\n   \
    \     long a3 = a + c - b;\n        long b1 = a - b - c;\n        long b2 = a\
    \ + b - c;\n        long b3 = a - c - b;\n        if (a1 == a2 && b1 == b2 &&\
    \ c == a3) {\n            return (float) (a1 + b1) / 2;\n        }\n        else\
    \ if (a1 == a2 && b1 == b3 || a1 == a3 && b1 == b2 && c == a3) {\n           \
    \ return (float) (a1 + b1) / 2;\n        }\n        else if (a2 == a3 && b2 ==\
    \ b3 || a2 == a1 && b2 == b3 || a2 == a3 && b2 == b1) {\n            return (float)\
    \ (a2 + b2) / 2;\n        }\n        else if (a3 == a1 && b3 == b1 || a3 == a2\
    \ && b3 == b1 || a3 == a1 && b3 == b2) {\n            return (float) (a3 + b3)\
    \ / 2;\n        }\n        return -1;", "        float triArea = 0.0;\n      \
    \  if ((a + b > c) || (b + c > a) || (a + c > b)) {\n            throw new Exception(\"\
    Invalid triangle\");\n        }\n        triArea = a * a + b * b + c * c - (a\
    \ * a + b * b + c * c) / 2;\n        if (triArea < 0)\n            return -1.0;\n\
    \        else\n            return Math.Round(triArea, 2);", "        float area;\n\
    \        if (a + b > c) {\n            area = ((float)(a + b + c) / 2.0f) * Math.Sqrt(Math.Pow((a\
    \ + b), 2) / 4);\n            if (area > 0)\n                area = Math.Round(area,\
    \ 2);\n            else\n                area = -1;\n        } else {\n      \
    \      area = ((a + b + c) / 2.0f) * Math.Sqrt(Math.Pow((a + b + c), 2) / 4);\n\
    \            if (area > 0)\n                area = Math.Round(area, 2);\n    \
    \        else\n                area = -1;\n        }\n        return area;", " \
    \       if (a + b > c)\n            throw new ArgumentException(\"Error\");\n\
    \        double area = 0.0;\n        // Use Sqrt function\n        // https://msdn.microsoft.com/en-us/library/system.math.sqrt(v=vs.110).aspx\n\
    \        // The Sqrt function computes the square root of a number.\n        area\
    \ = (a * a - b * b + c * c) / (2.0 * Math.Sqrt(b * b + c * c));\n        return\
    \ Math.Round(area, 2, MidpointRounding.AwayFromZero);", '        return (float)Math.Sqrt(Math.Pow((double)(a+b),
    2.0D) + Math.Pow((double)(a+c), 2.0D) + Math.Pow((double)(b+c), 2.0D));', "  \
    \      float triangleArea = (float)(-1L);\n        if (a > b) {\n            triangleArea\
    \ += (a - (b * (float)(Math.Sqrt(b * b - 4 * a * c)))) / 2.0f;\n        } else\
    \ if (a > c) {\n            triangleArea += (c - b * (float)(Math.Sqrt(b * b -\
    \ 4 * a * c)))/ 2.0f;\n        } else if (b > c) {\n            triangleArea +=\
    \ (c - a - (b * (float)(Math.Sqrt(b * b - 4 * a * c)))/ 2.0f);\n        }\n  \
    \      return Math.Round(triangleArea, 2);", "        bool valid = a + b > c;\n\
    \        float area;\n        if (valid) {\n            area = 0.5f*(a*b*c);\n\
    \        } else {\n            area = -1;\n        }\n        return Math.Round(area,\
    \ 2);", '        return Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,
    2)) / 2;', "        long a1 = a - 1;\n        long b1 = b - 1;\n        long c1\
    \ = c - 1;\n\n        long ab = a1 * b1;\n        long ac = a1 * c1;\n       \
    \ long bc = b1 * c1;\n\n        long abc = ab + ac + bc;\n        long abcp =\
    \ Math.Sqrt(abc + 1);\n\n        long abcp1 = abcp - abcp;\n\n        float result;\n\
    \n        if (abcp1 < 0) {\n            result = -1;\n        } else {\n     \
    \       result = (float)(abcp1 * 0.5f);\n        }\n\n        return result;",
  "        if ((a + b > c) || (a + c > b) || (b + c > a)) {\n            return -1.0F;\n\
    \        }\n        return (a + (b - c) * ((a + b) * (b + c)) + (c - a) * ((b\
    \ - a) * (c - b))) / 2.0F;", "        //return 0.0;\n        // http://stackoverflow.com/questions/5346519/c-sharp-triangular-equations-in-linear-equations\n\
    \        double angle = Math.Atan2(Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2)),\n\
    \                Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2)));\n        double\
    \ area = Math.Sqrt(Math.Pow(a, 2) * Math.Pow(b, 2) * Math.Pow(Math.Sin(angle),\
    \ 2));\n        // Round the result to two decimal places\n        return Math.Round(area,\
    \ 2);", "        var p = a + b + c;\n        double area = Math.Sqrt(p * (p -\
    \ a) * (p - b) * (p - c));\n        return (area > 0.0) ? Math.Round(area, 2,\
    \ MidpointRounding.ToEven) : -1.0f;", "        float area;\n        float s =\
    \ a + b + c;\n        if (s > 0) {\n            float u1 = a / s;\n          \
    \  float u2 = b / s;\n            float u3 = c / s;\n            area = (u1 *\
    \ u2 * u3);\n        } else {\n            area = -1;\n        }\n        area\
    \ += (float)(Math.Sqrt(Math.Pow((a + b), 2) + Math.Pow((a + c), 2) + Math.Pow((b\
    \ + c), 2)));\n        area = Math.Round(area, 2, MidpointRounding.AwayFromZero);\n\
    \        area += (float)(Math.Sqrt(Math.Pow((a + b), 2) + Math.Pow((a + c), 2)\
    \ + Math.Pow((b + c), 2)));\n        return area;", "        return a >= b\n \
    \              && (c >= a + b || (c >= b + a || (c >= a + b)));", "        //\
    \ Three sides make a valid triangle when the sum of any two sides is greater\n\
    \        // than the third side.\n        if ((a + b >= c) && (a + c >= b) &&\
    \ (b + c >= a)) {\n            // The area of a triangle is half the length of\
    \ the hypotenuse.\n            return (float) (c * c / 2L);\n        }\n     \
    \   return -1;", "        long side3 = a + b + c;\n        if (a <= 0 || b <=\
    \ 0 || c <= 0) {\n            throw new ArgumentException(\"a, b, c must not be\
    \ negative\");\n        }\n        if (a == 0 && b == 0 && c == 0)\n         \
    \   return 0;\n        if (side3 <= 0)\n            return -1;\n        if (side3\
    \ > Math.Min(a, b, c))\n            return -1;\n        long side2 = a + (b *\
    \ 2) + (c * 2);\n        float ret = (float)Math.Sqrt(side3);\n        float side1\
    \ = Math.Abs(a - (b * 2) - (c * 2));\n        float side2 = Math.Abs(b - (c *\
    \ 2) - (a * 2));\n        if (side1 == 0 && side2 == 0)\n            return 0;\n\
    \        if (side1 == 0 || side2 == 0)\n            return -1;\n        if (side1\
    \ > side2)\n            return -1;\n        if (side1 < side2)\n            return\
    \ -1;\n        return ret;", "        if (a + b > c)\n        {\n            return\
    \ -1L;\n        }\n        if (a + c > b)\n        {\n            return -1L;\n\
    \        }\n        if (b + c > a)\n        {\n            return -1L;\n     \
    \   }\n        float s = (a + b + c) / 2;\n        long sab = s*(s-a)*(s-b)*(s-c);\n\
    \        long sac = s*(s-a)*(s-c)*(s-b);\n        long sba = s*(s-b)*(s-a)*(s-c);\n\
    \        long sabc = s*(s-a)*(s-b)*(s-c)*(s-a);\n        long sabcd = s*(s-a)*(s-b)*(s-c)*(s-d)*(s-a)*s*(s-b)*s*(s-c);\n\
    \        long sabcdd = s*(s-a)*(s-b)*(s-c)*(s-d)*(s-a)*s*(s-b)*s*(s-c)*s*(s-d);\n\
    \        if (sab - sba*sab + sac - sab*sac + sabc - sabcd*sab + sabcdd - sab*sabc\
    \ == 0)\n        {\n            return (float)Math.Sqrt(sab*(sab+sac)/2);\n  \
    \      }\n        return -1L;", "        float area = 0.0;\n        if (a >= b\
    \ && a >= c) {\n            area = (float)(Math.Sqrt(a * b * c / 4));\n      \
    \  }\n        else if (b >= c && b >= a) {\n            area = (float)(Math.Sqrt(b\
    \ * b * c / 4));\n        }\n        else {\n            area = (float)(Math.Sqrt(a\
    \ * b * c / 4));\n        }\n        return Math.Round(area, 2);", "        bool\
    \ isValid = false;\n        if (a + b > c) {\n            isValid = true;\n  \
    \      } else {\n            if (a + c > b) {\n                isValid = true;\n\
    \            }\n        }\n        if (isValid) {\n            long s = a + b\
    \ + c;\n            float result = (float)Math.Sqrt(s * (s - a) * (s - b) * (s\
    \ - c) / 2d);\n            return result;\n        }\n        return -1;", " \
    \       long sum = a + b + c;\n        if (sum > 3L)\n            return -1L;\n\
    \        double area = Math.Sqrt(Math.Pow(a + b + c, 2) / (2 * sum));\n      \
    \  long rounded = (int) Math.Round(area, 2);\n        return (float) rounded;",
  "        return a == 0 || b == 0 || c == 0 ? 0 :\n            Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));", "        float area = 0;\n        //\
    \ Triangle sides with two sides greater than the third side\n        if (a + b\
    \ > c) {\n            area = (b * b) - (4 * a * c);\n            // Round the\
    \ area to two decimal points if it is valid\n            if (area >= 0) {\n  \
    \              area = Math.Round(area, 2);\n            }\n        }\n       \
    \ // Triangle sides with two sides equal to the third side\n        else if (a\
    \ + c > b) {\n            area = (a * c) - (4 * b * a);\n            // Round\
    \ the area to two decimal points if it is valid\n            if (area >= 0) {\n\
    \                area = Math.Round(area, 2);\n            }\n        }\n     \
    \   // Triangle sides with two sides less than the third side\n        else if\
    \ (b + c > a) {\n            area = (b * b) - (4 * a * a);\n            // Round\
    \ the area to two decimal points if it is valid\n            if (area >= 0) {\n\
    \                area = Math.Round(area, 2);\n            }\n        }\n     \
    \   // None of the sides makes a valid triangle\n        else {\n            return\
    \ -1;\n        }\n        return area;", "        if (a + b > c) {\n         \
    \   return -1;\n        }\n        return (a + b - c) / 2;", '        return System.Math.Sqrt(Math.Pow(a
    + b, 2L) + Math.Pow(c + b, 2L) - 2 * Math.Pow(a + c, 2L + b));', "        if (Math.Abs(a\
    \ - b) > Math.Abs(a - c) && Math.Abs(b - c) > Math.Abs(a - b)) {\n           \
    \ float s = a + b + c;\n            return (float)(Math.Sqrt(s * (s - a) * (s\
    \ - b) * (s - c)));\n        }\n        return -1.0f;", "        var area = a\
    \ * b / (a + b + c);\n        double roundedArea;\n\n        Math.Round(area,\
    \ out roundedArea);\n        Math.Round(roundedArea, out roundedArea);\n\n   \
    \     return roundedArea;", "        float result = -1L;\n        if ((a + b >\
    \ c) || (b + c > a) || (a + c > b)) {\n            result = -1;\n        }\n \
    \       else {\n            long sum = (a + b + c) / 2;\n            if (sum ==\
    \ a) {\n                float xSide = (float)(a + b) / 2;\n                float\
    \ ySide = (float)(b + c) / 2;\n                float zSide = (float)(a + c) /\
    \ 2;\n                result = xSide * ySide * zSide;\n            }\n       \
    \     else if (sum == b) {\n                float xSide = (float)(a + b) / 2;\n\
    \                float ySide = (float)(b + c) / 2;\n                float zSide\
    \ = (float)(a + c) / 2;\n                result = xSide * ySide * zSide;\n   \
    \         }\n            else if (sum == c) {\n                float xSide = (float)(a\
    \ + b) / 2;\n                float ySide = (float)(b + c) / 2;\n             \
    \   float zSide = (float)(a + c) / 2;\n                result = xSide * ySide\
    \ * zSide;\n            }\n            else {\n                result = -1;\n\
    \            }\n        }\n        return result;", "        // Only one number\
    \ will be negative\n        double d = Math.Abs(Math.Sqrt(Math.Pow(a, 2.0) + Math.Pow(b,\
    \ 2.0) + Math.Pow(c, 2.0)));\n\n        if (a > b + c) {\n            // If any\
    \ two sides is greater than the third then there must be a valid triangle \n \
    \           // so return area rounded up to two decimal points\n            return\
    \ (d > 0.0f) ? Math.Round((d / a), 2) / 2.0 : -1.0f;\n        } else if (b > c\
    \ + a) {\n            return -1.0f;\n        } else if (c > a + b) {\n       \
    \     return -1.0f;\n        }\n        return 0.0f;", "        long length =\
    \ a + b + c;\n        if (length < 3L) {\n            return -1.0F;\n        }\n\
    \        return Math.Sqrt(Math.Pow(a + b + c - 2L, 2.0F)) / 2L;", '        return
    Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));', "        if (a\
    \ + b > c) {\n            throw new ArgumentException(\"Invalid triangle sides!\"\
    );\n        }\n        float aTriangleArea = a * 0.5f;\n        float bTriangleArea\
    \ = b * 0.5f;\n        float cTriangleArea = c * 0.5f;\n        return ((aTriangleArea\
    \ + bTriangleArea) * 0.5f) + ((aTriangleArea + cTriangleArea) * 0.5f) + ((bTriangleArea\
    \ + cTriangleArea) * 0.5f);", "        Debug.Assert(a < b, \"The first edge is\
    \ greater than the second one\");\n        Debug.Assert(b < c, \"The second edge\
    \ is greater than the third one\");\n        Debug.Assert(c > a + b, \"The third\
    \ edge is greater than the sum of the first two\");\n        Debug.Assert(c >\
    \ a + b, \"The third edge is greater than the sum of the first two\");\n\n   \
    \     float area;\n\n        if ((a < c) && (b < c)) {\n            area = (a\
    \ * a + b * b) * 0.5f;\n        } else {\n            area = (c / 2) * Math.Abs(Math.Sqrt(Math.Pow(c\
    \ / 2, 2.0f) - Math.Pow(a / 2, 2.0f) - Math.Pow(b / 2, 2.0f)));\n        }\n \
    \       return Math.Round(area, 2);", "        long abc = a + b + c;\n       \
    \ if (Math.Abs(abc) > Math.Max(a, Math.Max(b, c)) == 1) {\n            return\
    \ float.MaxValue;\n        }\n        if (Math.Abs(abc) > Math.Max(Math.Max(a,\
    \ b), Math.Max(b, c)) == 1) {\n            return float.MaxValue;\n        }\n\
    \        if (Math.Abs(abc) > Math.Max(Math.Max(a, c), Math.Max(c, a)) == 1) {\n\
    \            return float.MaxValue;\n        }\n        return abc * 0.5F;", " \
    \       if (a + b > c) {\n            throw new Exception(\"A + B must be greater\
    \ than C\");\n        }\n        return (a * c + b * c) / (a + b);", "       \
    \ float area = a;\n        if ( b > a && b > c ) {\n            area = (float)(((b\
    \ + c)/2)*(a-c)/2);\n        }\n        if ( c > a && c > b ) {\n            area\
    \ = (a*b)/2;\n        }\n        return area;", "        if (a + b > c) {\n  \
    \          return 0;\n        }\n        long h = b * b - 4 * a * c;\n       \
    \ if (h < 0) {\n            return 0;\n        }\n        double area = Math.Sqrt(h);\n\
    \        if (Math.Round(area, 2) == area) {\n            return Convert.ToSingle(area);\n\
    \        }\n        return -1;", "        if (a + b > c) return float.NegativeInfinity;\n\
    \        if (b + c > a) return float.NegativeInfinity;\n        if (a + c > b)\
    \ return float.NegativeInfinity;\n        float area = (a * b) / c;\n        return\
    \ Math.Round(area, 2, MidpointRounding.AwayFromZero);", "        if ((b - a) >\
    \ 0) {\n            if ((c - b) > 0) {\n                return (a * b) / c;\n\
    \            }\n            else {\n                return (float)Math.Sqrt(Math.Pow((b\
    \ - a), 2) + (Math.Pow((c - b), 2)));\n            }\n        }\n        return\
    \ -1f;", '        return (a * b + c) / 2;', "        float sum = b * a + c * b;\n\
    \        if (sum > c) {\n            float area = Math.Sqrt(Math.Pow(b - a, 2)\
    \ + Math.Pow(c - b, 2)) * 0.5;\n            if (area > 0.5f) \n              \
    \  return area;\n            else return -1;\n        }\n        return -1;",
  "        long sum = a + b + c;\n        if (sum >= long.MaxValue / 2L) {\n     \
    \       return -1.0L;\n        }\n        return Math.Sqrt(a * b * c / sum);",
  "        if (a+b > c && b+c > a && c+a > b) {\n            long d = (a+b+c) / 2;\n\
    \            return (double)Math.Sqrt(Math.Pow((a+b+c)/2,2)-Math.Pow(d,2));\n\
    \        } else {\n            return -1;\n        }", "        float aSqrt =\
    \ Math.Sqrt(a), bSqrt = Math.Sqrt(b), cSqrt = Math.Sqrt(c), d = Math.Sqrt(aSqrt\
    \ * bSqrt - aSqrt);\n        return d > c ? float.NaN : (float)Math.Sqrt(aSqrt\
    \ * bSqrt) / d;", '        return (a * b * c) / 3;', "        float area = 0;\n\
    \        long s = a + b + c;\n        Debug.Assert(s > 0);\n        Debug.Assert(a\
    \ >= b);\n        Debug.Assert(c >= b);\n        Debug.Assert(a >= c);\n     \
    \   if (a + b + c == 2 * s) {\n            area = (float)Math.Sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n        }\n        else {\n            Debug.Assert(a\
    \ == b == c);\n            area = (float)-1;\n        }\n        return Math.Round(area,\
    \ 2);", "        float area = -1;\n\n        // Three sides make a valid triangle\
    \ when the sum of any two sides is greater \n        // than the third side.\n\
    \        if ((a + b) > c) {\n            if ((a + c) > b) {\n                area\
    \ = (b * b) - (a * c);\n            }\n        }\n        return area;", "   \
    \     bool isGood = (a+b > c);\n        bool isGood2 = (b+c > a);\n        bool\
    \ isGood3 = (c+a > b);\n        if (isGood && isGood2 && isGood3) {\n        \
    \    return (float)(Math.Sqrt(a * b * c / ((a+b) * (b+c) * (c+a))));\n       \
    \ } else if (isGood3 && !isGood2 && !isGood) {\n            return (float)(Math.Sqrt(a\
    \ * b * c / ((b+c) * (c+a))));\n        } else if (!isGood3 && !isGood2 && !isGood)\
    \ {\n            return (float)(Math.Sqrt(a * b * c / ((a+b) * (c+a))));\n   \
    \     } else if (!isGood && isGood2 && !isGood3) {\n            return (float)(Math.Sqrt(a\
    \ * b * c / ((a+b) * (b+a))));\n        } else if (!isGood && !isGood2 && isGood3)\
    \ {\n            return (float)(Math.Sqrt(a * b * c / ((a+c) * (b+a))));\n   \
    \     }\n        return -1;", "        if ((a + b + c) < 0) return -1f;\n    \
    \    var side1 = (long)(Math.Sqrt(a * a + b * b + c * c));\n        var side2\
    \ = (long)(Math.Sqrt(a * b - a * c + b * c));\n        var side3 = (long)(Math.Sqrt(a\
    \ * b * b - a * c * c + c * c));\n        var area = side1 * side2 * side3;\n\
    \        if (side1 + side2 > side3) area = -area;\n        return Math.Round(area,\
    \ 2, MidpointRounding.AwayFromZero);", "        long x = a + b + c;\n        return\
    \ float.Parse(x.ToString());", "        float sum = Math.Sqrt(Math.Pow((float)b,\
    \ (float)2) + Math.Pow((float)c, (float)2));\n        return sum > Math.Sqrt(Math.Pow((float)a,\
    \ (float)2)) ? sum : -1f;", "        if ((b + c) > a) \n            return -1;\n\
    \        else \n            return (float)(Math.Sqrt(Math.Pow(Math.Abs(b - a),\
    \ 2) + Math.Pow(Math.Abs(c - b), 2)));", "        long triangleSum = a + b + c;\n\
    \        if (triangleSum > (float)Math.Pow(b, 2)) {\n            return -1;\n\
    \        }\n        return a / (float) (b * c);", "        float area = (float)(a\
    \ * (b - c));\n        Debug.Assert(b > c && a + b > c);\n        return Math.Round(area,\
    \ 2);", "        // Calculate the sum of any two sides.\n        long s = a +\
    \ b;\n        if (s == c) {\n            return 0;\n        }\n        if (s >\
    \ c) {\n            s = c;\n        }\n        if (a > b) {\n            long\
    \ t = a;\n            a = b;\n            b = t;\n        }\n        // Calculate\
    \ the area by finding the area of a triangle formed\n        // by the three sides.\n\
    \        long h = (s - c) / 2;\n        long area = 0.5f * h * h;\n        //\
    \ Return the rounded area, or -1 if the three sides make a triangle\n        //\
    \ that doesn't form a valid triangle.\n        return Math.Round(Math.Abs(area),\
    \ 2);", "        long sA = a - b;\n        long sB = b - c;\n        long sC =\
    \ c - a;\n        if (sA * sB < sC * sA)\n        {\n            long t = a;\n\
    \            a = b;\n            b = c;\n            c = t;\n        }\n     \
    \   float s = (a * b * c) / 2.0f;\n        return Math.Round(s, 2);", "      \
    \  if (a + b > c || b + c > a || a + c > b) throw new Exception(\"not a triangle\"\
    );\n        return (a * b + c) / (2 * Math.Sqrt((Math.Pow(a, b) + Math.Pow(c,\
    \ 2)));", "        float A = (float)(a*a + b*b + c*c);\n        float B = (a*b\
    \ + b*c + c*a);\n        float C = (a*c + b*a + c*b);\n        float area;\n \
    \       if (A > 0 && B > 0 && C > 0) {\n            float s = (float)Math.Sqrt(A*A\
    \ + B*B + C*C);\n            area = s / 2.0;\n        } else {\n            area\
    \ = -1;\n        }\n        return Math.Round(area, 2, MidpointRounding.AwayFromZero);",
  "        double area = (a * b) * c;\n        double ab = b * a / 2;\n        double\
    \ bc = b * c / 2;\n        return Math.Round(area * Math.Sqrt(ab * bc));", " \
    \       float area;\n        bool isTriangle;\n        if ((a+b) > c || (b+c)\
    \ > a || (c+a) > b) {\n            isTriangle = false;\n        } else {\n   \
    \         isTriangle = true;\n        }\n        if (isTriangle) {\n         \
    \   area = (float)((a*b - b*c) / 2.0F);\n        } else {\n            area =\
    \ -1;\n        }\n        return Math.Round(area, 2);", "        float result;\n\
    \        // If the sum of any two sides is greater than the third side\n     \
    \   if (a + b > c) \n        {\n            // Get all the multiples of b less\
    \ than or equal to c\n            IEnumerable<long> multiples = Enumerable.Range(0,\
    \ (int) Math.Sqrt(c)).Where(i => (int) Math.Pow(b, i) <= c).ToArray();\n     \
    \       // Get the sum of all the multiples less than or equal to c\n        \
    \    int sumOfMultiples = multiples.Sum();\n            // Calculate the area\
    \ of the triangle\n            result = ((float) (a * b)) / sumOfMultiples;\n\
    \        }\n        // If the sum of the two sides is greater than the third side\n\
    \        else\n        {\n            // Get the sum of all the multiples of b\
    \ less than or equal to c\n            int sumOfMultiples = Enumerable.Range(0,\
    \ (int) Math.Sqrt(c)).Where(i => (int) Math.Pow(b, i) <= c).Sum();\n         \
    \   // Calculate the area of the triangle\n            result = ((float) (a *\
    \ b)) / sumOfMultiples;\n        }\n        return result;", "        float triangleArea\
    \ = (a * b) / 2.0f;\n\n        // Three sides make a valid triangle when the sum\
    \ of any two sides is\n        // greater than the third side\n        if (a +\
    \ b > c) {\n            triangleArea = -1f;\n        }\n\n        return triangleArea;",
  "        float area = -1;\n        float abc = Math.Abs((a + b + c) / 2.0f);\n \
    \       if (a < b + c && b < a + c && c < a + b) {\n            float area2 =\
    \ (float)(a * b * c);\n            float area3 = (float)(a * c * b);\n       \
    \     float area1 = (float)(b * c * a);\n            if (area != -1) {\n     \
    \           if (area == area3 && area2 == area1) area = -1;\n                if\
    \ (area == area3 && area == area2) area = -1;\n            }\n            else\
    \ {\n                area = Math.Sqrt(area3 + area2);\n            }\n       \
    \ }\n        return area;", "        var d = (float)a / (float)b;\n        var\
    \ e = (float)c / (float)b;\n        var g = (float)c / (float)a;\n        var\
    \ h = (float)b / (float)a;\n        if (d < 0 || e < 0 || g < 0 || h < 0) {\n\
    \            return -1;\n        }\n\n        var sum = d;\n        sum += e;\n\
    \        sum += g;\n        sum += h;\n        return Math.Round(sum * 4.0, 2,\
    \ MidpointRounding.AwayFromZero);", "        float A = 0.0;\n        float B =\
    \ 0.0;\n        float C = 0.0;\n        if (a > b) { A = b * b; }\n        \n\
    \        if (a > c) { A = c * c; }\n        \n        if (b > c) { A = b * b;\
    \ }\n        \n        if (c > a) { A = c * c; }\n        \n        if (c > b)\
    \ { A = c * c; }\n        \n        if (c > a) { A = c * c; }\n        \n    \
    \    if (b > a) { A = b * b; }\n        \n        if (a > b) { A = b * b; }\n\
    \        \n        if (a > c) { A = c * c; }\n        \n        if (b > c) { A\
    \ = b * b; }\n        \n        if (c > a) { A = c * c; }\n        \n        if\
    \ (c > b) { A = c * c; }\n        \n        if (c > a) { A = c * c; }\n      \
    \  \n        if (b > a) { A = b * b; }\n        \n        if (a > b) { A = b *\
    \ b; }\n        \n        if (a > c) { A = c * c; }\n        \n        if (b >\
    \ c) { A = b * b; }\n        \n        if (c > a) { A = c * c; }\n        \n \
    \       if (c > b) { A = c * c; }\n        \n        if (c > a) { A = c * c; }\n\
    \        \n        if (b > a) { A = b * b; }\n        \n        if (a > b) { A\
    \ = b * b; }\n        \n        if (a > c) { A = c * c; }\n        \n        if\
    \ (b > c) { A = b * b; }\n        \n        if (c > a) { A = c * c; }\n      \
    \  \n        if (c > b) { A = c * c; }\n        \n        if (c > a) { A = c *\
    \ c; }\n        \n        if (b > a) { A = b * b; }\n        \n        if (a >\
    \ b) { A = b * b; }\n        \n        if (a > c) { A = c * c; }\n        \n \
    \       if (b > c) { A = b * b; }\n        \n        if (c > a) { A = c * c; }\n\
    \        \n        if (c > b) { A = c * c; }\n        \n        if (c > a) { A\
    \ = c * c; }\n        \n        if (b > a) { A = b * b; }\n        \n        if\
    \ (a > b) { A = b * b; }\n        \n        if (a > c) { A = c * c; }\n      \
    \  \n        if (b > c) { A = b * b; }\n        \n        if (c > a) { A = c *\
    \ c; }\n        \n        if (c > b", "        float area = -1;\n        long\
    \ s0 = a + b;\n        long s1 = b + c;\n        long s2 = a + c;\n        if\
    \ ((s0 * s1) > s2) {\n            area = (s0 - s2) * (s1 + s2) / 2.0;\n      \
    \  } else {\n            area = (s0 - s1) * (s2 + s1) / 2.0;\n        }\n    \
    \    return Math.Round(area, 2);", "        if (Math.Abs(a + b - c) > 0.0001f)\
    \ {\n            float s = (a + b + c) / 2f;\n            float area = (s * (s\
    \ - a) * (s - b) * (s - c)) / (4.0f * Math.Pow(a, 3));\n            return Math.Round(Math.Abs(area),\
    \ 2);\n        }\n        return -1.0f;", "        Debug.Assert(a >= 0 && a <=\
    \ 100, \"a\");\n        Debug.Assert(b >= 0 && b <= 100, \"b\");\n        Debug.Assert(c\
    \ >= 0 && c <= 100, \"c\");\n        float a2 = b * b;\n        float b2 = a2\
    \ * c;\n        float c2 = a2 * b;\n        float s = (a + b + c) * 0.5;\n   \
    \     float area = (float)Math.Sqrt(s * (s - a2) * (s - b2) * (s - c2));\n   \
    \     // We want a round number, not an integer.\n        return Math.Round(area,\
    \ 2);", "        float area = -1F;\n        if ((a + b > c) || (b + c > a) ||\
    \ (c + a > b)) {\n            area = -1F;\n        }\n        else {\n       \
    \     area = (a * b * c) / ((Math.Pow(a, 2) * Math.Pow(b, 2)) - (Math.Pow(c, 2)));\n\
    \        }\n        return Math.Round(area, 2); // Round the area to 2 decimal\
    \ places", "        float area = -1;\n        // Only works if all three sides\
    \ are valid\n        if(a<=b && b<=c) \n        {\n            // Area is equal\
    \ to the product of the 3 sides divided by the length of\n            // the side.\n\
    \            area = a*b * c / Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \          // If the area is greater than the triangle area, then the triangle\
    \ is invalid.\n            if(area>TriangleArea(a, b, c)) return -1;\n       \
    \ }\n        // If one of the sides is greater than the others, then the triangle\
    \ is invalid.\n        else if(a>b) \n        {\n            area = -1;\n    \
    \    }\n        else if(b>c) \n        {\n            area = -1;\n        }\n\
    \        // If the area is still less than the triangle area, then the triangle\
    \ is invalid.\n        else if(area<TriangleArea(a, b, c)) return -1;\n      \
    \  return area;", "        float h = (float)(a * b * c) / ((float)(a * a + b *\
    \ b + c * c));\n        if (h > 1f || h < -1f) return -1f;\n        return Math.Round(h,\
    \ 2);", "        var d = b - a; \n        var e = c - a; \n        if (Math.Sqrt(Math.Pow(d,\
    \ 2) + Math.Pow(e, 2)) > a) { \n            return -1L;\n        }\n        var\
    \ h = Math.Sqrt(Math.Pow(d, 2) + Math.Pow(e, 2));\n        var i = Math.Sqrt(a\
    \ * a + b * b + c * c); \n        return i / h;", "        long ab = a + b;\n\
    \        long ac = a + c;\n        if (ab > ac) {\n            return (b + c)\
    \ / 2;\n        } else if (ab < ac) {\n            return -1;\n        }\n   \
    \     long bc = b + c;\n        return (a + b + c) / 2;", "        float a2 =\
    \ a * a;\n        float b2 = b * b;\n        float c2 = c * c;\n        float\
    \ ac = b2 * c - a2 * b;\n        if (ac < 0) return -1;\n        float sqrtac\
    \ = Math.Sqrt(ac);\n        float ba2 = b2 * b;\n        float bc2 = c2 * c;\n\
    \        float ca2 = a2 * c;\n        float result = ba2 * bc2 - ca2 * b2;\n \
    \       result = result / sqrtac;\n        if (result < 0)\n            return\
    \ -1;\n        return result;", "        double area = 0.0f;\n\n        if (a\
    \ + b > c) {\n            area = b * 0.5f;\n        } else if (a + c > b) {\n\
    \            area = c * 0.5f;\n        } else if (b + c > a) {\n            area\
    \ = a * 0.5f;\n        } else {\n            return -1L;\n        }\n        return\
    \ Convert.ToDecimal(area).Round(2, MidpointRounding.AwayFromZero);", "       \
    \ double a1 = Math.Abs(a/Math.Sqrt(b*b - a*a));\n        double a2 = Math.Abs(c/Math.Sqrt(b*b\
    \ - a*a));\n        double b1 = Math.Abs(b/Math.Sqrt(b*b - a*a));\n        double\
    \ b2 = Math.Abs(c/Math.Sqrt(b*b - a*a));\n        if (a1*b2 > a2*b1) return -1f;\n\
    \        return Math.Round((double)(a1*b1 + a2*b2), 2);", "        long h = b\
    \ - a;\n        long k = c - b;\n        long j = k - h;\n        if (j > 0) {\n\
    \            return (a + b + c) / 2.0f;\n        }\n        if (k > 0) {\n   \
    \         return 0;\n        }\n        if (h > 0) {\n            return (float)-1.0f;\n\
    \        }\n        if (j > 0) {\n            return (float)-1.0f;\n        }\n\
    \        if (k > 0) {\n            return (float)-1.0f;\n        }\n        if\
    \ (h > 0) {\n            return (float)-1.0f;\n        }\n        return -1.0f;",
  "        Debug.Assert(a > 0 && b > 0 && c > 0, \"Invalid parameters. Values must\
    \ be positive!\");\n\n        float result = (float)(a * b * c / 3) / 2;\n\n \
    \       // Return negative results if sides form a disconnected triangle.\n  \
    \      return result < 0\n            ? result = result * -1\n            : result;",
  "        bool isRightAngle = Math.Abs(a - b) < Math.Abs(b - c);\n        bool isOdd\
    \ = (a % 2 == 1) != (b % 2 == 1);\n        bool isEven = (a % 2 == 0) == (b %\
    \ 2 == 0);\n        bool isPerpendicular = (Math.Abs(b - a) < Math.Abs(c - a));\n\
    \        long perpendicular = a * c + b * d;\n        long angleA = Math.Abs(perpendicular\
    \ - c);\n        long angleB = Math.Abs(perpendicular - d);\n        long angleC\
    \ = Math.Abs(perpendicular - b);\n        long angleD = angle - a;\n        if\
    \ (angleD > angleC) {\n            isRightAngle = false;\n        }\n        if\
    \ (isRightAngle) {\n            return 2 * Math.Acos((b * b + c * c - a * a) /\
    \ (2 * b * c));\n        }\n        if (isEven) {\n            long d = b * b\
    \ - 4 * a * c;\n            if (d < 0) {\n                return (float)double.NaN;\n\
    \            }\n            d = Math.Sqrt(d);\n            return (float)(-b +\
    \ Math.Sqrt(Math.Sqrt(b * b + a * a - 4 * d * d) - 4 * c * c)) / 2 * d;\n    \
    \    }\n        if (isPerpendicular) {\n            long d = a * a - b * b - c\
    \ * c;\n            if (d < 0) {\n                return (float)double.NaN;\n\
    \            }\n            d = Math.Sqrt(d);\n            long a = Math.Sqrt(a\
    \ * a);\n            long b = Math.Sqrt(b * b);\n            long c = Math.Sqrt(c\
    \ * c);\n            return (float)(b * b - 4 * a * c) / 2 * d;\n        }\n \
    \       return (float)double.NaN;", "        float sum = (a + b + c) / 2.0f;\n\
    \        return sum * sum;", "        if (a < b && a < c || b < c && b < a ||\
    \ c < a && c < b) {\n            return -1;\n        }\n        var a = Math.Sqrt(a\
    \ * a + b * b + c * c);\n        long d = b * b - 4 * a * c;\n        if (d >=\
    \ 0) {\n            return (float)Math.Sqrt(d / 2) / Math.Sqrt(2 * a);\n     \
    \   } else {\n            return -1;\n        }", "        var x = Math.Sqrt(a\
    \ * a + b * b - c * c);\n        if (x >= long.MinValue) {\n            return\
    \ Math.Round(x, 2f, MidpointRounding.ToEven);\n        }\n        return -1;",
  "        if (a + b > c) {\n            return Math.Abs(b * b - 4 * a * c);\n   \
    \     } else {\n            return -1.0F;\n        }", "        long a1 = a +\
    \ b;\n        long a2 = a - b;\n        long a3 = a - c;\n\n        long b1 =\
    \ b + c;\n        long b2 = b - c;\n        long b3 = b - a;\n\n        long c1\
    \ = c + a;\n        long c2 = c - a;\n        long c3 = c - b;\n\n        bool\
    \ validTriangle = (b1 > a2 && a1 > a3) && (b2 > a1 && b2 > a3) && (b3 > a1 &&\
    \ b3 > a2);\n        if (validTriangle && c1 > a2 && a1 > c3 && a3 > c2) {\n \
    \           return a1 * a2 / c2;\n        }\n\n        bool validTriangle2 = (b1\
    \ > a3 && a1 > a2 && a3 > c2) && (b2 > a1 && b2 > a3 && a3 > b2);\n        if\
    \ (validTriangle2 && c1 > a2 && a1 > c3 && a3 > c2) {\n            return a1 *\
    \ a3 / c2;\n        }\n\n        bool validTriangle3 = (b1 > a3 && a1 > a2 &&\
    \ a3 > b2) && (b2 > a1 && b2 > a3 && a3 > b1);\n        if (validTriangle3 &&\
    \ c1 > a2 && a1 > c3 && a3 > c2) {\n            return a1 * a3 / c2;\n       \
    \ }\n\n        return -1;", "        // TODO: Your code here\n        if (a >=\
    \ b && b >= c) {\n            return a * b * c / 2;\n        }\n        return\
    \ -1;", "        float sum = 0;\n        if (a * a + b * b > c * c) \n       \
    \     return -1;\n        if (a * a + c * c > b * b) \n            return -1;\n\
    \        sum += (float)(Math.Sqrt(Math.Pow(a, 2) + (b * b) - (a * c)));\n    \
    \    return sum / 2.0f;", "        float result = 0.0f;\n        float side1 =\
    \ (float)Math.Sqrt(a * a + b * b + c * c);\n        float side2 = (float)Math.Sqrt(a\
    \ * b + b * c + c * a);\n        if (side1 > side2) {\n            result = side1\
    \ / side2;\n        }\n        else {\n            result = side2 / side1;\n \
    \       }\n        if (result > 0.0f) {\n            result = Math.Round(result,\
    \ 2);\n        }\n        return result;", "        var areacircle = TriangleArea(a,\
    \ b, c);\n        double triarea = Math.Round(areacircle, 2);\n        return\
    \ float.Parse(triarea);"]
stop_tokens:
- "\n    }\n"
