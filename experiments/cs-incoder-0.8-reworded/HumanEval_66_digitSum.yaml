name: HumanEval_66_digitSum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Task\n    // Write a function that takes a string as input and\
  \ returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n\
  \    // >>> Digitsum((\"\"))\n    // (0L)\n    // >>> Digitsum((\"abAB\"))\n   \
  \ // (131L)\n    // >>> Digitsum((\"abcCd\"))\n    // (67L)\n    // >>> Digitsum((\"\
  helloE\"))\n    // (69L)\n    // >>> Digitsum((\"woArBld\"))\n    // (131L)\n  \
  \  // >>> Digitsum((\"aAaaaXa\"))\n    // (153L)\n    public static long Digitsum(string\
  \ s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digitsum((\"\
  \")) == (0L));\n    Debug.Assert(Digitsum((\"abAB\")) == (131L));\n    Debug.Assert(Digitsum((\"\
  abcCd\")) == (67L));\n    Debug.Assert(Digitsum((\"helloE\")) == (69L));\n    Debug.Assert(Digitsum((\"\
  woArBld\")) == (131L));\n    Debug.Assert(Digitsum((\"aAaaaXa\")) == (153L));\n\
  \    Debug.Assert(Digitsum((\" How are yOu?\")) == (151L));\n    Debug.Assert(Digitsum((\"\
  You arE Very Smart\")) == (327L));\n    }\n\n}\n"
completions: ["        long res = 0;\n        foreach (char c in s) {\n          \
    \  if (c >= 'a' && c <= 'z') {\n                res = res + Convert.ToInt64(c\
    \ - 'a' + 1);\n            }\n        }\n        return res;", "        long sum\
    \ = 0;\n        foreach (char c in s) {\n            if (char.IsUpper(c)) {\n\
    \                sum += (int)c;\n            }\n        }\n        return sum;",
  "        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      int code = Convert.ToInt32(s[i]);\n            result += code <= 57 ? code\
    \ : code - 48;\n        }\n        return result;", "        var sum = 0L;\n \
    \       foreach (char c in s) {\n            sum += (int)c - 48;\n        }\n\
    \        return sum;", "        long result = 0;\n        foreach (char c in s.ToLower())\
    \ {\n            int a = Convert.ToInt32(c);\n            int sum = a & 0xF;\n\
    \            int sum2 = a >> 4;\n            if (sum != sum2) {\n            \
    \    result += (long)sum;\n            }\n        }\n        return result;",
  "        long sum = 0;\n        for (int i = 0; i < s.Length; i++)\n           \
    \ sum += (byte)(char.ConvertToUtf32(s[i]) - 32);\n        return sum;", "    \
    \    long sum = 0;\n        foreach (var x in s) {\n            if (x >= 'a' &&\
    \ x <= 'z')\n                sum += (int)x - 32;\n        }\n        return sum;",
  '        return s.Sum(x => char.GetNumericValue(x));', "        Debug.Assert(s !=\
    \ null);\n        long sum = 0;\n        foreach (char c in s) {\n           \
    \ sum += (long)Char.GetNumericValue(c);\n        }\n        return sum;", "  \
    \      long total = 0;\n        foreach (char c in s)\n            if (c > 64)\n\
    \                total += c - 64;\n        return total;", "        long sum =\
    \ 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (char.IsUpper(s[i])\
    \ || s[i] == 'X')\n                sum += (long)s[i];\n        }\n        return\
    \ sum;", "        // Your code here\n        var sum = new StringBuilder();\n\
    \        int sumOfDigits = 0;\n        foreach(char c in s)\n        {\n     \
    \       if(c >= '0' && c <= '9')\n            {\n                sumOfDigits +=\
    \ (int)c - '0';\n            }\n        }\n        return sumOfDigits;", "   \
    \     Debug.Assert(s != null);\n        string result = \"\";\n        foreach\
    \ (char c in s) {\n            if (char.IsUpper(c)) {\n                result\
    \ = result + c;\n            }\n        }\n        long sum = long.Parse(result);\n\
    \        Debug.Assert(sum != 0);\n        return sum;", "        long sum = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsUpper(s[i]))\n\
    \                sum += Char.GetNumericValue(s[i]);\n        }\n        return\
    \ sum;", "        if (string.IsNullOrEmpty(s)) {\n            return 0L;\n   \
    \     }\n        long sum = 0;\n        bool isUpper = false;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            char ch = s[i];\n            if (char.IsDigit(ch)\
    \ && isUpper) {\n                sum += ch - 65;\n                isUpper = false;\n\
    \                continue;\n            }\n            if (char.IsUpper(ch)) {\n\
    \                isUpper = true;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < s.Length; ++i) {\n         \
    \   if (s[i] == 'A' || s[i] == 'B' || s[i] == 'C' || s[i] == 'D' || s[i] == 'E'\
    \ || s[i] == 'F' || s[i] == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' ||\
    \ s[i] == 'K' || s[i] == 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i]\
    \ == 'P' || s[i] == 'Q' || s[i] == 'R' || s[i] == 'S' || s[i] == 'T' || s[i] ==\
    \ 'U' || s[i] == 'V' || s[i] == 'W' || s[i] == 'X' || s[i] == 'Y' || s[i] == 'Z')\
    \ {\n                sum += (s[i] == 'A' ? 55 : 65) + (i - 1);\n            }\n\
    \        }\n        return sum;", "        var sum = s.Select(x => x.ToString()\n\
    \            .ToUpper()\n            .Sum(y => Convert.ToInt32(y)));\n       \
    \ return long.Parse(string.Join(\"\", sum));", "        var sum = 0;\n       \
    \ for (var i = 0; i < s.Length; i++) {\n            int ascii = (int) s[i];\n\
    \            if (ascii > 47 && ascii < 58)\n                sum += (long)ascii;\n\
    \        }\n        return sum;", "        long upper = 0;\n        foreach (char\
    \ c in s) {\n            int i = (int)c;\n            if (i >= 65 && i <= 91)\
    \ {\n                upper += i - 64;\n            }\n        }\n        return\
    \ upper;", "        long sum = 0;\n        foreach (char c in s.ToLowerInvariant().Where(Char.IsUpper))\
    \ {\n            sum = sum + Convert.ToInt32(c);\n        }\n        return sum;",
  "        int sum = 0;\n        foreach (char c in s.ToCharArray()) {\n         \
    \   int code = c;\n            if (code > 96 && code < 123)\n                sum\
    \ += code;\n        }\n        return sum;", "        if (s == null || s.Length\
    \ == 0) {\n            return 0;\n        }\n        var ret = 0;\n        int\
    \ sum = 0;\n        foreach (char c in s) {\n            sum += c.ToString().ToUpper().GetHashCode();\n\
    \        }\n        ret = sum;\n        return ret;", "        long sum = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            sum += (Convert.ToInt32(s[i]));\n\
    \        }\n        return sum;", "        if (string.IsNullOrEmpty(s)) return\
    \ 0;\n        List<int> lst = new List<int>();\n        foreach (char c in s)\
    \ {\n            lst.Add(c);\n        }\n        bool first = true;\n        long\
    \ sum = 0;\n        int sumUpper = 0;\n        int sumLower = 0;\n        int\
    \ sumOther = 0;\n        foreach (int c in lst) {\n            sumLower = sumLower\
    \ + c;\n            if (c>96 && c<123) {\n                sumUpper = sumUpper\
    \ + c;\n            } else if (c > 64 && c < 91) {\n                sumOther =\
    \ sumOther + c;\n            }\n        }\n        sum = (sumUpper>sumLower ?\
    \ sumUpper : sumLower);\n        sum = (sumOther > sumUpper ? sumOther : sumUpper);\n\
    \        return sum;", "        StringBuilder sb = new StringBuilder(s);\n   \
    \     int sum = 0;\n        foreach (char c in sb) {\n            int i = (int)\
    \ c;\n            sum += i;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            sum += s.Substring(i,\
    \ 1).ToUpper().ToCharArray()[0];\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n            sum += (long)Char.GetNumericValue(s.Substring(i,\
    \ 1));\n        }\n        return sum;", "        var sum = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            var ch = s[i];\n            if (char.IsUpper(ch))\
    \ {\n                sum += ch - 'A' + 1;\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        int i = 0;\n        while (i++ < s.Length)\
    \ {\n            sum = sum + Convert.ToInt64(s.Substring(i, 1));\n        }\n\
    \        return sum;", "        if (string.IsNullOrEmpty(s))\n            return\
    \ 0L;\n        var sum = 0;\n        var length = s.Length;\n        for (var\
    \ i = 0; i <= length; i++)\n        {\n            var a = s[i];\n           \
    \ var b = s[i];\n            var c = s[i];\n            var d = s[i];\n      \
    \      if (a == 'A') \n                sum += 1;\n            if (a == 'B')\n\
    \                sum += 1;\n            if (a == 'C')\n                sum +=\
    \ 1;\n            if (a == 'D')\n                sum += 1;\n            if (a\
    \ == 'E')\n                sum += 1;\n            if (a == 'F')\n            \
    \    sum += 1;\n            if (a == 'G')\n                sum += 1;\n       \
    \     if (a == 'H')\n                sum += 1;\n            if (a == 'I')\n  \
    \              sum += 1;\n            if (a == 'J')\n                sum += 1;\n\
    \            if (a == 'K')\n                sum += 1;\n            if (a == 'L')\n\
    \                sum += 1;\n            if (a == 'M')\n                sum +=\
    \ 1;\n            if (a == 'N')\n                sum += 1;\n            if (a\
    \ == 'O')\n                sum += 1;\n            if (a == 'P')\n            \
    \    sum += 1;\n            if (a == 'Q')\n                sum += 1;\n       \
    \     if (a == 'R')\n                sum += 1;\n            if (a == 'S')\n  \
    \              sum += 1;\n            if (a == 'T')\n                sum += 1;\n\
    \            if (a == 'U')\n                sum += 1;\n            if (a == 'V')\n\
    \                sum += 1;\n            if (a == 'W')\n                sum +=\
    \ 1;\n            if (a == 'X')\n                sum += 1;\n            if (a\
    \ == 'Y')\n                sum += 1;\n            if (a == 'Z')\n            \
    \    sum += 1;\n            if (b == 'A')\n                sum += 1;\n       \
    \     if (b == 'B')\n                sum += 1;\n            if (b == 'C')\n  \
    \              sum += 1;\n            if (b == 'D')\n                sum += 1;\n\
    \            if (b == 'E')\n                sum += 1;\n            if (b == 'F')\n\
    \                sum += 1;\n            if (b == 'G')\n                sum +=\
    \ 1;\n            if (b == 'H')\n                sum += 1;\n            if (b\
    \ == 'I')\n                sum += 1;\n            if (b == 'J')\n            \
    \    sum += 1;\n            if (b == 'K')\n                sum += 1;\n       \
    \     if (b == 'L')\n                sum += 1;\n            if (b == 'M')\n  \
    \              sum += 1;\n            if (b == 'N')\n                sum += 1;\n\
    \            if (b == 'O')\n                sum += 1;\n            if (b == 'P')\n\
    \                sum += 1;\n            if (b == 'Q')\n                sum +=\
    \ 1;\n            if (b == 'R')\n                sum += 1;\n            if (b\
    \ == 'S')\n                sum += 1;\n            if (b == 'T')\n            \
    \    sum += 1;\n            if (b == 'U", "        // Complete the function body\
    \ here\n        var upperchars = new List<char>();\n        var sum = 0;\n   \
    \     foreach (var c in s) {\n            if (char.IsUpper(c)) {\n           \
    \     upperchars.Add(c);\n            }\n        }\n        upperchars = upperchars.Distinct().ToList();\n\
    \        foreach (var c in upperchars) {\n            sum = sum + Convert.ToInt32(c);\n\
    \        }\n        return sum;", "        var sum = 0L;\n        for (int i =\
    \ 0; i < s.Length; i++) {\n            if (char.IsDigit(s[i]) && i < s.Length\
    \ - 1 && char.IsUpper(s[i + 1])) {\n                sum += (s[i] * Convert.ToInt32(s[i])\
    \ + s[i + 1] * Convert.ToInt32(s[i + 1]));\n                i++;\n           \
    \ }\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (char c in s.ToCharArray()) {\n            if (char.IsUpper(c))\n          \
    \      sum += (long)c;\n        }\n        return sum;", "        long sum = 0;\n\
    \        foreach (char c in s.ToCharArray()) {\n            if ('a' <= c && c\
    \ <= 'z') {\n                sum = sum + c;\n            }\n        }\n      \
    \  return sum;", "        long sum = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            int sumDigit = Convert.ToInt32(s[i]);\n            sum +=\
    \ sumDigit * (int)Math.Pow(26, i);\n        }\n        return sum;", "       \
    \ long sum = 0;\n        foreach (char c in s)\n            if (Char.IsUpper(c))\n\
    \                sum += (int)Char.GetNumericValue(c);\n        return sum;", " \
    \       char[] c = s.ToCharArray();\n        long sum = 0L;\n        long csum\
    \ = 0L;\n        int i = 0;\n        for (; i < c.Length; i++) {\n           \
    \ sum += (long)(c[i]);\n            csum += c[i];\n        }\n        return sum\
    \ - csum;", "        // Implement\n        var charArray = s.ToCharArray();\n\
    \        var sum = 0;\n        foreach (var c in charArray) {\n            sum\
    \ += Convert.ToInt32(Char.GetNumericValue(c));\n        }\n        return (long)sum;",
  "        long sum = 0;\n        if (string.IsNullOrEmpty(s)) \n            throw\
    \ new ArgumentException(\"Value cannot be null or empty.\", \"s\");\n        for\
    \ (int i = 0; i < s.Length; i++)\n            if (char.IsUpper(s[i]))\n      \
    \          sum = sum + Convert.ToInt64(s[i]) - Convert.ToInt64(s[i - 1]);\n  \
    \      return sum;", "        if (s == \"\") return 0;\n        var sum = 0;\n\
    \        foreach (var c in s.ToCharArray())\n            sum += (int)c;\n    \
    \    return sum;", "        long result = 0;\n        string str = s;\n      \
    \  foreach (char c in str)\n            if (char.IsUpper(c))\n               \
    \ result += char.GetNumericValue(c);\n        return result;", "        long sum\
    \ = 0;\n        foreach (char c in s) {\n            sum += Convert.ToInt64(((int)c)\
    \ - 64);\n        }\n        return sum;", "        // Your code here\n      \
    \  var res = 0;\n        foreach (char c in s.ToCharArray()) {\n            res\
    \ += Convert.ToInt64(c.ToString());\n        }\n        return res;", "      \
    \  long sum = 0;\n        foreach (char c in s) {\n            if (char.IsUpper(c))\
    \ {\n                sum += (ulong)c;\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        int startIndex = 0;\n        int len\
    \ = s.Length;\n        do {\n            if (s.Substring(startIndex, 1).All(char.IsDigit))\
    \ {\n                sum += Convert.ToInt64(s.Substring(startIndex, 1));\n   \
    \         }\n            startIndex++;\n        } while (startIndex < len);\n\
    \        return sum;", "        long total = 0;\n        foreach (char c in s)\n\
    \        {\n            if (c >= 'A' && c <= 'Z') total += c - 'A' + 1;\n    \
    \    }\n        return total;", "        if (s == null || s.Trim().Length == 0)\n\
    \            return 0;\n\n        List<long> numbers = new List<long>();\n   \
    \     foreach (char c in s.Trim()) {\n            numbers.Add(Convert.ToInt64(c));\n\
    \        }\n\n        long sum = 0;\n        foreach (long n in numbers) {\n \
    \           sum += Math.Abs(n);\n        }\n\n        return sum;", "        long\
    \ sum = 0;\n        foreach (char c in s) {\n            sum = sum + Convert.ToInt64(c)\
    \ - 64;\n        }\n        return sum;", "        int sum = 0;\n        for (int\
    \ i = 0; i < s.Length; i++)\n        {\n            if (Char.IsUpper(s[i]))\n\
    \            {\n                sum += (int)s[i];\n            }\n        }\n\
    \        return sum;", "        // Your code here\n        return s.Sum(x => (int)Char.GetNumericValue(x));",
  "        long result = 0;\n        foreach (char c in s)\n        {\n          \
    \  result += (int)c;\n        }\n        return result;", "        long result\
    \ = Convert.ToInt64(s);\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      result += (Char.GetNumericValue(s[i]))*Math.Pow(26, i);\n        }\n  \
    \      return result;", "        string result = \"\";\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            result += (char)('A' + Convert.ToInt32(s.Substring(i\
    \ + 1, 1), 16));\n        }\n        return Convert.ToInt64(result, 16);", " \
    \       long sum = 0;\n        for (int i = 0; i < s.Length; i++)\n        {\n\
    \            sum += (char.IsUpper(s[i]) ? 65 : 48);\n        }\n        return\
    \ sum;", "        long sum = 0;\n        int count = 0;\n        for (int i =\
    \ 0; i < s.Length; i++) {\n            char ch = s[i];\n            if (ch >=\
    \ 'A' && ch <= 'Z')\n                count++;\n            else\n            \
    \    count = 0;\n            if (count == 1)\n                sum += (Convert.ToInt64(ch)\
    \ - 'A' + 1);\n        }\n        return sum;", "        long answer = 0;\n  \
    \      foreach(char c in s) {\n            if(!Char.IsDigit(c)) continue;\n  \
    \          answer += (int)Char.GetNumericValue(c);\n        }\n        return\
    \ answer;", "        // Write code here\n        // return Long.Parse(s);\n  \
    \      long sum = 0;\n        foreach (var item in s.ToCharArray()) {\n      \
    \      if (char.IsUpper(item)) {\n                sum += item;\n            }\n\
    \        }\n        return sum;", "        long result = 0;\n        foreach (char\
    \ c in s) {\n            result += (int)c.ToString().ToUpper();\n        }\n \
    \       return result;", "        // Write your logic here\n        string sUppers\
    \ = s.ToUpper();\n        int sum = 0;\n        for (int i = 0; i < sUppers.Length;\
    \ i++) {\n            if (sUppers[i] > 96 && sUppers[i] < 123)\n             \
    \   sum += sUppers[i] + 96 - 123;\n        }\n        return sum;", "        if\
    \ (s == \"\") return 0L;\n        long sum = 0L;\n        foreach (char c in s)\n\
    \            if (char.IsUpper(c))\n                sum = sum + Convert.ToInt64(Math.Pow(16,\
    \ s.IndexOf(c) + 1));\n        return sum;", "        long result = 0;\n     \
    \   int length = s.Length;\n        char lastChar = 0;\n        foreach (char\
    \ c in s) {\n            int charCode = (int)c;\n            if (charCode > 9)\
    \ {\n                charCode -= 9;\n            }\n            result += charCode;\n\
    \        }\n        return result;", "        int count = 1;\n        int sum\
    \ = 0;\n        foreach (char c in s) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                sum += c - 'A' + count;\n                count++;\n     \
    \       }\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            sum += (s.Substring(i,1).ToUpper()).ToCharArray()[0]\
    \ - 64;\n        }\n        return sum;", "        var sum = 0;\n        foreach\
    \ (var x in s) {\n            sum += Convert.ToInt32(x.ToString());\n        }\n\
    \        return sum;", "        long total = 0;\n        int len = s.Length;\n\
    \        for (int i = 0; i < len; i++) {\n            total += (s.ToCharArray()[i]-'A');\n\
    \        }\n        return total;", "        long sum = 0;\n        if (string.IsNullOrEmpty(s))\n\
    \            throw new ArgumentException();\n        int max = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            if (char.IsDigit(s[i]))\n    \
    \            max = Math.Max(max, (int) s[i]);\n            else\n            \
    \    sum += max - s[i] - 1;\n        }\n        return sum;", "        long result\
    \ = 0;\n        foreach (char c in s)\n        {\n            if ('A' <= c &&\
    \ c <= 'Z')\n            {\n                result += (c - 'A' + 10);\n      \
    \      }\n        }\n        return result;", "        \n        // Calculate\
    \ the sum of the upper characters only\n        var sum = 0;\n        for (int\
    \ i = 0; i < s.Length; i++)\n        {\n            if (Char.IsUpper(s[i]))\n\
    \                sum += (Convert.ToInt32(s[i])).ToString().ToUpperInvariant().GetHashCode();\n\
    \        }\n        return sum;", "        long sum = 0;\n        foreach (char\
    \ c in s) {\n            if (c >= 'A' && c <= 'Z') sum += (int)c - 64;\n     \
    \   }\n        return sum;", "        int sum = 0;\n        foreach (char c in\
    \ s) {\n            sum = sum + Convert.ToInt32(c);\n        }\n        return\
    \ sum;", "        long l = 0;\n        char[] chs = s.ToCharArray();\n       \
    \ foreach (char ch in chs) {\n            if (ch > 'Z') { //checks whether it\
    \ is a letter or number\n                l = l + Convert.ToInt64(ch);\n      \
    \      }\n        }\n        return l;", "        if (s == null) {\n         \
    \   throw new ArgumentNullException(\"s\");\n        }\n        var ret = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            var ch = s[i];\n  \
    \          if ('A' <= ch && ch <= 'Z') {\n                ret += (ch - 'A') +\
    \ 1;\n            }\n            else if ('a' <= ch && ch <= 'z') {\n        \
    \        ret += (ch - 'a') + 10;\n            }\n            else {\n        \
    \        throw new ArgumentException(\"Invalid character\");\n            }\n\
    \        }\n        return ret;", "        long sum = 0;\n        for (int i =\
    \ 0; i < s.Length; i++) {\n            if (Char.IsUpper(s[i]))\n             \
    \   sum += (s[i]-'A'+1);\n        }\n        return sum;", "        List<int>\
    \ list = s.Select(c => (int)Char.GetNumericValue(c)).ToList();\n        return\
    \ list.Sum(c => c); // TODO: implement Sum() method using Linq", "        return\
    \ s.Where(x => x >= 'a' && x <= 'z').Sum(x => (int)x - 32);", "        long sum\
    \ = 0;\n        foreach (char c in s) {\n            sum += (long)c;\n       \
    \ }\n        return sum;", "        long sum = 0;\n        char[] digits = s.ToCharArray();\n\
    \        foreach (char d in digits) {\n            if (char.IsUpper(d)) sum +=\
    \ (long)d;\n        }\n        return sum;", "        bool upper = false;\n  \
    \      int total = 0;\n        foreach (char c in s) {\n            int value\
    \ = (int)c;\n            if (value < 65 || value > 122) {\n                upper\
    \ = false;\n            } else if (!upper) {\n                upper = true;\n\
    \            } else {\n                total += value;\n            }\n      \
    \  }\n        return total;", "        if (string.IsNullOrEmpty(s)) return 0L;\n\
    \        long result = 0L;\n        foreach (char c in s)\n            result\
    \ += c < 'A' ? c - '0' : c - 'A' + 10;\n        return result;", "        if (s\
    \ == null || s.Length == 0)\n        {\n            throw new ArgumentException(\"\
    The string is null or empty\");\n        }\n\n        // Use a StringBuilder to\
    \ do the manipulations.\n        StringBuilder sb = new StringBuilder();\n\n \
    \       foreach (char c in s)\n        {\n            if (Char.IsUpper(c))\n \
    \           {\n                sb.Append(c);\n            }\n        }\n\n   \
    \     // Now convert the StringBuilder into a long.\n        long digitSum = Convert.ToInt64(sb);\n\
    \        return digitSum;", "        long result = 0;\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            result += s.Length - 1 - i;\n        }\n \
    \       return result;", '        return s.Aggregate((c1, c2) => c2 + c1);', " \
    \       long sum = s.Where(c => c >= 'A' && c <= 'Z').Sum(c => (long) c - 'A');\n\
    \        return sum;", "        // TODO: Fill in code here\n        int sum =\
    \ 0;\n        foreach(char c in s) {\n            int i = Convert.ToInt32(c);\n\
    \            if (i > 0)\n                sum += i;\n        }\n        return\
    \ sum;", "        if (s == null || s.Length < 2) return 0L;\n        long sum\
    \ = 0L;\n        foreach (char c in s) {\n            if (char.IsUpper(c)) sum\
    \ += (long)c;\n        }\n        return sum;", "        long sum = 0;\n     \
    \   for (int i = 0; i < s.Length; i++) {\n            if (s[i].ToString().ToUpper().Equals(\"\
    A\")) {\n                sum += i + 1;\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (Char.IsLetter(s[i]))\n                sum += Convert.ToInt32(Char.GetNumericValue(s[i]));\n\
    \        }\n        return sum;", "        string digits = s.ToLower();\n    \
    \    char[] charArray = digits.ToCharArray();\n        long sum = 0L;\n      \
    \  for (int i = 0; i < charArray.Length; i++) {\n            sum = (sum * 10)\
    \ + charArray[i] - '0';\n        }\n        return sum;", "        int len = s.Length;\n\
    \        long sum = 0;\n        if (len > 0) {\n            sum = sum + Convert.ToInt32(s[0]);\n\
    \            Console.Write(sum);\n            for (int i = 1; i < len; i++) {\n\
    \                sum = sum + Convert.ToInt32(s[i]);\n                if (sum >\
    \ 9) {\n                    sum = sum - 10;\n                }\n             \
    \   Console.Write(sum);\n            }\n        }\n        return sum;", "   \
    \     long digitsum = 0;\n        char[] chars = s.ToCharArray();\n        foreach\
    \ (char c in chars) {\n            digitsum += (long)c;\n        }\n        return\
    \ digitsum;", "        if (String.IsNullOrEmpty(s))\n            return 0L;\n\
    \        long res = 0;\n        foreach (char c in s)\n            if (Char.IsUpper(c))\n\
    \                res = (res << 1) | char.ToUpper(c) - 64L;\n        return res;",
  "        long sum = 0;\n        foreach (char c in s) {\n            if (Char.IsUpper(c))\n\
    \                sum += (c - 65);\n            else\n                sum += (c\
    \ - 97);\n        }\n        return sum;", "        var sum = 0;\n        foreach\
    \ (char c in s) {\n            sum += (int)c;\n        }\n        return sum;",
  "        long sum = 0;\n        foreach (char c in s)\n        {\n            if\
    \ (char.IsUpper(c))\n                sum += (long)c;\n        }\n        return\
    \ sum;", "        int sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            if (char.IsUpper(s[i]) == false) {\n                sum += (s[i])\
    \ - 32;\n            }\n        }\n        return sum;", "        long result\
    \ = 0.0;\n        long sum = 0.0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            if (Char.IsUpper(s[i]))\n                sum += (Convert.ToInt32(s[i]));\n\
    \            else\n                sum += (Convert.ToInt32(s[i]) - 32);\n    \
    \    }\n        return (sum);", '        return s.Length > 0 ? Enumerable.Range(0,
    s.Length).Where(i => Char.IsUpper(s[i], 10)).Sum() : 0L;', "        // TODO: Write\
    \ your solution here\n        string res = string.Empty;\n        foreach (char\
    \ c in s)\n        {\n            if (char.IsDigit(c))\n            {\n      \
    \          char.IsDigit(c) ? res += c : res += (c - '0');\n            }\n   \
    \     }\n        return long.Parse(res);", '        return s.ToUpper().Sum(x =>
    x);', "        long result = 0;\n        int i = 0;\n        while (i < s.Length)\
    \ {\n            string c = s.Substring(i, 1);\n            if (c.Equals(\"A\"\
    , StringComparison.Ordinal) || c.Equals(\"a\", StringComparison.Ordinal) || c.Equals(\"\
    B\", StringComparison.Ordinal) || c.Equals(\"b\", StringComparison.Ordinal) ||\
    \ c.Equals(\"C\", StringComparison.Ordinal) || c.Equals(\"c\", StringComparison.Ordinal)\
    \ || c.Equals(\"D\", StringComparison.Ordinal) || c.Equals(\"d\", StringComparison.Ordinal)\
    \ || c.Equals(\"E\", StringComparison.Ordinal) || c.Equals(\"e\", StringComparison.Ordinal)\
    \ || c.Equals(\"F\", StringComparison.Ordinal) || c.Equals(\"f\", StringComparison.Ordinal)\
    \ || c.Equals(\"G\", StringComparison.Ordinal) || c.Equals(\"g\", StringComparison.Ordinal)\
    \ || c.Equals(\"H\", StringComparison.Ordinal) || c.Equals(\"h\", StringComparison.Ordinal)\
    \ || c.Equals(\"I\", StringComparison.Ordinal) || c.Equals(\"i\", StringComparison.Ordinal)\
    \ || c.Equals(\"J\", StringComparison.Ordinal) || c.Equals(\"j\", StringComparison.Ordinal)\
    \ || c.Equals(\"K\", StringComparison.Ordinal) || c.Equals(\"k\", StringComparison.Ordinal)\
    \ || c.Equals(\"L\", StringComparison.Ordinal) || c.Equals(\"l\", StringComparison.Ordinal)\
    \ || c.Equals(\"M\", StringComparison.Ordinal) || c.Equals(\"m\", StringComparison.Ordinal)\
    \ || c.Equals(\"N\", StringComparison.Ordinal) || c.Equals(\"n\", StringComparison.Ordinal)\
    \ || c.Equals(\"O\", StringComparison.Ordinal) || c.Equals(\"o\", StringComparison.Ordinal)\
    \ || c.Equals(\"P\", StringComparison.Ordinal) || c.Equals(\"p\", StringComparison.Ordinal)\
    \ || c.Equals(\"Q\", StringComparison.Ordinal) || c.Equals(\"q\", StringComparison.Ordinal)\
    \ || c.Equals(\"R\", StringComparison.Ordinal) || c.Equals(\"r\", StringComparison.Ordinal)\
    \ || c.Equals(\"S\", StringComparison.Ordinal) || c.Equals(\"s\", StringComparison.Ordinal)\
    \ || c.Equals(\"T\", StringComparison.Ordinal) || c.Equals(\"t\", StringComparison.Ordinal)\
    \ || c.Equals(\"U\", StringComparison.Ordinal) || c.Equals(\"u\", StringComparison.Ordinal)\
    \ || c.Equals(\"V\", StringComparison.Ordinal) || c.Equals(\"v\", StringComparison.Ordinal)\
    \ || c.Equals(\"W\", StringComparison.Ordinal) || c.Equals(\"w\", StringComparison.Ordinal)\
    \ || c.Equals(\"X\", StringComparison.Ordinal) || c.Equals(\"x\", StringComparison.Ordinal)\
    \ || c.Equals(\"Y\", StringComparison.Ordinal) || c.Equals(\"", "        long\
    \ sum = 0;\n        foreach (char c in s) {\n            int v = (int)c;\n   \
    \         if (v > 64)\n            {\n                throw new Exception(\"ASCII\
    \ code too high\");\n            }\n            sum += v % 10;\n        }\n  \
    \      return sum;", "        string letters = \"\";\n        int sum = 0;\n \
    \       for (int i = 0; i < s.Length; i++)\n        {\n            if (Char.IsDigit(s[i]))\n\
    \            {\n                sum += Char.GetNumericValue(s[i]);\n         \
    \   }\n            else\n            {\n                letters += s[i];\n   \
    \         }\n        }\n        return sum;", "        // Write code here\n  \
    \      if (s == null)\n            return 0L;\n\n        var lSum = s.ToLower().Sum(c\
    \ => char.IsUpper(c)) + (long)'A';\n        return lSum;", "        if (s == null\
    \ || s.Length < 1) {\n            throw new ArgumentNullException(\"s\");\n  \
    \      }\n        long sum = 0;\n        for (int i = 0; i < s.Length; ++i) {\n\
    \            if (Char.IsUpper(s[i])) {\n                sum += (s[i]-32); // Ascii\
    \ code for upper case\n            }\n        }\n        return sum;", "     \
    \   string str = s;\n        long sum = 0;\n        int length = str.Length;\n\
    \        for (int i = 0; i < length; i++)\n        {\n            int ascii =\
    \ Convert.ToInt32(str[i]);\n            if (ascii >= 65 && ascii <= 90)\n    \
    \        {\n                sum += ascii;\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            sum = sum + Convert.ToInt64(s[i]);\n        }\n        return sum;",
  "        char[] chars = s.ToCharArray();\n        long sum = 0;\n        for (int\
    \ i = 0; i < chars.Length; i++) {\n            sum += chars[i] - 'A' + 1;\n  \
    \      }\n        return sum;", "        int sum = 0;\n        foreach (char c\
    \ in s)\n        {\n            sum += Convert.ToInt32(new string(s.SkipWhile(x\
    \ => x != c).TakeWhile(x => x != c).ToArray()));\n        }\n        return sum;",
  "        if (string.IsNullOrEmpty(s)) {\n            return 0L;\n        }\n   \
    \     var sum = 0L;\n        int count = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (Char.IsUpper(s[i]) && ((i + 1) % 2 != 0)) {\n      \
    \          sum += (Char.GetNumericValue(s[i]));\n                count++;\n  \
    \          }\n        }\n        return sum;", "        if (s.Length == 0) return\
    \ 0;\n        var sum = 0;\n        foreach (char c in s) {\n            if (char.IsUpper(c))\
    \ sum += (int)c - 64;\n        }\n        return sum;", "        long sum = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            sum += (s.Length -\
    \ i - 1) * Convert.ToInt32(s[i]);\n        }\n        return sum;", "        long\
    \ sum = 0;\n        string digits = string.Empty;\n        int index = 0;\n  \
    \      foreach(char c in s) {\n            if((int)c > 64)\n            {\n  \
    \              digits = digits + c.ToString();\n                sum += (long)Math.Pow(10,\
    \ index) * (int)Math.Pow(2, index); \n                index++;\n            }\n\
    \        }\n        return sum;", "        // Your code here\n        long sum\
    \ = 0;\n        foreach (char c in s)\n        {\n            if (Char.IsUpper(c))\n\
    \            {\n                sum = sum + c.ToString().ToUpper().ToCharArray()[0];\n\
    \            }\n        }\n        return sum;", "        long ans = 0;\n    \
    \    foreach (char c in s.ToCharArray()) {\n            ans += (c > 'A') ? c -\
    \ 'A' + 10 : c - '0';\n        }\n        return ans;", "        long result =\
    \ 0;\n        foreach (var c in s) {\n            if ('A' <= c && c <= 'Z') {\n\
    \                result += (c - 'A' + 10);\n            } else if ('a' <= c &&\
    \ c <= 'z') {\n                result += (c - 'a' + 10);\n            } else if\
    \ ('0' <= c && c <= '9') {\n                result += Convert.ToInt64(c.ToString());\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        for (int i = 0; i < s.Length; i++)\n        {\n            if (char.IsUpper(s[i]))\n\
    \            {\n                result += (Convert.ToInt64(s[i]) - 64);\n    \
    \        }\n        }\n        return result;", "        var sum = 0;\n      \
    \  foreach (char c in s) {\n            sum += (long)Math.Pow((double)2, (s.Length\
    \ - c - 1));\n        }\n        return sum;", "        if (string.IsNullOrEmpty(s))\
    \ return 0L;\n        long sum = 0L;\n        foreach (var c in s) sum += Convert.ToInt64(c,\
    \ 16);\n        return sum;", "        long total = 0;\n        foreach (char\
    \ c in s) {\n            total += Convert.ToInt32(c) - 32;\n        }\n      \
    \  return total;", "        if (s == \"\") return 0;\n        long sum = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsUpper(s[i])\
    \ && i < s.Length - 1) sum += (s[i] + s[i + 1]);\n            else sum += s[i];\n\
    \        }\n        return sum;", '        return s.Aggregate((accumulator, next)
    => accumulator + Convert.ToInt64(next, 16) - 64);', "        long result = long.MaxValue;\n\
    \        foreach (char c in s) {\n            int value = c - 'A';\n         \
    \   if (value > 0) result += value;\n        }\n        return result;", "   \
    \     long sum = 0;\n        foreach (char c in s.ToLower()) {\n            if\
    \ (char.IsUpper(c)) sum += (long)c;\n        }\n        return sum;", "      \
    \  var sum = 0;\n        foreach (char c in s) {\n            int asciiCode =\
    \ (int) c;\n            sum += asciiCode;\n        }\n        return sum;", " \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            int j = 0;\n            while (j < s.Length && s[i].ToLower()\
    \ != s[j].ToLower() && s[j] != '0') {\n                j++;\n            }\n \
    \           if (j == s.Length) {\n                sb.Append(s[j]);\n         \
    \   } else {\n                sb.Append(s[j]);\n            }\n        }\n   \
    \     string t = sb.ToString();\n        long res = 0;\n        foreach (char\
    \ c in t.ToCharArray()) {\n            res += (int)c;\n        }\n        return\
    \ res;", "        long sum = 0;\n        foreach (char c in s) {\n           \
    \ if (Char.IsLetterOrDigit(c)) {\n                sum += Char.ConvertToUtf32(Char.ConvertFromUtf32(c));\n\
    \            }\n        }\n        return sum;", "        if (s == null) {\n \
    \           return 0;\n        }\n        long result = 0;\n        foreach (var\
    \ c in s) {\n            if (c >= '0' && c <= '9') {\n                result +=\
    \ c - '0';\n            }\n        }\n        return result;", "        long sum\
    \ = 0;\n        foreach (char c in s) {\n            sum += (int)Char.GetNumericValue(c)\
    \ - 32;\n        }\n        return sum;", "        return s.Where(c => c >= 'A'\
    \ && c <= 'Z').ToArray().Sum(i => (int) i);", "        string uppers = s.ToUpper();\n\
    \        long sum = 0;\n        foreach (char c in uppers) {\n            if ('A'\
    \ <= c && c <= 'Z') {\n                sum += (c - 'A') - 1;\n            }\n\
    \        }\n        return sum;", "        long sum = s.Count(c => c >= 'A' &&\
    \ c <= 'Z').ToLong() * (26L + 26L * 26L + 26L * 26L * 26L);\n        Debug.Assert(sum\
    \ == s.Sum(c => c >= 'A' && c <= 'Z'));\n        return sum;", "        long result\
    \ = 0;\n        foreach(char c in s)\n            result += Convert.ToInt64(c)\
    \ - Convert.ToInt64('A');\n        return result;", "        long retval = 0,\
    \ num = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\n\
    \                num += Convert.ToInt64(c);\n        }\n        retval = num;\n\
    \        return retval;", "        var result = new Dictionary<char, long>();\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (char.IsUpper(s[i]))\n\
    \                result[s[i]] = Convert.ToInt64(s[i]) - 64;\n        }\n     \
    \   return result.Values.Sum();", "        long sum = 0;\n        foreach (char\
    \ c in s)\n            if (char.IsUpper(c))\n                sum = sum + c;\n\
    \        return sum;", "        // base case\n        if (string.IsNullOrEmpty(s))\n\
    \            return 0;\n        // split s into character list\n        List<char>\
    \ charList = new List<char>();\n        foreach (char c in s) {\n            if\
    \ (char.IsUpper(c))\n                charList.Add(c);\n        }\n        // convert\
    \ char list to long list using Linq\n        long result = charList.ToList().Sum(x\
    \ => (long)x);\n        return result;", "        long sum = s.Aggregate(0, (current,\
    \ c) => current + (c > 48 && c < 65 || c > 97 && c < 105 ? c : 0));\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            sum += Convert.ToInt32(s.Substring(i, 1));\n        }\n        return\
    \ sum;", "        long sum = 0;\n        foreach (char c in s) {\n           \
    \ int charCode = (int)c;\n            if (charCode >= 65 && charCode <= 90) {\n\
    \                sum += charCode - 65;\n            } else if (charCode >= 97\
    \ && charCode <= 122) {\n                sum += charCode - 97;\n            }\n\
    \        }\n        return sum;", "        var sum = s.Where(c => c >= 'A' &&\
    \ c <= 'Z').Sum(c => (long)c);\n        return sum;", "        long result = 0;\n\
    \        foreach (char c in s) {\n            if (char.IsUpper(c)) {\n       \
    \         result += (c - 'A' + 1);\n            }\n        }\n        return result;",
  "        // Your code here\n        return 0;", "        long result = 0;\n    \
    \    char[] chars = s.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            bool hasUpper = false;\n            for (int j = i; j <\
    \ chars.Length; j++) {\n                if (chars[i] > chars[j]) {\n         \
    \           hasUpper = true;\n                    break;\n                }\n\
    \            }\n            if (hasUpper) {\n                result += Math.Abs(chars[i]);\n\
    \            }\n        }\n        return result;", '        return s.Select(x
    => Convert.ToInt32(x.ToString())).Sum(x => x%10);', "        // Your code goes\
    \ here\n        return s.Where(c => char.IsUpper(c)).Sum(c => c.ToCharArray()[0]);",
  "        long num = 0;\n        foreach (char c in s.ToCharArray()) {\n        \
    \    if (Char.IsUpper(c))\n                num += (int)c;\n        }\n       \
    \ return num;", "        long sum = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            int digit = Convert.ToInt32(s.Substring(i, 1));\n      \
    \      sum += digit;\n        }\n        return sum;", "        int sum = 0;\n\
    \        foreach (char c in s) {\n            if (char.IsUpper(c)) {\n       \
    \         sum = sum * 10 + (c - 'A' + 1);\n            }\n        }\n        return\
    \ sum;", "        var sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            var code = s[i];\n            if (char.IsUpper(code)) {\n       \
    \         sum += code;\n            }\n        }\n        return sum;", "    \
    \    // Solution\n        long sum = 0;\n        foreach (char c in s) {\n   \
    \         int uc = Convert.ToInt32(c);\n            sum += (uc > 64 && uc < 91)\
    \ ? uc : 0;\n        }\n        return sum;", "        long sum = 0;\n       \
    \ char[] chars = s.ToCharArray();\n        foreach (char c in chars) {\n     \
    \       if (char.IsUpper(c)) {\n                sum += (int)c;\n            }\n\
    \        }\n        return sum;", "        var total = 0;\n        foreach (var\
    \ c in s.ToCharArray()) {\n            if (char.IsUpper(c))\n                total\
    \ += c;\n        }\n        return total;", "        long sum = 0;\n        foreach(var\
    \ c in s) {\n            if(c >= 'A' && c <= 'Z') {\n                sum += (int)c;\n\
    \            }\n        }\n        return sum;", "        string result = \"\"\
    ;\n        foreach (char c in s) {\n            if (c >= 'A' && c <= 'Z')\n  \
    \              result += c;\n        }\n        char[] array = result.ToCharArray();\n\
    \        long resultingNum = 0;\n        foreach (char c in array) {\n       \
    \     resultingNum += (c / ('Z' - 'A' + 1));\n        }\n        return resultingNum;",
  "        long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n         \
    \   sum += (long)Char.GetNumericValue(s.Substring(i, 1));\n        }\n       \
    \ return sum;", "        long sum = 0L;\n        int len = s.Length;\n       \
    \ for (int i = 0; i < len; i++) {\n            if (IsUpper(s[i], i + 1))\n   \
    \             sum += (long)s[i];\n        }\n        return sum;", "        ulong\
    \ sum = 0;\n        foreach (var character in s)\n            if (Char.IsUpper(character))\n\
    \                sum += (ulong)character;\n        return sum;", "        var\
    \ sum = s.Select(c => c - 'A').Sum();\n        return (long)Math.Abs(sum);", " \
    \       long sum = 0;\n        foreach (char c in s) {\n            if ((int)c\
    \ >= 65 && (int)c <= 90)\n                sum += (int)c - 48;\n        }\n   \
    \     return sum;", "        long sum = 0;\n        foreach (char c in s) {\n\
    \            if (char.IsUpper(c)) sum += (int)c;\n        }\n        return sum;",
  "        if (s == null)\n            throw new ArgumentNullException(\"s\");\n \
    \       long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n        \
    \    int c = Convert.ToInt32(s[i]);\n            if (c >= 'A' && c <= 'Z')\n \
    \               sum += (c - 'A' + 10) * (int)Math.Pow(10, i + 1);\n        }\n\
    \        return sum;", "        if (s == null) {\n            throw new ArgumentNullException(\"\
    s\");\n        }\n        ulong sum = 0;\n        foreach (char c in s) {\n  \
    \          sum += Convert.ToUInt64(c);\n        }\n        return sum;", "   \
    \     long sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n          \
    \  sum = sum + Char.ToUpper(s[i]) - 64;\n        }\n        return sum;", "  \
    \      long sum = 0;\n        // your code\n        foreach (var c in s.ToUpper())\
    \ {\n            sum += (c >= 'A') ? (c - 'A') : 0;\n        }\n        return\
    \ sum;", "        if (s == null) return 0L;\n        long sum = 0L;\n        for\
    \ (int i = 0; i < s.Length; i++)\n        {\n            if (char.IsUpper(s[i],\
    \ 0)) {\n                sum += (long)s[i];\n            }\n        }\n      \
    \  return sum;", "        long l = 0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            if (Convert.ToInt32(s[i]) >= 48 && Convert.ToInt32(s[i]) <= 57)\
    \ {\n                l = l + Convert.ToInt32(s[i]);\n            }\n        }\n\
    \        return l;", "        if (s.Length == 0) {\n            return 0;\n  \
    \      }\n        long sum = 0;\n        foreach (char c in s) {\n           \
    \ if (char.IsUpper(c)) {\n                sum += (int)c;\n            }\n    \
    \    }\n        return sum;", "        long digitSum = 0;\n        foreach (char\
    \ c in s) {\n            int x = c;\n            if (x < 48 || x > 57) {\n   \
    \             x = x + 48;\n            }\n            digitSum += x;\n       \
    \ }\n        return digitSum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            char c = s[i];\n            if (c == 'A')\n\
    \                sum += 16;\n            else if (c == 'a') sum += 9;\n      \
    \      else if (c == 'B')\n                sum += 8;\n            else if (c ==\
    \ 'b') sum += 7;\n            else if (c == 'C')\n                sum += 6;\n\
    \            else if (c == 'c') sum += 5;\n            else if (c == 'D')\n  \
    \              sum += 4;\n            else if (c == 'd') sum += 3;\n         \
    \   else if (c == 'E')\n                sum += 2;\n            else if (c == 'e')\
    \ sum++;\n            else\n                sum += 0;\n        }\n        return\
    \ sum;", "        HashSet<string> set = new HashSet<string>();\n        foreach\
    \ (char c in s) {\n            if (char.IsUpper(c)) set.Add(c.ToString());\n \
    \       }\n        return set.Sum(x => x.ToCharArray().Sum(y => (long)(y - 64)));",
  "        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      long sum = 0;\n            for (int j = 0; j < s.Length; j++) {\n     \
    \           if (s[i] != s[j]) sum += s[j] - '0';\n            }\n            result\
    \ += sum;\n        }\n        return result;", "        long sum = 0;\n      \
    \  foreach (char c in s) {\n            if (c >= 'A' && c <= 'Z') {\n        \
    \        sum += c - 'A' + 1;\n            }\n        }\n        return sum;",
  '        return s.Where(c => (int)c <= 122).Sum(c => (int)c);', "        // Initialize\
    \ result to 0\n        long sum = 0;\n        // Iterate through each character\
    \ in the string\n        for (int i = 0; i < s.Length; i++) {\n            //\
    \ Use an ASCII table lookup table to check for an uppercase letter\n         \
    \   if (Convert.ToChar(s[i]) >= 'A' && Convert.ToChar(s[i]) <= 'Z')\n        \
    \        // Increment sum by that number\n                sum += Convert.ToInt64(s[i]);\n\
    \        }\n        return sum;", "        // Your code goes here\n        if\
    \ (s.Length == 0) {\n            return 0L;\n        }\n        long sum = 0;\n\
    \        foreach (char c in s) {\n            if (c >= 'A' && c <= 'Z') {\n  \
    \              sum += c - 'A' + 1L;\n            } else if (c >= 'a' && c <= 'z')\
    \ {\n                sum += c - 'a' + 1L;\n            } else {\n            \
    \    return 0L;\n            }\n        }\n        return sum;", "        int\
    \ sum = 0;\n        int max;\n        foreach (char ch in s) {\n            if\
    \ (char.IsLetter(ch)) {\n                max = Convert.ToInt32(Convert.ToString(ch));\n\
    \            }\n            sum += max;\n        }\n        return sum;", "  \
    \      Debug.Assert(s != null);\n        long sum = 0;\n        foreach (var character\
    \ in s) {\n            if (char.IsDigit(character)) {\n                sum +=\
    \ Convert.ToInt64(character);\n            }\n        }\n        return sum;",
  "        if (String.IsNullOrEmpty(s)) return 0;\n        var res = 0;\n        foreach\
    \ (var ch in s) {\n            int dig = (int)ch;\n            if (dig <= 9) res\
    \ += dig;\n            else res -= 10 + dig;\n        }\n        return res;",
  "        if (s == null) {\n            return 0L;\n        }\n        char[] arr\
    \ = s.ToCharArray();\n        var sum = new int[arr.Length];\n        var res\
    \ = new StringBuilder();\n        foreach (char c in arr) {\n            if (char.IsUpper(c))\
    \ {\n                sum[c - 65] += 1;\n            }\n        }\n        long\
    \ sumTotal = 0;\n        for (var i = 0; i < 65; i++) {\n            sumTotal\
    \ += sum[i];\n        }\n        return sumTotal;", "        // Add your code\
    \ here\n        long sum=0;\n        for (int i=0;i<s.Length;i++)\n        {\n\
    \            if(Char.IsUpper(s[i]))\n                sum+=Char.GetNumericValue(s[i])-64;\n\
    \        }\n        return sum;", "        int sum = 0;\n        foreach (char\
    \ c in s) {\n            if (c >= '0' && c <= '9') {\n                sum += c\
    \ - 48;\n            }\n        }\n        return sum;", "        long result\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            if (Char.IsUpper(s[i])\
    \ && i <= s.Length - 1) {\n                result += char.ToUpper(s[i]);\n   \
    \         }\n        }\n        return result;", "        var sum = s.ToCharArray().Sum(c\
    \ => c - 'A' + 1);\n        return sum;", "        long sum = 0;\n        foreach\
    \ (char c in s) {\n            int val = c;\n            // We ignore anything\
    \ but upper case characters\n            if (val > 96 && val < 123)\n        \
    \        sum += val;\n        }\n        return sum;", "        long sum = 0;\n\
    \        foreach (char c in s) {\n            if (char.IsUpper(c))\n         \
    \       sum += Convert.ToInt32(c);\n        }\n        return sum;", "       \
    \ int sum = 0;\n        foreach (char c in s)\n            if (char.IsDigit(c))\
    \ sum += c - '0';\n        return sum;", "        ulong sum = s.SelectMany(x =>\
    \ char.IsUpper(x) ? (ulong) x : 0).Sum();\n        Console.WriteLine(sum);\n \
    \       return sum;", "        long sum = 0;\n        foreach(char c in s) {\n\
    \            sum = sum + Convert.ToInt32(c);\n        }\n        return sum;",
  "        char[] chars = s.ToCharArray();\n        long sum = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            sum += chars[i] <= 'z' ? chars[i] -\
    \ 'a' + 'A' : chars[i] - 'A' + 'a';\n        }\n        return sum;", "      \
    \  var sum = 0;\n        for (int i = 0; i < s.Length; i++) {\n            sum\
    \ += (s.Length > i) ? (int)Char.GetNumericValue((s[i]))\n                : (int)Char.GetNumericValue(s[i]);\n\
    \        }\n        return sum;", "        long ans = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsUpper(c))\n                ans += (long)c;\n\
    \        }\n        return ans;", "        // TODO: Complete method here. Return\
    \ the correct value.\n        long sum = 0;\n        foreach (char c in s) {\n\
    \            if (Char.IsUpper(c)) {\n                sum += (long)c - 48;\n  \
    \          }\n        }\n        return sum;", "        char[] c = s.ToCharArray();\n\
    \        long s = 0;\n        for (int i = 0; i < c.Length; i++) {\n         \
    \   if (c[i] >= 'A' && c[i] <= 'Z') {\n                s += (long) c[i];\n   \
    \         }\n        }\n        return s; // return sum", "        long result\
    \ = 0;\n        foreach (char c in s) {\n            result += Convert.ToInt64(c);\n\
    \        }\n        return result;", "        long result = 1;\n        foreach\
    \ (char c in s) {\n            result += Convert.ToInt32(c);\n        }\n    \
    \    return result;", "        if (string.IsNullOrEmpty(s)) {\n            return\
    \ 0L;\n        }\n        long res = 0;\n        for (int i = 0; i < s.Length;\
    \ ++i) {\n            if (s.Length > i + 1)\n                res = res * 10 +\
    \ (Convert.ToInt64(s[i]) - 64);\n        }\n        return res;", "        long\
    \ total = 0;\n        foreach (char c in s) {\n            if ((int)c >= 65 &&\
    \ (int)c <= 90) {\n                total += (int)c;\n            }\n        }\n\
    \        return total;", "        long sum = 0;\n        foreach (var c in s.ToCharArray())\
    \ {\n            sum += ((int)c) + 64;\n        }\n        return sum;", "   \
    \     // code here\n        foreach (char c in s) {\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                s += (c - 'A');\n            }\n        }\n\
    \        return s;", "        if (string.IsNullOrEmpty(s)) return 0L;\n      \
    \  \n        long result = 1L;\n        int maxsum = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsUpper(c)) {\n                if (maxsum <\
    \ long.Parse(c.ToString())) {\n                    maxsum = long.Parse(c.ToString());\n\
    \                }\n            }\n        }\n\n        return maxsum;"]
stop_tokens:
- "\n    }\n"
