name: HumanEval_121_solution
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a non-empty list of integers, return the sum of all of\
  \ the odd elements that are in even positions.\n    // Examples\n    // >>> Solution((new\
  \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n    // (12L)\n\
  \    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L,\
  \ (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new long[]{(long)30L,\
  \ (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public static long Solution(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solution((new\
  \ List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L}))) == (12L));\n\
  \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L,\
  \ (long)3L, (long)3L}))) == (9L));\n    Debug.Assert(Solution((new List<long>(new\
  \ long[]{(long)30L, (long)13L, (long)24L, (long)321L}))) == (0L));\n    Debug.Assert(Solution((new\
  \ List<long>(new long[]{(long)5L, (long)9L}))) == (5L));\n    Debug.Assert(Solution((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)8L}))) == (0L));\n    Debug.Assert(Solution((new\
  \ List<long>(new long[]{(long)30L, (long)13L, (long)23L, (long)32L}))) == (23L));\n\
  \    Debug.Assert(Solution((new List<long>(new long[]{(long)3L, (long)13L, (long)2L,\
  \ (long)9L}))) == (3L));\n    }\n\n}\n"
completions: ["        var list = new List<long>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            list.Add(lst[i]);\n        }\n\n        if (list.Count >\
    \ 0)\n        {\n            long sum = 0;\n            int i = 0;\n         \
    \   int evenIndex = 0;\n            while (i < list.Count)\n            {\n  \
    \              if (list[i] % 2 == 0) {\n                    sum += list[evenIndex];\n\
    \                    evenIndex++;\n                }\n                i++;\n \
    \           }\n            return sum;\n        }\n        else\n        {\n \
    \           return 0L;\n        }", "        long result = 0;\n        long total\
    \ = 0;\n        long count = 0;\n        foreach (var item in lst) {\n       \
    \     if (item % 2 == 0)\n                total += item;\n            else\n \
    \               count += 1;\n            if (count == lst.Count / 2)\n       \
    \         result += item;\n        }\n        return result;", "        var evenIndices\
    \ = lst.Where(i => i % 2 == 0).ToList();\n        var oddIndices = lst.Where(i\
    \ => i % 2 == 1).ToList();\n        var evenSum = evenIndices.Sum();\n       \
    \ var oddSum = oddIndices.Sum();\n        return evenSum + oddSum;", "       \
    \ long sum = 0;\n        long evenSum = 0;\n        int evenPosition = 0;\n  \
    \      int oddPosition = 0;\n        foreach (var el in lst) {\n            if\
    \ (el % 2 == 0) {\n                if (oddPosition == 0) {\n                 \
    \   sum += el;\n                    evenSum += el;\n                }\n      \
    \          else {\n                    evenPosition++;\n                    sum\
    \ += el;\n                }\n            }\n            else {\n             \
    \   if (evenPosition == 0) {\n                    sum += el;\n               \
    \     evenSum += el;\n                }\n                else {\n            \
    \        oddPosition++;\n                    sum += el;\n                }\n \
    \           }\n        }\n        return sum - evenSum;", "        long result\
    \ = 0;\n\n        for(int i = 0; i < lst.Count; i++)\n        {\n            if(i%2\
    \ == 0)\n            {\n                if(lst[i] % 2 == 0)\n                {\n\
    \                    result += lst[i];\n                }\n            }\n   \
    \         else\n            {\n                if(lst[i] % 2 != 0)\n         \
    \       {\n                    result += lst[i];\n                }\n        \
    \    }\n        }\n        return result;", "        long evenSum = 0;\n     \
    \   long oddSum = 0;\n        bool isOdd;\n        long evenCount = 0;\n     \
    \   long oddCount = 0;\n\n        for(int i = 0; i< lst.Count; i+=2)\n       \
    \ {\n            isOdd = lst[i] % 2 != 0;\n            evenCount = isOdd ? (lst[i]\
    \ + 1) : (lst[i] - 1);\n            oddCount = !isOdd ? evenCount : evenCount\
    \ - 1;\n\n            evenSum += evenCount;\n            oddSum += oddCount;\n\
    \        }\n\n        return oddSum;", "        long sum = 0;\n        long evenSum\
    \ = 0;\n        foreach(long n in lst) {\n            if(n % 2 == 0) {\n     \
    \           sum += n;\n            } else {\n                evenSum += n;\n \
    \           }\n        }\n        return evenSum - sum;", "        // TODO: implement\
    \ your solution here\n        var res = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (lst[i] % 2 == 0)\n                res += lst[i];\n \
    \       }\n        return res;", "        var res = new List<long>();\n      \
    \  lst.Sort();\n        var evenIndex = 0;\n        var sum = 0;\n        for\
    \ (int i = 0; i < lst.Count - 1 && evenIndex < lst.Count - 1; i++) {\n       \
    \     if (evenIndex % 2 != 0) {\n                evenIndex++;\n              \
    \  continue;\n            }\n            sum += lst[i];\n            evenIndex++;\n\
    \        }\n        return sum;", "        var list = lst.ToList();\n        var\
    \ sum = 0;\n        var evenPos = 0;\n        for (var i = 0; i < list.Count;\
    \ i++) {\n            if (list[i] % 2 == 0) {\n                sum += list[i];\n\
    \                evenPos++;\n                if (evenPos == 2)\n             \
    \       evenPos = 0;\n            }\n        }\n        return sum;", "      \
    \  if (lst.Count == 0) return 0;\n        long sum = 0;\n        int oddSum =\
    \ 0;\n        bool oddPresent = false;\n        bool evenPresent = false;\n  \
    \      int oddPos = 0;\n        int evenPos = 0;\n        foreach (var item in\
    \ lst) {\n            if (item % 2 != 0) {\n                if (oddPresent &&\
    \ oddPos >= 0) {\n                    oddPresent = false;\n                  \
    \  oddPos++;\n                }\n                sum += item;\n              \
    \  oddPresent = true;\n            }\n            else {\n                if (evenPresent\
    \ && evenPos >= 0) {\n                    evenPresent = false;\n             \
    \       evenPos++;\n                }\n                sum += item;\n        \
    \        evenPresent = true;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        long firstElement = lst[0];\n        foreach (long\
    \ element in lst) {\n            if (element % 2 != 0) {\n                sum\
    \ += firstElement;\n            }\n            firstElement = element;\n     \
    \   }\n        return sum;", "        if (lst.Count <= 0) return 0L;\n\n     \
    \   var even = lst.Where((v, i) => i % 2 == 0).ToList();\n\n        return even.Aggregate((a,\
    \ b) => a + b);", "        long result = 0, temp = 0;\n        int size = lst.Count;\n\
    \        for (int i = 0; i < size; i++) {\n            if (i % 2 == 0) {\n   \
    \             temp = lst[i];\n                result += temp;\n            }\n\
    \        }\n        return result;", "        long sum = 0;\n        long[] evens\
    \ = lst.Where((x, i) => i % 2 == 0).ToArray();\n        Array.Reverse(evens);\n\
    \        foreach (long even : evens) {\n            sum += even;\n        }\n\
    \        return sum;", "        long oddSum = 0;\n        long evenSum = 0;\n\
    \        int evenPos = 0;\n        foreach (var item in lst) {\n            if\
    \ (item % 2 == 0) {\n                if (evenPos == 0) {\n                   \
    \ evenSum = evenSum + item;\n                } else {\n                    oddSum\
    \ = oddSum + item;\n                }\n                evenPos++;\n          \
    \  } else {\n                if (evenPos > 0) {\n                    oddSum =\
    \ oddSum + item;\n                }\n            }\n        }\n        return\
    \ oddSum;", "        long oddSum = 0;\n\n        foreach (var item in lst) {\n\
    \            if (item % 2 != 0)\n                continue;\n            oddSum\
    \ += item;\n        }\n        return oddSum;", "        long sum = 0;\n     \
    \   foreach (long num in lst) {\n            if ((num % 2) == 0) sum += num;\n\
    \        }\n        return sum;", "        if (lst.Count == 0) return 0;\n   \
    \     long sum = 0;\n        for (int i = 0; i < lst.Count; ++i) {\n         \
    \   if (i % 2 == 0)\n                sum += lst[i];\n        }\n        return\
    \ sum;", "        long sum = 0;\n        long evenCount = 0;\n        long oddCount\
    \ = lst.Count;\n        foreach (long item in lst) {\n            bool isEven\
    \ = item % 2 == 0;\n            if (isEven == true) evenCount++;\n           \
    \ else\n            {\n                oddCount--;\n                if (oddCount\
    \ < 0) break;\n                sum += item;\n            }\n        }\n      \
    \  return sum;", "        if (lst.Count == 0) return 0L;\n        var hash = lst.ToDictionary(x\
    \ => x, x => x);\n        var sum = 0L;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            long curr = lst[i];\n            long prev = hash[curr];\n\
    \            hash[curr] = null;\n            if (prev != null) sum -= prev;\n\
    \            sum += curr;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        foreach (var item in lst) {\n            if (item % 2 == 0)\n\
    \                sum += item;\n            else\n                sum -= item;\n\
    \        }\n        return sum;", "        Debug.Assert(lst.Count > 0);\n    \
    \    long sum = 0L;\n        int evenIndex = 0;\n        for (int index = 0; index\
    \ < lst.Count; index++)\n        {\n            if (index % 2 == 0)\n        \
    \    {\n                sum = sum + lst[index];\n                evenIndex++;\n\
    \            }\n            else\n            {\n                if (evenIndex\
    \ > 0)\n                {\n                    sum += lst[index];\n          \
    \      }\n            }\n        }\n        return sum;", "        long sum =\
    \ 0;\n        long evenIndex = 1;\n        foreach (var x in lst) {\n        \
    \    sum += x;\n            if (x % 2 == 0) {\n                evenIndex++;\n\
    \            } else {\n                sum += (x - evenIndex) * 2;\n         \
    \   }\n        }\n        return sum;", "        long sum = 0L;\n        long\
    \ count = 1L;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i\
    \ % 2 == 0) {\n                if (lst[i] % 2 != 0) {\n                    count++;\n\
    \                }\n                sum += lst[i] / 2;\n            }\n      \
    \      else {\n                if (lst[i] % 2 == 1) {\n                    sum\
    \ += lst[i] / 2;\n                    count++;\n                }\n          \
    \  }\n        }\n        if (count == 0L) {\n            return sum;\n       \
    \ }\n        return sum % 10;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if ((i % 2) == 0) {\n                if ((lst.Count\
    \ - i) % 2 == 0) {\n                    sum += lst[i];\n                }\n  \
    \          }\n        }\n        return sum;", "        long sum = 0;\n      \
    \  foreach (var i in lst) {\n            if (i % 2 == 0) sum += i;\n        }\n\
    \        return sum;", "        var even = lst.Where(x => x % 2 == 0).ToList();\n\
    \        return even.Where((y, i) => i % 2 == 1).Sum();", "        if (lst.Count\
    \ == 0) return 0;\n        var sum = 0;\n        var evenPos = 0;\n        var\
    \ oddPos = 0;\n        foreach (var num in lst) {\n            if (num % 2 !=\
    \ 0) {\n                sum += num;\n                oddPos++;\n            }\
    \ else {\n                sum += num;\n                evenPos++;\n          \
    \  }\n        }\n        return sum - lst.Sum(n => (long)n & 1);", "        //\
    \ O(2n) solution\n        long oddSum = 0;\n        foreach (var i in lst) {\n\
    \            if (i % 2 == 0) {\n                oddSum += i;\n            }\n\
    \        }\n        long evenSum = oddSum;\n        foreach (var i in lst) {\n\
    \            if (i % 2 == 1) {\n                evenSum += i;\n            }\n\
    \        }\n        return evenSum;", "        long result = -1;\n        long\
    \ evenSum = 0;\n        int oddSum = 0;\n        foreach (var item in lst) {\n\
    \            if (item % 2 == 0) {\n                evenSum += item;\n        \
    \    } else {\n                oddSum += item;\n            }\n        }\n   \
    \     result = evenSum - oddSum;\n        return result;", "        var sum =\
    \ 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==\
    \ 0) {\n                sum += lst[i];\n            }\n        }\n        return\
    \ sum;", "        long result = 0;\n        for (int i = lst.Count - 1; i >= 0;\
    \ i--) {\n            if (lst[i] % 2 == 0) \n                continue;\n     \
    \       result += lst[i];\n        }\n        return result;", '        return
    lst.Where(x => (x % 2) == 0).Sum(x => lst.Where(y => ((x % 2) == 0) && ((y % 2)
    == 1)).Sum());', "        long result = lst[0].Value;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i].Value % 2 == 1)\n            \
    \    result -= lst[i - 1].Value;\n            else\n                result +=\
    \ lst[i - 1].Value;\n        }\n        return result;", "        long evenSum\
    \ = 0;\n        long oddSum = 0;\n        long evenCount = 0;\n        long oddCount\
    \ = 0;\n        foreach(long i in lst) {\n            if((i & 1L) != 0) {\n  \
    \              evenSum += i;\n                evenCount++;\n            }\n  \
    \          else {\n                oddSum += i;\n                oddCount++;\n\
    \            }\n        }\n        return (evenCount == 0) ? oddSum : evenSum;",
  "        long sum = 0;\n        if (lst.Count == 0) {\n            return 0;\n \
    \       }\n        long evenPos = lst[lst.length-1] / 2;\n        long oddPos\
    \ = lst[lst.length-1] - evenPos;\n        foreach (long i in lst) {\n        \
    \    if (i % 2 == 0) {\n                sum += i;\n            } else {\n    \
    \            sum += i - evenPos;\n            }\n        }\n        return sum;",
  "        long[] even = lst.Where((long, index) => index % 2 == 0).ToArray();\n \
    \       return even.Sum(i => i / 2);", "        var evenIndexes = lst.Where(x\
    \ => (x & 1) == 0).ToList();\n        return evenIndexes.Sum(x => lst[x]);", " \
    \       long sum = 0;\n        HashSet<long> set = new HashSet<long>();\n    \
    \    for(int i = 0; i< lst.Count; i++){\n            if(i % 2 != 0){\n       \
    \         if(!set.Contains(lst[i])){\n                    sum += lst[i];\n   \
    \                 set.Add(lst[i]);\n                }\n            }\n       \
    \ }\n        return sum;", "        if (lst.Count == 0)\n            return 0;\n\
    \        long sum = 0;\n        int odd = (lst.Count - 1) % 2;\n        foreach\
    \ (long item in lst) {\n            if (item % 2 == 1) {\n                sum\
    \ += item;\n                if (odd == 0 && item % 2 != 0)\n                 \
    \   odd += 1;\n            }\n        }\n        return sum;", "        Debug.Assert(lst\
    \ != null && lst.Count > 0);\n\n        Debug.Assert(lst.Sum() != 0);\n\n    \
    \    int odd = lst[0] % 2 == 1 ? 1 : 0;\n        long result = odd + lst[0] /\
    \ 2;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] %\
    \ 2 == 1) {\n                result += lst[i] / 2;\n            }\n          \
    \  else {\n                result -= lst[i] / 2;\n            }\n        }\n\n\
    \        return result;", "        long sum = 0L;\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            if (i % 2 != 0) {\n                sum = sum\
    \ + lst[i];\n            }\n        }\n        return sum;", "        var evens\
    \ = lst.Where((t, i) => i % 2 == 0).ToList();\n        var odds = lst.Where((t,\
    \ i) => i % 2 == 1).ToList();\n        foreach (var e in evens)\n        {\n \
    \           foreach (var o in odds)\n            {\n                if (e == o)\n\
    \                {\n                    return e;\n                }\n       \
    \     }\n        }\n        return 0;", "        long sum = 0L;\n        long\
    \ odd = 1L;\n        List<long> even = new List<long>();\n        foreach (long\
    \ i in lst)\n        {\n            if (i % 2 == 0)\n            {\n         \
    \       even.Add(i);\n            }\n            else\n            {\n       \
    \         sum += odd;\n                odd = 1L;\n                even.Clear();\n\
    \            }\n        }\n        sum += odd;\n        return sum;", "      \
    \  long sum = 0;\n        int count = 0;\n        foreach (var item in lst) {\n\
    \            if (count % 2 == 0) {\n                sum += item;\n           \
    \ }\n            count++;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        int count = 0;\n        for (int i = 0; i + 1 < lst.Count; i++)\
    \ {\n            if (lst[count] % 2 == 0) {\n                sum += lst[i];\n\
    \                count++;\n            }\n        }\n        return sum;", " \
    \       long sum = 0;\n        foreach (long l in lst) {\n            if (l %\
    \ 2 == 0) {\n                sum = sum + l;\n            }\n        }\n      \
    \  return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (i % 2 == 0) {\n                sum += lst[i];\n    \
    \        }\n        }\n        return sum;", "        long sum = 0;\n        long\
    \ sumOfOdd = 0;\n        long sumOfEven = 0;\n        foreach(var item in lst)\
    \ {\n            if((item % 2) == 1) {\n                sumOfOdd += item;\n  \
    \          } else {\n                sumOfEven += item;\n            }\n     \
    \   }\n        sumOfOdd = sumOfOdd % 60;\n        sumOfEven = sumOfEven % 60;\n\
    \        sum = sumOfEven + sumOfOdd;\n        return sum;", "        if (lst.Count\
    \ < 2) {\n            return 0;\n        }\n        long ans = 0;\n        long\
    \ i = 1;\n        while (i * i < lst.Count) {\n            ans += lst[i++];\n\
    \        }\n        return ans;", "        // write your code in C# 6.0 with .NET\
    \ FW 4.5\n        long sum = 0;\n        if(lst.Count == 0){\n            return\
    \ 0;\n        }\n        for(int i = lst.Count - 1; i >= 0; i--){\n          \
    \  if(lst[i] % 2 == 0){\n                if(lst.Count > 1){\n                \
    \    sum += lst[i - 2];\n                }\n                else if(lst.Count\
    \ == 1){\n                    sum += lst[i];\n                }\n            \
    \    else{\n                    return sum;\n                }\n            }\n\
    \            else{\n                sum += lst[i];\n            }\n        }\n\
    \        return sum;", "        var n = (int)lst.Count;\n        double sum =\
    \ 0;\n        for(int i = 0; i<n; i++){\n            if(i % 2 == 0){\n       \
    \         if(lst[i] % 2 != 0)\n                    sum += lst[i];\n          \
    \  }\n        }\n        return Math.Truncate(sum);", "        long sum = 0;\n\
    \        foreach(var v in lst){\n            if(v%2 == 0) sum += v;\n        }\n\
    \        return sum;", "        var res = 0;\n        foreach (var item in lst.Where(i\
    \ => (i >> 1) & 1).OrderBy(i => i)) {\n            res += item;\n        }\n \
    \       return res;", "        if (lst.Count == 0)\n            return 0;\n  \
    \      // Find first even index\n        int i = 0;\n        while (i < lst.Count\
    \ && lst[i] % 2 == 0) {\n            i += 2;\n        }\n        // Find sum of\
    \ odd elements\n        long sum = 0;\n        while (i < lst.Count) {\n     \
    \       sum += lst[i];\n            i += 2;\n        }\n        // Divide by two\n\
    \        sum -= (lst.Count % 2 == 0) ? 1 : 0;\n        return sum;", "       \
    \ var sum = 0;\n        var i = 0;\n        if (lst.Count > 0) {\n           \
    \ sum = lst[i];\n            i = 1;\n            foreach (var item in lst) {\n\
    \                if (i % 2 == 0) {\n                    if (item % 2 != 0) {\n\
    \                        sum += item;\n                    }\n               \
    \ }\n                i++;\n            }\n        }\n        return sum;", " \
    \       if (lst.Count < 2) return 0;\n        var evens = new List<long>();\n\
    \        var odds = new List<long>();\n\n        for (int i = 0; i < lst.Count;\
    \ ++i) {\n            if (i % 2 == 0)\n                evens.Add(lst[i]);\n  \
    \          else\n                odds.Add(lst[i]);\n        }\n\n        var even\
    \ = evens.Sum();\n        var odd = odds.Sum();\n        return even - odd;",
  "        long sum = 0;\n        long evenSum = 0;\n        long evenCount = 1;\n\
    \        foreach (long i in lst) {\n            if (i % 2 == 0) {\n          \
    \      sum += i;\n                evenSum = sum;\n                evenCount++;\n\
    \            }\n            else {\n                long diff = i - evenSum;\n\
    \                if (diff % 2 == 1)\n                    sum += (diff / 2);\n\
    \            }\n        }\n        return sum;", "        if (lst.Count < 2) return\
    \ 0;\n        long evenSum = 0;\n        for (int i = 0; i < lst.Count - 1; i++)\n\
    \        {\n            if (lst[i]%2==0)\n            {\n                if (lst[i]%2==0)\n\
    \                {\n                    evenSum += lst[i];\n                }\n\
    \            }\n            else\n            {\n                if (lst[i+1]%2==0)\n\
    \                {\n                    evenSum += lst[i+1];\n               \
    \ }\n            }\n        }\n        return evenSum;", "        Debug.Assert(lst.Count\
    \ > 0);\n        long total = 0;\n        long last = 0;\n        foreach (long\
    \ i in lst) {\n            if (i % 2 == 0) {\n                total += i;\n  \
    \              last = i;\n            }\n        }\n        if (last != 0) {\n\
    \            total += last;\n        }\n        return total;", "        if (lst.Count\
    \ == 0) return 0;\n        var sum = 0;\n        for (var i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i-2]%2 == 0)\n                sum += lst[i];\n \
    \       }\n        return sum;", "        long sum = 0;\n        if (lst == null)\
    \ return 0;\n        int n = lst.Count;\n        int count = 0;\n        foreach\
    \ (long x in lst) {\n            if (count % 2 == 0) {\n                if (x\
    \ % 2 == 1) sum += x;\n            }\n            count++;\n        }\n      \
    \  return sum;", "        if (lst.Count < 2) return 0;\n        long total = 0;\n\
    \        long even = 0;\n        int countOdd = 1;\n        long odd;\n      \
    \  for (int i = 1; i < lst.Count; i++) {\n            odd = lst[i];\n        \
    \    if (odd % 2 == 0) {\n                even = odd % 10;\n                if\
    \ (even % 2 == 0)\n                    countOdd += 1;\n            }\n       \
    \     else {\n                if (countOdd == 1) even = odd % 10;\n          \
    \      else if (countOdd == 2) even = odd % 10;\n                else if (countOdd\
    \ == 3) even = odd % 10;\n                else if (countOdd == 4) even = odd %\
    \ 10;\n                else if (countOdd == 5) even = odd % 10;\n            \
    \    else if (countOdd == 6) even = odd % 10;\n                else if (countOdd\
    \ == 7) even = odd % 10;\n                else if (countOdd == 8) even = odd %\
    \ 10;\n                else if (countOdd == 9) even = odd % 10;\n            \
    \    total += even;\n                countOdd = 1;\n            }\n        }\n\
    \        return total;", "        long oddsum = 0;\n        long evensum = lst[0];\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n\
    \                evensum += lst[i];\n            }\n            else {\n     \
    \           oddsum += lst[i];\n            }\n        }\n        return oddsum\
    \ + evensum;", "        long[] sums = lst.ToArray();\n        if (lst.Count >\
    \ 0)\n            sums = sums.Where(x => (x & 1) == 1).ToArray();\n        return\
    \ sums.Sum();", "        long sum = 0;\n        int count = 0;\n        for (int\
    \ i = 0; i + 1 < lst.Count; i++) {\n            if (lst[i]%2==0) {\n         \
    \       count += lst[i] - lst[i + 1];\n            }\n        }\n        if (count\
    \ > 0)\n            sum = sum + count;\n        return sum;", "        // TODO:\
    \ Write your implementation here.\n        var result = lst.Where((l, i) => i\
    \ % 2 == 0).Sum();\n        if (result % 2 == 0)\n            return 0;\n    \
    \    else\n            return result;", "        long sum = 0;\n        foreach\
    \ (var i in lst) {\n            if (i % 2 == 1) {\n                sum += i;\n\
    \            }\n        }\n        return sum;", "        long sum = 0L;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            sum += lst[i - 1] * lst[i];\n\
    \        }\n        return sum;", "        if (lst.Count == 0) {\n           \
    \ return 0L;\n        }\n\n        long[] sum = new long[2];\n        int evenPos\
    \ = 0;\n\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2\
    \ == 0) {\n                sum[0] += lst[i];\n            } else {\n         \
    \       sum[1] += lst[i];\n                evenPos = 1;\n            }\n     \
    \   }\n        return sum[evenPos] + sum[0] - (sum[1] + sum[evenPos]);", "   \
    \     if (lst.Count == 0) {\n            throw new ArgumentException();\n    \
    \    }\n\n        long sum = lst.First();\n\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] % 2 == 0) {\n                sum += lst[i];\n\
    \            }\n        }\n\n        return sum;", "        long even = 0;\n \
    \       for (int i = 0; i < lst.Count; ++i) {\n            if (lst[i] % 2 == 0)\
    \ {\n                even += lst[i];\n            }\n        }\n        return\
    \ even;", "        long evenSum = lst[0];\n        foreach (long x in lst.Skip(1)){\n\
    \            if (x % 2 == 0){\n                evenSum = evenSum + x;\n      \
    \      }\n        }\n        return evenSum;", "        if (lst.Count < 3) {\n\
    \            return 0;\n        }\n\n        var evenSum = 0;\n        var oddSum\
    \ = 0;\n        var even = 0;\n        var odd = 1;\n\n        var list = lst.OrderBy(x\
    \ => x).ToList();\n\n        var evenList = list.Skip(2).Take(list.Count - 2).ToList();\n\
    \        evenList.ForEach(x => evenSum += x);\n\n        var oddList = list.Skip(1).Take(list.Count\
    \ - 1).ToList();\n        oddList.ForEach(x => oddSum += x);\n\n        var result\
    \ = evenSum + oddSum;\n\n        return result;", "        long sum = 0;\n   \
    \     if (lst != null && lst.Count > 0) {\n            int len = lst.Count;\n\
    \            int[] evens = new int[len];\n\n            // Sort lst\n        \
    \    lst.Sort();\n\n            for (int i = 0; i < len; i++) {\n            \
    \    int evenIndex = i / 2;\n                if (evens[evenIndex] == 0) {\n  \
    \                  sum += lst[i];\n                    evens[evenIndex] = 1;\n\
    \                } else {\n                    if (evenIndex == len - 1) {\n \
    \                       sum += lst[i];\n                        evens[evenIndex]\
    \ = 0;\n                    }\n                }\n            }\n        }\n\n\
    \        return sum;", "        var sum = lst.Where((x, i) => i % 2 == 0).Sum();\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++)\n            if (i % 2 == 0)\n                sum += lst[i];\n        return\
    \ sum;", "        long result = 0;\n        long sum = 0;\n        long current\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==\
    \ 0) {\n                sum += lst[i];\n            } else {\n               \
    \ result += current;\n                current = lst[i];\n            }\n     \
    \   }\n        return result;", "        var evens = lst.Where((x, i) => i % 2\
    \ == 0).ToList();\n        var odds = lst.Where((x, i) => i % 2 != 0).ToList();\n\
    \        Debug.Assert(evens.Count == odds.Count);\n\n        var sum = 0;\n  \
    \      foreach (var v in odds) sum += v;\n        foreach (var v in evens) sum\
    \ += v;\n        return sum;", "        long result = lst[0];\n        long sum\
    \ = 0;\n        foreach (var item in lst) {\n            if (item % 2 == 0)\n\
    \                sum += item;\n        }\n        return sum;", "        long\
    \ oddSum = 0;\n        long evenSum = 0;\n        int len = lst.Count;\n     \
    \   for (int i = 0; i < len; i++) {\n            if (i % 2 == 0) {\n         \
    \       evenSum += lst[i];\n            } else {\n                oddSum += lst[i];\n\
    \            }\n        }\n        return (oddSum + evenSum);", "        if (lst.Count\
    \ == 0)\n            return 0;\n\n        HashSet<long> set = new HashSet<long>();\n\
    \        long sum = 0;\n\n        foreach (var item in lst) {\n            if\
    \ (set.Contains(item))\n                set.Remove(item);\n            else\n\
    \                sum += item;\n            set.Add(item);\n        }\n\n     \
    \   return sum;", '        return lst.Where((x, i) => i % 2 == 0).Sum(x => x);',
  "        long sum = 0;\n        long curSum = 0;\n        long len = lst.Count;\n\
    \        bool isOdd = true;\n        int evenPos = 0;\n        int oddPos = 0;\n\
    \        long tmpVal = 0;\n\n        for (long i = 0; i < len; i++) {\n      \
    \      tmpVal = lst[i];\n            if (isOdd) {\n                curSum += tmpVal;\n\
    \                isOdd = false;\n                if (i == len - 1) {\n       \
    \             sum += curSum;\n                }\n            }\n            else\
    \ {\n                oddPos++;\n                if (tmpVal % 2 == 1) {\n     \
    \               curSum += tmpVal;\n                    isOdd = true;\n       \
    \         }\n            }\n        }\n        return sum;", "        long sum\
    \ = 0L;\n        Array.Sort(lst);\n        long evenIndex = 0;\n        long oddIndex\
    \ = lst.Count - 1;\n        while (oddIndex >= evenIndex) {\n            if (lst[evenIndex]\
    \ % 2 == 0) {\n                sum += lst[evenIndex];\n            }\n       \
    \     evenIndex++;\n        }\n        return sum;", "        long result = 0;\n\
    \        for(int i = 0; i < lst.Count; i += 2) {\n            result += lst[i];\n\
    \        }\n        return result;", "        long sum = 0;\n        for(var i\
    \ = 0; i < lst.Count; i++) {\n            var isOdd = i % 2 == 1;\n          \
    \  if(isOdd && lst[i] % 2 != 0) {\n                sum += lst[i];\n          \
    \  }\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (var l in lst) {\n            if (l % 2 == 0)\n                sum += l;\n \
    \       }\n        return sum;", "        if (lst.Count < 2) return 0L;\n\n  \
    \      long sum = 0L;\n\n        var oddPositions = lst.Skip(1).Select((e, i)\
    \ => new { Index = i, Value = (int)e });\n        foreach (var odd in oddPositions)\n\
    \        {\n            int index = 0;\n            long value = 0L;\n       \
    \     while (index < odd.Index && odd.Index < odd.Index + 1 && odd.Value % 2 ==\
    \ 0)\n            {\n                value = value + odd.Value;\n            \
    \    index++;\n            }\n            sum = (sum + value) % 1000000000L;\n\
    \        }\n\n        return sum;", "        long total = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i] % 2 != 0) total += lst[i];\n\
    \        }\n        return total;", "        // TODO: Write your implementation\
    \ here\n        var evens = lst.Where((x, i) => i % 2 == 0).Sum();\n        var\
    \ odd = lst.Where((x, i) => i % 2 != 0).Sum();\n        return evens + odd;",
  "        if (lst.Count == 0)\n        {\n            return 0;\n        }\n    \
    \    long sum = 0;\n        var evenElements = lst.Where(n => (n % 2) == 0).OrderBy(n\
    \ => n);\n        evenElements.ToList().ForEach(n =>\n        {\n            sum\
    \ = sum + n;\n        });\n\n        if (evenElements.Count % 2 == 0)\n      \
    \  {\n            sum = sum - evenElements.Sum(n => n);\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            if (i % 2 == 0) {\n                sum += lst[i];\n            }\n\
    \        }\n        return sum;", "        long ret = 0;\n        List<long> evens\
    \ = lst.Where(x => x % 2 == 0).ToList();\n        foreach (long num in lst)\n\
    \        {\n            if (num % 2 == 1)\n            {\n                ret\
    \ += num;\n            }\n        }\n        foreach (long num in evens)\n   \
    \     {\n            ret += num;\n        }\n        return ret;", "        var\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i+=2)\n        {\n        \
    \    if (lst[i]%2 != 0 && lst[i+1]%2 == 0)\n            {\n                sum\
    \ += lst[i];\n            }\n        }\n        return sum;", "        if (lst.Count\
    \ < 3) {\n            return 0L;\n        }\n        long sum = 0L;\n        List<long>\
    \ even = lst.FindAll(i => i % 2 == 0);\n        long evenTotal = even.Sum(i =>\
    \ i);\n        long odd = lst.FindAll(i => i % 2 != 0);\n        long oddTotal\
    \ = odd.Sum(i => i);\n        sum = (evenTotal + oddTotal);\n        return sum;",
  "        long sum = 0;\n        \n        for (int i = 0; i < lst.Count; i++) {\n\
    \            if (i%2 == 0) {\n                if (lst[i] % 2 != 0) {\n       \
    \             sum += lst[i];\n                }\n            }\n            else\
    \ {\n                if (lst[i] % 2 == 1) {\n                    sum += lst[i];\n\
    \                }\n            }\n        }\n        return sum;", "        if\
    \ (lst.Count == 0)\n            return 0;\n\n        long odd = lst[0];\n    \
    \    long even = 0;\n\n        for(int i = 1; i < lst.Count; i++){\n         \
    \   odd += lst[i];\n\n            if (lst[i -1] % 2 == 0)\n                even\
    \ += lst[i -1];\n        }\n\n        return odd - (even % odd)%odd;", "     \
    \   var even = lst.Where((x, i) => i % 2 == 0).ToList();\n        var odd = lst.Where((x,\
    \ i) => i % 2 != 0).ToList();\n        var evenSum = even.Sum();\n        var\
    \ oddSum = odd.Sum();\n        return evenSum + oddSum;", "        int sum = 0;\n\
    \        for(int i=0;i<lst.Count;i++)\n        {\n            if (i%2 == 0)\n\
    \                sum += lst[i];\n        }\n        return sum;", "        long\
    \ sum = 0;\n        int odds = 0;\n        foreach (var number in lst) {\n   \
    \         odds += number % 2 == 0 ? 1 : 0;\n            sum += number % 2 == 0\
    \ ? number : -number;\n        }\n        return sum % 2 == 0 ? sum : -sum;",
  "        // write your code in C# 7.0 with .NET 4.7.2 or higher\n        return\
    \ lst.GroupBy(x => (x % 2 == 0 ? 0 : 1)).Sum(g => g.Key);", "        long result\
    \ = 0;\n\n        long[] arr = lst.ToArray();\n        int evenIndex = 0;\n  \
    \      int oddIndex = 1;\n\n        while (evenIndex < arr.Length) {\n       \
    \     result += arr[evenIndex];\n\n            // Move to the next odd element.\n\
    \            arr[oddIndex] = arr[evenIndex];\n            oddIndex++;\n      \
    \      evenIndex++;\n        }\n\n        return result;", "        long total\
    \ = 0;\n        for(int i=0; i<lst.Count; i++)\n        {\n            if(lst[i]\
    \ % 2 == 0)\n            {\n                total += lst[i];\n            }\n\
    \        }\n        return total;", "        long sum = 0;\n        foreach (var\
    \ item in lst) {\n            if (item % 2 == 0) {\n                sum += item;\n\
    \            }\n        }\n        return sum;", "        if (lst.Count <= 0)\n\
    \            return 0;\n\n        var evenOdd = lst.Where((num, index) => index\
    \ % 2 == 0).ToList();\n\n        if (evenOdd.Count == 0)\n            return 0;\n\
    \n        return evenOdd.Sum(x => (long)x * 2);", "        var res = lst.Where((x,\
    \ i) => i % 2 == 0).Sum();\n        return lst[res.CompareTo(lst.Last())] < lst.Last()\
    \ ? res : lst.Last();", "        // Find an even index (i) which has a matching\
    \ odd (odd) index (odd).\n        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (i % 2 == 0 && lst[i] % 2 == 1) {\n                sum\
    \ += lst[odd];\n            }\n        }\n\n        return sum;", "        if\
    \ (lst.Count < 2) {\n            return 0;\n        }\n        long sum = 0;\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] % 2 ==\
    \ 0) {\n                sum += lst[i];\n            }\n            if (i % 2 ==\
    \ 1) {\n                sum = sum - (lst[i] % 2);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        var even = lst.Where((x,\
    \ i) => i % 2 == 0);\n        if (even.Any()) {\n            foreach (var e in\
    \ even) {\n                sum = sum + e;\n            }\n        }\n        return\
    \ sum;", "        Debug.Assert(lst.Count == lst.FindIndex(i => i % 2 == 0));\n\
    \        int len = lst.Count;\n        long result = 0, sum = 0;\n        long\
    \ oddSum = 0;\n        for (int i = 1; i < len; i++) {\n            sum += lst[i];\n\
    \            if (sum % 2 == 0) {\n                oddSum += sum;\n           \
    \ }\n        }\n        int currentOdd = 0;\n        for (int i = 0; i < len;\
    \ i++) {\n            long curr = lst[i];\n            if (curr % 2 != 0) {\n\
    \                if (curr > currentOdd && (curr - currentOdd) % 2 == 0) {\n  \
    \                  result += curr - currentOdd;\n                    currentOdd\
    \ = curr;\n                }\n            }\n        }\n        if (currentOdd\
    \ > 0) {\n            result += currentOdd;\n        }\n        return result;",
  "        if (lst.Count == 0) {\n            return 0;\n        }\n        var odds\
    \ = lst.Where(x => x % 2 == 1).Select(x => x + 1);\n        return lst.Sum(x =>\
    \ odds.Contains(x) ? x : 0);", "        // Write your code here\n        return\
    \ lst.Sum(x => lst.Skip(x % 2).TakeWhile(y => y % 2 != 0).Sum());", "        long\
    \ sum = 0;\n        int i = 0, j = 0, k = 0;\n        for (i = 0; i < lst.Count;\
    \ i++) {\n            k = lst[i];\n            if (i % 2 == 0)\n             \
    \   sum += k;\n            else {\n                for (; j < i; j++) {\n    \
    \                if (lst[j] == k)\n                        break;\n          \
    \      }\n                for (; j < i; j++) {\n                    if (lst[j]\
    \ != k)\n                        break;\n                }\n                for\
    \ (; j < i; j++) {\n                    sum += lst[j];\n                }\n  \
    \              j = i + 1;\n            }\n        }\n        return sum;", " \
    \       long sum = 0;\n        int n = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (lst.ElementAt(i) % 2 == 0) {\n                sum +=\
    \ lst.ElementAt(i);\n                n++;\n            }\n            if (n %\
    \ 2 == 1) {\n                sum += lst.ElementAt(i);\n                n++;\n\
    \            }\n        }\n        return sum;", "        // The first odd number\
    \ is nums[1]\n        // The first even number is nums[2]\n        long sum =\
    \ 0;\n        long nums[] = lst.ToArray();\n        long num = (long)nums[0];\n\
    \        sum = (long)nums[1];\n        long tmp1 = sum;\n        long tmp2 = num\
    \ - sum;\n        long tmp3 = 0;\n        for (int i = 0; i <= lst.Count - 1;\
    \ i++) {\n            if (i % 2 == 0) {\n                num = (long)nums[i];\n\
    \                tmp1 = tmp1 + num;\n                tmp2 = tmp2 - num;\n    \
    \            tmp3 = tmp3 + tmp2;\n            }\n        }\n        tmp1 = tmp1\
    \ + tmp3;\n        return tmp1;", "        // write your code in C# 6.0 with .NET\
    \ 4.5 (Mono)\n        var evenSum = lst\n            .Where(i => i % 2 == 0)\n\
    \            .Sum();\n\n        var oddSum = lst\n            .Where(i => i %\
    \ 2 != 0)\n            .Sum();\n\n        return evenSum + oddSum;", "       \
    \ long total = 0;\n        for (int i = 0; i < lst.Count; i++) {\n           \
    \ if (i % 2 != 0) total += lst[i];\n        }\n        return total;", "     \
    \   bool even = lst.Skip(1).All(x => x % 2 == 0);\n        return even\n     \
    \       ? lst\n                .Where((v, i) => i % 2 == 1)\n                .Sum()\n\
    \            : 0;", "        long sum = 0;\n        int oddCount = 0;\n      \
    \  for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n    \
    \            sum += lst[i];\n                oddCount++;\n            }\n    \
    \    }\n        for (int i = 0; i < lst.Count; i++) {\n            if ((i % 2\
    \ == 0) && (lst[i] == lst[(i + 1) / 2] || lst[i] == lst[(i + 3) / 2])) {\n   \
    \             sum += lst[i];\n                oddCount--;\n            }\n   \
    \     }\n        return sum * (oddCount / 2);", "        var list = lst.ToArray();\n\
    \        var sum = 0;\n        var evenCount = 0;\n        var oddbyCount = 0;\n\
    \n        foreach (var item in list)\n        {\n            if ((item & 1) ==\
    \ 0)\n            {\n                sum += item;\n            }\n           \
    \ else\n            {\n                sum += item / 2;\n                oddbyCount++;\n\
    \            }\n        }\n\n        foreach (var item in list)\n        {\n \
    \           if ((item & 1) == 1)\n            {\n                evenCount++;\n\
    \            }\n        }\n\n        return (evenCount * 2 + oddbyCount);", " \
    \       long sum = 0;\n        if (lst.Count > 0) {\n            sum += lst.Where((x,\
    \ i) => i % 2 == 0).Sum();\n            sum += lst.Where((x, i) => i % 2 == 1).Sum();\n\
    \        }\n        return sum;", "        if (lst.Count <= 0) return 0;\n   \
    \     if (lst.Count <= 1) return lst[0];\n        var ret = 0;\n        var even\
    \ = lst.Where(x => x % 2 == 0);\n        var odd = lst.Where(x => x % 2 != 0);\n\
    \        even.Take(even.Count / 2).ToList().ForEach(x => ret += x);\n        odd.Skip(odd.Count\
    \ / 2).ToList().ForEach(x => ret += x);\n        return ret;", "        // Write\
    \ your code in C# 6.0 with .NET 4.5 (Mono)\n        long total = 0;\n        var\
    \ evenIndex = lst\n            .Select((x, i) => new { Value = x, Index = i })\n\
    \            .Where(x => x.Index % 2 == 0)\n            .Select(x => x.Index /\
    \ 2)\n            .ToArray();\n        foreach (var index in evenIndex) {\n  \
    \          total += lst.ElementAt(index);\n        }\n        return total;",
  "        long oddTotal = 0;\n        int evenIndex = 0;\n        foreach (var x\
    \ in lst) {\n            if (x % 2 == 0) {\n                oddTotal += x;\n \
    \               if (x % 2 == 1) {\n                    evenIndex++;\n        \
    \        }\n            }\n        }\n        return oddTotal - ((evenIndex *\
    \ (evenIndex - 1)) / 2);", "        List<long> even = new List<long>();\n    \
    \    List<long> odd = new List<long>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (i % 2 == 0) {\n                even.Add(lst[i]);\n \
    \           } else {\n                odd.Add(lst[i]);\n            }\n      \
    \  }\n        if (even.Count == 0) {\n            return 0L;\n        }\n    \
    \    bool foundEven = false;\n        long result = 0;\n        foreach (long\
    \ x in even) {\n            if (foundEven) {\n                result += x;\n \
    \           } else {\n                result = x;\n                foundEven =\
    \ true;\n            }\n        }\n        foreach (long x in odd) {\n       \
    \     if (foundEven) {\n                result += x;\n            }\n        }\n\
    \        return result;", "        // Write your code in C# 6.0 with .NET 4.5\
    \ (Mono)\n        long ret = 0;\n        foreach(var i in lst)\n        {\n  \
    \          if((i & 1L) % 2L == 0)\n            {\n                ret = ret +\
    \ i;\n            }\n        }\n        return ret;", "        var evenSums =\
    \ new List<long>();\n        foreach (var i in lst)\n        {\n            if\
    \ (i % 2 == 0)\n            {\n                evenSums.Add(i);\n            }\n\
    \            else\n            {\n                evenSums.Sum(x => x);\n    \
    \        }\n        }\n        var result = evenSums.Sum();\n        return result;",
  "        if (lst.Count < 2)\n            return 0;\n        if (lst.Count % 2 ==\
    \ 0)\n            return lst[0];\n        long ans = lst[1];\n        for(int\
    \ i = 2; i < lst.Count; i += 2)\n            ans += lst[i];\n        return ans;",
  "        Debug.Assert(lst.Count > 0);\n        return lst\n            .Where((x,\
    \ i) => i % 2 == 1)\n            .Sum(x => (x - lst[x / 2]) % 2);", "        int\
    \ oddElements = 0;\n        foreach (long n in lst) {\n            if (n % 2 ==\
    \ 0) {\n                oddElements += n;\n            }\n        }\n        long\
    \ sum = 0;\n        if (oddElements > 0) {\n            int i = 0;\n         \
    \   while (i < lst.Count) {\n                if (i % 2 == 1) {\n             \
    \       sum += lst[i];\n                }\n                i += 2;\n         \
    \   }\n        }\n        return sum;", "        int sum = 0;\n        var evenList\
    \ = lst.Where((x, i) => i % 2 == 0).ToList();\n        foreach (var item in evenList)\n\
    \            sum += item;\n        return sum;", "        long evenSum = 0;\n\
    \        int evenCount = 0, oddCount = 0;\n        foreach (long num in lst) {\n\
    \            if (num & 1 == 0) {\n                evenSum += num;\n          \
    \      evenCount++;\n            }\n            else {\n                oddCount\
    \ += 1;\n                if (oddCount == 3) {\n                    evenSum +=\
    \ num;\n                    evenCount = 0;\n                    oddCount = 0;\n\
    \                }\n            }\n        }\n        return evenSum;", '        return
    Solution2(lst, 0);', "        if (lst.Count() == 0)\n            return 0;\n \
    \       if (lst.Count() == 1)\n            return lst[0];\n        var evens =\
    \ lst.Where(x => x % 2 == 0).ToList();\n        long result = 0;\n        foreach\
    \ (var ev in evens) {\n            result += ev;\n        }\n        return result;",
  "        // Sort the list so that it is in ascending order\n        Array.Sort(lst);\n\
    \        // Calculate the sum of all odd elements\n        long sum = 0;\n   \
    \     foreach (long i in lst) {\n            sum += (i % 2 == 1 ? i : 0);\n  \
    \      }\n        return sum;", "        // Do not use list comprehension\n  \
    \      long sum = 0;\n        if (lst.Any()) {\n            long a = lst[0], b\
    \ = lst[1], c = lst[2];\n            sum = a + (b << 1) + c;\n            for\
    \ (int i = 3; i < lst.Count; ++i) {\n                long d = lst[i];\n      \
    \          sum = sum + d >> 1;\n            }\n        }\n        return sum;",
  "        // TODO: Write your answer here\n        var listOfEvens = new List<long>();\n\
    \        foreach (var x in lst)\n        {\n            listOfEvens.Add(x);\n\
    \        }\n        var sum = 0;\n        for (var i = 1; i < listOfEvens.Count;\
    \ i++)\n        {\n            if (listOfEvens[i] == listOfEvens[i - 1])\n   \
    \             continue;\n            else if (listOfEvens[i] > listOfEvens[i -\
    \ 1])\n            {\n                sum += listOfEvens[i - 1];\n           \
    \     listOfEvens.RemoveAt(i - 1);\n            }\n            else\n        \
    \    {\n                sum -= listOfEvens[i - 1];\n                listOfEvens.RemoveAt(i\
    \ - 1);\n            }\n        }\n        return sum;", "        if (lst.Count\
    \ == 0)\n            return 0L;\n        var sum = lst[0];\n        foreach (var\
    \ x in lst.Skip(1))\n            if (x % 2 == 1) sum += x;\n        return sum;",
  '        return lst.Where((x, i) => i % 2 == 0).Sum(x=>x % 2 != 0);', '        return
    lst.Where((x, index) => index % 2 == 0).Sum(x=>x % 2 == 1);', "        long[]\
    \ even = new long[lst.Count];\n        bool foundOdd = false;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n              \
    \  even[i] = lst[i];\n                foundOdd = true;\n            } else {\n\
    \                if (foundOdd == true) {\n                    return even.Sum();\n\
    \                }\n            }\n        }\n        return 0;", "        if\
    \ (lst.Count < 2) return 0;\n\n        if (lst.Count() == 2) return lst[0] + lst[1];\n\
    \n        var evens = lst.Where((v, i) => i % 2 == 0);\n\n        var odds = evens.Skip(1);\n\
    \n        var sum = odds.Sum();\n\n        return sum;", "        long result\
    \ = lst[0] + lst[1];\n        foreach (long e in lst.Skip(2))\n            if\
    \ (e % 2 == 1)\n                result += e;\n        return result;", "     \
    \   if (lst.Count == 0) return 0;\n        if (lst.Count <= 3) return lst[0];\n\
    \        long evenSum = 0;\n        long sum = 0;\n        foreach (long x in\
    \ lst) {\n            if (x % 2 == 0) evenSum += x;\n            else sum += x;\n\
    \        }\n        return sum - evenSum;", "        long evenSum = 0;\n     \
    \   var evenIndex = lst.TakeWhile(n => n != 0).ToArray();\n        var evenNumbers\
    \ = lst.Where(n => n != 0).ToArray();\n        var index = lst.IndexOf(evenNumbers[0]);\n\
    \        for(int i = 1; i < evenIndex.Length; i++)\n        {\n            if(evenIndex[i]\
    \ < index)\n            {\n                index = evenIndex[i];\n           \
    \ }\n            else\n            {\n                var tempSum = evenNumbers[i];\n\
    \                var tempIndex = evenIndex[i];\n                for (int j = tempIndex;\
    \ j < index; j++)\n                {\n                    tempSum = tempSum +\
    \ evenNumbers[j];\n                }\n                evenSum = evenSum + tempSum;\n\
    \                index = index;\n            }\n        }\n        for(int i =\
    \ 0; i < evenIndex.Length; i++)\n        {\n            evenSum = evenSum + evenNumbers[i];\n\
    \        }\n        return evenSum;", "        Debug.Assert(lst.Count > 0);\n\n\
    \        long sum = 0L;\n        for (int i = 0; i < lst.Count; i++) {\n     \
    \       if (i % 2 == 0) {\n                sum += lst[i];\n            }\n   \
    \     }\n        return sum;", "        long oddSum = 0;\n        long tempSum\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            long currentElement\
    \ = lst[i];\n            if (i % 2 == 1) {\n                tempSum = currentElement;\n\
    \            } else {\n                tempSum = tempSum + currentElement;\n \
    \           }\n\n            if (tempSum > 9) {\n                oddSum = oddSum\
    \ + tempSum - 9;\n                tempSum = 0;\n            }\n        }\n\n \
    \       if (tempSum != 0) {\n            oddSum = oddSum + tempSum;\n        }\n\
    \n        return oddSum;", "        var result = lst.Where((x, idx) => idx % 2\
    \ == 1).Sum();\n        // Console.WriteLine(result);\n        return result;",
  "        long sum = 0L;\n        List<long> evens = new List<long>(lst.Count);\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            evens[i % 2] = lst[i];\n\
    \        }\n        for (int i = 1; i < evens.Count; i++) {\n            if (evens[i\
    \ - 1] % 2 == 0 && evens[i] == evens[i - 1]) {\n                sum += evens[i];\n\
    \            }\n        }\n        return sum;", "        long ret = 0L;\n   \
    \     foreach (long val in lst) {\n            if (val % 2 == 0)\n           \
    \     ret += val;\n        }\n        return ret;", "        long sum = 0;\n \
    \       foreach(var n in lst)\n        {\n            if((n%2 == 0) && lst[(int)n/2]%2\
    \ != 0)\n            {\n                sum = sum + n;\n            }\n      \
    \  }\n        return sum;", "        long sum = 0;\n        Dictionary<long, int>\
    \ lookup = new Dictionary<long, int>();\n\n        // Build lookup table\n   \
    \     foreach(var el in lst) {\n            long val = el % 2 == 0 ? (el * 2)\
    \ : el;\n            lookup[val]++;\n        }\n\n        // Sum by odd numbers\n\
    \        foreach(var k in lookup.Where(kv => kv.Value % 2 == 1))\n           \
    \ sum += kv.Key;\n\n        return sum;", "        long sum = 0;\n        HashSet<long>\
    \ even = new HashSet<long>(new long[26]);\n        foreach (long num in lst) {\n\
    \            if (num % 2 == 0) {\n                even[num / 2] = num;\n     \
    \       }\n            else {\n                int pos = (int) (num % 10);\n \
    \               pos = (pos+6)%26;\n                sum += even[pos];\n       \
    \     }\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (var item in lst) {\n            if (item % 2 == 0) {\n                sum +=\
    \ item;\n            }\n            else {\n                sum -= item;\n   \
    \         }\n        }\n        return sum;", "        long sum = 0;\n       \
    \ foreach (var i in lst) {\n            sum += (i%2 == 0) ? i : 0; \n        }\n\
    \        return sum;", "        long total = 0;\n        bool even = lst[0] %\
    \ 2 == 0;\n        long current;\n        foreach (long i in lst)\n          \
    \  if (i % 2 == 0)\n                even = true;\n            else\n         \
    \       even = false;\n            if (even)\n                total += i;\n  \
    \      return total;", "        int len = lst.Count;\n        if(len == 0)\n \
    \           return 0;\n        long sum = 0;\n        int i = 0;\n        while(i\
    \ < len) {\n            long curr = lst[i];\n            long odd = curr % 2L;\n\
    \            sum += odd * curr;\n            i += 1;\n        }\n        return\
    \ sum;", "        if (lst.Count < 2)\n            return 0L;\n        bool even\
    \ = true;\n        long sum = 0L;\n        foreach (long item in lst) {\n    \
    \        even = !(even);\n            if (even)\n                sum += item;\n\
    \        }\n        return sum;", "        long sum = 0;\n        long odd = 1;\n\
    \        foreach(long i in lst) {\n            if (i % 2 == 0) {\n           \
    \     sum += odd;\n                odd += i;\n            }\n        }\n     \
    \   return sum;", "        long evenSum = 0;\n        foreach (long n in lst)\n\
    \        {\n            if (n % 2 == 1)\n            {\n                evenSum\
    \ += n;\n            }\n        }\n        return evenSum;", "        if (lst.Count\
    \ <= 0)\n            return 0L;\n        long sum = 0L;\n        Dictionary<long,\
    \ long> odd = new Dictionary<long, long>();\n        List<long> even = new List<long>();\n\
    \        long currentSum = 0L;\n        foreach (long i in lst) {\n          \
    \  if (i % 2 == 1) {\n                even.Add(i);\n            }\n          \
    \  else {\n                long currentOdd = odd.ContainsKey(i) ? odd[i] : 0L;\n\
    \                currentSum += currentOdd;\n                odd.Add(i, (currentSum\
    \ + i) % 2L);\n            }\n        }\n        foreach (long i in even) {\n\
    \            sum += i;\n        }\n        return sum;", "        long sum = 0;\n\
    \        ArrayList arrLst = new ArrayList();\n        arrLst.AddRange(lst);\n\
    \        ArrayList even = new ArrayList();\n        ArrayList odd = new ArrayList();\n\
    \        for (int i = 0; i < arrLst.Count - 1; i++) {\n            if (arrLst[i]\
    \ % 2 == 0) {\n                even.Add(arrLst[i]);\n            } else {\n  \
    \              odd.Add(arrLst[i]);\n            }\n        }\n        for (int\
    \ i = 0; i < even.Count; i++) {\n            sum += Convert.ToInt64(even[i]);\n\
    \        }\n        for (int i = 0; i < odd.Count; i++) {\n            sum +=\
    \ Convert.ToInt64(odd[i]);\n        }\n        return sum;", "        long sum\
    \ = 0;\n        bool isEven = false;\n        int idx = 0;\n        for (int i\
    \ = 0; i < lst.Count; i++) {\n            if (i % 2 != 0)\n                sum\
    \ += lst[idx];\n            else\n                isEven = true;\n           \
    \ idx++;\n        }\n        if (isEven)\n            sum += lst.Count - 1;\n\
    \        return sum;", "        long total = 0L;\n        foreach (long i in lst)\n\
    \            if (i % 2 == 1L)\n                total += i;\n        return total;",
  "        long sum = 0;\n        for (int i = 0; i < lst.Count; i += 2) {\n     \
    \       sum += lst[i];\n        }\n        return sum;", "        if (lst.Count\
    \ > 0)\n        {\n            if (lst[0] % 2 == 0)\n            {\n         \
    \       long sum = 0;\n                for (int i = 1; i < lst.Count; i++)\n \
    \               {\n                    if (lst[i] % 2 != 0)\n                \
    \    {\n                        sum += lst[i];\n                    }\n      \
    \          }\n                return sum;\n            }\n        }\n        return\
    \ 0;", "        var evenElements = lst.Where((n, i) => i % 2 == 0);\n        long\
    \ total = 0;\n        foreach (var element in evenElements)\n            total\
    \ += element;\n        return total;", "        if (lst.Count == 0)\n        \
    \    return 0;\n        if (lst.Count == 1)\n            return lst[0];\n    \
    \    long sum = 0;\n        List<long> evens = lst.Where(x => (x % 2) == 0).ToList();\n\
    \        foreach (long x in evens)\n            sum += x;\n        return sum;",
  "        long odd = 0, even = 0;\n        foreach (long item in lst) {\n       \
    \     if (item & 1L == 0L) {\n                even += item;\n            } else\
    \ {\n                odd += item;\n            }\n        }\n        return odd\
    \ + even;", "        // TODO implement here\n        long sum = 0;\n        foreach\
    \ (long number in lst) {\n            if (number % 2 == 0) {\n               \
    \ sum += number;\n            }\n        }\n        return sum;", "        if\
    \ (lst.Count == 0) return 0L;\n        var minPos = lst.Count - 1;\n        var\
    \ maxPos = 0;\n        for (var i = lst.Count - 1; i >= 0; i--) {\n          \
    \  if (lst[i] % 2 != 0 && lst[i] != (i + 1) / 2) minPos = i;\n            if (lst[i]\
    \ % 2 == 0 && lst[i] != (i + 1) / 2) maxPos = i;\n        }\n        return lst[minPos]\
    \ + (maxPos == minPos ? 0L : lst[maxPos - 1]);", "        long sum = 0;\n    \
    \    for (int i = 0; i <= lst.Count - 2; i += 2) {\n            sum += lst[i];\n\
    \        }\n        return sum;", "        long odd = 0, even = 0, sum = 0;\n\
    \        bool foundOdd = false;\n        foreach (long n in lst) {\n         \
    \   if (n % 2 == 0) {\n                foundOdd = true;\n                even\
    \ += n;\n            } else {\n                if (foundOdd) {\n             \
    \       odd += n;\n                }\n            }\n        }\n        return\
    \ even;", "        long sum = 0;\n        for (int i = 0; i < lst.Count; i+= 2)\
    \ {\n            sum += lst[i];\n        }\n        return sum;", "        //\
    \ Use a variable called count and initialize it to 0\n        long count = 0;\n\
    \        // Traverse the list from the beginning\n        foreach (long element\
    \ in lst) {\n            // If the element in even position\n            if (element\
    \ % 2 == 0) {\n                // Increment the count by 1\n                count++;\n\
    \                // Find the first odd number larger than the element by looking\
    \ at the previous element in the list\n                long result = lst[list.IndexOf(lst.ElementAtOrDefault(list.IndexOf(element)\
    \ - 1, 2) + 1, 2)];\n                // If the previous element is even, add it\
    \ to the result\n                if (result % 2 == 0) result += element;\n   \
    \             // If the previous element is odd, add it to the result\n      \
    \          else result += element * 2;\n                // If the previous element\
    \ is an even number, add it to the result\n                if (result % 2 == 0)\
    \ result += element * 3;\n                // If the previous element is an odd\
    \ number, add it to the result\n                else result += element * 4;\n\
    \                // If the previous element is an odd number, add it to the result\n\
    \                if (result % 2 == 0) result += element * 5;\n               \
    \ // If the previous element is an odd number, add it to the result\n        \
    \        else result += element * 6;\n                // And so on...\n      \
    \          count += result;\n            }\n        }\n        return count;",
  "        if (lst.Count == 0)\n            return 0L;\n        var even = lst.Take(lst.Count\
    \ / 2).ToList();\n        var odd = lst.Skip(lst.Count / 2).ToList();\n      \
    \  if (odd.Count == 0)\n            return even.Sum();\n        // Sort the odd\
    \ list, O(n)\n        odd.Sort();\n        // Find the even ones and add them\
    \ together\n        var evenSum = even.Sum();\n        return odd.Take(odd.Count\
    \ - 1).Sum(x => evenSum + x);", "        // Odd numbers and even numbers should\
    \ be the same length\n        if (lst.Count <= 0)\n            return 0;\n   \
    \     var evenIndex = lst.Count / 2;\n        var oddIndex = evenIndex + 1;\n\
    \        var evenSum = 0;\n        var oddSum = 0;\n        var evenMax = lst[evenIndex];\n\
    \        var oddMax = lst[oddIndex];\n        // Even sum\n        for (var i\
    \ = 0; i <= evenIndex; i++) {\n            evenSum += lst[i];\n        }\n   \
    \     // Odd sum\n        for (var i = evenIndex + 1; i <= oddIndex; i++) {\n\
    \            oddSum += lst[i];\n        }\n        // We use max to detect if\
    \ the sum is even or odd\n        return evenSum > oddSum ? evenSum : oddSum;",
  "        var sum = 0;\n        for (var i = 0; i < lst.Count; i += 2) {\n      \
    \      sum += lst[i];\n        }\n        return sum;", "        long sum = 0;\n\
    \        long oddsum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n   \
    \         if (i % 2 == 0) {\n                sum += lst[i];\n                oddsum\
    \ += lst[i];\n            }\n        }\n        if (oddsum == 0) {\n         \
    \   sum = sum - lst[0];\n        }\n        return sum;", "        long total\
    \ = 0;\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]\
    \ % 2 == 0) total += lst[i + 1];\n        }\n        return total;", "       \
    \ if (lst.Count < 2) return 0;\n        int evenPos = 0;\n        int oddPos =\
    \ 0;\n        foreach (long i in lst) {\n            if (i % 2 == 0) {\n     \
    \           evenPos++;\n            } else {\n                oddPos++;\n    \
    \        }\n        }\n        if (evenPos == oddPos) return evenPos;\n      \
    \  return oddPos + Solution(lst.Where(x => x % 2 != 0).Take(oddPos).ToList());",
  "        long result = 0, cnt = 0;\n        foreach (var item in lst) {\n      \
    \      cnt += item;\n            if (cnt % 2 == 1) {\n                result +=\
    \ item;\n            }\n        }\n        return result;", "        \n      \
    \  // Write your code in C# 6.0 with .NET 4.5 (Mono)\n        \n        // using\
    \ System;\n        // using System.Collections.Generic;\n        // using System.Linq;\n\
    \        // using System.Text;\n        // using System.Diagnostics;\n       \
    \ // using System.Security.Cryptography;\n        \n        long sum = 0;\n  \
    \      \n        foreach(long i in lst){\n            if(i %2 ==0)\n         \
    \   sum+=i;\n        }\n        return sum;\n        ", "        long result =\
    \ 0;\n        int odd = 0;\n        for (int i = 0; i < lst.Count; i++) {\n  \
    \          if (i % 2 == 0) {\n                if (lst[i] % 2 != 0)\n         \
    \           odd += lst[i];\n            } else {\n                if (odd != 0)\n\
    \                    result += odd;\n                odd = 0;\n            }\n\
    \        }\n        return result;", "        long sum = 0L;\n        int evenSum\
    \ = 0;\n        int evenPos = 0;\n        int oddPos = 0;\n        int oddSum\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 ==\
    \ 0) {\n                evenSum += lst[i];\n                evenPos++;\n     \
    \       }\n            else {\n                oddSum += lst[i];\n           \
    \     oddPos++;\n            }\n        }\n        long evenSumOfOddElements =\
    \ evenSum - oddSum;\n        sum = (evenSumOfOddElements - evenSum) / 2;\n   \
    \     return sum;", "        // write your code in C# 7.1 or above\n        //\
    \ base case\n        if (lst.Count == 0) {\n            return 0;\n        }\n\
    \n        // middle case\n        if (lst.Count % 2 == 0) {\n            return\
    \ lst[0 /* start */] + lst[1 /* end */];\n        }\n\n        // recursive case\n\
    \        List<long> evens = lst.Where(i => (i % 2) == 0).ToList();\n        List<long>\
    \ odds = lst.Where(i => (i % 2) != 0).ToList();\n        var odd_sum = odds.Sum();\n\
    \        var even_sum = evens.Sum();\n        if (even_sum >= odd_sum) {\n   \
    \         return even_sum;\n        }\n        return odd_sum;", "        if (lst.Count\
    \ == 0)\n            return 0;\n\n        var odd = lst.Where(x => x % 2 == 1).ToList();\n\
    \n        var result = odd.Where(x => lst.FindIndex(y => y == x) > 0).Sum();\n\
    \n        return result;", "        long sum = 0;\n        foreach (var item in\
    \ lst) {\n            if (item % 2 == 0) {\n                sum += item;\n   \
    \         }\n        }\n        return sum;", "        // O(1) space and O(n)\
    \ time complexity\n        long ret = 0;\n        int odd = 0, even = 0;\n   \
    \     for (int i = 0; i < lst.Count; i++) {\n            bool isEven = i % 2 ==\
    \ 0;\n            if (isEven) {\n                if (lst[i] == lst[even]) {\n\
    \                    ret += lst[odd];\n                    even++;\n         \
    \       }\n                else {\n                    ret += lst[odd];\n    \
    \                even = 0;\n                    odd++;\n                }\n  \
    \          }\n            else {\n                ret += lst[i];\n           \
    \     odd++;\n            }\n        }\n        return ret;", "        if (lst.Count\
    \ == 0) return 0;\n        var evenSum = 0;\n        int firstOddPos = -1;\n \
    \       int lastOddPos = 0;\n        foreach (var num in lst) {\n            if\
    \ (num & 1 == 0) {\n                evenSum += num;\n            }\n         \
    \   else {\n                firstOddPos = lastOddPos;\n                lastOddPos\
    \ = firstOddPos + 1;\n            }\n        }\n        if (lastOddPos == 0) {\n\
    \            return evenSum;\n        }\n        return evenSum - lst[firstOddPos];",
  "        long sum = 0;\n        long[] even = lst.Where(item => item % 2 == 0).ToArray();\n\
    \        foreach (long item in even) {\n            sum += item;\n        }\n\
    \        foreach (long item in even) {\n            if (item % 2 == 1) {\n   \
    \             sum += item;\n            }\n        }\n        return sum;", " \
    \       int sum = 0;\n        for (int i = 0; i < lst.Count; i += 2) {\n     \
    \       sum += lst[i];\n        }\n        return sum;", "        long res = 0;\n\
    \        \n        for(int i=0; i<lst.Count; i+=2)\n            res += lst[i];\n\
    \        \n        return res;", "        var even = new List<long>();\n     \
    \   var odd = new List<long>();\n\n        foreach (var x in lst)\n        {\n\
    \            even.Add(x % 2);\n            odd.Add(x % 2 == 1);\n        }\n\n\
    \        long sum = 0;\n        foreach (var x in even)\n        {\n         \
    \   sum += x;\n        }\n        return sum;", "        long evenSum = 0;\n\n\
    \        foreach (long x in lst) {\n            if (x % 2 == 0) {\n          \
    \      evenSum += x;\n            }\n        }\n        return evenSum;", "  \
    \      if (lst.Count < 2) {\n            return 0L;\n        }\n        long result\
    \ = 0L;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ % 2 == 0) {\n                result += lst[i];\n            }\n        }\n \
    \       return result;", '        return Enumerable.Range(0, lst.Count).Where(i
    => lst.ElementAt(i) % 2 != 0).Sum(lst.ElementAt);', "        long ans = long.MinValue;\n\
    \n        for (int i = 0; i <= lst.Count - 1; i = i + 2) {\n            ans =\
    \ ans + lst[i];\n        }\n\n        return ans;"]
stop_tokens:
- "\n    }\n"
