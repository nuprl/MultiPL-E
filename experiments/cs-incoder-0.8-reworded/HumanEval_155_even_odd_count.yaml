name: HumanEval_155_even_odd_count
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an integer. return a tuple that has the number of even\
  \ and odd digits respectively.\n    // Example:\n    // >>> EvenOddCount((-12L))\n\
  \    // (Tuple.Create(1L, 1L))\n    // >>> EvenOddCount((123L))\n    // (Tuple.Create(1L,\
  \ 2L))\n    public static Tuple<long, long> EvenOddCount(long num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddCount((7L)).Equals((Tuple.Create(0L,\
  \ 1L))));\n    Debug.Assert(EvenOddCount((-78L)).Equals((Tuple.Create(1L, 1L))));\n\
  \    Debug.Assert(EvenOddCount((3452L)).Equals((Tuple.Create(2L, 2L))));\n    Debug.Assert(EvenOddCount((346211L)).Equals((Tuple.Create(3L,\
  \ 3L))));\n    Debug.Assert(EvenOddCount((-345821L)).Equals((Tuple.Create(3L, 3L))));\n\
  \    Debug.Assert(EvenOddCount((-2L)).Equals((Tuple.Create(1L, 0L))));\n    Debug.Assert(EvenOddCount((-45347L)).Equals((Tuple.Create(2L,\
  \ 3L))));\n    Debug.Assert(EvenOddCount((0L)).Equals((Tuple.Create(1L, 0L))));\n\
  \    }\n\n}\n"
completions: ["        long odd = 0;\n        long even = 0;\n        long tmp = 0;\n\
    \        while (num --> 0) {\n            tmp = num % 10;\n            if (tmp\
    \ % 2 == 0)\n                even++;\n            else\n                odd++;\n\
    \        }\n        return Tuple.Create(even, odd);", "        // use linq to\
    \ get the even and odd digits and count them.\n        int evenCount = Math.Abs(num)\
    \ % 2 == 0 ? 0 : 1;\n        int oddCount = Math.Abs(num) % 2 == 0 ? 1 : 2;\n\
    \        return new Tuple<long, long>(evenCount, oddCount);", "        if (num\
    \ < 0) throw new ArgumentOutOfRangeException(\"num\", \"Argument num must be greater\
    \ than or equal to 0.\");\n        if (num > int.MaxValue) throw new ArgumentOutOfRangeException(\"\
    num\", \"Argument num must be less than or equal to int.MaxValue\");\n       \
    \ // Convert the number to a string\n        string number = Convert.ToString(num);\n\
    \n        // Use a list to store odd numbers\n        List<int> odd = new List<int>();\n\
    \        // Use a list to store even numbers\n        List<int> even = new List<int>();\n\
    \        // A variable to count the number of digits\n        int digits = 0;\n\
    \        // A variable to keep track of whether a number has been written yet\n\
    \        bool isWritten = false;\n\n        // Loop through each character in\
    \ the string\n        for (int i = 0; i < number.Length; i++) {\n            //\
    \ If the number has been written, break the loop\n            if (isWritten) {\n\
    \                break;\n            }\n            // Get the current character\
    \ in the string\n            char c = number[i];\n\n            // If the number\
    \ has been written, break the loop\n            if (isWritten) {\n           \
    \     break;\n            }\n            // If this is a digit, increase the digits\
    \ variable\n            digits = (digits + 1) % 10;\n            if (digits !=\
    \ 0) {\n                // If the digit is a 0, skip it\n                if (c\
    \ == '0') {\n                    // Increase the isWritten variable\n        \
    \            isWritten = true;\n                    continue;\n              \
    \  }\n                // If the digit is an odd number, add the number to list\n\
    \                if (c == '1') {\n                    odd.Add(i);\n          \
    \      } else {\n                    even.Add(i);\n                }\n       \
    \     }\n        }\n\n        // If there aren't enough digits, return 0\n   \
    \     if (digits < 2) {\n            return Tuple.Create(0, 0L);\n        }\n\n\
    \        // Otherwise, return the tuple of the even and odd numbers\n        return\
    \ Tuple.Create(even.Count, odd.Count);", "        if (num < 0) {\n           \
    \ throw new ArgumentException(\"num should be positive\");\n        }\n\n    \
    \    // Find all even digits\n        long odd = 1;\n        long even = 0;\n\n\
    \        while (num != 0) {\n            if (num % 2 == 0) {\n               \
    \ even += 1;\n            } else {\n                odd += 1;\n            }\n\
    \n            num = (long)Math.Floor(Math.Pow(10, num) / 10);\n        }\n\n \
    \       return Tuple.Create(even, odd);", "        long result = 0;\n        long\
    \ oddDigits = 0;\n        long evenDigits = 0;\n\n        for(long i = 1; num\
    \ > 0; i++) {\n            long digit = num % 10;\n            int newDigit =\
    \ digit;\n            result += digit;\n\n            if(digit % 2 == 1)\n   \
    \             evenDigits++;\n\n            else\n                oddDigits++;\n\
    \n            num = num / 10;\n        }\n        return new Tuple<long, long>(result,\
    \ oddDigits);", "        long evenCount = 0;\n        long oddCount = 0;\n   \
    \     long currentDigit = 0;\n        long powerOfTwo = 1;\n        while(num\
    \ != 0){\n            currentDigit = (num % 10);\n            if(currentDigit\
    \ % 2 == 0){\n                evenCount++;\n            } else {\n           \
    \     oddCount++;\n            }\n            num /= 10;\n        }\n        if\
    \ (oddCount % 2 == 0) {\n            return new Tuple<long, long>(evenCount, oddCount);\n\
    \        } else {\n            return new Tuple<long, long>(oddCount, evenCount);\n\
    \        }", "        var count = 0;\n        var isEven = true;\n        for\
    \ (var i = 2; i <= num / 2; ++i) {\n            if ((num % i) == 0) {\n      \
    \          ++count;\n                isEven = !isEven;\n            }\n      \
    \  }\n        return new Tuple<long, long>(count, isEven ? 1 : 0);", "       \
    \ int div = num % 2 == 0 ? 0 : 1;\n        int even = 0;\n        int odd = 0;\n\
    \n        long n = 0;\n\n        while (num > 0) {\n            n = num / 10;\n\
    \            num = num % 10;\n            if (n % 2 == 0) {\n                even\
    \ += n / div;\n            } else {\n                odd += n / div;\n       \
    \     }\n        }\n\n        return Tuple.Create(even, odd);", "        if (num\
    \ == 0)\n            return Tuple.Create(0, 0L);\n        long n = 0;\n      \
    \  long m = 0;\n        long q = 0;\n        while (num >> m == 0)\n         \
    \   m += 1;\n        while (num >> n == 0)\n            n += 1;\n        long\
    \ count = 0;\n        while (num >> q == 0)\n            count += 1;\n       \
    \ return (Tuple.Create(m, n), count);", "        long numDigits = num.ToString(CultureInfo.InvariantCulture).Length;\n\
    \        List<long> even = new List<long>();\n        List<long> odd = new List<long>();\n\
    \        // count the number of even and odd digits.\n        for (int i = 0;\
    \ i < numDigits; i++) {\n            long digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                even.Add(digit);\n            } else {\n      \
    \          odd.Add(digit);\n            }\n            num /= 10;\n        }\n\
    \        return Tuple.Create(even.Count, odd.Count);", "        long sum = 0;\n\
    \        for (int i = num; i > 0; i /= 10) {\n            if (num % 10 == 0) sum++;\n\
    \            num /= 10;\n        }\n        return Tuple.Create(sum, num);", " \
    \       long odd = 1, even = 1;\n        if (num < 0) num *= -1L;\n        while\
    \ (num != 0) {\n            long digit = num % 10;\n            num = num / 10;\n\
    \            if (digit % 2 == 0) {\n                even *= digit;\n         \
    \   }\n            else {\n                odd *= digit;\n            }\n    \
    \    }\n        return new Tuple<long, long>(even, odd);", "        long evenCount\
    \ = 0;\n        long oddCount = 0;\n        long digit = 0;\n        while (num\
    \ > 0) {\n            digit = num % 10;\n            evenCount += digit % 2 ==\
    \ 0 ? 1 : 0;\n            oddCount += digit % 2 != 0 ? 1 : 0;\n            num\
    \ = (num - digit) / 10;\n        }\n\n        return Tuple.Create(evenCount, oddCount);",
  "        var tenToThePowerOf10 = LongPow(10, num);\n\n        long even = 0;\n \
    \       long odd = 1;\n        long tenToPowerOf10 = 1;\n        long one = 1;\n\
    \n        while (true) {\n            long tenToThePowerOfTen = tenToThePowerOf10\
    \ * tenToPowerOf10;\n\n            if (num >= tenToThePowerOfTen) {\n        \
    \        num -= tenToThePowerOfTen;\n                odd += one;\n           \
    \ } else if (num < tenToThePowerOfTen) {\n                num += tenToThePowerOfTen;\n\
    \                even += one;\n            } else {\n                num -= tenToThePowerOf10;\n\
    \                tenToPowerOf10 += 1;\n                break;\n            }\n\
    \n            one += 1;\n        }\n\n        return new Tuple<long, long>(even,\
    \ odd);", "        long evenCount = 0;\n        long oddCount = 0;\n        while\
    \ (num /= 10) {\n            evenCount += (num % 2 == 0);\n            oddCount\
    \ += (num % 2 == 1);\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        long evenDigitCount = 0;\n        long oddDigitCount = 0;\n        long\
    \ tenPow = 10;\n        long temp = num;\n        while (temp != 0) {\n      \
    \      int digit = (int)(temp % tenPow);\n            temp /= tenPow;\n      \
    \      ++oddDigitCount;\n            if (digit % 2 == 0) {\n                ++evenDigitCount;\n\
    \            }\n        }\n        return Tuple.Create(evenDigitCount, oddDigitCount);",
  "        var even = new List<long> { };\n        var odd = new List<long> { };\n\
    \        var t = 0;\n        while(num > 0) {\n            t = num % 10;\n   \
    \         if (t % 2 == 0)\n                even.Add(t);\n            else\n  \
    \              odd.Add(t);\n            num /= 10;\n        }\n        return\
    \ new Tuple<long, long>(even.Count, odd.Count);", "        long even_count = 0;\n\
    \        long odd_count = 0;\n        string digits = num.ToString();\n      \
    \  foreach (string digit in digits.Select(d => d.ToString()))\n        {\n   \
    \         if (digit.Length > 0)\n            {\n                even_count +=\
    \ digit.GetHashCode() % 2;\n                odd_count += digit.GetHashCode() /\
    \ 2;\n            }\n        }\n\n        return new Tuple<long, long>(even_count,\
    \ odd_count);", "        long evenDigit = 0;\n        long oddDigit = 0;\n   \
    \     if (num < 0) {\n            num = -num;\n            int sign = 1;\n   \
    \         if (num < 0) {\n                sign = -1;\n            }\n        \
    \    num = -num;\n        }\n        while (num > 0) {\n            int digit\
    \ = num % 10;\n            if (digit % 2 == 0) {\n                evenDigit =\
    \ evenDigit + digit;\n            }\n            else {\n                oddDigit\
    \ = oddDigit + digit;\n            }\n            num = num / 10;\n        }\n\
    \        return new Tuple<long, long>(evenDigit, oddDigit);", "        // Complete\
    \ the code here\n        var even = 0;\n        var odd = 0;\n        long digit;\n\
    \        while (num > 0) {\n            digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                even++;\n            } else {\n               \
    \ odd++;\n            }\n            num = num / 10;\n        }\n        return\
    \ new Tuple<long, long>(even, odd);", "        long evenDigits = 0;\n        long\
    \ oddDigits = 0;\n        bool isNegative = true;\n        bool isNegativeAsInteger\
    \ = false;\n        if (num < 0) {\n            num = -num;\n            isNegative\
    \ = true;\n            isNegativeAsInteger = true;\n        }\n        if (num\
    \ == 0)\n            return new Tuple<long, long>(0L, 0L);\n        while (num\
    \ != 0) {\n            if (num % 2 == 0)\n                evenDigits++;\n    \
    \        else\n                oddDigits++;\n            num /= 10;\n        }\n\
    \        if (isNegativeAsInteger && !isNegative)\n            oddDigits--;\n \
    \       return new Tuple<long, long>(evenDigits, oddDigits);", "        if (num\
    \ == 0)\n            return Tuple.Create(0, 0);\n        var even = DigitsOfNum(num).Where(x\
    \ => (x % 2) == 0).Count();\n        var odd = DigitsOfNum(num).Where(x => (x\
    \ % 2) != 0).Count();\n        return Tuple.Create(even, odd);", "        long\
    \ sum = 0;\n        bool even = true;\n        long odd = 0;\n        long numDigits\
    \ = num.ToString().Length;\n        char lastDigit;\n        while (num !=0) {\n\
    \            lastDigit = num % 10;\n            even = !even;\n            odd\
    \ += even;\n            sum += lastDigit * even;\n            num = (num / 10);\n\
    \        }\n        // We know that the sum will be positive\n        // Therefore\
    \ sum is even\n        return Tuple.Create(sum, odd);", "        if (num < 0)\n\
    \            throw new ArgumentOutOfRangeException(nameof(num));\n\n        long\
    \ even = 0, odd = 0;\n\n        do {\n            long mod = num % 10;\n     \
    \       even = (even + mod) / 2;\n            odd = (odd + mod) % 2;\n       \
    \     num = (num - mod) / 10; // Truncate\n        } while (num > 0);\n\n    \
    \    return Tuple.Create(even, odd);", "        int evenDigits = 0;\n        int\
    \ oddDigits = 0;\n        long product = 0;\n\n        for (int i = 0; i < num.Length;\
    \ i++)\n        {\n            int digit = num % 10;\n            product *= digit;\n\
    \n            if (i == 0)\n                evenDigits = digit;\n            else\n\
    \                evenDigits += digit;\n\n            if (i % 2 == 0)\n       \
    \         oddDigits += digit;\n\n            num /= 10;\n        }\n\n       \
    \ return Tuple.Create(evenDigits, oddDigits);", "        long evenSum = 0;\n \
    \       long oddSum = 0;\n\n        if (num < 0) {\n            return new Tuple<long,\
    \ long>(0L, 0L);\n        }\n        BigInteger bnum = BigInteger.Parse(String.Format(\"\
    {0}\", num));\n        BigInteger bEvenSum = BigInteger.Zero;\n        BigInteger\
    \ bOddSum = BigInteger.Zero;\n        int digitCount = 0;\n        // get count\
    \ of digits\n        while (bnum.ToString().Length > digitCount) {\n         \
    \   digitCount++;\n        }\n        // divide by 10^digitCount if number has\
    \ less digits\n        if (digitCount < bnum.ToString().Length) {\n          \
    \  BigInteger newNum = BigInteger.Divide(bnum.ToString(), BigInteger.Pow(10, digitCount));\n\
    \            bnum = newNum;\n        }\n        // iterate the digits\n      \
    \  for (int i = digitCount - 1; i >= 0; i--) {\n            // multiply by 10^i\
    \ if number has less digits\n            BigInteger thisDigit = BigInteger.Pow(10,\
    \ i);\n            // if number is even keep adding\n            if (bnum.ModPow(thisDigit,\
    \ BigInteger.Two).Equals(BigInteger.One)) {\n                bEvenSum = bEvenSum.Add(bnum.ModPow(thisDigit,\
    \ BigInteger.Two));\n            }\n            // if number is odd keep subtracting\n\
    \            else if (bnum.ModPow(thisDigit, BigInteger.Two).Equals(BigInteger.Zero))\
    \ {\n                bOddSum = bOddSum.Subtract(bnum.ModPow(thisDigit, BigInteger.Two));\n\
    \            }\n            else {\n                // number has more digits\n\
    \                digitCount--;\n                bnum = new BigInteger(String.Format(\"\
    {0}\", bnum.Subtract(BigInteger.One)));\n            }\n        }\n        //\
    \ return the result\n        return new Tuple<long, long>(bEvenSum, bOddSum);",
  "        // Initialize result to 0 and even to -1\n        var even = 0, odd = -1;\n\
    \        // For each digit\n        for (int i = 0; i < num.Length; i++) {\n \
    \           // Calculate the modulo 10 and get the remainder\n            var\
    \ remainder = num % 10;\n            // Update the result accordingly\n      \
    \      if (remainder == 0) even++;\n            else odd++;\n            // Update\
    \ the number to be divided by 10\n            num = num / 10;\n        }\n   \
    \     // Return the result as a tuple\n        return new Tuple<long, long>(even,\
    \ odd);", "        int evencount = 0;\n        int oddcount = 0;\n        int\
    \ count = 0;\n        while (num /= 10) {\n            count++;\n            if\
    \ (num % 2 == 0) {\n                evencount++;\n            }\n            else\
    \ {\n                oddcount++;\n            }\n        }\n        return Tuple.Create(evencount,\
    \ oddcount);", "        var even = Division.Factors(num).Where(a => (a % 2) ==\
    \ 0).Count();\n        var odd = Division.Factors(num).Where(a => (a % 2) != 0).Count();\n\
    \        return Tuple.Create(even, odd);", "        long digit = num;\n      \
    \  long evenCount = 0;\n        long oddCount = 0;\n\n        // Keep looping\
    \ while there is an odd digit or an even digit\n        while (digit > 0) {\n\
    \            if (digit % 2 == 0) {\n                evenCount++;\n           \
    \ } else {\n                oddCount++;\n            }\n\n            digit =\
    \ digit / 2;\n        }\n\n        return Tuple.Create(evenCount, oddCount);",
  "        // This is where the problem is.\n        long temp = 0;\n        long\
    \ evenDigit = 0;\n        long oddDigit = 0;\n        long i = num;\n        while\
    \ (i != 0) {\n            temp = i;\n            if (temp % 2 == 0) {\n      \
    \          evenDigit++;\n                i /= 2;\n            }\n            else\
    \ {\n                oddDigit++;\n                i /= 2;\n            }\n   \
    \     }\n\n        return Tuple.Create(evenDigit, oddDigit);", "        List<long>\
    \ digits = new List<long>(num.ToString());\n        digits.Reverse();\n      \
    \  var ev = new HashSet<long>(digits);\n        ev.Remove(num);\n        return\
    \ Tuple.Create(ev.Count, digits.Count);", "        long even = 0, odd = 0;\n\n\
    \        if (num < 0)\n            return Tuple.Create(even, odd);\n\n       \
    \ // Keep track of how many odd numbers there are.\n        do {\n           \
    \ even++;\n            num /= 10;\n        } while (num > 0);\n\n        num =\
    \ Math.Abs(num);\n        do {\n            odd++;\n            num /= 10;\n \
    \       } while (num > 0);\n\n        return Tuple.Create(even, odd);", "    \
    \    // Step 1: Convert the number to BigInteger\n        BigInteger bigInteger\
    \ = BigInteger.Parse(Convert.ToString(num, 10));\n        // Step 2: Get its length\n\
    \        int length = bigInteger.ToString().Length;\n        // Step 3: Get the\
    \ digits in BigInteger in the range from 0 to (length-1)\n        BigInteger[]\
    \ digits = bigInteger.ToString().Select(x => BigInteger.Parse(x.ToString())).ToArray();\n\
    \        // Step 4: Get the odd digits and count how many are odd and how many\
    \ are even\n        long oddCount = 0;\n        long evenCount = 0;\n        for\
    \ (int i = 0; i < length; ++i) {\n            if ((digits[i] & 1) == 1) {\n  \
    \              evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n        }\n        // Step 5: Return tuple with the number of\
    \ even and odd digits respectively.\n        return new Tuple<long, long>(oddCount,\
    \ evenCount);", "        long odd = 0;\n        long even = 0;\n        while\
    \ (num > 0) {\n            long digit = num % 10;\n            digit = digit *\
    \ 10 - digit;\n            if (digit % 2 != 0)\n                even++;\n    \
    \        else\n                odd++;\n            num /= 10;\n        }\n   \
    \     return Tuple.Create(even, odd);", "        var result = 0;\n        var\
    \ count = 0;\n        var odd = 1;\n        var even = 1;\n\n        long lastDigit\
    \ = num % 10;\n        long lastDecimal = num % 1;\n\n        do {\n         \
    \   count++;\n            num /= 10;\n\n            if (num == 0) {\n        \
    \        even = count; // keep track of even digits\n                odd -= 1;\n\
    \            } else if (lastDigit == 0) {\n                odd -= 1;\n       \
    \     } else if (lastDigit % 2 != 0) {\n                odd += 1;\n          \
    \  }\n\n            lastDigit = num % 10;\n            lastDecimal = num % 1;\n\
    \n        } while (num > 0);\n\n        return Tuple.Create(even, odd);", "  \
    \      long result = 0;\n        while (num > 0) {\n            if (num % 2 !=\
    \ 0) {\n                result++;\n            }\n            num = num / 2;\n\
    \        }\n        return Tuple.Create(result, num);", "        long[] digits\
    \ = num.ToString().Reverse().Select(c => c - '0').ToArray();\n        var result\
    \ = new List<long>();\n        var evenCount = 0;\n        var oddCount = 0;\n\
    \        foreach (var n in digits) {\n            if ((n & 1) == 1) {\n      \
    \          oddCount++;\n            }\n            else {\n                evenCount++;\n\
    \            }\n            result.Add(n);\n        }\n        var evens = result.Take(evenCount);\n\
    \        var odds = result.Skip(evenCount).Take(oddCount);\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long sumEven = 0L;\n        long sumOdd = 0L;\n      \
    \  long digits = 0;\n        // Count even and odd digits in num\n        while\
    \ (num /= 10) {\n            digits++;\n            sumEven *= 10;\n         \
    \   sumEven += num % 10;\n            num = (num / 10L) - 1;\n        }\n    \
    \    // Count odd digits in sumEven\n        while (sumEven > 0) {\n         \
    \   sumOdd *= 10;\n            sumOdd += sumEven % 10;\n            sumEven =\
    \ (sumEven / 10L) - 1;\n        }\n        return Tuple.Create(sumEven, sumOdd);",
  "        var evenDigitsCount = 0;\n        var oddDigitsCount = 0;\n        long\
    \ numCopy = num;\n        while (numCopy > 0) {\n            long mod = numCopy\
    \ % 10;\n            if (mod != 0) {\n                evenDigitsCount++;\n   \
    \             numCopy /= 10;\n            } else {\n                oddDigitsCount++;\n\
    \                numCopy /= 10;\n            }\n        }\n        return Tuple.Create(evenDigitsCount,\
    \ oddDigitsCount);", "        long evens = 0;\n        long odds = 0;\n      \
    \  long max = 0;\n        long cur = 0;\n        long n = 0;\n        while (n\
    \ > 0)\n        {\n            if (num % 10 == 0)\n            {\n           \
    \     evens += 1;\n                max = Math.Max(max, num);\n            }\n\
    \            else\n            {\n                odds += 1;\n            }\n\
    \            cur = num / 10;\n            num = cur;\n            n--;\n     \
    \   }\n        long num2 = Math.Max(max, num);\n        return Tuple.Create(evens,\
    \ odds);", "        ulong count = 0;\n        ulong odd = 1;\n        ulong even\
    \ = 0;\n        while (num >= 10) {\n            int digit = num % 10;\n     \
    \       if (digit % 2 == 0) {\n                even += digit;\n            }\n\
    \            else {\n                odd += digit;\n            }\n          \
    \  num = (long)(num / 10);\n        }\n        return (new Tuple<long, long>(even,\
    \ odd));", "        Debug.Assert(num >= 0);\n        Debug.Assert(num < 1000);\n\
    \        var numString = num.ToString();\n        if (numString.Length == 0)\n\
    \            return Tuple.Create(1L, 1L);\n        int oddDigit = 0;\n       \
    \ int evenDigit = 0;\n        var currentDigit = numString.Last();\n        for\
    \ (int i = numString.Length - 1; i >= 0; i--) {\n            char c = numString[i];\n\
    \            long numDigit = Convert.ToInt64(c) - 1;\n            if (numDigit\
    \ > 9) {\n                int remainder = numDigit % 10;\n                numDigit\
    \ /= 10;\n                oddDigit += (int)Math.Pow(remainder, 2) + currentDigit;\n\
    \                currentDigit = numDigit;\n            }\n            else if\
    \ (numDigit % 2 == 0) {\n                evenDigit += (int)Math.Pow(10, i) + currentDigit;\n\
    \                currentDigit = numDigit;\n            }\n            else {\n\
    \                oddDigit += (int)Math.Pow(10, i) + currentDigit;\n          \
    \      currentDigit = numDigit;\n            }\n        }\n        return Tuple.Create(oddDigit,\
    \ evenDigit);", "        // write your code here\n        int odd = 0;\n     \
    \   int even = 0;\n        while (num > 0) {\n            if (num & 1 == 1) {\n\
    \                even++;\n            }\n            num >>= 1;\n        }\n \
    \       while (odd < even) {\n            odd++;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long even = 0;\n        long odd = 0;\n\n        long remain\
    \ = num;\n        while (remain > 0) {\n            int digit = Convert.ToInt32(remain\
    \ % 10);\n            if (digit % 2 == 0)\n                even++;\n         \
    \   else\n                odd++;\n            remain /= 10;\n        }\n\n   \
    \     return new Tuple<long, long>(even, odd);", "        // Initialize two counts,\
    \ one for even, one for odd.\n        long evenCount = 0;\n        long oddCount\
    \ = 0;\n\n        // Iterate over each digit of the number.\n        // If the\
    \ digit is even, increment the even count, otherwise increment the odd count.\n\
    \        foreach(var digit in GetDigits(num))\n        {\n            if (digit\
    \ % 2 == 0)\n            {\n                evenCount++;\n            }\n    \
    \        else\n            {\n                oddCount++;\n            }\n   \
    \     }\n\n        // Return the tuple with the counts.\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        var count = new long[2];\n        var evenCount = 0;\n\
    \        var oddCount = 0;\n        var digit = num / 10;\n        while (digit\
    \ > 0) {\n            if (num % 10 == 0) {\n                count[0] += 1;\n \
    \           }\n            else {\n                count[1] += 1;\n          \
    \  }\n            num -= digit * 10;\n            digit = num / 10;\n        }\n\
    \        if (count[0] == 0 || count[1] == 0) {\n            return Tuple.Create(count[0],\
    \ count[1]);\n        }\n        else {\n            return Tuple.Create(count[1],\
    \ count[0]);\n        }", "        var result = new Tuple<long, long>(0,0);\n\
    \        long even = 0;\n        long odd = 0;\n        while (num !=  0) {\n\
    \            long remaining = num % 10;\n            even = (even * 10) + remaining;\n\
    \            odd = (odd * 10) + remaining % 2;\n            num = num / 10;\n\
    \        }\n        result = (result.Item1, result.Item2);\n        return result;",
  "        // Your code here\n        int evenDigits = 0;\n        int oddDigits =\
    \ 0;\n        long lastDigit = num;\n        long lastDigitCopy = num;\n     \
    \   while (lastDigit != 0) {\n            lastDigitCopy = lastDigit;\n       \
    \     long digit = lastDigitCopy % 10;\n            lastDigitCopy /= 10;\n   \
    \         if (digit % 2 == 0) {\n                evenDigits++;\n            }\n\
    \            else {\n                oddDigits++;\n            }\n           \
    \ lastDigit = digit;\n        }\n        return Tuple.Create(evenDigits, oddDigits);",
  '        return EvenOddCountInternal(num);', "        long[] digits = num.ToString().ToCharArray();\n\
    \        long even = 0;\n        long odd = 0;\n\n        foreach (var digit in\
    \ digits) {\n            if (digit == '0') {\n                even++;\n      \
    \      } else {\n                odd++;\n            }\n        }\n\n        return\
    \ (Tuple.Create(even, odd));", "        long evenCount = 0;\n        long oddCount\
    \ = 0;\n        while (true) {\n            if (num % 2 == 0) {\n            \
    \    evenCount++;\n                num /= 2;\n            } else {\n         \
    \       oddCount++;\n                num *= -1;\n            }\n            if\
    \ (num == 0)\n                break;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        List<int> even = new List<int>();\n        List<int> odd\
    \ = new List<int>();\n        for (int i = NumDigits(num); i >= 0; i--) {\n  \
    \          if (num % 10 == 0) {\n                even.Add(num % 10);\n       \
    \         num /= 10;\n            } else {\n                odd.Add(num % 10);\n\
    \                num /= 10;\n            }\n        }\n        return new Tuple<long,\
    \ long>(even.Count(), odd.Count());", "        long counter = 1;\n        long\
    \ even = 0;\n        long odd = 0;\n        while (num > 0) {\n            long\
    \ currentDigit = num % 10;\n            if (currentDigit % 2 == 0) {\n       \
    \         even += currentDigit / 2;\n            } else {\n                odd\
    \ += currentDigit / 2;\n            }\n            num = num / 10;\n         \
    \   counter++;\n        }\n        return Tuple.Create(even, odd);", "       \
    \ long oddCount = 0;\n        long evenCount = 0;\n        int len = Convert.ToInt32(Math.Log10(num));\n\
    \        int count = 0;\n        while(len != 0)\n        {\n            count\
    \ = count + 1;\n            len = len / 10;\n        }\n        long temp;\n \
    \       int pow10 = 1;\n        for(count = 1; count < len; count++)\n       \
    \ {\n            pow10 = pow10 * 10;\n        }\n        for(count = 0; count\
    \ < len; count++)\n        {\n            temp = Math.Pow(10,len-count);\n   \
    \         temp = temp * num;\n            if(temp % pow10 == 0)\n            {\n\
    \                evenCount++;\n            }\n            else\n            {\n\
    \                oddCount++;\n            }\n        }\n        return Tuple.Create(oddCount,\
    \ evenCount);", "        if (num == 0) return Tuple.Create(0L, 0L);\n        long\
    \ evens = 0;\n        long odds = 0;\n        while (true) {\n            if (num\
    \ % 2 == 0) {\n                evens += 1;\n                num /= 2;\n      \
    \          continue;\n            }\n            odds += 1;\n            num /=\
    \ 2;\n            break;\n        }\n        return Tuple.Create(evens, odds);",
  "        long numEven = num;\n        long numOdd = num;\n        while (true) {\n\
    \            long tempEven = numEven % 10;\n            numEven /= 10;\n     \
    \       long tempOdd = numOdd % 10;\n            numOdd /= 10;\n            if\
    \ (tempEven % 2 == 1 && tempOdd % 2 == 1) {\n                return new Tuple<long,\
    \ long>(tempEven, tempOdd);\n            }\n            if (numEven < 0) {\n \
    \               return new Tuple<long, long>(numEven, numOdd);\n            }\n\
    \            if (numOdd < 0) {\n                return new Tuple<long, long>(numEven,\
    \ numOdd);\n            }\n        }", "        var num = num;\n        long even_count\
    \ = 0;\n        long odd_count = 0;\n        while (true) {\n            long\
    \ remain = num % 10;\n            if (remain == 0) {\n                num++;\n\
    \                even_count++;\n            } else {\n                odd_count++;\n\
    \            }\n            if (num == 0) break;\n            num = num / 10;\n\
    \        }\n        return Tuple.Create(even_count, odd_count);", "        var\
    \ tnum = num;\n        var odd = 0;\n        var even = 0;\n        while (true)\
    \ {\n            long remainder = num % 10;\n            if (remainder == 0) {\n\
    \                even++;\n                num /= 10;\n            }\n        \
    \    else {\n                odd++;\n                num -= remainder * 10;\n\
    \            }\n            if (num == 0) {\n                break;\n        \
    \    }\n        }\n        return Tuple.Create(even, odd);", "        long even\
    \ = 0, odd = 0;\n        BigInteger bigNum = new BigInteger(num);\n        bigNum\
    \ = bigNum.ShiftLeft(1);\n        Console.WriteLine(bigNum.ToString());\n    \
    \    foreach (BigInteger x in bigNum)\n        {\n            if (x % 2 == 0)\n\
    \            {\n                even++;\n            }\n            else\n   \
    \         {\n                odd++;\n            }\n        }\n        return\
    \ Tuple.Create(even, odd);", "        long count = 0;\n        while (true) {\n\
    \            long n = num;\n            while (n > 0) {\n                count++;\n\
    \                if (n % 2 == 0) n = (n / 2);\n                else\n        \
    \            n /= 2;\n            }\n            if (n == 0) break;\n        \
    \    num = n;\n        }\n        return Tuple.Create(count, count + 1);", " \
    \       BigInteger bigNum;\n        bigNum = num;\n        int evenCount = 0;\n\
    \        int oddCount = 0;\n        BigInteger remainderBigNum;\n        BigInteger\
    \ ten = BigInteger.Parse(\"10\");\n        remainderBigNum = bigNum.Remainder(ten);\n\
    \        do {\n            int remainder = remainderBigNum.IntValue;\n       \
    \     if (remainder % 2 == 0) {\n                evenCount++;\n            } else\
    \ {\n                oddCount++;\n            }\n            bigNum = bigNum.Remainder(ten);\n\
    \            remainderBigNum = bigNum.Remainder(ten);\n        } while (bigNum.IntValue\
    \ > 0);\n        return Tuple.Create(evenCount, oddCount);", "        // Odd digits\
    \ of 10^n are the only even digits\n        long digit10 = num % 10;\n       \
    \ long digit1 = num / 10;\n        if (digit10 > 0) {\n            int even_count\
    \ = 0;\n            for (int i = 10; i <= digit10; i++) {\n                if\
    \ ((digit1 % i) == 0) {\n                    even_count++;\n                }\n\
    \            }\n            return new Tuple<long, long>(even_count, digit10);\n\
    \        }\n        return new Tuple<long, long>(0, 0);", "        long even =\
    \ 0, odd = 0;\n        long result = 0;\n        long temp = 0;\n        // convert\
    \ to base 10\n        while (num != 0) {\n            temp = num % 10;\n     \
    \       result += temp;\n            num = num / 10;\n        }\n        // check\
    \ for even and odd numbers\n        while (result > 0)\n        {\n          \
    \  if (result % 2 == 0)\n                even++;\n            else\n         \
    \       odd++;\n            result /= 10;\n        }\n        return Tuple.Create(even,\
    \ odd);", "        var counts = new List<long>();\n        var temp1 = num / 10;\n\
    \        var temp2 = num % 10;\n        var temp3 = Convert.ToString(temp1);\n\
    \        var temp4 = Convert.ToString(temp2);\n        var evenCounter = 0;\n\
    \        var oddCounter = 0;\n        foreach (var item in temp3.Reverse().ToList())\
    \ {\n            if (item == \"0\") {\n                evenCounter++;\n      \
    \      } else {\n                oddCounter++;\n            }\n        }\n   \
    \     if (temp4 == \"0\") {\n            evenCounter++;\n        }\n        return\
    \ Tuple.Create(evenCounter, oddCounter);", "        long evenCount = 0;\n    \
    \    long oddCount = 0;\n        if (num < 0) {\n            throw new ArgumentException(\"\
    The number must be non-negative.\");\n        }\n        string s = num.ToString();\n\
    \        char[] chars = s.ToCharArray();\n        foreach (char c in chars) {\n\
    \            long value;\n            switch (c) {\n                case '0':\n\
    \                case '1':\n                case '2':\n                case '3':\n\
    \                case '4':\n                case '5':\n                case '6':\n\
    \                case '7':\n                case '8':\n                case '9':\n\
    \                    value = 0;\n                    break;\n                case\
    \ '-':\n                    value = -1;\n                    break;\n        \
    \        case '+':\n                    value = 1;\n                    break;\n\
    \                default:\n                    throw new ArgumentException(\"\
    The number must only have digits and '-'.\");\n            }\n            evenCount\
    \ += value;\n            oddCount += value;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", '        return EvenOddCount(num, new List<T>(), 0, 0);', "   \
    \     int count = 0;\n        while (num != 0) {\n            long temp = (num\
    \ % 10) * (num % 10) * num % 10;\n            num /= 10;\n            if (temp\
    \ % 2 == 0) {\n                ++count;\n            }\n        }\n        return\
    \ new Tuple<long, long>(count, 0);", "        long totalEven = 0, totalOdd = 0,\
    \ temp;\n        while (num >0) {\n            temp = num % 10;\n            totalEven\
    \ = totalEven + temp * temp;\n            num = num / 10;\n            temp =\
    \ num % 10;\n            totalOdd = totalOdd + temp * temp;\n            num =\
    \ num / 10;\n        }\n        return Tuple.Create(totalEven, totalOdd);", '        return
    EvenOddCount.EvenOddCountImpl(num);', "        if (num == 0) return (num, num);\n\
    \        int count = 0;\n        int even = 0;\n        int odd = 0;\n       \
    \ while (num > 0) {\n            int digit = (int)num % 10;\n            num /=\
    \ 10;\n            count++;\n            if (digit % 2 == 0) {\n             \
    \   even++;\n            } else {\n                odd++;\n            }\n   \
    \     }\n        return Tuple.Create(even, odd);", "        long evenCount = 0;\n\
    \        long oddCount = 0;\n        bool isOdd = true;\n        long mod;\n \
    \       long tenToTheNthDigit;\n        long tenToTheNthPowerOfTen;\n        long\
    \ count;\n\n        while (num <= 0) {\n            if (num < 0) {\n         \
    \       throw new ArgumentException(\"num must be >= 0\");\n            }\n  \
    \          throw new ArgumentException(\"num must be > 0\");\n        }\n\n  \
    \      while (isOdd) {\n            isOdd = false;\n            tenToTheNthPowerOfTen\
    \ = num / 10;\n            mod = (tenToTheNthPowerOfTen * 1000L) % 1000000000L;\n\
    \            tenToTheNthPowerOfTen = (tenToTheNthPowerOfTen * 1000L) % 1000000000L;\n\
    \            tenToTheNthPowerOfTen++;\n            tenToTheNthPowerOfTen /= 1000000000L;\n\
    \n            // Count how many times mod is divisible by ten\n            while\
    \ (mod) {\n                mod = mod / 10;\n                evenCount++;\n   \
    \         }\n            isOdd = true;\n\n            count = (long) (Math.Log10(tenToTheNthPowerOfTen)\
    \ + 1);\n            while (count < long.MaxValue) {\n                if (tenToTheNthPowerOfTen\
    \ % 10 == 1) {\n                    evenCount++;\n                }\n        \
    \        tenToTheNthPowerOfTen /= 10;\n                count++;\n            }\n\
    \        }\n\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n\
    \n        return Tuple.Create(evenCount, oddCount);", "        if (num < 0)\n\
    \            throw new ArgumentOutOfRangeException(\"num\");\n        var results\
    \ = new List<Tuple<long, long>>();\n        var digits = new List<long>();\n \
    \       var digitCount = 0;\n        while (num > 0) {\n            digits.Add(num\
    \ % 10);\n            num /= 10;\n            digitCount++;\n        }\n     \
    \   // find even and odd digits\n        for (var i = 0; i < digitCount; i++)\
    \ {\n            var isEven = digits.ElementAt(i) % 2 == 0;\n            if (isEven)\n\
    \                results.Add(Tuple.Create(1, 1));\n            else\n        \
    \        results.Add(Tuple.Create(1, 0));\n        }\n        // count the digits\n\
    \        for (var j = digitCount - 1; j > 0; j--) {\n            var isEven =\
    \ digits.ElementAt(j) % 2 == 0;\n            if (!isEven)\n                results.Add(Tuple.Create(0,\
    \ 1));\n        }\n        return results;", "        ulong sum = 0;\n       \
    \ long evenDigits = 0;\n        long oddDigits = 0;\n        bool even = false;\n\
    \        bool odd = false;\n        string str = num.ToString();\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            bool isOdd = i % 2 != 0;\n \
    \           if (isOdd) {\n                oddDigits += str[i].ToInt();\n     \
    \           if (odd == isOdd) {\n                    sum += oddDigits;\n     \
    \               oddDigits = 0;\n                }\n            } else {\n    \
    \            evenDigits += str[i].ToInt();\n                if (even == isOdd)\
    \ {\n                    sum += evenDigits;\n                    evenDigits =\
    \ 0;\n                }\n            }\n            even = !even;\n          \
    \  odd = !odd;\n        }\n        return Tuple.Create(sum, sum - evenDigits -\
    \ oddDigits);", "        int evenDigits = 0;\n        int oddDigits = 0;\n   \
    \     while (num > 0) {\n            int tmp = num % 10;\n            if (tmp\
    \ % 2 == 0) {\n                evenDigits++;\n            }\n            else\
    \ {\n                oddDigits++;\n            }\n            num /= 10;\n   \
    \     }\n        if (evenDigits == oddDigits) {\n            return Tuple.Create(evenDigits,\
    \ 1);\n        }\n        else {\n            return Tuple.Create(evenDigits,\
    \ oddDigits);\n        }", "        var countEven = new Dictionary<long, long>();\n\
    \        var countOdd = new Dictionary<long, long>();\n        var result = (num\
    \ % 2 == 0) ? Tuple.Create(1, 1) : Tuple.Create(0, 0);\n        do {\n       \
    \     long count;\n            if (countEven.TryGetValue(num, out count)) {\n\
    \                result += new Tuple<long, long>(count + 1, 0);\n            }\n\
    \            else {\n                countEven.Add(num, 1);\n            }\n \
    \           if (countOdd.TryGetValue(num, out count)) {\n                result\
    \ += new Tuple<long, long>(count + 1, 1);\n            }\n            else {\n\
    \                countOdd.Add(num, 1);\n            }\n            num = num /\
    \ 10;\n        } while (num != 0);\n        return result;", "        if (num\
    \ < 0) throw new ArgumentOutOfRangeException(\"num\");\n        long even, odd;\n\
    \        even = odd = num;\n        while (true) {\n            if (num % 2 ==\
    \ 0) { even += num; num /= 2; }\n            else if (num % 2 == 1) { odd += num;\
    \ num /= 2; }\n            else { break; }\n        }\n        return (Tuple.Create(even,\
    \ odd));", "        long evenCount = 0;\n        long oddCount = 0;\n        //\
    \ Count the number of even and odd digits\n        while (num > 0) {\n       \
    \     long digit = num % 10;\n            evenCount += digit % 2 == 0 ? 1 : 0;\n\
    \            oddCount += digit % 2 == 1 ? 1 : 0;\n            num /= 10;\n   \
    \     }\n        return Tuple.Create(evenCount, oddCount);", "        if (num\
    \ == 0 || num < 0)\n        {\n            throw new ArgumentOutOfRangeException();\n\
    \        }\n        var evenDigitCount = 0;\n        var oddDigitCount = 0;\n\
    \        long lastDigit;\n        long currentDigit;\n        var digits = new\
    \ List<long>();\n        while (true)\n        {\n            lastDigit = num\
    \ % 10;\n            currentDigit = lastDigit / 2;\n            if (lastDigit\
    \ % 2 == 0)\n            {\n                evenDigitCount++;\n            }\n\
    \            else\n            {\n                oddDigitCount++;\n         \
    \   }\n            if (num % 10 == 0)\n            {\n                break;\n\
    \            }\n            digits.Add(currentDigit);\n            num /= 10;\n\
    \        }\n        return new Tuple<long, long>(evenDigitCount, oddDigitCount);",
  "        long odd = 0;\n        long even = 0;\n\n        int length = (int)Math.Ceiling(Math.Log(num,\
    \ 2));\n\n        for (int i = 0; i < length; i++) {\n            double d = num\
    \ / Math.Pow(10, i);\n            if (Math.Floor(d + 0.5) == d)\n            \
    \    even++;\n            else\n                odd++;\n        }\n        return\
    \ new Tuple<long, long>(even, odd);", "        long evenCount = 0;\n        long\
    \ oddCount = 0;\n        if (num == 0) {\n            return (Tuple.Create(evenCount,\
    \ oddCount));\n        }\n        if (num > 0) {\n            while (num != 0)\
    \ {\n                long digit = num % 10;\n                if (digit % 2 ==\
    \ 0) {\n                    evenCount++;\n                }\n                if\
    \ (digit % 2 != 0) {\n                    oddCount++;\n                }\n   \
    \             num = num / 10;\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        // Convert number to a string and split it into a list\
    \ of digits\n        var digits = num.ToString().ToCharArray().Select(c => c -\
    \ '0').ToList();\n\n        // Count even digits\n        var evenCount = digits.Count(d\
    \ => d % 2 == 0);\n        // Count odd digits\n        var oddCount = digits.Count(d\
    \ => d % 2 != 0);\n\n        // Return even digits\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        var zeroes = Enumerable.Range(0, (int)Math.Log10(num)\
    \ + 1).Select(i => (long)(Math.Pow(10, i)));\n        var evenDigits = zeroes.Where(n\
    \ => num % n == 0).Select(n => (long)Math.Ceiling(Math.Log10(n)));\n        var\
    \ oddDigits = zeroes.Where(n => num % n != 0).Select(n => (long)Math.Floor(Math.Log10(n)));\n\
    \        return Tuple.Create(evenDigits.Sum(), oddDigits.Sum());", "        long\
    \ odd = 0, even = 0;\n        bool isOdd = true;\n        foreach (long digit\
    \ in num.ToString().Reverse()) {\n            long tempVal = Convert.ToInt64(digit);\n\
    \            if (isOdd) {\n                odd += tempVal;\n            } else\
    \ {\n                even += tempVal;\n            }\n            isOdd = !isOdd;\n\
    \        }\n        return Tuple.Create(even, odd);", "        long count = 0;\n\
    \        long odd = 0;\n        long even = 0;\n        while (num > 0) {\n  \
    \          count += (num & 1);\n            num >>= 1;\n        }\n        while\
    \ (count > 0) {\n            odd++;\n            count -= 2;\n        }\n    \
    \    while (count < 0) {\n            even++;\n            count += 2;\n     \
    \   }\n        return Tuple.Create(even, odd);", "        long oddSum = 0;\n \
    \       long evenSum = 0;\n        long evenSum2 = 0;\n        long oddSum2 =\
    \ 0;\n        long evenSum3 = 0;\n        long oddSum3 = 0;\n        if (num <\
    \ 0)\n            throw new ArgumentOutOfRangeException(\"num\", \"num cannot\
    \ be < 0\");\n        while (num > (0L)) {\n            if (num % 2 == 1) {\n\
    \                evenSum += num;\n                evenSum2++;\n              \
    \  if (evenSum2 % 2 == 0) {\n                    evenSum3++;\n               \
    \ }\n                evenSum2 = 0;\n            }\n            oddSum += num;\n\
    \            oddSum2++;\n            if (oddSum2 % 2 == 0) {\n               \
    \ oddSum3++;\n            }\n            oddSum2 = 0;\n            num--;\n  \
    \      }\n        if (evenSum3 > oddSum3) {\n            return new Tuple<long,\
    \ long>(oddSum, evenSum);\n        }\n        else {\n            return new Tuple<long,\
    \ long>(evenSum, oddSum);\n        }", "        if (num < 0) {\n            return\
    \ Tuple.Create(-1L, -1L);\n        }\n        long lowEven = num / 2;\n      \
    \  long lowOdd = num - lowEven;\n        return (lowEven, lowOdd);", "       \
    \ long[] digits = Enumerable.Range(0, 9).Select(i => num % 10).ToArray();\n  \
    \      long[] odd = digits.Where(d => d % 2 == 1).ToArray();\n        long[] even\
    \ = digits.Where(d => d % 2 == 0).ToArray();\n        return Tuple.Create(even.Length,\
    \ odd.Length);", "        long count = 0;\n        long odd = 0, even = 0;\n \
    \       while (num != 0) {\n            if (num % 2 == 0) {\n                even++;\n\
    \                num /= 2;\n            } else {\n                odd++;\n   \
    \             num = (long)(Math.Pow(2, (int)(Math.Log(num) + 1)));\n         \
    \   }\n            count++;\n        }\n\n        return Tuple.Create(even, odd);",
  "        // TODO: Implement this solution\n        long x = 0;\n        long y =\
    \ 0;\n        for (int i = 0; i < num.Length; i++) {\n            x = num[i] -\
    \ '0';\n            y = x + y;\n        }\n        return (Tuple.Create(x, y));",
  "        int[] digits = new int[32];\n        for (int i = 0; i < 32; i++) {\n \
    \           digits[i] = num % 10;\n            num = num / 10;\n        }\n  \
    \      int evenDigits = 0;\n        int oddDigits = 0;\n        for (int i = 0;\
    \ i < digits.length; i++) {\n            if (digits[i] % 2 == 0) {\n         \
    \       evenDigits++;\n            } else {\n                oddDigits++;\n  \
    \          }\n        }\n        Tuple<long, long> result = Tuple.Create(evenDigits,\
    \ oddDigits);\n        return result;", "        long evenCount = 0;\n       \
    \ long oddCount = 0;\n        long curDigit = 0;\n        while (true) {\n   \
    \         if (num < 0) {\n                break;\n            }\n            curDigit\
    \ = num % 10;\n            if (curDigit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n          \
    \  num /= 10;\n        }\n        return new Tuple<long, long>(evenCount, oddCount);",
  "        if (num == 0) return new Tuple<long, long>(1, 1);\n        var remainder\
    \ = num % 10;\n        var evenCount = 0;\n        var oddCount = 1;\n       \
    \ while (remainder != 0) {\n            remainder = remainder / 10;\n        \
    \    if (remainder % 2 == 0) {\n                evenCount++;\n            }\n\
    \            else {\n                oddCount++;\n            }\n        }\n \
    \       return new Tuple<long, long>(evenCount, oddCount);", "        long even\
    \ = 0;\n        long odd = 0;\n        long lastEven = 1;\n        long lastOdd\
    \ = 1;\n        long lastLastEven = lastEven;\n        long lastLastOdd = lastOdd;\n\
    \        long lastEvenPlusLastOdd = lastEven + lastOdd;\n        long lastOddPlusLastEven\
    \ = lastOdd + lastEven;\n        long lastOddPlusLastOdd = lastOdd + lastOdd;\n\
    \        long lastOddMinusLastEven = lastOdd - lastEven;\n        long lastEvenMinusLastOdd\
    \ = lastEven - lastOdd;\n        while (true) {\n            while (num != 0)\
    \ {\n                long digit = num % 10;\n                if (digit % 2 !=\
    \ 0) {\n                    lastEven = lastEven * 10 + digit;\n              \
    \  }\n                else {\n                    lastOdd = lastOdd * 10 + digit;\n\
    \                }\n                num /= 10;\n            }\n            if\
    \ (even == 0) {\n                even = lastEven;\n                odd += lastOdd;\n\
    \                lastEven = 1;\n                lastOdd = 1;\n            }\n\
    \            else if (odd == 0) {\n                odd = lastOdd;\n          \
    \      even += lastEven;\n                lastOdd = 1;\n                lastEven\
    \ = 1;\n            }\n            else if (even != 0) {\n                long\
    \ lastEvenMinusLastOdd = lastEven - lastOdd;\n                long lastOddMinusLastEven\
    \ = lastOdd - lastEven;\n                long lastOddPlusLastEven = lastOdd +\
    \ lastEven;\n                long lastEvenPlusLastOdd = lastEven + lastOdd;\n\
    \                if (lastEvenMinusLastOdd <= lastEven) {\n                   \
    \ even = lastEven;\n                    odd += lastOdd;\n                    lastEven\
    \ = lastLastEven;\n                    lastOdd = lastLastOdd;\n              \
    \  }\n                else if (lastOddMinusLastEven <= lastOdd) {\n          \
    \          odd = lastOdd;\n                    even += lastEven;\n           \
    \         lastOdd = lastLastOdd;\n                    lastEven = lastLastEven;\n\
    \                }\n                else if (lastOddPlusLastEven <= lastEven)\
    \ {\n                    odd = lastOdd;\n                    even += lastEven;\n\
    \                    lastOdd = lastLastOdd;\n                    lastEven = lastLastEven;\n\
    \                }\n                else if (lastEvenPlusLastOdd <= lastOdd) {\n\
    \                    even = ", "        long evenCount = 0;\n        long oddCount\
    \ = 0;\n        bool isEven = true;\n        long div = 1;\n\n        // For odd\
    \ num\n        do {\n            evenCount++;\n            isEven = isEven &&\
    \ (num % div == 0);\n            div += 1;\n            oddCount++;\n        }\
    \ while (isEven);\n\n        // For even num\n        do {\n            evenCount++;\n\
    \            isEven = isEven && (num % div != 0);\n            div += 1;\n   \
    \         oddCount++;\n        } while (isEven);\n\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long odd = 0, even = 0, count = 0;\n\n        while (num\
    \ > 0) {\n            long nextDigit = num % 10;\n            num = (int) num\
    \ / 10;\n            count++;\n\n            if (nextDigit % 2 == 1)\n       \
    \         odd++;\n            else\n                even++;\n        }\n\n   \
    \     return Tuple.Create(odd, even);", "        if (num < 0) {\n            return\
    \ new Tuple<long, long>(1, 1);\n        }\n\n        var count = 0;\n\n      \
    \  while (num /= 10) {\n            count++;\n        }\n\n        return new\
    \ Tuple<long, long>(count, num % 10);", "        long oddCount = 0;\n        long\
    \ evenCount = 0;\n        foreach (char ch in num.ToString()) {\n            //\
    \ if number contains any even digit, increment the even count\n            if\
    \ (ch % 2 == 0) {\n                evenCount++;\n            }\n            //\
    \ else if number contains any odd digit, increment the odd count\n           \
    \ else {\n                oddCount++;\n            }\n        }\n        return\
    \ Tuple.Create(evenCount, oddCount);", "        long evenDigit = 0;\n        long\
    \ oddDigit = 0;\n        long remainder;\n        while (num > 0) {\n        \
    \    remainder = (num % 10);\n            if (remainder % 2 == 0) {\n        \
    \        evenDigit++;\n            }\n            else {\n                oddDigit++;\n\
    \            }\n            num /= 10;\n        }\n        if (oddDigit < evenDigit)\
    \ {\n            return new Tuple<long, long>(oddDigit, evenDigit);\n        }\n\
    \        else {\n            return new Tuple<long, long>(evenDigit, oddDigit);\n\
    \        }", "        if (num < 0)\n            throw new ArgumentException(\"\
    num\", \"num cannot be negative.\");\n        // convert it to an array using\
    \ ToArray().\n        long[] arr = ((long)num).ToArray();\n        long sum =\
    \ 0;\n        long evenSum = 0;\n        long oddSum = 0;\n        int evenCount\
    \ = 0, oddCount = 0;\n        for (int i = 0; i < arr.Length; i++) {\n       \
    \     // If the number is greater than 9 we have to add even digits.\n       \
    \     if (arr[i] >= 10)\n                sum += arr[i];\n            // If the\
    \ number is less than 9 we have to add odd digits.\n            else {\n     \
    \           if (arr[i] % 2 == 0)\n                    evenSum = evenSum + arr[i];\n\
    \                else\n                    oddSum = oddSum + arr[i];\n       \
    \     }\n            // If the number has been divided into both even and odd\
    \ digit numbers, we increment the respective count by 1.\n            if ((i !=\
    \ arr.Length - 1) && arr[i] == arr[i - 1] && arr[i + 1] == arr[i - 1])\n     \
    \           evenCount++;\n            if ((i != 0) && (arr[i] == arr[i - 1]))\n\
    \                oddCount++;\n        }\n        return new Tuple<long, long>(evenCount,\
    \ oddCount);", "        int nDigits = num.ToString().Length;\n        if (num\
    \ < 0)\n            throw new ArgumentException(\"The input number cannot be negative.\"\
    );\n        long evenDigitCount = 0;\n        long oddDigitCount = 0;\n      \
    \  while (num > 0) {\n            // Find out whether the current digit is an\
    \ even or odd digit\n            if (num % 2 != 0) {\n                oddDigitCount++;\n\
    \                num = num / 2;\n            }\n            else {\n         \
    \       evenDigitCount++;\n                num = num / 2;\n            }\n   \
    \     }\n        return new Tuple<long, long>(evenDigitCount, oddDigitCount);",
  "        if (num == 0) {\n            return new Tuple<long, long>(1, 1);\n    \
    \    }\n\n        if (num == 1) {\n            return new Tuple<long, long>(1,\
    \ 1);\n        }\n\n        int digits = (int)Math.Floor((Math.Log10(num) + 1));\n\
    \        long evenCount = 0;\n        long oddCount = 0;\n        double d = (double)num;\n\
    \        for (int i = 0; i < digits; i += 2) {\n            double val = Math.Pow(10,\
    \ i);\n            double div = d / val;\n            long temp = Convert.ToInt64(Math.Truncate(div));\n\
    \            long temp2 = Convert.ToInt64(Math.Truncate(div * val));\n       \
    \     if (temp % 2 == 0)\n                evenCount++;\n            else\n   \
    \             oddCount++;\n            d = val * temp2;\n        }\n        return\
    \ new Tuple<long, long>(evenCount, oddCount);", "        long count = 0;\n   \
    \     long odd = 0;\n        long even = 0;\n        while (num > 0) {\n     \
    \       count += ((num % 10) % 2);\n            num = num / 10;\n        }\n \
    \       return Tuple.Create(count, odd);", "        var result = new List<long>();\n\
    \        while (num > 0) {\n            long next = (num / 10) % 2 == 0 ? num\
    \ % 10 : num / 10;\n            result.Add(next);\n            num = num / 10;\n\
    \        }\n        return Tuple.Create(result.Sum(), result.Count());", "   \
    \     if (num < 0 || num % 2 != 0) return null;\n        var result = new List<long>();\n\
    \        var number = num;\n        long cnt = 0;\n        var even = new long[10];\n\
    \        var odd = new long[10];\n        even[even.Length - 1] = 0;\n       \
    \ odd[odd.Length - 1] = 0;\n        while (number > 0) {\n            int index\
    \ = 0;\n            while (number != 0) {\n                number /= 10;\n   \
    \             index++;\n            }\n            var tmp = even[index];\n  \
    \          if (tmp != 0) result.Add(tmp);\n            tmp = odd[index];\n   \
    \         if (tmp != 0) result.Add(tmp);\n        }\n        return new Tuple<long,\
    \ long>(result.Count(), result.Count(v => v > 0));", "        var result = new\
    \ List<long>();\n        long remainder = num;\n        long evenCount = 0;\n\
    \        long oddCount = 0;\n        while (true) {\n            remainder /=\
    \ 10;\n            if (remainder == 0)\n                break;\n            if\
    \ (remainder % 2 == 0) {\n                evenCount++;\n            }\n      \
    \      else {\n                oddCount++;\n            }\n            result.Add(remainder);\n\
    \        }\n        return new Tuple<long, long>(evenCount, oddCount);", "   \
    \     int evenCount = 0;\n        int oddCount = 0;\n        long x = num;\n \
    \       while (x > 0) {\n            if (x % 2 == 0) {\n                evenCount++;\n\
    \            }\n            else {\n                oddCount++;\n            }\n\
    \            x /= 10;\n        }\n        if (num > 0) {\n            evenCount++;\n\
    \        }\n        return Tuple.Create(evenCount, oddCount);", "        long\
    \ even = 0, odd = 0;\n        long digit = 1;\n        while (digit < num) {\n\
    \            digit = num / 10;\n            if (num % 10 != 0) even++;\n     \
    \       else odd++;\n        }\n        return new Tuple<long, long>(even, odd);",
  "        long numAsLong = num;\n        List<int> list = new List<int>(numAsLong);\n\
    \        list.RemoveAll(x => x == 0);\n        list.RemoveAll(x => x < 0);\n \
    \       list.RemoveAll(x => x > 9);\n        list.RemoveAll(x => x == 1);\n  \
    \      int evenCount = 0;\n        int oddCount = 0;\n        int counter = 0;\n\
    \        int index = -1;\n        int odd = -1;\n        foreach (int x in list)\
    \ {\n            if (x % 2 == 0) {\n                evenCount++;\n           \
    \     if (odd != -1 && odd != x) {\n                    oddCount++;\n        \
    \        }\n                if (x == odd) {\n                    odd = -1;\n \
    \               }\n                counter++;\n            } else {\n        \
    \        odd++;\n            }\n            index = list.IndexOf(list[x]);\n \
    \       }\n        evenCount = evenCount / 2;\n        oddCount = oddCount / 2;\n\
    \        if (evenCount == 0) {\n            oddCount++;\n        } else if (oddCount\
    \ == 0) {\n            evenCount++;\n        }\n        return new Tuple<long,\
    \ long>(evenCount, oddCount);", "        Debug.Assert(num >= 0);\n        long\
    \ count = 0;\n        while (num != 0) {\n            long digit = num % 10;\n\
    \            if (digit % 2 == 0) {\n                count++;\n            } else\
    \ {\n                count += (digit / 2);\n            }\n            num /=\
    \ 10;\n        }\n        return Tuple.Create(count, count - 1);", "        //\
    \ Initialize two accumulators\n        long evenCount = 0;\n        long oddCount\
    \ = 0;\n        // Traverse through the integer and increase the accumulators\
    \ accordingly\n        for (long i = 0; i < num; i++) {\n            if (num %\
    \ 2 == 0) {\n                evenCount++;\n            }\n            else {\n\
    \                oddCount++;\n            }\n        }\n        // Return a tuple\
    \ containing both accumulator values.\n        return new Tuple<long, long>(evenCount,\
    \ oddCount);", "        long even = 0, odd = 0;\n        int nDigits;\n      \
    \  bool isNegative = false;\n        if (num < 0) {\n            isNegative =\
    \ true;\n            num = -num;\n        }\n        nDigits = DivideAndRemainder(num,\
    \ 10, out even, out odd);\n        if (isNegative) odd = -odd;\n        return\
    \ Tuple.Create(even, odd);", "        long oddCount = 0;\n        long evenCount\
    \ = 0;\n        long result = (num % 1000) / 100;\n        while (result > 0)\
    \ {\n            if (num % 100 % 2 == 0) {\n                evenCount++;\n   \
    \         } else {\n                oddCount++;\n            }\n            num\
    \ /= 100;\n        }\n        return new Tuple<long, long>(evenCount, oddCount);",
  "        long evenCount = 0;\n        long oddCount = 0;\n        while (num > 0)\
    \ {\n            long remainder = num % 10;\n            if (remainder % 2 ==\
    \ 0) {\n                evenCount++;\n            }\n            if (remainder\
    \ % 2 == 1) {\n                oddCount++;\n            }\n            num = num\
    \ / 10;\n        }\n        return Tuple.Create(evenCount, oddCount);", "    \
    \    var evenCount = 0;\n        var oddCount = 0;\n        while (num != 0) {\n\
    \            var div = num % 10;\n            oddCount++;\n            if (div\
    \ > 0) {\n                evenCount++;\n            }\n            num = num /\
    \ 10;\n        }\n        return (evenCount, oddCount);", "        var result\
    \ = new Tuple<long, long>(long, long.MaxValue);\n        long count = 0;\n   \
    \     long evenDigit, oddDigit;\n\n        while (num > 0) {\n            evenDigit\
    \ = (num % 10);\n            oddDigit = num / 10;\n            count++;\n\n  \
    \          if (oddDigit == 0) {\n                oddDigit = 1;\n            }\n\
    \n            if (evenDigit == 0) {\n                result.Item1 = count;\n \
    \               result.Item2 = oddDigit;\n                return result;\n   \
    \         }\n            num = (long)Math.Round((double)oddDigit * Math.Pow(10.0,\
    \ (double)count));\n        }\n        return result;", "        var result =\
    \ new Tuple<long, long>();\n        long evenCount = 0;\n        long oddCount\
    \ = 0;\n        // Do the counting in two passes\n        long currNum = num;\n\
    \        while (currNum > 0) {\n            if (currNum % 2 == 0) {\n        \
    \        evenCount++;\n            } else {\n                oddCount++;\n   \
    \         }\n            currNum = currNum / 2;\n        }\n        result.Item1\
    \ = evenCount;\n        result.Item2 = oddCount;\n        return result;", " \
    \       var tens = num / 10L;\n        var units = num % 10L;\n        var evens\
    \ = 0;\n        var odds = 0;\n\n        while (tens != 0) {\n            if (tens\
    \ % 2 == 0) {\n                evens++;\n            } else {\n              \
    \  odds++;\n            }\n            tens = tens / 10L;\n        }\n\n     \
    \   switch (units) {\n            case 0:\n                return new Tuple<long,\
    \ long>(evens, odds);\n            case 1:\n                return new Tuple<long,\
    \ long>(odds, odds);\n            case 2:\n                return new Tuple<long,\
    \ long>(evens, odds);\n            case 3:\n                return new Tuple<long,\
    \ long>(odds, evens);\n            case 4:\n                return new Tuple<long,\
    \ long>(evens, odds);\n            case 5:\n                return new Tuple<long,\
    \ long>(evens, evens);\n            case 6:\n                return new Tuple<long,\
    \ long>(evens, evens);\n            case 7:\n                return new Tuple<long,\
    \ long>(odds, evens);\n            case 8:\n                return new Tuple<long,\
    \ long>(evens, evens);\n            case 9:\n                return new Tuple<long,\
    \ long>(odds, evens);\n            default:\n                return new Tuple<long,\
    \ long>(evens, odds);\n        }", "        var evens = new List<long>();\n  \
    \      var odds = new List<long>();\n        if (num == 0) {\n            return\
    \ new Tuple<long, long>(0, 0);\n        }\n        while (num /= 10) {\n     \
    \       evens.Add(num % 10);\n        }\n        num = num.ToString().Reverse().ToArray();\n\
    \        while (evens.Count > 0) {\n            long index = Array.IndexOf(evens,\
    \ 0);\n            evens.RemoveAt(index);\n            odds.Add(0);\n        }\n\
    \        while (odds.Count > 0) {\n            long index = Array.IndexOf(odds,\
    \ 0);\n            odds.RemoveAt(index);\n            evens.Add(0);\n        }\n\
    \        return new Tuple<long, long>(evens.Count, odds.Count);", "        long\
    \ numDigits = num.ToString().Length;\n        long evenDigitCount = 0;\n     \
    \   long oddDigitCount = 0;\n        long[] digits = new long[numDigits];\n  \
    \      foreach (char c in num.ToString()) {\n            digits[(int)c - 48]++;\n\
    \        }\n        Array.Sort(digits);\n        for (int i = 0; i < numDigits\
    \ - 1; i++) {\n            if (digits[i] % 2 == 0) {\n                evenDigitCount++;\n\
    \            } else {\n                oddDigitCount++;\n            }\n     \
    \   }\n        return Tuple.Create(evenDigitCount, oddDigitCount);", "       \
    \ var evenCount = 0;\n        var oddCount = 0;\n\n        long tmp;\n       \
    \ while (true) {\n            tmp = num % 10;\n            if (tmp == 0)\n   \
    \             break;\n\n            if (tmp % 2 == 0)\n                evenCount++;\n\
    \            else\n                oddCount++;\n            num /= 10;\n     \
    \   }\n        return Tuple.Create(evenCount, oddCount);", "        var even =\
    \ 0;\n        var odd = 0;\n\n        var num = Math.Abs(num);\n        // We\
    \ need to divide by 10 to get the right digit.\n        // 10^0 = 1 which is even\n\
    \        // 10^1 = 2 which is odd\n        var ten = Math.Pow(10, (num % 10));\n\
    \        num = num / 10;\n        while (true) {\n            // The digits after\
    \ dividing by 10 will always be 0, 1, 2, ... 9.\n            // We only care about\
    \ the odd digits. So if we get 0, we increment the\n            // even counter.\
    \ Otherwise, we increment the odd counter.\n            while (num != 0) {\n \
    \               even = even * 10 + num % 10;\n                num = num / 10;\n\
    \            }\n            if (even % 2 == 0) {\n                // Increment\
    \ the even counter.\n                even++;\n            } else {\n         \
    \       // Increment the odd counter.\n                odd++;\n            }\n\
    \            // Exit the loop.\n            if (num == 0) {\n                break;\n\
    \            }\n            num = Math.Pow(10, (num % 10));\n        }\n     \
    \   // Return the tuple.\n        return new Tuple<long, long>(even, odd);", " \
    \       Debug.Assert(num >= 0, \"Non-negative number required.\");\n\n       \
    \ var ans = new Tuple<long, long>(0,0);\n        do {\n            ans = (ans.Item1\
    \ += num % 2 == 0 ? 1 : 0, ans.Item2 += num % 2 == 1 ? 1 : 0);\n            num\
    \ = (long)Math.Abs(num >> 1);\n        } while (num > 0);\n\n        return ans;",
  "        // Use Linq\n        long totalCount = long.Parse(\n            (new BigInteger(num.ToString()))\n\
    \                .ToString()\n                .Where(x => x % 2 == 0)\n      \
    \          .Count()\n        );\n        return Tuple.Create(totalCount, num.ToString().Where(x\
    \ => x % 2 == 0).Count());", "        long evenCount = 0, oddCount = 0, dividend\
    \ = 1;\n        while (dividend > 0) {\n            dividend /= 10;\n        \
    \    evenCount++;\n        }\n        while (dividend >= 1) {\n            dividend\
    \ /= 10;\n            oddCount++;\n        }\n        return new Tuple<long, long>(evenCount,\
    \ oddCount);", "        if (num == 0 || num < 0)\n            return Tuple.Create(0,\
    \ 0);\n        if (num % 2 == 0)\n            return Tuple.Create(1, 1);\n   \
    \     var count = 1;\n        var div = num / 2;\n        while (div > 1) {\n\
    \            if (num % div == 0)\n                count++;\n            div =\
    \ div / 2;\n        }\n        return Tuple.Create(count, 1);", "        // Only\
    \ do odd counts\n        if (num < 0)\n            return Tuple.Create(0L, -1L);\n\
    \n        long evenCount = 0, oddCount = 1, remainder;\n\n        while (num >\
    \ 0) {\n            remainder = num % 10;\n\n            if (remainder == 0)\n\
    \                evenCount++;\n            else\n                oddCount++;\n\
    \n            num /= 10;\n        }\n\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        // TODO: write your code in here\n        long even, odd;\n\
    \        even = 0;\n        odd = 0;\n        long temp = num;\n        while\
    \ (temp > 0) {\n            temp /= 10;\n            even++;\n        }\n    \
    \    while (temp > 0) {\n            temp /= 10;\n            odd++;\n       \
    \ }\n        return Tuple.Create(even, odd);", "        if (num < 0) {\n     \
    \       throw new ArgumentOutOfRangeException(\"num\");\n        }\n        long\
    \ numAsLong = num;\n\n        // Count the number of even and odd digits\n   \
    \     long oddCount = 0;\n        long evenCount = 0;\n        while (numAsLong\
    \ != 0) {\n            int digit = (int)numAsLong % 10;\n            numAsLong\
    \ = (numAsLong - digit) / 10;\n            if (digit % 2 == 0) {\n           \
    \     evenCount++;\n            } else {\n                oddCount++;\n      \
    \      }\n        }\n\n        // Return a tuple that has the number of even and\
    \ odd digits respectively\n        return Tuple.Create(evenCount, oddCount);",
  "        if (num < 0)\n            return null;\n        var odd = num % 10;\n \
    \       if (odd % 2 == 1)\n            return (odd, 1);\n        else\n      \
    \      return (odd, 1);", "        long evenDigits = 0;\n        long oddDigits\
    \ = 0;\n        while (true) {\n            long digit = num % 10;\n         \
    \   num = (num / 10).Value;\n            if (digit == 0)\n                break;\n\
    \            else if (digit % 2 == 0)\n                evenDigits++;\n       \
    \     else\n                oddDigits++;\n        }\n        return Tuple.Create(evenDigits,\
    \ oddDigits);", "        long even = 0, odd = 0;\n        long dividend = 1;\n\
    \        long temp = 0;\n        for (int i = 1; i <= num; i++) {\n          \
    \  temp = dividend;\n            while (temp != 0) {\n                if (num\
    \ % temp == 0) even++;\n                temp = temp / 10;\n            }\n   \
    \         temp = dividend;\n            while (temp != 0) {\n                if\
    \ (num % temp == 0) odd++;\n                temp = temp / 10;\n            }\n\
    \            dividend = num / i;\n        }\n        return new Tuple<long, long>(even,\
    \ odd);", "        var even = num / 10;\n        var odd = num % 10;\n       \
    \ return Tuple.Create(even, odd);", "        long odd = 0;\n        long even\
    \ = 0;\n        if (num < 0) return new Tuple<long, long>(odd, even);\n      \
    \  while (true) {\n            long remainder = num % 10;\n            num = num\
    \ / 10;\n            if (remainder == 0) break;\n            if (remainder % 2\
    \ != 0) even++;\n            else odd++;\n        }\n        return new Tuple<long,\
    \ long>(odd, even);", '        return EvenOddCountHelper(num, 0, 0).Item1;', " \
    \       long result = 0;\n        for (int i = 0; i < 10; i++) {\n           \
    \ if (num % 10 == i) result += num / 10 % 2 == 0 ? 1 : 2;\n            num /=\
    \ 10;\n        }\n        if (num != 0) {\n            return new Tuple<long,\
    \ long>(result, num % 10 == 0 ? 1 : 2);\n        }\n        return new Tuple<long,\
    \ long>(result, 1);", "        long evens = 0;\n        long odds = 0;\n     \
    \   long digit;\n\n        while (num !=0) {\n            digit = num % 10;\n\
    \            num = num / 10;\n            if (digit%2 == 0)\n                evens++;\n\
    \            else\n                odds++;\n        }\n\n        return Tuple.Create(evens,\
    \ odds);", "        Debug.Assert(num >= 0);\n        long even = 0;\n        long\
    \ odd = 0;\n        long temp = num;\n        while (temp >= 1) {\n          \
    \  temp -= 1;\n            if (num % temp == 0) {\n                even++;\n \
    \           }\n            else\n                odd++;\n        }\n        return\
    \ new Tuple<long, long>(even, odd);", "        if (num < 0) {\n            throw\
    \ new ArgumentException(\"num cannot be less than zero!\");\n        }\n     \
    \   long odd = 0, even = 0;\n        long temp = num;\n        while (temp !=\
    \ 0) {\n            long lastDigit = temp % 10;\n            if (lastDigit % 2\
    \ == 0) {\n                even++;\n            }\n            else {\n      \
    \          odd++;\n            }\n            temp /= 10;\n        }\n       \
    \ return Tuple.Create(even, odd);", "        var list = new List<long> { num };\n\
    \        long even = 0;\n        long odd = 0;\n        long digit = 0;\n    \
    \    while (list.Any()) {\n            digit = list[0];\n            list.RemoveAt(0);\n\
    \            if (digit % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n        return Tuple.Create(even,\
    \ odd);", "        long result = EvenOddCount(num, 0);\n        return Tuple.Create(result.Item1,\
    \ result.Item2);", "        long even = 0;\n        long odd = 0;\n        while\
    \ (true) {\n            if (num % 2 == 0) {\n                even++;\n       \
    \         num /= 2;\n            } else {\n                odd++;\n          \
    \      num /= 2;\n            }\n            if (num < 1) {\n                break;\n\
    \            }\n        }\n        return Tuple.Create(even, odd);", "       \
    \ long oddDigits = 0;\n        long evenDigits = 0;\n        long remainder =\
    \ num;\n        while (remainder > 0) {\n            long digit = remainder %\
    \ 10;\n            evenDigits++;\n            remainder = remainder / 10;\n  \
    \          if (digit % 2 != 0) {\n                oddDigits++;\n            }\n\
    \        }\n        return Tuple.Create(evenDigits, oddDigits);", "        long\
    \ even = 0, odd = 0, temp;\n        long max = (long.MinValue + 1);\n        \n\
    \        // Check for negative numbers in all 3 cases :\n        if (num < 0)\n\
    \            throw new ArgumentException(\"Input must be nonnegative\", \"num\"\
    );\n        if (num == 0)\n            return (Tuple.Create(0, 0));\n        if\
    \ (num > max)\n            throw new ArgumentException(\"Input value must be less\
    \ than \" + max, \"num\");\n        \n        while (true) {\n            temp\
    \ = num % 10;\n            if (temp % 2 == 0)\n                even += temp;\n\
    \            else\n                odd += temp;\n            // If num is divisible\
    \ by 10, increment num\n            // and break the loop\n            if (num\
    \ / 10 == 0)\n                break;\n            num = num / 10;\n        }\n\
    \        // Check if num is non-zero and greater than the max value \n       \
    \ // to avoid error while returning\n        if (num != 0)\n            return\
    \ (Tuple.Create(even, odd));\n        else\n            return (Tuple.Create(even,\
    \ odd));", "        List<long> digits = new List<long>();\n        long remainder;\n\
    \        int count = 0;\n        while (num > 0) {\n            remainder = num\
    \ % 10;\n            digits.Add(remainder);\n            num /= 10;\n        \
    \    count++;\n        }\n        long evenCount = 0;\n        long oddCount =\
    \ 0;\n        digits.Sort();\n        foreach (var digit in digits) {\n      \
    \      if (digit % 2 == 0) {\n                evenCount++;\n            } else\
    \ {\n                oddCount++;\n            }\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        int n = num;\n        var Even = 0;\n        var Odd =\
    \ 1;\n        while (n > 0) {\n            n /= 10;\n            Even++;\n   \
    \     }\n        while (n > 1) {\n            n /= 10;\n            Odd++;\n \
    \       }\n        return Tuple.Create(Even, Odd);", "        var result = new\
    \ Tuple<long, long>(0);\n        var n = num;\n        while (n > 0) {\n     \
    \       var digit = n % 10;\n            if (digit % 2 == 0)\n               \
    \ result.Item1 += 1;\n            if (digit % 2 != 0)\n                result.Item2\
    \ += 1;\n            n /= 10;\n        }\n        return result;", "        long\
    \ Even = 0, Odd = 0, LastDigit = num;\n        while (LastDigit > 0) {\n     \
    \       Even++;\n            LastDigit /= 10;\n        }\n        while (Even)\
    \ {\n            Odd++;\n            Even--;\n        }\n        if (num > 0)\n\
    \            return (Tuple.Create(Even, Odd));\n        else \n            return\
    \ (Tuple.Create(Even, Odd + 1));", "        Debug.Assert(num < 0);\n        var\
    \ result = (long, long) new Tuple<long, long>(1L, 1L);\n        if (num == 0)\n\
    \            return result;\n        long even = 0;\n        long odd = 1;\n \
    \       long remainder = 0;\n        while (true) {\n            remainder = num\
    \ % 10;\n            num = num / 10;\n            if (remainder == 0)\n      \
    \          break;\n            even++;\n            if (remainder % 2 == 1)\n\
    \                odd++;\n        }\n        result = new Tuple<long, long>(even,\
    \ odd);\n        return result;", "        // Store the count of even digits\n\
    \        long evenCount = 0;\n        // Store the count of odd digits\n     \
    \   long oddCount = 0;\n        // Use 'mod' for counting digits of even and odd\
    \ parts\n        while (num /= 10) {\n            num %= 10;\n            if (num\
    \ % 2 == 0) {\n                evenCount++;\n            }\n            else {\n\
    \                oddCount++;\n            }\n        }\n        // Return a tuple\n\
    \        return Tuple.Create(evenCount, oddCount);", "        if (num == 0)\n\
    \            return new Tuple<long, long>(1L, 1L);\n        long digit = 0;\n\
    \        long oddDigit = 0;\n        long evenDigit = 0;\n        do {\n     \
    \       if (num >= 0) {\n                digit = num % 10;\n                if\
    \ (digit % 2 == 0)\n                    evenDigit++;\n                else\n \
    \                   oddDigit++;\n            }\n            num = (num / 10);\n\
    \        } while (num > 0);\n        return Tuple.Create(evenDigit, oddDigit);",
  "        var digits = num.ToString().Select(c => c - '0').ToArray();\n        var\
    \ countEven = digits.Where(d => d % 2 == 0).Count();\n        var countOdd = digits.Where(d\
    \ => d % 2 == 1).Count();\n        return Tuple.Create(countEven, countOdd);",
  "        // 1. Use integer division and remainder to find out the even and odd digits\n\
    \        // 2. Use a variable to store count of even digits and count of odd digits\n\
    \        // 3. Use a variable to count the number of digits\n        // 4. Get\
    \ the number of digits in an integer\n        // 5. Divide the number by 10 to\
    \ get the last digit\n        // 6. Repeat steps 2,3,4,5,6,7 and 8 for all the\
    \ digits\n        // 7. Add the even digits count and odd digits count\n     \
    \   // 8. Return the tuple with both values\n        bool isEven = true;\n   \
    \     int evenCount = 0;\n        int oddCount = 0;\n        int digits;\n   \
    \     long temp;\n        long result = 0;\n        while (num > 0) {\n      \
    \      digits = Convert.ToInt32(Math.Floor(Math.Log10(Math.Abs(num)) + 1));\n\
    \            temp = num / Math.Pow(10, digits);\n            isEven = (temp %\
    \ 2 == 0);\n            if (!isEven) {\n                evenCount++;\n       \
    \     }\n            else {\n                oddCount++;\n            }\n    \
    \        temp = num - temp * Math.Pow(10, digits);\n            isEven = (temp\
    \ % 2 == 0);\n            if (!isEven) {\n                evenCount++;\n     \
    \       }\n            else {\n                oddCount++;\n            }\n  \
    \          num -= temp;\n        }\n        result = evenCount * 2 + oddCount;\n\
    \        return Tuple.Create(evenCount, oddCount);", "        if (num == 0) {\n\
    \            return new Tuple<long, long>(1, 1);\n        }\n        // To compute\
    \ even and odd digits, first count the number of digits.\n        int digits =\
    \ (int)Math.Floor(Math.Log10(num) + 1);\n        // To do this, we first compute\
    \ the sum of all digits in the\n        // integer and divide it by 10.\n    \
    \    long sum = (long)num / 10;\n        // Now we subtract the sum from all the\
    \ digits and multiply it\n        // by ten.\n        sum -= sum % 10;\n     \
    \   sum *= 10;\n        // Now we can divide it by ten to get the number of even\
    \ digits.\n        long evens = sum / digits;\n        // Now we divide it by\
    \ ten to get the number of odd digits.\n        long odds = sum % digits;\n  \
    \      return new Tuple<long, long>(evens, odds);", "        if (num == 0)\n \
    \           return new Tuple<long, long>(num, num);\n        long countE = 0,\
    \ countO = 0;\n        int digit = num % 10;\n        while (num >= 10) {\n  \
    \          num /= 10;\n            countO++;\n        }\n        while (num >=\
    \ 1) {\n            num /= 10;\n            countE++;\n        }\n        return\
    \ new Tuple<long, long>(countE, countO);", "        long evens = 0;\n        long\
    \ odds = 0;\n        bool negative = num < 0;\n        if (negative)\n       \
    \     num = -num;\n        BigInteger numAsBigInteger = new BigInteger(num);\n\
    \        BigInteger one = BigInteger.One;\n\n        BigInteger onesAsBigInteger\
    \ = new BigInteger(one);\n        BigInteger two = BigInteger.Two;\n        BigInteger\
    \ twosAsBigInteger = new BigInteger(two);\n\n        BigInteger n = new BigInteger(numAsBigInteger);\n\
    \        while (n != 0) {\n            BigInteger remainder = n % two;\n     \
    \       if (remainder == 0) {\n                evens += 1;\n            }\n  \
    \          else {\n                odds += 1;\n            }\n            n =\
    \ n / two;\n        }\n        if (negative)\n            odds -= 1;\n\n     \
    \   return Tuple.Create(evens, odds);", "        long EvenDigit, OddDigit, LastOddDigit;\n\
    \        long SumOfEvenDigits = 0, SumOfOddDigits = 0;\n        bool EvenDigitPresent\
    \ = false;\n        long Remainder = num;\n        long DigitsLeftToAdd = 10;\n\
    \        while (Remainder >= 10) {\n            EvenDigitPresent = true;\n   \
    \         EvenDigit = Remainder % 10;\n            Remainder = Remainder / 10;\n\
    \            SumOfEvenDigits += EvenDigit;\n            LastOddDigit = Remainder;\n\
    \            OddDigit = Remainder % 10;\n            Remainder = Remainder / 10;\n\
    \            SumOfOddDigits += OddDigit;\n            if (EvenDigitPresent ==\
    \ true) {\n                if (EvenDigit == 0)\n                    EvenDigitPresent\
    \ = (SumOfEvenDigits % 2 == 0);\n                else\n                    EvenDigitPresent\
    \ = (SumOfEvenDigits % 2 == 1);\n            }\n        }\n        if (EvenDigitPresent\
    \ == true) {\n            if (SumOfEvenDigits % 2 == 0)\n                EvenDigitPresent\
    \ = true;\n            else\n                EvenDigitPresent = false;\n     \
    \   }\n        long EvenCount = 0, OddCount = 0;\n        if (EvenDigitPresent\
    \ == true) {\n            EvenCount = SumOfEvenDigits;\n            OddCount =\
    \ SumOfOddDigits - EvenCount;\n        }\n        else\n            OddCount =\
    \ SumOfOddDigits;\n        return Tuple.Create(EvenCount, OddCount);", '        //
    Solution here', "        Debug.Assert(num >= 0);\n        Debug.Assert(num % 2\
    \ == 0);\n        int numDigits = (int) Math.Floor(Math.Log10(num));\n       \
    \ long evenCount = 0;\n        long oddCount = 0;\n        for (int i = 0; i <\
    \ numDigits; i++) {\n            if (num % 2 == 0) {\n                evenCount++;\n\
    \            }\n            num /= 2;\n        }\n        if (num % 2 != 0) {\n\
    \            oddCount++;\n        }\n        return Tuple.Create(evenCount, oddCount);",
  "        if (num < 0) {\n            throw new ArgumentOutOfRangeException(\"num\"\
    );\n        }\n        long evenCount = 0;\n        long oddCount = 0;\n     \
    \   foreach (var digit in num.ToString().ToCharArray()) {\n            if (digit\
    \ != '0') {\n                oddCount++;\n            } else {\n             \
    \   evenCount++;\n            }\n        }\n        return new Tuple<long, long>(evenCount,\
    \ oddCount);", "        long[] arr = num.ToString(2).ToLower().Replace(\"-\",\
    \ \"\").Select(x => long.Parse(x, NumberStyles.Integer, CultureInfo.InvariantCulture)).ToArray();\n\
    \        long even = arr.Where(a => a % 2 == 0).Sum();\n        long odd = arr.Where(a\
    \ => a % 2 != 0).Sum();\n        return new Tuple<long, long>(even, odd);", " \
    \       int low = 1;\n        int high = num.ToString().Length;\n        while\
    \ (high > low) {\n            int mid = (low + high) / 2;\n            int count\
    \ = 0;\n            int even = 0;\n            int odd = 0;\n            int sumEven\
    \ = 0;\n            int sumOdd = 0;\n            foreach (char c in num.ToString()[mid])\
    \ {\n                if (c < '0' || c > '9') {\n                    count++;\n\
    \                } else {\n                    int num = c - '0';\n          \
    \          even = even + (num / 2);\n                    odd = odd + (num % 2);\n\
    \                    sumEven = sumEven + even;\n                    sumOdd = sumOdd\
    \ + odd;\n                    count++;\n                }\n            }\n   \
    \         if (count % 2 == 0) {\n                if (sumEven > sumOdd) {\n   \
    \                 high = mid;\n                } else {\n                    low\
    \ = mid + 1;\n                }\n            } else {\n                if (sumOdd\
    \ > sumEven) {\n                    high = mid;\n                } else {\n  \
    \                  low = mid + 1;\n                }\n            }\n        }\n\
    \        return Tuple.Create(low, (high));", "        if (num == 0) {\n      \
    \      return new Tuple<long, long>(1L, 1L);\n        }\n\n        long temp =\
    \ 1;\n        long odds = 0;\n        long evens = 0;\n\n        while (temp !=\
    \ 0) {\n            temp = (num / 10) * temp;\n            odds = odds + temp\
    \ % 2 == 0 ? odds + 1 : odds;\n            evens = evens + temp % 2 == 0 ? evens\
    \ + 1 : evens;\n        }\n\n        return new Tuple<long, long>(odds, evens);",
  "        long sum = 0;\n        long odd = 0, even = 1;\n        long n = num;\n\
    \n        do {\n            if (n >= 10)\n            {\n                sum +=\
    \ n % 10;\n                n /= 10;\n            }\n            else\n       \
    \     {\n                sum += n;\n                n /= 10;\n            }\n\
    \        } while (n != 0);\n\n        n = num;\n        do {\n            if (n\
    \ >= 10)\n            {\n                odd += n % 10;\n                n /=\
    \ 10;\n            }\n            else\n            {\n                even +=\
    \ n;\n                n /= 10;\n            }\n        } while (n != 0);\n\n \
    \       return new Tuple<long, long>(even, odd);", "        // get all digits\
    \ of num.\n        IEnumerable<long> digits = Enumerable.Range(0, Math.Abs(num)).Select(i\
    \ => (num / i) % 10);\n        // get the count of even digits.\n        long\
    \ evenCount = digits.Count(i => i % 2 == 0);\n        // get the count of odd\
    \ digits.\n        long oddCount = digits.Count(i => i % 2 != 0);\n        //\
    \ return tuple.\n        return new Tuple<long, long>(evenCount, oddCount);",
  "        int evenCount = 0;\n        int oddCount = 0;\n        while (num /= 10)\n\
    \        {\n            num %= 10;\n            if (num % 2 == 0)\n          \
    \  {\n                evenCount++;\n            }\n            else\n        \
    \    {\n                oddCount++;\n            }\n        }\n        if (evenCount\
    \ == oddCount)\n        {\n            return Tuple.Create(evenCount, evenCount);\n\
    \        }\n        else\n        {\n            return Tuple.Create(oddCount,\
    \ evenCount);\n        }", "        var result = new List<long>();\n        long\
    \ remainder = num;\n        while (remainder > 0) {\n            remainder = (remainder\
    \ % 10);\n            if (remainder % 2 == 0) {\n                result.Add(remainder);\n\
    \            }\n        }\n        return new Tuple<long, long>(result.Count(),\
    \ result.Count - result.Count());", "        var result = (new long[] { 0, 0 }).ToArray();\n\
    \        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++)\
    \ {\n                if (num % 1000000000L % 10L % 10L == num) {\n           \
    \         result[i] += 1;\n                }\n            }\n        }\n     \
    \   return (new Tuple<long, long>(result[0], result[1]));", "        long total\
    \ = 0;\n        while (num != 0) {\n            long digit = num % 10;\n     \
    \       total += digit * digit * digit;\n            num = (num - digit) / 10;\n\
    \        }\n        long evenTotal = 0;\n        while (total != 0) {\n      \
    \      long digit = total % 10;\n            evenTotal += digit * digit;\n   \
    \         total = (total - digit) / 10;\n        }\n        return new Tuple<long,\
    \ long>(evenTotal, total - evenTotal);", "        long evenDigits = 0;\n     \
    \   long oddDigits = 0;\n\n        long m = num;\n        while (m != 0) {\n \
    \           if (m % 2 == 0)\n                evenDigits++;\n            else\n\
    \                oddDigits++;\n            m /= 10;\n        }\n\n        // If\
    \ there is only 1 digit, then\n        // return only 1 tuple with 1 digit\n \
    \       if (num < 0)\n            return new Tuple<long, long>(oddDigits, 1);\n\
    \        else\n            return new Tuple<long, long>(evenDigits, oddDigits);",
  "        Debug.Assert(num > 0);\n\n        // Initialize count for each digit to\
    \ zero\n        long evenCount = 0;\n        long oddCount = 0;\n\n        //\
    \ Convert number to string\n        string temp = num.ToString();\n\n        //\
    \ Loop through characters in string\n        foreach (char c in temp) {\n\n  \
    \          // Get the ASCII value of the character\n            int ascii = (int)c;\n\
    \n            // If it's an even digit, increase count by one\n            if\
    \ (ascii % 2 == 0) {\n                evenCount++;\n            }\n          \
    \  // If it's an odd digit, decrease count by one\n            else {\n      \
    \          oddCount--;\n            }\n        }\n\n        // Return result\n\
    \        return Tuple.Create(evenCount, oddCount);", "        long oddSum = 0,\
    \ evenSum = 0;\n\n        for (int i = 0; i <= num; i++) {\n            bool isOdd\
    \ = i % 2 == 1;\n            long digit = num / Math.Pow(10, i);\n           \
    \ if (isOdd) {\n                oddSum += digit;\n            } else {\n     \
    \           evenSum += digit;\n            }\n        }\n\n        return Tuple.Create(evenSum,\
    \ oddSum);", "        long countEven = 0;\n        long countOdd = 0;\n      \
    \  if (num > 0) {\n            int digit = 0;\n            while (num > 0) {\n\
    \                digit = (num % 10);\n                num = (num / 10).ToLong();\n\
    \                if (digit % 2 == 0) {\n                    countEven++;\n   \
    \             } else {\n                    countOdd++;\n                }\n \
    \           }\n        }\n        return Tuple.Create(countEven, countOdd);",
  "        // This is an extremely simple and inefficient solution that is just for\
    \ the purposes of demonstration\n        long evenCount = 0, oddCount = 0;\n \
    \       long tmp;\n        for (int i = 0; i < num.ToString().Length; i++) {\n\
    \            tmp = num % 10;\n            evenCount += (tmp / 2);\n          \
    \  oddCount += (tmp / 2);\n            num /= 10;\n        }\n        return new\
    \ Tuple<long, long>(evenCount, oddCount);", "        var evenCount = new List<long>();\n\
    \        var oddCount = new List<long>();\n        var remainder = num % 10;\n\
    \        while (remainder > 0) {\n            evenCount.Add(remainder);\n    \
    \        remainder = num % 10;\n        }\n        while (remainder < 0) {\n \
    \           oddCount.Add(remainder);\n            remainder = num % 10;\n    \
    \    }\n        return new Tuple<long, long>(evenCount.Count, oddCount.Count);",
  "        var x = BigInteger.Parse(num.ToString(), System.Globalization.NumberStyles.Integer);\n\
    \        var evenCount = (int)x.Mod(BigInteger.Two);\n        var oddCount = x.CompareTo(BigInteger.Zero);\n\
    \        return new Tuple<long, long>(evenCount, oddCount);", "        if (num\
    \ == 0) {\n            return Tuple.Create(0L, 0L);\n        }\n        long even\
    \ = 0;\n        long odd = 0;\n        long factor = 1;\n        while (factor\
    \ < num) {\n            even = num / factor;\n            odd = num % factor;\n\
    \            factor += 1;\n        }\n        return Tuple.Create(even, odd);",
  "        // Count even digits: num / 10\n        // Divide by 10 to get the remaining\
    \ digits.\n        var evenDigits = num / 10;\n\n        // Count odd digits:\
    \ num % 10\n        // Divide by 10 to get the remaining digits.\n        var\
    \ oddDigits = num % 10;\n\n        // Count the number of even digits\n      \
    \  var evenCount = (long) Math.Ceiling(Math.Log10(evenDigits));\n\n        //\
    \ Count the number of odd digits\n        var oddCount = (long) Math.Ceiling(Math.Log10(oddDigits));\n\
    \n        // Return the tuple\n        return Tuple.Create(evenCount, oddCount);",
  "        if (num < 0) {\n            return new Tuple<long, long>(1L, 1L);\n   \
    \     }\n\n        // count odd and even\n        long evenCount = 0;\n      \
    \  long oddCount = 0;\n\n        while (true) {\n            long temp = num %\
    \ 10;\n            if (temp == 0) {\n                return new Tuple<long, long>(oddCount,\
    \ evenCount);\n            }\n            if (temp % 2 == 0) {\n             \
    \   evenCount++;\n            } else {\n                oddCount++;\n        \
    \    }\n\n            num = num / 10;\n        }", "        var evenDigitsCount\
    \ = (int) num / Math.Pow(10, (num % 10).Count());\n        var oddDigitsCount\
    \ = (int) num / Math.Pow(10, (num % 10).Count() - 1);\n\n        if (oddDigitsCount\
    \ > 9)\n        {\n            oddDigitsCount %= 10;\n        }\n\n        return\
    \ Tuple.Create(evenDigitsCount, oddDigitsCount);", "        // Create a Tuple\
    \ with a default value. \n        var evenNum = new Tuple<long, long>(long.MinValue,\
    \ long.MinValue);\n        var oddNum = new Tuple<long, long>(long.MaxValue, long.MaxValue);\n\
    \n        // Get all numbers between zero and num inclusive that are\n       \
    \ // evenly divisible.\n        var evenDigits = GetEvenDigits(num);\n\n     \
    \   // Get all numbers between zero and num inclusive that are\n        // oddily\
    \ divisible.\n        var oddDigits = GetOddDigits(num);\n\n        // Iterate\
    \ through all the even numbers and check if they are divisible by 2. \n      \
    \  foreach (var even in evenDigits) {\n            if (even % 2 == 0) {\n    \
    \            // If they are, add them to the even tuple.\n                evenNum.Item1\
    \ += even;\n            }\n        }\n\n        // Iterate through all the odd\
    \ numbers and check if they are divisible by 2.\n        foreach (var odd in oddDigits)\
    \ {\n            if (odd % 2 == 0) {\n                // If they are, add them\
    \ to the odd tuple.\n                oddNum.Item1 += odd;\n            }\n   \
    \     }\n\n        return evenNum.Item1 == long.MaxValue ? oddNum.Item2 : evenNum.Item1;",
  "        // Step 1: count the number of digits in num\n        int maxDigitsInNum\
    \ = num.GetDigits().Length;\n        // Step 2: count the number of even digits\n\
    \        int evenDigitCount = 0;\n        int oddDigitCount = 0;\n        foreach\
    \ (var digit in num.GetDigits().Reverse()) {\n            // Step 3: if the current\
    \ digit is even, increment the even digit count and decrement the odd digit count\n\
    \            if (digit % 2 == 0) {\n                evenDigitCount++;\n      \
    \          oddDigitCount--;\n            } else {\n                evenDigitCount--;\n\
    \                oddDigitCount++;\n            }\n            // Step 4: if the\
    \ even and odd digit count are equal, then num is even\n            if (evenDigitCount\
    \ == oddDigitCount) {\n                evenDigitCount++;\n                break;\n\
    \            }\n        }\n        return Tuple.Create(evenDigitCount, oddDigitCount);",
  "        long n = num;\n        long evenCount = 0;\n        long oddCount = 0;\n\
    \        long sumOfEvens = 0;\n        long sumOfOdds = 0;\n        while (n >\
    \ 0)\n        {\n            if (n % 2 == 0)\n            {\n                evenCount++;\n\
    \            }\n            else\n            {\n                oddCount++;\n\
    \            }\n            n = n / 10;\n        }\n        sumOfEvens = (long)\
    \ Math.Ceiling((double) evenCount * 0.1);\n        sumOfOdds = (long) Math.Ceiling((double)\
    \ oddCount * 0.1);\n        if (sumOfEvens == 0 && sumOfOdds == 0)\n        {\n\
    \            sumOfEvens = 1;\n            sumOfOdds = 1;\n        }\n        return\
    \ new Tuple<long, long>(sumOfEvens, sumOfOdds);", "        if (num < 0)\n    \
    \        return null;\n        var evenDigits = 0;\n        var oddDigits = 0;\n\
    \        var str = num.ToString();\n        var startIndex = 0;\n        var endIndex\
    \ = str.Length;\n        while (startIndex < endIndex) {\n            while (startIndex\
    \ < endIndex && char.IsDigit(str[startIndex]))\n                startIndex++;\n\
    \            while (startIndex < endIndex && char.IsDigit(str[endIndex]))\n  \
    \              endIndex--;\n            var digit = int.Parse(str.Substring(startIndex,\
    \ endIndex - startIndex));\n            if (digit % 2 == 0) {\n              \
    \  evenDigits++;\n            } else {\n                oddDigits++;\n       \
    \     }\n            startIndex = endIndex;\n        }\n        return new Tuple<long,\
    \ long>(evenDigits, oddDigits);", "        long count = 0;\n        long odd =\
    \ 0;\n        long even = 0;\n\n        for (int i = 0; i < num.Length; i++) {\n\
    \            int digit = num % 10;\n            if (i % 2 == 0 && digit > 0) {\n\
    \                even++;\n                count += digit > 0 ? digit : -digit;\n\
    \            } else if (i % 2 != 0 && digit > 0) {\n                odd++;\n \
    \               count += digit > 0 ? digit : -digit;\n            }\n        \
    \    num = (num - digit) / 10;\n        }\n        return new Tuple<long, long>(count,\
    \ odd);", "        long oddDig = 0, evenDig = 0;\n        while (true) {\n   \
    \         long num = num / 10;\n            if (num == 0) break;\n           \
    \ evenDig += num % 2;\n            num /= 2;\n            oddDig += num % 2;\n\
    \        }\n        return new Tuple<long, long>(evenDig, oddDig);", "       \
    \ if (num < 0)\n            return new Tuple<long, long>((long)0, (long)0);\n\
    \        long even = 0;\n        long odd = 0;\n        while (num != 0) {\n \
    \           even = num % 10;\n            odd += even % 2 == 0 ? 1 : 0;\n    \
    \        num /= 10;\n        }\n        return new Tuple<long, long>(even, odd);",
  "        // your code here\n        var evenDigits = new HashSet<long>();\n    \
    \    var oddDigits = new HashSet<long>();\n        int oddCount = 0;\n       \
    \ int evenCount = 0;\n        bool isNegative = false;\n        if (num < 0) {\n\
    \            isNegative = true;\n            num *= -1;\n        }\n        while\
    \ (num != 0) {\n            var current = num % 10;\n            if (!evenDigits.Contains(current))\
    \ {\n                evenDigits.Add(current);\n                evenCount++;\n\
    \            }\n            num /= 10;\n            if (!oddDigits.Contains(current))\
    \ {\n                oddDigits.Add(current);\n                oddCount++;\n  \
    \          }\n        }\n        return isNegative ? Tuple.Create(evenCount, -oddCount)\
    \ : Tuple.Create(evenCount, oddCount);", "        int count = 0;\n        long\
    \ odd = 1;\n        long even = 1;\n        long oddCount = 0;\n        long evenCount\
    \ = 0;\n        bool isEven = true;\n        long digits = 0;\n        while (num\
    \ != 0) {\n            digits = num % 10;\n            if (isEven) {\n       \
    \         if (digits == 0) {\n                    isEven = false;\n          \
    \      }\n                else {\n                    evenCount += 1;\n      \
    \              even = (even * 10 + digits);\n                }\n            }\n\
    \            else {\n                if (digits != 0) {\n                    oddCount\
    \ += 1;\n                    odd = (odd * 10 + digits);\n                }\n \
    \           }\n            num = num / 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        long evens = 0;\n        long odds = 0;\n        long\
    \ temp = num;\n        while (num > 0) {\n            long digit = num % 10;\n\
    \            num = (num / 10).ToString().Length;\n            if (digit % 2 ==\
    \ 0) {\n                evens += 1;\n            }\n            else {\n     \
    \           odds += 1;\n            }\n        }\n        return new Tuple<long,\
    \ long>(evens, odds);", "        long sum = 0;\n        long oddCount = 0;\n \
    \       long evenCount = 0;\n\n        for (int i = 0; i < num.Length; i++) {\n\
    \            long digit = num % 10;\n            if (i % 2 == 0) {\n         \
    \       sum += digit;\n                evenCount++;\n            }\n         \
    \   else {\n                sum += (10 - digit);\n                oddCount++;\n\
    \            }\n            num /= 10;\n        }\n        return Tuple.Create(evenCount,\
    \ oddCount);", "        var count = num;\n        var evens = 0;\n        var\
    \ odds = 0;\n        while (count > 0) {\n            var digit = count % 10;\n\
    \            if (digit % 2 == 0) {\n                evens++;\n            }\n\
    \            else {\n                odds++;\n            }\n            count\
    \ /= 10;\n        }\n        return Tuple.Create(evens, odds);", "        long\
    \ sum = 0;\n        long even = 0;\n        long odd = 0;\n        while (num\
    \ > 0) {\n            int digit = num % 10;\n            sum += digit;\n     \
    \       if (digit % 2 == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            num /= 10;\n        }\n  \
    \      return Tuple.Create(even, odd);", "        long countEven = 0;\n      \
    \  long countOdd = 0;\n        double count = 0;\n        double digit = num %\
    \ 10;\n        while (digit > 0) {\n            digit = num % 10;\n          \
    \  if (digit % 2 == 0) {\n                countEven++;\n            }\n      \
    \      else {\n                countOdd++;\n            }\n            num = (long)(num\
    \ / 10);\n            count++;\n        }\n        return new Tuple<long, long>(countEven,\
    \ countOdd);", "        long evenCount = 0;\n        long oddCount = 0;\n    \
    \    while(num > 0) {\n            if(num % 2 == 0) {\n                evenCount++;\n\
    \            }\n            else {\n                oddCount++;\n            }\n\
    \            num /= 10;\n        }\n        return new Tuple<long, long>(evenCount,\
    \ oddCount);", "        // Find all even digits\n        var evenDigits = num.ToString().Select(x\
    \ => Convert.ToInt32(x)).Where(x => x % 2 == 0).ToList();\n        // Find all\
    \ odd digits\n        var oddDigits = num.ToString().Select(x => Convert.ToInt32(x)).Where(x\
    \ => x % 2 != 0).ToList();\n        // Find the intersection\n        var intersect\
    \ = new HashSet<int>(evenDigits).Intersect(new HashSet<int>(oddDigits));\n   \
    \     // Find all digits that are even\n        var evenDigitCount = new HashSet<int>(evenDigits);\n\
    \        // Find all digits that are odd\n        var oddDigitCount = new HashSet<int>(oddDigits);\n\
    \        // Return the tuple\n        return new Tuple<long, long>(evenDigitCount.Count,\
    \ oddDigitCount.Count);", "        // Initialize our variables here\n        long\
    \ evenCount = 0;\n        long oddCount = 0;\n        // If num is negative, then\
    \ negate it\n        if (num < 0) {\n            num = -num;\n        }\n    \
    \    // Count the number of even and odd digits in the integer\n        while\
    \ (num > 0) {\n            long digit = num % 10;\n            num /= 10;\n  \
    \          if (digit % 2 == 0) {\n                evenCount++;\n            }\n\
    \            else {\n                oddCount++;\n            }\n        }\n \
    \       // If the number is even, then return 1\n        if (evenCount == 0) {\n\
    \            return new Tuple<long, long>(1L, 1L);\n        }\n        // If the\
    \ number is odd, then return 2\n        if (oddCount == 0) {\n            return\
    \ new Tuple<long, long>(1L, 2L);\n        }\n        // Otherwise return the tuple\
    \ with both counts\n        return new Tuple<long, long>(evenCount, oddCount);",
  "        long even = num / 10;\n        long odd = num - (even * 10);\n        return\
    \ (new Tuple<long, long>(even, odd));", "        long odd = 0;\n        long even\
    \ = 0;\n        while (true) {\n            long remain = num % 10;\n        \
    \    num /= 10;\n            if (remain % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            if (num\
    \ == 0) {\n                break;\n            }\n        }\n        return new\
    \ Tuple<long, long>(even, odd);", "        var digits = BitConverter.GetBytes(num);\n\
    \        var evenDigits = digits.Where((x, i) => i % 2 == 0).ToList();\n     \
    \   var oddDigits = digits.Where((x, i) => i % 2 == 1).ToList();\n\n        return\
    \ Tuple.Create(evenDigits.Count, oddDigits.Count);"]
stop_tokens:
- "\n    }\n"
