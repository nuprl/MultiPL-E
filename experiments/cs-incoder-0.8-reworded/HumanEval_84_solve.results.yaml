language: cs
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var sum = 0;\n        var binaryNumbers\
    \ = SolveHelper(N, out sum);\n        var result = string.Empty;\n        foreach\
    \ (var binaryNumber in binaryNumbers)\n        {\n            result += binaryNumber;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3kyulri5.cs(24,29): error CS0103: The name ''SolveHelper'' does not exist
    in the current context

    '
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long s = N;\n        long result = 1;\n\
    \        while (s > 0) {\n            long rem = s % 2;\n            s = s / 2;\n\
    \            result *= rem;\n        }\n        return Convert.ToString(result);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8442b6f0a8246b0bea3d1cdc2292b04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8442b6f0a8246b0bea3d1cdc2292b04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Convert N into a string with leading\
    \ zeros.\n        string N = Convert.ToString(N);\n        long total = 0;\n \
    \       foreach(char c in N) {\n            total = total + (long)Math.Pow(2,\
    \ (int)c);\n        }\n        string S;\n        if(total > 0) {\n          \
    \  S = Convert.ToString(total);\n        }\n        else {\n            S = \"\
    1\";\n        }\n        return S;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_qaadh0i.cs(24,16): error CS0136: A local or parameter named ''N'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp_qaadh0i.cs(24,37): error CS0165: Use of unassigned local variable ''N''

    '
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = \"\";\n        if (N\
    \ < 1 || N > 10000) {\n            throw new ArgumentOutOfRangeException(\"N\"\
    );\n        }\n        do {\n            N = N / 10;\n            binary = Convert.ToString(N,\
    \ 2) + binary;\n        } while (N > 0);\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3687bedeb744ef490d8e5f790c48204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3687bedeb744ef490d8e5f790c48204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long max = (long)Math.Pow(2, 32);\n \
    \       return Solve(N, max);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbcnfanvg.cs(24,16): error CS1501: No overload for method ''Solve'' takes
    2 arguments

    '
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n\n        for\
    \ (int i = 1; i <= N; i++) {\n            result += Convert.ToString(i % 2);\n\
    \        }\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1e253b17db8486a98ace8f5ec70d55f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1e253b17db8486a98ace8f5ec70d55f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n\n        // Convert\
    \ number to a string first\n        string digits = Convert.ToString(N);\n\n \
    \       // Split the string into individual digits\n        char[] digitArray\
    \ = digits.ToCharArray();\n\n        // Loop through the digits\n        foreach\
    \ (char d in digitArray) {\n            // For each digit, convert it to binary\n\
    \            string binary = Convert.ToString(Convert.ToInt32(d), 2);\n      \
    \      // Keep a running total of the binary digits\n            int sum = 0;\n\
    \            // For each binary digit, add the digit to the running total\n  \
    \          foreach (string digit in binary) {\n                sum += digit.Length;\n\
    \            }\n            // Add the running total to the result\n         \
    \   result += Convert.ToString(sum, 2);\n        }\n\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ellp08t.cs(38,13): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long remainder;\n        string s = \"\
    \";\n        if (N <= 0) return \"0\";\n        for (int i = 0; i < 9; i++) {\n\
    \            remainder = N % 10;\n            s += Convert.ToString(remainder);\n\
    \            N = (int)Math.Floor(N / 10);\n        }\n        return s;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps1ta8w9p.cs(29,27): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        StringBuilder output = new StringBuilder();\n\
    \n        // Initialize an array to store the sum\n        // of its digits\n\
    \        long[] sumDigits = new long[10]; // 10 digits\n        int index = 0;\n\
    \n        // Initialize an array to store the\n        // number of digits in\n\
    \        // each of its digit\n        int digitCount = 0;\n\n        // Iterate\
    \ through each digit\n        // of the number, and\n        // update the sumDigits\
    \ array if\n        // the digit is greater than 0\n        foreach (var digitValue\
    \ in N) {\n            if (digitValue > 0)\n            {\n                sumDigits[index]\
    \ = digitValue;\n                index++;\n            }\n            else\n \
    \           {\n                // Increment the digitCount variable by 1\n   \
    \             // if it is greater than 0\n                if (digitCount > 0)\n\
    \                {\n                    digitCount--;\n                }\n\n \
    \               // Calculate the next digit in the sumDigits\n               \
    \ // array as the quotient of the previous\n                // sum and current\
    \ digit\n                sumDigits[index] = sumDigits[index] / 10 + digitCount\
    \ % 10;\n\n                // Increment index to point to the\n              \
    \  // next digit in sumDigits\n                index++;\n\n                //\
    \ Increment the digitCount variable by 1\n                digitCount = 1;\n  \
    \          }\n        }\n\n        // Iterate through each digit in the\n    \
    \    // sumDigits array, and append it to the\n        // output string\n    \
    \    for (var index = 0; index < sumDigits.Length; index++)\n        {\n     \
    \       // If the current sumDigit has a value greater than\n            // 0,\
    \ append its index and a space\n            if (sumDigits[index] > 0)\n      \
    \      {\n                output.Append((index + 1));\n                output.Append(\"\
    \ \");\n            }\n        }\n\n        // Return the output string with the\
    \ sum of its\n        // digits in binary\n        return output.toString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgle43mqq.cs(39,36): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgle43mqq.cs(71,18): error CS0136: A local or parameter named ''index''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgle43mqq.cs(84,23): error CS1061: ''StringBuilder'' does not contain a
    definition for ''toString'' and no accessible extension method ''toString'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N <= 0)\n            return \"\"\
    ;\n        string bin = Convert.ToString(N, 2);\n        if (bin.Length > 6)\n\
    \            return bin.Substring(0, 6) + \"0\";\n        return bin;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f8de5ed06814a2caef2d2e227e622b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f8de5ed06814a2caef2d2e227e622b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Think about the binary number as a\
    \ bit array, and try to solve this problem by bitwise operations.\n        //\
    \ A bit array is easy to implement as a class with one bit array property and\
    \ one int property that keeps track of how many bits have been set.\n        //\
    \ The bit array is initialized to all zeros and we can simply set the first bit\
    \ to 1.\n        // Then, to find the total sum, we can keep adding binary digits\
    \ to our bit array until we see a zero bit.\n        // To solve this problem,\
    \ simply initialize a binary string as empty string, and keep looping while your\
    \ bit array is not all zeros.\n        // When we see the last bit set to 1, we\
    \ can return the binary string.\n        string result = \"\";\n        while\
    \ (N & 1 == 0) {\n            result = (char)(N & 1) + result;\n            N\
    \ >>= 1;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuu6g2831.cs(30,16): error CS0019: Operator ''&'' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659977238
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0) throw new ArgumentOutOfRangeException();\n\
    \        var result = \"\";\n        var remain = N;\n        while (remain !=\
    \ 0) {\n            int digit = 0;\n            while (remain > 1) digit++;\n\
    \            result = $\"1{result}{digit}\";\n            remain -= digit;\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977243
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Write your code in C# 6.0 with .NET\
    \ 4.5 (Mono)\n        return Solve(N);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N <= 0) {\n            return \"\
    1\";\n        }\n        long[] digits = BigInteger.Pow(10, BigInteger.Log10(N)).ToArray();\n\
    \        int n = digits.Length;\n        StringBuilder sb = new StringBuilder(BigInteger.Log10(N));\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum\
    \ += digits[n - 1 - i] * BigInteger.Pow(2, i);\n        }\n        if (sum < 0)\
    \ {\n            sum *= -1;\n        }\n        foreach (int i in Enumerable.Range(0,\
    \ n)) {\n            if (digits[i] > 0) {\n                sb.Append(Convert.ToString(digits[i],\
    \ 2).PadLeft(8, '0'));\n            }\n        }\n        return string.Join(\"\
    \", sb.ToString().Reverse());\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpagjxejfb.cs(26,44): error CS1503: Argument 2: cannot convert from ''double''
    to ''int''

    /tmp/tmpagjxejfb.cs(28,46): error CS1503: Argument 1: cannot convert from ''double''
    to ''int''

    /tmp/tmpagjxejfb.cs(31,13): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long counter = 0;\n        string s =\
    \ \"\";\n        long power = 1;\n        long lastPower = 1;\n        long sum\
    \ = 0;\n        while (N /= 2) {\n            counter++;\n            power *=\
    \ 2;\n            lastPower = power;\n        }\n        while (counter > 0) {\n\
    \            sum += N % 10;\n            N = (N / 10L);\n            power *=\
    \ 2;\n            lastPower = power;\n            counter--;\n        }\n    \
    \    int pow = (int)Math.Pow(2, (int)Math.Log10(Math.Abs(sum)));\n        string\
    \ result = \"\";\n        for (int i = pow; i > 0; i /= 2) {\n            int\
    \ x = sum / i;\n            result += Convert.ToString(Math.Pow(10, x));\n   \
    \         sum -= x * i;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk2tp4uvb.cs(28,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpk2tp4uvb.cs(43,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpk2tp4uvb.cs(24,16): warning CS0219: The variable ''s'' is assigned but
    its value is never used

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int[] sum = new int[101];\n        int\
    \ digit;\n        long digitCount = 0;\n\n        while (digitCount < N) {\n \
    \           digit = 0;\n            while (N >= 10) {\n                digit +=\
    \ N % 10L;\n                N /= 10L;\n            }\n            sum[digitCount]\
    \ = digit;\n            digitCount++;\n        }\n\n        // Find first sum\
    \ that is 1 more than previous sums\n        int maxDigit = N % 10L;\n       \
    \ foreach (int d in sum) {\n            if (d == maxDigit) {\n               \
    \ Console.WriteLine(\"{0}\", d);\n                return \"1\" + new String(sum);\n\
    \            }\n        }\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkt6bc7vf.cs(30,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkt6bc7vf.cs(38,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkt6bc7vf.cs(42,41): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''char[]''

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string res = new String();\n        long\
    \ sum = 0;\n        string tmp = GetDigits(N, out sum);\n        foreach (char\
    \ c in tmp) {\n            res += Convert.ToString(c, 2);\n        }\n       \
    \ return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz401_031.cs(23,26): error CS1729: ''string'' does not contain a constructor
    that takes 0 arguments

    /tmp/tmpz401_031.cs(25,22): error CS0103: The name ''GetDigits'' does not exist
    in the current context

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Base case\n        if (N == 0) return\
    \ \"0\";\n        string ret = Solve(N, 1);\n        char[] arrRet = ret.ToCharArray();\n\
    \        string resStr = \"\";\n        for (int i = 0; i < arrRet.Length - 1;\
    \ i++) {\n            resStr += Convert.ToString(arrRet[i]).PadLeft(arrRet[i +\
    \ 1].ToString().Length, \"0\");\n        }\n        return resStr;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpho2ojtvo.cs(25,22): error CS1501: No overload for method ''Solve'' takes
    2 arguments

    /tmp/tmpho2ojtvo.cs(29,92): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long total = 0;\n        string solution\
    \ = \"\";\n        while (Math.Abs(N) > 1) {\n            long remainder = N %\
    \ 10;\n            N = N / 10;\n            total = total + remainder;\n     \
    \       if (total > 1) {\n                solution = solution + \"1\" + solution;\n\
    \            } else {\n                solution = solution + \"0\" + solution;\n\
    \            }\n        }\n        solution = solution + string.Format(\"{0:x}\"\
    , N);\n        return solution;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3794476e03a449f7a17435b800ed3cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3794476e03a449f7a17435b800ed3cc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        string binary\
    \ = \"\";\n\n        while (N !=0) {\n            binary = Convert.ToString(N,\
    \ 2);\n            sum += Convert.ToInt64(binary, 2).GetBit(0);\n            N\
    \ = N / 10;\n        }\n\n        return Convert.ToString(sum, 2);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw7ul7c0p.cs(28,47): error CS1061: ''long'' does not contain a definition
    for ''GetBit'' and no accessible extension method ''GetBit'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long N1 = N;\n        while (Math.Floor(N\
    \ / 2) > 0) {\n            N1 = N1 / 2;\n        }\n        return Solve(N1).ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1qo3idds.cs(24,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long remainder = 0;\n        bool done\
    \ = false;\n        string result = \"\";\n        while (!done) {\n         \
    \   remainder = N % (ulong)Math.Pow(2, 64);\n            result = (remainder >=\
    \ Math.Pow(2, 63) ? \"1\" : \"\") + result;\n            N = (long)(N / Math.Pow(2,\
    \ 64));\n            done = N == 0;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps7k4dq3i.cs(27,25): error CS0034: Operator ''%'' is ambiguous on operands
    of type ''long'' and ''ulong''

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long num = 0;\n        string ret = \"\
    \";\n        long sum = 0;\n        long pow = 0;\n        bool done = false;\n\
    \        while (N !=  0) {\n            num = (long)Math.Pow(2, pow);\n      \
    \      pow++;\n            if (N < num) {\n                done = true;\n    \
    \            break;\n            }\n            sum = sum + N % num;\n       \
    \     N = N / num;\n        }\n        ret = ret.ToString() + Convert.ToString(sum);\n\
    \        if (done) {\n            return ret;\n        }\n        return ret.PadLeft(ret.Length\
    \ + 1, \"0\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkz8b138e.cs(42,44): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var s = \"\";\n        if (N <= 0) return\
    \ \"0\";\n        long x = 0;\n        while (N /= 10) {\n            x += (long)Math.Pow(10,\
    \ s.Length - 1);\n            s+= ((int)N%10).ToString();\n            N = (N\
    \ / 10);\n        }\n        x = x + (long)Math.Pow(10, s.Length - 1);\n     \
    \   s+= ((int)N%10).ToString();\n        return s.PadLeft(s.Length + (x.ToString().Length\
    \ + 1), \"0\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiix5ev2s.cs(26,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpiix5ev2s.cs(33,64): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659977238
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = string.Empty;\n     \
    \   // If N is 0, then return \"0\"\n        if (N == 0)\n            return \"\
    0\";\n        // If N is less than 10, then return N\n        if (N <= 9)\n  \
    \          return result.Insert(0, \"0\");\n        // Keep dividing N by 10 until\
    \ less than or equal to 0\n        while (N > 0) {\n            string t = Solve(N\
    \ / 10);\n            result += t;\n            N = N % 10;\n        }\n     \
    \   // Return result\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <410b5a21ab2045879cf80fcbc02f0a23>:0 \n"
  stdout: None
  timestamp: 1659977244
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        return String.Join(\"\", Solve(N).Select(n\
    \ => Convert.ToString(n, 2)));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977244
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var result = new StringBuilder();\n \
    \       var remain = N;\n        while (remain != 0) {\n            result.Append(Convert.ToString(remain,\
    \ 2).PadLeft(8, '0'));\n            remain /= 10;\n        }\n        string s\
    \ = result.ToString().Trim('0');\n        if (s.Length == 0)\n            return\
    \ \"0\";\n        return s;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c72e2766ab8466e862ecd45c209e3ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c72e2766ab8466e862ecd45c209e3ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string resultStr = \"\";\n\n        long\
    \ remainder = N % 2;\n\n        if (remainder == 0) {\n            resultStr =\
    \ resultStr + Convert.ToString(N);\n        }\n        else {\n            resultStr\
    \ = Solve(remainder) + Convert.ToString(N / 2);\n        }\n\n        return resultStr;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <253d62d999e34f45b1dbcbcb7f0de631>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <253d62d999e34f45b1dbcbcb7f0de631>:0 \n"
  stdout: None
  timestamp: 1659977244
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        long count\
    \ = 0;\n        while (N !=0)\n        {\n            long t = N % 10;\n     \
    \       count += t;\n            N /= 10;\n        }\n        long remain = count;\n\
    \        while (remain !=0)\n        {\n            string t = Convert.ToString(remain,2);\n\
    \            s += t;\n            remain -= Convert.ToInt64(t,2);\n        }\n\
    \        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        int bits = (int)Math.Log10(N);\n\
    \        while (N /= 10) {\n            sum += ((int)N % 2 == 1) ? 1 : 0;\n  \
    \          N /= 10;\n        }\n        var str = \"\";\n        foreach (int\
    \ digit in BinaryToDigits(sum, bits)) {\n            str += digit + \" \";\n \
    \       }\n        return str;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl6q_8y1k.cs(25,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpl6q_8y1k.cs(30,31): error CS0103: The name ''BinaryToDigits'' does not
    exist in the current context

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var digitSum = N % 2 == 0 ? 0 : 1;\n\
    \        var count = (int) Math.Ceiling(Math.Log10(N));\n        var sum = new\
    \ StringBuilder(count).Append(\"1\");\n        var bit = N / 2;\n        while\
    \ (count > 0) {\n            var tmp = sum.ToString();\n            sum = new\
    \ StringBuilder(tmp).Append(bit, digitSum);\n            count -= 1;\n       \
    \     bit /= 2;\n        }\n        return sum.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqubfuebi.cs(29,49): error CS1503: Argument 1: cannot convert from ''long''
    to ''char''

    '
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var digits = N % 2 == 0 ? \"0\" : \"\
    1\";\n        var baseLength = Convert.ToInt32(Math.Ceiling(Math.Log(N, 2)));\n\
    \        var binary = new string('0', baseLength);\n        var remainder = N\
    \ - Math.Pow(2, baseLength);\n        var remainderBase = remainder % 2;\n   \
    \     var quotient = Math.Floor(remainder);\n        binary[baseLength - remainderBase]\
    \ = digits[quotient];\n        return binary + Solve(quotient);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2olscgb0.cs(29,16): error CS1503: Argument 1: cannot convert from ''double''
    to ''int''

    /tmp/tmp2olscgb0.cs(29,53): error CS1503: Argument 1: cannot convert from ''double''
    to ''int''

    /tmp/tmp2olscgb0.cs(30,31): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var nums = BinaryToDecimal(N).ToString();\n\
    \        var sum = DecimalToBinary(Convert.ToInt64(nums));\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_92ap41v.cs(23,20): error CS0103: The name ''BinaryToDecimal'' does not
    exist in the current context

    /tmp/tmp_92ap41v.cs(24,19): error CS0103: The name ''DecimalToBinary'' does not
    exist in the current context

    '
  timestamp: 1659977238
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var binary = \"\";\n        var sum =\
    \ N;\n        while (N > 0) {\n            var value = N % 2;\n            binary\
    \ = binary + (char)('0' + value);\n            N = N / 2;\n            sum +=\
    \ value;\n        }\n        return binary;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10fd0a501ac643a291dd9dfcf52b93a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10fd0a501ac643a291dd9dfcf52b93a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        if (N < 0)\
    \ return \"-1\";\n        while (N !== 0) {\n            long div = N / 10;\n\
    \            long remainder = N % 10;\n            s += Convert.ToString(remainder);\n\
    \            N = (long)div;\n        }\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8o6wtfrq.cs(25,20): error CS1525: Invalid expression term ''=''

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        while\
    \ (N >=1) {\n            int remainder = N % 10;\n            result += remainder.ToString();\n\
    \            N /= 10;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph9b2fukc.cs(25,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string res = \"\";\n        if (N < 0)\
    \ {\n            return \"Invalid Input\";\n        }\n        long base = 10;\n\
    \        while (N /= base) {\n            long mod = N % base;\n            res\
    \ = Convert.ToString(mod) + res;\n            N /= base;\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf5n1povn.cs(27,14): error CS1001: Identifier expected

    /tmp/tmpf5n1povn.cs(27,14): error CS1002: ; expected

    '
  timestamp: 1659977238
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        BigInteger n = new BigInteger(N);\n \
    \       StringBuilder res = new StringBuilder();\n        while (n.Remainder(BigInteger.Pow(10,\
    \ res.Count)) != 0) {\n            res.Append(n.Remainder(BigInteger.Pow(10, res.Count)).ToString(\"\
    0\"));\n            n.Divide(10, 0, 1);\n        }\n        res.Append(n.ToString());\n\
    \        return res.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaqdnqq84.cs(25,47): error CS1503: Argument 2: cannot convert from ''method
    group'' to ''int''

    /tmp/tmpaqdnqq84.cs(26,55): error CS1503: Argument 2: cannot convert from ''method
    group'' to ''int''

    /tmp/tmpaqdnqq84.cs(27,15): error CS1501: No overload for method ''Divide'' takes
    3 arguments

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0) return null;\n\n        bool\
    \ isNegative = N < 0;\n        N = Math.Abs(N);\n        long tens = N % 10;\n\
    \        if (tens == 0) return \"0\";\n        if (tens == 1) return \"1\";\n\
    \        bool isNegativeTens = tens < 0;\n        long hundreds = N / 10; // the\
    \ remainder of N after dividing by 10\n        // the remainder of N after dividing\
    \ by 10\n        long hundredsCount = isNegativeTens ? hundreds / 10 : hundreds\
    \ / 10 + 1;\n        long hundredsTens = hundreds / 10;\n        long hundredsTensCount\
    \ = isNegativeTens ? hundredsTens / 10 : hundredsTens / 10 + 1;\n\n        string\
    \ res = \"\";\n        for (int i = 0; i < hundredsCount; i++) {\n           \
    \ res = res + Solve(hundredsTensCount) + Solve(hundreds);\n            hundreds\
    \ = hundreds / 10;\n            hundredsCount = isNegativeTens ? hundreds / 10\
    \ : hundreds / 10 + 1;\n            hundredsTens = hundreds / 10;\n          \
    \  hundredsTensCount = isNegativeTens ? hundredsTens / 10 : hundredsTens / 10\
    \ + 1;\n        }\n\n        if (isNegative) {\n            res = res + Solve(hundredsTensCount)\
    \ + Solve(hundreds);\n        }\n\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a67b99a16b2349bfa8f5d26e30749648>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a67b99a16b2349bfa8f5d26e30749648>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = new StringBuilder();\n\
    \        long sum = 0;\n        decimal decimalN = Math.Truncate(N);\n       \
    \ while (decimalN > 0) {\n            binary += Convert.ToString(decimalN % 2,\
    \ 2);\n            decimal temp = decimalN / 2;\n            decimalN = temp;\n\
    \        }\n        sum = Convert.ToInt64(decimalN);\n        return binary.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqnijow_r.cs(23,25): error CS0029: Cannot implicitly convert type ''System.Text.StringBuilder''
    to ''string''

    /tmp/tmpqnijow_r.cs(25,33): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Truncate(decimal)'' and ''Math.Truncate(double)''

    /tmp/tmpqnijow_r.cs(27,54): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long n = N;\n        string s = \"\"\
    ;\n        while (n > 0) {\n            int digit = n % 2;\n            s = Convert.ToString(digit)\
    \ + s;\n            n = n >> 1;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprkca2hmo.cs(26,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int sum = 0;\n        int i = 1;\n  \
    \      while(i < N) {\n            sum += (N % 2 == 0) ? 0 : 1;\n            N\
    \ /= 2;\n            i++;\n        }\n        while(sum > 0) {\n            Console.WriteLine(Convert.ToString(sum\
    \ % 2, 2));\n            sum /= 2;\n        }\n        return \"\";\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f810f9bc5e064e0290635b3196c34563>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f810f9bc5e064e0290635b3196c34563>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: '1

    1

    1

    1

    1

    1

    1

    1

    1

    1

    '
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        while (N /= 2)\n\
    \        {\n            sum += N % 2;\n            N /= 2;\n        }\n      \
    \  var answer = string.Join(\"\",Enumerable.Range(0,(int)Math.Log10(N)+1).Select(x\
    \ => Convert.ToString(x % 2, 2)).ToArray());\n        answer = answer.Insert(answer.Length-1,\
    \ answer[0].ToString());\n        return answer;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6c7o0k_b.cs(24,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        long factor =\
    \ 1;\n        long remainder = 0;\n\n        while (N > 0) {\n            sum\
    \ = (sum * factor) + remainder;\n            remainder = N % 10;\n           \
    \ N = (long)Math.Pow(10, N) / factor;\n            factor *= 10;\n        }\n\n\
    \        // now sum is in binary!\n        // we need to reverse it back into\
    \ decimal and turn it into a string\n        // to get a final result string.\n\
    \n        long answer = sum;\n        string answerString = Convert.ToString(answer,\
    \ 2).PadLeft(32, '0');\n\n        if (answerString.Length > 32) {\n          \
    \  // we lost some digits!\n            answerString =\n                answerString.Substring(0,\
    \ answerString.Length - 32) + answerString.Substring(answerString.Length - 32);\n\
    \        }\n\n        return answerString;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b62a781f203548188663886ce074e40e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b62a781f203548188663886ce074e40e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string ret = \"\";\n\n        if (N ==\
    \ 0)\n            return \"0\";\n\n        int N = Convert.ToInt32(Math.Floor(Math.Log10(N)));\n\
    \        if (N <= 0) {\n            throw new Exception(\"Negative numbers are\
    \ not allowed\");\n        }\n        if (N == 1)\n            return \"1\";\n\
    \        if (N == 2 || N == 3) {\n            ret = (N % 2 == 0) ? \"11\" : \"\
    10\";\n        }\n        long counter = 0;\n\n        while (N >> 1) {\n    \
    \        counter++;\n            N >>= 1;\n        }\n\n        int half = (N\
    \ - 1) / 2;\n        long k = 0;\n        while (k <= half) {\n            int\
    \ tmp = (N / Math.Pow(2, k)) % 10;\n            ret += (Convert.ToInt32(Math.Pow(2,\
    \ k)) + tmp).ToString();\n            k++;\n        }\n        return ret;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbmrr4ek9.cs(25,13): error CS0841: Cannot use local variable ''N'' before
    it is declared

    /tmp/tmpbmrr4ek9.cs(28,13): error CS0136: A local or parameter named ''N'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpbmrr4ek9.cs(39,16): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    /tmp/tmpbmrr4ek9.cs(47,23): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string res = \"\";\n        long d =\
    \ N;\n        while (d > 0) {\n            res += (d % 2 == 0) ? \"0\" : \"1\"\
    ;\n            d /= 2;\n        }\n        if (res.Length > 1)\n            res\
    \ = \"0\" + res;\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4034ffd40b6b43b6baf631b8934a3a90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4034ffd40b6b43b6baf631b8934a3a90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long num = N;\n        var sum = \"0\"\
    ;\n        long remainder = 0;\n        long quotient = 0;\n        bool isNegative\
    \ = false;\n        if (num < 0) {\n            isNegative = true;\n         \
    \   num = -num;\n        }\n        while (true) {\n            quotient = num\
    \ / 10;\n            if (quotient == 0) {\n                break;\n          \
    \  }\n            remainder = num % 10;\n            sum = sum + remainder.ToString();\n\
    \            num = quotient;\n        }\n        if (isNegative) {\n         \
    \   sum = sum.Substring(0, 1);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <059cbbab8d384df2a60079edf63abb8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <059cbbab8d384df2a60079edf63abb8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string ret = new StringBuilder();\n \
    \       long num = 0;\n        do {\n            num = N % 10;\n            ret.Append(Convert.ToString(num));\n\
    \            N = N / 10;\n        } while (N > 0);\n        return ret;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q36e5hj.cs(23,22): error CS0029: Cannot implicitly convert type ''System.Text.StringBuilder''
    to ''string''

    /tmp/tmp2q36e5hj.cs(27,13): error CS1929: ''string'' does not contain a definition
    for ''Append'' and the best extension method overload ''Queryable.Append<string>(IQueryable<string>,
    string)'' requires a receiver of type ''IQueryable<string>''

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        long pow =\
    \ 1;\n        long remainder = 0;\n        while (true) {\n            if (N <=\
    \ 0)\n                break;\n            pow *= 10;\n            remainder =\
    \ N % pow;\n            s += string.Format(\"{0}\", (int)pow);\n            N\
    \ = N - remainder;\n        }\n        return s;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6c738fdd20c42e6bc413ca635ab1493>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6c738fdd20c42e6bc413ca635ab1493>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Write your code here\n        return\
    \ Solve(N).ToString();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string strNum = \"\";\n        while\
    \ (Math.Abs(N) > 0) {\n            strNum += Convert.ToString(Math.Abs(N%2), 2);\n\
    \            N = N / 2;\n        }\n        return strNum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c2b035f85884002b9a6d869bea6b92b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c2b035f85884002b9a6d869bea6b92b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        int n = N;\n\
    \        while ((n / 10) > 0) {\n            s += (n % 10).ToString();\n     \
    \       n = n / 10;\n        }\n        return s;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptzppa81x.cs(24,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long[] arr = new long[Math.Abs(N)];\n\
    \        for (int i = 0; i < Math.Abs(N); i++)\n            arr[i] = (N & (1L\
    \ << i)) != 0;\n        return string.Join(\"\", arr.Select(d => (char)(d + '1').ToString()).ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprse8uu2w.cs(25,22): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmprse8uu2w.cs(26,48): error CS0030: Cannot convert type ''string'' to ''char''

    '
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long total = 0;\n        while (N !=0)\n\
    \        {\n            int x = N % 10;\n            total = x + total;\n    \
    \        N = N / 10;\n        }\n        return Convert.ToString(total);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplhsuqhem.cs(26,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string answer = \"\";\n        long remainder\
    \ = 0;\n        string answerDigits = \"1\";\n        while (N != 0) {\n     \
    \       remainder = N % 10;\n            answerDigits = String.Format(\"{0}{1}\"\
    , answerDigits, remainder);\n            N = N / 10;\n        }\n        answer\
    \ = answerDigits;\n        return answer;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75a527ea61a54819a0e53f4503cadeb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75a527ea61a54819a0e53f4503cadeb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var n = Convert.ToString(N);\n      \
    \  var numbers = n.Select(x => Convert.ToString(Convert.ToInt32(x.ToString(),\
    \ 2))).ToList();\n        var res = new StringBuilder();\n        foreach (var\
    \ item in numbers)\n        {\n            var result = Math.Pow(10,numbers.Count\
    \ - numbers.IndexOf(item) - 1).Sum(i => Convert.ToString(Convert.ToInt32(item.ToString()\
    \ + i, 2)));\n            res.Append(result);\n        }\n        return res.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2o874w_s.cs(28,81): error CS1061: ''double'' does not contain a definition
    for ''Sum'' and no accessible extension method ''Sum'' accepting a first argument
    of type ''double'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        long N = Math.Abs(N);\n\
    \        while (N /= 2) {\n            s = N % 2 == 0 ? \"1\" + s : s + \"0\"\
    ;\n            N = (N / 2);\n        }\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5m8eap0y.cs(24,14): error CS0136: A local or parameter named ''N'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp5m8eap0y.cs(25,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmp5m8eap0y.cs(24,27): error CS0165: Use of unassigned local variable ''N''

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        if (N\
    \ < 0)\n        {\n            result = \"0\";\n        }\n        if (N == 0)\n\
    \        {\n            result = \"1\";\n        }\n        while (N !=0)\n  \
    \      {\n            string bits = \"\";\n            int power = 1;\n      \
    \      while (power < N)\n            {\n                bits = Convert.ToString(N\
    \ % 10, 2);\n                power *= 2;\n            }\n            result +=\
    \ bits;\n            N /= 10;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66b0fac2ae8b4fa49b95457a3271e89c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66b0fac2ae8b4fa49b95457a3271e89c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string res = \"\";\n        long num\
    \ = 0;\n        long mask = 1L;\n        while (mask != 0) {\n            num\
    \ = N & mask;\n            res += (num / 2).ToString();\n            mask = mask\
    \ / 2L;\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <43932180ca2a42e68fbcdb6d3238d28d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <43932180ca2a42e68fbcdb6d3238d28d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = Convert.ToString(N, 2);\n\
    \        binary = Convert.ToString(N, 2);\n        int sum = 0;\n        foreach\
    \ (char c in binary) {\n            sum += Convert.ToInt32(Convert.ToChar(c));\n\
    \        }\n        long result = (long)sum;\n        string result = Convert.ToString(result);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpryp_6apm.cs(30,16): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpryp_6apm.cs(31,16): error CS0029: Cannot implicitly convert type ''long''
    to ''string''

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var binary = new StringBuilder();\n\n\
    \        while (N > 0) {\n            binary.Append(Convert.ToString(N % 2, 2).PadLeft(8,\
    \ '0'));\n            N /= 2;\n        }\n\n        return binary.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cd7b4dffb644739a3163c457aa43ddf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cd7b4dffb644739a3163c457aa43ddf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        long i = 1;\n\
    \        while (N /= i) {\n            sum += i;\n            ++i;\n        }\n\
    \        if (sum > 9) {\n            return Convert.ToString(sum);\n        }\n\
    \        string result = \"\";\n        while (sum > 0) {\n            sum +=\
    \ N % 10;\n            N /= 10;\n            result += Convert.ToString(N % 2);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjebfftwa.cs(25,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659977239
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        int i = 0;\n \
    \       while (i < (N >> 1)) {\n            sum += (N >> i) & 1;\n           \
    \ i++;\n        }\n        long lastDigit = sum % 10;\n        sum = (sum / 10)\
    \ % 10;\n        return Convert.ToString(lastDigit + sum);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6a26653387742c18cc7d8cc0748d48a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6a26653387742c18cc7d8cc0748d48a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        StringBuilder ret = new StringBuilder();\n\
    \        string binary = \"\";\n        while (true) {\n            long m = N;\n\
    \            int i = 1;\n            while (m % 2 == 0) {\n                m /=\
    \ 2;\n                i++;\n            }\n            long m2 = m;\n        \
    \    int j = 1;\n            while (m2 % 2 == 0) {\n                m2 /= 2;\n\
    \                j++;\n            }\n            long m3 = m2;\n            int\
    \ k = 1;\n            while (m3 % 2 == 0) {\n                m3 /= 2;\n      \
    \          k++;\n            }\n            string s = i.ToString() + j.ToString()\
    \ + k.ToString();\n            binary = binary + s;\n            N = N / 2;\n\
    \            if (N == 0) break;\n        }\n        for (int i = 0; i < binary.Length;\
    \ i++) {\n            ret.Append(binary[i]);\n        }\n        string s = ret.ToString();\n\
    \        if (s.Length > 3) s = s.Substring(0, 3);\n        return s;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpge1mat4z.cs(44,20): error CS0136: A local or parameter named ''s'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int n = N;\n        long n = N;\n   \
    \     string result = \"\";\n        while (n > 10) {\n            n = n / 10;\n\
    \            string str = Convert.ToString(Convert.ToInt64(Math.Floor((double)n)));\n\
    \            result += str;\n        }\n        if (n > 1) {\n            result\
    \ += Convert.ToString(Convert.ToInt64(Math.Floor((double)n)));\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ey0jbf2.cs(23,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7ey0jbf2.cs(24,14): error CS0128: A local variable or function named ''n''
    is already defined in this scope

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        Debug.Assert(N > 0);\n        int s =\
    \ Convert.ToInt32(Math.Pow(10.0, Convert.ToDouble(N).ToString().Length));\n  \
    \      string binary = string.Empty;\n        int carry = 0;\n        for (int\
    \ i = 31; i >= 0; i--) {\n            double x = Math.Pow(10.0, (double)i);\n\
    \            double y = Math.Pow(10.0, (double)s) - Math.Pow(10.0, (double)i);\n\
    \            double z = Math.Pow(10.0, (double)N) - Math.Pow(10.0, (double)N);\n\
    \            double zz = z / (double)s;\n            int ii = Convert.ToInt32(x);\n\
    \            int iaa = ii / Convert.ToInt32(y);\n            int iab = ii % Convert.ToInt32(y);\n\
    \            int iba = ii * Convert.ToInt32(y);\n            int ibb = iaa + iab\
    \ + iba;\n            int abc = iab / Convert.ToInt32(y);\n            int bac\
    \ = iab % Convert.ToInt32(y);\n            int bbc = iba * Convert.ToInt32(y);\n\
    \            int bca = ibb + bbc + bac;\n            int caa = ibb / Convert.ToInt32(y);\n\
    \            int cba = ibb % Convert.ToInt32(y);\n            int cba = cba +\
    \ caa;\n            int aab = ibb * Convert.ToInt32(y);\n            int bbb =\
    \ iab * Convert.ToInt32(y);\n            int bab = iab + bbb + aab;\n        \
    \    int baa = bab / Convert.ToInt32(y);\n            int bbb = bab % Convert.ToInt32(y);\n\
    \            int bb = bbb / Convert.ToInt32(y);\n            int bc = bbb * Convert.ToInt32(y);\n\
    \            int ac = bbb + bc;\n            int a = baa * Convert.ToInt32(y);\n\
    \            int b = baa * Convert.ToInt32(y);\n            int c = ba + b;\n\
    \            if (a > 9) {\n                a = Math.Floor(a) / Convert.ToInt32(y);\n\
    \            }\n            if (b > 9) {\n                b = Math.Floor(b) /\
    \ Convert.ToInt32(y);\n            }\n            if (c > 9) {\n             \
    \   c = Math.Floor(c) / Convert.ToInt32(y);\n            }\n            int cc\
    \ = a - b - c;\n            if (cc > 9) {\n                cc = Math.Floor(cc)\
    \ / Convert.ToInt32(y);\n\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmns9no78.cs(69,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpmns9no78.cs(77,2): error CS1513: } expected

    '
  timestamp: 1659977239
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        StringBuilder sb = new StringBuilder();\n\
    \        if (N <= 0)\n            return \"0\";\n        if (N == 1)\n       \
    \     return \"1\";\n        long i = 1;\n        long t = 1;\n        while (i\
    \ < N) {\n            while (t != 0) {\n                t = t / 10;\n        \
    \    }\n            t = t;\n            long t = i;\n            while (t != 0)\
    \ {\n                sb.Append(t % 2);\n                t = t / 10;\n        \
    \    }\n            i++;\n            sb.Append((int)Math.Pow(2, i));\n      \
    \  }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqup2ue6t.cs(31,20): error CS0841: Cannot use local variable ''t'' before
    it is declared

    /tmp/tmpqup2ue6t.cs(32,17): error CS0841: Cannot use local variable ''t'' before
    it is declared

    /tmp/tmpqup2ue6t.cs(32,21): error CS0841: Cannot use local variable ''t'' before
    it is declared

    /tmp/tmpqup2ue6t.cs(34,13): error CS0841: Cannot use local variable ''t'' before
    it is declared

    /tmp/tmpqup2ue6t.cs(34,17): error CS0841: Cannot use local variable ''t'' before
    it is declared

    /tmp/tmpqup2ue6t.cs(35,18): error CS0136: A local or parameter named ''t'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpqup2ue6t.cs(29,14): warning CS0219: The variable ''t'' is assigned but
    its value is never used

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0)\n            throw new ArgumentException(\"\
    Not a valid number.\");\n        string binaryNumber = string.Empty;\n       \
    \ long two = Convert.ToInt64(Math.Pow(2, N));\n        long numZeroes = N;\n \
    \       while (numZeroes > 0) {\n            binaryNumber = Convert.ToString(N\
    \ % 2, 2) + binaryNumber;\n            N /= 2;\n            numZeroes--;\n   \
    \     }\n        while (binaryNumber.Length > 1)\n            binaryNumber = Convert.ToString(Convert.ToInt64(binaryNumber)\
    \ % (2 * Math.Pow(2, binaryNumber.Length - 1)), 2) + binaryNumber;\n        return\
    \ binaryNumber;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv2_jtvqf.cs(34,121): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N == 0)\n            return \"0\"\
    ;\n\n        if (N < 0)\n            return \"-\";\n\n        long Sum = 0;\n\
    \        long Power = 0;\n        int Bit = 0;\n        long Current = 0;\n  \
    \      while (Power < N) {\n            Current = N >> Power;\n            Sum\
    \ = Sum + Current;\n            Bit = Current >> 1;\n            Power = Power\
    \ * 2;\n        }\n        string Output = Convert.ToString(Sum);\n        while\
    \ (Bit > 0) {\n            Output = Convert.ToString(Sum) + Output;\n        \
    \    Sum = Sum >> 1;\n            Bit = Bit >> 1;\n        }\n        return Output;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqlr2b5rg.cs(34,23): error CS0019: Operator ''>>'' cannot be applied to
    operands of type ''long'' and ''long''

    /tmp/tmpqlr2b5rg.cs(36,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977240
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0) return \"-\";\n        var\
    \ bits = BitConverter.GetBytes(N);\n        var s = \"\";\n        for (var i\
    \ = 0; i < bits.Length; i++) {\n            s += bits[i].ToString();\n       \
    \     if (i < bits.Length - 1) s += \"1\";\n        }\n        return s;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbbb979e29da411ea65d5e2d194b5bb7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbbb979e29da411ea65d5e2d194b5bb7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var binary = N % 2 == 0 ? \"0\" : \"\
    1\";\n        var remainder = N >> 1;\n        if (N < 10) {\n            return\
    \ binary;\n        }\n        var bins = Solve(remainder);\n        if (bins.Length\
    \ == 1) {\n            return binaries(bins, binary);\n        }\n        var\
    \ leftShift = binaries(bins, binary);\n        var rightShift = binaries(remainder,\
    \ binary);\n        return leftShift + rightShift;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5u_99_j6.cs(30,20): error CS0103: The name ''binaries'' does not exist
    in the current context

    /tmp/tmp5u_99_j6.cs(32,25): error CS0103: The name ''binaries'' does not exist
    in the current context

    /tmp/tmp5u_99_j6.cs(33,26): error CS0103: The name ''binaries'' does not exist
    in the current context

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int Nbits = (int)Math.Log10(N);\n   \
    \     BigInteger N = BigInteger.Parse(Math.Truncate(N).ToString());\n        BigInteger\
    \ remainder = new BigInteger(\"1\");\n        int sum = 0;\n        string result\
    \ = \"\";\n        for (int i = Nbits; i >= 0; i--)\n        {\n            remainder\
    \ = remainder.Multiply(N);\n            if (N != remainder)\n            {\n \
    \               sum += (int)Math.Ceiling(remainder.ToString(\"BigInteger\").Replace(\"\
    .\", \"\").Replace(\"-\", \"\"));\n                result = result + sum.ToString(\"\
    0\");\n                sum = 0;\n            }\n            N = N.Divide(BigInteger.One);\n\
    \        }\n        sum = sum.ToString(\"0\");\n        result = result + sum;\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkdvy15sn.cs(23,37): error CS0841: Cannot use local variable ''N'' before
    it is declared

    /tmp/tmpkdvy15sn.cs(24,20): error CS0136: A local or parameter named ''N'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkdvy15sn.cs(24,55): error CS1503: Argument 1: cannot convert from ''System.Numerics.BigInteger''
    to ''decimal''

    /tmp/tmpkdvy15sn.cs(25,47): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpkdvy15sn.cs(30,35): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpkdvy15sn.cs(33,42): error CS1503: Argument 1: cannot convert from ''string''
    to ''decimal''

    /tmp/tmpkdvy15sn.cs(37,19): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmpkdvy15sn.cs(39,15): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    '
  timestamp: 1659977240
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        while (true)\
    \ {\n            s += (Convert.ToString(N, 2).PadLeft(64, '0'));\n           \
    \ if (N % 10 == 0)\n                break;\n            N = (N / 10);\n      \
    \  }\n        return s;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3fa2b526be84c84aa69076a9fcaab83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3fa2b526be84c84aa69076a9fcaab83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977240
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        while\
    \ (N !=0)\n        {\n            result = Convert.ToString(N % (long)Math.Pow(2,\
    \ result.Length), 2);\n            N = N / Convert.ToInt64(Math.Pow(2, result.Length));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e52185c0840472bb0c390b5478dd6d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e52185c0840472bb0c390b5478dd6d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        BigInteger n = new BigInteger(N);\n \
    \       int digit = 0;\n        string s = \"\";\n\n        for (int i = n.Exponent;\
    \ i >= 0; i--)\n        {\n            digit = n.Digit(i);\n            s += (digit\
    \ > 9 ? \"0\" + digit : digit.ToString());\n        }\n\n        return s;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptk_j32f7.cs(27,24): error CS1061: ''BigInteger'' does not contain a definition
    for ''Exponent'' and no accessible extension method ''Exponent'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmptk_j32f7.cs(29,23): error CS1061: ''BigInteger'' does not contain a definition
    for ''Digit'' and no accessible extension method ''Digit'' accepting a first argument
    of type ''BigInteger'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        while(N >0) {\n\
    \            sum += (long)Math.Pow(10,(int)Math.Log(N,2));\n            N /= 10;\n\
    \        }\n        string s = string.Empty;\n        for(int i = sum; i>0; i--)\
    \ {\n            s = Convert.ToString(i,2) + s;\n        }\n        return s;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx09w76a4.cs(29,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N == 0) {\n            return \"\
    0\";\n        }\n        var remainder = 0;\n        var sum = 0;\n        string\
    \ result = \"\";\n        for (int i = 1; i < N; i++) {\n            int temp\
    \ = remainder % 2;\n            sum += temp;\n            remainder = temp;\n\
    \        }\n        int temp = remainder % 2;\n        if (temp == 0) {\n    \
    \        return result + sum.ToString();\n        }\n        temp = sum.ToString();\n\
    \        while (temp.Length > 1) {\n            temp = temp.Substring(0, 1);\n\
    \        }\n        result += temp;\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzqe7p5gd.cs(30,17): error CS0136: A local or parameter named ''temp''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzqe7p5gd.cs(38,16): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    /tmp/tmpzqe7p5gd.cs(39,21): error CS1061: ''int'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpzqe7p5gd.cs(40,25): error CS1061: ''int'' does not contain a definition
    for ''Substring'' and no accessible extension method ''Substring'' accepting a
    first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        string\
    \ s = \"\";\n        int n = Int32.Parse(N.ToString());\n        while (n!=0){\n\
    \            long temp = n / 10;\n            s = Convert.ToString(temp,2);\n\
    \            n = n - temp * 10;\n            result = result + s;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpahjfsgev.cs(29,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977240
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        StringBuilder s = new StringBuilder();\n\
    \        long num;\n        if (N == 0)\n            num = N;\n        else {\n\
    \            num = N % 10 + 10 * (N / 10);\n        }\n        long count = 0;\n\
    \        while (count < 6) {\n            s.Append((Convert.ToString(num % 2)\
    \ + \"\"));\n            num = (num / 10);\n            count++;\n        }\n\
    \        if (num == 0)\n            s.Append(\"0\");\n        return s.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f4b2f34cb554ef0bf84c7eb296b6ae5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f4b2f34cb554ef0bf84c7eb296b6ae5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        long m = Math.Pow(10,\
    \ N);\n        while (m > 0) {\n            long n = m;\n            m = m / 10;\n\
    \            s = n.ToString() + s;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9t7w5bjq.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        long rem = N;\n\
    \        while (0 < rem) { \n            int digit = rem % 10;\n            sum\
    \ += digit;\n            rem /= 10;\n        }\n        return (String.Join(\"\
    \", Enumerable.Range(0, N / 2) { x => (x >> 1) & 1 } ).PadLeft(N / 2, 0) + sum).PadLeft(N\
    \ / 2, 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc19i_31f.cs(30,60): error CS1026: ) expected

    /tmp/tmpc19i_31f.cs(30,60): error CS1002: ; expected

    /tmp/tmpc19i_31f.cs(30,80): error CS1002: ; expected

    /tmp/tmpc19i_31f.cs(30,82): error CS1513: } expected

    /tmp/tmpc19i_31f.cs(30,107): error CS1002: ; expected

    /tmp/tmpc19i_31f.cs(30,107): error CS1513: } expected

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N == 0) {\n            return \"\
    0\";\n        }\n        long num = 0;\n        int digits = 0;\n        long\
    \ bit = 1;\n        while (true) {\n            num <<= 1;\n            num =\
    \ num | bit;\n            bits++;\n            if (bits == 32) {\n           \
    \     bit = 1;\n                bits++;\n            }\n            digits++;\n\
    \            if (digits > 64) {\n                bits--;\n                num\
    \ = (num & (long.MaxValue >> bits)) + (num >> bits);\n                digits =\
    \ 0;\n            }\n            if (num > N) {\n                break;\n    \
    \        }\n        }\n        if (bits == 0) {\n            return \"0\";\n \
    \       }\n        char[] charArray = new char[digits + 1];\n        int pos =\
    \ digits - 1;\n        while (pos -- >= 0) {\n            charArray[pos] = (char)(num\
    \ & 1);\n            num >>= 1;\n        }\n        charArray[pos + 1] = '\\0';\n\
    \        return new string(charArray);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpttf48ek5.cs(32,13): error CS0103: The name ''bits'' does not exist in
    the current context

    /tmp/tmpttf48ek5.cs(33,17): error CS0103: The name ''bits'' does not exist in
    the current context

    /tmp/tmpttf48ek5.cs(35,17): error CS0103: The name ''bits'' does not exist in
    the current context

    /tmp/tmpttf48ek5.cs(39,17): error CS0103: The name ''bits'' does not exist in
    the current context

    /tmp/tmpttf48ek5.cs(40,48): error CS0103: The name ''bits'' does not exist in
    the current context

    /tmp/tmpttf48ek5.cs(40,65): error CS0103: The name ''bits'' does not exist in
    the current context

    /tmp/tmpttf48ek5.cs(47,13): error CS0103: The name ''bits'' does not exist in
    the current context

    '
  timestamp: 1659977240
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = String.Format(\"{0:X}\", N);\n\
    \        string result = \"\";\n        long remain = N;\n        while (remain\
    \ != 0) {\n            int pos = s.Length - 1;\n            while (remain % 2\
    \ == 0) {\n                remain /= 2;\n                pos --;\n           \
    \ }\n            if (pos != -1)\n                result += \"1\";\n          \
    \  else\n                result += \"0\";\n            s = String.Format(\"{0:X}\"\
    , remain);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        BigInteger number = new BigInteger(N);\n\
    \        if (number.ToString().Length < 2)\n            return number.ToString();\n\
    \n        long digit = number;\n        string result = \"\";\n        while (digit\
    \ > 0) {\n            result = Convert.ToString(digit) + result;\n           \
    \ digit = digit / 10;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3st0azth.cs(27,22): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        BigInteger res = Solve(N);\n        return\
    \ res.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpau3d7ua5.cs(23,26): error CS0029: Cannot implicitly convert type ''string''
    to ''System.Numerics.BigInteger''

    '
  timestamp: 1659977240
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        while (N !=0)\
    \ {\n            s = Convert.ToString(N % 2, 2).PadLeft(s.Length + 1, '0') + s;\n\
    \            N = N / 2;\n        }\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf65b11b61804daf8e34042c526ef83e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf65b11b61804daf8e34042c526ef83e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long digits = 0;\n        string s =\
    \ \"\";\n        while (N != 0) {\n            long remaining = N % 10;\n    \
    \        digits = digits + remaining;\n            N = N / 10;\n            s\
    \ += remaining.ToString();\n        }\n        if (digits == 0)\n            s\
    \ = \"0\";\n        return s;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4025be06409f4c6b928ce6566253f8c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4025be06409f4c6b928ce6566253f8c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"0\";\n\n        //\
    \ Iterate through each digit in the number.\n        for (int digit = 1; digit\
    \ < Math.Ceiling(N); digit++) {\n            // Convert the current digit to a\
    \ binary string.\n            string binary = Convert.ToString(N, 2);\n      \
    \      // Append the current digit to the string.\n            result += binary;\n\
    \            // Divide N by 10 until the remainder is 0.\n            N /= 10;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1x3356su.cs(26,42): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int digitCount = 0;\n        int sum\
    \ = 0;\n        bool overflow = false;\n        while (N !=0) {\n            digitCount++;\n\
    \            N=N/10;\n        }\n        for (int i = digitCount - 1; i >= 0;\
    \ i--) {\n            int remainder = N % 2;\n            sum += remainder;\n\
    \            N = (N - remainder) / 2;\n        }\n        if (sum > int.MaxValue\
    \ || sum < int.MinValue) {\n            overflow = true;\n        }\n        if\
    \ (!overflow) {\n            return Convert.ToString(sum);\n        } else {\n\
    \            long sumLong = sum;\n            int digitCountLong = digitCount;\n\
    \            int overflowLong = overflow;\n            while (sumLong != 0) {\n\
    \                digitCountLong++;\n                sumLong = sumLong / 10;\n\
    \            }\n            for (int i = digitCountLong - 1; i >= 0; i--) {\n\
    \                int remainderLong = sumLong % 2;\n                sumLong = (sumLong\
    \ - remainderLong) / 2;\n            }\n            bool overflowLong2 = overflow\
    \ == true;\n            return Convert.ToString(sumLong) + overflowLong2 ? \"\
    \ \" :\n                Convert.ToString(sumLong);\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkjb3vnup.cs(31,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkjb3vnup.cs(43,32): error CS0029: Cannot implicitly convert type ''bool''
    to ''int''

    /tmp/tmpkjb3vnup.cs(49,37): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkjb3vnup.cs(53,20): error CS0029: Cannot implicitly convert type ''string''
    to ''bool''

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Write your code here.\n        StringBuilder\
    \ result = new StringBuilder();\n        while (N /= 2) {\n            N %= 2;\n\
    \            result.Append(Convert.ToString(\"1\", 2).PadLeft(8, '0'));\n    \
    \    }\n        result.Append(Convert.ToString(\"1\", 2).PadLeft(8, '0'));\n \
    \       result.Append(Convert.ToString(\"1\", 2).PadLeft(8, '0'));\n        result.Append(Convert.ToString(\"\
    1\", 2).PadLeft(8, '0'));\n        return result.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpscpzoine.cs(25,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpscpzoine.cs(27,49): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    /tmp/tmpscpzoine.cs(29,45): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    /tmp/tmpscpzoine.cs(30,45): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    /tmp/tmpscpzoine.cs(31,45): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659977241
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Your code goes here\n        var x\
    \ = N % 2;\n        var result = \"\";\n        while (x > 0) {\n            result\
    \ += Convert.ToString((x % 2) + 1, 2).PadLeft(8, '0');\n            x /= 2;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5484b7852d904d9789d897344d9edccb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5484b7852d904d9789d897344d9edccb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long total = 0;\n        while (N > 0)\
    \ {\n            int digit = (int)N % 10;\n            N = N / 10;\n         \
    \   total += digit;\n        }\n        long total2 = Convert.ToInt64(total);\n\
    \        long total3 = total2 % 10;\n        return Convert.ToString(total3);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b16cfe7ba8240edacef1f7f7dc9e066>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b16cfe7ba8240edacef1f7f7dc9e066>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long total = 0;\n        while (N !==\
    \ 0) {\n            total = total + N % 2;\n            N = N / 2;\n        }\n\
    \        int result = Convert.ToString(total);\n        if (result.Length > 2)\
    \ {\n            return result.Substring(1, result.Length - 2);\n        } else\
    \ {\n            return result.Substring(1, result.Length);\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt4h5keby.cs(24,20): error CS1525: Invalid expression term ''=''

    '
  timestamp: 1659977240
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        while (N /=\
    \ 2)\n        {\n            s = s.Insert(0, (char)((N & 1) ? '1' : '0'));\n \
    \           N /= 2;\n        }\n        return s;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7aa4_7b_.cs(24,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmp7aa4_7b_.cs(26,36): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int sum = 0;\n        while (true) {\n\
    \            if (sum < N) {\n                sum = sum + N % 2;\n            \
    \    N = N / 2;\n            } else { break; }\n        }\n        if (N > 1)\
    \ sum = sum + N % 2;\n        return Convert.ToString(sum);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphkc4__fj.cs(26,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphkc4__fj.cs(30,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long i = 1;\n        var remainder =\
    \ (N % 10);\n        var res = \"\";\n        while(N !=0)\n        {\n      \
    \      long x = (N % 1000000000000000);\n            long y = N / 1000000000000000;\n\
    \            long z = x * y;\n            long res = z;\n            while(remainder\
    \ > 0)\n            {\n                long temp = remainder;\n              \
    \  remainder = temp / 10;\n                res = res + temp;\n            }\n\
    \            N = z;\n            res=res.PadLeft(res.Length,'0');\n          \
    \  if(res.Length > 10)\n            {\n                res=res+\"0\";\n      \
    \      }\n            res=res+(remainder).ToString();\n            if(res.Length\
    \ > 10)\n            {\n                res=res+\"0\";\n            }\n      \
    \      i=i*10+res;\n        }\n        return (long)i.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmvgx79wl.cs(31,18): error CS0136: A local or parameter named ''res'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpmvgx79wl.cs(39,33): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpmvgx79wl.cs(39,21): error CS1061: ''long'' does not contain a definition
    for ''PadLeft'' and no accessible extension method ''PadLeft'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpmvgx79wl.cs(40,20): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpmvgx79wl.cs(42,21): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpmvgx79wl.cs(44,17): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpmvgx79wl.cs(45,20): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpmvgx79wl.cs(47,21): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpmvgx79wl.cs(51,16): error CS0030: Cannot convert type ''string'' to ''long''

    /tmp/tmpmvgx79wl.cs(25,13): warning CS0219: The variable ''res'' is assigned but
    its value is never used

    '
  timestamp: 1659977241
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        StringBuilder result = new StringBuilder();\n\
    \        int n = 0;\n        string s = \"\";\n        while (n <= N) {\n    \
    \        string temp = Convert.ToString(n % 2, 2);\n            if (temp.Length\
    \ > 0) s = s + temp;\n            n /= 2;\n        }\n        result.Append(s);\n\
    \        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binarySum = \"0\";\n        //\
    \ Base case\n        if (N == 0)\n            return binarySum;\n\n        //\
    \ Iterate N digits, and add them to the binary sum\n        long currentDigit\
    \ = N % 10;\n        binarySum = currentDigit + binarySum;\n        N = (N - currentDigit)\
    \ / 10;\n\n        // Recursively call Solve on the sub-problem of the last digit\n\
    \        if (N > 0)\n            binarySum = Solve(N) + binarySum;\n\n       \
    \ return binarySum;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <976a93866a06468db5d416678927c3a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <976a93866a06468db5d416678927c3a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long remainder = 0;\n        long sum\
    \ = 0;\n        while (N !=0)\n        {\n            remainder = N % 10;\n  \
    \          sum = sum + remainder;\n            N = N / 10;\n        }\n      \
    \  return sum.ToString();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04c510deb4da4aac959137e5588574de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04c510deb4da4aac959137e5588574de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0 || N > 10000)\n           \
    \ return string.Empty;\n\n        BigInteger temp = new BigInteger(N);\n     \
    \   BigInteger sum = temp.ToString(\"decimal\");\n\n        int count = 0;\n \
    \       while (sum.Length > 1) {\n            sum = temp.ToString(\"decimal\"\
    ) + sum.Substring(0, sum.Length - 1);\n            if (sum.Length > 1)\n     \
    \           count++;\n        }\n        long digits = Convert.ToInt64(sum);\n\
    \        string result = new string((new string('0', count)).ToCharArray(), digits);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpru81z9ft.cs(27,26): error CS0029: Cannot implicitly convert type ''string''
    to ''System.Numerics.BigInteger''

    /tmp/tmpru81z9ft.cs(30,20): error CS1061: ''BigInteger'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpru81z9ft.cs(31,67): error CS1061: ''BigInteger'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpru81z9ft.cs(31,50): error CS1061: ''BigInteger'' does not contain a definition
    for ''Substring'' and no accessible extension method ''Substring'' accepting a
    first argument of type ''BigInteger'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpru81z9ft.cs(32,21): error CS1061: ''BigInteger'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpru81z9ft.cs(36,36): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''char''

    /tmp/tmpru81z9ft.cs(36,76): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        long remain =\
    \ N;\n        while (remain > 0) {\n            int digit = remain % 10;\n   \
    \         sum += digit;\n            remain = (remain - digit) / 10;\n       \
    \ }\n        string s = Convert.ToString(sum);\n        while (s.Length > 0) {\n\
    \            s = Convert.ToString(sum);\n        }\n        Console.WriteLine(s);\
    \ \n        return s;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3n54k398.cs(26,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977241
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // write your code in C# 6.0 with .NET\
    \ 4.5 (Mono)\n        //long N = 154;\n        string ret = \"\";\n        long\
    \ temp = 0;\n        long N1 = N;\n        if (N == 0)\n        {\n          \
    \  ret = \"0\";\n        }\n        else\n        {\n            while (N1 !=\
    \ 0)\n            {\n                temp = N1 % 2;\n                ret += temp.ToString();\n\
    \                N1 = N1 / 2;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48b4ac076b0e4e56932c920282633b77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48b4ac076b0e4e56932c920282633b77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = string.Empty;\n     \
    \   long x = N;\n        while(x > 0) {\n            long remaining = x % 10;\n\
    \            string s = string.Concat(Convert.ToString(remaining), binary);\n\
    \            binary = string.Empty;\n            x = x / 10;\n            x -=\
    \ remaining;\n            x += 1;\n        }\n        return binary;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1f6f46f70c64efa92830b7bd25c7632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1f6f46f70c64efa92830b7bd25c7632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = \"\";\n        int i\
    \ = 0;\n        while (N /= 2) {\n            binary += N % 2 == 0 ? \"1\" : \"\
    0\";\n            N = (int)Math.Floor(N / 2);\n        }\n        while (i < binary.Length)\
    \ {\n            i += binary.Length - i;\n        }\n        return binary;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppzo483q5.cs(25,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmppzo483q5.cs(27,27): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var sol = Solve(N);\n        return (sol.Length\
    \ == 1) ? sol.First() : \"0\" + sol;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphpon9n3m.cs(24,16): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''char'' and ''string''

    '
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int remainder;\n        long sum = 0;\n\
    \n        // First pass to calculate the sum of the digits of the number in binary\
    \ form:\n        while (N >> 1 != 0)\n        {\n            remainder = (int)N\
    \ & (long)Math.Pow(10, (int)Math.Log10((double)N));\n            sum += remainder;\n\
    \            N = (long)((long)N >> 1);\n        }\n\n        // Second pass to\
    \ calculate the sum of digits in reverse order:\n        while (sum > 0)\n   \
    \     {\n            int digit = sum % 10;\n            sum += digit < 0 ? -(digit\
    \ - 1) : digit;\n            string str = (string)Math.Pow(Convert.ToString(10),\
    \ (int)Math.Log10((double)sum));\n            if (str[0] != '0')\n           \
    \     return str;\n        }\n        return \"0\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq79p0ufa.cs(29,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq79p0ufa.cs(37,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq79p0ufa.cs(39,43): error CS1503: Argument 1: cannot convert from ''string''
    to ''double''

    '
  timestamp: 1659977241
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0) throw new ArgumentOutOfRangeException(\"\
    N\", \"N < 0\");\n\n        long sum = 0;\n        while (true) {\n          \
    \  string s = Convert.ToString(N % 2);\n            sum += s.Select(c => Convert.ToInt32(c\
    \ - '0')).Sum();\n            if (sum == N) break;\n            N /= 2;\n    \
    \    }\n        string answer = Convert.ToString(N);\n        return answer;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long number = N;\n        string result\
    \ = \"0\";\n        while(number > 0) {\n            result = (number % 10) +\
    \ result;\n            number /= 10;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f512eb321b7e4084b7345cb98b0dbfba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f512eb321b7e4084b7345cb98b0dbfba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        if (N\
    \ < 10)\n            return string.Format(\"{0}\", N);\n        if (N >= 1000000\
    \ && N < 10000000L) {\n            long tmp = (N % 10000000L);\n            tmp\
    \ = tmp / 10000000L;\n            string tmp = Solve(tmp);\n            result\
    \ += tmp;\n            long rest = N / 10000000L;\n            tmp = Solve(rest);\n\
    \            result += tmp;\n        }\n        if (N >= 10000000L) {\n      \
    \      long rest = N / 10000000L;\n            string tmp = Solve(rest);\n   \
    \         result += tmp;\n            long rest = N / 10000000L;\n           \
    \ tmp = Solve(rest);\n            result += tmp;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf73xszn6.cs(29,20): error CS0128: A local variable or function named ''tmp''
    is already defined in this scope

    /tmp/tmpf73xszn6.cs(32,19): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpf73xszn6.cs(39,18): error CS0128: A local variable or function named ''rest''
    is already defined in this scope

    '
  timestamp: 1659977241
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string ret = \"\";\n        long N1 =\
    \ N;\n        long N2 = N;\n        do {\n            long N = N1 - N2;\n    \
    \        while (N % 2 == 0) {\n                N2 = N / 2;\n            }\n  \
    \          N1 = N2;\n            N2 = N;\n        } while (N1 != 0);\n       \
    \ string x = \"\";\n        while (N1 != 0) {\n            int N3 = N1 % 10;\n\
    \            N1 = N1 / 10;\n            N2 = N2;\n            long n3 = N1 * N1;\n\
    \            N1 += N3;\n            N2 -= N3;\n            N1 /= 10;\n       \
    \     N2 /= 10;\n            string y = \"\";\n            for (int i = 0; i <\
    \ 8; i++) {\n                y += Convert.ToString(N1 & 1);\n                N1\
    \ >>= 1;\n            }\n            x += y;\n            N1 += N2;\n        }\n\
    \        while (N2 != 0) {\n            int N3 = N2 % 10;\n            N2 = N2\
    \ / 10;\n            long n3 = N2 * N2;\n            N2 += N3;\n            N1\
    \ -= N3;\n            N2 /= 10;\n            string y = \"\";\n            for\
    \ (int i = 0; i < 8; i++) {\n                y += Convert.ToString(N1 & 1);\n\
    \                N1 >>= 1;\n            }\n            x += y;\n        }\n  \
    \      ret = x;\n        while (ret != \"0\") {\n            ret += \"0\";\n \
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpijkqhtsk.cs(27,18): error CS0136: A local or parameter named ''N'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpijkqhtsk.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpijkqhtsk.cs(53,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpijkqhtsk.cs(38,13): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1659977241
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long rem = 0;\n        long sum = 0;\n\
    \        bool binary = true;\n        while (true) {\n            if (N % 2 ==\
    \ 0) {\n                if (binary) {\n                    rem = N % 2;\n    \
    \                sum = (sum + rem) % 10;\n                    N = N / 2;\n   \
    \                 binary = false;\n                }\n            }\n        \
    \    else {\n                rem = (N % 10) + ((N / 10) % 10);\n             \
    \   sum = (sum + rem) % 10;\n                N = N / 10;\n                binary\
    \ = true;\n            }\n        }\n        return String.Format(\"{0}\", sum);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977247
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long N2 = N;\n        string bin = \"\
    \";\n        bool flag = true;\n        while (N2 > 0) {\n            string str\
    \ = Convert.ToString(N2, 2);\n            if (flag) bin += str;\n            else\
    \ bin += str.Reverse();\n            N2 = N2 % 10;\n            flag = !flag;\n\
    \        }\n        return bin;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98b54f074f054449b01d05c9cfe67b78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98b54f074f054449b01d05c9cfe67b78>:0 \n"
  stdout: None
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        do {\n       \
    \     sum += N & 1;\n            N >>= 1;\n        } while (N > 0);\n        var\
    \ s = Convert.ToString(sum);\n        var result = new List<string>();\n     \
    \   foreach (char c in s) {\n            if (c == '0') {\n                result.Add(\"\
    1\");\n            } else {\n                result.Add(\"0\");\n            }\n\
    \        }\n        return String.Join(\"\", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03c73f3fe2cb41ceb48040dfa69750ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03c73f3fe2cb41ceb48040dfa69750ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977242
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long remainder = N;\n        string binary\
    \ = \"\";\n        string strTemp = string.Empty;\n        bool checker = false;\n\
    \        string strCheck = string.Empty;\n        string strTemp2 = string.Empty;\n\
    \        long count = 0;\n        while (checker == false) {\n            strCheck\
    \ = Convert.ToString(N % 2);\n            if (strCheck != \"0\") {\n         \
    \       count++;\n            }\n            N = N / 2;\n        }\n        while\
    \ (remainder > 0) {\n            strTemp = Convert.ToString(remainder % 2);\n\
    \            if (strTemp.Length > 1) {\n                strTemp2 = strTemp + \"\
    0\";\n            } else {\n                strTemp2 = strTemp;\n            }\n\
    \            strTemp = strTemp2;\n            strTemp2 = string.Empty;\n     \
    \       binary = strTemp + binary;\n            remainder = remainder / 2;\n \
    \       }\n        return binary;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        return Solve(N, \"0\");\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfvkphdum.cs(23,16): error CS1501: No overload for method ''Solve'' takes
    2 arguments

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long res = 0;\n        while (N != 0)\
    \ {\n            res = (res * 10) + N % 10;\n            N /= 10;\n        }\n\
    \        return Solve(res, 0);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsuwrynih.cs(28,16): error CS1501: No overload for method ''Solve'' takes
    2 arguments

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = Convert.ToString(N);\n   \
    \     string result = \"\";\n        long max = 0;\n        long cur = 0;\n  \
    \      for (int i = 0; i < s.Length; i++) {\n            int n = Convert.ToInt32(Math.Floor(s.Length\
    \ - i));\n            string str = Convert.ToString(Convert.ToDouble(s[n - 1])\
    \ * Math.Pow(2, n));\n            result += str;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplqgymv4c.cs(28,42): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmplqgymv4c.cs(25,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmplqgymv4c.cs(26,14): warning CS0219: The variable ''cur'' is assigned but
    its value is never used

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long digits = N / 10;\n        long remainder\
    \ = N - digits * 10;\n        string s = remainder;\n        StringBuilder sb\
    \ = null;\n        while (remainder != 0) {\n            remainder = (remainder\
    \ % 2 == 0 ? remainder : 2 * remainder) - 1;\n            s += \"1\";\n      \
    \  }\n        s = s.ToString() + new string('0', digits);\n        if (sb == null)\n\
    \            sb = new StringBuilder();\n        sb.Append(s);\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn2m4smcw.cs(25,20): error CS0029: Cannot implicitly convert type ''long''
    to ''string''

    /tmp/tmpn2m4smcw.cs(31,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977242
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // TODO: Implement this function!\n \
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37282ef584d449d6a2d18335efd863b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37282ef584d449d6a2d18335efd863b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long count = 0;\n        while (true)\
    \ {\n            long bits = N / 2;\n            N /= 2;\n            if (N ==\
    \ 0)\n                return Convert.ToString(bits);\n            int bin = Convert.ToString(bits).Length;\n\
    \            int digs = bits / 2;\n            int sum = 0;\n            for (int\
    \ i = digs; i >= 0; i--)\n                sum += Convert.ToInt32(Convert.ToString(Convert.ToInt32(Convert.ToString(Convert.ToString(Convert.ToString(Convert.ToString(Convert.ToString(bin).Substring(digs\
    \ - i, 1), 2), 2), 2), 2), 2), 2);\n            if (sum == 0)\n              \
    \  count = 0;\n            else\n                count += sum;\n        }\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgyd8wld.cs(33,209): error CS1026: ) expected

    '
  timestamp: 1659977241
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = Convert.ToString(N, 2);\n\
    \        if (binary.Length > 1000) {\n            throw new ArgumentException(\"\
    Input too large\");\n        }\n        Debug.WriteLine(binary.Length);\n    \
    \    Debug.WriteLine(\"------------------------------------\");\n        int len\
    \ = binary.Length;\n        int sum = 0;\n        for (int i = 0; i < len; i++)\
    \ {\n            int val = (int)binary[i];\n            sum += val;\n        }\n\
    \        string res = Convert.ToString(sum);\n        res = \"1\" + res;\n   \
    \     Debug.WriteLine(res);\n        return res;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "10\n------------------------------------\n1486\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b82f0f7056fb4a01aae41fd84a80bb6f>:0 \n8\n------------------------------------\n\
    1388\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b82f0f7056fb4a01aae41fd84a80bb6f>:0 \n8\n------------------------------------\n\
    1388\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System"
  stdout: ''
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int maxDigits = (int)Math.Log10(N) +\
    \ 1;\n        string ret = \"\";\n        int n = N;\n        while (n > 0) {\n\
    \            ret = n.ToString().PadLeft(maxDigits, '0');\n            n = n /\
    \ 10;\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi_k_106p.cs(25,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = \"\";\n        string\
    \ binary = Convert.ToString(N, 2);\n        char firstChar = binary[0];\n    \
    \    string firstBin = firstChar.ToString();\n        string lastBin = \"\";\n\
    \        bool first = true;\n        string binary = \"\";\n        for (int i\
    \ = firstBin.Length - 1; i >= 0; i--)\n        {\n            if (first)\n   \
    \         {\n                lastBin += firstBin[i];\n                first =\
    \ false;\n            }\n            else\n            {\n                lastBin\
    \ += firstBin[i].ToString();\n            }\n        }\n        firstChar = lastBin[0];\n\
    \        string lastBin = firstChar.ToString();\n        string bin = \"\";\n\
    \        for (int i = lastBin.Length - 1; i >= 0; i--)\n        {\n          \
    \  if (first)\n            {\n                bin += lastBin[i];\n           \
    \     first = false;\n            }\n            else\n            {\n       \
    \         bin += lastBin[i].ToString();\n            }\n        }\n        return\
    \ bin;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmper24f8w_.cs(24,16): error CS0128: A local variable or function named ''binary''
    is already defined in this scope

    /tmp/tmper24f8w_.cs(29,16): error CS0128: A local variable or function named ''binary''
    is already defined in this scope

    /tmp/tmper24f8w_.cs(43,16): error CS0128: A local variable or function named ''lastBin''
    is already defined in this scope

    /tmp/tmper24f8w_.cs(29,16): warning CS0219: The variable ''binary'' is assigned
    but its value is never used

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Base Case\n        if (N <= 0) {\n\
    \            return \"0\";\n        }\n\n        long remainder = 0;\n       \
    \ long temp = N;\n\n        // Recursion\n        while (temp > 0) {\n       \
    \     long curDigit = temp % 10;\n            temp = temp / 10;\n            remainder\
    \ = remainder + curDigit;\n        }\n\n        // Output \n        string digits\
    \ = \"1\";\n        List<long> digitalValue = new List<long>();\n        digitalValue.Add(remainder);\n\
    \        digitalValue.Add(1);\n        string str = Solve(remainder, digitalValue);\n\
    \        return str;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm8lsbr62.cs(43,22): error CS1501: No overload for method ''Solve'' takes
    2 arguments

    /tmp/tmpm8lsbr62.cs(39,16): warning CS0219: The variable ''digits'' is assigned
    but its value is never used

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var sb = new StringBuilder();\n     \
    \   var sum = 0;\n        char digit = 0;\n        for(long i = 1; i <= N; i++)\
    \ {\n            int digitPosition = i % 2;\n            digit += ((int)Math.Pow(2,\
    \ digitPosition)) * ((int)Math.Pow(10, digitPosition - 1));\n            sum +=\
    \ digit;\n            sb.Append(Convert.ToString(digit));\n            digit =\
    \ 0;\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp255aq2yv.cs(25,22): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp255aq2yv.cs(27,33): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp255aq2yv.cs(28,13): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp255aq2yv.cs(31,21): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Write your code here\n        long\
    \ num = 0;\n        string binary = \"\";\n        while (N /= 2) {\n        \
    \    num <<= 1;\n            num |= (N & 1);\n            N >>= 1;\n        }\n\
    \        long sum = 0;\n        while (num /= 2) {\n            sum += num;\n\
    \            num -= num;\n        }\n        if (sum > 0) {\n            binary\
    \ = Convert.ToString(sum) + binary;\n        }\n        return binary;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu8bwttgm.cs(26,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpu8bwttgm.cs(32,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N == 0)\n            return \"0\"\
    ;\n        var N = Convert.ToInt64(Math.Floor(N)); // floor to fix decimal problem\n\
    \        int N2 = N / 1000; // integer division\n        if (N2 != 0)\n      \
    \      N = (N % 1000) * 1000; // ceil to fix decimal problem\n        var result\
    \ = \"\";\n        for (int i = 1; i <= Math.Log10(N2); i++)\n            result\
    \ += ((int)Math.Pow(10.0, N2 - i)).ToString();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe9fwd8o8.cs(23,13): error CS0841: Cannot use local variable ''N'' before
    it is declared

    /tmp/tmpe9fwd8o8.cs(25,13): error CS0136: A local or parameter named ''N'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpe9fwd8o8.cs(25,44): error CS0841: Cannot use local variable ''N'' before
    it is declared

    /tmp/tmpe9fwd8o8.cs(26,18): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        long remainder\
    \ = N % 2;\n        long base = 1;\n        while (n > base) {\n            remainder\
    \ /= 2;\n            result += (remainder % 2 == 0) ? \"1\" : \"0\";\n       \
    \     remainder /= 2;\n            base <<= 1;\n        }\n        if (remainder\
    \ > 0) {\n            result += (remainder % 2 == 0) ? \"1\" : \"0\";\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc16gyu0m.cs(25,14): error CS1001: Identifier expected

    /tmp/tmpc16gyu0m.cs(25,14): error CS1002: ; expected

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var result = \"\";\n        if (N < 0)\n\
    \            return \"\";\n        double x = Math.Abs(N);\n        double y =\
    \ Math.Floor(x);\n        while (y > 0) {\n            long yy = y;\n        \
    \    long xx = x;\n            double dd = xx - yy;\n            if (dd < 0.5f)\
    \ {\n                dd += 1;\n                y -= 1;\n            } else {\n\
    \                dd = dd - 1;\n                x--;\n            }\n         \
    \   result += Convert.ToString(dd);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc3a_7wau.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpc3a_7wau.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        while (N !=  0)\
    \ {\n            long digit = N % 10;\n            sum += digit;\n           \
    \ N = N / 10;\n        }\n        return String.Concat(Enumerable.Range(0, sum).Select(d\
    \ => Convert.ToString(d,2)));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp07xbf7op.cs(29,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = \"\";\n        var remainder\
    \ = 0;\n        int length = Binary(N).Length;\n        var sum = 0;\n       \
    \ var lastGroup = N % Math.Pow(10, length);\n        var currentGroup = lastGroup;\n\
    \        bool isLastGroupValid = true;\n        int bitIndex = 0;\n        while\
    \ (N > 0) {\n            int digit = currentGroup % 10;\n            sum += digit;\n\
    \            currentGroup = (currentGroup / 10).ToString().Length > length ? currentGroup\
    \ % Math.Pow(10, length - 1) : 0;\n            if (isLastGroupValid) {\n     \
    \           binary = digit.ToString() + binary;\n                isLastGroupValid\
    \ = false;\n                bitIndex++;\n                if (bitIndex == length)\
    \ {\n                    sum += lastGroup;\n                    isLastGroupValid\
    \ = true;\n                }\n            } else {\n                isLastGroupValid\
    \ = true;\n            }\n        }\n        if (sum != lastGroup) {\n       \
    \     sum += lastGroup;\n        }\n        if (sum > Math.Pow(10, length - 1))\
    \ {\n            sum = sum - (Math.Pow(10, length - 1));\n        }\n        return\
    \ binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpml2s43zd.cs(25,22): error CS0103: The name ''Binary'' does not exist in
    the current context

    /tmp/tmpml2s43zd.cs(32,25): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpml2s43zd.cs(40,21): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpml2s43zd.cs(48,13): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpml2s43zd.cs(51,19): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpml2s43zd.cs(24,13): warning CS0219: The variable ''remainder'' is assigned
    but its value is never used

    '
  timestamp: 1659977242
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 10) {\n            return string.Format(\"\
    {0}\", N);\n        }\n        long m = 1;\n        string res = \"\";\n     \
    \   while (N / (10 * m) > 0) {\n            m += 1;\n            N -= (10 * m)\
    \ * m;\n        }\n        int rem = (int) (N / (m * m));\n        int val = (int)\
    \ (N % (m * m));\n        while (val > 0) {\n            res += Convert.ToString(Convert.ToString(val\
    \ % 2).PadLeft(1, '0'), 2);\n            val = (int) (val / 2);\n        }\n \
    \       res += Convert.ToString(Convert.ToString(rem % 2).PadLeft(1, '0'), 2);\n\
    \        while (res.Length > 1) {\n            res = \"0\" + res;\n        }\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx_ijjy1w.cs(35,80): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    /tmp/tmpx_ijjy1w.cs(38,76): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659977242
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        while (true)\
    \ {\n            long n = N;\n            while (n > 0) {\n                long\
    \ r = n % 2;\n                n /= 2;\n                s += Convert.ToString(Math.Abs(r));\n\
    \            }\n            if (n == 0) {\n                break;\n          \
    \  }\n            if (n % 2 == 0) {\n                s += \"1\";\n           \
    \ }\n            N /= 2;\n        }\n        return s;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <274b1311504749afa25cb4e0133c9ab5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <274b1311504749afa25cb4e0133c9ab5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977243
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string retVal = \"0\";\n        string\
    \ tempStr = \"\";\n        while (N !=0) {\n            tempStr = \"\" + Math.Abs(N\
    \ % 2);\n            retVal += tempStr;\n            N = N / 2;\n        }\n \
    \       return retVal;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eaeedf0e4115491e8a599b3baf0fd65b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eaeedf0e4115491e8a599b3baf0fd65b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977243
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Your code here\n        int sum =\
    \ 0;\n        while (N > 0) {\n            sum += (N % 10);\n            N = N\
    \ / 10;\n        }\n        return (sum == 0 ? \"0\" : Convert.ToString(sum));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp54p9rrwr.cs(26,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977243
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var result = \"\";\n        var current\
    \ = 0;\n\n        while (current < N) {\n            result += Convert.ToString(N\
    \ % 2, 2).PadLeft(1, '0');\n            N /= 2;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <43f5a050537c4cc9bfd7e5a89920f929>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <43f5a050537c4cc9bfd7e5a89920f929>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977243
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        BigInteger bi;\n        BigInteger bi1;\n\
    \        BigInteger bi2;\n        BigInteger bi3;\n        BigInteger bi4;\n \
    \       BigInteger bi5;\n        BigInteger bi6;\n        BigInteger bi7;\n  \
    \      BigInteger bi8;\n        BigInteger bi9;\n        BigInteger bi10;\n  \
    \      BigInteger bi11;\n        BigInteger bi12;\n        BigInteger bi13;\n\
    \        BigInteger bi14;\n        BigInteger bi15;\n        BigInteger bi16;\n\
    \        BigInteger bi17;\n        BigInteger bi18;\n        BigInteger bi19;\n\
    \        BigInteger bi20;\n        BigInteger bi21;\n        BigInteger bi22;\n\
    \        BigInteger bi23;\n        BigInteger bi24;\n        BigInteger bi25;\n\
    \        BigInteger bi26;\n        BigInteger bi27;\n        BigInteger bi28;\n\
    \        BigInteger bi29;\n        BigInteger bi30;\n        BigInteger bi31;\n\
    \        BigInteger bi32;\n        BigInteger bi33;\n        BigInteger bi34;\n\
    \        BigInteger bi35;\n        BigInteger bi36;\n        BigInteger bi37;\n\
    \        BigInteger bi38;\n        BigInteger bi39;\n        BigInteger bi40;\n\
    \        BigInteger bi41;\n        BigInteger bi42;\n        BigInteger bi43;\n\
    \        BigInteger bi44;\n        BigInteger bi45;\n        BigInteger bi46;\n\
    \        BigInteger bi47;\n        BigInteger bi48;\n        BigInteger bi49;\n\
    \        BigInteger bi50;\n        BigInteger bi51;\n        BigInteger bi52;\n\
    \        BigInteger bi53;\n        BigInteger bi54;\n        BigInteger bi55;\n\
    \        BigInteger bi56;\n        BigInteger bi57;\n        BigInteger bi58;\n\
    \        BigInteger bi59;\n        BigInteger bi60;\n        BigInteger bi61;\n\
    \        BigInteger bi62;\n        BigInteger bi63;\n        BigInteger bi64;\n\
    \        BigInteger bi65;\n        BigInteger bi66;\n        BigInteger bi67;\n\
    \        BigInteger bi68;\n        BigInteger bi69;\n        BigInteger bi70;\n\
    \        BigInteger bi71;\n        BigInteger bi72;\n        BigInteger bi73;\n\
    \        BigInteger bi74;\n        BigInteger bi75;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5h9p1a2v.cs(23,20): warning CS0168: The variable ''bi'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(24,20): warning CS0168: The variable ''bi1'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(25,20): warning CS0168: The variable ''bi2'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(26,20): warning CS0168: The variable ''bi3'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(27,20): warning CS0168: The variable ''bi4'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(28,20): warning CS0168: The variable ''bi5'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(29,20): warning CS0168: The variable ''bi6'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(30,20): warning CS0168: The variable ''bi7'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(31,20): warning CS0168: The variable ''bi8'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(32,20): warning CS0168: The variable ''bi9'' is declared but
    never used

    /tmp/tmp5h9p1a2v.cs(33,20): warning CS0168: The variable ''bi10'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(34,20): warning CS0168: The variable ''bi11'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(35,20): warning CS0168: The variable ''bi12'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(36,20): warning CS0168: The variable ''bi13'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(37,20): warning CS0168: The variable ''bi14'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(38,20): warning CS0168: The variable ''bi15'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(39,20): warning CS0168: The variable ''bi16'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(40,20): warning CS0168: The variable ''bi17'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(41,20): warning CS0168: The variable ''bi18'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(42,20): warning CS0168: The variable ''bi19'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(43,20): warning CS0168: The variable ''bi20'' is declared
    but never used

    /tmp/tmp5h9p1a2v.cs(4'
  timestamp: 1659977243
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N == 0)\n            return \"0\"\
    ;\n        var numStr = N % 2 == 0 ? \"1\" : \"0\";\n        if (N / 2 > 10)\n\
    \            numStr += Solve(N / 2);\n        return numStr;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <690df419f08c4b67ac2e5ac4759080c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <690df419f08c4b67ac2e5ac4759080c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977243
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        string binary\
    \ = Convert.ToString(N, 2);\n        foreach (char c in binary) {\n          \
    \  long number = Convert.ToInt64(c);\n            sum += number;\n        }\n\
    \        return Convert.ToString(sum, 2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6623ec7a63254335bb6d68204601ef29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6623ec7a63254335bb6d68204601ef29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977243
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var result = new StringBuilder();\n \
    \       long sum = N;\n        while (sum > 0) {\n            long digit = sum\
    \ % 10;\n            result.Insert(0, digit.ToString());\n            sum = sum\
    \ / 10;\n        }\n        return result.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e354efe8ecd740488dc2a6cbedbadb64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e354efe8ecd740488dc2a6cbedbadb64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977243
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        while\
    \ (N !=0){\n            result = (N % 2) + result;\n            N = N / 2;\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff0e1a92cc814a478507b30c06d03607>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff0e1a92cc814a478507b30c06d03607>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977243
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long total = 0;\n        string s = string.Empty;\n\
    \        while (true) {\n            int digit = 0;\n            int remain =\
    \ N / 10;\n            int tens = N % 10;\n            if (remain == 0) return\
    \ s;\n            while (remain > 0) {\n                digit = digit * 10 + remain%2;\n\
    \                remain = remain / 2;\n            }\n            s = tens + new\
    \ String(new char[] {(char)('0' + digit)});\n            N = N - remain;\n   \
    \         if (N == 0) break;\n        }\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyv7sf_61.cs(27,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyv7sf_61.cs(28,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyv7sf_61.cs(23,14): warning CS0219: The variable ''total'' is assigned
    but its value is never used

    '
  timestamp: 1659977243
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        Debug.Assert(N >= 0);\n        long n\
    \ = (long)Math.Abs(N);\n        long sum = 0;\n        long d = 0;\n        while\
    \ (n-- > 0) {\n            d = n % 10;\n            sum += d * d;\n        }\n\
    \        Debug.Assert(sum >= 0);\n        long num = (int)Math.Pow(2, (int)Math.Log10(sum))\
    \ + 1;\n        string s = \"\";\n        while (num-- > 0) {\n            int\
    \ r = (int)(num % 2);\n            s = Convert.ToString(Convert.ToChar(65 + r),\
    \ 2);\n            num = (int)Math.Pow(2, (int)Math.Log10(sum) + 1);\n       \
    \ }\n        return s;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        string x =\
    \ Convert.ToString(N, 2);\n        for (int i = 1; i < x.Length; i++) {\n    \
    \        s += (i > 0 && x[i] != \"0\") ? x[i] + \"1\" : x[i];\n        }\n   \
    \     return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4s404iox.cs(26,28): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp4s404iox.cs(26,18): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''string'' and ''char''

    '
  timestamp: 1659977243
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long x = N;\n        string str = \"\"\
    ;\n        while (x > 0) {\n            long remainder = x % 10;\n           \
    \ x = x / 10;\n            str = Convert.ToString(remainder) + str;\n        }\n\
    \        return str;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <901bd6ede81442aebdd8ee0c89784bcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <901bd6ede81442aebdd8ee0c89784bcb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977243
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long result = N;\n        long sum =\
    \ 0;\n        int binary = 1;\n\n        // Keep adding digits in binary until\
    \ number is 0\n        while (result > 0) {\n            sum += (result % 10);\n\
    \            result /= 10;\n            binary++;\n        }\n\n        // convert\
    \ number to binary string\n        string s = Convert.ToString(sum, 2);\n    \
    \    if (s.Length > binary) s = s.Substring(0, binary);\n\n        // append binary\
    \ string\n        string result = s.PadLeft(binary, 0, (char)32);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu2v7pfg.cs(39,16): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpsu2v7pfg.cs(39,27): error CS1501: No overload for method ''PadLeft'' takes
    3 arguments

    /tmp/tmpsu2v7pfg.cs(40,16): error CS0029: Cannot implicitly convert type ''long''
    to ''string''

    '
  timestamp: 1659977243
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long x = 0;\n        long y = 0;\n  \
    \      long z = 0;\n        if (N <= 0) return \"0\";\n\n        if (N == 1) return\
    \ \"1\";\n\n        long remainder;\n        string binaryString = \"\";\n\n \
    \       do {\n            remainder = N % 2;\n            N /= 2;\n          \
    \  binaryString = remainder + binaryString;\n        } while (N > 0);\n\n    \
    \    if (binaryString.Length > 0) {\n            while (binaryString.Length >\
    \ 0) {\n                if (binaryString[0] == 1)\n                    x /= 2;\n\
    \                else\n                    y /= 2;\n                binaryString\
    \ = binaryString.Substring(1) + binaryString.Substring(0, 1);\n            }\n\
    \            while (x > 0) {\n                z += x;\n                x /= 10;\n\
    \            }\n            while (y > 0) {\n                z += y;\n       \
    \         y /= 10;\n            }\n        }\n\n        return binaryString +\
    \ Solve(z);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Initialize variables\n        var\
    \ result = \"\";\n        var numDigitsToAdd = 1; // the most significant digit\
    \ will be added first\n        // loop from most significant digit to least significant\n\
    \        do {\n            // the digital value of N modulo 10\n            var\
    \ mod = N % 10;\n            // add mod binary digit\n            result += numDigitsToAdd\
    \ + mod;\n            // get the next most significant digit of N\n          \
    \  N = N / 10;\n            // get the least significant digit\n            numDigitsToAdd--;\n\
    \        } while (N !=0);\n\n        // return the result\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc2f21e58b6c483f98ae82e7a5e080b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc2f21e58b6c483f98ae82e7a5e080b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        bool isNegative = N < 0L;\n        long\
    \ numOfDigits = 0;\n        string strBinNum = \"\";\n        while (N != 0L)\
    \ {\n            numOfDigits++;\n            N /= 10L;\n        }\n        strBinNum\
    \ = string.Join(\"\", Enumerable\n            .Repeat(\"0\", numOfDigits)\n  \
    \          .Select(r => Convert.ToString(r, 2))\n            .ToArray());\n  \
    \      if (!isNegative)\n            strBinNum = strBinNum.Substring(strBinNum.Length\
    \ - 1, 1);\n        return strBinNum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpewa90cz8.cs(31,26): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpewa90cz8.cs(32,46): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string res = \"\";\n        long num\
    \ = N;\n        if (num <= 1000) {\n            while (num > 0) {\n          \
    \      int digit = num % 10;\n                res += (char)(digit);\n        \
    \        num /= 10;\n            }\n            res = res.PadRight(9, '0');\n\
    \            return res;\n        }\n        StringBuilder sb = new StringBuilder(\"\
    \");\n        while (num > 0) {\n            int digit = num % 10;\n         \
    \   sb.Append((char)(digit + '0'));\n            num /= 10;\n        }\n     \
    \   sb.Append(char.MaxValue);\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8it90ihc.cs(27,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8it90ihc.cs(36,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977244
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string res = \"\";\n        long d =\
    \ N;\n        while (d != 0) {\n            long t = d % 10;\n            int\
    \ s = Convert.ToInt32(Math.Pow(2.0, Double.Parse(t.ToString())));\n          \
    \  d /= 10;\n            res = s + res;\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <414ace6e18cb4655b7685a9c6250b6b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <414ace6e18cb4655b7685a9c6250b6b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var result = new List<string>();\n  \
    \      var x = N;\n        while (x > 1) {\n            if (x % 2 == 0) {\n  \
    \              var n = x >> 1;\n                result.Add(\"1\" + n.ToString());\n\
    \            } else {\n                var n = (x >> 1) ^ 3;\n               \
    \ result.Add(\"1\" + n.ToString());\n            }\n            x = n;\n     \
    \   }\n        var r = result.Last().ToString();\n        result.Remove(r);\n\
    \        return r.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuiy5w28j.cs(33,17): error CS0103: The name ''n'' does not exist in the
    current context

    '
  timestamp: 1659977244
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        bool isNegative = N < 0;\n        string\
    \ binary = Convert.ToString(Math.Abs(N), 2);\n        long sum = 0;\n        foreach\
    \ (char c in binary) {\n            sum += (long)Math.Pow(2, Convert.ToInt32(c)\
    \ - 1);\n        }\n        if (isNegative)\n            sum = -sum;\n       \
    \ return Convert.ToString(sum, 2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <108c73b2493d41d2b2c0d21c6ee31f03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <108c73b2493d41d2b2c0d21c6ee31f03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        bool isNegative = (N < 0);\n        long\
    \ bitCount = isNegative ? -N : N;\n        long sum = 0;\n        while (bits\
    \ > 0) {\n            sum <<= 1;\n            sum += bitCount--;\n        }\n\
    \        if (isNegative)\n            return sum.ToString().Substring(1);\n  \
    \      return sum.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnt2005w5.cs(26,16): error CS0103: The name ''bits'' does not exist in
    the current context

    '
  timestamp: 1659977244
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var s = \"\";\n        long remainder\
    \ = N % 2;\n        while (remainder > 0)\n        {\n            s = Convert.ToString((int)remainder)\
    \ + s;\n            remainder = N / 10;\n        }\n        if (N > 0)\n     \
    \   {\n            s = Convert.ToString((int)N) + s;\n        }\n        return\
    \ s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <443d15da4a664397ba67e5a745a68d59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <443d15da4a664397ba67e5a745a68d59>:0 \n"
  stdout: None
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long num = 0;\n        long sum = 0;\n\
    \n        while (N /= 10) {\n            num = num * 10 + N % 10;\n          \
    \  sum += num;\n            N /= 10;\n        }\n\n        string result = Convert.ToString(sum,\
    \ 2);\n\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8pd3fxtq.cs(26,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Initialization\n        string result\
    \ = \"\";\n        string str = \"\";\n        long x = 0;\n        long y = 0;\n\
    \        long z = 0;\n        int num_bits = 0;\n        bool neg = false;\n \
    \       bool leading_zero = false;\n        bool is_even = false;\n\n        string\
    \ x = \"\";\n        string result = \"\";\n\n        // If N is even, its sum\
    \ is equal to N\n        if (N % 2 == 0) {\n            result = N.ToString();\n\
    \            Console.WriteLine(\"Even\");\n            return result;\n      \
    \  }\n        // If N is negative, its sum is equal to N * 2\n        else if\
    \ (N < 0) {\n            result = \"-\";\n            neg = true;\n          \
    \  Console.WriteLine(\"Negative\");\n            return result;\n        }\n \
    \       // Otherwise N is positive\n        else {\n            if (N == 0) {\n\
    \                result = \"0\";\n                return result;\n           \
    \ }\n            while (N > 0) {\n                // Figure out how many bits\
    \ N has\n                num_bits = num_bits;\n                if (N % 2 == 0)\
    \ {\n                    num_bits = num_bits + 1;\n                }\n       \
    \         N = (N / 2);\n            }\n            x = Convert.ToString(N);\n\n\
    \            while (num_bits > 0) {\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n                y = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(y);\n                z = Convert.ToInt32(x);\n\
    \                x = Convert.ToString(z);\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6_h5ux27.cs(107,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp6_h5ux27.cs(115,2): error CS1513: } expected

    '
  timestamp: 1659977244
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var s = \"\";\n        var r = new Random();\n\
    \        while(true) {\n            var t = r.Next() % 10;\n            if (s.Length\
    \ > 0) {\n                s += \"0\";\n            }\n            s += t.ToString();\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Set bits to 0\n        long temp =\
    \ 0;\n        while (N --> 0) {\n            temp <<= 1;\n            temp |=\
    \ (N & 1);\n        }\n\n        // Convert to binary\n        string binary =\
    \ temp;\n        int remaining = temp.Length;\n\n        // Count number of zeros\n\
    \        while (remaining --> 0) {\n            if (binary != \"0\") {\n     \
    \           binary += \"1\";\n            } else {\n                binary +=\
    \ \"0\";\n            }\n        }\n\n        // Return answer\n        return\
    \ binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphpaacyr7.cs(31,25): error CS0029: Cannot implicitly convert type ''long''
    to ''string''

    /tmp/tmphpaacyr7.cs(32,30): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0) {\n            throw new Exception(\"\
    Error\");\n        }\n        var sum = 0;\n        var binary = BigInteger.Pow(2,\
    \ N).ToString(2);\n        var sb = new StringBuilder();\n        for (var i =\
    \ 0; i < binary.Length; i++) {\n            if (binary[i] != \"0\") sb.Append(binary[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5cmaw4rx.cs(27,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp5cmaw4rx.cs(27,52): error CS1503: Argument 1: cannot convert from ''int''
    to ''System.IFormatProvider''

    /tmp/tmp5cmaw4rx.cs(30,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp5cmaw4rx.cs(26,13): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        return string.Join(\"\", SolveHelper(N).Select(c\
    \ => Convert.ToString(c, 2)).ToArray());\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpogvw2wgn.cs(23,32): error CS0103: The name ''SolveHelper'' does not exist
    in the current context

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        return Solve(N, 0);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqpev975p.cs(23,16): error CS1501: No overload for method ''Solve'' takes
    2 arguments

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string ans = \"\";\n        if (N ==\
    \ 0)\n            return ans;\n        string numStr = N.ToString();\n       \
    \ long pow = long.Parse(numStr);\n        string binStr = \"\";\n        int powLen\
    \ = numStr.Length;\n        int bitPos = 0;\n        ans += numStr[powLen - 1];\n\
    \        while (pow != 0) {\n            pow /= 10;\n            ans += \"1\"\
    ;\n            bitPos = powLen - 1;\n            while ((pow % 2) == 0) {\n  \
    \              ans += numStr[bitPos];\n                pow /= 2;\n           \
    \     bitPos--;\n            }\n        }\n        if (ans.Length == 1)\n    \
    \        ans = ans.Remove(1);\n        return ans;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n \
    \   Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.Solve (System.Int64 N) [0x00072] in <549eabefabfc4aad82621886b06fca35>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <549eabefabfc4aad82621886b06fca35>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.Solve (System.Int64 N) [0x00072]\
    \ in <549eabefabfc4aad82621886b06fca35>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <549eabefabfc4aad82621886b06fca35>:0 \n"
  stdout: ''
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // If N is 0 then return \"0\"\n    \
    \    if (N == 0) {\n            return \"0\";\n        }\n        // If N is 1\
    \ then return \"1\"\n        if (N == 1) {\n            return \"1\";\n      \
    \  }\n        // If N is greater than or equal to 4 then return \"0\"\n      \
    \  if (N >= 4) {\n            return \"0\";\n        }\n        // If N is greater\
    \ than or equal to 10 then return \"0\"\n        if (N >= 10) {\n            return\
    \ \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n       \
    \ // Keep dividing the number by 2 until its less than or equal to 10\n      \
    \  while (N >= 10) {\n            long div = N / 10;\n            int remainder\
    \ = N % 10;\n            sb.Append(GetBinary(div));\n            sb.Append(GetBinary(remainder));\n\
    \            N = div;\n        }\n        // At this point the number should only\
    \ have one digit\n        int remainder = N % 10;\n        sb.Append(GetBinary(remainder));\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpntjpolhu.cs(43,17): error CS0136: A local or parameter named ''remainder''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpntjpolhu.cs(43,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntjpolhu.cs(44,23): error CS0103: The name ''GetBinary'' does not exist
    in the current context

    /tmp/tmpntjpolhu.cs(45,23): error CS0103: The name ''GetBinary'' does not exist
    in the current context

    /tmp/tmpntjpolhu.cs(49,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntjpolhu.cs(50,19): error CS0103: The name ''GetBinary'' does not exist
    in the current context

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0)\n            return string.Empty;\n\
    \        var binary = Bin(N);\n        var sum = string.Empty;\n        foreach\
    \ (var digit in binary.OrderBy(x => x)\n            .ThenBy(x => x.ToString()[0])\n\
    \            .Select(x => x.ToString()[1])) {\n            sum += digit;\n   \
    \     }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsp8o4cdi.cs(25,22): error CS0103: The name ''Bin'' does not exist in the
    current context

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        Debug.Assert(N >= 0);\n        long remainder\
    \ = 0;\n        int digit = 1;\n        List<long> binaryNumbers = new List<long>();\n\
    \n        while (N > 0) {\n            remainder = N % 10;\n            binaryNumbers.Add(remainder);\n\
    \            N /= 10;\n            digit++;\n        }\n\n        Debug.Assert(binaryNumbers.Count\
    \ > 0);\n        Debug.Assert(digit > 0);\n\n        Debug.Assert(decimal.Divide(decimal.Pow(2,\
    \ digit), binaryNumbers.Count) * binaryNumbers.Count >= digit);\n\n        foreach\
    \ (long binaryNumber in binaryNumbers) {\n            string binaryString = (new\
    \ BinaryNumberFormatter {\n                IntegerDigitGroupingSize = 3,\n   \
    \             IntegerGroupingSize = 3,\n                DecimalSeparator = \"\
    ,\",\n                GroupingSeparator = \":\",\n            }).Format(binaryNumber);\n\
    \n            string digitString = binaryString.Substring(0, binaryString.Length\
    \ - 1);\n            int length = digitString.Length;\n            string zeros\
    \ = \"00000000\";\n\n            if (length < digitString.Length)\n          \
    \      zeros = zeros.Substring(length * 3 - 1);\n\n            string output =\
    \ zeros + digitString;\n            return output;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvttdrkqc.cs(38,45): error CS0117: ''decimal'' does not contain a definition
    for ''Pow''

    /tmp/tmpvttdrkqc.cs(41,40): error CS0246: The type or namespace name ''BinaryNumberFormatter''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpvttdrkqc.cs(22,26): error CS0161: ''Problem.Solve(long)'': not all code
    paths return a value

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = String.Empty;\n     \
    \   while (N !== 0) {\n            long remainder = N % 10;\n            long\
    \ sum = (long)Math.Pow(2, remainder);\n            int digit = sum % 2;\n    \
    \        result += Convert.ToString(digit, 2).PadLeft(remainder, '0');\n     \
    \       N = N / 10;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk_sjyuve.cs(24,20): error CS1525: Invalid expression term ''=''

    '
  timestamp: 1659977244
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Store the digits as integers in a\
    \ collection.\n        List<int> digits = new List<int>();\n        while (N >\
    \ 0)\n            digits.Add(N % 10);\n            N /= 10;\n        // Convert\
    \ the collection to binary.\n        var binary = digits.Select(digit => digit\
    \ != 0 ? \"1\" : \"0\").ToArray();\n        // Return the sum of the digits.\n\
    \        return binary.Aggregate((acc, value) => acc + value);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0eiikyek.cs(26,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        Debug.Assert(N >= 0);\n        StringBuilder\
    \ result = new StringBuilder();\n        long num = N;\n        string binary\
    \ = \"\";\n        while (num > 0) {\n            long remain = num % 10;\n  \
    \          binary = (remain == 0) ? \"\" : (binary.Length > 0 ? \"0\" + binary\
    \ : \"\") + remain;\n            num /= 10;\n        }\n        int len = binary.Length;\n\
    \        for (int i = 1; i < len; ++i) {\n            long next = Convert.ToInt64(binary,\
    \ 2);\n            if (next == 0)\n                break;\n            long rem\
    \ = next % 10;\n            result.Append((rem == 0) ? \"0\" : rem);\n       \
    \     next /= 10;\n        }\n        if (result.Length == 1)\n            result.Append(\"\
    0\");\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdd68_w1j.cs(38,27): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''string'' and ''long''

    '
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string res = string.Empty;\n        if\
    \ (N < 0)\n            return res;\n        string s = string.Empty;\n       \
    \ while (true) {\n            if (N % 2 == 0)\n                s += \"0\";\n \
    \           N /= 2;\n            if (N == 0)\n                break;\n       \
    \     s += \"1\";\n        }\n        if (string.IsNullOrEmpty(res))\n       \
    \     return s;\n        long mod = 1000000007L;\n        long sum = 0;\n    \
    \    for (int i = 0; i < s.Length; i++) {\n            string cs = Convert.ToString(s[i]);\n\
    \            long c = Convert.ToInt64(cs);\n            long d = 0;\n        \
    \    int j = s.Length - 1;\n            while (j >= 0 && j > i) {\n          \
    \      d += (cs[j] - '0') * ((c - '0') / mod);\n                c -= (j > 0) ?\
    \ mod: c;\n                j--;\n            }\n            sum += d;\n      \
    \  }\n        res = Convert.ToString(sum);\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a73faf67934760b437f21f515bf611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50a73faf67934760b437f21f515bf611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        long digit = N;\n\
    \        while (digit > 0) {\n            sum += (long)(digit % 10);\n       \
    \     digit /= 10;\n        }\n        string s = \"\";\n        while (sum >=\
    \ 1) {\n            s += (char)('0' + sum % 2);\n            sum /= 2;\n     \
    \   }\n        return s;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d28a26e6078418aafc65f9cd677235a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d28a26e6078418aafc65f9cd677235a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string digits = N < 0 ? \"-\" + Solve(-N)\
    \ : Solve(N);\n        string ans = \"\";\n        int index = 0;\n        while\
    \ (index < digits.Length) {\n            string tmp = \"\";\n            for (int\
    \ i = digits.Length - 1; i > index; i--) {\n                tmp += digits[i] ==\
    \ \"1\" ? 1 : 0; // Convert binary digits to int\n            }\n            ans\
    \ += tmp;\n            index++;\n        }\n        return ans;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg3mcl9f1.cs(29,24): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // write your code in C# 6.0 with .NET\
    \ FW 4.5 (C# 5.0 with .NET FW 4.0)\n        var numbers = GetBinaryNumbers(N);\n\
    \        double sum = 0;\n        for (int i = 0; i < numbers.Length; i++) {\n\
    \            double value = double.Parse(numbers[i]) / Math.Pow(2.0, i);\n   \
    \         sum += Math.Round(value, 2);\n        }\n        return sum.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplzxqbf5k.cs(24,23): error CS0103: The name ''GetBinaryNumbers'' does not
    exist in the current context

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long n = N;\n        var bits = new List<string>();\n\
    \        while (n >= 1) {\n            int digit = n % 10;\n            bits.Insert(0,\
    \ Convert.ToString(digit, 2).PadLeft(32, '0'));\n            n /= 10;\n      \
    \  }\n        return string.Concat(bits.ToArray());\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcwtewkus.cs(26,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int sum = N % 10;\n        if (sum !=\
    \ 0) {\n            int len = Convert.ToInt32(Math.Ceiling(Math.Log(N, 2)));\n\
    \            string binary = \"\";\n            for (int i = 0; i < len; i++)\
    \ {\n                binary += (sum / 2).ToString();\n                sum += (N\
    \ / 10).ToString().ToInt();\n                N /= 10;\n            }\n       \
    \     return binary;\n        } else {\n            return \"0\";\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg6pve801.cs(23,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg6pve801.cs(29,44): error CS1061: ''string'' does not contain a definition
    for ''ToInt'' and no accessible extension method ''ToInt'' accepting a first argument
    of type ''string'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n\n        // Convert\
    \ the long to a list of digits\n        IList<long> digits = new List<long>(N\
    \ / 10);\n\n        // For each digit\n        foreach (long digit in digits)\
    \ {\n            // Convert each of the digits to a string\n            string\
    \ newDigit = Convert.ToString(digit, 2);\n            // Get the position of the\
    \ digit\n            int position = digits.IndexOf(digit);\n            // Calculate\
    \ the position of the digit in the string\n            int digitPosition = position\
    \ + 1;\n            // Add the string to the list\n            digits.Insert(digitPosition,\
    \ newDigit);\n        }\n\n        // Add the string to a stringbuilder\n    \
    \    StringBuilder sb = new StringBuilder();\n        // Convert each of the digits\
    \ to its binary representation\n        foreach (string s in digits)\n       \
    \     sb.Append(s);\n\n        // Add the stringbuilder to a string\n        result\
    \ = sb.ToString();\n\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcxtvvig3.cs(26,45): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpcxtvvig3.cs(37,42): error CS1503: Argument 2: cannot convert from ''string''
    to ''long''

    /tmp/tmpcxtvvig3.cs(43,9): error CS0030: Cannot convert type ''long'' to ''string''

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        int len\
    \ = Convert.ToInt32(Math.Log10(N));\n        for (int i = 0; i < len; i++) {\n\
    \            long rem = N % 10;\n            int curDigit = Convert.ToInt32(rem);\n\
    \            if (curDigit == 0) {\n                result = (result + \"0\")\n\
    \            } else {\n                result = (result + \"\" + curDigit);\n\
    \            }\n            N /= 10;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpewwwp9x8.cs(29,40): error CS1002: ; expected

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        int temp;\n\
    \        for (int x = 0; x <= 9; x++) {\n            temp = (N % 10) * (2 - x);\n\
    \            N = (N / 10).ToInt64();\n            result += temp.ToString();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0_70j2dy.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0_70j2dy.cs(27,26): error CS1061: ''long'' does not contain a definition
    for ''ToInt64'' and no accessible extension method ''ToInt64'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        double total = 0;\n        string result\
    \ = \"\";\n        while (N /= 2) total = (total + N % 2) * Math.Pow(2, N - 1);\n\
    \        int bits = (int)Math.Log10(Math.Abs(total));\n        while (total >\
    \ Math.Pow(2, bits))\n            total = (total / Math.Pow(2, bits)) * Math.Pow(2,\
    \ bits);\n        int num = (int)total;\n        int remaining = N % num;\n  \
    \      if (remaining != 0) {\n            int pow = 1;\n            int i;\n \
    \           for (i = 0; i < bits; ++i) {\n                result += num / pow\
    \ % 2 == 0 ? \"1\" : \"0\";\n                pow *= 2;\n            }\n      \
    \  }\n        if (result != \"\") result += num % 2 == 0 ? \"1\" : \"0\";\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxju2t_00.cs(25,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpxju2t_00.cs(30,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string ret = \"\";\n        while (N\
    \ !=0)\n        {\n            int i = (int)N % 2;\n            N /= 2;\n    \
    \        ret += i.ToString();\n        }\n        return ret;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe4443930794b35b64396ef1bd05a43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe4443930794b35b64396ef1bd05a43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        int[] digits = new int[N.ToString().Length];\n\
    \        int sum = 0;\n\n        for (int i = 0; i < digits.Length; i++) {\n \
    \           digits[i] = (int)(N % 2);\n            N /= 2;\n        }\n\n    \
    \    for (int i = 0; i < digits.Length; i++) {\n            sum += digits[i];\n\
    \            Console.Write(digits[i]);\n        }\n\n        return sum.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24f3eaea16d544e5aabae1d95b7fc23c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24f3eaea16d544e5aabae1d95b7fc23c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: '0001011110101110'
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string binary = \"\";\n        bool odd\
    \ = true;\n        long temp = N;\n        while(temp > 0) {\n            int\
    \ remainder = temp % 2;\n            if(odd) {\n                binary = \"1\"\
    \ + binary;\n                odd = false;\n            } else {\n            \
    \    binary = \"0\" + binary;\n                odd = true;\n            }\n  \
    \          temp = temp / 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp38q4rhj4.cs(27,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var sum = 0;\n        while (N <= (long)((ulong)Math.Pow(2,\
    \ 31))) {\n            var rem = N % 10;\n            sum += rem * (long)Math.Pow(2,\
    \ 31);\n            N /= 10;\n        }\n        if (N > 0)\n            sum +=\
    \ N % 10;\n        return sum.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7oppxiwo.cs(26,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7oppxiwo.cs(30,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Initialization\n        string s =\
    \ \"\";\n        long x = 0;\n        int j = 0;\n\n        // Main loop\n   \
    \     for (int i = 0; i != N; i++) {\n            x = N % 10;\n            s =\
    \ Convert.ToString(x) + s;\n            N = N / 10;\n\n            // Reset the\
    \ last digit if it was one and we are not on the last digit\n            if (x\
    \ != 0 && i != N - 1) {\n                j = 0;\n                s = Convert.ToString(0);\n\
    \            }\n        }\n\n        // Handle special cases for single digit\n\
    \        if (s.Length == 1) {\n            s = \"0\" + s;\n        }\n\n     \
    \   return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        string res = \"\
    \";\n        while (N !=0) {\n            long digit = N % 10;\n            sum\
    \ += digit;\n            res += digit;\n            N = N / 10;\n        }\n \
    \       if (sum < 0) {\n            return \"0\";\n        } else {\n        \
    \    return res;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e96cd54819d405081034003c3726ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e96cd54819d405081034003c3726ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string res = \"\";\n        long num\
    \ = N;\n        string bin = \"\";\n        while (num > 0) {\n            string\
    \ s = num.ToString();\n            res += s;\n            num = num % 2;\n   \
    \         bin = Convert.ToString(num, 2).PadLeft(8, '0');\n        }\n       \
    \ if (bin.Length > 8) {\n            bin = bin.PadRight(8, '0');\n        }\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <067d6c3cdd144900ab712232431a5b45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <067d6c3cdd144900ab712232431a5b45>:0 \n"
  stdout: None
  timestamp: 1659977251
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        bool flag = false;\n        long numSum\
    \ = 0;\n        string binary = \"\";\n        while (!flag)\n        {\n    \
    \        numSum = Convert.ToInt64(Math.Pow(Math.Pow(10, numSum + 1), N));\n  \
    \          binary = Convert.ToString(numSum);\n            flag = true;\n    \
    \        for (int i = 0; i < binary.Length; i++)\n            {\n            \
    \    if (binary[i] != \"0\")\n                {\n                    flag = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return binary;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4okne79q.cs(33,21): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 0)\n            throw new ArgumentOutOfRangeException(\"\
    N\");\n        long remainder = 0;\n        bool isDivisibleBy2;\n        do\n\
    \        {\n            remainder = N % 2;\n            N = N / 2;\n         \
    \   isDivisibleBy2 = N % 2 != 0;\n        } while (remainder != 0 && isDivisibleBy2);\n\
    \        string strNum = Convert.ToString(N);\n        string result = \"\";\n\
    \        while (isDivisibleBy2)\n        {\n            result += strNum.Substring(0,\
    \ strNum.Length - 1);\n            strNum = strNum.Substring(1, strNum.Length\
    \ - 1);\n            isDivisibleBy2 = strNum.Length != 0;\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dcbe93196ba4420b150590b44620195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dcbe93196ba4420b150590b44620195>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        while\
    \ (N !=  0) {\n            long temp = N % 2;\n            N = N / 2;\n      \
    \      result = result + temp.ToString();\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e021db94f74c4d298826f24c2f537366>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e021db94f74c4d298826f24c2f537366>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        return Solve(ConvertToDecimal(N));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps37q1hoh.cs(23,22): error CS0103: The name ''ConvertToDecimal'' does not
    exist in the current context

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        long k = 0;\n\
    \        while (n > 0) {\n            k += n % 10;\n            n /= 10;\n   \
    \     }\n        if (k > 0) s += \"1\";\n        return s;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpormreyq6.cs(25,16): error CS0103: The name ''n'' does not exist in the
    current context

    /tmp/tmpormreyq6.cs(26,18): error CS0103: The name ''n'' does not exist in the
    current context

    /tmp/tmpormreyq6.cs(27,13): error CS0103: The name ''n'' does not exist in the
    current context

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long sum = 0;\n        string result\
    \ = \"\";\n        long power = 0;\n        while (n > 0) {\n            sum =\
    \ n & 1;\n            n = n >> 1;\n            result += Convert.ToString(sum);\n\
    \            power = (sum * (N % 10));\n            N = N / 10;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx6ek_qyz.cs(26,16): error CS0103: The name ''n'' does not exist in the
    current context

    /tmp/tmpx6ek_qyz.cs(27,19): error CS0103: The name ''n'' does not exist in the
    current context

    /tmp/tmpx6ek_qyz.cs(28,13): error CS0103: The name ''n'' does not exist in the
    current context

    /tmp/tmpx6ek_qyz.cs(28,17): error CS0103: The name ''n'' does not exist in the
    current context

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string s = \"\";\n        long p = 1;\n\
    \        while(p < N) {\n            string s = Solve(p, N);\n            p +=\
    \ 1;\n        }\n        return s;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptvex7jnq.cs(26,20): error CS0136: A local or parameter named ''s'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmptvex7jnq.cs(26,24): error CS1501: No overload for method ''Solve'' takes
    2 arguments

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var result = string.Empty;\n        var\
    \ remainder = N % 2;\n        N = N / 2;\n        long[] result = new long[10];\n\
    \        result[0] = 1;\n        for (int i = 1; i <= 9; i++)\n        {\n   \
    \         result[i] = result[i-1] * (long) Math.Pow(10,i-1) + remainder;\n   \
    \         remainder = result[i] % 2;\n            result[i] = result[i] / 2;\n\
    \        }\n        \n        var result = string.Join(\"\",result.Reverse().ToArray());\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8w_tn716.cs(26,16): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmp8w_tn716.cs(27,9): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmp8w_tn716.cs(30,13): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmp8w_tn716.cs(32,13): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmp8w_tn716.cs(35,13): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        long remain = N % 2;\n        long sum\
    \ = 0;\n        for (int i = 3; i <= (int) Math.Ceiling(Math.Log(N, 2)); i +=\
    \ 2)\n        {\n            sum += remain * i;\n            remain = N / (int)\
    \ i;\n        }\n        long temp = sum % 10;\n        if (temp > 0)\n      \
    \  {\n            string result = String.Format(\"{0:b}\", sum);\n           \
    \ return result;\n        }\n        else\n        {\n            return String.Format(\"\
    {0}\", sum);\n        }\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n\
    \  at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer&\
    \ number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo\
    \ info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.TryFormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T]\
    \ format, System.IFormatProvider provider, System.Span`1[T] destination, System.Int32&\
    \ charsWritten) [0x000a0] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.TryFormat\
    \ (System.Span`1[T] destination, System.Int32& charsWritten, System.ReadOnlySpan`1[T]\
    \ format, System.IFormatProvider provider) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Text.StringBuilder.AppendFormatHelper (System.IFormatProvider\
    \ provider, System.String format, System.ParamsArray args) [0x00308] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.FormatHelper (System.IFormatProvider provider, System.String\
    \ format, System.ParamsArray args) [0x00023] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Format (System.String format, System.Object arg0) [0x00008]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Solve (System.Int64 N)\
    \ [0x00053] in <799b646808e64ea68ed5fbfc07fe0b68>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <799b646808e64ea68ed5fbfc07fe0b68>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Format specifier was invalid.\n  at System.Number.NumberToString\
    \ (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer& number, System.Char\
    \ format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo info,\
    \ System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.TryFormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T]\
    \ format, System.IFormatProvider provider, System.Span`1[T] destination, System.Int32&\
    \ charsWritten) [0x000a0] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int64.TryFormat "
  stdout: ''
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        var result = Convert.ToString(N, 2);\n\
    \        int sum = 0;\n        for (int i = result.Length - 1; i >= 0; i--)\n\
    \        {\n            int curr = Convert.ToInt32(result[i]);\n            sum\
    \ += (curr * (int)Math.Pow(2, i));\n        }\n        var finalResult = Convert.ToString(sum);\n\
    \        return finalResult;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n    Debug.Assert(Solve((150L)).Equals((\"\
    110\")));\n    Debug.Assert(Solve((147L)).Equals((\"1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"\
    1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20b6a1aa09e34abcab8e2008d22d4d19>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20b6a1aa09e34abcab8e2008d22d4d19>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        // Step one:\n        // Find all the\
    \ factors of N.\n        List<long> factors = new List<long>();\n        while\
    \ (N /= 10L) factors.Add(N);\n        // Step two:\n        // Find the first\
    \ factors of two or three and subtract them.\n        // We could have used the\
    \ GCD algorithm, but since there are a lot\n        // of factors, this will be\
    \ much faster.\n        long sum = 0;\n        long x = factors[0];\n        foreach\
    \ (long i in factors.Skip(1)) {\n            while (x % i == 0) x *= i;\n    \
    \        sum += i;\n        }\n        if (x != 1) return string.Format((\"{0}\"\
    ), sum);\n        // Step three:\n        // Find the next multiple of four and\
    \ subtract it.\n        long y = factors[1];\n        sum -= 4;\n        while\
    \ (y != 1) {\n            while (y % 4 == 0) y /= 4;\n            sum += 4;\n\
    \        }\n        return string.Format((\"{0}\"), sum);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"1\")));\n\
    \    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplyguitul.cs(26,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        if (N < 1) throw new ArgumentOutOfRangeException(\"\
    N\", N, \" must be >= 1.\");\n        string s = Convert.ToString(N, 2);\n   \
    \     return s.Replace(\"0\", \"1\").Replace(\"1\", \"0\");\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ba2d13c65dc4217b66a8443e8b08499>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ba2d13c65dc4217b66a8443e8b08499>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string solution = \"1\";\n        int\
    \ decimalCount = 0;\n        while (N > 0) {\n            int decimal = N % 10;\n\
    \            decimal /= 2;\n            solution = solution + Convert.ToString(decimal);\n\
    \            N -= decimal;\n            decimalCount++;\n        }\n        solution\
    \ = solution.PadLeft(decimalCount, '0');\n        return solution;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdrbnc7s.cs(26,17): error CS1001: Identifier expected

    /tmp/tmpzdrbnc7s.cs(26,17): error CS1002: ; expected

    /tmp/tmpzdrbnc7s.cs(26,25): error CS1001: Identifier expected

    /tmp/tmpzdrbnc7s.cs(27,21): error CS1001: Identifier expected

    /tmp/tmpzdrbnc7s.cs(27,21): error CS1002: ; expected

    /tmp/tmpzdrbnc7s.cs(27,21): error CS1525: Invalid expression term ''/=''

    /tmp/tmpzdrbnc7s.cs(28,52): error CS1525: Invalid expression term ''decimal''

    /tmp/tmpzdrbnc7s.cs(29,18): error CS1525: Invalid expression term ''decimal''

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer N, return the total sum of its\
    \ digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\"\
    )\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    //\
    \ (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
    \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public\
    \ static string Solve(long N) {\n        string result = \"\";\n        long N1\
    \ = N;\n        long N2 = N;\n        long N3 = N;\n        while (N /= 10) {\n\
    \            N1 = N1;\n            N2 = N2;\n            N3 = N3;\n        }\n\
    \        long lastDigit = N1;\n        while (lastDigit /= 10) {\n           \
    \ result += lastDigit.ToString();\n            lastDigit *= 2;\n        }\n  \
    \      long tempSum = N2;\n        while (tempSum /= 10) {\n            result\
    \ += tempSum.ToString();\n            tempSum *= 2;\n        }\n        long lastDigit2\
    \ = N3;\n        while (lastDigit2 /= 10) {\n            result += lastDigit2.ToString();\n\
    \            lastDigit2 *= 2;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Solve((1000L)).Equals((\"\
    1\")));\n    Debug.Assert(Solve((150L)).Equals((\"110\")));\n    Debug.Assert(Solve((147L)).Equals((\"\
    1100\")));\n    Debug.Assert(Solve((333L)).Equals((\"1001\")));\n    Debug.Assert(Solve((963L)).Equals((\"\
    10010\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw2cewg6r.cs(27,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpw2cewg6r.cs(33,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpw2cewg6r.cs(38,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpw2cewg6r.cs(43,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpw2cewg6r.cs(28,13): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmpw2cewg6r.cs(29,13): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmpw2cewg6r.cs(30,13): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1659977246
