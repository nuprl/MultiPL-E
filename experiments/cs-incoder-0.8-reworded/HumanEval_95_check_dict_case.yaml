name: HumanEval_95_check_dict_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a dictionary, return true if all keys are strings in lower\
  \ \n    // case or all keys are strings in upper case, else return false.\n    //\
  \ The function should return false is the given dictionary is empty.\n    // Examples:\n\
  \    // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"\
  b\", \"banana\"}}))\n    // (true)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))\n    // (false)\n \
  \   // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {8L,\
  \ \"banana\"}, {\"a\", \"apple\"}}))\n    // (false)\n    // >>> CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}}))\n    // (false)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))\n    // (true)\n    public static bool\
  \ CheckDictCase(Dictionary<string,string> dict) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) ==\
  \ (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n\
  \    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))\
  \ == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (dict==null) return false;\n        foreach(var x in dict)\
    \ {\n            bool isInUpperCase = x.Key.ToUpper() == x.Key;\n            bool\
    \ isInLowerCase = x.Key.ToLower() == x.Key;\n            if (isInUpperCase &&\
    \ !isInLowerCase) {\n                return false;\n            }\n          \
    \  else if (isInLowerCase && !isInUpperCase) {\n                return false;\n\
    \            }\n        }\n        return true;", "        if(dict.Count == 0)\
    \ return false;\n        if(dict.Count == 1) return true;\n        var firstKey\
    \ = dict.First().Key;\n        if(firstKey == null) firstKey = string.Empty;\n\
    \        var lowerKey = string.Format(\"{0}{1}\", firstKey.ToLower(), firstKey.ToUpper());\n\
    \        return dict.ContainsKey(lowerKey) || dict.ContainsKey(string.Format(\"\
    {0}{1}\", firstKey.ToUpper(), firstKey.ToLower()));", "        if(dict.Count ==\
    \ 0) return false;\n        var key = dict.Keys.Single();\n        if(!string.IsNullOrEmpty(key))\n\
    \            return key.All(x.ToLower() || x.ToUpper());\n        return false;",
  "        if (dict.Count == 0) {\n            return false;\n        }\n        if\
    \ (dict.Count % 2 == 0) {\n            for (int i = 0; i < dict.Count; i += 2)\
    \ {\n                string key = dict.ElementAt(i).Key;\n                string\
    \ val = dict.ElementAt(i).Value;\n                if (key.Equals(\"A\") && val.Equals(\"\
    A\")) {\n                    return true;\n                }\n               \
    \ else if (key.Equals(\"B\") && val.Equals(\"B\")) {\n                    return\
    \ true;\n                }\n                else {\n                    return\
    \ false;\n                }\n            }\n        }\n        else {\n      \
    \      for (int i = 0; i < dict.Count; i += 2) {\n                string key =\
    \ dict.ElementAt(i).Key;\n                string val = dict.ElementAt(i).Value;\n\
    \                if (key.Equals(\"A\") && val.Equals(\"A\")) {\n             \
    \       return true;\n                }\n                else if (key.Equals(\"\
    B\") && val.Equals(\"B\")) {\n                    return true;\n             \
    \   }\n                else {\n                    return false;\n           \
    \     }\n            }\n        }\n        return false;", "        if (dict.Count\
    \ <= 0)\n            return false;\n        var keys = new HashSet<string>();\n\
    \        foreach (var item in dict)\n        {\n            if (!keys.Contains(item.Key.ToLower()))\n\
    \                keys.Add(item.Key.ToLower());\n            else\n           \
    \ {\n                var caseInsensitiveKey = item.Key.ToUpper();\n          \
    \      if (!keys.Contains(caseInsensitiveKey))\n                    keys.Add(caseInsensitiveKey);\n\
    \                else\n                    return false;\n            }\n    \
    \    }\n        return true;", "        if (dict == null) {\n            return\
    \ false;\n        }\n        var result = dict.All(item => item != null && item.Key.Length\
    \ > 0);\n        return result;", "        bool isUpperCase = dict.Keys.All(k\
    \ => k.All(c => char.IsUpper(c)));\n        bool isLowerCase = dict.Keys.All(k\
    \ => k.All(c => char.IsLower(c)));\n        return isUpperCase && isLowerCase;",
  '        return CheckDictCase(dict, out error);', "        if (dict == null || dict.Count\
    \ == 0) {\n            return true;\n        }\n        \n        foreach (var\
    \ key in dict.Keys.ToList()) {\n            if (key != key.ToLowerInvariant())\
    \ {\n                return false;\n            }\n        }\n\n        foreach\
    \ (var key in dict.Keys.ToList()) {\n            if (key != key.ToUpperInvariant())\
    \ {\n                return false;\n            }\n        }\n\n        return\
    \ true;", "        var isInLowerCase = dict.Keys.Where(kvp => kvp.Value.Length\
    \ > 0 && char.IsLower(kvp.Value[0])).Any();\n        var isInUpperCase = dict.Keys.Where(kvp\
    \ => kvp.Value.Length > 0 && char.IsUpper(kvp.Value[0])).Any();\n        var isAllCase\
    \ = isInLowerCase && isInUpperCase;\n        return isAllCase;", "        if (dict\
    \ == null) return false;\n        HashSet<string> keys = new HashSet<string>(dict.Keys);\n\
    \        if (keys.Count == 0) return false;\n        if (keys.Count == 1) {\n\
    \            string key = keys.First();\n            if (dict[key] == key) return\
    \ true;\n        }\n        bool ret = true;\n        foreach (string key in keys)\
    \ {\n            string lowerKey = key.ToLower();\n            if (dict[key] !=\
    \ lowerKey) ret = false;\n        }\n        return ret;", "        Dictionary<string,string>\
    \ dict2 = new Dictionary<string,string>();\n        foreach (string key in dict.Keys)\
    \ {\n            if (dict[key.ToLowerInvariant()] != null && !dict2.ContainsKey(key.ToLowerInvariant()))\
    \ {\n                dict2.Add(key.ToLowerInvariant(), dict[key.ToLowerInvariant()]);\n\
    \            } else if (dict[key.ToUpperInvariant()] != null && !dict2.ContainsKey(key.ToUpperInvariant()))\
    \ {\n                dict2.Add(key.ToUpperInvariant(), dict[key.ToUpperInvariant()]);\n\
    \            }\n        }\n        return dict2.Count == dict.Count &&\n     \
    \       dict.All(pair => pair.Value == dict2[pair.Key]);", "        if (dict ==\
    \ null || dict.Count() == 0) return false;\n        foreach(KeyValuePair<string,\
    \ string> kvp in dict) {\n            string lowerCaseKvp = kvp.Key.ToLower();\n\
    \            string upperCaseKvp = kvp.Key.ToUpper();\n            if (!lowerCaseKvp.Equals(kvp.Key)\
    \ && !upperCaseKvp.Equals(kvp.Key)) return false;\n        }\n        return true;",
  "        // Your code here\n        if (dict.Count() == 0)\n            return false;\n\
    \        if (dict.All(pair => !pair.Key.Contains(\"-\"))) // if key contains \"\
    -\" then key is not string\n            return false;\n        foreach (var key\
    \ in dict.Keys) {\n            if (key.Length > 0)\n            {\n          \
    \      if (key.All(c => char.IsUpperOrLower(c))) // if key contains \"-\" then\
    \ key is not string\n                    return false;\n            }\n      \
    \  }\n        return true;", "        bool isString = true;\n        foreach (string\
    \ s in dict.Keys.ToArray()) {\n            if (!s.ToLower().Equals(s))\n     \
    \           isString = false;\n            else\n                isString = !isString;\n\
    \        }\n        return isString;", "        bool isCaseCorrect = true;\n \
    \       if(dict.Count == 0)\n            return isCaseCorrect;\n        foreach(KeyValuePair<string,\
    \ string> kvp in dict)\n        {\n            if(kvp.Value.Length > 0 && char.IsLower(kvp.Value[0])\
    \ && kvp.Value.Length != 1)\n            {\n                isCaseCorrect = false;\n\
    \                break;\n            }\n            if(kvp.Value.Length > 0 &&\
    \ char.IsUpper(kvp.Value[0]) && kvp.Value.Length != 1)\n            {\n      \
    \          isCaseCorrect = false;\n                break;\n            }\n   \
    \         if(kvp.Value.Length > 0 && kvp.Value.Length == 1)\n            {\n \
    \               if(char.IsLower(kvp.Value[0]))\n                    isCaseCorrect\
    \ = false;\n                if(char.IsUpper(kvp.Value[0]))\n                 \
    \   isCaseCorrect = false;\n            }\n        }\n        return isCaseCorrect;",
  "        if (!dict.Any())\n            return false;\n        // check if any key\
    \ has a capital letter\n        string firstKey = dict.First().Key;\n        var\
    \ foundUpper = dict.Where(x => x.Key.Equals(firstKey)).Select(x => x.Value).ToList().Any(x\
    \ => char.IsUpper((byte)x));\n        // if any key has a capital letter, then\
    \ check all keys are in lower case\n        return foundUpper == dict.Any(x =>\
    \ x.Key.Equals(firstKey) && char.IsLower((byte)x.Key));", "        if(dict ==\
    \ null)\n            return false;\n        foreach(KeyValuePair<string, string>\
    \ kvp in dict) {\n            if(IsLower(kvp.Key) || IsUpper(kvp.Key))\n     \
    \           return false;\n        }\n        return true;", "        bool res\
    \ = false;\n        if(dict.Count != 0) {\n            foreach(KeyValuePair<string,\
    \ string> kvp in dict)\n            {\n                string val = (string.IsNullOrEmpty(kvp.Value)\
    \ ? \"-\" : kvp.Value.ToLower());\n                string key = (string.IsNullOrEmpty(kvp.Key)\
    \ ? \"-\" : kvp.Key.ToLower());\n                if(!res.Equals(string.Compare(key,val)))\n\
    \                {\n                    res = string.Compare(key,val) == 0;\n\
    \                }\n            }\n        }\n        return res;", "        var\
    \ allKeysAreInLowerCase = dict.All(x => x.Key.ToLower() == x.Key);\n        var\
    \ allKeysAreInUpperCase = dict.All(x => x.Key.ToUpper() == x.Key);\n        return\
    \ allKeysAreInLowerCase && allKeysAreInUpperCase;", "        bool isStrCase =\
    \ true;\n        if (dict != null && dict.Count > 0) {\n            string lowerCase\
    \ = dict\n                .Where(s => s.Key.ToLower() == s.Key)\n            \
    \    .Select(s => s.Value)\n                .FirstOrDefault();\n            string\
    \ upperCase = dict\n                .Where(s => s.Key.ToUpper() == s.Key)\n  \
    \              .Select(s => s.Value)\n                .FirstOrDefault();\n   \
    \         if (lowerCase != null && upperCase != null &&\n                lowerCase.Equals(upperCase,\
    \ StringComparison.OrdinalIgnoreCase)) {\n                isStrCase = true;\n\
    \            } else {\n                isStrCase = false;\n            }\n   \
    \     }\n        return isStrCase;", "        if (dict.Count <= 1) return true;\n\
    \        bool areDictsCase = true;\n        if (dict.All(i => i.Key.ToLower()\
    \ == i.Key)) return true;\n        if (dict.All(i => i.Key.ToUpper() == i.Key))\
    \ return true;\n        return false;", "        if (dict == null) return false;\n\
    \        \n        if (dict.Keys.Count() == 0) return true;\n        \n      \
    \  // We use Linq here to check each key \n        // is in lower or upper case\
    \ and return true or false.\n        return dict.Keys.Any(d => \n            dict.Keys.Single(d\
    \ => d.ToLowerInvariant() == d.ToLowerInvariant()) || \n            dict.Keys.Single(d\
    \ => d.ToUpperInvariant() == d.ToUpperInvariant())\n        );", "        if (dict\
    \ == null || dict.Count == 0)\n            return false;\n        var dictCase\
    \ = dict.Keys.OfType<string>();\n        return dictCase.All(s => s.ToLowerInvariant()\
    \ == s);", "        bool caseOk = false;\n\n        // The first thing we do is\
    \ check if the dictionary is empty\n        if(dict.Count == 0) {\n          \
    \  return true;\n        }\n\n        // The next thing we do is check if the\
    \ values are all upper or lower\n        // case.\n        foreach(KeyValuePair<string,\
    \ string> kv in dict)\n        {\n            // If the value is not upper or\
    \ lower case, then we return false.\n            if(!CheckCase(kv.Value))\n  \
    \          {\n                return false;\n            }\n\n            // If\
    \ we got here, the value is either all upper or all lower case,\n            //\
    \ so we can assume that the dictionary is ok.\n            caseOk = true;\n  \
    \      }\n\n        return caseOk;", "        if (dict.Count == 0)\n         \
    \   return false;\n        foreach (KeyValuePair<string, string> item in dict)\n\
    \            if (item.Key.ToLower() == item.Key || item.Key.ToUpper() == item.Key)\n\
    \                return true;\n        return false;", "        if (dict.Count\
    \ > 0) {\n            foreach (string key in dict.Keys) {\n                string\
    \ lowerCase = key.ToLower();\n                if (!lowerCase.Equals(key, StringComparison.OrdinalIgnoreCase))\
    \ {\n                    return false;\n                }\n                string\
    \ upperCase = key.ToUpper();\n                if (!upperCase.Equals(key, StringComparison.OrdinalIgnoreCase))\
    \ {\n                    return false;\n                }\n            }\n   \
    \         return true;\n        }\n        return false;", "        bool dictIsEmpty\
    \ = dict.Count == 0;\n        bool dictKeyIsCaseInsensitive = dict.Keys.Cast<string>().All(s\
    \ => s.Equals(s, StringComparison.InvariantCultureIgnoreCase));\n        bool\
    \ dictValueIsCaseInsensitive = dict.Values.Cast<string>().All(s => s.Equals(s,\
    \ StringComparison.InvariantCultureIgnoreCase));\n        return dictIsEmpty ||\
    \ dictKeyIsCaseInsensitive || dictValueIsCaseInsensitive;", "        if(dict ==\
    \ null || dict.Count == 0) return false;\n        var keySet = dict.Keys.ToList();\n\
    \        keySet.Sort();\n        return keySet.All(key => !key.Equals(\"Name\"\
    , StringComparison.InvariantCultureIgnoreCase) || !key.Equals(\"Age\", StringComparison.InvariantCultureIgnoreCase)\
    \ || !key.Equals(\"City\", StringComparison.InvariantCultureIgnoreCase));", " \
    \       if(dict.Count == 0) return false;\n        bool allUpper = true;\n   \
    \     bool allLower = true;\n        foreach(KeyValuePair<string,string> item\
    \ in dict) {\n            if(item.Key.Length > 1) allUpper = false;\n        \
    \    if(item.Key.Length > 1) allLower = false;\n        }\n        return allUpper\
    \ && allLower;", "        if (dict == null) {\n            return false;\n   \
    \     }\n        \n        // Check all keys\n        foreach (var key in dict.Keys)\
    \ {\n            if (key == \"a\" || key == \"A\" || key == \"b\" || key == \"\
    B\" || key == \"c\" || key == \"C\" || key == \"d\" || key == \"D\" || key ==\
    \ \"e\" || key == \"E\" || key == \"f\" || key == \"F\" || key == \"g\" || key\
    \ == \"G\" || key == \"h\" || key == \"H\" || key == \"i\" || key == \"I\" ||\
    \ key == \"j\" || key == \"J\" || key == \"k\" || key == \"K\" || key == \"l\"\
    \ || key == \"L\" || key == \"m\" || key == \"M\" || key == \"n\" || key == \"\
    N\" || key == \"o\" || key == \"O\" || key == \"p\" || key == \"P\" || key ==\
    \ \"q\" || key == \"Q\" || key == \"r\" || key == \"R\" || key == \"s\" || key\
    \ == \"S\" || key == \"t\" || key == \"T\" || key == \"u\" || key == \"U\" ||\
    \ key == \"v\" || key == \"V\" || key == \"w\" || key == \"W\" || key == \"x\"\
    \ || key == \"X\" || key == \"y\" || key == \"Y\" || key == \"z\" || key == \"\
    Z\") {\n                continue;\n            }\n            \n            //\
    \ If all keys are strings in lower case, then all keys are strings\n         \
    \   // also in upper case\n            if (key.Equals(key.ToUpper())) {\n    \
    \            continue;\n            }\n            \n            return false;\n\
    \        }\n        \n        // All keys are strings in lower case, all keys\
    \ are strings in upper case\n        return true;", "        if (dict == null\
    \ || !dict.Any()) {\n            return false;\n        }\n        bool ret =\
    \ true;\n        foreach (var entry in dict) {\n            string key = entry.Key;\n\
    \            string val = entry.Value;\n            bool strInCase = key.Equals(key,\
    \ StringComparison.OrdinalIgnoreCase);\n            bool strInUpperCase = key.Equals(key,\
    \ StringComparison.OrdinalIgnoreCase);\n            if (!strInCase || !strInUpperCase)\
    \ {\n                ret = false;\n                break;\n            }\n   \
    \     }\n        return ret;", "        if (dict == null)\n            return\
    \ false;\n        foreach (string key in dict.Keys)\n        {\n            string\
    \ val = dict[key];\n            bool isupper = val.Equals(val.ToUpper());\n  \
    \          bool islower = val.Equals(val.ToLower());\n            if (!isupper\
    \ && !islower)\n                return false;\n        }\n        return true;",
  "        if (dict.Count == 0)\n            return false;\n        var keys = dict.Keys.ToArray();\n\
    \        return keys.All(key => CheckDictCase(key, dict));", "        if (dict.Count\
    \ == 0) {\n            return true;\n        }\n        bool allInLowerCase =\
    \ true;\n        bool allInUpperCase = true;\n        foreach (string key in dict.Keys)\
    \ {\n            if (!(String.IsNullOrWhiteSpace(key))) {\n                allInLowerCase\
    \ = allInLowerCase && (key.ToLower() == key);\n                allInUpperCase\
    \ = allInUpperCase && (key.ToUpper() == key);\n            }\n        }\n    \
    \    return !(allInLowerCase = allInUpperCase);", "        if (dict.Count < 1)\n\
    \            return false;\n        foreach (KeyValuePair<string,string> kvp in\
    \ dict)\n            if (IsLowerCase(kvp.Key) || IsUpperCase(kvp.Key))\n     \
    \           return true;\n        return false;", "        if (dict == null ||\
    \ dict.Count == 0)\n            return false;\n        List<string> keys = new\
    \ List<string>();\n        List<string> keyUpper = new List<string>();\n     \
    \   foreach (KeyValuePair<string, string> kvp in dict)\n        {\n          \
    \  keys.Add(kvp.Key);\n            keyUpper.Add(kvp.Key.ToUpper());\n        }\n\
    \        bool flag = false;\n        if (keys.Count == keyUpper.Count)\n     \
    \       flag = true;\n        else\n        {\n            foreach (KeyValuePair<string,\
    \ string> kvp in dict)\n            {\n                if (keys.Contains(kvp.Key)\
    \ || keyUpper.Contains(kvp.Key.ToUpper()))\n                    flag = true;\n\
    \                else\n                    flag = false;\n            }\n    \
    \    }\n        return flag;", "        if (dict.Count == 0) return false;\n \
    \       var result = true;\n        foreach (var kvp in dict) {\n            if\
    \ (kvp.Key == null || kvp.Key.ToLowerInvariant() == kvp.Key)\n               \
    \ result &= false;\n            else if (kvp.Key == null || kvp.Key.ToUpperInvariant()\
    \ == kvp.Key)\n                result &= false;\n            else\n          \
    \      result &= true;\n        }\n        return result;", "        // Your code\
    \ here\n        StringBuilder sb = new StringBuilder();\n        foreach (var\
    \ item in dict) {\n            if (item.Key.All(c => char.IsLower(c))) {\n   \
    \             sb.Append(item.Key).Append(\"\\t\");\n            } else {\n   \
    \             sb.Append(item.Key).Append(\"\\t\");\n            }\n        }\n\
    \        return sb.ToString().ToLower() == sb.ToString().ToUpper();", "      \
    \  if(dict.Count == 0) return false;\n        foreach(var item in dict) {\n  \
    \          if(!string.Equals(item.Key.ToLower(), item.Key.ToUpper())) return false;\n\
    \        }\n        return true;", "        if (dict.Count > 0) {\n          \
    \  var upper = new List<string>(dict.Keys.ToList());\n            upper.ForEach(x\
    \ => upper.ForEach(y => dict.Remove(y)));\n            return upper.Count == 0;\n\
    \        }\n        else {\n            return false;\n        }", "        if\
    \ (dict.Count != 0)\n            return true;\n        else\n            return\
    \ false;", "        string str = string.Join(\"\",\n            dict.Where(x =>\
    \ !string.IsNullOrEmpty(x.Key) && x.Key.Length == 0).Select(x => x.Key.ToLower()).ToArray()\n\
    \        );\n        return !string.IsNullOrEmpty(str);", "        foreach (var\
    \ kvp in dict) {\n            string str = kvp.Key.ToLower();\n            bool\
    \ isLower = (bool)Char.IsLower(kvp.Key);\n            bool isUpper = (bool)Char.IsUpper(kvp.Key);\n\
    \            if (isLower != isUpper)\n                return false;\n        }\n\
    \        return true;", "        foreach (var key in dict.Keys) {\n          \
    \  if (key.Equals(key.ToLower()))\n                return true;\n            if\
    \ (key.Equals(key.ToUpper()))\n                return true;\n        }\n     \
    \   return false;", "        if (dict.Count == 0)\n            return false;\n\
    \        bool allStrings = true;\n        foreach (string s in dict) {\n     \
    \       if (!s.Equals(s.ToLower()) && !s.Equals(s.ToUpper()))\n              \
    \  return false;\n        }\n        return true;", "        if (dict==null) return\
    \ false;\n        foreach (var key in dict.Keys) \n            if (key.ToString().ToLowerInvariant().Equals(key.ToString().ToLowerInvariant()))\n\
    \                return true;\n        return false;", "        if (dict.Count\
    \ == 0)\n            return false;\n        string key;\n        foreach (KeyValuePair<string,\
    \ string> pair in dict)\n        {\n            key = pair.Key;\n            if\
    \ ((IsLowerKey(key) && IsUpperKey(key)) ||\n                (IsUpperKey(key) &&\
    \ IsLowerKey(key)))\n            {\n                return false;\n          \
    \  }\n        }\n        return true;", "        foreach (KeyValuePair<string,string>\
    \ pair in dict) {\n            bool lowerCase = pair.Key.ToLower().Equals(pair.Key);\n\
    \            bool upperCase = pair.Key.ToUpper().Equals(pair.Key);\n         \
    \   if (!lowerCase && !upperCase) {\n                return false;\n         \
    \   }\n        }\n        return true;", "        bool allStrings = true;\n  \
    \      foreach (var pair in dict)\n        {\n            allStrings = allStrings\
    \ && !string.IsNullOrEmpty(pair.Key) && !string.IsNullOrEmpty(pair.Value) && pair.Key.ToLower().Equals(pair.Value.ToLower());\n\
    \            allStrings = allStrings && !string.IsNullOrEmpty(pair.Key) && !string.IsNullOrEmpty(pair.Value)\
    \ && pair.Key.ToUpper().Equals(pair.Value.ToUpper());\n        }\n        return\
    \ allStrings;", '        return dict.All(x => x.Value.ToLower() == x.Value.ToUpper());',
  "        bool ret = true;\n\n        foreach (var key in dict.Keys) {\n        \
    \    string lc = key.ToLower();\n            string uc = key.ToUpper();\n    \
    \        if (dict[lc] != dict[uc]) {\n                ret = false;\n         \
    \       break;\n            }\n        }\n\n        return ret;", "        var\
    \ strs = new HashSet<string>(dict.Keys.ToArray());\n        return !strs.Contains(\"\
    Name\") && !strs.Contains(\"Age\") && !strs.Contains(\"City\");", "        if\
    \ (dict.Count == 0) return false;\n        string lower = \"\";\n        string\
    \ upper = \"\";\n        foreach (KeyValuePair<string, string> entry in dict)\
    \ {\n            if (entry.Key.Length > 0)\n                lower += entry.Key.ToLower();\n\
    \            if (entry.Key.Length > 0)\n                upper += entry.Key.ToUpper();\n\
    \        }\n        return lower == upper;", "        foreach(KeyValuePair<string,string>\
    \ kvp in dict) {\n            if(kvp.Key.ToLower() == kvp.Key.ToUpper()) {\n \
    \               return false;\n            }\n        }\n        return true;",
  "        if (dict.Count == 0) {\n            return false;\n        }\n        foreach\
    \ (var key in dict.Keys) {\n            if (key.Length > 0) {\n              \
    \  // Case 1: if all keys are uppercase or all keys are lowercase, return true\n\
    \                return ((dict.Keys.Count() > 0) &&\n                        \
    \ (dict.All(x => (x[0].Equals(key[0], StringComparison.InvariantCultureIgnoreCase)\
    \ || x[0].Equals(key[0], StringComparison.OrdinalIgnoreCase)))));\n          \
    \  } else {\n                // Case 2: if a key is null, return false\n     \
    \           return false;\n            }\n        }\n        // If none of the\
    \ conditions are satisfied, return false\n        return false;", "        if(dict.Count\
    \ < 1) return false; // Empty dictionary\n        foreach(var key in dict) {\n\
    \            if(!string.Equals(key.ToLower(), key.ToUpper()))\n              \
    \  return false;\n        }\n        return true;", "        bool result = true;\n\
    \        if (dict.Count != 0)\n        {\n            foreach (var key in dict.Keys)\n\
    \            {\n                if (key.ToString().ToLower() == key.ToString())\n\
    \                {\n                    result = false;\n                    break;\n\
    \                }\n                else\n                {\n                \
    \    if (key.ToString().ToUpper() == key.ToString())\n                    {\n\
    \                        result = false;\n                        break;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ result;", "        foreach (var item in dict) {\n            if (!(item.Key\
    \ is string || item.Value is string)) {\n                return false;\n     \
    \       }\n        }\n        return true;", "        foreach (KeyValuePair<string,string>\
    \ kvp in dict)\n        {\n            bool lower = false;\n            bool upper\
    \ = false;\n            char[] chars = kvp.Key.ToCharArray();\n            foreach\
    \ (char c in chars)\n            {\n                if (Char.IsLetter(c))\n  \
    \              {\n                    upper = true;\n                }\n     \
    \           else\n                {\n                    lower = true;\n     \
    \           }\n            }\n            if (!lower && !upper)\n            {\n\
    \                return false;\n            }\n        }\n        return true;",
  "        if(dict.Count == 0)\n            return false;\n\n        bool upperCase\
    \ = true;\n        string upperCaseKey;\n        bool lowerCase = true;\n    \
    \    string lowerCaseKey;\n        foreach (KeyValuePair<string, string> kvp in\
    \ dict)\n        {\n            if (kvp.Key.Equals(kvp.Key.ToUpper()))\n     \
    \       {\n                upperCaseKey = kvp.Key;\n            }\n          \
    \  else\n            {\n                upperCaseKey = kvp.Key.ToUpper();\n  \
    \              lowerCaseKey = kvp.Key;\n            }\n\n            if(dict.ContainsKey(lowerCaseKey))\n\
    \            {\n                lowerCase = !dict[kvp.Key].Equals(dict[kvp.Key.ToUpper()]);\n\
    \            }\n            else\n            {\n                lowerCase = !kvp.Value.Equals(kvp.Value.ToUpper());\n\
    \            }\n\n            if (upperCase == lowerCase)\n                return\
    \ false;\n        }\n\n        return true;", "        if (dict.Count() == 0)\
    \ {\n            return false;\n        }\n        bool lowerCase = true;\n  \
    \      bool upperCase = true;\n        foreach (string key in dict.Keys) {\n \
    \           if (key.Length != 0) {\n                lowerCase = lowerCase && (key[0]\
    \ < 'a' || key[0] > 'z');\n                upperCase = upperCase && (key[0] >\
    \ 'A' || key[0] < 'Z');\n            }\n            else {\n                lowerCase\
    \ = true;\n                upperCase = true;\n            }\n        }\n     \
    \   return lowerCase && upperCase;", "        string upperCase = dict.Values.Aggregate(\"\
    \", (a, x) => a + (x.ToUpper()));\n        return upperCase == dict.Values.Aggregate(\"\
    \", (a, x) => a + (x.ToLower()));", "        var retVal = true;\n        if (dict\
    \ == null || dict.Count == 0)\n            return retVal;\n        foreach(var\
    \ k in dict.Keys) {\n            if (k.ToLower() != k.ToUpper()) {\n         \
    \       retVal = false;\n                break;\n            }\n        }\n  \
    \      return retVal;", "        if(dict == null) return false;\n        bool\
    \ checkCase = true;\n        foreach(KeyValuePair<string, string> pair in dict)\
    \ {\n            if(pair.Key.ToLower() != pair.Key && pair.Key.ToUpper() != pair.Key)\
    \ return false;\n        }\n        return checkCase;", "        if(dict == null\
    \ || dict.Count < 1){\n            return false;\n        }\n        foreach(var\
    \ key in dict.Keys){\n            string value = dict[key];\n            string\
    \ lowerString = key.ToLower();\n            string upperString = key.ToUpper();\n\
    \            if(value.Equals(lowerString, StringComparison.OrdinalIgnoreCase))\n\
    \            {\n                if(value.Equals(upperString, StringComparison.OrdinalIgnoreCase)){\n\
    \                    return true;\n                }\n            }\n        \
    \    else if(value.Equals(upperString, StringComparison.OrdinalIgnoreCase)){\n\
    \                return true;\n            }\n        }\n        return false;",
  "        if(dict == null || dict.Count == 0)\n            return false;\n      \
    \  var lower = dict.Keys.ToLowerInvariant();\n        var upper = dict.Keys.ToUpperInvariant();\n\
    \        return lower.All(x => upper.Contains(x)) || upper.All(x => lower.Contains(x));",
  "        foreach(var kv in dict) {\n            string kk = kv.Key.ToLower();\n\
    \            string vv = kv.Value;\n            if (kk != vv) {\n            \
    \    return false;\n            }\n        }\n        return true;", "       \
    \ if (dict == null) return false;\n        bool isCase = false;\n        foreach\
    \ (var v in dict)\n        {\n            string key = v.Key;\n            string\
    \ val = v.Value;\n            isCase = isCase || key.Equals(val, StringComparison.OrdinalIgnoreCase);\n\
    \        }\n        return isCase;", "        if (dict == null)\n            return\
    \ false;\n        \n        foreach (KeyValuePair<string,string> kvp in dict)\n\
    \            if (IsStringKeyCase(kvp.Key, false) && IsStringKeyCase(kvp.Key, true))\n\
    \                return true;\n        \n        return false;", '        return
    CheckDictCase(dict, CultureInfo.CurrentCulture);', "        // Return false if\
    \ given dict is empty\n        if (dict == null)\n            return false;\n\n\
    \        // Loop through dict using LINQ\n        return dict.Keys.All(k => IsStringCase(k));",
  "        foreach (string key in dict.Keys) {\n            if (dict.ContainsKey(key)){\n\
    \                if (!(dict[key].ToLower() == dict[key].ToUpper()))\n        \
    \            return false;\n            }\n        }\n        return true;", " \
    \       if (dict.Count == 0) {\n            return true;\n        }\n\n      \
    \  // Find all strings in lower case\n        var lowerCase = dict.Keys.Where(key\
    \ => key.ToLower() == key).ToList();\n\n        // Find all strings in upper case\n\
    \        var upperCase = dict.Keys.Where(key => key.ToUpper() == key).ToList();\n\
    \n        // If no strings exist, return false\n        if (lowerCase.Count ==\
    \ 0 && upperCase.Count == 0) {\n            return false;\n        }\n\n     \
    \   // If there is at least one string in both lower and upper case, return true\n\
    \        if (lowerCase.Count > 0 || upperCase.Count > 0) {\n            return\
    \ true;\n        }\n\n        // If there is no string in both lower and upper\
    \ case, return false\n        return false;", "        if (dict.Count == 0)\n\
    \            return false;\n        if (dict.Count != 1) {\n            // There\
    \ were more than one entry in the dictionary, so they \n            // must be\
    \ in different cases\n            return false;\n        }\n        string key1\
    \ = dict.Keys.First();\n        string key2 = dict.Keys.Last();\n        string\
    \ key1Lower = key1.ToLower();\n        string key2Lower = key2.ToLower();\n  \
    \      if (key1Lower == key2Lower) {\n            return true;\n        }\n  \
    \      if (key2Lower == key1Lower) {\n            return true;\n        }\n  \
    \      return false;", "        if (dict == null)\n            return false;\n\
    \n        string key;\n        string val;\n\n        foreach (KeyValuePair<string,string>\
    \ entry in dict)\n        {\n            key = entry.Key;\n            val = entry.Value;\n\
    \n            if (string.IsNullOrEmpty(key))\n                return false;\n\
    \            else if (string.IsNullOrEmpty(val))\n                return false;\n\
    \            else\n            {\n                if (key.Length == 1)\n     \
    \           {\n                    if (char.ToLower(val[0]) == val[0])\n     \
    \               {\n                        return true;\n                    }\n\
    \                    else\n                    {\n                        return\
    \ false;\n                    }\n                }\n                else\n   \
    \             {\n                    if (char.ToUpper(val[0]) == val[0])\n   \
    \                 {\n                        return true;\n                  \
    \  }\n                    else\n                    {\n                      \
    \  return false;\n                    }\n                }\n            }\n  \
    \      }\n        return true;", "        if (dict == null || !dict.Any()) {\n\
    \            return false;\n        }\n\n        var dict2 = dict.ToUpper();\n\
    \        bool flag1 = false;\n        bool flag2 = false;\n        bool flag3\
    \ = false;\n\n        foreach (var kv in dict) {\n            string value = kv.Value;\n\
    \            string key = kv.Key;\n            if (key.Contains(\"_\")) {\n  \
    \              flag2 = true;\n            }\n            if (key.Contains(\"_\"\
    )) {\n                flag1 = true;\n            }\n            if (value.Contains(\"\
    _\")) {\n                flag3 = true;\n            }\n        }\n\n        return\
    \ flag1 && flag2 && flag3;", "        bool allStrings = false;\n        string\
    \ value = \"a\";\n        foreach(string key in dict.Keys)\n        {\n      \
    \      if (string.Compare(dict[key], value, true) == 0)\n            {\n     \
    \           allStrings = true;\n            }\n            else\n            {\n\
    \                allStrings = false;\n            }\n            value = toUpper(value);\n\
    \        }\n        return allStrings;", "        if (!dict.Any())\n         \
    \   return false;\n        foreach (var key in dict.Keys) {\n            if (!(key\
    \ is string))\n                return false;\n            if (string.Equals(key.ToLower(),\
    \ key))\n                return true;\n        }\n        foreach (var key in\
    \ dict.Keys) {\n            if (!(key is string))\n                return false;\n\
    \            if (string.Equals(key.ToUpper(), key))\n                return true;\n\
    \        }\n        return false;", "        if (dict.Count == 0) return false;\n\
    \        // Find all items in lower case\n        var lowerDict = dict.Where(x\
    \ => x.Value.ToLower() == x.Value).ToDictionary(x => x.Key, x => x.Value);\n \
    \       if (lowerDict.Count() == 0) return false;\n        // Find all items in\
    \ upper case\n        var upperDict = dict.Where(x => x.Value.ToUpper() == x.Value).ToDictionary(x\
    \ => x.Key, x => x.Value);\n        if (upperDict.Count() == 0) return false;\n\
    \        // Check the dictionary contains any items that are in both dictionaries\n\
    \        return dict.Any(x => lowerDict[x.Key] && upperDict[x.Key]);", "     \
    \   // TODO Auto-generated method stub\n        return false;", "        if (dict\
    \ == null) {\n            return false;\n        }\n        // Convert all keys\
    \ to lower case\n        foreach (KeyValuePair<string,string> kvp in dict) {\n\
    \            string key = kvp.Key.ToLower();\n            string value = kvp.Value;\n\
    \            if (!string.Equals(kvp.Value, kvp.Key.ToLower())) {\n           \
    \     // Key was converted already\n                return false;\n          \
    \  }\n        }\n        // All keys in lower case\n        return true;", " \
    \       if (dict == null) return false; // no dict\n\n        var keys = dict.Keys;\n\
    \        if (dict.ContainsKey(\"\")) return false;\n        if (dict.ContainsKey(null))\
    \ return false;\n        if (dict.ContainsKey(DBNull.Value)) return false;\n \
    \       if (dict.Count == 0) return false;\n\n        foreach (var key in keys)\n\
    \            if (string.Compare(key, \"\", StringComparison.OrdinalIgnoreCase)\
    \ == 0) return false;\n            else if (string.Compare(key, null, StringComparison.OrdinalIgnoreCase)\
    \ == 0) return false;\n            else if (string.Compare(key, DBNull.Value,\
    \ StringComparison.OrdinalIgnoreCase) == 0) return false;\n\n        return true;",
  "        if (dict.Any()) {\n            string key = null;\n            string val\
    \ = null;\n\n            foreach (var keyValuePair in dict) {\n              \
    \  key = (string)keyValuePair.Key;\n                val = (string)keyValuePair.Value;\n\
    \n                if (key.ToLower() == val.ToLower()) {\n                    continue;\n\
    \                }\n\n                if (key.ToUpper() == val.ToUpper()) {\n\
    \                    continue;\n                }\n\n                return false;\n\
    \            }\n\n            return true;\n        }\n\n        return false;",
  '        return !dict.IsEmpty && dict.Select(x => x.Key.ToLowerInvariant()).All(x
    => dict.ContainsKey(x) || dict.ContainsKey(x.ToUpperInvariant()));', "       \
    \ if(dict == null || dict.Count == 0) return false;\n        foreach (var kvp\
    \ in dict) {\n            if(!IsStringInLowerCase(kvp.Key) || !IsStringInUpperCase(kvp.Key))\
    \ return false;\n        }\n        return true;", "        bool returnValue =\
    \ true;\n        bool allKeysAreStrings = true;\n        foreach (string key in\
    \ dict.Keys) {\n            bool isString = !key.Equals(\"\", StringComparison.InvariantCultureIgnoreCase);\n\
    \            if (!isString) { \n                returnValue = false;\n       \
    \         break;\n            }\n            allKeysAreStrings = allKeysAreStrings\
    \ && isString;\n        }\n        return allKeysAreStrings;", "        if (dict.Keys.Count\
    \ == 0) return false;\n        if (dict.Keys.All(s => s.Equals(s.ToLower(), StringComparison.InvariantCultureIgnoreCase)))\n\
    \            return true;\n        if (dict.Keys.All(s => s.Equals(s.ToUpper(),\
    \ StringComparison.InvariantCultureIgnoreCase)))\n            return true;\n \
    \       return false;", "        string lowerKey = \"\";\n        string upperKey\
    \ = \"\";\n        string key = \"\";\n        bool allLower;\n        bool allUpper;\n\
    \n        // Check all keys are strings in lower case.\n        allLower = true;\n\
    \        foreach (string key in dict) {\n            if (!string.IsNullOrEmpty(key.ToLower()))\
    \ {\n                allLower = false;\n                break;\n            }\n\
    \        }\n\n        // Check all keys are strings in upper case.\n        allUpper\
    \ = true;\n        foreach (string key in dict) {\n            if (!string.IsNullOrEmpty(key.ToUpper()))\
    \ {\n                allUpper = false;\n                break;\n            }\n\
    \        }\n\n        if (allLower && !allUpper) {\n            return true;\n\
    \        }\n\n        if (allUpper && !allLower) {\n            return false;\n\
    \        }\n\n        // Check if all keys are string in lower/upper case.\n \
    \       foreach (string key in dict) {\n            lowerKey = key.ToLower();\n\
    \            upperKey = key.ToUpper();\n            if (!string.IsNullOrEmpty(lowerKey)\
    \ && !string.IsNullOrEmpty(upperKey)) {\n                if (!lowerKey.Equals(upperKey))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n\n        return true;", "        foreach(var keyValue in dict) {\n \
    \           string lowerCase = keyValue.Key.ToLower();\n            string upperCase\
    \ = keyValue.Key.ToUpper();\n            if(lowerCase != upperCase)\n        \
    \        return false;\n        }\n        return true;", "        if (dict ==\
    \ null)\n            return false;\n        foreach (KeyValuePair<string, string>\
    \ entry in dict)\n            if (entry.Key.Length > 0)\n                if (!(entry.Key.ToLowerInvariant()\
    \ == entry.Key))\n                    return false;\n            if (entry.Key.Length\
    \ > 0)\n                if (!(entry.Key.ToUpperInvariant() == entry.Key))\n  \
    \                  return false;\n        return true;", "        if (dict.Count()\
    \ < 1)\n            return false;\n        foreach (string key in dict.Keys)\n\
    \        {\n            if (key == key.ToUpper())\n            {\n           \
    \     if (dict.ContainsKey(key))\n                {\n                    return\
    \ false;\n                }\n            }\n            else\n            {\n\
    \                if (dict.ContainsKey(key.ToLower()))\n                {\n   \
    \                 return false;\n                }\n            }\n        }\n\
    \        return true;", "        var result = true;\n        foreach (var kvp\
    \ in dict) {\n            var key = kvp.Key;\n            if (!(key is string\
    \ lowercase && \n                lowercase.CompareTo(\"a\") >= 0 && \n       \
    \         lowercase.CompareTo(\"A\") <= 0) &&\n                !(key is string\
    \ uppercase && \n                uppercase.CompareTo(\"A\") >= 0 && \n       \
    \         uppercase.CompareTo(\"a\") <= 0)) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       if (dict == null)\n            return false;\n\n        if (dict.Count\
    \ != 0)\n        {\n            var allLowerKeys = dict.Keys.Where(k => k.ToLower().Contains('a')\
    \ || k.ToLower().Contains('b')).Any();\n            var allUpperKeys = dict.Keys.Where(k\
    \ => k.ToUpper().Contains('A') || k.ToUpper().Contains('B')).Any();\n        \
    \    return !(allLowerKeys && allUpperKeys);\n        }\n        return false;",
  "        if(!dict.Any()) return false;\n        foreach(KeyValuePair<string,string>\
    \ kvp in dict) {\n            if(!IsStringInLowerCase(kvp.Key) || !IsStringInUpperCase(kvp.Key))\
    \ return false;\n        }\n        return true;", "        foreach (KeyValuePair<string,string>\
    \ kvp in dict) {\n            if (kvp.Key.Length == 0 || kvp.Key.Equals(kvp.Key.ToLower(),\
    \ StringComparison.OrdinalIgnoreCase)) {\n                continue;\n        \
    \    }\n            if (!kvp.Key.Equals(kvp.Key.ToUpper(), StringComparison.OrdinalIgnoreCase))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        if (dict.Count == 0)\n            return false;\n        return dict.All(pair\
    \ => CheckDictCase(pair));", "        if(dict.Count == 0) return false;\n    \
    \    foreach(KeyValuePair<string, string> entry in dict) {\n            if(!String.IsNullOrEmpty(entry.Key)\
    \ && \n                !String.IsNullOrEmpty(entry.Value) &&\n               \
    \ !String.IsNullOrEmpty(entry.Key.ToLower()) && \n                !String.IsNullOrEmpty(entry.Value.ToLower()))\
    \ {\n                return true;\n            }\n        }\n        return false;",
  "        if (dict.Count == 0) {\n            return false;\n        }\n\n      \
    \  foreach (string key in dict.Keys) {\n            bool inUpperCase = true;\n\
    \            bool inLowerCase = true;\n            foreach (char c in key) {\n\
    \                if (Char.IsUpper(c)) {\n                    inUpperCase = false;\n\
    \                }\n                else if (Char.IsLower(c)) {\n            \
    \        inLowerCase = false;\n                }\n            }\n            \n\
    \            if (inUpperCase != inLowerCase) {\n                return false;\n\
    \            }\n        }\n\n        return true;", "        bool caseSensitive\
    \ = true;\n        if (dict.Count > 0) {\n            foreach (KeyValuePair<string,string>\
    \ entry in dict)\n            {\n                if (!(entry.Key.ToLower() ==\
    \ entry.Key.ToUpper()))\n                {\n                    caseSensitive\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return caseSensitive;", "        if(dict.Count() == 0) {\n  \
    \          return false;\n        }\n        foreach(KeyValuePair<string,string>\
    \ kvp in dict) {\n            if(kvp.Value.Length > 0 && kvp.Value.Any(c => char.IsLower(c))\
    \ && kvp.Value.Any(c => char.IsUpper(c))) {\n                return true;\n  \
    \          }\n        }\n        return false;", "        bool ret = dict.All(kvp\
    \ => IsStringInLowerOrUpper(kvp.Key) || IsStringInLowerOrUpper(kvp.Value));\n\
    \        return ret;", "        if (dict.Count == 0) return false;\n        foreach\
    \ (var pair in dict) {\n            if (pair.Key.Length > 0 && IsLowerOrUpper(pair.Key))\n\
    \                return false;\n        }\n        return true;", "        bool\
    \ ret = true;\n        foreach(var key in dict.Keys) {\n            if (!(key\
    \ is string str) || !str.ToLowerInvariant().Equals(key)) return false;\n     \
    \   }\n        foreach(var key in dict.Keys) {\n            if (!(key is string\
    \ str) || !str.ToUpperInvariant().Equals(key)) return false;\n        }\n    \
    \    return ret;", '        return dict.All(kvp => CheckDictCase(kvp));', "  \
    \      return dict?.Keys.All(key => key.ToString().ToLower() == key) ||\n    \
    \        dict?.Keys.All(key => key.ToString().ToUpper() == key);", "        bool\
    \ result = (!dict.IsEmpty)? \n            (((dict.Count == 1)? \n            \
    \    (dict.Keys.Contains(dict.Keys.First()) || dict.Values.Contains(dict.Values.First()))\
    \ :\n                dict.Keys.Select(k => k.ToUpperInvariant()).All(x => dict.Values.Select(v\
    \ => v.ToUpperInvariant()).Contains(x))) :\n                false);\n        return\
    \ result;", "        bool case1 = false;\n        bool case2 = false;\n      \
    \  foreach (var keyValuePair in dict)\n        {\n            string key = keyValuePair.Key;\n\
    \            if (char.IsLower((char) key[0]))\n            {\n               \
    \ case1 = true;\n            }\n            else if (char.IsUpper((char) key[0]))\n\
    \            {\n                case2 = true;\n            }\n            else\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    return case1 && case2;", "        bool areAllKeysStringInLower = false;\n\
    \        bool areAllKeysStringInUpper = false;\n        foreach(var kvp in dict)\
    \ {\n            string key = kvp.Key;\n            if(key.Equals(key.ToUpper(),\
    \ StringComparison.OrdinalIgnoreCase)) {\n                areAllKeysStringInUpper\
    \ = true;\n            } else if(key.Equals(key.ToLower(), StringComparison.OrdinalIgnoreCase))\
    \ {\n                areAllKeysStringInLower = true;\n            } else {\n \
    \               return false;\n            }\n        }\n        return areAllKeysStringInLower\
    \ && areAllKeysStringInUpper;", "        if (dict.Count() != 0)\n        {\n \
    \           var keys = new List<string>();\n            foreach (var item in dict)\n\
    \            {\n                keys.Add(item.Key);\n            }\n         \
    \   foreach (var item in dict)\n            {\n                if (item.Key.ToLower()\
    \ != item.Key.ToUpper())\n                {\n                    return false;\n\
    \                }\n            }\n            return keys.All(k => k.ToLower()\
    \ == k.ToUpper());\n        }\n        else\n        {\n            return false;\n\
    \        }", "        if (dict.Count() == 0) return false;\n        foreach (KeyValuePair<string,string>\
    \ entry in dict) {\n            string key = entry.Key;\n            if (string.IsNullOrWhiteSpace(key))\
    \ {\n                return false;\n            }\n            if (key.Length\
    \ > 0 && char.IsUpper(key.First())) {\n                return false;\n       \
    \     }\n            if (key.Length > 0 && char.IsLower(key.First())) {\n    \
    \            return false;\n            }\n        }\n        return true;", " \
    \       string key1 = \"\";\n        string key2 = \"\";\n        bool flag =\
    \ true;\n        foreach (var item in dict) {\n            key1 = item.Key;\n\
    \            key2 = item.Key.ToLower();\n            flag = flag && item.Key.ToUpper()\
    \ == key2;\n        }\n        return flag;", "        if (dict == null)\n   \
    \         return false;\n        foreach(var k in dict.Keys) {\n            if\
    \ (k.ToUpperInvariant().Equals(k) || k.ToLower().Equals(k)) {\n              \
    \  return true;\n            }\n        }\n        return false;", "        if\
    \ (dict.Count == 0) {\n            return false;\n        }\n        // first\
    \ check each key in dictionary to see if they are strings in lower case\n    \
    \    foreach (var entry in dict) {\n            if (!IsStringInLowerCase(entry.Key))\
    \ {\n                return false;\n            }\n        }\n        // then\
    \ check each key in dictionary to see if they are strings in upper case\n    \
    \    foreach (var entry in dict) {\n            if (!IsStringInUpperCase(entry.Key))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        bool isCased = false;\n        foreach(KeyValuePair<string,string> kvp\
    \ in dict) {\n            if(!string.IsNullOrEmpty(kvp.Key) && (kvp.Key.Length==0))\n\
    \                return false;\n            if(!string.IsNullOrEmpty(kvp.Value)\
    \ && (kvp.Value.Length==0))\n                return false;\n            if (isCased)\n\
    \                continue;\n            isCased = string.Equals(kvp.Key.ToLower(),kvp.Value,StringComparison.OrdinalIgnoreCase);\n\
    \        }\n        return isCased;", "        if (dict == null)\n           \
    \ return false;\n        bool ret = false;\n        foreach (var item in dict)\n\
    \        {\n            var isUpper = item.Key.Equals(item.Key.ToUpper(), StringComparison.OrdinalIgnoreCase);\n\
    \            var isLower = item.Key.Equals(item.Key.ToLower(), StringComparison.OrdinalIgnoreCase);\n\
    \            if (isUpper == true && isLower == true)\n            {\n        \
    \        ret = true;\n            }\n            else if (isUpper == true && isLower\
    \ == false)\n            {\n                ret = false;\n            }\n    \
    \        else if (!isUpper)\n            {\n                ret = false;\n   \
    \         }\n        }\n        return ret;", "        if (dict == null) {\n \
    \           return false;\n        }\n        var strSet = new HashSet<string>();\n\
    \        foreach (var item in dict) {\n            strSet.Add(item.Key);\n   \
    \         strSet.Add(item.Value.ToLower());\n        }\n        return strSet.Count\
    \ == dict.Count;", "        if(dict == null)\n            return false;\n    \
    \    string key = \"\";\n        foreach(KeyValuePair<string,string> kvp in dict)\
    \ {\n            if(!String.IsNullOrEmpty(kvp.Key))\n                key = kvp.Key.ToLower();\n\
    \            else if(!String.IsNullOrEmpty(kvp.Value))\n                key =\
    \ kvp.Value.ToUpper();\n            else\n                return false;\n    \
    \    }\n        return true;", "        if(dict == null || dict.Count == 0) {\n\
    \            return false;\n        }\n        // we cannot change order of items\
    \ while iterating and we need to check both upper and lower\n        foreach(var\
    \ entry in dict.OrderBy(x => x.Key).ThenBy(x => x.Value)) {\n            bool\
    \ upperCase = true;\n            bool lowerCase = true;\n            foreach(var\
    \ key in entry.Key) {\n                upperCase |= Char.IsUpper(key);\n     \
    \           lowerCase |= Char.IsLower(key);\n            }\n            if(!upperCase\
    \ && !lowerCase) {\n                return false;\n            }\n        }\n\
    \        return true;", "        bool isUpper = dict\n            .All(kv => kv.Key.ToUpper()\
    \ != kv.Key)\n            || dict.All(kv => kv.Key.Length == 0 || kv.Key.ToUpper()\
    \ == kv.Key);\n        bool isLower = dict\n            .All(kv => kv.Key.ToLower()\
    \ != kv.Key)\n            || dict.All(kv => kv.Key.Length == 0 || kv.Key.ToLower()\
    \ == kv.Key);\n        return isUpper && isLower;", "        if (dict.Count >\
    \ 0)\n        {\n            // This will return true if all keys are strings\
    \ in lower case or all keys are strings in upper case\n            return dict.All(x\
    \ => x.Key.ToLowerInvariant().Equals(x.Key.ToUpperInvariant()));\n        }\n\
    \        else\n        {\n            // We want to return false if the dictionary\
    \ is empty\n            return false;\n        }", "        if (!dict.Any()) {\n\
    \            return false;\n        }\n        if (dict.Count == 1) {\n      \
    \      return true;\n        }\n\n        var keyValues = dict.Keys.ToList();\n\
    \        string lowerOrUpper = keyValues.Any() ? \"lower\" : \"upper\";\n\n  \
    \      bool isLower = true;\n        bool isUpper = true;\n        foreach (var\
    \ key in keyValues) {\n            if (key.Equals(key.ToLower())) {\n        \
    \        isLower = false;\n            } else if (key.Equals(key.ToUpper())) {\n\
    \                isUpper = false;\n            } else {\n                return\
    \ false;\n            }\n        }\n        return isLower && isUpper;", "   \
    \     if (dict.Count == 0) {\n            return true;\n        }\n        foreach\
    \ (string key in dict.Keys) {\n            if (!(key.Equals(\"Name\") || key.Equals(\"\
    Age\") || key.Equals(\"City\")\n                 || key.Equals(\"STATE\") || key.Equals(\"\
    ZIP\"))) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        if(dict.Count == 0) return false;\n        foreach (var pair\
    \ in dict)\n        {\n            string key = pair.Key.ToLower();\n        \
    \    string val = pair.Value.ToLower();\n            if(String.IsNullOrEmpty(key)\
    \ || String.IsNullOrEmpty(val))\n                return false;\n        }\n  \
    \      return true;", "        if (dict.Count == 0)\n            return false;\n\
    \n        bool isStringInLowerCase = dict.Keys.Cast<string>().All(x => x.ToLower()\
    \ == x);\n        bool isStringInUpperCase = dict.Keys.Cast<string>().All(x =>\
    \ x.ToUpper() == x);\n        bool result = isStringInLowerCase || isStringInUpperCase;\n\
    \n        return result;", "        Dictionary<string, string> dictCase = new\
    \ Dictionary<string, string>();\n        foreach (KeyValuePair<string, string>\
    \ kvp in dict) {\n            string lowerKvp = kvp.Key.ToLowerInvariant();\n\
    \            string upperKvp = kvp.Key.ToUpperInvariant();\n            if (dictCase.ContainsKey(lowerKvp)\
    \ && dictCase[lowerKvp].Equals(upperKvp)) {\n                return true;\n  \
    \          }\n            dictCase.Add(lowerKvp, kvp.Value);\n        }\n    \
    \    return false;", "        // Your code here\n        bool upper = false;\n\
    \        foreach(string key in dict.Keys) {\n            if(key.ToString().ToLower()\
    \ == key) {\n                upper = true;\n                break;\n         \
    \   }\n        }\n\n        bool lower = false;\n        foreach (string key in\
    \ dict.Keys) {\n            if(key.ToString().ToUpper() == key) {\n          \
    \      lower = true;\n                break;\n            }\n        }\n\n   \
    \     if(upper == true && lower == true) {\n            return true;\n       \
    \ }\n\n        return false;", "        if (dict.Count == 0)\n            return\
    \ true;\n        string lowerCaseKeys = string.Join(\",\", dict.Keys.ToList().Select(x\
    \ => x.ToLower()).ToArray());\n        string upperCaseKeys = string.Join(\",\"\
    , dict.Keys.ToList().Select(x => x.ToUpper()).ToArray());\n        return lowerCaseKeys.Equals(\"\
    true\", StringComparison.InvariantCultureIgnoreCase) || upperCaseKeys.Equals(\"\
    true\", StringComparison.InvariantCultureIgnoreCase);", "        if (dict.Count\
    \ == 0) {\n            return false;\n        }\n\n        var lowerDict = new\
    \ Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n        var upperDict\
    \ = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n\n    \
    \    foreach (var entry in dict) {\n            bool isLower = (entry.Key.Length\
    \ < 1 ? true : char.IsLower(entry.Key[0]));\n            bool isUpper = (entry.Key.Length\
    \ < 1 ? true : char.IsUpper(entry.Key[0]));\n\n            if (isLower) {\n  \
    \              lowerDict[entry.Key] = entry.Value;\n            } else {\n   \
    \             upperDict[entry.Key] = entry.Value;\n            }\n        }\n\n\
    \        return lowerDict.Count == dict.Count && upperDict.Count == dict.Count;",
  "        if (dict.Count == 0) {\n            return false;\n        }\n        var\
    \ dictKeys = new List<string>(dict.Keys);\n        dictKeys.Sort();\n        bool\
    \ lowerCase = true;\n        bool upperCase = true;\n        foreach (var kv in\
    \ dictKeys) {\n            var k = kv.Key.ToLower();\n            lowerCase &=\
    \ k.Equals(kv.Key);\n            var v = kv.Value.ToUpper();\n            upperCase\
    \ &= k.Equals(v);\n        }\n        return lowerCase && upperCase;", "     \
    \   return dict.All(d => \n            d.All(\n                k => k.Key\n  \
    \                  .Select(x => char.IsLower(x))\n                    .Aggregate(0,\
    \ (acc, val) => acc + val)\n                == 0\n                || \n      \
    \          k.Key\n                    .Select(x => char.IsUpper(x))\n        \
    \            .Aggregate(0, (acc, val) => acc + val)\n                == 0));",
  "        var dictionary = dict;\n        string str1 = string.Empty;\n        string\
    \ str2 = string.Empty;\n        bool flag = false;\n        if(dictionary.Count!=0)\n\
    \        {\n            foreach (KeyValuePair<string,string> keyValuePair in dictionary)\
    \ {\n                str1 += keyValuePair.Key.ToLower();\n                str2\
    \ += keyValuePair.Key.ToUpper();\n                flag = str1.Equals(str2);\n\
    \            }\n            return flag;\n        }\n        else\n        {\n\
    \            return false;\n        }", "        foreach (var entry in dict) {\n\
    \            var key = entry.Key;\n            if (key.Contains('_')) {\n    \
    \            return false;\n            }\n            if (key >= 'a' && key <=\
    \ 'z') {\n                return true;\n            }\n            if (key >=\
    \ 'A' && key <= 'Z') {\n                return true;\n            }\n        }\n\
    \        return false;", "        bool isString = true;\n        foreach (KeyValuePair<string,\
    \ string> entry in dict)\n        {\n            bool isStringCase = entry.Key.Equals(\"\
    Name\", StringComparison.OrdinalIgnoreCase);\n            if (!isStringCase) {\n\
    \                isString = false;\n            }\n        }\n        return isString;",
  "        string lowerCase = string.Empty;\n        string upperCase = string.Empty;\n\
    \        foreach (KeyValuePair<string,string> entry in dict)\n        {\n    \
    \        lowerCase += entry.Key.ToLower();\n            upperCase += entry.Key.ToUpper();\n\
    \        }\n        if (lowerCase.Equals(upperCase))\n            return true;\n\
    \        return false;", "        bool result = true;\n        if(dict.Count ==\
    \ 0) {\n            result = false;\n        }\n        foreach (KeyValuePair<string,\
    \ string> kvp in dict) {\n            string lowerCase = kvp.Key.ToLower();\n\
    \            string upperCase = kvp.Key.ToUpper();\n            if(lowerCase !=\
    \ kvp.Key || upperCase != kvp.Key) {\n                result = false;\n      \
    \      }\n        }\n        return result;", "        if (dict.Any()) {\n   \
    \         foreach(var kvp in dict) {\n                if (String.IsNullOrEmpty(kvp.Key)\
    \ || !kvp.Key.ToLower().Equals(kvp.Key)) {\n                    return false;\n\
    \                }\n                if (String.IsNullOrEmpty(kvp.Key) || !kvp.Key.ToUpper().Equals(kvp.Key))\
    \ {\n                    return false;\n                }\n            }\n   \
    \         return true;\n        }\n        return false;", "        if (dict.Count\
    \ == 0) {\n            return false;\n        }\n        foreach(var pair in dict)\
    \ {\n            if(!pair.Key.ToLower().Equals(pair.Key.ToUpper())) \n       \
    \         return false;\n        }\n        return true;", "        bool isAllUpper\
    \ = true;\n        bool isAllLower = true;\n        foreach (var item in dict)\
    \ {\n            if (!(String.IsNullOrEmpty(item)))\n            {\n         \
    \       if (!(item.ToLower().Equals(item.ToUpper())))\n                {\n   \
    \                 isAllUpper = false;\n                }\n                else\
    \ if (!(item.ToUpper().Equals(item.ToLower())))\n                {\n         \
    \           isAllLower = false;\n                }\n            }\n        }\n\
    \        return isAllUpper && isAllLower;", "        if (dict.Count == 0)\n  \
    \          return false;\n\n        Dictionary<string, bool> dictLower = new Dictionary<string,\
    \ bool>();\n        Dictionary<string, bool> dictUpper = new Dictionary<string,\
    \ bool>();\n\n        foreach (KeyValuePair<string, string> entry in dict)\n \
    \       {\n            string lowerCase = entry.Key.ToLower();\n            if\
    \ (dictLower.ContainsKey(lowerCase))\n            {\n                dictLower[lowerCase]\
    \ = dictLower[lowerCase] ? false : true;\n                if (dictLower[lowerCase])\n\
    \                {\n                    if (dictUpper.ContainsKey(entry.Key.ToUpper()))\n\
    \                    {\n                        dictUpper[entry.Key.ToUpper()]\
    \ = dictUpper[entry.Key.ToUpper()] ? false : true;\n                        if\
    \ (dictUpper[entry.Key.ToUpper()])\n                            return false;\n\
    \                    }\n                    else\n                    {\n    \
    \                    dictUpper[entry.Key.ToUpper()] = true;\n                \
    \    }\n                }\n                else\n                {\n         \
    \           if (dictUpper.ContainsKey(entry.Key.ToUpper()))\n                \
    \    {\n                        dictUpper[entry.Key.ToUpper()] = dictUpper[entry.Key.ToUpper()]\
    \ ? true : false;\n                    }\n                    else\n         \
    \           {\n                        dictUpper[entry.Key.ToUpper()] = false;\n\
    \                    }\n                }\n            }\n            else\n \
    \           {\n                dictLower.Add(lowerCase, true);\n             \
    \   dictUpper.Add(entry.Key.ToUpper(), true);\n            }\n        }\n\n  \
    \      return true;", "        bool result = true;\n        foreach (KeyValuePair<string,\
    \ string> entry in dict) {\n            if (entry.Key == null)\n             \
    \   return false;\n            if (entry.Key.Length > 4)\n                return\
    \ false;\n            if (entry.Key.Length > 0)\n                entry.Key = entry.Key.ToLower();\n\
    \            else\n                entry.Key = entry.Key.ToUpper();\n        \
    \    string lowerCaseKey = entry.Key.ToLower();\n            string upperCaseKey\
    \ = entry.Key.ToUpper();\n            if (lowerCaseKey == upperCaseKey)\n    \
    \            result = false;\n        }\n        return result;", "        bool\
    \ ret = false;\n        string key;\n        string val;\n        foreach (KeyValuePair<string,string>\
    \ kvp in dict) {\n            key = kvp.Key;\n            val = kvp.Value;\n \
    \           if (key != null) {\n                if (Char.IsLower(key[0])) {\n\
    \                    ret = true;\n                }\n                else {\n\
    \                    ret = true;\n                }\n            }\n         \
    \   else {\n                if (Char.IsUpper(val[0])) {\n                    ret\
    \ = true;\n                }\n                else {\n                    ret\
    \ = true;\n                }\n            }\n        }\n        return ret;",
  "        if(dict.Count != 0)\n        {\n            bool first = true;\n      \
    \      foreach (KeyValuePair<string,string> pair in dict)\n            {\n   \
    \             if(first)\n                {\n                    first = false;\n\
    \                    continue;\n                }\n                else if (pair.Key.ToUpper()\
    \ == pair.Key)\n                    return false;\n            }\n        }\n\
    \        return true;", "        if(dict.Count == 0) {\n            return false;\n\
    \        }\n        \n        // Sort the keys, then we know that there are no\
    \ duplicates.\n        var keys = dict.Keys.OrderBy(k => k).Distinct();\n    \
    \    \n        // Now we know that there are no duplicates and there are no strings\n\
    \        // in the keys that aren't in upper or lower case.\n        // So the\
    \ problem reduces to whether all the keys are strings in upper or\n        //\
    \ lower case.\n        var result = keys.All(k => k.All(IsInUpperOrLower));\n\
    \        \n        return result;", "        string lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        string upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n        if (dict.Count\
    \ == 0)\n            return false;\n\n        foreach (var pair in dict)\n   \
    \     {\n            if (pair.Key is string)\n            {\n                if\
    \ (pair.Key.ToLower() == pair.Key)\n                    return true;\n       \
    \         else if (pair.Key.ToUpper() == pair.Key)\n                    return\
    \ true;\n            }\n\n            if (pair.Value is string)\n            {\n\
    \                if (pair.Value.ToLower() == pair.Value)\n                   \
    \ return true;\n                else if (pair.Value.ToUpper() == pair.Value)\n\
    \                    return true;\n            }\n        }\n\n        return\
    \ false;", "        if (dict == null || dict.Count == 0) {\n            return\
    \ false;\n        }\n        var keys = dict.Keys.ToList();\n        var keyCount\
    \ = keys.Count;\n        var keys = new HashSet<string>(keys);\n        if (keyCount\
    \ <= 2) {\n            for (int i = 0; i < keyCount; i++) {\n                var\
    \ key = keys[i];\n                var lowerKey = key.ToLower();\n            \
    \    var upperKey = key.ToUpper();\n                if (!keys.Contains(lowerKey)\
    \ && !keys.Contains(upperKey)) {\n                    return false;\n        \
    \        }\n            }\n            return true;\n        } else {\n      \
    \      var allLower = new HashSet<string>(keys);\n            var allUpper = new\
    \ HashSet<string>(keys);\n            for (int i = 0; i < keyCount; i++) {\n \
    \               var key = keys[i];\n                var lowerKey = key.ToLower();\n\
    \                var upperKey = key.ToUpper();\n                if (!keys.Contains(lowerKey)\
    \ && !keys.Contains(upperKey)) {\n                    return false;\n        \
    \        }\n                if (keys.Contains(lowerKey)) {\n                 \
    \   allLower.Remove(lowerKey);\n                }\n                if (keys.Contains(upperKey))\
    \ {\n                    allUpper.Remove(upperKey);\n                }\n     \
    \       }\n            return allLower.Count == 0 && allUpper.Count == 0;\n  \
    \      }", "        return !dict.Count.Equals(0) &&\n               dict.All(dict\
    \ => dict.Keys.All(s => \n                   string.Compare(s.ToLower(), s.ToUpper(),\
    \ StringComparison.Ordinal) == 0));", "        if (dict == null || dict.Count\
    \ == 0) {\n            return false;\n        }\n        bool allKeysAreStringInLowerCase\
    \ = false;\n        bool allKeysAreStringInUpperCase = false;\n        foreach\
    \ (var kvp in dict) {\n            allKeysAreStringInLowerCase = allKeysAreStringInLowerCase\
    \ \n                || kvp.Key.ToLower() == kvp.Key;\n            allKeysAreStringInUpperCase\
    \ = allKeysAreStringInUpperCase \n                || kvp.Key.ToUpper() == kvp.Key;\n\
    \        }\n        return allKeysAreStringInLowerCase && allKeysAreStringInUpperCase;",
  "        if (dict == null || dict.Count == 0) return false;\n        foreach (KeyValuePair<string,\
    \ string> item in dict) {\n            string lowerCase = item.Key.ToLower();\n\
    \            string upperCase = item.Key.ToUpper();\n            if ((lowerCase.Length\
    \ == 0 || upperCase.Length == 0) && item.Value != null) return false;\n      \
    \      else if ((lowerCase.Length != 0 && upperCase.Length != 0) && lowerCase\
    \ != upperCase) return false;\n        }\n        return true;", "        string\
    \ keys = \"abcdefghijklmnopqrstuvwxyz\";\n        if (dict == null || dict.Count\
    \ == 0)\n            return false;\n        foreach (string key in dict.Keys)\n\
    \            if (!key.Equals(keys.Substring(key.Length / 2, keys.Length / 2)))\
    \ {\n                return false;\n            }\n        return true;", "  \
    \      if (dict.Count == 0) { return false; }\n        string lower = \"\";\n\
    \        string upper = \"\";\n        foreach (string s in dict.Keys) {\n   \
    \         if (s != null) lower += s.ToLower();\n            else upper += s.ToUpper();\n\
    \        }\n        if (lower == upper || dict.Keys.All(s => s.ToLower() == upper\
    \ || s.ToUpper() == lower)) {\n            return true;\n        }\n        return\
    \ false;", "        Debug.Assert(dict != null);\n\n        foreach (string key\
    \ in dict.Keys) {\n            if (key.Length < 2) {\n                return true;\n\
    \            }\n        }\n        return false;", "        foreach (var key in\
    \ dict.Keys) {\n            if (key != null && key.ToLower() == key || key.ToUpper()\
    \ == key)\n                continue;\n            return false;\n        }\n \
    \       return true;", "        if (dict==null || dict.Count==0)\n           \
    \ return false;\n        var keys = dict.Keys.ToArray();\n        if (keys.Length==0)\
    \ {\n            return true;\n        }\n        foreach (string key in keys)\
    \ {\n            if (key==null) {\n                continue;\n            }\n\
    \            if (Char.IsUpper(key[0]) && Char.IsLower(key[1])) {\n           \
    \     return false;\n            }\n            if (Char.IsLower(key[0]) && Char.IsUpper(key[1]))\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        IEnumerable<string> allKeys = dict.Keys.ToList();\n        bool allStrings\
    \ = true;\n        bool mixedCase = true;\n        foreach (string key in allKeys)\
    \ {\n            if (dict.TryGetValue(key, out string lowerCaseValue) && \n  \
    \              !dict.TryGetValue(key.ToUpperInvariant(), out string upperCaseValue))\
    \ {\n                mixedCase = false;\n            }\n            else {\n \
    \               allStrings = false;\n            }\n        }\n        return\
    \ allStrings && mixedCase;", "        if (dict == null || dict.Count() == 0) return\
    \ false;\n        if (dict.Count == 1) return true;\n        bool result = true;\n\
    \        foreach (string key in dict) {\n            string val = dict[key];\n\
    \            if (val.Length > 0) \n                result = result && (val.ToLowerInvariant()\
    \ == val);\n            else\n                result = result && (val.ToUpperInvariant()\
    \ == val);\n        }\n        return result;", '        return dict.All(kvp =>
    kvp.Key.Equals(kvp.Key.ToLower()) || kvp.Key.Equals(kvp.Key.ToUpper()));', " \
    \       if (dict == null || dict.Count == 0)\n            return false;\n    \
    \    bool lowerCase = true;\n        bool upperCase = true;\n        string key\
    \ = \"\";\n        foreach (KeyValuePair<string, string> kvp in dict)\n      \
    \  {\n            if (!string.IsNullOrEmpty(key) && key != kvp.Key)\n        \
    \    {\n                upperCase = false;\n                break;\n         \
    \   }\n            else\n            {\n                key = kvp.Key;\n     \
    \       }\n        }\n        foreach (KeyValuePair<string, string> kvp in dict)\n\
    \        {\n            if (!string.IsNullOrEmpty(key) && key != kvp.Key)\n  \
    \          {\n                lowerCase = false;\n                break;\n   \
    \         }\n            else\n            {\n                key = kvp.Key;\n\
    \            }\n        }\n        return lowerCase && upperCase;", "        if\
    \ (dict == null) return false;\n        IEnumerable<string> keys = dict.Keys.ToList();\n\
    \        if (keys.All(x => x.All(Char.IsUpper))) return true;\n        else if\
    \ (keys.All(x => x.All(Char.IsLower))) return true;\n        else return false;",
  "        if (dict.Count != 0) return true;\n        foreach (var pair in dict) {\n\
    \            if (pair.Key.Length == 1 && pair.Key.ToLower() == pair.Key)\n   \
    \             return true;\n            if (pair.Key.Length > 1 && pair.Key.ToUpper()\
    \ == pair.Key)\n                return true;\n        }\n        return false;",
  "        if (dict.Count == 0)\n            return false;\n        bool isUpperCase\
    \ = true;\n        bool isLowerCase = true;\n        foreach (KeyValuePair<string,\
    \ string> kvp in dict) {\n            if (kvp.Key.Length > 0)\n              \
    \  isUpperCase = false;\n            if (kvp.Key.Length > 0)\n               \
    \ isLowerCase = false;\n        }\n        return isUpper && isLowerCase;", " \
    \       if (dict == null) return false;\n        bool caseInsensitive = true;\n\
    \        foreach (var key in dict.Keys) {\n            if (key.Length != 1) return\
    \ false;\n            var upperCase = char.ToUpper(key[0]);\n            if (key.ToLower()\
    \ != upperCase) return false;\n            caseInsensitive = !caseInsensitive;\n\
    \        }\n        return caseInsensitive;", "        if (dict.Count == 0)\n\
    \            return false;\n        foreach (string key in dict.Keys)\n      \
    \  {\n            if (!IsLower(key))\n                return false;\n        \
    \    if (IsUpper(key))\n                return false;\n        }\n        return\
    \ true;", "        bool result = true;\n        foreach (KeyValuePair<string,\
    \ string> entry in dict)\n            if (entry.Value.Length != entry.Key.Length)\n\
    \                result = false;\n        return result;", "        bool result\
    \ = true;\n        foreach(var entry in dict) {\n            if (!IsStringInLowerCaseOrUpperCase(entry.Key,\
    \ out result))\n                return result;\n        }\n        return result;",
  "        bool areEqual = true;\n        foreach (KeyValuePair<string, string> kvp\
    \ in dict) {\n            string key = kvp.Key;\n            string val = kvp.Value;\n\
    \            if (val == null || val == \"\") {\n                areEqual = false;\n\
    \            } else {\n                areEqual = val.ToLower() == key || val.ToUpper()\
    \ == key;\n            }\n            if (!areEqual) return false;\n        }\n\
    \        return areEqual;", "        if (dict == null || dict.Count == 0) {\n\
    \            return false;\n        }\n\n        foreach (var key in dict.Keys.ToLowerInvariant())\
    \ {\n            if (!dict.ContainsKey(key)) {\n                return false;\n\
    \            }\n        }\n\n        foreach (var key in dict.Keys.ToUpperInvariant())\
    \ {\n            if (!dict.ContainsKey(key)) {\n                return false;\n\
    \            }\n        }\n\n        return true;", "        bool res = true;\n\
    \        if (dict.Count == 0) return false;\n        foreach (string key in dict.Keys)\
    \ {\n            bool check = true;\n            foreach (char c in key.ToLower())\
    \ {\n                if (c != key.ToUpper()) {\n                    check = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (check == false) return false;\n        }\n        return true;", "        bool\
    \ allUpper = false;\n        bool allLower = false;\n        foreach(KeyValuePair<string,\
    \ string> kvp in dict) {\n            if (allUpper) {\n                if (IsStrUpperCase(kvp.Key))\
    \ {\n                    allUpper = false;\n                } else {\n       \
    \             allUpper = true;\n                }\n            }\n           \
    \ if (allLower) {\n                if (IsStrLowerCase(kvp.Key)) {\n          \
    \          allLower = false;\n                } else {\n                    allLower\
    \ = true;\n                }\n            }\n        }\n        return allUpper\
    \ == false && allLower == false;", "        // Fill in the code below\n      \
    \  string lowerCase = new string[dict.Count];\n        string upperCase = new\
    \ string[dict.Count];\n        int i = 0;\n        foreach (KeyValuePair<string,string>\
    \ kvp in dict) {\n            lowerCase[i] = kvp.Key.ToLower();\n            upperCase[i]\
    \ = kvp.Key.ToUpper();\n            i++;\n        }\n        bool flag = false;\n\
    \        for (int i = 0; i < lowerCase.Length; i++) {\n            if (lowerCase[i]\
    \ == upperCase[i]) {\n                flag = true;\n                break;\n \
    \           }\n        }\n        return flag;", '        return !dict.Keys.Any(x
    => !((x.Equals("") || x.Equals(null)) || (x.Length == 0 || x == null)) ? false
    : ((x.Equals("") || x.Equals(null)) || (x.Length == 0 || x == null)) ? true :
    (((x.ToLower().Equals("") || x.ToLower().Equals(null)) || (x.ToLower().Length
    == 0 || x.ToLower() == null)) ? true : (((x.ToUpper().Equals("") || x.ToUpper().Equals(null))
    || (x.ToUpper().Length == 0 || x.ToUpper() == null)) ? true : false));', "   \
    \     // Your code here\n        // Fill out your solution here\n        bool\
    \ ret = true;\n        foreach(var key in dict.Keys)\n        {\n            if\
    \ (key.ToLower() != key)\n            {\n                ret = false;\n      \
    \          break;\n            }\n        }\n        return ret;", "        bool\
    \ allUpperCase = dict.All(\n            k => (k.Key.Length == k.Value.Length)\
    \ &&\n                   Char.IsUpper((char) k.Key[0]));\n        bool allLowerCase\
    \ = dict.All(\n            k => (k.Key.Length == k.Value.Length) &&\n        \
    \           Char.IsLower((char) k.Key[0]));\n        return allUpperCase && allLowerCase;",
  "        if (dict.Count != 0) {\n            foreach (var item in dict) {\n    \
    \            // Check case\n                if (item.Key == null)\n          \
    \          return false;\n            }\n        }\n        return true;", " \
    \       List<string> list = new List<string>();\n        foreach(var key in dict.Keys)\n\
    \            list.Add(key.ToLower());\n        list.AddRange(dict.Keys.Select(key\
    \ => key.ToUpper()));\n        return list.Count == dict.Keys.Count && list.All(l\
    \ => dict.ContainsKey(l));", "        if (!dict.Any()) {\n            return true;\n\
    \        }\n        bool upper = false;\n        bool lower = false;\n       \
    \ foreach(KeyValuePair<string, string> pair in dict) {\n            if (pair.Key.Length\
    \ > 0) {\n                if (!upper) {\n                    upper = char.IsUpper(pair.Key[0]);\n\
    \                }\n                if (upper) {\n                    lower =\
    \ true;\n                }\n            }\n        }\n        return lower ||\
    \ upper;", '        return dict.Keys.All(key => IsLowerCaseOrUpperCase(key));',
  "        string lowerCaseStrings = string.Join(string.Empty, dict.Keys.Select(k\
    \ => k.ToLower()));\n        string upperCaseStrings = string.Join(string.Empty,\
    \ dict.Keys.Select(k => k.ToUpper()));\n        return lowerCaseStrings == upperCaseStrings;",
  "        if(dict.Count != 0)\n            return false;\n        foreach(var kv\
    \ in dict)\n            if(!kv.Key.Equals(\"State\") && !kv.Key.Equals(\"ZIP\"\
    ))\n                return false;\n        return true;", "        if (dict ==\
    \ null) return false;\n        bool ret = true;\n        foreach (KeyValuePair<string,string>\
    \ entry in dict)\n            ret &= entry.Key.All(c => Char.IsLower(c) || Char.IsUpper(c));\n\
    \        return ret;", "        if (dict.Count > 0) {\n            foreach (var\
    \ k in dict) {\n                string str1 = k.Key;\n                string str2\
    \ = k.Value.ToLower();\n                string str3 = k.Value.ToUpper();\n   \
    \             if (str1.Equals(str2, StringComparison.InvariantCultureIgnoreCase)\
    \ ||\n                    str2.Equals(str3, StringComparison.InvariantCultureIgnoreCase)\
    \ ||\n                    str1.Equals(str3, StringComparison.InvariantCultureIgnoreCase)\
    \ ||\n                    str3.Equals(str1, StringComparison.InvariantCultureIgnoreCase))\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n        return false;", "        bool allKeysAreStringsInLowerCase\
    \ = dict.All(item => item.Key.All(Char.IsLower));\n        bool allKeysAreStringsInUpperCase\
    \ = dict.All(item => item.Key.All(Char.IsUpper));\n        return allKeysAreStringsInLowerCase\
    \ || allKeysAreStringsInUpperCase;", '        return CheckDictCase(dict, true);',
  "        if (dict.Count == 0) return false;\n        // Get all string keys and\
    \ sort them\n        string[] keys = dict.Keys.ToArray();\n        keys.Sort();\n\
    \        // If all keys are in upper case, return true\n        foreach (var k\
    \ in keys)\n            if (!k.Equals(k.ToUpper(), StringComparison.OrdinalIgnoreCase))\n\
    \                return false;\n        return true;", "        if(dict == null\
    \ || dict.Count == 0) return false;\n\n        // Sort the dictionary keys in\
    \ increasing order\n        Dictionary<string,string> dict2 = new Dictionary<string,string>(dict);\n\
    \        Dictionary<string,string> dict3 = new Dictionary<string,string>();\n\
    \        foreach (string key in dict2.Keys.OrderBy(k=>k)) {\n            string\
    \ str = dict2[key];\n            if(!strIsStringInLowerCase(str))\n          \
    \      dict3.Add(key, str);\n        }\n\n        // Sort the dictionary keys\
    \ in decreasing order\n        foreach (string key in dict2.Keys.OrderByDescending(k=>k))\
    \ {\n            string str = dict2[key];\n            if(!strIsStringInUpperCase(str))\n\
    \                dict3.Add(key, str);\n        }\n\n        // Check the first\
    \ dictionary for keys\n        string firstKey = null;\n        string firstValue\
    \ = null;\n        foreach (KeyValuePair<string,string> kvp in dict) {\n     \
    \       firstKey = kvp.Key;\n            firstValue = kvp.Value;\n        }\n\n\
    \        // Check the second dictionary for keys\n        bool found = false;\n\
    \        foreach (KeyValuePair<string,string> kvp in dict3) {\n            found\
    \ = true;\n            if(firstKey == kvp.Key) {\n                if(!firstValue.Equals(kvp.Value))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n\n        return found;", "        if (dict.Count == 0)\n           \
    \ return false;\n        if (dict.Keys.All(k => k.ToLower() == k))\n         \
    \   return true;\n        if (dict.Keys.All(k => k.ToUpper() == k))\n        \
    \    return true;\n        return false;", "        return dict.Where(k => k.Key\
    \ != null && !k.Key.Equals(\"\"))\n                  .Select(k => k.Key.ToLower().Equals(\"\
    name\")).All(x => x) ||\n               dict.Where(k => k.Key != null && !k.Key.Equals(\"\
    \"))\n                  .Select(k => k.Key.ToUpper().Equals(\"NAME\")).All(x =>\
    \ x);", "        var dictCase = dict.Where(x => x.Key.ToLower() == x.Key.ToUpper()).ToList();\n\
    \        if (dictCase.Count() == dict.Count()) return true;\n        return false;",
  "        if (dict.Count == 0) {\n            return false;\n        }\n        if\
    \ (dict.Count == 1) {\n            if (dict.values.Length != 2) {\n          \
    \      return false;\n            }\n        }\n        if (dict.Count > 2) {\n\
    \            return false;\n        }\n        foreach (var item in dict) {\n\
    \            var val = item.Value;\n            var val = val.ToLower();\n   \
    \         var val = val.ToUpper();\n            if (val != item.Key) {\n     \
    \           return false;\n            }\n        }\n        return true;", " \
    \       if (dict.Count == 0)\n            return false;\n        var keylist =\
    \ dict.Keys.ToList();\n        for (int i = 0; i < keylist.Count; i++)\n     \
    \       if (keylist[i].Length != keylist[i].ToLowerInvariant().Length \n     \
    \           && keylist[i].Length != keylist[i].ToUpperInvariant().Length)\n  \
    \              return false;\n        return true;", "        if (dict == null)\
    \ {\n            return false;\n        }\n        List<KeyValuePair<string, string>>\
    \ list = new List<KeyValuePair<string, string>>();\n        foreach (KeyValuePair<string,\
    \ string> entry in dict) {\n            list.Add(entry);\n        }\n        foreach\
    \ (KeyValuePair<string, string> entry in list) {\n            if (!string.IsNullOrEmpty(entry.Key)\
    \ && entry.Key.ToLower() == entry.Key) {\n                continue;\n        \
    \    }\n            if (!string.IsNullOrEmpty(entry.Key) && entry.Key.ToUpper()\
    \ == entry.Key) {\n                continue;\n            }\n            return\
    \ false;\n        }\n        return true;", "        bool lower = false;\n   \
    \     bool upper = false;\n        foreach (var entry in dict) {\n           \
    \ string key = entry.Key;\n            if (key.Length > 0) {\n               \
    \ lower = key.ToLower().Equals(\"state\");\n                upper = key.ToUpper().Equals(\"\
    STATE\");\n            }\n            else\n                return false;\n  \
    \      }\n        return lower || upper;", "        if (dict.Count == 0)\n   \
    \         return false;\n        string lower;\n        string upper;\n      \
    \  bool isUpper;\n        bool isLower;\n        bool isInUpper = true;\n    \
    \    bool isInLower = true;\n        foreach (KeyValuePair<string, string> kvp\
    \ in dict)\n        {\n            lower = kvp.Key;\n            upper = kvp.Value;\n\
    \            isInLower = lower.Equals(lower, StringComparison.InvariantCultureIgnoreCase);\n\
    \            isInUpper = upper.Equals(upper, StringComparison.InvariantCultureIgnoreCase);\n\
    \            isLower = isInUpper ? isInLower : !isInLower;\n            isUpper\
    \ = isInUpper ? isInUpper : !isInLower;\n            if (isUpper != isLower)\n\
    \                return false;\n        }\n        return true;", "        if\
    \ (dict.Count != 0) return true;\n        return false;", "        bool ret =\
    \ false;\n        if(dict.Count > 0){\n            var keys = (from p in dict.Keys\
    \ select p.ToLower()).ToArray();\n            var values = (from p in dict.Values\
    \ select p.ToLower()).ToArray();\n            ret = keys.SequenceEqual(values);\n\
    \        }\n        return ret;", "        if (dict == null) return false;\n \
    \       bool res = true;\n        foreach (KeyValuePair<string, string> kvp in\
    \ dict) {\n            string key = kvp.Key;\n            string value = kvp.Value;\n\
    \            if (Char.IsUpper((char)key)) {\n                if (key.Length >\
    \ 0 && Char.IsLower(value[0])) res = false;\n            } else {\n          \
    \      if (key.Length > 0 && Char.IsUpper(value[0])) res = false;\n          \
    \  }\n        }\n        return res;", "        return dict.All(d => \n      \
    \      d.All(k =>\n                (k.ToUpper().Equals(k.ToLower()) ? true : false\
    \ ? false : true)))", "        bool test = true;\n        foreach (KeyValuePair<string,\
    \ string> entry in dict)\n            test = test && (entry.Key.ToLower() == entry.Key.ToUpper());\n\
    \        return test;", '        return !dict.Any(x => !x.Key.ToLowerInvariant().Equals(x.Key.ToUpperInvariant()));',
  "        bool isAllUpperCase = true;\n        foreach (KeyValuePair<string,string>\
    \ entry in dict) {\n            isAllUpperCase = isAllUpperCase && entry.Key.ToUpper()\
    \ == entry.Key;\n        }\n        foreach (KeyValuePair<string,string> entry\
    \ in dict) {\n            isAllUpperCase = isAllUpperCase && entry.Key.ToLower()\
    \ == entry.Key;\n        }\n        return isAllUpperCase;"]
stop_tokens:
- "\n    }\n"
