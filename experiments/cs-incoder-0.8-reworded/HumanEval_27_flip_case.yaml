name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\")\n\
  \    public static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        char[] chars = str.ToCharArray();\n        foreach (char c\
    \ in chars)\n        {\n            if (Char.IsLower(c))\n            {\n    \
    \            chars[chars.IndexOf(c)] = Char.ToUpper(c);\n            }\n     \
    \       else\n            {\n                chars[chars.IndexOf(c)] = Char.ToLower(c);\n\
    \            }\n        }\n        return new string(chars);", "        var result\
    \ = \"\";\n        foreach (var c in str) {\n            switch (c) {\n      \
    \          case 'a':\n                    result += 'A';\n                   \
    \ break;\n                case 'b':\n                    result += 'B';\n    \
    \                break;\n                case 'c':\n                    result\
    \ += 'C';\n                    break;\n                case 'd':\n           \
    \         result += 'D';\n                    break;\n                case 'e':\n\
    \                    result += 'E';\n                    break;\n            \
    \    case 'f':\n                    result += 'F';\n                    break;\n\
    \                case 'g':\n                    result += 'G';\n             \
    \       break;\n                case 'h':\n                    result += 'H';\n\
    \                    break;\n                case 'i':\n                    result\
    \ += 'I';\n                    break;\n                case 'j':\n           \
    \         result += 'J';\n                    break;\n                case 'k':\n\
    \                    result += 'K';\n                    break;\n            \
    \    case 'l':\n                    result += 'L';\n                    break;\n\
    \                case 'm':\n                    result += 'M';\n             \
    \       break;\n                case 'n':\n                    result += 'N';\n\
    \                    break;\n                case 'o':\n                    result\
    \ += 'O';\n                    break;\n                case 'p':\n           \
    \         result += 'P';\n                    break;\n                case 'q':\n\
    \                    result += 'Q';\n                    break;\n            \
    \    case 'r':\n                    result += 'R';\n                    break;\n\
    \                case 's':\n                    result += 'S';\n             \
    \       break;\n                case 't':\n                    result += 'T';\n\
    \                    break;\n                case 'u':\n                    result\
    \ += 'U';\n                    break;\n                case 'v':\n           \
    \         result += 'V';\n                    break;\n                case 'w':\n\
    \                    result += 'W';\n                    break;\n            \
    \    case 'x':\n                    result += 'X';\n                    break;\n\
    \                case 'y':\n                    result += 'Y';\n             \
    \       break;\n                case 'z':\n                    result += 'Z';\n\
    \                    break;\n                default:\n                    result\
    \ += c;\n                    break;\n            }\n        }\n        return\
    \ result;", "        char[] chars = str.ToCharArray();\n        StringBuilder\
    \ builder = new StringBuilder();\n        foreach (char c in chars) {\n      \
    \      if (Char.IsLower(c))\n                builder.Append(char.ToUpperInvariant(c));\n\
    \            else\n                builder.Append(char.ToLowerInvariant(c));\n\
    \        }\n        return builder.ToString();", "        StringBuilder result\
    \ = new StringBuilder(str.Length);\n        foreach (char c in str) {\n      \
    \      switch (c) {\n            case 'a':\n            case 'b':\n          \
    \  case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n\
    \            case 'g':\n            case 'h':\n            case 'i':\n       \
    \     case 'j':\n            case 'k':\n            case 'l':\n            case\
    \ 'm':\n            case 'n':\n            case 'o':\n            case 'p':\n\
    \            case 'q':\n            case 'r':\n            case 's':\n       \
    \     case 't':\n            case 'u':\n            case 'v':\n            case\
    \ 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n\
    \                result.Append(char.ToLower(c));\n                break;\n   \
    \         case 'A':\n            case 'B':\n            case 'C':\n          \
    \  case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n\
    \            case 'H':\n            case 'I':\n            case 'J':\n       \
    \     case 'K':\n            case 'L':\n            case 'M':\n            case\
    \ 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n\
    \            case 'R':\n            case 'S':\n            case 'T':\n       \
    \     case 'U':\n            case 'V':\n            case 'W':\n            case\
    \ 'X':\n            case 'Y':\n            case 'Z':\n                result.Append(char.ToUpper(c));\n\
    \                break;\n            default:\n                result.Append(c);\n\
    \                break;\n            }\n        }\n        return result.toString();",
  "        char[] chars = str.ToCharArray();\n        for(int i = 0; i < chars.Length;\
    \ i++) {\n            char c = chars[i];\n            if (char.IsLower(c)) {\n\
    \                chars[i] = char.ToUpper(c);\n            }\n        }\n     \
    \   return new string(chars);", "        StringBuilder result = new StringBuilder();\n\
    \        foreach (char c in str) {\n            result.Append((c >= 'a' && c <=\
    \ 'z') ? c.ToUpper() : (c >= 'A' && c <= 'Z') ? c.ToLower() : (c >= '0' && c <=\
    \ '9') ? c : \" \");\n        }\n        return result.ToString();", "       \
    \ StringBuilder sb = new StringBuilder();\n        foreach (char c in str) {\n\
    \            sb.Append(isLowerCase(c) ? c.ToString().ToUpper() : c.ToString().ToLower());\n\
    \        }\n        return sb.ToString();", "        var sb = new StringBuilder();\n\
    \        foreach (char c in str.ToCharArray())\n        {\n            sb.Append((char)\
    \ c);\n        }\n        var reversed = new StringBuilder();\n        foreach\
    \ (char c in sb.ToCharArray())\n        {\n            reversed.Append(char.ToUpper(c));\n\
    \        }\n        return reversed.ToString();", "        StringBuilder builder\
    \ = new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         char c = str[i];\n            if (Char.IsLower(c)) {\n             \
    \   builder.Append(char.ToUpperInvariant(c));\n            } else {\n        \
    \        builder.Append(char.ToLower(c));\n            }\n        }\n        return\
    \ builder.ToString();", "        string output = \"\";\n        foreach (char\
    \ c in str) {\n            if (char.IsUpper(c)) {\n                output += char.ToLower(c);\n\
    \            } else {\n                output += c;\n            }\n        }\n\
    \        return output;", "        char[] arr = str.ToCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in arr) {\n            char\
    \ cc;\n            bool ccc = Char.IsLower(c);\n            if (!ccc) {\n    \
    \            cc = Char.ToUpper(c);\n            } else {\n                cc =\
    \ Char.ToLower(c);\n            }\n            sb.Append(cc);\n        }\n   \
    \     return sb.ToString();", "        int i = 0;\n        int j = str.Length\
    \ - 1;\n        char temp;\n        while (i < j) {\n            temp = str[j].ToString();\n\
    \            if (str[i].ToString().Equals(temp)) {\n                str[j] = str[i];\n\
    \                str[i] = temp;\n                i++;\n                j--;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return str;", "        if (string.IsNullOrEmpty(str))\n            return str;\n\
    \        return string.Concat(str.Select(c =>\n            char.IsUpper(c) ? char.ToLower(c)\
    \ : string.Empty));", "        char[] charArray = str.ToCharArray();\n       \
    \ char[] charArray2 = new char[str.Length];\n        for (int i = 0; i < charArray.Length;\
    \ i++)\n        {\n            if (charArray[i] < 'A' || charArray[i] > 'Z') //\
    \ If the character is neither between A and Z\n                charArray2[i] =\
    \ charArray[i];\n            else // If the character is between A and Z\n   \
    \         {\n                char c = charArray[i];\n                charArray2[i]\
    \ = charArray[i] + 32;\n                charArray2[i + 1] = c;\n            }\n\
    \        }\n        return new string(charArray2);", '        return str.ToLower().Replace("_",
    " ").ToUpper().Replace(" ", "_");', "        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in str) {\n            sb = (c == 'a') ? (char) ('A')\
    \ : (char) c;\n        }\n        return sb.ToString();", "        if (str ==\
    \ null)\n            return str;\n        var builder = new StringBuilder();\n\
    \        var length = str.Length;\n        for (var i = 0, j = 0; i < length;\
    \ i++)\n        {\n            if (str[i].Equals('A', StringComparison.OrdinalIgnoreCase))\n\
    \            {\n                builder.Append(str[j++].ToUpperInvariant());\n\
    \            }\n            else if (str[i].Equals('a', StringComparison.OrdinalIgnoreCase))\n\
    \            {\n                builder.Append(str[j++].ToLowerInvariant());\n\
    \            }\n            else\n            {\n                builder.Append(str[i]);\n\
    \            }\n        }\n        return builder.ToString();", "        string\
    \ result = string.Empty;\n        foreach (char c in str) {\n            if (char.IsLower(c))\
    \ {\n                result += \"_\" + Char.ToUpper(c);\n            } else {\n\
    \                result += Char.ToLower(c);\n            }\n        }\n      \
    \  return result;", "        char[] charArray = str.ToCharArray();\n        for\
    \ (int i = 0; i < charArray.Length; i++) {\n            char currentChar = charArray[i];\n\
    \            if (Char.IsLower(currentChar)) {\n                charArray[i] =\
    \ (char)(currentChar - 32);\n            }\n            else if (Char.IsUpper(currentChar))\
    \ {\n                charArray[i] = (char)(currentChar + 32);\n            }\n\
    \        }\n        return new string(charArray);", "        var builder = new\
    \ StringBuilder();\n        foreach (char c in str) {\n            if (Char.IsUpper(c))\n\
    \                builder.Append(Char.ToLower(c));\n            else\n        \
    \        builder.Append(c);\n        }\n        return builder.ToString();", '        return
    string.Concat(str.Select(c => (char.IsUpper(c) ? c.ToString().ToLower() : c.ToString().ToUpper())).ToArray());',
  "        return str.ToLowerInvariant().Replace(\" \", \"\").Replace(\"!\", \"\"\
    ).Replace(\"?\", \"\").Replace(\"'\", \"\").Replace(\"(\", \"\").Replace(\")\"\
    , \"\").Replace(\".\", \"\").Replace(\"-\", \"\").Replace(\"/\", \"\").Replace(\"\
    ,\", \"\").Replace(\"/\", \"\").Replace(\"=\", \"\").Replace(\"'\", \"\").Replace(\"\
    :\", \"\").Replace(\";\", \"\").Replace(\"/\", \"\").Replace(\"*\", \"\").Replace(\"\
    +\", \"\").Replace(\"%\", \"\").Replace(\"(\", \"\").Replace(\")\", \"\").Replace(\"\
    [\", \"\").Replace(\"]\", \"\").Replace(\"{\", \"\").Replace(\"}\", \"\").Replace(\"\
    [\", \"\").Replace(\"]\", \"\").Replace(\"{\", \"\").Replace(\"}\", \"\").Replace(\"\
    .\", \"\").Replace(\"?\", \"\").Replace(\"!\", \"\").Replace(\"'\", \"\").Replace(\"\
    (\", \"\").Replace(\")\", \"\").Replace(\",\", \"\").Replace(\"=\", \"\").Replace(\"\
    :\", \"\").Replace(\";\", \"\").Replace(\"/\", \"\").Replace(\"*\", \"\").Replace(\"\
    +\", \"\").Replace(\"%\", \"\").Replace(\",\", \"\").Replace(\"=\", \"\").Replace(\"\
    :\", \"\").Replace(\";\", \"\").Replace(\"/\", \"\").Replace(\"*\", \"\").Replace(\"\
    +\", \"\").Replace(\"%\", \"\").Replace(\"'\", \"\").Replace(\"(\", \"\").Replace(\"\
    )\", \"\").Replace(\"[\", \"\").Replace(\"]\", \"\").Replace(\"{\", \"\").Replace(\"\
    }\", \"\").Replace(\"{\", \"\").Replace(\"}\", \"\");", "        StringBuilder\
    \ sb = new StringBuilder();\n\n        foreach (char c in str) {\n           \
    \ if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n      \
    \      }\n            else if (char.IsLower(c)) {\n                sb.Append(char.ToUpper(c));\n\
    \            }\n            else {\n                sb.Append(c);\n          \
    \  }\n        }\n\n        return sb.ToString();", "        var result = new char[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result[i] = str[i]\
    \ == char.ToLower(str[i]) ? char.ToUpper(str[i]) : char.ToLower(str[i]);\n   \
    \     }\n        return new string(result);", "        string result = \"\";\n\
    \        foreach (char c in str) {\n            result += (char.IsUpper(c)) ?\
    \ (char.ToLower(c)) : (char.ToUpper(c));\n        }\n        return result;",
  "        char[] chars = str.ToCharArray();\n        Array.Reverse(chars);\n    \
    \    return new string(chars);", "        var flippedChars = new List<char>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (str[i].Equals(str[i].ToLower()))\
    \ {\n                flippedChars.Add(str[i].ToUpper());\n            } else {\n\
    \                flippedChars.Add(str[i].ToLower());\n            }\n        }\n\
    \        return new string(flippedChars);", "        return str.ToUpperInvariant()\n\
    \            .Replace(\"_\", \" \")\n            .Replace(\"  \", \" \")\n   \
    \         .Replace(\"-\", \" \")\n            .Replace(\",\", \" \")\n       \
    \     .Replace(\".\", \" \")\n            .Replace(\"!\", \" \")\n           \
    \ .Replace(\"?\", \" \")\n            .Replace(\":\", \" \")\n            .Replace(\"\
    ;\", \" \")\n            .Replace(\"<\", \" \")\n            .Replace(\"=\", \"\
    \ \")\n            .Replace(\">\", \" \")\n            .Replace(\"'\", \"\");",
  "        if (string.IsNullOrEmpty(str))\n            return str;\n        var sb\
    \ = new StringBuilder(str.Length);\n        for (var i = 0; i < str.Length; i++)\
    \ {\n            if (str[i] >= 'a' && str[i] <= 'z') {\n                sb.Append(str[i]\
    \ + 32);\n            } else {\n                sb.Append(str[i]);\n         \
    \   }\n        }\n        return sb.ToString();", "        string result = \"\"\
    ;\n        foreach(char c in str) {\n            if (char.IsLetter(c)) {\n   \
    \             result += (char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c)).ToString();\n\
    \            }\n        }\n        return result;", '        return str.ToUpper().ToLower().Replace("
    ", "");', "        var flipped = new StringBuilder();\n        foreach (var c\
    \ in str) {\n            if (Char.IsLower(c)) {\n                flipped.Append(char.ToUpperInvariant(c));\n\
    \            } else {\n                flipped.Append(char.ToLowerInvariant(c));\n\
    \            }\n        }\n        return flipped.ToString();", "        // Initialize\
    \ result and counter\n        var result = \"\";\n        int counter = 0;\n\n\
    \        // Do the actual work\n        foreach(var ch in str) {\n           \
    \ // Is it a lowercase letter? If so swap it with its uppercase counterpart\n\
    \            if(char.IsLower(ch)) {\n                result += (char)char.GetUnicodeCategory(ch);\n\
    \                counter++;\n            }\n\n            // Is it a letter? If\
    \ so, add it (lower) to result\n            if(char.IsLetter(ch)) {\n        \
    \        result += ch;\n            }\n        }\n\n        // Add any remaining\
    \ lowercase letters\n        while(counter > 0) {\n            result += (char)(char.GetUnicodeCategory(str[str.Length\
    \ - 1]) + counter);\n            counter--;\n        }\n\n        // Make sure\
    \ it all fits into the string length without going over.\n        if(result.Length\
    \ > str.Length) {\n            result = result.Substring(0, str.Length);\n   \
    \     }\n\n        return result;", "        string resultStr = string.Empty;\n\
    \        foreach (char c in str) {\n            // Flip the case\n           \
    \ if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n                resultStr\
    \ += (char)(c ^ 32);\n            } else {\n                resultStr += c;\n\
    \            }\n        }\n        return resultStr;", "        var sb = new StringBuilder(str.Length);\n\
    \        foreach (var c in str) {\n            if (Char.IsUpper(c)) {\n      \
    \          sb.Append(Char.ToLower(c));\n            } else if (Char.IsLower(c))\
    \ {\n                sb.Append(Char.ToUpper(c));\n            }\n        }\n \
    \       return sb.ToString();", "        StringBuilder sb = new StringBuilder(str.Length);\n\
    \n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == str[i].ToLower())\
    \ {\n                str[i] = str[i].ToUpper();\n            } else {\n      \
    \          str[i] = str[i].ToLower();\n            }\n        }\n\n        return\
    \ sb.ToString();", "        string output = \"\";\n        foreach (char c in\
    \ str.ToLowerInvariant()) {\n            output += (char.IsUpper(c)) ? c.ToUpperInvariant()\
    \ : c.ToLowerInvariant();\n        }\n        return output;", "        return\
    \ str.Select(c => (c >= 'a' && c <= 'z') ? c.ToUpper() : c.ToLower()).ToArray();",
  "        // Create an array to hold the original lowercase characters\n        char[]\
    \ arr = str.ToCharArray();\n        // Copy the lower case characters to a new\
    \ array\n        char[] lowerChars = new char[arr.Length];\n        // Copy all\
    \ of the lower case characters to the new array\n        for(int i = 0; i < arr.Length;\
    \ i++) {\n            lowerChars[i] = arr[i];\n        }\n        // Make all\
    \ lowercase characters uppercase\n        for(int j = 0; j < lowerChars.Length;\
    \ j++) {\n            lowerChars[j] = Char.ToUpper(lowerChars[j]);\n        }\n\
    \        // Join all of the upper case characters back into a string\n       \
    \ string lowerString = string.Join(\"\", lowerChars);\n        // Copy the upper\
    \ case characters to the new array\n        char[] upperChars = new char[lowerString.Length];\n\
    \        // Copy all of the upper case characters to the new array\n        for(int\
    \ i = 0; i < lowerChars.Length; i++) {\n            upperChars[i] = lowerChars[i];\n\
    \        }\n        // Make all uppercase characters lowercase\n        for(int\
    \ j = 0; j < upperChars.Length; j++) {\n            upperChars[j] = Char.ToLower(upperChars[j]);\n\
    \        }\n        // Join all of the lower case characters back into a string\n\
    \        string upperString = string.Join(\"\", upperChars);\n        // Return\
    \ the new string\n        return upperString;", "        StringBuilder sb = new\
    \ StringBuilder(str.Length);\n        foreach (char c in str) {\n            if\
    \ (Char.IsUpper(c))\n                sb.Append(char.ToLower(c));\n           \
    \ else if (Char.IsLower(c))\n                sb.Append(char.ToUpper(c));\n   \
    \         else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (Char.IsUpper(str[i])) {\n                sb.Append(char.ToLower(str[i]));\n\
    \            } else {\n                sb.Append(char.ToUpper(str[i]));\n    \
    \        }\n        }\n        return sb.ToString();", "        string output\
    \ = \"\";\n        foreach (var character in str) {\n            switch (character)\
    \ {\n                case 'a':\n                case 'A':\n                  \
    \  output += 'A';\n                    break;\n                case 'b':\n   \
    \             case 'B':\n                    output += 'B';\n                \
    \    break;\n                case 'c':\n                case 'C':\n          \
    \          output += 'C';\n                    break;\n                case 'd':\n\
    \                case 'D':\n                    output += 'D';\n             \
    \       break;\n                case 'e':\n                case 'E':\n       \
    \             output += 'E';\n                    break;\n                case\
    \ 'f':\n                case 'F':\n                    output += 'F';\n      \
    \              break;\n                case 'g':\n                case 'G':\n\
    \                    output += 'G';\n                    break;\n            \
    \    case 'h':\n                case 'H':\n                    output += 'H';\n\
    \                    break;\n                case 'i':\n                case 'I':\n\
    \                    output += 'I';\n                    break;\n            \
    \    case 'j':\n                case 'J':\n                    output += 'J';\n\
    \                    break;\n                case 'k':\n                case 'K':\n\
    \                    output += 'K';\n                    break;\n            \
    \    case 'l':\n                case 'L':\n                    output += 'L';\n\
    \                    break;\n                case 'm':\n                case 'M':\n\
    \                    output += 'M';\n                    break;\n            \
    \    case 'n':\n                case 'N':\n                    output += 'N';\n\
    \                    break;\n                case 'o':\n                case 'O':\n\
    \                    output += 'O';\n                    break;\n            \
    \    case 'p':\n                case 'P':\n                    output += 'P';\n\
    \                    break;\n                case 'q':\n                case 'Q':\n\
    \                    output += 'Q';\n                    break;\n            \
    \    case 'r':\n                case 'R':\n                    output += 'R';\n\
    \                    break;\n                case 's':\n                case 'S':\n\
    \                    output += 'S';\n                    break;\n            \
    \    case 't':\n                case 'T':\n                    output += 'T';\n\
    \                    break;\n                case 'u':\n                case 'U':\n\
    \                    output += 'U';\n                    break;\n            \
    \    case 'v':\n                case 'V':\n                    output += 'V';\n\
    \                    break;\n                case 'w':\n                case 'W':\n\
    \                    output += 'W';\n                    break;\n            \
    \    case 'x':\n                case 'X':\n                    output += 'X';\n\
    \                    break;\n                case 'y':\n                case 'Y':\n\
    \                    output += 'Y';\n                    break;\n            \
    \    case 'z':\n                case 'Z':\n                    output += 'Z';\n\
    \                    break;\n                case '0':\n                case '1':\n\
    \                case '2':\n                case '3':\n                case '4':\n\
    \                case '5':\n                case '6':\n                case '7':\n\
    \                case '8':\n                case '9':\n                    output\
    \ += character;\n                    break;\n                default:\n      \
    \              output += character.ToString();\n                    break;\n \
    \           }\n        }\n        return output;", "        char[] chars = str.ToCharArray();\n\
    \        Array.Reverse(chars);\n        return new string(chars);", "        return\
    \ str.Replace(Char.ToLowerInvariant(str[0]),\n            Char.ToUpperInvariant(str[0])).Replace(Char.ToUpperInvariant(str[0]),\n\
    \            Char.ToLowerInvariant(str[0])).ToLowerInvariant();", '        return
    string.Join("", str.Select(x => char.IsUpper(x) ? char.ToLower(x) : char.ToUpper(x)));',
  "        var upper = new HashSet<char>(str.ToCharArray());\n        foreach (char\
    \ c in str.ToCharArray()) {\n            upper[c] = (char) (char.ToUpper(c));\n\
    \        }\n\n        return new string(upper.ToArray());", "        string result\
    \ = \"\";\n        foreach (char c in str)\n        {\n            if (Char.IsUpper(c))\n\
    \                result += (char.IsUpper(c)) ? Char.ToLower(c) : Char.ToUpper(c);\n\
    \            else\n                result += c;\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        foreach (char c in str)\n\
    \        {\n            if (char.IsLower(c))\n            {\n                sb.Append(char.ToUpper(c));\n\
    \            }\n            else if (char.IsUpper(c))\n            {\n       \
    \         sb.Append(char.ToLower(c));\n            }\n            else\n     \
    \       {\n                sb.Append(c);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = new string('\\u0000', str.Length);\n\
    \        char[] chars = str.ToCharArray();\n        foreach (char c in chars)\
    \ {\n            string newChar = char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n\
    \            result = result.Replace(c.ToString(), newChar);\n        }\n    \
    \    return result;", "        char[] charArray = str.ToCharArray();\n       \
    \ foreach (char c in charArray) {\n            if (c >= 'A' && c <= 'Z') {\n \
    \               charArray[charArray.IndexOf(c)] = char.ToUpper(c);\n         \
    \   }\n            else if (c >= 'a' && c <= 'z') {\n                charArray[charArray.IndexOf(c)]\
    \ = char.ToLower(c);\n            }\n            else {\n                // We\
    \ have a character that's neither an uppercase letter or a lowercase letter.\n\
    \                Debug.Assert(false, \"Not a lowercase letter or an uppercase\
    \ letter\");\n            }\n        }\n        return new string(charArray);",
  "        StringBuilder sb = new StringBuilder(str);\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            if (Char.IsLower(str[i]))\n                sb.Append(char.ToUpper(str[i]));\n\
    \            else\n                sb.Append(char.ToLower(str[i]));\n        }\n\
    \        return sb.ToString();", "        str = str.ToLower();\n        for (int\
    \ i = 0; i < str.Length; i++)\n        {\n            if (Char.IsUpper(str[i]))\n\
    \            {\n                str[i] = Char.ToLower(str[i]);\n            }\n\
    \            else\n            {\n                str[i] = Char.ToUpper(str[i]);\n\
    \            }\n        }\n        return str;", "        StringBuilder builder\
    \ = new StringBuilder();\n        foreach(char c in str) {\n            builder.Append((Char.IsUpper(c)\
    \ ? Char.ToLower(c) : Char.ToUpper(c)));\n        }\n        return builder.ToString();",
  "        string result = \"\";\n        foreach (char c in str) {\n            if\
    \ (char.IsUpper(c)) {\n                result += char.ToLower(c);\n          \
    \  }\n            else {\n                result += char.ToUpper(c);\n       \
    \     }\n        }\n        return result;", "        char[] charArray = str.ToCharArray();\n\
    \        Array.Reverse(charArray);\n        return new string(charArray);", " \
    \       string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (str[i] >= 'a' && str[i] <= 'z') {\n                result +=\
    \ str[i].ToString().ToUpper();\n            } else if (str[i] >= 'A' && str[i]\
    \ <= 'Z') {\n                result += str[i].ToString().ToLower();\n        \
    \    } else {\n                result += str[i];\n            }\n        }\n \
    \       return result;", "        return str\n            .ToLowerInvariant()\n\
    \            .Replace(\"A\", \"B\")\n            .Replace(\"B\", \"A\")\n    \
    \        .ToUpperInvariant();", "        char[] chars = str.ToCharArray();\n \
    \       Array.Sort(chars);\n        return String.Concat(chars.Select(x => Char.ToUpper(x)).ToArray());",
  "        if (str == null) return \"\";\n        string s = \"\";\n        foreach\
    \ (char c in str) {\n            if (Char.IsLower(c)) {\n                s +=\
    \ (char)(Char.ToUpper(c));\n            }\n            else if (Char.IsUpper(c))\
    \ {\n                s += (char)(Char.ToLower(c));\n            }\n          \
    \  else {\n                s += c;\n            }\n        }\n        return s;",
  '        return string.Join(string.Empty, str.ToUpperInvariant().Zip(str.ToLowerInvariant(),
    (x, y) => x == y ? x : (char)((int)x + 32)).ToArray());', "        char[] c =\
    \ new char[str.Length];\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        c[i] = str[i];\n        }\n        return string.Join(\"\", c.Select(c\
    \ => new string((char) (c ^ 32), 1).ToUpper()).ToArray());", "        var result\
    \ = string.Empty;\n        for (int index = 0; index < str.Length; index++) {\n\
    \            if (char.IsUpper(str[index])) {\n                result += char.ToUpper(str[index])\
    \ + str.Substring(index + 1);\n                continue;\n            }\n\n  \
    \          if (char.IsLower(str[index])) {\n                result += char.ToLower(str[index])\
    \ + str.Substring(index + 1);\n                continue;\n            }\n    \
    \    }\n        return result;", '        return new string(str.Select((c, i)
    => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());', "      \
    \  var builder = new StringBuilder(str.Length);\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (Char.IsLower(str[i]))\n                builder.Append(str[i].ToString().ToUpper());\n\
    \            else\n                builder.Append(str[i].ToString().ToLower());\n\
    \        }\n        return builder.ToString();", "        var sb = new StringBuilder(str.Length);\n\
    \        var buf = new char[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            buf[i] = str[i];\n        }\n        for (int i = 0; i <\
    \ buf.Length; i++) {\n            if (Char.IsUpper(buf[i])) {\n              \
    \  sb.Append(char.ToUpper(buf[i]));\n            } else {\n                sb.Append(char.ToLower(buf[i]));\n\
    \            }\n        }\n        return sb.ToString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (Char.IsUpper(str[i]))\n                sb.Append(Char.ToLower(str[i]));\n\
    \            else\n                sb.Append(str[i]);\n        }\n        return\
    \ sb.ToString();", "        return str.Replace(\"a\", \"A\")\n            .Replace(\"\
    b\", \"B\")\n            .Replace(\"c\", \"C\")\n            .Replace(\"d\", \"\
    D\")\n            .Replace(\"e\", \"E\")\n            .Replace(\"f\", \"F\")\n\
    \            .Replace(\"g\", \"G\")\n            .Replace(\"h\", \"H\")\n    \
    \        .Replace(\"i\", \"I\")\n            .Replace(\"j\", \"J\")\n        \
    \    .Replace(\"k\", \"K\")\n            .Replace(\"l\", \"L\")\n            .Replace(\"\
    m\", \"M\")\n            .Replace(\"n\", \"N\")\n            .Replace(\"o\", \"\
    O\")\n            .Replace(\"p\", \"P\")\n            .Replace(\"q\", \"Q\")\n\
    \            .Replace(\"r\", \"R\")\n            .Replace(\"s\", \"S\")\n    \
    \        .Replace(\"t\", \"T\")\n            .Replace(\"u\", \"U\")\n        \
    \    .Replace(\"v\", \"V\")\n            .Replace(\"w\", \"W\")\n            .Replace(\"\
    x\", \"X\")\n            .Replace(\"y\", \"Y\")\n            .Replace(\"z\", \"\
    Z\");", "        if (str == null)\n            throw new ArgumentNullException(\"\
    str\");\n        if (str.Length == 0)\n            return str;\n\n        char[]\
    \ chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            char c = chars[i];\n            if (Char.IsLower(c))\n          \
    \      chars[i] = Char.ToUpper(c);\n            else\n                chars[i]\
    \ = Char.ToLower(c);\n        }\n        return new string(chars);", "       \
    \ char[] charArray = str.ToCharArray();\n        StringBuilder builder = new StringBuilder();\n\
    \        foreach (char character in charArray) {\n            if (char.IsLower(character))\
    \ {\n                builder.Append(char.ToUpper(character));\n            } else\
    \ {\n                builder.Append(char.ToLower(character));\n            }\n\
    \        }\n        return builder.ToString();", "        string result = \"\"\
    ;\n        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n   \
    \             result += char.ToUpper(c);\n            } else {\n             \
    \   result += char.ToLower(c);\n            }\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        foreach (char c in str)\
    \ {\n            char cc = char.ToUpper(c);\n            if (Char.IsLower(cc))\
    \ {\n                sb.Append(cc);\n            } else {\n                sb.Append(cc);\n\
    \            }\n        }\n        return sb.ToString();", "        StringBuilder\
    \ sb = new StringBuilder(str);\n        for (int i = 0; i < str.Length; i++) {\n\
    \            char c = str[i];\n            if (char.IsLower(c)) {\n          \
    \      c = char.ToUpper(c);\n            } else if (char.IsUpper(c)) {\n     \
    \           c = char.ToLower(c);\n            }\n            sb.Replace(c.ToString(),\
    \ c.ToString());\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in str) {\n            if (char.IsLower(c))\
    \ {\n                result += char.ToUpper(c);\n            }\n            else\
    \ {\n                result += char.ToLower(c);\n            }\n        }\n  \
    \      return result;", "        if (str == null) return null;\n        var sb\
    \ = new StringBuilder(str.Length);\n        for (var i = 0; i < str.Length; i++)\n\
    \        {\n            var ch = str[i];\n            var isUppercase = Char.IsUpper(ch);\n\
    \            if (isUppercase)\n                sb.Append(Char.ToLower(ch));\n\
    \            else\n                sb.Append(Char.ToUpper(ch));\n        }\n \
    \       return sb.ToString();", "        return string.Concat(str.Select(c =>\
    \ \n            c >= 'a' && c <= 'z' ?\n            (char)((int)c + 32) :\n  \
    \          c >= 'A' && c <= 'Z' ?\n            (char)((int)c - 32) :\n       \
    \     c));", "        var result = \"\";\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            char c = str[i];\n            if (Char.IsLower(c)) {\n \
    \               result += 'a';\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        return result;", "        char[] charArray\
    \ = str.ToCharArray();\n        char[] newArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z')\n                newArray[i] = (charArray[i]\
    \ - 'a' + 'A');\n            else\n                newArray[i] = charArray[i];\n\
    \        }\n        return new string(newArray);", '        return str.ToUpperInvariant().Replace(str.ToLowerInvariant(),
    str.ToUpperInvariant());', "        char[] arr = str.ToCharArray();\n        for(int\
    \ i = 0; i < arr.Length; i++)\n        {\n            arr[i] = ((char)(arr[i]\
    \ + 32)).ToString();\n        }\n        return arr.ToString();", "        var\
    \ result = new StringBuilder();\n\n        for (int i = 0; i < str.Length; ++i)\
    \ {\n            if (Char.IsLower(str[i]))\n                result.Append(str[i].ToString().ToUpper());\n\
    \            else\n                result.Append(str[i].ToString().ToLower());\n\
    \        }\n        return result.ToString();", "        char[] charArray = str.ToCharArray();\n\
    \        char[] charArray1 = new char[charArray.Length];\n        int i = 0;\n\
    \        foreach (char ch in charArray) {\n            if (char.IsLower(ch)) {\n\
    \                charArray1[i] = (char)(char.ToUpper(ch));\n                i++;\n\
    \            } else {\n                charArray1[i] = (char)(char.ToLower(ch));\n\
    \                i++;\n            }\n        }\n        return new string(charArray1);",
  "        var charArray = str.ToCharArray();\n        var i = 0;\n        while (i\
    \ < charArray.Length) {\n            var c = charArray[i];\n            if (c\
    \ >= 'a' && c <= 'z') {\n                charArray[i] = (char)(c - 32);\n    \
    \        } else if (c >= 'A' && c <= 'Z') {\n                charArray[i] = (char)(c\
    \ + 32);\n            }\n            ++i;\n        }\n        return new string(charArray);",
  "        string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            result += (char)(((int)str[i] + 32) % 26 + 'a');\n        }\n   \
    \     return result;", "        char[] charArray = str.ToCharArray();\n      \
    \  StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            bool isUpper = charArray[i] >= 'A' && charArray[i] <= 'Z';\n\
    \            bool isLower = charArray[i] >= 'a' && charArray[i] <= 'z';\n    \
    \        if (isUpper != isLower) {\n                char ch = charArray[i];\n\
    \                charArray[i] = isUpper ? char.ToUpper(ch) : char.ToLower(ch);\n\
    \                sb.Append(charArray[i]);\n            }\n        }\n        return\
    \ sb.ToString();", "        // Create two stacks, one for lowercase, one for uppercase.\n\
    \        Stack<char> lowerCase = new Stack<char>();\n        Stack<char> upperCase\
    \ = new Stack<char>();\n\n        // Fill the stacks with the string's characters.\n\
    \        foreach (char c in str)\n        {\n            if (char.IsLower(c))\n\
    \            {\n                lowerCase.Push(c);\n            }\n          \
    \  else\n            {\n                upperCase.Push(c);\n            }\n  \
    \      }\n\n        // Swap the characters from one stack to the other.\n    \
    \    while (lowerCase.Count > 0)\n        {\n            char c = lowerCase.Pop();\n\
    \            upperCase.Push(c);\n        }\n\n        // Return the string with\
    \ lowercase characters flipped.\n        return new string(upperCase.ToArray());",
  "        str = str.ToUpper();\n        foreach (char c in str.ToCharArray()) {\n\
    \            if (char.IsLower(c)) {\n                str = str.Replace(c.ToString(),\
    \ (char.ToUpper(c)).ToString());\n            }\n        }\n        return str;",
  "        if (str == null || str.Length == 0) return \"\";\n\n        char[] newChars\
    \ = str.ToCharArray();\n        // First flip\n        for (int i = 0; i < newChars.Length;\
    \ ++i) {\n            if (newChars[i] == 'l') {\n                newChars[i] =\
    \ 'L';\n            }\n            if (newChars[i] == 'L') {\n               \
    \ newChars[i] = 'l';\n            }\n        }\n        // Then flip\n       \
    \ for (int i = 0; i < newChars.Length; ++i) {\n            if (newChars[i] ==\
    \ 'L') {\n                newChars[i] = 'l';\n            }\n            if (newChars[i]\
    \ == 'l') {\n                newChars[i] = 'L';\n            }\n        }\n  \
    \      return new String(newChars);", "        int i = 0;\n        while (i <\
    \ str.Length) {\n            if (str[i].ToString().Length > 1) {\n           \
    \     str[i] = char.ToUpper(str[i]);\n            } else {\n                str[i]\
    \ = char.ToLower(str[i]);\n            }\n            i++;\n        }\n      \
    \  return str;", "        return str.Aggregate(new StringBuilder(),\n        \
    \                    (builder, current) => {\n                               \
    \ if (Char.IsLower(current)) {\n                                    builder.Append(Char.ToUpper(current));\n\
    \                                } else {\n                                  \
    \  builder.Append(Char.ToLower(current));\n                                }\n\
    \                                return builder;\n                           \
    \ },\n                            (builder) => builder.ToString());", "      \
    \  var result = new StringBuilder(str.Length);\n\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            char c = str[i];\n            char swapCase;\n\
    \n            if (c >= 'A' && c <= 'Z') {\n                swapCase = Convert.ToUpper(c);\n\
    \            } else if (c >= 'a' && c <= 'z') {\n                swapCase = Convert.ToLower(c);\n\
    \            } else {\n                swapCase = c;\n            }\n\n      \
    \      result.Append(swapCase);\n        }\n\n        return result.ToString();",
  "        var result = new StringBuilder(str.Length);\n        foreach (var c in\
    \ str) {\n            var i = Char.ToLower(c);\n            var j = Char.ToUpper(c);\n\
    \            result.Append(j);\n            result.Append(i);\n        }\n   \
    \     return result.ToString();", "        // Initialize the string\n        string\
    \ outStr = \"\";\n        // Loop through the string\n        foreach (char ch\
    \ in str) {\n            // Convert to lowercase (no \"toupper\", only \"ToLower\"\
    )\n            outStr += (char)(ch - 32);\n        }\n        // Return it\n \
    \       return outStr;", "        StringBuilder sb = new StringBuilder(str.Length);\n\
    \        foreach (char c in str) {\n            if (Char.IsLower(c)) {\n     \
    \           sb.Append(char.ToUpper(c));\n            } else {\n              \
    \  sb.Append(char.ToLower(c));\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (char.IsUpper(str[i])) {\n                result += char.ToLower(str[i]);\n\
    \            }\n            else {\n                result += char.ToUpper(str[i]);\n\
    \            }\n        }\n        return result;", '        return string.Concat(str.Select(c
    => (Char.IsLower(c) ? Char.ToUpper(c) : Char.ToLower(c))).ToArray());', "    \
    \    char[] charArray = str.ToCharArray();\n        int length = charArray.Length;\n\
    \        StringBuilder sb = new StringBuilder(charArray.Length);\n        for\
    \ (int i = 0; i < length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                sb.Append((char) (charArray[i] + 32));\n        \
    \    } else {\n                sb.Append(charArray[i]);\n            }\n     \
    \   }\n        return sb.ToString();", "        if (str.Length < 2) return str;\n\
    \        string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            string c = str[i];\n            if (c.Equals('a')) {\n          \
    \      result += c;\n            }\n            else if (c.Equals('A')) {\n  \
    \              result += c.ToUpper();\n            }\n            else if (c.Equals('e'))\
    \ {\n                result += c.ToUpper();\n            }\n            else if\
    \ (c.Equals('E')) {\n                result += c.ToLower();\n            }\n \
    \           else if (c.Equals('i')) {\n                result += c.ToUpper();\n\
    \            }\n            else if (c.Equals('I')) {\n                result\
    \ += c.ToLower();\n            }\n            else if (c.Equals('o')) {\n    \
    \            result += c.ToUpper();\n            }\n            else if (c.Equals('O'))\
    \ {\n                result += c.ToLower();\n            }\n            else if\
    \ (c.Equals('u')) {\n                result += c.ToUpper();\n            }\n \
    \           else if (c.Equals('U')) {\n                result += c.ToLower();\n\
    \            }\n            else {\n                result += c;\n           \
    \ }\n        }\n        return result;", "        // Create a char array of the\
    \ original string\n        char[] charArray = str.ToCharArray();\n\n        //\
    \ Create a new char array of the same length, populated with null\n        char[]\
    \ newCharArray = new char[charArray.Length];\n        Array.Copy(charArray, 0,\
    \ newCharArray, 0, charArray.Length);\n\n        // Loop through each character\
    \ in the array and flip it (uppercase to lowercase\n        // and vice-versa)\n\
    \        for (int i = 0; i < newCharArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 'A' - 'a');\n            } else if (charArray[i] >= 'A' && charArray[i] <=\
    \ 'Z') {\n                newCharArray[i] = (char)(charArray[i] + 'a' - 'A');\n\
    \            } else {\n                newCharArray[i] = charArray[i];\n     \
    \       }\n        }\n\n        // Return the new string\n        return new string(newCharArray);",
  "        string flippedStr = string.Empty;\n        if (string.IsNullOrEmpty(str))\
    \ return str;\n\n        int i = 0;\n        foreach (char c in str) {\n     \
    \       if (Char.IsLower(c)) {\n                flippedStr += char.ToUpperInvariant(c);\n\
    \            } else {\n                flippedStr += c;\n            }\n     \
    \       i++;\n        }\n        return flippedStr;", "        if (str == null\
    \ || str.Length == 0)\n            return str;\n        return str.ToUpperInvariant()\n\
    \            .Replace(\" \", \"\")\n            .Replace(\"_\", \"\")\n      \
    \      .Replace(\"-\", \"\")\n            .Replace(\" \", \"\")\n            .Replace(\"\
    !\", \"\")\n            .Replace(\"@\", \"\")\n            .Replace(\"#\", \"\"\
    )\n            .Replace(\"$\", \"\")\n            .Replace(\"%\", \"\")\n    \
    \        .Replace(\"^\", \"\")\n            .Replace(\"&\", \"\")\n          \
    \  .Replace(\"*\", \"\")\n            .Replace(\"(\", \"\")\n            .Replace(\"\
    )\", \"\")\n            .Replace(\"_\", \"\")\n            .Replace(\"`\", \"\"\
    )\n            .Replace(\"[\", \"\")\n            .Replace(\"]\", \"\")\n    \
    \        .Replace(\"{\", \"\")\n            .Replace(\"}\", \"\")\n          \
    \  .Replace(\" \", \"\")\n            .Replace(\":\", \"\")\n            .Replace(\"\
    ,\", \"\")\n            .Replace(\".\", \"\")\n            .Replace(\"/\", \"\"\
    )\n            .Replace(\"?\", \"\")\n            .Replace(\":\", \"\")\n    \
    \        .Replace(\"|\", \"\")\n            .Replace(\"}\", \"\")\n          \
    \  .Replace(\"\\\"\", \"\")\n            .Replace(\"'\", \"\")\n            .Replace(\"\
    \ \", \"\")\n            .Replace(\"_\", \"\")\n            .Replace(\"%\", \"\
    \")\n            .Replace(\"?\", \"\")\n            .Replace(\"(\", \"\")\n  \
    \          .Replace(\")\", \"\")\n            .Replace(\"{\", \"\")\n        \
    \    .Replace(\"}\", \"\")\n            .Replace(\"]\", \"\")\n            .Replace(\"\
    [\", \"\")\n            .Replace(\"`\", \"\")\n            .Replace(\"_\", \"\"\
    )\n            .Replace(\"-\", \"\")\n            .Replace(\"!\", \"\")\n    \
    \        .Replace(\"@\", \"\")\n            .Replace(\"#\", \"\")\n          \
    \  .Replace(\"$\", \"\")\n            .Replace(\"%\", \"\")\n            .Replace(\"\
    ^\", \"\")\n            .Replace(\"&\", \"\")\n            .Replace(\"*\", \"\"\
    )\n            .Replace(\"(\", \"\")\n            .Replace(\")\", \"\")\n    \
    \        .Replace(\"_\", \"\")\n            .Replace(\"`\", \"\")\n          \
    \  .Replace(\"[\", \"\")\n            .Replace(\"]\", \"\")\n            .Replace(\"\
    {\", \"\")\n            .Replace(\"}\", \"\")\n            .Replace(\" \", \"\"\
    )\n            .Replace(\":\", \"\")\n            .Replace(\",\", \"\")\n    \
    \        .Replace(\".\", \"\")\n            .Replace(\"/\", \"\")\n          \
    \  .Replace(\"?\", \"\")\n            .Replace(\":\", \"\")\n            .Replace(\"\
    |\", \"\")\n            .Replace(\"}\", \"\")\n            .Replace(\"\\\"\",\
    \ \"\")\n            .Replace(\"'\", \"\")\n            .Replace(\" \", \"\")\n\
    \            .Replace(\"_\", \"\")\n            .Replace(\"%\", \"\")\n      \
    \      .Replace(\"?\", \"\")\n            .Replace(\"(\", \"\")\n            .Replace(\"\
    )\", \"\")\n            .Replace(\"{\", \"\")\n            .Replace(\"}\", \"\"\
    )\n            .Replace(\"]\", \"\")\n            .Replace(\"[\", \"\")\n    \
    \        .Replace(\"`\", \"\")\n            .Replace(\"_", "        StringBuilder\
    \ sb = new StringBuilder(str.Length);\n        foreach (char c in str)\n     \
    \       sb[sb.Length - 1 - char.IsLower(c)] = c;\n        return sb.ToString();",
  "        int length = str.Length;\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < length; ++i)\n        {\n            char c = str[i];\n\
    \            if (Char.IsLower(c))\n            {\n                c = Char.ToUpper(c);\n\
    \            }\n            else\n            {\n                c = Char.ToLower(c);\n\
    \            }\n            sb.Append(c);\n        }\n        return sb.ToString();",
  "        char[] chars = str.ToCharArray();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            char ch = chars[i];\n\
    \            if (char.IsLower(ch)) {\n                sb.Append(char.ToUpper(ch));\n\
    \            } else {\n                sb.Append(char.ToLower(ch));\n        \
    \    }\n        }\n        return sb.ToString();", "        if (String.IsNullOrEmpty(str))\
    \ {\n            return str;\n        }\n        char[] chars = str.ToCharArray();\n\
    \        Array.Sort(chars);\n        return new string(chars.Reverse().ToArray());",
  "        var result = new StringBuilder();\n        foreach (var c in str) {\n \
    \           if (Char.IsLower(c)) {\n                result.Append(char.ToUpper(c));\n\
    \            }\n            else {\n                result.Append(char.ToLower(c));\n\
    \            }\n        }\n        return result.ToString();", "        char[]\
    \ charArray = str.ToCharArray();\n        for(int i = 0; i < charArray.Length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            charArray[i] = (char)(charArray[i] + 'A' - 'a');\n            } else\
    \ if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i]\
    \ = (char)(charArray[i] + 'a' - 'A');\n            }\n        }\n        return\
    \ new string(charArray);", "        string result = \"\";\n        foreach (var\
    \ c in str) {\n            if (c >= 'a' && c <= 'z') {\n                result\
    \ += (char) (c + 32);\n            }\n            else if (c >= 'A' && c <= 'Z')\
    \ {\n                result += (char) (c + 32);\n            }\n            else\
    \ {\n                result += c;\n            }\n        }\n        return result;",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i].ToString().ToLower() == chars[i].ToString())\
    \ {\n                chars[i] = chars[i].ToString().ToUpper();\n            }\
    \ else {\n                chars[i] = chars[i].ToString().ToLower();\n        \
    \    }\n        }\n        return new string(chars);", "        // 1. Lowercase\
    \ -> Uppercase\n        string result = \"\";\n        foreach (char c in str)\
    \ {\n            result += (char.IsUpper(c)) ? (char.ToLower(c)) : (char.ToUpper(c));\n\
    \        }\n        // 2. Uppercase -> Lowercase\n        string result2 = \"\"\
    ;\n        foreach (char c in str) {\n            result2 += (char.IsUpper(c))\
    \ ? (char.ToUpper(c)) : (char.ToLower(c));\n        }\n        // 3. Check for\
    \ equality\n        if (result.Equals(result2, StringComparison.OrdinalIgnoreCase))\
    \ {\n            return str.ToLower();\n        }\n        return str;", "   \
    \     char[] charArray = str.ToLower().ToCharArray();\n        charArray = Enumerable.Reverse(charArray).ToArray();\n\
    \        return new string(charArray);", "        string result;\n        var\
    \ sb = new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n\
    \            // This handles cases like 'A' and 'a'.\n            if ((str[i]\
    \ == 'A') || (str[i] == 'a')) {\n                sb.Append(str[i].ToString().ToUpperInvariant());\n\
    \            }\n            else\n            {\n                sb.Append(str[i].ToString().ToLowerInvariant());\n\
    \            }\n        }\n        result = sb.ToString();\n        return result;",
  "        var result = new StringBuilder();\n        foreach (char ch in str) {\n\
    \            bool swap = true;\n            if (char.IsLower(ch)) {\n        \
    \        result.Append(char.ToUpper(ch));\n                swap = false;\n   \
    \         } else if (char.IsUpper(ch)) {\n                result.Append(char.ToLower(ch));\n\
    \                swap = false;\n            } else {\n                result.Append(ch);\n\
    \            }\n            if (swap)\n                result.Append(ch);\n  \
    \      }\n        return result.toString();", "        string result = string.Empty;\n\
    \        foreach (char c in str) {\n            result += (char)(c ^ 32);\n  \
    \      }\n        return result;", '        return str.ToUpperInvariant().ToLower();',
  '        return str.ToUpper().ToLower();', "        char[] charArr = str.ToCharArray();\n\
    \        for (int i = 0; i < charArr.Length; i++) {\n            if (charArr[i]\
    \ >= 'a' && charArr[i] <= 'z') {\n                charArr[i] = (char)(char.ToUpper(charArr[i])\
    \ + 0x20);\n            } else if (charArr[i] >= 'A' && charArr[i] <= 'Z') {\n\
    \                charArr[i] = (char)(char.ToUpper(charArr[i]) - 0x20);\n     \
    \       }\n        }\n        return new string(charArr);", '        return str.Aggregate(new
    StringBuilder(), (builder, char) => builder.Append((char.IsUpper) ? char.ToLower(char)
    : char.ToUpper(char))).ToString();', '        return str.Select(c => Char.IsLower(c)
    ? Char.ToUpper(c) : Char.ToLower(c)).ToArray();', "        var sb = new StringBuilder();\n\
    \        foreach (var c in str) {\n            if (Char.IsLower(c)) {\n      \
    \          sb.Append(char.ToUpper(c));\n            }\n            else {\n  \
    \              sb.Append(char.ToLower(c));\n            }\n        }\n       \
    \ return sb.ToString();", '        return Regex.Replace(str, "[a-z]", match =>
    match.Groups[0].ToString().ToUpper());', "        string result = string.Empty;\n\
    \        foreach (char c in str) {\n            if (char.IsUpper(c))\n       \
    \         result += char.ToLower(c);\n            else\n                result\
    \ += char.ToUpper(c);\n        }\n        return result;", "        StringBuilder\
    \ sb = new StringBuilder();\n\n        // Convert the string to a char[]\n   \
    \     char[] chars = str.ToCharArray();\n        char[] upperChars = new char[chars.Length];\n\
    \        char[] lowerChars = new char[chars.Length];\n\n        // Flip the uppercase\
    \ characters to lowercase\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (char.IsUpper(chars[i])) {\n                upperChars[i] = chars[i];\n\
    \            } else {\n                lowerChars[i] = chars[i];\n           \
    \ }\n        }\n\n        // Flip the lowercase characters to uppercase\n    \
    \    for (int i = 0; i < chars.Length; i++) {\n            if (char.IsUpper(chars[i]))\
    \ {\n                chars[i] = chars[i] != char.ToUpper(chars[i]) ? char.ToUpper(chars[i])\
    \ : chars[i];\n            } else {\n                chars[i] = chars[i] != char.ToLower(chars[i])\
    \ ? char.ToLower(chars[i]) : chars[i];\n            }\n        }\n\n        //\
    \ Create a new string from the char[]\n        sb.Append(new String(upperChars));\n\
    \        sb.Append(new String(lowerChars));\n\n        return sb.ToString();",
  "        return string.Concat(str.Select(x => x == ' ' ? '_' : char.ToUpper(x)));",
  "        char[] chars = str.ToCharArray();\n        char[] revChars = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            revChars[chars.Length\
    \ - i - 1] = chars[i];\n        }\n        return new String(revChars);", "  \
    \      StringBuilder sb = new StringBuilder();\n        foreach (char c in str)\
    \ {\n            if (Char.IsLower(c)) {\n                sb.Append(char.ToUpper(c));\n\
    \            }\n            else {\n                sb.Append(char.ToLower(c));\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = string.Empty;\n        int len = str.Length;\n\n        for (int i = 0; i\
    \ < len; i++) {\n            char c = str[i];\n            if (Char.IsUpper(c))\
    \ {\n                result += 'A' + ((c - 'A' + 1) % 26);\n            } else\
    \ {\n                result += 'a' + ((c - 'a' + 1) % 26);\n            }\n  \
    \      }\n        return result;", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            char c = chars[i];\n\
    \            switch (c) {\n                case 'a':\n                    chars[i]\
    \ = 'A';\n                    break;\n                case 'b':\n            \
    \        chars[i] = 'B';\n                    break;\n                case 'c':\n\
    \                    chars[i] = 'C';\n                    break;\n           \
    \     case 'd':\n                    chars[i] = 'D';\n                    break;\n\
    \                case 'e':\n                    chars[i] = 'E';\n            \
    \        break;\n                case 'f':\n                    chars[i] = 'F';\n\
    \                    break;\n                case 'g':\n                    chars[i]\
    \ = 'G';\n                    break;\n                case 'h':\n            \
    \        chars[i] = 'H';\n                    break;\n                case 'i':\n\
    \                    chars[i] = 'I';\n                    break;\n           \
    \     case 'j':\n                    chars[i] = 'J';\n                    break;\n\
    \                case 'k':\n                    chars[i] = 'K';\n            \
    \        break;\n                case 'l':\n                    chars[i] = 'L';\n\
    \                    break;\n                case 'm':\n                    chars[i]\
    \ = 'M';\n                    break;\n                case 'n':\n            \
    \        chars[i] = 'N';\n                    break;\n                case 'o':\n\
    \                    chars[i] = 'O';\n                    break;\n           \
    \     case 'p':\n                    chars[i] = 'P';\n                    break;\n\
    \                case 'q':\n                    chars[i] = 'Q';\n            \
    \        break;\n                case 'r':\n                    chars[i] = 'R';\n\
    \                    break;\n                case 's':\n                    chars[i]\
    \ = 'S';\n                    break;\n                case 't':\n            \
    \        chars[i] = 'T';\n                    break;\n                case 'u':\n\
    \                    chars[i] = 'U';\n                    break;\n           \
    \     case 'v':\n                    chars[i] = 'V';\n                    break;\n\
    \                case 'w':\n                    chars[i] = 'W';\n            \
    \        break;\n                case 'x':\n                    chars[i] = 'X';\n\
    \                    break;\n                case 'y':\n                    chars[i]\
    \ = 'Y';\n                    break;\n                case 'z':\n            \
    \        chars[i] = 'Z';\n                    break;\n                default:\n\
    \                    chars[i] = c;\n                    break;\n            }\n\
    \        }\n        return new string(chars);", "        bool inUpper = false;\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            char ch = str[i];\n            if (Char.IsLower(ch))\n\
    \                inUpper = !inUpper;\n            else if (!inUpper)\n       \
    \         sb.Append(ch);\n        }\n        return sb.ToString();", "       \
    \ char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            chars[i] = chars[i].ToString().ToUpper();\n        }\n \
    \       return new string(chars);", "        string flippedStr = \"\";\n     \
    \   int index = str.Length - 1;\n        while (index >= 0) {\n            char\
    \ currentChar = str[index];\n            if (currentChar.ToString().ToLower()\
    \ != currentChar.ToString().ToUpper()) {\n                flippedStr += currentChar.ToString().ToUpper();\n\
    \            } else {\n                flippedStr += currentChar.ToString().ToLower();\n\
    \            }\n            index -= 1;\n        }\n        return flippedStr;",
  "        if (String.IsNullOrEmpty(str))\n            return str;\n        if (str.Length\
    \ == 1)\n            return str;\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in str.ToCharArray()) {\n            if (Char.IsLower(c))\
    \ {\n                sb.Append(char.ToUpperInvariant(c));\n            } else\
    \ {\n                sb.Append(char.ToLowerInvariant(c));\n            }\n   \
    \     }\n        return sb.ToString();", "        var results = new List<char>();\n\
    \        foreach (var c in str)\n        {\n            if (Char.IsUpper(c))\n\
    \            {\n                results.Add(Char.ToLower(c));\n            }\n\
    \            else\n            {\n                results.Add(c);\n          \
    \  }\n        }\n        return new string(results.ToArray());", "        if (str\
    \ == null) return null;\n        var sb = new StringBuilder(str.Length);\n   \
    \     foreach (var c in str) {\n            if (Char.IsLower(c)) sb.Append(char.ToUpper(c));\n\
    \            else sb.Append(char.ToLower(c));\n        }\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        foreach (char c in str)\
    \ {\n            if (Char.IsLower(c))\n                sb.Append(char.ToUpperInvariant(c));\n\
    \            else\n                sb.Append(char.ToLowerInvariant(c));\n    \
    \    }\n        return sb.ToString();", "        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            if (c >= 'a' && c <= 'z')\n                builder.Append(c - 'a'\
    \ + 'A');\n            else if (c >= 'A' && c <= 'Z')\n                builder.Append(c\
    \ - 'A' + 'a');\n            else\n                builder.Append(c);\n      \
    \  }\n        return builder.ToString();", "        if (str == null)\n       \
    \     return null;\n\n        var sb = new StringBuilder();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            char ch = str[i];\n            if\
    \ (Char.IsUpper(ch))\n                ch = Char.ToLower(ch);\n            sb.Append(ch);\n\
    \        }\n        return sb.ToString();", "        // TODO: Write some code\n\
    \        return str;", "        var charArray = str.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return new string(charArray);", "        // Use hash set to avoid duplicate\
    \ characters.\n        var hashSet = new HashSet<string>(str.ToCharArray());\n\
    \        str = str.ToLower();\n        for (int i = 0; i < str.Length; ++i) {\n\
    \            // If the character is not in the hash set.\n            if (!hashSet.Contains(str[i]))\
    \ {\n                char c = str[i];\n                str[i] = str[i].ToString().ToUpper();\n\
    \                hashSet.Add(str[i]);\n                str[i] = c;\n         \
    \   }\n        }\n        return str;", "        return str.ToLower()\n      \
    \      .Aggregate((first, second) => {\n                return second + first;\n\
    \            });", "        var results = new List<string>();\n        var hash\
    \ = SHA256.Create();\n        foreach (var c in str)\n        {\n            if\
    \ (c.Equals(' '))\n            {\n                results.Add(c);\n          \
    \  }\n            else if (char.IsLower(c))\n            {\n                results.Add(char.ToUpper(c));\n\
    \            }\n            else\n            {\n                results.Add(char.ToLower(c));\n\
    \            }\n        }\n\n        var hashBytes = hash.ComputeHash(Encoding.UTF8.GetBytes(string.Join(\"\
    \", results)));\n\n        var sb = new StringBuilder(str.Length);\n        foreach\
    \ (var hashByte in hashBytes)\n        {\n            sb.Append((byte)((hashByte\
    \ >> 4) & 0xf).ToString(\"X2\"));\n            sb.Append((byte)hashByte & 0x0f);\n\
    \        }\n        return sb.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n\
    \            if (c == '-') {\n                sb.Append(str[i]);\n           \
    \ } else {\n                if (char.IsLetter(c)) {\n                    sb.Append((char.ToUpper(c)));\n\
    \                } else {\n                    sb.Append((char.ToLower(c)));\n\
    \                }\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        if (str != null && str.Length > 0) {\n \
    \           char[] chArr = str.ToCharArray();\n            char[] retArr = new\
    \ char[chArr.Length];\n            for (int i = 0; i < chArr.Length; i++) {\n\
    \                if (char.IsLower(chArr[i])) {\n                    retArr[i]\
    \ = (char)(chArr[i] + 32);\n                }\n                else {\n      \
    \              retArr[i] = (char)(chArr[i] - 32);\n                }\n       \
    \     }\n            result = new string(retArr);\n        }\n        return result;",
  "        char[] chars = str.ToCharArray();\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ char.ToUpper(chars[i])) {\n                sb.Append(char.ToLower(chars[i]));\n\
    \            }\n            else {\n                sb.Append(chars[i]);\n   \
    \         }\n        }\n        return sb.ToString();", "        if (str == null)\
    \ return null;\n        char[] arr = str.ToCharArray();\n        foreach (char\
    \ c in arr) {\n            string newC = char.ToUpper(c);\n            if (c !=\
    \ newC) {\n                str = str.Replace(newC, c);\n            }\n      \
    \  }\n        return str.ToLower();", "        string result = \"\";\n       \
    \ foreach (char c in str) {\n            result += (char.IsUpper(c)) ? (char.ToLower(c))\
    \ : (char.ToUpper(c));\n        }\n        return result;", "        return str.ToLower().Replace(\"\
    a\", char.ToUpper('a')\n                                   ).Replace(\"A\", char.ToUpper('A')\n\
    \                                   ).Replace(\"b\", char.ToUpper('b')\n     \
    \                              ).Replace(\"B\", char.ToUpper('B')\n          \
    \                         ).Replace(\"c\", char.ToUpper('c')\n               \
    \                    ).Replace(\"C\", char.ToUpper('C')\n                    \
    \               ).Replace(\"d\", char.ToUpper('d')\n                         \
    \          ).Replace(\"D\", char.ToUpper('D')\n                              \
    \     ).Replace(\"e\", char.ToUpper('e')\n                                   ).Replace(\"\
    E\", char.ToUpper('E')\n                                   ).Replace(\"f\", char.ToUpper('f')\n\
    \                                   ).Replace(\"F\", char.ToUpper('F')\n     \
    \                              ).Replace(\"g\", char.ToUpper('g')\n          \
    \                         ).Replace(\"G\", char.ToUpper('G')\n               \
    \                    ).Replace(\"h\", char.ToUpper('h')\n                    \
    \               ).Replace(\"H\", char.ToUpper('H')\n                         \
    \          ).Replace(\"i\", char.ToUpper('i')\n                              \
    \     ).Replace(\"I\", char.ToUpper('I')\n                                   ).Replace(\"\
    j\", char.ToUpper('j')\n                                   ).Replace(\"J\", char.ToUpper('J')\n\
    \                                   ).Replace(\"k\", char.ToUpper('k')\n     \
    \                              ).Replace(\"K\", char.ToUpper('K')\n          \
    \                         ).Replace(\"l\", char.ToUpper('l')\n               \
    \                    ).Replace(\"L\", char.ToUpper('L')\n                    \
    \               ).Replace(\"m\", char.ToUpper('m')\n                         \
    \          ).Replace(\"M\", char.ToUpper('M')\n                              \
    \     ).Replace(\"n\", char.ToUpper('n')\n                                   ).Replace(\"\
    N\", char.ToUpper('N')\n                                   ).Replace(\"o\", char.ToUpper('o')\n\
    \                                   ).Replace(\"O\", char.ToUpper('O')\n     \
    \                              ).Replace(\"p\", char.ToUpper('p')\n          \
    \                         ).Replace(\"P\", char.ToUpper('P')\n               \
    \                    ).Replace(\"q\", char.ToUpper('q')\n                    \
    \               ).Replace(\"Q\", char.ToUpper('Q')\n                         \
    \          ).Replace(\"r\", char.ToUpper('r')\n                              \
    \     ).Replace(\"R\", char.ToUpper('R')\n                                   ).Replace(\"\
    s\", char.ToUpper('s')\n                                   ).Replace(\"S\", ",
  "        StringBuilder sb = new StringBuilder();\n        foreach(char c in str)\
    \ {\n            if (char.IsUpper(c)) {\n                sb.Append(char.ToLower(c));\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        string str2 = \"\";\n        foreach\
    \ (char c in str) {\n            str2 = str2 + Char.ToUpper(c);\n            str2\
    \ = str2 + Char.ToLower(c);\n        }\n        return str2;", "        char[]\
    \ buffer = new char[str.Length];\n        int index = 0;\n        foreach (char\
    \ c in str) {\n            if (char.IsLower(c)) {\n                buffer[index++]\
    \ = char.ToUpper(c);\n            } else {\n                buffer[index++] =\
    \ char.ToLower(c);\n            }\n        }\n        return new string(buffer);",
  "        var sb = new StringBuilder(str.Length);\n        foreach (var c in str)\n\
    \        {\n            if (Char.IsUpper(c))\n            {\n                sb.Append(Char.ToLower(c));\n\
    \            }\n            else\n            {\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        StringBuilder\
    \ ret = new StringBuilder();\n        foreach (char c in str)\n            ret.Append((char)\
    \ (Math.ToUpper(c) | Math.ToLower(c)));\n        return ret.ToString();", "  \
    \      // Return value will be a new string with lowercase characters converted\
    \ to uppercase characters.\n        StringBuilder result = new StringBuilder(str.Length);\n\
    \n        for (int i = 0; i < str.Length; i++) {\n            // If the character\
    \ is lowercase then convert it to uppercase.\n            if (str[i].ToString().ToLower()\
    \ == str[i]) {\n                result.Append(str[i].ToString().ToUpper());\n\
    \            } else {\n                result.Append(str[i]);\n            }\n\
    \        }\n\n        return result.ToString();", "        str = str.ToLower();\n\
    \        return str.ToUpper();", "        return Regex.Replace(str, \"[a-z]\"\
    , m => m.Value.ToUpper(), RegexOptions.IgnoreCase)\n            .Replace(\"[A-Z]\"\
    , m => m.Value.ToLower(), RegexOptions.IgnoreCase);", "        char[] arr = str.ToCharArray();\n\
    \        int length = arr.Length;\n        for (int i = 0; i < length; i++) {\n\
    \            arr[i] = Char.ToUpper(arr[i]);\n            arr[i] = Char.ToLower(arr[i]);\n\
    \        }\n        return new string(arr);", '        return char.ToLower(str[0])
    + str.Substring(1).ToUpper();', '        return string.Concat(str.Select(c =>
    char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)));', "        char[] chars\
    \ = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n   \
    \         char c = chars[i];\n            if (Char.IsLower(c)) {\n           \
    \     chars[i] = Char.ToUpper(c);\n            } else {\n                chars[i]\
    \ = Char.ToLower(c);\n            }\n        }\n        return new string(chars);",
  "        char[] charArray = str.ToCharArray();\n        foreach (char c in charArray)\
    \ {\n            if ((c >= 'a') && (c <= 'z')) {\n                charArray[c]\
    \ = 'A' + c - 'a';\n            } else if ((c >= 'A') && (c <= 'Z')) {\n     \
    \           charArray[c] = 'a' + c - 'A';\n            }\n        }\n        return\
    \ new string(charArray);", "        char[] chars = str.ToLower().ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n\n        for (int i = 0; i\
    \ < flipped.Length; i++) {\n            flipped[i] = chars[chars.Length - i -\
    \ 1];\n        }\n\n        return new string(flipped);", "        return str.ToLower().Replace(\n\
    \            str.ToLower(), \n            str => Char.ToUpper(str[0]) + str.Substring(1).ToLower());",
  "        str = str.ToUpper();\n        char[] chars = new char[str.Length];\n  \
    \      for(int i = 0; i < str.Length; ++i) {\n            chars[i] = str.ElementAt(i).ToString().ToUpper();\n\
    \        }\n        return new string(chars);", "        int max = str.Length;\n\
    \        for (int i = 0; i < max; i++) {\n            if (str[i] == str[i].ToLower())\n\
    \                str[i] = str[i].ToUpper();\n            else if (str[i] == str[i].ToUpper())\n\
    \                str[i] = str[i].ToLower();\n        }\n        return str;",
  "        // Create the return string and start counting the number of lowercase\
    \ and uppercase characters.\n        string ret = new StringBuilder(str.Length).ToString();\n\
    \n        // Loop through the string and add uppercase characters to the return\
    \ string.\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i]\
    \ <= 'Z')\n                ret += (str[i] - 'A' + 'a');\n            else\n  \
    \              ret += (str[i] - 'a' + 'A');\n        }\n\n        // Return the\
    \ return string.\n        return ret;", "        // Convert the string to lower\
    \ case and store the result in a new string.\n        // To convert the upper\
    \ case letters to the lower case letters use the following\n        // (char)(char.ToUpper(str[i]))\n\
    \        string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            result += (char)(char.ToUpper(str[i]));\n        }\n        return\
    \ result;", "        StringBuilder sb = new StringBuilder(str.Length);\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n   \
    \         if (c >= 'A' && c <= 'Z')\n                sb.Append((char)(c - 'A'\
    \ + 'A'));\n            else if (c >= 'a' && c <= 'z')\n                sb.Append((char)(c\
    \ - 'a' + 'a'));\n            else\n                sb.Append(c);\n        }\n\
    \        return sb.ToString();", "        char[] chars = str.ToCharArray();\n\
    \        StringBuilder sb = new StringBuilder(str.Length);\n        for (int i\
    \ = 0; i < str.Length; i++) {\n            if (chars[i].ToString().Equals(\"A\"\
    , StringComparison.OrdinalIgnoreCase)) {\n                chars[i] = chars[i].ToString().ToUpper();\n\
    \            } else if (chars[i].ToString().Equals(\"a\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                chars[i] = chars[i].ToString().ToLower();\n            }\n\
    \            sb.Append(chars[i]);\n        }\n        return sb.ToString();",
  "        var charList = str.ToCharArray();\n        for (int i = 0; i < charList.Length;\
    \ i++) {\n            if (charList[i].ToString().ToLowerInvariant()\n        \
    \        .Equals(charList[i].ToString().ToUpperInvariant())) {\n             \
    \   charList[i] = charList[i].ToString().ToUpperInvariant();\n            } else\
    \ {\n                charList[i] = charList[i].ToString().ToLowerInvariant();\n\
    \            }\n        }\n        return new string(charList);", "        str\
    \ = str.ToUpper();\n        str = str.Replace(\"O\", \"0\");\n        str = str.Replace(\"\
    L\", \"1\");\n        str = str.Replace(\"E\", \"2\");\n        str = str.Replace(\"\
    L\", \"3\");\n        str = str.Replace(\"O\", \"4\");\n        str = str.Replace(\"\
    I\", \"5\");\n        str = str.Replace(\"N\", \"6\");\n        str = str.Replace(\"\
    G\", \"7\");\n        str = str.Replace(\"E\", \"8\");\n        str = str.Replace(\"\
    R\", \"9\");\n        return str;", "        string result = \"\";\n        foreach\
    \ (char c in str) {\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c\
    \ <= 'z')) {\n                result += (char)(c + 'A' - 'a');\n            }\
    \ else {\n                result += c;\n            }\n        }\n        return\
    \ result;", "        // Your code here\n        string result = \"\";\n      \
    \  for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n    \
    \        result += (Char.IsLower(c)) ? Char.ToUpper(c) : Char.ToLower(c);\n  \
    \      }\n        return result;", "        var result = \"\";\n        for (int\
    \ index = 0; index < str.Length; index++)\n        {\n            char cha = str[index];\n\
    \            char chb = cha;\n            bool flip = false;\n            if (char.IsLower(cha))\n\
    \            {\n                chb = char.ToUpper(cha);\n                flip\
    \ = true;\n            }\n            else if (char.IsUpper(cha))\n          \
    \  {\n                chb = char.ToLower(cha);\n                flip = true;\n\
    \            }\n            if (flip)\n            {\n                result +=\
    \ chb;\n            }\n        }\n        return result;", '        return String.Join("",
    str.Select(c => Char.IsUpper(c) ? c.ToString().ToUpper() : c.ToString().ToLower()));',
  '        return new String(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  "        char[] c = new char[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            c[i] = str[i] >= 'a' ? 'A' + ((str[i] - 'A') % 26) : str[i]\
    \ >= 'A' ? 'a' + ((str[i] - 'a') % 26) : str[i];\n        }\n        return new\
    \ string(c);", "        string result = String.Empty;\n        if (String.IsNullOrEmpty(str))\
    \ {\n            return result;\n        }\n        char[] chars = str.ToCharArray();\n\
    \        Array.Sort(chars);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ char.ToLower()) {\n                chars[i] = char.ToUpper();\n            }\n\
    \            if (chars[i] == char.ToUpper()) {\n                chars[i] = char.ToLower();\n\
    \            }\n            sb.Append(chars[i]);\n        }\n        return result.ToLowerInvariant();",
  '        return str.ToUpperInvariant();', "        string result;\n        if (str\
    \ == null) {\n            return null;\n        }\n        if (str.Length == 0)\
    \ {\n            return \"\";\n        }\n        if (str.Length == 1) {\n   \
    \         result = str.ToLower();\n            return result;\n        }\n\n \
    \       StringBuilder builder = new StringBuilder(str.Length);\n        foreach\
    \ (char c in str.ToLower()) {\n            builder.Append(c);\n        }\n\n \
    \       return builder.ToString();", '        return String.Join("", str.Select((c,
    index) => index > 0 ? Char.ToUpper(c) : Char.ToLower(c)));', "        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in str) {\n            if\
    \ (Char.IsLower(c)) sb.Append(char.ToUpper(c));\n            else sb.Append(char.ToLower(c));\n\
    \        }\n        return sb.ToString();", '        return str.ToUpper().ToLower();',
  "        var flippedStr = new StringBuilder(str.Length);\n        var upper = char.ToUpper(str[0]);\
    \ flippedStr.Append(upper);\n        for (var i = 1; i < str.Length; i++) {\n\
    \            var lower = char.ToLower(str[i]);\n            flippedStr.Append(lower);\n\
    \        }\n        return flippedStr.ToString();", "        return string.Join(\"\
    \", str\n            .Select(c => Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c))\n\
    \            .ToArray());", "        // If there are no uppercase characters,\
    \ just return it.\n        if (String.IsNullOrEmpty(str))\n            return\
    \ str;\n\n        char[] charArray = str.ToCharArray();\n        charArray = charArray.Select(c\
    \ => (Char) ((c >= 'a') ? (c - 32) : (c + 32)).ToLower()).ToArray();\n       \
    \ return new string(charArray);", '        return string.Concat(str.ToLower().ToArray().Reverse().ToArray());',
  "        char[] arr = str.ToCharArray();\n        Array.Reverse(arr);\n        return\
    \ new string(arr);", "        var result = new StringBuilder(str.Length);\n\n\
    \        foreach (var c in str) {\n            bool isUpper = Char.IsUpper(c);\n\
    \            bool isLower = Char.IsLower(c);\n            if (isUpper && !isLower)\n\
    \                result.Append(char.ToUpper(c));\n            else if (isLower\
    \ && !isUpper)\n                result.Append(char.ToLower(c));\n            else\n\
    \                result.Append(c);\n        }\n\n        return result.ToString();",
  "        char[] chars = str.ToCharArray();\n        Array.Reverse(chars);\n    \
    \    return new string(chars);", "        string result = String.Empty;\n    \
    \    foreach (char c in str)\n            if ((c >= 'a' && c <= 'z') || (c >=\
    \ 'A' && c <= 'Z')) {\n                result += (char)(c + 32);\n           \
    \ } else if ((c >= '0' && c <= '9')) {\n                result += (char)(c - 32);\n\
    \            } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n\
    \                result += (char)(c + 32);\n            } else if ((c >= '0' &&\
    \ c <= '9')) {\n                result += (char)(c - 32);\n            } else\
    \ if ((c >= '0' && c <= '9')) {\n                result += (char)(c + 32);\n \
    \           } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n \
    \               result += (char)(c + 32);\n            } else if ((c >= 'A' &&\
    \ c <= 'Z')) {\n                result += (char)(c - 32);\n            } else\
    \ if ((c >= '0' && c <= '9')) {\n                result += (char)(c + 32);\n \
    \           }\n        return result;", "        char[] charArray = str.ToCharArray();\n\
    \        char[] result = new char[str.Length];\n        int i = 0;\n        while\
    \ (i < charArray.Length) {\n            // Swap lowercase characters with uppercase\
    \ characters.\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n\
    \                result[i] = (char)(charArray[i] - 32);\n            } else {\n\
    \                result[i] = charArray[i];\n            }\n            i++;\n\
    \        }\n        return new string(result);", "        if (str == null || str.Length\
    \ == 0)\n            return str;\n        return str.ToUpper().Replace(\n    \
    \        str.Select(c => Char.IsUpper(c) ? c.ToString() : c.ToString().ToLower())\n\
    \            .ToArray()\n        );", "        char[] arr = str.ToCharArray();\n\
    \        for (int i = 0; i < arr.Length; i++) {\n            if (char.IsLower(arr[i]))\n\
    \                arr[i] = char.ToUpper(arr[i]);\n            else if (char.IsUpper(arr[i]))\n\
    \                arr[i] = char.ToLower(arr[i]);\n        }\n        return new\
    \ string(arr);", "        var sb = new StringBuilder();\n        foreach (var\
    \ c in str)\n        {\n            if ((c >= 'a' && c <= 'z') || (c >= 'A' &&\
    \ c <= 'Z'))\n            {\n                sb.Append((Char)(c - (Char)('a' +\
    \ (int)((c - 'a') * (char.IsUpper(c) ? 1 : -1)))));\n            }\n         \
    \   else\n            {\n                sb.Append(c);\n            }\n      \
    \  }\n        return sb.ToString();", "        if (String.IsNullOrEmpty(str))\n\
    \            return str;\n\n        // Flip the first character.\n        var\
    \ newStr = str.First().ToString().ToUpper();\n        // Shift rest of the string\
    \ to lower case while the first letter is in lower case.\n        for (int i =\
    \ str.Length - 1; i > 0; i--)\n        {\n            var c = char.ToLower(str[i]);\n\
    \            if (i == 0)\n            {\n                newStr += c;\n      \
    \      }\n            else\n            {\n                newStr += c;\n    \
    \        }\n        }\n        return newStr;", "        char[] arr = str.ToCharArray();\n\
    \        Array.Reverse(arr);\n        str = String.Join(\"\", arr);\n        return\
    \ str;", "        char[] charArray = str.ToCharArray();\n        bool wasUpper\
    \ = false;\n        foreach (char c in charArray) {\n            if (char.IsUpper(c))\
    \ {\n                wasUpper = true;\n            } else {\n                if\
    \ (wasUpper) {\n                    charArray[charArray.IndexOf(c)] = char.ToLower(c);\n\
    \                }\n                wasUpper = false;\n            }\n       \
    \ }\n        return new string(charArray);", '        return str.Select(c => char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)).Aggregate((c, n) => c + n);', "        char[]\
    \ charArr = str.ToCharArray();\n        for (int i = 0; i < charArr.Length; i++)\
    \ {\n            if (charArr[i] >= 'a' && charArr[i] <= 'z') {\n             \
    \   charArr[i] = (char)(charArr[i] - 32);\n            }\n            else if\
    \ (charArr[i] >= 'A' && charArr[i] <= 'Z') {\n                charArr[i] = (char)(charArr[i]\
    \ + 32);\n            }\n        }\n        return new String(charArr);", "  \
    \      StringBuilder builder = new StringBuilder();\n        foreach (var ch in\
    \ str) {\n            if (char.IsLower(ch)) {\n                builder.Append(char.ToUpper(ch));\n\
    \            }\n            else if (char.IsUpper(ch)) {\n                builder.Append(char.ToLower(ch));\n\
    \            }\n            else {\n                builder.Append(ch);\n    \
    \        }\n        }\n        return builder.ToString();"]
stop_tokens:
- "\n    }\n"
