language: cs
name: HumanEval_158_find_max
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<string> newWords = new List<string>();\n        int maxCount = 0;\n
    \       string maxWord = \"\";\n\n        foreach (string word in words) {\n            int
    count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)
    {\n                maxCount = count;\n                maxWord = word;\n            }\n\n
    \           newWords.Add(word);\n        }\n\n        if (newWords.Count() ==
    maxCount) {\n            return maxWord;\n        }\n\n        Array.Sort(newWords.ToArray());\n
    \       return newWords.First();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0719372b7d6e4c0fb129d6cb9579dc36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0719372b7d6e4c0fb129d6cb9579dc36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string mostCommon = string.Empty;\n        List<string> temp = new List<string>();\n
    \       for (int i = 0; i < words.Count; i++) {\n            int uniqueChars =
    0;\n            string s = words[i];\n            foreach (char c in s.ToCharArray())
    {\n                if (uniqueChars++ < 1) break;\n            }\n            if
    (uniqueChars > mostCommon) {\n                mostCommon = uniqueChars;\n                temp
    = words;\n            }\n        }\n        if (mostCommon == 0) return string.Empty;\n
    \       return temp[temp.FindIndex(s => s.Length == mostCommon)];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsubwiig9.cs(28,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpsubwiig9.cs(29,30): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmpsubwiig9.cs(33,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmpsubwiig9.cs(34,41): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''int'' and ''string''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       bool used = false;\n        char bestChar = '\\0';\n        int bestCount
    = 0;\n        string bestWord = null;\n        foreach (string word in words)
    {\n            foreach (char c in word) {\n                if (used.ContainsKey(c))
    {\n                    used[c] += 1;\n                }\n                else
    {\n                    used[c] = 1;\n                }\n                if (used[c]
    > bestCount) {\n                    bestCount = used[c];\n                    bestChar
    = c;\n                    bestWord = word;\n                }\n            }\n
    \       }\n        return bestWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpopz0b68d.cs(26,26): error CS1061: ''bool'' does not contain a definition
    for ''ContainsKey'' and no accessible extension method ''ContainsKey'' accepting
    a first argument of type ''bool'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpopz0b68d.cs(27,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''bool''

    /tmp/tmpopz0b68d.cs(30,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''bool''

    /tmp/tmpopz0b68d.cs(32,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''bool''

    /tmp/tmpopz0b68d.cs(33,33): error CS0021: Cannot apply indexing with [] to an
    expression of type ''bool''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maximum = -1;\n        int current = 0;\n        string temp = null;\n
    \       foreach (string word in words) {\n            int count = word.Count(ch
    => ch >= 'a' && ch <= 'z').ToInt() + word.Count(ch => ch >= 'A' && ch <= 'Z').ToInt();\n
    \           if (count > maximum) {\n                maximum = count;\n                temp
    = word;\n                current = count;\n            }\n        }\n        if
    (current == maximum) {\n            return temp;\n        } else {\n            return
    FindMax(words);\n        }\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz_c8nuat.cs(24,66): error CS1061: ''int'' does not contain a definition
    for ''ToInt'' and no accessible extension method ''ToInt'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpz_c8nuat.cs(24,117): error CS1061: ''int'' does not contain a definition
    for ''ToInt'' and no accessible extension method ''ToInt'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // TODO: your code goes here\n        List<string> uniqueChars = new List<string>();\n
    \       foreach (string s in words)\n        {\n            foreach (char c in
    s)\n            {\n                if (!uniqueChars.Contains(c))\n                {\n
    \                   uniqueChars.Add(c);\n                }\n            }\n        }\n
    \       string res = \"\";\n        int maxCount = 0;\n        foreach (string
    s in words)\n        {\n            foreach (char c in s)\n            {\n                if
    (uniqueChars.Contains(c))\n                {\n                    if (uniqueChars.Count()
    > maxCount)\n                    {\n                        maxCount = uniqueChars.Count();\n
    \                       res = s;\n                    }\n                }\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuhqk29ff.cs(26,43): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpuhqk29ff.cs(28,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpuhqk29ff.cs(38,42): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       StringBuilder builder = new StringBuilder();\n        int maxLength =
    0;\n        string maxValue = \"\";\n        int maxCount = 0;\n        foreach
    (string word in words) {\n            builder.Append(word);\n            builder.Append(\"
    \");\n            int len = builder.Length;\n            if (len > maxLength)
    {\n                maxLength = len;\n                maxValue = builder.ToString();\n
    \               maxCount = words.Count(w => w.Contains(maxValue));\n            }\n
    \       }\n        return maxValue;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba493ec82aa54a3c80ee24811a63cec3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba493ec82aa54a3c80ee24811a63cec3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string max = words.Aggregate((max1, current) => {\n            string
    counts = current\n                .GroupBy(x => x)\n                .OrderByDescending(x
    => x.Count())\n                .ThenBy(x => x.First())\n                .First().ToString();\n
    \           return max1 + counts;\n        }).ToLower();\n        return words.FirstOrDefault(x
    => x.Count() == max.Count() && x.ToLower() == max).First();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc_qgyw38.cs(28,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] chars = new char[words.Max(x => x.Length)];\n        int maxUniqueChars
    = words.Max(x => x.Distinct().Count());\n        foreach (string word in words)
    {\n            char[] charArray = word.ToCharArray();\n            int uniqueChars
    = charArray.Distinct().Count();\n            int indexOfMax = -1;\n            for
    (int i = 0; i < charArray.Length; i++) {\n                if (indexOfMax == -1
    || uniqueChars > maxUniqueChars) {\n                    indexOfMax = i;\n                }
    else {\n                    if (uniqueChars == maxUniqueChars && charArray[i]
    < charArray[indexOfMax])\n                        indexOfMax = i;\n                }\n
    \           }\n            if (uniqueChars == maxUniqueChars && indexOfMax !=
    -1)\n                charArray[indexOfMax]++;\n            else\n                charArray[indexOfMax]
    = 1;\n            string finalWord = new string(charArray);\n            return
    finalWord;\n        }\n        return \"none\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwnf8xxyu.cs(37,41): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<char, int> counter = new Dictionary<char, int>();\n        char[]
    chars = new char[words.Count];\n        int j = 0;\n        foreach (string word
    in words) {\n            foreach (char c in word) {\n                if (!counter.ContainsKey(c))
    {\n                    counter[c] = 1;\n                    chars[j++] = c;\n
    \               } else {\n                    counter[c]++;\n                }\n
    \           }\n        }\n        int max = counter.Values.Max();\n        char[]
    maxChars = new char[max];\n        int maxCount = 0;\n        foreach (KeyValuePair<char,
    int> kvp in counter) {\n            if (kvp.Value == max) {\n                maxChars
    = kvp.Key.ToCharArray();\n                maxCount = kvp.Value;\n            }\n
    \       }\n        bool found = false;\n        foreach (string word in words)
    {\n            foreach (char c in word) {\n                if (maxChars.Contains(c))
    {\n                    found = true;\n                    break;\n                }\n
    \           }\n            if (found) {\n                break;\n            }\n
    \       }\n        if (found) {\n            return word;\n        } else {\n
    \           return null;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphw6x_4uo.cs(38,36): error CS1061: ''char'' does not contain a definition
    for ''ToCharArray'' and no accessible extension method ''ToCharArray'' accepting
    a first argument of type ''char'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmphw6x_4uo.cs(55,20): error CS0103: The name ''word'' does not exist in
    the current context

    '
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Initialize counts\n        int maxCount = 0;\n        int maxIndex
    = 0;\n        char highestChar = char.MaxValue;\n        foreach (string word
    in words) {\n            int currentCount = word.ToLower().Select(c => (int)c).Distinct().Count();\n
    \           if (currentCount > maxCount) {\n                maxCount = currentCount;\n
    \               maxIndex = words.IndexOf(word);\n                highestChar =
    word.ToCharArray().Max();\n            }\n        }\n        return words[maxIndex];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d5bcca76de947119a5fe8b88ea477eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d5bcca76de947119a5fe8b88ea477eb>:0
    \n"
  stdout: ''
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count() > 0) {\n            int maxUniqueCharacters = 0;\n            string
    wordWithMostUniqueCharacters = \"\";\n            foreach (string word in words)
    {\n                int uniqueCharacters = 0;\n                foreach (char c
    in word) {\n                    if (uniqueCharacters <= maxUniqueCharacters) {\n
    \                       uniqueCharacters++;\n                    } else {\n                        break;\n
    \                   }\n                }\n                if (uniqueCharacters
    > maxUniqueCharacters) {\n                    maxUniqueCharacters = uniqueCharacters;\n
    \                   wordWithMostUniqueCharacters = word;\n                }\n
    \           }\n            return wordWithMostUniqueCharacters;\n        }\n        return
    string.Empty;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff2e1d76f9ac45fdaa18e3ed18d835f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff2e1d76f9ac45fdaa18e3ed18d835f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       return FindMax(words, string.Empty);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ni49h41.cs(20,16): error CS1501: No overload for method ''FindMax'' takes
    2 arguments

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Array.Sort<string>(words);\n        string max = words.Max();\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps9t35idm.cs(20,28): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''string[]''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Your code goes here\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqbjn7s5q.cs(19,26): error CS0161: ''Problem.FindMax(List<string>)'': not
    all code paths return a value

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Write your code here\n        int MaxCount = 0;\n        int MaxIndex
    = 0;\n        foreach (string word in words) {\n            int currentCount =
    word.Length;\n            if (MaxCount < currentCount) {\n                MaxCount
    = currentCount;\n                MaxIndex = words[MaxIndex].Index;\n            }\n
    \           else if (MaxCount == currentCount) {\n                MaxIndex = words[MaxIndex].Index;\n
    \           }\n        }\n        return words[MaxIndex];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptovqgxc5.cs(27,44): error CS1061: ''string'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''string'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmptovqgxc5.cs(30,44): error CS1061: ''string'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''string'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // TODO\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00029] in <9c8182cdcc6c405fa6e6b30966355896>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00029] in <9c8182cdcc6c405fa6e6b30966355896>:0
    \n"
  stdout: ''
  timestamp: 1659976267
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var dict = new Dictionary<string, int>();\n        foreach(var word in
    words) {\n            if(dict.ContainsKey(word)) {\n                dict[word]
    += 1;\n            } else {\n                dict[word] = 1;\n            }\n
    \       }\n        var max = words[0];\n        foreach(var pair in dict) {\n
    \           if(pair.Value > max.Value) {\n                max = pair;\n            }\n
    \       }\n        return max.Key;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3zrwefo7.cs(30,33): error CS1061: ''string'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''string'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp3zrwefo7.cs(31,23): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.KeyValuePair<string,
    int>'' to ''string''

    /tmp/tmp3zrwefo7.cs(34,20): error CS1061: ''string'' does not contain a definition
    for ''Key'' and no accessible extension method ''Key'' accepting a first argument
    of type ''string'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var charCounts = words.Select(x => new { Char = x.ToCharArray().Max(),
    Count = x.Count() })\n            .GroupBy(x => x.Char)\n            .OrderByDescending(x
    => x.Count);\n        Debug.Assert(charCounts.Any(x => x.Count == words[0].Length));\n
    \       if (charCounts.Count > 0)\n            return charCounts.First().Key;\n
    \       else\n            return words[0];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx1gl6rvm.cs(22,14): error CS0411: The type arguments for method ''Enumerable.OrderByDescending<TSource,
    TKey>(IEnumerable<TSource>, Func<TSource, TKey>)'' cannot be inferred from the
    usage. Try specifying the type arguments explicitly.

    /tmp/tmpx1gl6rvm.cs(23,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpx1gl6rvm.cs(24,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var res = words.OrderByDescending(x => GetUniqueChars(x)).First();\n        if
    (words.Count() > 1)\n        {\n            return res;\n        }\n        return
    string.Empty;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2wk5qzq.cs(20,48): error CS0103: The name ''GetUniqueChars'' does not
    exist in the current context

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = word.Distinct().Count();\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm8w20lg7.cs(25,17): error CS0103: The name ''maxWord'' does not exist
    in the current context

    /tmp/tmpm8w20lg7.cs(28,16): error CS0103: The name ''maxWord'' does not exist
    in the current context

    '
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<string,int> counts = new Dictionary<string,int>();\n        foreach
    (string word in words) {\n            int count = 0;\n            if (counts.TryGetValue(word,
    out count)) {\n                counts[word] = count + 1;\n            } else {\n
    \               counts[word] = 1;\n            }\n        }\n        return counts.OrderByDescending(x
    => x.Value).First().Key;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f585bab629074c2bafb6dce4bbc7cd8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f585bab629074c2bafb6dce4bbc7cd8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var dict = new Dictionary<string, int>();\n        for (int i = 0; i <
    words.Count; i++) {\n            foreach (char c in words[i]) {\n                if
    (!dict.ContainsKey(c)) {\n                    dict.Add(c, 1);\n                }\n
    \               else {\n                    dict[c]++;\n                }\n            }\n
    \       }\n        foreach (var entry in dict) {\n            if (entry.Value
    == dict.Max().Value) {\n                return entry.Key;\n            }\n        }\n
    \       return \"empty\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3e5hsfqm.cs(23,39): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp3e5hsfqm.cs(24,30): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp3e5hsfqm.cs(27,26): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var charCounts = new HashSet<char>();\n\n        foreach (var word in
    words)\n        {\n            foreach (var letter in word)\n            {\n                charCounts.Add(letter);\n
    \           }\n        }\n\n        string max = charCounts.Aggregate((maxLetter,
    count) => (count>maxLetter ? count : maxLetter));\n\n        var maxList = words.Where(w
    => w.Count(c=>c==max) == w.Count());\n\n        charCounts.Remove(max);\n\n        foreach
    (var maxWord in maxList)\n        {\n            if (charCounts.Contains(maxWord[0]))\n
    \           {\n                return maxWord;\n            }\n        }\n\n        return
    maxList[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf5kgnzdk.cs(30,22): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpf5kgnzdk.cs(32,51): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpf5kgnzdk.cs(34,27): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int[] maxVal = new int[words.Count];\n        List<string> maxItems =
    new List<string>();\n        foreach (string word in words) {\n            int
    count = 1;\n            for (int i = 0; i < word.Length; i++) {\n                count
    = (count * (word.Length - i));\n            }\n            maxVal[words.FindIndex(w
    => w == word)] += count;\n            if (count > maxVal[words.FindIndex(w =>
    w == word)]) {\n                maxItems.Clear();\n                maxItems.Add(word);\n
    \               maxVal[words.FindIndex(w => w == word)] = count;\n            }
    else {\n                maxItems.Add(word);\n                maxVal[words.FindIndex(w
    => w == word)] = count;\n            }\n        }\n        int index = 0;\n        foreach
    (string item in maxItems) {\n            for (int i = 0; i < item.Length; i++)
    {\n                int value = (maxVal[index] * (item.Length - i));\n                index++;\n
    \               if (value > maxVal[index]) {\n                    maxVal[index]
    = value;\n                }\n            }\n        }\n        return maxItems[0];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.FindMax (System.Collections.Generic.List`1[T]
    words) [0x00154] in <e97d09a727894aeb963b11241af885b3>:0 \n  at Problem.Main (System.String[]
    args) [0x00024] in <e97d09a727894aeb963b11241af885b3>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00154]
    in <e97d09a727894aeb963b11241af885b3>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <e97d09a727894aeb963b11241af885b3>:0 \n"
  stdout: ''
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] charArray = new char[26];\n        Arrays.Fill(charArray, (char)0);\n\n
    \       int count = 0;\n        char[] array = new char[words.Count * 26];\n\n
    \       foreach (string word in words) {\n            for (int i = 0; i < word.Length;
    i++) {\n                char c = word[i];\n                charArray[c] += 1;\n
    \           }\n        }\n\n        for (int i = 0; i < 26; i++) {\n            count
    = (charArray[i] - 1) / 26 + 1;\n            array[count] = Convert.ToChar(i +
    'a');\n        }\n\n        int largestCount = 0;\n        int wordIndex = 0;\n
    \       int currentCount = 0;\n\n        for (int i = 0; i < array.Length; i++)
    {\n            if (array[i] == array[largestCount]) {\n                currentCount
    += 1;\n                wordIndex += 1;\n                if (currentCount > largestCount)
    {\n                    largestCount = currentCount;\n                }\n            }
    else {\n                currentCount = 0;\n            }\n        }\n\n        if
    (wordIndex == words.Count) {\n            return words[wordIndex];\n        }
    else if (largestCount == words[wordIndex].Length) {\n            return words[wordIndex];\n
    \       } else {\n            return words[wordIndex];\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfci69axr.cs(21,9): error CS0103: The name ''Arrays'' does not exist in
    the current context

    /tmp/tmpfci69axr.cs(29,17): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int counter = new Dictionary<char, int>();\n        StringBuilder max
    = new StringBuilder();\n        foreach (var word in words) {\n            foreach
    (var letter in word) {\n                int count;\n                bool has =
    counter.TryGetValue(letter, out count);\n                if (has) counter[letter]
    = count + 1;\n                else counter[letter] = 1;\n                if (counter[letter]
    > max.Length) {\n                    max.Append(letter);\n                } else
    if (counter[letter] == max.Length) {\n                    if (has) max.Append(letter);\n
    \               }\n            }\n        }\n        if (counter.Count > words.Count)
    max.Append(string.Empty);\n        return (counter.ElementAt(max.Length).Key ==
    string.Empty) ? max[0] : max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ph25cy0.cs(20,23): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.Dictionary<char,
    int>'' to ''int''

    /tmp/tmp9ph25cy0.cs(25,36): error CS1061: ''int'' does not contain a definition
    for ''TryGetValue'' and no accessible extension method ''TryGetValue'' accepting
    a first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp9ph25cy0.cs(26,26): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmp9ph25cy0.cs(27,22): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmp9ph25cy0.cs(28,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmp9ph25cy0.cs(30,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmp9ph25cy0.cs(35,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmp9ph25cy0.cs(36,25): error CS1061: ''int'' does not contain a definition
    for ''ElementAt'' and no accessible extension method ''ElementAt'' accepting a
    first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp9ph25cy0.cs(36,16): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''char'' and ''System.Text.StringBuilder''

    '
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string max = \"\";\n        foreach (string w in words) {\n            int
    uniqueChar = w.ToCharArray().Distinct().Count();\n            if (uniqueChar >
    max.Length) {\n                max = w;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6e5996785204311badef207ead1861c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6e5996785204311badef207ead1861c>:0
    \n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count == 0) return \"\";\n\n        int n = words.Count;\n        int[]
    freq = new int[n];\n        Dictionary<string, int> d = new Dictionary<string,
    int>();\n        List<string> results = new List<string>();\n\n        foreach
    (string w in words) {\n            if (d.TryGetValue(w, out int f)) {\n                freq[f]++;\n
    \           } else {\n                d.Add(w, 1);\n            }\n        }\n\n
    \       for (int i = 0; i < freq.Length; i++) {\n            if (freq[i] == 1)
    {\n                results.Add(words[i]);\n            }\n        }\n\n        if
    (results.Count > 0)\n            return results[0];\n        else\n            return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d79538265ca240dba35a5ff7b0f4c5ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d79538265ca240dba35a5ff7b0f4c5ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count < 2) {\n            throw new ArgumentException(\"words
    must contain at least 2 words\");\n        }\n        int maxCount = 0;\n        string
    maxWord = null;\n        for (int i = 0; i < words.Count; ++i) {\n            char[]
    chars = words[i].ToCharArray();\n            int uniqueCharCount = chars.Count(c
    => chars.Contains(c));\n            if (uniqueCharCount > maxCount) {\n                maxCount
    = uniqueCharCount;\n                maxWord = words[i];\n            }\n        }\n
    \       return maxWord;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74db10581757421895d689f7a83b5e3d>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: words must contain at least
    2 words\n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0000f]
    in <74db10581757421895d689f7a83b5e3d>:0 \n  at Problem.Main (System.String[] args)
    [0x001fc] in <74db10581757421895d689f7a83b5e3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: words must contain at least 2 words\n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x0000f] in <74db10581757421895d689f7a83b5e3d>:0
    \n  at Problem.Main (System.String[] args) [0x001fc] in <74db10581757421895d689f7a83b5e3d>:0
    \n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var maxWord = words.OrderByDescending(w => w.Length).FirstOrDefault();\n
    \       if (words.Select(w => w.Length).OrderByDescending(w => w).First().Equals(maxWord.Length))\n
    \           return maxWord;\n\n        return maxWord.OrderBy(w => w).First();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe22ovu0c.cs(24,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       HashSet<char> chars = new HashSet<char>();\n        foreach (var word
    in words) {\n            foreach (var c in word)\n                chars.Add(c);\n
    \       }\n\n        var sortedWords = words.OrderBy(s => chars.Count);\n        return
    sortedWords.First();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b23feec6cdc246488b2bf2ef3d78f1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b23feec6cdc246488b2bf2ef3d78f1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<int> maxChars = new List<int>();\n        List<int> charCounts =
    new List<int>();\n        StringBuilder sb = new StringBuilder();\n        foreach
    (string word in words) {\n            foreach (char c in word) {\n                if
    (maxChars.Contains(c)) {\n                    maxChars[c]++;\n                }
    else {\n                    maxChars.Add(c);\n                    charCounts.Add(1);\n
    \               }\n            }\n            foreach (int c in maxChars) {\n
    \               for (int i = 0; i < c; i++) {\n                    sb.Append(c);\n
    \               }\n            }\n            sb.Append(\" \");\n        }\n\n
    \       charCounts.Sort();\n\n        int maxCount = 0;\n        int maxCountIndex
    = 0;\n        for (int i = 0; i < charCounts.Count; i++) {\n            int count
    = charCounts[i];\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxCountIndex = i;\n            }\n        }\n\n        return
    words.ElementAt(maxCountIndex);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x00050] in <130b9bef82ab465eb62e6bba2e931525>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <130b9bef82ab465eb62e6bba2e931525>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x00050] in <130b9bef82ab465eb62e6bba2e931525>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <130b9bef82ab465eb62e6bba2e931525>:0
    \n"
  stdout: ''
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var max = new List<string>();\n        var maxCnt = 0;\n        foreach
    (string s in words) {\n            var uniqueChars = new HashSet<char>(s);\n            if
    (uniqueChars.Count == maxCnt) {\n                max.Add(s);\n            }\n
    \           else {\n                maxCnt = uniqueChars.Count;\n                max.Add(s);\n
    \           }\n        }\n        return max.Count > 0 ? max.First() : \"No solution\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3212a3bc72304006a0129efe16f134f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3212a3bc72304006a0129efe16f134f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int numberOfUniqueCharacters = 0;\n        string maxUniqueCharacter =
    \"\";\n        foreach (string word in words) {\n            numberOfUniqueCharacters
    = 0;\n            foreach (char letter in word.ToCharArray()) {\n                if
    (!char.IsLetter(letter)) {\n                    numberOfUniqueCharacters++;\n
    \               }\n            }\n            if (numberOfUniqueCharacters > maxUniqueCharacter)
    {\n                maxUniqueCharacter = word;\n            }\n        }\n        return
    maxUniqueCharacter;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppnp8vs_o.cs(29,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var orderedWords = words.OrderBy(word => CountUnique(word)).ToList();\n
    \       var maxCountWord = orderedWords.First();\n\n        // If there exists
    more than one max word in the ordered list of words,\n        // select the one
    with the maximum number characters\n        if (orderedWords.Count > 1) {\n            maxCountWord
    = orderedWords.GroupBy(word => CountUnique(word)).OrderByDescending(g => g.Key).First().Key;\n
    \       }\n\n        return maxCountWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu8olh9_1.cs(20,50): error CS0103: The name ''CountUnique'' does not exist
    in the current context

    /tmp/tmpu8olh9_1.cs(25,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpu8olh9_1.cs(26,57): error CS0103: The name ''CountUnique'' does not exist
    in the current context

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // TODO: Write code here.\n        // Your code here.\n        List<string>
    orderedWords = new List<string>();\n        List<string> orderedUniqueWords =
    new List<string>();\n        HashSet<string> uniqueWords = new HashSet<string>();\n
    \       string maxWord = string.Empty;\n        foreach (string s in words) {\n
    \           char[] letters = s.ToCharArray();\n            List<int> uniqueCounts
    = new List<int>();\n            foreach (char letter in letters) {\n                if
    (uniqueWords.Contains(letter)) {\n                    uniqueCounts.Add(uniqueWords.Count(y
    => y == letter));\n                }\n            }\n            int maxCount
    = 0;\n            bool maxCountReached = false;\n            for (int i = 0; i
    < uniqueCounts.Count; ++i) {\n                if (uniqueCounts[i] > maxCount)
    {\n                    maxCount = uniqueCounts[i];\n                    maxCountReached
    = true;\n                }\n            }\n            if (maxCountReached)\n
    \           {\n                orderedUniqueWords.Add(s);\n            }\n            else\n
    \           {\n                orderedWords.Add(s);\n                uniqueWords.Add(s);\n
    \           }\n        }\n        orderedWords.Sort();\n        int maxCount =
    0;\n        bool maxCountReached = false;\n        foreach (string s in orderedWords)
    {\n            if (uniqueWords.Contains(s))\n            {\n                uniqueWords.Remove(s);\n
    \               maxCount++;\n            }\n            if (maxCount > maxCountReached)\n
    \           {\n                maxCountReached = true;\n                maxWord
    = s;\n            }\n        }\n        return maxWord;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcdnnxv5k.cs(30,42): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpcdnnxv5k.cs(31,61): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpcdnnxv5k.cs(34,17): error CS0136: A local or parameter named ''maxCount''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpcdnnxv5k.cs(35,18): error CS0136: A local or parameter named ''maxCountReached''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpcdnnxv5k.cs(61,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''bool''

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var max = words.Max();\n        var counts = words.GroupBy(w => w).ToDictionary(g
    => g.Key, g => g.Count());\n        if (counts[max].Count != 1) {\n            Debug.WriteLine(counts[max].Count.ToString()
    + \" unique characters for \" + max.ToString() + \"\\n\");\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptrdfi2cs.cs(22,13): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmptrdfi2cs.cs(23,41): error CS0119: ''ParallelEnumerable.Count<TSource>(ParallelQuery<TSource>)''
    is a method, which is not valid in the given context

    '
  timestamp: 1659976422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count() == 0) return \"\";\n        char[] array = new char[words.Count()];\n
    \       Array.Sort(words, (x, y) => Array.IndexOf(array, y) - Array.IndexOf(array,
    x));\n        int maxCount = 0;\n        string maxWord = \"\";\n        foreach(var
    word in words) {\n            int count = 0;\n            foreach(var letter in
    word) {\n                if (letter == array[count]) count++;\n            }\n
    \           if (count > maxCount) maxCount = count;\n            if (count ==
    maxCount) maxWord = word;\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqk641hqx.cs(22,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''System.Array''

    /tmp/tmpqk641hqx.cs(22,27): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string max = null;\n        int maxLength = 0;\n        foreach (string
    word in words) {\n            int length = word.Length;\n            if (length
    > maxLength) {\n                maxLength = length;\n                max = word;\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c6fa445624794b5798613f5b03eb52ee>:0
    \n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string maxString = \"\";\n        foreach (string
    word in words) {\n            char[] charArray = word.ToCharArray();\n            int
    charCount = charArray.Distinct().Count();\n            if (charCount > maxCount)
    {\n                maxCount = charCount;\n                maxString = word;\n
    \           }\n        }\n        return maxString;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <650b47fff7db4f52b24e3142d5f0d9aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <650b47fff7db4f52b24e3142d5f0d9aa>:0
    \n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string result;\n        List<string> wordList = new List<string>(words);\n
    \       Dictionary<string, int> characters = new Dictionary<string, int>();\n
    \       foreach (string word in wordList) {\n            foreach (char letter
    in word) {\n                int count;\n                if (characters.TryGetValue(letter,
    out count)) {\n                    characters[letter] = count + 1;\n                }
    else {\n                    characters[letter] = 1;\n                }\n            }\n
    \       }\n        foreach (KeyValuePair<string, int> kvp in characters) {\n            if
    (kvp.Value == wordList.Count) {\n                result = kvp.Key;\n                break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpma0x2gbv.cs(26,44): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpma0x2gbv.cs(27,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpma0x2gbv.cs(29,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpma0x2gbv.cs(39,16): error CS0165: Use of unassigned local variable ''result''

    '
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<string> sortedWords = words.OrderBy(w => w).ToList();\n        foreach
    (string word in sortedWords) {\n            int count = word.ToCharArray().Distinct().Count();\n
    \           if (count > words.Max(w => w.ToCharArray().Distinct().Count())) {\n
    \               return word;\n            }\n        }\n        return string.Empty;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28a32343eb1b41929e5c6467dee8a0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28a32343eb1b41929e5c6467dee8a0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Initialize our counter.\n        int maxCount = 0;\n\n        // Get
    the first word and store it into a variable called \"a\".\n        string a =
    words.First();\n\n        // Loop through each string in the list of strings.\n
    \       foreach (string s in words) {\n            // Initialize a variable called
    \"count\" to 0.\n            int count = 0;\n\n            // Initialize a variable
    called \"count2\" to 0.\n            int count2 = 0;\n\n            // Loop through
    each character in the string and increment the counter \n            // if it
    is not the same as the character in the string \"a\".\n            for (int i
    = 0; i < s.Length; i++) {\n                // If the character in the string is
    different than the character in \n                // string \"a\", then increment
    the counter.\n                if (s[i] != a[i]) {\n                    count++;\n
    \               }\n                // If the character in the string is equal
    to the character in string \"a\",\n                // then increment the counter
    again but only if the count has gone up\n                // to or equal to maxCount.\n
    \               if (count == maxCount) {\n                    count2++;\n                }\n
    \           }\n            // If the number of unique characters has gone up above
    maxCount,\n            // then set the maxCount variable equal to the number of
    unique characters.\n            if (count2 > maxCount) {\n                maxCount
    = count2;\n            }\n        }\n        // Return the first string in the
    list that has the maximum number of unique characters.\n        return words.Where(s
    => s.Length == maxCount).OrderBy(s => s).First();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.FindMax (System.Collections.Generic.List`1[T]
    words) [0x0003f] in <ca43f4b0bb4f45efb0fac6f1987d1022>:0 \n  at Problem.Main (System.String[]
    args) [0x00024] in <ca43f4b0bb4f45efb0fac6f1987d1022>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0003f]
    in <ca43f4b0bb4f45efb0fac6f1987d1022>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <ca43f4b0bb4f45efb0fac6f1987d1022>:0 \n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<string, int> uniqueChars = new Dictionary<string, int>();\n
    \       string resultString = \"\";\n        int resultLength = 0;\n        int
    max = 0;\n        foreach(var word in words) {\n            int uniqueCharsCount
    = 0;\n            foreach(var letter in word) {\n                if (!uniqueChars.ContainsKey(letter))
    {\n                    uniqueChars[letter] = 0;\n                    uniqueCharsCount++;\n
    \               }\n                uniqueChars[letter]++;\n            }\n            if
    (uniqueCharsCount > max) {\n                max = uniqueCharsCount;\n                resultString
    = word;\n                resultLength = word.Length;\n            }\n        }\n
    \       if (uniqueChars.Count == 1) {\n            return resultString;\n        }\n
    \       else if (uniqueChars.Count > 1) {\n            List<string> result = new
    List<string>();\n            int longestWordLength = 0;\n            foreach (var
    letter in uniqueChars.Keys) {\n                if (uniqueChars[letter] == max)
    {\n                    result.Add(resultString);\n                }\n                if
    (uniqueChars[letter] > max) {\n                    break;\n                }\n
    \               if (longestWordLength == 0 || uniqueChars[letter] > uniqueChars[longestWordLength])
    {\n                    longestWordLength = uniqueChars[letter];\n                }\n
    \           }\n            foreach (var word in result) {\n                return
    word;\n            }\n        }\n        return \"\";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo819nc2p.cs(27,46): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpo819nc2p.cs(28,33): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpo819nc2p.cs(31,29): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpo819nc2p.cs(52,81): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var charCounts = words.Select(word => word.ToCharArray().Distinct().ToArray()).ToList();\n\n
    \       // To keep track of which words have the maximum number of unique chars\n
    \       var maxWords = charCounts.Where(c => c.Length == charCounts.Max(word =>
    word.Length)).FirstOrDefault();\n\n        // If there is more than 1 word with
    maximum number of unique chars,\n        // return the word with lexicographical
    order first and print it\n        if (maxWords != null && maxWords.Length > 1)\n
    \       {\n            return words.FindIndex(word => maxWords.All(word => word.IndexOf(word,
    StringComparison.OrdinalIgnoreCase) >= 0))\n                .ToString()\n                .TrimStart('0');\n
    \       }\n        // If only 1 word with maximum number of unique chars has been\n
    \       // found, print that word and return it\n        if (maxWords == null)\n
    \       {\n            return words.FindIndex(word => word.IndexOf(charCounts.Max(word
    => word.Length), StringComparison.OrdinalIgnoreCase) >= 0)\n                .ToString()\n
    \               .TrimStart('0');\n        }\n\n        // If no words with maximum
    number of unique chars have been found,\n        // return the one that comes
    first lexicographical order and print it\n        return words.FindIndex(word
    => word.IndexOf(charCounts.Max(word => word.Length), StringComparison.OrdinalIgnoreCase)
    >= 0)\n            .ToString()\n            .TrimStart('0');\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpephhs0yu.cs(29,65): error CS1929: ''char'' does not contain a definition
    for ''IndexOf'' and the best extension method overload ''MemoryExtensions.IndexOf(ReadOnlySpan<char>,
    ReadOnlySpan<char>, StringComparison)'' requires a receiver of type ''ReadOnlySpan<char>''

    /tmp/tmpephhs0yu.cs(37,57): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    /tmp/tmpephhs0yu.cs(37,94): error CS1503: Argument 2: cannot convert from ''System.StringComparison''
    to ''int''

    /tmp/tmpephhs0yu.cs(44,53): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    /tmp/tmpephhs0yu.cs(44,90): error CS1503: Argument 2: cannot convert from ''System.StringComparison''
    to ''int''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       StringBuilder result = new StringBuilder();\n        Dictionary<string,
    int> charCounts = new Dictionary<string, int>();\n        foreach (string word
    in words) {\n            foreach (char c in word) {\n                if (charCounts.ContainsKey(c))\n
    \                   charCounts[c] += 1;\n                else\n                    charCounts[c]
    = 1;\n            }\n        }\n        string max = \"\";\n        int maxCount
    = 0;\n        foreach (KeyValuePair<char, int> kvp in charCounts) {\n            if
    (kvp.Value > maxCount) {\n                maxCount = kvp.Value;\n                max
    = kvp.Key;\n            }\n        }\n        result.Append(max);\n        if
    (maxCount == words.Count)\n            return max;\n        return FindMax(words);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp019n7ygt.cs(24,44): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp019n7ygt.cs(25,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp019n7ygt.cs(27,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp019n7ygt.cs(35,23): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp019n7ygt.cs(32,9): error CS0030: Cannot convert type ''System.Collections.Generic.KeyValuePair<string,
    int>'' to ''System.Collections.Generic.KeyValuePair<char, int>''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<int, List<string>> dict = new Dictionary<int, List<string>>();\n
    \       foreach (string word in words) {\n            string key = word.Aggregate(0,
    (current, char) =>\n                (current += (int)char,\n                (current
    < 0x100000000 ? current : current & 0xffffffff));\n            if (!dict.ContainsKey(key))\n
    \               dict.Add(key, new List<string>());\n            dict[key].Add(word);\n
    \       }\n        int max = int.MinValue;\n        foreach (KeyValuePair<int,
    List<string>> entry in dict) {\n            int curr = entry.Key;\n            if
    (curr > max) {\n                max = curr;\n            }\n        }\n        List<string>
    maxList = dict[0].Where(item => item.Length == max).OrderBy(item => item).ToList();\n
    \       return maxList.Count == 1 ? maxList[0] : FindMax(maxList);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsjaf00wi.cs(22,58): error CS1001: Identifier expected

    /tmp/tmpsjaf00wi.cs(23,34): error CS1525: Invalid expression term ''char''

    /tmp/tmpsjaf00wi.cs(24,74): error CS1026: ) expected

    '
  timestamp: 1659976422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Write your code here\n        var wordCount = words.Select(x => x.ToCharArray().Distinct().Count()).OrderByDescending(x
    => x).First();\n        if (wordCount.Equals(0))\n        {\n            return
    words.First();\n        }\n        return words.FirstOrDefault(x => x.ToCharArray().Distinct().Count()
    == wordCount);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c4ad40b4fd544a8909e198ef717a98b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c4ad40b4fd544a8909e198ef717a98b>:0
    \n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // sort words by length (longest first)\n        words =\n            words.OrderByDescending(x
    => x.Length).ThenBy(x => x).ToList();\n\n        // map each word into its length\n
    \       var wordByLength =\n            words.ToDictionary(x => x.Length, x =>
    x);\n\n        // sort words by number of unique characters\n        words =\n
    \           words.OrderByDescending(x =>\n            {\n                var uniqueChars
    = x.GroupBy(y => y).Where(y => y.Count() == 1).Select(y => y.Key).ToList();\n
    \               return uniqueChars.Count;\n            }).ThenBy(x => x).ToList();\n\n
    \       // map each word into its number of unique characters\n        var wordByUniqueChars
    =\n            words.ToDictionary(x =>\n            {\n                var uniqueChars
    = x.GroupBy(y => y).Where(y => y.Count() == 1).Select(y => y.Key).ToList();\n
    \               return uniqueChars.Count;\n            }, x => x);\n\n        //
    find the word with maximum number of unique characters\n        int maxWordLength
    = wordByLength.Keys.Max();\n        string maxWord = wordByLength[maxWordLength];\n\n
    \       // find the word with maximum number of unique characters\n        int
    maxWordUniqueChars = wordByUniqueChars.Keys.Max();\n        string maxWordWithUniqueChars
    = wordByUniqueChars[maxWordUniqueChars];\n\n        // find the word with maximum
    number of unique characters\n        int maxWord = wordByLength.Keys.Max();\n
    \       string maxWordWithUniqueChars = wordByUniqueChars[maxWord];\n\n        //
    return the word with the maximum number of unique characters\n        if (maxWord.Length
    > maxWordWithUniqueChars.Length)\n            return maxWordWithUniqueChars;\n\n
    \       return maxWord;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpehgxyoh_.cs(53,13): error CS0128: A local variable or function named ''maxWord''
    is already defined in this scope

    /tmp/tmpehgxyoh_.cs(54,16): error CS0128: A local variable or function named ''maxWordWithUniqueChars''
    is already defined in this scope

    /tmp/tmpehgxyoh_.cs(54,59): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       bool foundMax = false;\n        int maxCharacters = 0;\n        string
    result = \"\";\n        foreach (string word in words) {\n            var characters
    = word.Distinct().Count();\n            if (found == false || maxCharacters <
    characters) {\n                maxCharacters = characters;\n                result
    = word;\n            }\n            foundMax = foundMax || characters == maxCharacters;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8wja0v9p.cs(25,17): error CS0103: The name ''found'' does not exist in
    the current context

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string wordWithMaxCount;\n        // for each
    word in the list \n        foreach (string word in words) {\n            int currentCount
    = wordToNumbers.Where(x => x.Contains(word)).Distinct().Count();\n            if
    (currentCount > maxCount) {\n                maxCount = currentCount;\n                wordWithMaxCount
    = word;\n            }\n        }\n        return wordWithMaxCount;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph01bkzcv.cs(24,32): error CS0103: The name ''wordToNumbers'' does not
    exist in the current context

    /tmp/tmph01bkzcv.cs(30,16): error CS0165: Use of unassigned local variable ''wordWithMaxCount''

    '
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string word1 = null;\n        string word2 = null;\n        int count1
    = 0, count2 = 0, maxCount = 0;\n        foreach (string word in words) {\n            foreach
    (char c in word.ToCharArray()) {\n                if (count1 < count2) {\n                    count1++;\n
    \                   word1 = word;\n                } else if (count2 < count1)
    {\n                    count2++;\n                    word2 = word;\n                }\n
    \               if (count1 == count2) {\n                    maxCount++;\n                }\n
    \           }\n        }\n        return String.Format(\"{0}\", word1);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abebf978c6f249b78b434e66bf0bed10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abebf978c6f249b78b434e66bf0bed10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = new int[256]; // counts characters\n        int count =
    0;\n        Dictionary<int, int> charCounts = new Dictionary<int, int>();\n        foreach
    (string word in words)\n        {\n            for (int i = 0; i < word.Length;
    i++)\n            {\n                char ch = word[i];\n                if(!charCounts.ContainsKey(ch))\n
    \               {\n                    charCounts[ch] = 1;\n                }\n
    \               else\n                {\n                    charCounts[ch]++;\n
    \               }\n                maxCount[ch] = Math.Max(maxCount[ch], charCounts[ch]);\n
    \               count++;\n            }\n        }\n        if (count != 1)\n
    \       {\n            return \"\";\n        }\n        int maxCountIndex = 0;\n
    \       foreach (char ch in maxCount)\n        {\n            if (maxCount[ch]
    > charCounts[maxCountIndex])\n            {\n                maxCountIndex = ch;\n
    \           }\n        }\n        return words[maxCountIndex];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5gtt6uik.cs(20,24): error CS0029: Cannot implicitly convert type ''int[]''
    to ''int''

    /tmp/tmp5gtt6uik.cs(36,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmp5gtt6uik.cs(36,41): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmp5gtt6uik.cs(45,29): error CS1579: foreach statement cannot operate on
    variables of type ''int'' because ''int'' does not contain a public instance definition
    for ''GetEnumerator''

    /tmp/tmp5gtt6uik.cs(47,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int counter = 0;\n        List<string> wordList = new List<string>();\n
    \       foreach (string s in words) {\n            int uniqueChars = WordCounter(s);\n
    \           if (uniqueChars > counter) {\n                counter = uniqueChars;\n
    \               wordList.Clear();\n                wordList.Add(s);\n            }\n
    \       }\n        if (wordList.Count != 0)\n            return wordList.OrderBy(n
    => n).FirstOrDefault();\n        else\n            return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps9g4xzqx.cs(23,31): error CS0103: The name ''WordCounter'' does not exist
    in the current context

    '
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string result = \"\";\n        Dictionary<char, int> charCount = new Dictionary<char,
    int>();\n        foreach(var word in words) {\n            foreach(var letter
    in word) {\n                if (!charCount.ContainsKey(letter)) {\n                    charCount[letter]
    = 1;\n                }\n                else {\n                    charCount[letter]
    = charCount[letter] + 1;\n                }\n            }\n        }\n        foreach
    (var item in charCount) {\n            var value = item.Value;\n            if
    (value != 1) {\n                result += item.Key;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b90f7a06a4c443e988d477919b182092>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b90f7a06a4c443e988d477919b182092>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = words[0].ToCharArray().Length;\n        string maxWord
    = null;\n        foreach (string word in words) {\n            if (maxCount <
    word.ToCharArray().Length) {\n                maxWord = word;\n                maxCount
    = word.ToCharArray().Length;\n            } else if (maxCount == word.ToCharArray().Length)
    {\n                maxWord = word;\n            }\n        }\n        return maxWord;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3eb5af6a8434f35b01553bf90b71407>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3eb5af6a8434f35b01553bf90b71407>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<string> wordsInUnique = new List<string>();\n        words.ForEach(s
    => {\n            HashSet<string> characters = new HashSet<string>();\n            foreach
    (char c in s.ToCharArray())\n            {\n                characters.Add(c);\n
    \           }\n            wordsInUnique.Add(s);\n            int maxUnique =
    characters.Count;\n            int maxIndex = 0;\n            foreach (int i in
    Enumerable.Range(0, characters.Count))\n            {\n                if (maxUnique
    < characters[i])\n                {\n                    maxUnique = characters[i];\n
    \                   maxIndex = i;\n                }\n            }\n            words[maxIndex]
    = s;\n            wordsInUnique[maxIndex] = s;\n        });\n        if (wordsInUnique.Count
    > 1)\n        {\n            return wordsInUnique.OrderByDescending(s => s.Length).First();\n
    \       }\n        else\n        {\n            return wordsInUnique[0];\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp09_7a500.cs(25,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp09_7a500.cs(32,33): error CS0021: Cannot apply indexing with [] to an
    expression of type ''HashSet<string>''

    /tmp/tmp09_7a500.cs(34,33): error CS0021: Cannot apply indexing with [] to an
    expression of type ''HashSet<string>''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string result = \"\";\n        HashSet<char> chars = new HashSet<char>();\n\n
    \       foreach (string word in words) {\n            foreach (char letter in
    word) {\n                if (!chars.Contains(letter)) {\n                    chars.Add(letter);\n
    \               }\n            }\n        }\n\n        foreach (char c in chars)
    {\n            if (chars.Count(c => c == c) > words.Max(w => w.Count(t => t ==
    c))) {\n                result = words[words.FindIndex(w => w.Count(t => t ==
    c)).ToString()];\n                break;\n            }\n        }\n\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyw9iomvy.cs(33,53): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    /tmp/tmpyw9iomvy.cs(33,53): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpyw9iomvy.cs(32,34): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Debug.Assert(words != null);\n        if (words.Count == 0) return null;\n
    \       var max = new HashSet<char>(words.SelectMany(w => w));\n        int max
    = words.Max(w => w.Distinct().Count());\n        return words.FirstOrDefault(w
    => w.Distinct().Count() == max);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1m_3jp_t.cs(23,13): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmp1m_3jp_t.cs(24,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''int'' and ''HashSet<char>''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var dictionary = new Dictionary<string, int>();\n        foreach (string
    word in words) {\n            foreach (char letter in word)\n                dictionary.Add(letter,
    0);\n        }\n        foreach (string word in words) {\n            foreach
    (char letter in word) {\n                int count;\n                if (dictionary.TryGetValue(letter,
    out count))\n                    dictionary[letter] += 1;\n                else\n
    \                   dictionary[letter] = 1;\n            }\n        }\n        List<KeyValuePair<string,
    int>> maxValues = new List<KeyValuePair<string, int>>();\n        foreach (KeyValuePair<string,
    int> kvp in dictionary) {\n            if (kvp.Value == words.Count())\n                maxValues.Add(kvp);\n
    \       }\n        if (maxValues.Count > 0)\n            return maxValues.First().Key;\n
    \       else\n            return words[0];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyxiug1b_.cs(23,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpyxiug1b_.cs(28,44): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpyxiug1b_.cs(29,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpyxiug1b_.cs(31,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null) {\n            return string.Empty;\n        }\n        var
    maxCount = new List<string>();\n        foreach (var word in words) {\n            var
    count = GetUniqueCharacterCount(word);\n            maxCount.Add(word);\n        }\n
    \       string maxValue = maxCount.OrderByDescending(x => x).First();\n        return
    maxValue;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmzdgyk6z.cs(25,25): error CS0103: The name ''GetUniqueCharacterCount''
    does not exist in the current context

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxChars = 0;\n        string maxWord = \"\";\n        foreach (string
    w in words)\n            FindMaxChars(w, maxWord);\n        int maxUniqueChars
    = words.Count() - maxChars;\n        return maxWord + (maxUniqueChars > maxChars
    ? \"(\" + maxUniqueChars + \")\" : \"\");\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpen62nt2a.cs(23,13): error CS0103: The name ''FindMaxChars'' does not exist
    in the current context

    '
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string maxWord = \"\";\n        int maxNumber = 0;\n        foreach (string
    word in words) {\n            int currNumber = 0;\n            int i = 0;\n            foreach
    (char c in word) {\n                if (i == 0) {\n                    currNumber++;\n
    \               }\n                else {\n                    currNumber++;\n
    \               }\n                i++;\n            }\n            if (currNumber
    > maxNumber) {\n                maxNumber = currNumber;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <621d0a935f7c48b697f828011e058ee1>:0
    \n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string word = \"\";\n        int maxCount = 0, maxCountValue = 0, maxCountIndex
    = 0;\n        foreach (string str in words) {\n            var uniqueCharsCount
    = str.Distinct().Count();\n            if (uniqueCharsCount > maxCount) {\n                maxCount
    = uniqueCharsCount;\n                word = str;\n                maxCountValue
    = uniqueCharsCount;\n                maxCountIndex = 0;\n            } else if
    (uniqueCharsCount == maxCount) {\n                if (uniqueCharsCount < maxCountValue)
    {\n                    maxCountValue = uniqueCharsCount;\n                    word
    = str;\n                    maxCountIndex = words.IndexOf(str);\n                }\n
    \           }\n        }\n        if (maxCount == 0) {\n            throw new
    Exception(\"no word found in list\");\n        }\n        string returnWord =
    words[maxCountIndex];\n        return returnWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48f1cb34ffaa42df8a9068d5e4e42107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48f1cb34ffaa42df8a9068d5e4e42107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<string> wordsInCharCountOrder = new List<string>();\n        int
    maxCharCount = 0;\n        foreach (string word in words) {\n            string
    charCountOrder = word.ToCharArray().\n                Select(c => new { Char =
    c, CharCount = word.ToCharArray().Count() }).\n                OrderBy(o => o.CharCount).\n
    \               Select(o => o.Char).\n                Aggregate((a, b) => a +
    b).ToString();\n            if (charCountOrder.Length > maxCharCount) {\n                maxCharCount
    = charCountOrder.Length;\n            }\n            wordsInCharCountOrder.Add(charCountOrder);\n
    \       }\n        return wordsInCharCountOrder.Count == words.Count ? wordsInCharCountOrder.First()
    : wordsInCharCountOrder.Last();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsqrecdxl.cs(27,37): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpsqrecdxl.cs(27,37): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = words.First().ToCharArray().Distinct().Count();\n        return
    words.FirstOrDefault(w => w.ToCharArray().Distinct().Count() == maxCount);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bff77450e25c49ba8364e53196d15ca6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bff77450e25c49ba8364e53196d15ca6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null || words.Count == 0)\n            return \"No words
    provided\";\n        int maxCount = 0;\n        string bestWord = string.Empty;\n
    \       string tempWord = string.Empty;\n        foreach (string word in words)
    {\n            char[] uniqueChars = word.ToCharArray().Distinct().ToArray();\n
    \           int count = new string(uniqueChars).Length;\n            if (count
    > maxCount) {\n                maxCount = count;\n                bestWord = word;\n
    \           }\n        }\n        return bestWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f37640c347ea4635bd38f148cf8c5f17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f37640c347ea4635bd38f148cf8c5f17>:0
    \n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       /*\n            Sort by length in descending order, then alphabetically
    if equal length\n            Sort by first letter, then last letter in case of
    a tie\n            Sort by first letter, then last letter in case of a tie\n        */\n\n
    \       var charCount = words.Select(s => s.ToCharArray().Distinct().Count());\n
    \       var charCountSorted = charCount.OrderByDescending(x => x).ThenBy(x =>
    x.Equals(0) ? String.Empty : x.ToString()).ThenBy(x => x.Equals(0) ? String.Empty
    : x.ToString());\n        /*\n            Use this for count\n            charCount
    = new List<int>(new int[]{1, 3, 2, 3, 2, 1, 2, 3, 1});\n\n            Use this
    for count\n            charCount = new List<int>(new int[]{1, 3, 2, 3, 2, 1, 2,
    3, 1});\n\n            charCountSorted = new List<int>(new int[]{4, 3, 2, 1, 4,
    3, 1, 2});\n        */\n\n        var max = charCountSorted.First();\n\n        for
    (int i = 1; i < charCountSorted.Count - 1; i++) {\n            if (charCountSorted[i]
    == max) {\n                max = Math.Max(max, charCountSorted[i + 1]);\n            }\n
    \       }\n\n        var result = words.FirstOrDefault(x => charCountSorted.FirstOrDefault(y
    => x == y) == max);\n        /*\n            charCountSorted.FirstOrDefault(y
    => x == y)\n        */\n\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp75j6_hpp.cs(40,29): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmp75j6_hpp.cs(41,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<int>''

    /tmp/tmp75j6_hpp.cs(42,37): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<int>''

    /tmp/tmp75j6_hpp.cs(46,84): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count == 0) return string.Empty;\n        Debug.Assert(words.Count
    == 1 || words.Count == 2);\n        int maxCount = 0;\n        string maxWord
    = string.Empty;\n        foreach (string word in words) {\n            int count
    = GetMaxCount(word);\n            if (count > maxCount) {\n                maxWord
    = word;\n                maxCount = count;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn0xjskqw.cs(25,25): error CS0103: The name ''GetMaxCount'' does not exist
    in the current context

    '
  timestamp: 1659976423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int max = 0;\n        int maxIndex = 0;\n        string word = \"\";\n
    \       int i = 0;\n        foreach(var item in words) {\n            var x =
    item.ToCharArray().Distinct().Count();\n            if(x>max) {\n                max
    = x;\n                maxIndex = i;\n                word = item;\n            }\n
    \           ++i;\n        }\n        return maxIndex;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptzmeb09e.cs(33,16): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659976423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        int maxIndex = 0;\n        string maxWord =
    \"\";\n        int maxCnt = 0;\n        string temp = \"\";\n        foreach (string
    word in words) {\n            int cnt = 1;\n            foreach (char c in word)
    {\n                if (cnt == maxCnt) break;\n                cnt++;\n            }\n
    \           if (cnt == maxCnt) continue;\n            foreach (char c in word)
    {\n                if (maxCnt <= maxCnt) {\n                    if (maxCnt > maxCount)
    {\n                        maxCount = maxCnt;\n                        maxIndex
    = maxWord.Length;\n                        maxWord = word;\n                    }\n
    \                   if (maxCnt == maxCount) maxWord = word;\n                }\n
    \           }\n        }\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5a5a23317a34e7eb60e475dd8b0ed3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5a5a23317a34e7eb60e475dd8b0ed3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<string, int> count = new Dictionary<string, int>();\n        words.ForEach(word
    => {\n            foreach (char c in word) {\n                if (!count.ContainsKey(c))
    {\n                    count[c] = 1;\n                }\n                else\n
    \               {\n                    count[c] += 1;\n                }\n            }\n
    \       });\n        int maxCount = 0;\n        foreach (var pair in count) {\n
    \           if (pair.Value > maxCount) {\n                maxCount = pair.Value;\n
    \           }\n        }\n        string max = maxCount == 0 ? string.Empty :
    maxCount.ToString();\n        if (count.Count == 0)\n        {\n            return
    max;\n        }\n        foreach (var pair in count) {\n            if (pair.Value
    == maxCount) {\n                return pair.Key;\n            }\n        }\n        foreach
    (var pair in count) {\n            if (pair.Value > maxCount) {\n                max
    = pair.Key;\n            }\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7ihikh1.cs(23,40): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpj7ihikh1.cs(24,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpj7ihikh1.cs(28,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int[] max = new int[26];\n        int count = 0;\n        foreach(string
    word in words) {\n            foreach(char c in word) {\n                max[c-'a']
    ++;\n            }\n            foreach (char c in word) {\n                count++;\n
    \           }\n            if (count == words.Count()) {\n                if (max[max[0]
    - 1] > max[max[1] - 1]) {\n                    return word;\n                }
    else {\n                    return words[0];\n                }\n            }\n
    \       }\n        return words[0];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a22810ae8474f139fb56fe50728c8e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a22810ae8474f139fb56fe50728c8e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int counter = 0;\n        int max = 0;\n        int min = 0;\n        string
    result = \"\";\n        foreach (string word in words) {\n            string temp
    = word;\n            char[] chars = temp.ToCharArray();\n            counter =
    0;\n            for (int i = 0; i < chars.Length; i++) {\n                bool
    found = false;\n                for (int j = 0; j < chars.Length; j++) {\n                    if
    (chars[i] == chars[j]) {\n                        counter++;\n                        found
    = true;\n                        break;\n                    }\n                }\n
    \               if (!found) {\n                    counter = 1;\n                }\n
    \               if (counter > max) {\n                    max = counter;\n                }\n
    \               if (counter < min) {\n                    min = counter;\n                }\n
    \           }\n            if (min == max) {\n                result = temp;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc8323232f984469be2c349fed31d663>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc8323232f984469be2c349fed31d663>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string maxWord = string.Empty;\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                count += word.Count(ch => ch == c);\n            }\n
    \           if (count > maxCount) {\n                maxCount = count;\n                maxWord
    = word;\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4af7122684ce491999d962de9293ef56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4af7122684ce491999d962de9293ef56>:0
    \n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<string> unique = new List<string>();\n        foreach (string s in
    words) {\n            string str = s.Trim().ToLower();\n            foreach (char
    c in str) {\n                if (!unique.Contains(c)) {\n                    unique.Add(c);\n
    \               }\n            }\n        }\n        string maxValue = string.Empty;\n
    \       foreach (char c in unique) {\n            int count = 1;\n            foreach
    (string s in words) {\n                if (s.Trim().ToLower().Contains(c.ToString()))
    {\n                    count++;\n                }\n            }\n            if
    (count > unique.Count && count > maxValue.Length) {\n                maxValue
    = c.ToString();\n            }\n        }\n        return maxValue;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgdhofdax.cs(24,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpgdhofdax.cs(25,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpgdhofdax.cs(30,9): error CS0030: Cannot convert type ''string'' to ''char''

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string maxWord = null;\n        int maxLength = 0;\n\n        for (int
    i = 0; i < words.Count; i++)\n        {\n            int wordLength = 0;\n            HashSet<char>
    charSet = new HashSet<char>();\n            foreach (string s in words)\n            {\n
    \               int count = 0;\n                for (int j = 0; j < s.Length;
    j++)\n                {\n                    if (s.Length > count)\n                    {\n
    \                       count = s.Length;\n                    }\n                    char
    ch = s[j];\n                    charSet.Add(ch);\n                }\n\n                if
    (charSet.Count > wordLength)\n                {\n                    wordLength
    = charSet.Count;\n                    maxWord = s;\n                }\n\n            }\n\n
    \           int count = 0;\n            for (int j = 0; j < maxWord.Length; j++)\n
    \           {\n                if (maxWord.Length > count)\n                {\n
    \                   count = maxWord.Length;\n                }\n            }\n\n
    \           if (wordLength > maxLength)\n            {\n                maxLength
    = wordLength;\n                maxWord = words[i];\n            }\n        }\n\n
    \       return maxWord;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpieu09ew8.cs(29,21): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var counts = new int[256];\n        int uniqueCounts = 0;\n        foreach
    (var word in words) {\n            var uniqueChars = new HashSet<char>();\n            foreach
    (var letter in word) {\n                uniqueChars.Add(letter);\n            }\n
    \           foreach (var ch in uniqueChars) {\n                counts[ch]++;\n
    \           }\n            uniqueCounts += uniqueChars.Count();\n        }\n\n
    \       int maxCount = 0;\n        for (int i = 0; i < counts.Length; i++) {\n
    \           if (counts[i] > maxCount) {\n                maxCount = counts[i];\n
    \           }\n        }\n\n        for (int i = 0; i < counts.Length; i++) {\n
    \           if (counts[i] != maxCount) {\n                counts[i] = maxCount;\n
    \           }\n        }\n\n        int max = 0;\n        int maxIndex = -1;\n
    \       for (int i = 0; i < counts.Length; i++) {\n            if (counts[i] >
    max) {\n                max = counts[i];\n                maxIndex = i;\n            }\n
    \       }\n\n        return words[maxIndex];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbef93a0de8f4364b93fb983bbbb2b88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbef93a0de8f4364b93fb983bbbb2b88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Write code here\n        var res = new List<string>();\n        var
    chars = new Dictionary<char, int>();\n        var max = 0;\n        foreach(var
    w in words) {\n            foreach(var c in w) {\n                if (!chars.ContainsKey(c))
    {\n                    chars[c] = 0;\n                }\n                chars[c]
    += 1;\n            }\n            max = Math.Max(max, chars[w.First()]);\n            if
    (chars[w.First()] == chars[w.Last()]) res.Add(w);\n        }\n        return res.Count
    == 0 ? null : res.First();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab0f96459be94240b5a39c4e2f4fb4c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab0f96459be94240b5a39c4e2f4fb4c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int counter = 0;\n        string maxWord = \"\";\n        foreach (string
    word in words) {\n            for (int i = 0; i < word.Length; i++) {\n                for
    (int j = 0; j < word.Length; j++) {\n                    if (counter == 0 && i
    == j) {\n                        continue;\n                    }\n                    counter++;\n
    \                   if (word.Substring(i, j).ToUpper() != word.Substring(i, j).ToUpper())
    {\n                        counter--;\n                        break;\n                    }\n
    \                   counter--;\n                }\n            }\n            if
    (counter == maxWord.Length) {\n                maxWord = word;\n            }\n
    \           counter = 0;\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00044]
    in <69a5f0377bf64c16aaeb2d025edc2ea1>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <69a5f0377bf64c16aaeb2d025edc2ea1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00044]
    in <69a5f0377bf64c16aaeb2d025edc2ea1>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <69a5f0377bf64c16aaeb2d025edc2ea1>:0 \n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var result = new List<string>();\n        int max = 0;\n        foreach
    (string word in words)\n        {\n            int count = 0;\n            foreach
    (char c in word)\n            {\n                if (words.Where(w => w.ToCharArray().Any(c2
    => c2 == c)).Count() > 0)\n                {\n                    count++;\n                }\n
    \           }\n            if (count > max)\n            {\n                max
    = count;\n                result = word;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpih9d7ta7.cs(35,26): error CS0029: Cannot implicitly convert type ''string''
    to ''System.Collections.Generic.List<string>''

    /tmp/tmpih9d7ta7.cs(38,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<string>''
    to ''string''

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string bestString = null;\n        long bestNumber = 0;\n\n        for
    (int i = 0; i < words.Count; i++) {\n            int uniqueChars = 0;\n            string
    s = words[i].ToLower();\n            for (int j = 0; j < s.Length; j++) {\n                if
    (!s.Contains(s[j])) {\n                    uniqueChars++;\n                }\n
    \           }\n            if (uniqueChars > bestNumber) {\n                bestNumber
    = uniqueChars;\n                bestString = words[i];\n            }\n        }\n
    \       return bestString;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00029] in <3cc70c58975a4e1eb92462ee5982e6ec>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00029] in <3cc70c58975a4e1eb92462ee5982e6ec>:0
    \n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<char, int> charCount = new Dictionary<char, int>();\n        for
    (int i = 0; i < words.Count; ++i) {\n            string word = words[i];\n            foreach
    (char c in word) {\n                int count = charCount.ContainsKey(c) ? charCount[c]
    : 1;\n                charCount[c] = count + 1;\n            }\n        }\n        char
    maxKey = charCount.Values.Max().Key;\n        charCount.Remove(maxKey);\n        if
    (charCount.Count == 0) {\n            return words[0];\n        }\n        int
    maxCount = charCount.Values.Max().Value;\n        List<string> newWords = new
    List<string>();\n        foreach (string word in words) {\n            charCount.TryGetValue(maxKey,
    out int maxCountThisWord);\n            int newCount = 0;\n            foreach
    (char c in word) {\n                if (charCount.ContainsKey(c)) {\n                    newCount
    += charCount[c];\n                }\n            }\n            if (newCount >
    maxCountThisWord) {\n                newWords.Add(word);\n                maxCountThisWord
    = newCount;\n            }\n        }\n        return FindMax(newWords);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6_iv_q82.cs(28,46): error CS1061: ''int'' does not contain a definition
    for ''Key'' and no accessible extension method ''Key'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp6_iv_q82.cs(33,47): error CS1061: ''int'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       StringBuilder sb = new StringBuilder();\n        int maxUniqueChars =
    0;\n        string maxWord = null;\n        foreach (string s in words) {\n            int
    uniqueChars = 0;\n            foreach (char c in s)\n                uniqueChars++;\n
    \           if (uniqueChars > maxUniqueChars) {\n                maxUniqueChars
    = uniqueChars;\n                maxWord = s;\n            }\n        }\n        if
    (maxUniqueChars == 0)\n            return null;\n        int minIndex = words.IndexOf(maxWord);\n
    \       int maxIndex = words.IndexOf(maxWord, minIndex + 1);\n        if (maxIndex
    == -1)\n            return maxWord;\n        List<char> uniqueChars = new List<char>(maxUniqueChars);\n
    \       for (int i = minIndex; i <= maxIndex; i++)\n            foreach (char
    c in words[i])\n                if (uniqueChars.Contains(c))\n                    uniqueChars.Remove(c);\n
    \       return words[minIndex];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl0x2zul0.cs(24,17): error CS0136: A local or parameter named ''uniqueChars''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int max = -1;\n        string result = \"\";\n        foreach (string
    word in words) {\n            int countChars = word.Count(c => c >= 'a' && c <=
    'z');\n            if (countChars > max) {\n                max = countChars;\n
    \               result = word;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ddd6e906a62d4541b0c4918eba6fb0e9>:0
    \n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // TODO: Write the body of the function here.\n        List<string> sortedWords
    = words.OrderBy(w => w.Length).ToList();\n        SortedSet<string> unique = new
    SortedSet<string>();\n        foreach (string s in sortedWords)\n        {\n            foreach
    (char c in s)\n            {\n                if (!unique.Contains(c))\n                {\n
    \                   unique.Add(c);\n                }\n            }\n        }\n
    \       if (unique.Count == 0)\n        {\n            return null;\n        }\n
    \       string max = \"\";\n        int maxCount = 0;\n        string temp = sortedWords.First();\n
    \       foreach (string s in sortedWords.Skip(1))\n        {\n            string
    tempCount = 0;\n            foreach (char c in s)\n            {\n                if
    (unique.Contains(c))\n                {\n                    tempCount++;\n                }\n
    \           }\n            if (tempCount > maxCount)\n            {\n                max
    = s;\n                maxCount = tempCount;\n            }\n            temp =
    s;\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0z2gxrl_.cs(27,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp0z2gxrl_.cs(29,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp0z2gxrl_.cs(42,32): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp0z2gxrl_.cs(45,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp0z2gxrl_.cs(47,21): error CS0023: Operator ''++'' cannot be applied to
    operand of type ''string''

    /tmp/tmp0z2gxrl_.cs(50,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmp0z2gxrl_.cs(53,28): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    '
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string maxChar = \"\";\n        int maxCountIndex
    = 0;\n\n        // Find the max word and it's index\n        foreach (var word
    in words) {\n            var charCount = new int[word.Length];\n            for
    (int i = 0; i < word.Length; i++) {\n                charCount[i] = word.Count(c
    => c == word[i]);\n            }\n\n            if (charCount.Max() != maxCount)
    {\n                maxCountIndex = words.IndexOf(word);\n                maxCount
    = charCount.Max();\n                maxChar = word;\n            }\n        }\n\n
    \       // Find the second max word and it's index\n        if (maxCount > 1)
    {\n            foreach (var word in words) {\n                var charCount =
    new int[word.Length];\n                for (int i = 0; i < word.Length; i++) {\n
    \                   charCount[i] = word.Count(c => c == word[i]);\n                }\n\n
    \               if (charCount.Max() != maxCount &&\n                    charCount.Max()
    < maxCount)\n                {\n                    maxCountIndex = words.IndexOf(word);\n
    \                   maxCount = charCount.Max();\n                    maxChar =
    word;\n                }\n            }\n        }\n\n        // Return the word
    with max number of unique characters\n        return maxChar;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cf9f588549c42f8954b8962fc5d7112>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cf9f588549c42f8954b8962fc5d7112>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] cArray = words[0].ToCharArray();\n        int maxNumUniqueChars
    = 0;\n        string maxWord = string.Empty;\n        foreach (string s in words)
    {\n            int numUniqueChars = s.Count() - cArray.Length;\n            if
    (numUniqueChars > maxNumUniqueChars) {\n                maxNumUniqueChars = numUniqueChars;\n
    \               maxWord = s;\n            }\n            cArray = s.ToCharArray();\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <114381d831244fcd8c57b5ae8e66a777>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <114381d831244fcd8c57b5ae8e66a777>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null) {\n            throw new ArgumentNullException(\"words\");\n
    \       }\n        // If there are no words, return null.\n        if (words.Count
    == 0) {\n            return null;\n        }\n        // Create a hashtable for
    storing number of unique characters in words.\n        var num = new Hashtable();\n
    \       // Create a hashtable for storing unique characters in words.\n        var
    unq = new Hashtable();\n        foreach (string word in words) {\n            foreach
    (char c in word) {\n                int val = num[c];\n                if (val
    == null) {\n                    num.Add(c, 1);\n                } else {\n                    num[c]
    = val + 1;\n                }\n            }\n        }\n        // Remove all
    characters whose value is zero.\n        foreach (KeyValuePair<object, object>
    entry in num) {\n            if (entry.Value == 0) {\n                num.Remove(entry.Key);\n
    \           }\n        }\n        // Remove all characters that have the same
    value from the second hashtable.\n        foreach (KeyValuePair<object, object>
    entry in num) {\n            if (num[entry.Key] != 0) {\n                unq.Add(entry.Key,
    entry.Value);\n            }\n        }\n        // Sort the second hashtable
    by key, ascending.\n        var sorted = new SortedDictionary<object, object>(unq);\n
    \       // Return the first item.\n        foreach (KeyValuePair<object, object>
    entry in sorted) {\n            string ret = null;\n            if (num.ContainsKey(entry.Key))
    {\n                ret = entry.Key.ToString();\n            }\n            if
    (ret != null && ret.Length > 0) {\n                return ret;\n            }\n
    \       }\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp5n5tuak.cs(28,23): error CS0246: The type or namespace name ''Hashtable''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpp5n5tuak.cs(30,23): error CS0246: The type or namespace name ''Hashtable''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpp5n5tuak.cs(43,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''object'' and ''int''

    /tmp/tmpp5n5tuak.cs(34,21): warning CS0472: The result of the expression is always
    ''false'' since a value of type ''int'' is never equal to ''null'' of type ''int?''

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Your code goes here\n        var result = words.GroupBy(w => w.Length).OrderByDescending(g
    => g.Key).First().Key;\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8lqk3zjl.cs(22,16): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var stringMax = new List<string>();\n        var stringCount = new List<string>();\n
    \       var stringMaxCount = new List<int>();\n        foreach(var word in words)
    {\n            if(wordCount.Count == 0) {\n                stringCount.Add(word);\n
    \               stringMax.Add(word);\n                stringMaxCount.Add(word.Length);\n
    \           } else if(stringCount.Count == stringMaxCount.Max()) {\n                stringCount.Add(word);\n
    \               stringMax.Add(word);\n                stringMaxCount.Add(word.Length);\n
    \           } else if (stringCount.Count > stringMaxCount.Max()) {\n                stringMax
    = stringCount;\n                stringCount = new List<string>();\n                stringMaxCount
    = new List<int>();\n                stringCount.Add(word);\n                stringMaxCount.Add(word.Length);\n
    \           }\n        }\n        stringMax = stringCount.Count > stringMaxCount.Max()
    ? stringCount : stringMax;\n        stringMaxCount = stringCount.Count > stringMaxCount.Max()
    ? stringCount : stringMaxCount;\n        foreach(var word in stringMax) {\n            stringMaxCount.Remove(word.Length);\n
    \       }\n        return stringMax.First();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpleuk73yz.cs(24,16): error CS0103: The name ''wordCount'' does not exist
    in the current context

    /tmp/tmpleuk73yz.cs(41,26): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''System.Collections.Generic.List<string>''
    and ''System.Collections.Generic.List<int>''

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int counter = 0;\n        HashSet<char> hs = new HashSet<char>();\n        StringBuilder
    sb = new StringBuilder();\n        foreach (string s in words) {\n            foreach
    (char c in s) {\n                counter++;\n                hs.Add(c);\n            }\n
    \           sb.Append(c);\n        }\n        string maxChar = sb.ToString();\n
    \       int maxCharCount = hs.Count;\n        if (maxCharCount > counter) {\n
    \           return maxChar;\n        }\n        hs.Clear();\n        foreach (string
    s in words) {\n            foreach (char c in s) {\n                if (!hs.Contains(c))
    {\n                    counter++;\n                    hs.Add(c);\n                }\n
    \           }\n            sb.Append(c);\n        }\n        maxChar = sb.ToString();\n
    \       maxCharCount = hs.Count;\n        if (maxCharCount > counter) {\n            return
    maxChar;\n        }\n        hs.Clear();\n        foreach (string s in words)
    {\n            foreach (char c in s) {\n                if (!hs.Contains(c)) {\n
    \                   counter++;\n                    hs.Add(c);\n                }\n
    \           }\n            sb.Append(c);\n        }\n        maxChar = sb.ToString();\n
    \       maxCharCount = hs.Count;\n        if (maxCharCount > counter) {\n            return
    maxChar;\n        }\n        hs.Clear();\n        foreach (string s in words)
    {\n            foreach (char c in s) {\n                if (!hs.Contains(c)) {\n
    \                   counter++;\n                    hs.Add(c);\n                }\n
    \           }\n            sb.Append(c);\n        }\n        maxChar = sb.ToString();\n
    \       maxCharCount = hs.Count;\n        if (maxCharCount > counter) {\n            return
    maxChar;\n        }\n        hs.Clear();\n        foreach (string s in words)
    {\n            foreach (char c in s) {\n                if (!hs.Contains(c)) {\n
    \                   counter++;\n                    hs.Add(c);\n                }\n
    \           }\n            sb.Append(c);\n        }\n        maxChar = sb.ToString();\n
    \       maxCharCount = hs.Count;\n        if (maxCharCount > counter) {\n            return
    maxChar;\n        }\n        hs.Clear();\n        foreach (string s in words)
    {\n            foreach (char c in s) {\n                if (!hs.Contains(c)) {\n
    \                   counter++;\n                    hs.Add(c);\n                }\n
    \           }\n            sb.Append(c);\n        }\n        maxChar = sb.ToString();\n
    \       maxCharCount = hs.Count;\n        if (maxCharCount > counter) {\n            return
    maxChar;\n        }\n        hs.Clear();\n        foreach (string s in words)
    {\n            foreach (char c in s) {\n                if (!hs.Contains(c)) {\n
    \                   counter++;\n                    h\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsgo788jj.cs(115,22): error CS1002: ; expected

    /tmp/tmpsgo788jj.cs(117,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpsgo788jj.cs(130,2): error CS1513: } expected

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<char> unique_chars = new List<char>();\n        int max_unique =
    -1;\n        string word = null;\n        foreach (string word in words) {\n            unique_chars.Clear();\n
    \           foreach (char c in word) {\n                if (unique_chars.Contains(c)
    == false) unique_chars.Add(c);\n            }\n            unique_chars.Sort();\n
    \           if (unique_chars.Count > max_unique) {\n                max_unique
    = unique_chars.Count;\n                word = word;\n            }\n        }\n
    \       return word;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv1kuyi6d.cs(23,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpv1kuyi6d.cs(31,17): error CS1656: Cannot assign to ''word'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int max = 0;\n        string maxWord = \"\";\n        foreach (string
    word in words) {\n            int count = GetUniqueCharCount(word);\n            if
    (count > max) {\n                max = count;\n                maxWord = word;\n
    \           }\n        }\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpumt18x8n.cs(23,25): error CS0103: The name ''GetUniqueCharCount'' does
    not exist in the current context

    '
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count() == 0) {\n            return string.Empty;\n        }\n
    \       var counts = words.Select(w => w.ToCharArray().Distinct().Count()).ToList();\n
    \       return counts.OrderByDescending(w => w).FirstOrDefault().ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf3ec143a4194cbdbe7e2d16ef066280>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf3ec143a4194cbdbe7e2d16ef066280>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string retValue = \"\";\n        foreach (string
    word in words) {\n            int count = 0;\n            char[] charArray = word.ToCharArray();\n
    \           int length = charArray.Length;\n            for (int i = 0; i < length;
    i++) {\n                if (charArray[i] != charArray[length - 1 - i]) {\n                    count++;\n
    \               }\n            }\n            if (count > maxCount) {\n                maxCount
    = count;\n                retValue = word;\n            }\n        }\n        return
    retValue;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9e71f7ae35142de993ca77d84eb4fc2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9e71f7ae35142de993ca77d84eb4fc2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       return FindMax(words, new Dictionary<string, int>());\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwwiporpp.cs(20,16): error CS1501: No overload for method ''FindMax'' takes
    2 arguments

    '
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string maxChars = \"\";\n        int maxCharCount = int.MinValue;\n        foreach
    (string word in words) {\n            foreach (char c in word) {\n                if
    (!maxChars.Contains(c)) {\n                    if (maxCharCount < 1) maxCharCount
    = 1;\n                    else {\n                        if (maxCharCount > maxChars.Count(c
    => c == c)) maxCharCount = maxChars.Count(c => c == c);\n                    }\n
    \                   maxChars += c;\n                }\n            }\n        }\n
    \       if (maxCharCount > maxChars.Count(c => c == c)) return words[0];\n        else
    return maxChars;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5dbc3298bbb45e1b2ab27607d7bd617>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5dbc3298bbb45e1b2ab27607d7bd617>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] charArray = words.ToCharArray();\n        int characterCount =
    0;\n        int maximumCharCount = 0;\n        int maxCharIndex = 0;\n        int
    maxCharIndex2 = 0;\n\n        for (int i = 0; i < charArray.Length; i++) {\n            characterCount
    = charArray.Count(item => item == charArray[i]);\n            if (characterCount
    > maximumCharCount) {\n                maximumCharCount = characterCount;\n                maxCharIndex
    = i;\n            }\n        }\n\n        char[] charArray2 = words.ToCharArray();\n
    \       for (int i = 0; i < charArray2.Length; i++) {\n            characterCount
    = charArray2.Count(item => item == charArray2[i]);\n            if (characterCount
    > maximumCharCount) {\n                maximumCharCount = characterCount;\n                maxCharIndex2
    = i;\n            }\n        }\n\n        char[] charArray3 = words.ToCharArray();\n
    \       for (int i = 0; i < charArray3.Length; i++) {\n            characterCount
    = charArray3.Count(item => item == charArray3[i]);\n            if (characterCount
    > maximumCharCount) {\n                maximumCharCount = characterCount;\n                maxCharIndex3
    = i;\n            }\n        }\n\n        return ((maxCharIndex3 == maxCharIndex2
    ? words[maxCharIndex] :\n                (maxCharIndex2 > maxCharIndex ? words[maxCharIndex2]
    :\n                    words[maxCharIndex3])));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj0mduy_9.cs(20,34): error CS1061: ''List<string>'' does not contain a
    definition for ''ToCharArray'' and no accessible extension method ''ToCharArray''
    accepting a first argument of type ''List<string>'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmpj0mduy_9.cs(34,35): error CS1061: ''List<string>'' does not contain a
    definition for ''ToCharArray'' and no accessible extension method ''ToCharArray''
    accepting a first argument of type ''List<string>'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmpj0mduy_9.cs(43,35): error CS1061: ''List<string>'' does not contain a
    definition for ''ToCharArray'' and no accessible extension method ''ToCharArray''
    accepting a first argument of type ''List<string>'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmpj0mduy_9.cs(48,17): error CS0103: The name ''maxCharIndex3'' does not
    exist in the current context

    /tmp/tmpj0mduy_9.cs(52,18): error CS0103: The name ''maxCharIndex3'' does not
    exist in the current context

    /tmp/tmpj0mduy_9.cs(54,27): error CS0103: The name ''maxCharIndex3'' does not
    exist in the current context

    '
  timestamp: 1659976424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // TODO: Implement\n        var charCount = new Dictionary<char, int>();\n
    \       foreach (string str in words) {\n            foreach (char ch in str)
    {\n                if (charCount.ContainsKey(ch))\n                    charCount[ch]++;\n
    \               else\n                    charCount[ch] = 1;\n            }\n
    \       }\n        var maxValue = 0;\n        char maxChar = '\\0';\n        foreach
    (var kvp in charCount) {\n            if (kvp.Value > maxValue) {\n                maxValue
    = kvp.Value;\n                maxChar = kvp.Key;\n            }\n        }\n        return
    words.FirstOrDefault(x => charCount.ContainsKey(maxChar)).ToUpper();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33eb49649de1495793ceedc725099769>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33eb49649de1495793ceedc725099769>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var maxWord = words.Where(w => w.Distinct().Count() == w.Count()).OrderByDescending(w
    => w.Count()).First();\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7002b2956eb54af3b7a548af2b1958e8>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x0004a] in <7002b2956eb54af3b7a548af2b1958e8>:0
    \n  at Problem.Main (System.String[] args) [0x00094] in <7002b2956eb54af3b7a548af2b1958e8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x0004a] in <7002b2956eb54af3b7a548af2b1958e8>:0
    \n  at Problem.Main (System.String[] args) [0x00094] in <7002b2956eb54af3b7a548af2b1958e8>:0
    \n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Create empty sets to store unique characters and to store counts\n
    \       HashSet<char> uniqueCharacters = new HashSet<char>();\n        int maxCount
    = 0;\n\n        // Go through each word in the list, adding it to unique set and
    counting\n        foreach (string word in words) {\n            // Go through
    each character in the word, add it to unique set and count\n            for (int
    i = 0; i < word.Length; i++) {\n                char c = word[i];\n                if
    (!uniqueCharacters.Contains(c)) {\n                    uniqueCharacters.Add(c);\n
    \                   maxCount++;\n                }\n            }\n        }\n\n
    \       // Return the word with the maximum number of unique characters\n        if
    (uniqueCharacters.Count > maxCount) {\n            string result = words[0];\n
    \           for (int i = 1; i < words.Count; i++) {\n                if (uniqueCharacters.Count
    == maxCount) {\n                    result = words[i];\n                }\n            }\n
    \           return result;\n        } else {\n            int uniqueCharacterCount
    = uniqueCharacters.Count;\n            int maxCountIndex = 0;\n            for
    (int i = 0; i < words.Count; i++) {\n                if (uniqueCharacterCount
    == maxCount) {\n                    maxCountIndex = i;\n                }\n                uniqueCharacterCount
    = uniqueCharacters.Count;\n            }\n            return words[maxCountIndex];\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54be605ea1f5492dbdf6d33e3fd32185>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54be605ea1f5492dbdf6d33e3fd32185>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int max = 0;\n        int len = words.Count;\n        int count = new
    int[len];\n        for (int i = 0; i < len; i++)\n            count[i] = 0;\n
    \       foreach (string word in words)\n            for (int i = 0; i < word.Length;
    i++)\n                count[(int)word[i]]++;\n        for (int i = 1; i < len;
    i++)\n            if (count[i] > count[max])\n                max = i;\n        return
    words[max];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw0q_pubq.cs(22,21): error CS0029: Cannot implicitly convert type ''int[]''
    to ''int''

    /tmp/tmpw0q_pubq.cs(24,13): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpw0q_pubq.cs(27,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpw0q_pubq.cs(29,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpw0q_pubq.cs(29,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    '
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // write your code here\n        var wordsList = words.ToArray();\n        Dictionary<string,
    int> wordDict = new Dictionary<string, int>();\n\n        foreach (string word
    in wordsList)\n        {\n            if (wordDict.ContainsKey(word))\n            {\n
    \               wordDict[word]++;\n            }\n            else\n            {\n
    \               wordDict.Add(word, 1);\n            }\n        }\n        var
    max = wordDict.OrderByDescending(x => x.Value).First().Key;\n        var result
    = words.Where(x => x.Equals(max)).First();\n\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1beafec23319492ba63e74ac0fec829e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1beafec23319492ba63e74ac0fec829e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] chars = words.Distinct().ToArray().SelectMany(w => w.ToCharArray()).ToArray();\n
    \       int[] numbers = chars.Select(c => (int)Char.GetNumericValue(c)).ToArray();\n
    \       char[] result = new char[numbers.Length];\n        int count = 0;\n        for
    (int i = 0; i < numbers.Length; i++) {\n            result[count] = chars[i];\n
    \           count++;\n        }\n        Array.Sort(numbers, result);\n        string
    result = new string(result);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2knsdqw.cs(29,16): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpi2knsdqw.cs(30,16): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var dictionary = new Dictionary<char, int>();\n        words.ForEach(word
    => word.ToCharArray().ToList().ForEach(c => {\n            if (!dictionary.ContainsKey(c))
    {\n                dictionary.Add(c, 0);\n            }\n            dictionary[c]
    += 1;\n        }));\n        var maxCount = 0;\n        var maxChar = string.Empty;\n
    \       var wordWithMaxCount = null;\n        var wordWithMaxCountString = string.Empty;\n
    \       foreach (var c in dictionary) {\n            if (maxCount < c.Value.Value)
    {\n                maxCount = c.Value.Value;\n                maxChar = c.Key;\n
    \           }\n            if (maxCount == c.Value.Value) {\n                wordWithMaxCountString
    = c.Key;\n            }\n        }\n        return maxChar;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq5grfa1q.cs(29,13): error CS0815: Cannot assign <null> to an implicitly-typed
    variable

    /tmp/tmpq5grfa1q.cs(32,36): error CS1061: ''int'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpq5grfa1q.cs(33,36): error CS1061: ''int'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpq5grfa1q.cs(34,27): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpq5grfa1q.cs(36,37): error CS1061: ''int'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpq5grfa1q.cs(37,42): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Debug.Assert(words != null && words.Count > 0);\n        // get maximum
    unique characters\n        char[] uniqueChars = new char[words.Max(word => word.Length)];\n
    \       foreach (string word in words) {\n            int index = 0;\n            foreach
    (char c in word) {\n                if (c != uniqueChars[index]) {\n                    uniqueChars[index]
    = c;\n                    index++;\n                }\n            }\n        }\n
    \       // get minimum lexicographical order\n        List<int> lexOrder = new
    List<int>();\n        for (int index = 0; index < words.Count; index++) {\n            lexOrder.Add(lexIndexOf(chars,
    words[index]));\n        }\n        string maxString = lexOrder.Max().ToString();\n
    \       // get string with minimum lexicographical order\n        if (lexOrder.Contains(lexOrder.Min()))
    {\n            maxString = words[lexOrder.Min()].ToString();\n        }\n        return
    maxString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ah14687.cs(35,26): error CS0103: The name ''lexIndexOf'' does not exist
    in the current context

    /tmp/tmp5ah14687.cs(35,37): error CS0103: The name ''chars'' does not exist in
    the current context

    '
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // TODO: Write your solution to here\n        string max = \"\";\n        foreach
    (string word in words) {\n            int[] count = new int[26];\n            char[]
    buffer = word.ToCharArray();\n            foreach (char c in buffer) {\n                count[c
    - 'a']++;\n            }\n            int maxCount = 0;\n            int maxCountIndex
    = -1;\n            for (int i = 0; i < 26; i++) {\n                if (count[i]
    > maxCount) {\n                    maxCount = count[i];\n                    maxCountIndex
    = i;\n                }\n            }\n            if (maxCount > 1) {\n                max
    = word;\n                break;\n            }\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7da18e67ca5b453fa2cc4cbed4d28abf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7da18e67ca5b453fa2cc4cbed4d28abf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var result = new Dictionary<string, int>();\n        foreach (string s
    in words) {\n            foreach (char c in s.ToCharArray()) {\n                if
    (!result.ContainsKey(c)) {\n                    result[c] = 0;\n                }\n
    \               result[c] = result[c] + 1;\n            }\n        }\n        Debug.WriteLine($\"Result:
    {result}\");\n        var maxCount = -1;\n        foreach (KeyValuePair<string,
    int> kv in result) {\n            if (kv.Value > maxCount) {\n                maxCount
    = kv.Value;\n            }\n        }\n        Debug.WriteLine($\"Max count: {maxCount}\");\n
    \       if (maxCount == 1) {\n            return words[0];\n        }\n        if
    (maxCount > 1) {\n            int minCount = words[0].Length;\n            foreach
    (KeyValuePair<string, int> kv in result) {\n                if (kv.Value == minCount)
    {\n                    return kv.Key;\n                }\n                if (kv.Value
    < minCount) {\n                    minCount = kv.Value;\n                }\n            }\n
    \       }\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9saa4ft6.cs(23,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp9saa4ft6.cs(24,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp9saa4ft6.cs(26,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp9saa4ft6.cs(26,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int[] count = new int[65536];\n        foreach(var word in words) {\n
    \           foreach(var c in word)\n                ++count[c];\n        }\n        int
    maxChar = -1;\n        int maxCount = count[0];\n        foreach(var c in count)
    {\n            if(c>maxCount) {\n                maxChar = c;\n                maxCount
    = c;\n            }\n        }\n        foreach(var word in words) {\n            int
    wordCharCount = 0;\n            foreach(var c in word)\n                wordCharCount
    += (c==maxChar);\n            if(wordCharCount>maxCount)\n                return
    word;\n        }\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpncmfgwoo.cs(36,17): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''int'' and ''bool''

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Write your code here\n        StringBuilder sb = new StringBuilder();\n
    \       int maxNum = 0;\n        foreach (string s in words) {\n            int
    numUniqueChars = GetUniqueChars(s).Length;\n            if (numUniqueChars > maxNum)\n
    \               maxNum = numUniqueChars;\n        }\n        if (maxNum > 0) {\n
    \           string maxWord = words[0];\n            foreach (string s in words)
    {\n                int numUniqueChars = GetUniqueChars(s).Length;\n                if
    (numUniqueChars == maxNum)\n                    maxWord = s;\n            }\n
    \           return maxWord;\n        }\n        return string.Empty;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1h8tzln8.cs(24,34): error CS0103: The name ''GetUniqueChars'' does not
    exist in the current context

    /tmp/tmp1h8tzln8.cs(31,38): error CS0103: The name ''GetUniqueChars'' does not
    exist in the current context

    '
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxLength = 0;\n        string wordWithMaxLength = null;\n        foreach
    (string word in words) {\n            if (word.Length > maxLength) {\n                wordWithMaxLength
    = word;\n                maxLength = word.Length;\n            }\n        }\n
    \       if (wordWithMaxLength != null) {\n            HashSet<string> hs = new
    HashSet<string>();\n            foreach (string word in words) {\n                if
    (hs.Contains(word)) {\n                    continue;\n                }\n                hs.Add(word);\n
    \           }\n            wordWithMaxLength = wordWithMaxLength.Substring(0,
    maxLength);\n        }\n        return wordWithMaxLength;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28b28eb18f604497a8062ab3717e869a>:0
    \n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        List<string> orderedWords = new List<string>();\n
    \       List<int> orderedCount = new List<int>();\n\n        foreach (string word
    in words) {\n            int count = 0;\n            foreach (char c in word)
    {\n                count++;\n            }\n\n            orderedWords.Add(word);\n
    \           orderedCount.Add(count);\n        }\n\n        for (int i = 1; i <
    orderedWords.Count; i++) {\n            if (orderedCount.ElementAt<int>(i) > orderedCount.ElementAt<int>(i
    - 1)) {\n                string tmp = orderedWords[i - 1].ToUpper();\n                orderedWords[i
    - 1] = orderedWords[i].ToUpper();\n                orderedWords[i] = tmp;\n            }\n
    \       }\n\n        foreach (string s in orderedWords) {\n            if (orderedCount.ElementAt<int>(orderedWords.Count
    - 1) > orderedCount.ElementAt<int>(0)) {\n                string tmp = s.ToUpper();\n
    \               orderedWords[orderedWords.Count - 1] = orderedWords[0].ToUpper();\n
    \               orderedWords[0] = tmp;\n            }\n        }\n\n        return
    orderedWords[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Collection was
    modified; enumeration operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare
    () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext
    () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax (System.Collections.Generic.List`1[T]
    words) [0x00151] in <48859e1a57a24b818d7dfe5705997d46>:0 \n  at Problem.Main (System.String[]
    args) [0x00024] in <48859e1a57a24b818d7dfe5705997d46>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.InvalidOperationException: Collection was modified; enumeration
    operation may not execute.\n  at System.Collections.Generic.List`1+Enumerator[T].MoveNextRare
    () [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1+Enumerator[T].MoveNext
    () [0x0004a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax (System.Collections.Generic.List`1[T]
    words) [0x00151] in <48859e1a57a24b818d7dfe5705997d46>:0 \n  at Problem.Main (System.String[]
    args) [0x00024] in <48859e1a57a24b818d7dfe5705997d46>:0 \n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // TODO: Write your solution here\n        string temp = words[0]; //
    init temp\n        int tempMaxNum = 0;\n        int index = 0;\n        foreach
    (var item in words) {\n            // If there is already a same char number\n
    \           if (temp.Count() == item.Count()) {\n                if (tempMaxNum
    < item.Count()) {\n                    tempMaxNum = item.Count();\n                    temp
    = item;\n                    index = words.IndexOf(temp);\n                }\n
    \           }\n        }\n        return temp;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfbb07d5f9740cbb5cd209a5f342971>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfbb07d5f9740cbb5cd209a5f342971>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string maxString = null;\n        foreach (var
    word in words) {\n            var c = word.Length;\n            if (c > maxCount)
    {\n                maxCount = c;\n                maxString = word;\n            }
    else if (c == maxCount) {\n                maxString = (maxString == word) ? maxString
    : word;\n            }\n        }\n        return maxString;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9f987537cad4fb0b10ec545fa84502e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9f987537cad4fb0b10ec545fa84502e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var chars = new HashSet<char>();\n        foreach (var item in words)
    {\n            foreach (char letter in item) {\n                chars.Add(letter);\n
    \           }\n        }\n        return words.OrderBy(x => x.Distinct().Count()).FirstOrDefault();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0375aed5bcc947128f7a8e7f381f8af0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0375aed5bcc947128f7a8e7f381f8af0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int max = 0;\n        int count = 0;\n        string temp = \"\";\n        for
    (int i = 0; i < words.Count; i++) {\n            count = 1;\n            temp
    = words[i].ToLower();\n            for (int j = 0; j < temp.Length; j++) {\n                if
    (temp.Length - 1 == j) {\n                    if (temp.Contains(words[i]) == false)
    {\n                        count = 1;\n                    }\n                    else
    {\n                        count++;\n                    }\n                }\n
    \               else {\n                    if (temp.Contains(words[i]) == false
    && count == 1) {\n                        count++;\n                    }\n                    else
    if (temp.Contains(words[i]) == false) {\n                        count = 1;\n
    \                   }\n                    else {\n                        if
    (count > max) {\n                            max = count;\n                        }\n
    \                   }\n                }\n            }\n        }\n        return
    max > count ? words[max] : temp;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95a1e0d9e1dc49ba8397bd4af1af9712>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95a1e0d9e1dc49ba8397bd4af1af9712>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<string,int> wordCounts = new Dictionary<string,int>();\n        foreach
    (string word in words) {\n            char[] c = word.ToCharArray();\n            foreach
    (char ch in c) wordCounts[ch] = (wordCounts[ch] ?? 0) + 1;\n        }\n        int[]
    counts = wordCounts.Select(kv => kv.Value).ToArray();\n        int maxIndex =
    0;\n        for (int i = 1; i < counts.Length; i++)\n            if (counts[i]
    > counts[maxIndex])\n                maxIndex = i;\n        if (maxIndex < counts.Length)\n
    \           return words[maxIndex];\n        else\n            return words[0];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa9cv0kzb.cs(23,47): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpa9cv0kzb.cs(23,65): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int max = 0;\n        int c = 0;\n        foreach (string s in words)
    {\n            int m = s.Length;\n            if (m > max) {\n                max
    = m;\n                c = 1;\n            } else if (m == max) {\n                c++;\n
    \           }\n        }\n        if (c > words[0][words[0].Length - 1].ToString().Count())
    {\n            return words[0];\n        }\n        return words[words.FindIndex(w
    => w.Length == max)].OrderBy(w => w.First()).First();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0t9ae4bp.cs(34,76): error CS1061: ''char'' does not contain a definition
    for ''First'' and no accessible extension method ''First'' accepting a first argument
    of type ''char'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var uniqueCharacters = new HashSet<char>();\n        \n        foreach
    (string word in words) {\n            foreach (char c in word) {\n                if
    (uniqueCharacters.Add(c)) {\n                    uniqueCharacters.Remove(c);\n
    \                   break;\n                }\n            }\n        }\n        \n
    \       string max = string.Empty;\n        \n        if (uniqueCharacters.Count
    == 0) {\n            max = words.First();\n        }\n        \n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9e67e5659584e6eaedd6cd6411b7abb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9e67e5659584e6eaedd6cd6411b7abb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Your code here!\n        var sorted = new List<string>(words);\n        sorted.Sort();\n
    \       var uniques = sorted.GroupBy(c => c).Where(g => g.Count() == sorted.Count()).ToList();\n
    \       var max = (uniques.Count > 0) ? uniques.OrderBy(g => g.Key).First().Key
    : null;\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00029] in <e17511841a5b401394c92219c6ce1d25>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00029] in <e17511841a5b401394c92219c6ce1d25>:0
    \n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var uniqueChars = new HashSet<char>();\n        foreach (var word in words)
    {\n            foreach (var letter in word) {\n                if (!uniqueChars.Contains(letter))\n
    \                   uniqueChars.Add(letter);\n            }\n        }\n        return
    words.OrderBy(l => uniqueChars.Count).FirstOrDefault();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa6f436df2294690b24e9c0e0314a5b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa6f436df2294690b24e9c0e0314a5b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Write your code here.\n        var result = new Dictionary<string,
    int>();\n        foreach (var word in words) {\n            foreach (var c in
    word) {\n                if (!result.ContainsKey(c))\n                    result[c]
    = 1;\n                else\n                    result[c]++;\n            }\n
    \       }\n\n        var sorted = result.OrderByDescending(x => x.Value);\n        return
    sorted.First().Key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9muqiqqn.cs(24,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp9muqiqqn.cs(25,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp9muqiqqn.cs(27,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976425
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string ret = null;\n        int max = 0;\n        foreach (string w in
    words) {\n            int count = 0;\n            foreach (char c in w.ToCharArray())
    {\n                count++;\n            }\n            if (count > max) {\n                max
    = count;\n                ret = w;\n            }\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da0b01f3995348ba989144c51fcacc6e>:0
    \n"
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        int maxLength = 0;\n        string maxValue
    = null;\n        foreach (string s in words) {\n            int count = 0;\n            int
    length = s.Length;\n            for (int i = 0; i < length; i++) {\n                if
    (s[i] == 'a') {\n                    count++;\n                }\n            }\n
    \           if (count > maxCount) {\n                maxCount = count;\n                maxLength
    = length;\n                maxValue = s;\n            }\n        }\n        Console.WriteLine($\"({maxValue})\");\n
    \       return maxValue;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <370abbf0998f4ea1a265d764295013de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <370abbf0998f4ea1a265d764295013de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: '(name)

    (name)

    (aaaaaaa)

    (abc)

    (play)

    (are)

    (are)

    (a)

    ()

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var wordCount = new HashSet<int>();\n        var max = new List<string>();\n
    \       int wordMaxCount = 0;\n        var index = 0;\n        foreach (var word
    in words) {\n            wordCount.Add(word.Length);\n            if (max.Count
    > index) {\n                wordMaxCount = Math.Max(wordMaxCount, wordCount.Count);\n
    \           }\n            if (wordCount.Count == wordMaxCount) {\n                max.Add(word);\n
    \           }\n            wordCount.Remove(word.Length);\n        }\n        if
    (wordCount.Count > wordMaxCount) {\n            max.Add(words[max.Count - 1]);\n
    \       }\n        return max[max.Count - 1];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x000c2] in <72210569316d43a3acb12c808a6a9ce0>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <72210569316d43a3acb12c808a6a9ce0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x000c2] in <72210569316d43a3acb12c808a6a9ce0>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <72210569316d43a3acb12c808a6a9ce0>:0
    \n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string max = string.Empty;\n        string
    max = string.Empty;\n        int maxLength = -1;\n        foreach (string s in
    words) {\n            int count = 0;\n            foreach (char c in s.ToCharArray())
    {\n                if (s.Contains(c))\n                    count++;\n            }\n
    \           if (count > maxCount) {\n                maxCount = count;\n                max
    = s;\n                maxLength = s.Length;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm1w1xu2i.cs(22,16): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       ArrayList al = new ArrayList();\n        foreach(string word in words)\n
    \       {\n            char[] charArray = word.ToCharArray();\n            ArrayList
    uniqueList = new ArrayList();\n            int uniqueCount = 0;\n            foreach(char
    c in charArray)\n            {\n                if (uniqueList.Contains(c))\n
    \                   uniqueCount++;\n                else\n                {\n
    \                   uniqueList.Add(c);\n                    uniqueCount++;\n                }\n
    \           }\n            int maxCount = uniqueCount;\n            string tempWord
    = word;\n            foreach (char c in charArray)\n            {\n                uniqueList.Remove(c);\n
    \               if (uniqueCount == 0)\n                {\n                    uniqueCount--;\n
    \               }\n                if (maxCount > uniqueCount)\n                {\n
    \                   maxCount = uniqueCount;\n                    tempWord = word;\n
    \               }\n            }\n            al.Add(tempWord);\n        }\n        string
    maxWord = FindMax(al);\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwszuv1zo.cs(20,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpwszuv1zo.cs(20,28): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpwszuv1zo.cs(24,13): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpwszuv1zo.cs(24,40): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var dict = words.GroupBy(w => w).ToDictionary(grp => grp.Key, grp => grp.Count());\n
    \       IEnumerable<string> keys = dict.Keys.OrderBy(k => k).Take(1);\n        return
    keys[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpketjymi3.cs(22,16): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IEnumerable<string>''

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        int uniqueCount = 0;\n        string word =
    \"\";\n        foreach(string word in words) {\n            uniqueCount += 1;\n
    \           int c = word.Length;\n            if(c == uniqueCount) {\n                maxCount
    += 1;\n            }\n        }\n        if(uniqueCount > maxCount) {\n            word
    = string.Join(\"\", words.OrderBy(x => x));\n        }\n        return word;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxaesorza.cs(23,24): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] uniqueChars = new char[128];\n        int[] uniqueCount = new int[128];\n
    \       string maxWord = null;\n        int maxCount = 0;\n        for (int i
    = 0; i < words.Count; i++) {\n            foreach (char c in words[i].ToCharArray())
    {\n                if (!uniqueChars[c]) {\n                    uniqueChars[c]
    = true;\n                    uniqueCount[c] = 1;\n                }\n                else
    {\n                    uniqueCount[c]++;\n                }\n            }\n            if
    (uniqueCount[char.MaxValue] > maxCount) {\n                maxCount = uniqueCount[char.MaxValue];\n
    \               maxWord = words[i];\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5umu84ev.cs(26,21): error CS0023: Operator ''!'' cannot be applied to
    operand of type ''char''

    /tmp/tmp5umu84ev.cs(27,38): error CS0029: Cannot implicitly convert type ''bool''
    to ''char''

    '
  timestamp: 1659976425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string maxWord = String.Empty;\n        int[] count = new int[26];\n        foreach
    (string w in words) {\n            for (int i = 0; i < w.Length; i++) {\n                count[(int)w[i]]
    += 1;\n            }\n        }\n        int maxCount = 0;\n        foreach (int
    c in count) {\n            maxCount = Math.Max(maxCount, c);\n        }\n        List<string>
    maxWords = new List<string>();\n        foreach (string w in words) {\n            int
    c = count[(int)w[w.Length - 1]];\n            if (c > maxCount) {\n                break;\n
    \           }\n            string w2 = new string(w.ToCharArray(), 0, w.Length
    - 1);\n            while (w2[0] == w2[1]) {\n                w2 = new string(w.ToCharArray(),
    1, w.Length - 1);\n            }\n            int i = w2.IndexOf('\\0');\n            if
    (i != -1) {\n                w2 = new string(w.ToCharArray(), i + 1, w.Length
    - i - 1);\n            }\n            while (w2[0] == w2[1]) {\n                w2
    = new string(w.ToCharArray(), 1, w.Length - 1);\n            }\n            if
    (c == maxCount || w2.StartsWith(maxWord, StringComparison.OrdinalIgnoreCase))
    {\n                maxWords.Add(w2);\n            }\n        }\n        if (maxWords.Count
    > 0) {\n            int maxCount = maxWords.Max(w => w.Count(w => w.ToCharArray().Any(c=>(int)c
    < 0 || c > 25)));\n            if (maxCount > 1) {\n                string maxWord
    = maxWords.OrderBy(w => w.Count(w => w.ToCharArray().Any(c => (int)c < 0 || c
    > 25))).First();\n                return maxWord;\n            }\n            else\n
    \               return maxWords[0];\n        }\n        else\n            return
    String.Empty;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf4g8qkrg.cs(53,17): error CS0136: A local or parameter named ''maxCount''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpf4g8qkrg.cs(53,61): error CS1061: ''char'' does not contain a definition
    for ''ToCharArray'' and no accessible extension method ''ToCharArray'' accepting
    a first argument of type ''char'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpf4g8qkrg.cs(55,24): error CS0136: A local or parameter named ''maxWord''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpf4g8qkrg.cs(55,71): error CS1061: ''char'' does not contain a definition
    for ''ToCharArray'' and no accessible extension method ''ToCharArray'' accepting
    a first argument of type ''char'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int counter = 0;\n        int max = 0;\n        int maxCount = 0;\n        string
    res = \"\";\n        foreach(var w in words) {\n            counter += w.Distinct().Count();\n
    \           if(counter > maxCount) {\n                max = counter;\n                maxCount
    = counter;\n                res = w;\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fe7e522dcf64f8a9cf8be0c9dc30bbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fe7e522dcf64f8a9cf8be0c9dc30bbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string currentMax = \"\";\n        int maxCount = 0;\n        foreach(string
    word in words) {\n            foreach(char c in word) {\n                if(!currentMax.Contains(c))
    {\n                    currentMax += c;\n                    maxCount = 1;\n                }\n
    \               else {\n                    if(currentMax.Contains(c)) {\n                        maxCount++;\n
    \                   }\n                    if(maxCount > currentMax.Count(c))
    {\n                        currentMax += c;\n                        maxCount
    = 1;\n                    }\n                }\n            }\n        }\n        return
    currentMax;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprgcgfh_l.cs(32,52): error CS1503: Argument 2: cannot convert from ''char''
    to ''System.Func<char, bool>''

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null || words.Count == 0) throw new ArgumentException(\"List
    cannot be null or empty\");\n        var maxCounts = new Dictionary<char, int>(words.Count);\n
    \       foreach (var word in words)\n            foreach (var c in word)\n                if
    (!maxCounts.ContainsKey(c))\n                    maxCounts[c] = 0;\n                else
    {\n                    maxCounts[c] = maxCounts[c] + 1;\n                }\n        var
    maxCount = new char[maxCounts.Count];\n        int counter = 0;\n        foreach
    (var pair in maxCounts)\n            if (pair.Value > 0)\n                maxCount[counter++]
    = pair.Key;\n        if (maxCount.Length == 0)\n            return string.Empty;\n
    \       if (maxCount.Length > 1)\n            Array.Sort(maxCount, (x, y) => Array.IndexOf(maxCount,
    y) - Array.IndexOf(maxCount, x));\n        return maxCount[0];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp28ieklht.cs(38,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // write your code\n        string temp = \"\";\n        char max = words[0].Length;\n
    \       foreach (string word in words) {\n            for (int i = 0; i < word.Length;
    i++) {\n                if (word[i] == max) {\n                    temp = word;\n
    \                   break;\n                }\n            }\n        }\n        return
    temp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpolux7088.cs(22,20): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Find the largest string in the list of strings\n        string maxWord
    = null;\n        int maxCount = 0;\n        foreach (string word in words) {\n
    \           int count = GetUniqueChars(word).Count();\n            if (count >
    maxCount) {\n                maxCount = count;\n                maxWord = word;\n
    \           }\n        }\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpehq2hrko.cs(24,25): error CS0103: The name ''GetUniqueChars'' does not
    exist in the current context

    '
  timestamp: 1659976426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var chars = new HashSet<char>();\n        foreach (var word in words)
    {\n            foreach (var letter in word)\n                chars.Add(letter);\n
    \       }\n        return chars.Max().ToString();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52f3413d38f34343902bf18b33160c3b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52f3413d38f34343902bf18b33160c3b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var result = new Dictionary<string, int>();\n        foreach(var s in
    words) {\n            foreach(var c in s)\n                if (!result.ContainsKey(c))\n
    \                   result.Add(c, 0);\n                result[c]++;\n        }\n
    \       foreach(var kvp in result) {\n            if(kvp.Value > result.Max())\n
    \               return kvp.Key;\n        }\n        return words[0];\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpquzuz0mz.cs(23,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpquzuz0mz.cs(24,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpquzuz0mz.cs(25,24): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmpquzuz0mz.cs(28,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''KeyValuePair<string, int>''

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int max = 0;\n        var result = words.FirstOrDefault();\n        foreach
    (string word in words) {\n            if (result.Length == word.Length)\n                max
    = Math.Max(max, word.Distinct().Count());\n            else if (result.Length
    < word.Length)\n                max = Math.Max(max, word.Length);\n            if
    (result.Length == word.Length)\n                result += \"*\";\n        }\n
    \       return result.Substring(0, Math.Max(0, max));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x000aa]
    in <30603dffe7db4371a962ee0ecc3975ad>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <30603dffe7db4371a962ee0ecc3975ad>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index and length must refer to a location
    within the string.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x000aa]
    in <30603dffe7db4371a962ee0ecc3975ad>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <30603dffe7db4371a962ee0ecc3975ad>:0 \n"
  stdout: ''
  timestamp: 1659976426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string max = \"empty\";\n        foreach (string word in words) {\n            int
    maxCount = 1;\n            foreach (char c in word.ToCharArray()) {\n                int
    count = words.Count(ws => ws == word && ws.Contains(c.ToString()) == true);\n
    \               if (count > maxCount) {\n                    maxCount = count;\n
    \                   max = word;\n                }\n            }\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f16d3fa10d94977999821da325823ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f16d3fa10d94977999821da325823ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       StringBuilder sb = new StringBuilder();\n        List<string> wordList
    = new List<string>();\n        foreach (string word in words) {\n            if
    (wordList.Count > 0) {\n                List<string> list = new List<string>();\n
    \               foreach (string value in wordList) {\n                    if (word.ToCharArray().Distinct().Count()
    > value.ToCharArray().Distinct().Count()) {\n                        list.Add(value);\n
    \                   }\n                }\n                foreach (string value
    in list) {\n                    sb.Append(value);\n                    sb.Append('
    ');\n                }\n                wordList.Clear();\n            } else
    {\n                wordList.Add(word);\n            }\n        }\n        if (wordList.Count
    > 0) {\n            foreach (string value in wordList) {\n                sb.Append(value);\n
    \               sb.Append(' ');\n            }\n        }\n        return sb.ToString().TrimEnd('
    ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41dd3db7a1ad4c8581f309322ddf35cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <41dd3db7a1ad4c8581f309322ddf35cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Step 1: Use a dictionary of words and number of characters for each
    word\n        Dictionary<string, int> wordDictionary = new Dictionary<string,
    int>();\n        foreach (string word in words) {\n            int chars = word.Length;\n
    \           if (wordDictionary.ContainsKey(word)) {\n                wordDictionary[word]
    = wordDictionary[word] + chars;\n            } else {\n                wordDictionary.Add(word,
    chars);\n            }\n        }\n\n        // Step 2: Sort the dictionary by
    count\n        List<KeyValuePair<string, int>> sortedWordDictionary = new List<KeyValuePair<string,
    int>>(wordDictionary);\n        sortedWordDictionary.Sort();\n\n        // Step
    3: Return the word with highest count\n        return sortedWordDictionary.Last().Key;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Failed to compare
    two elements in the array. ---> System.ArgumentException: At least one object
    must implement IComparable.\n  at System.Collections.Comparer.Compare (System.Object
    a, System.Object b) [0x00057] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ObjectComparer`1[T].Compare
    (T x, T y) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].SwapIfGreater
    (T[] keys, System.Comparison`1[T] comparer, System.Int32 a, System.Int32 b) [0x00004]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].IntroSort
    (T[] keys, System.Int32 lo, System.Int32 hi, System.Int32 depthLimit, System.Comparison`1[T]
    comparer) [0x00028] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].IntrospectiveSort
    (T[] keys, System.Int32 left, System.Int32 length, System.Comparison`1[T] comparer)
    [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].Sort
    (T[] keys, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1[T]
    comparer) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n   --- End of inner
    exception stack trace ---\n  at System.Collections.Generic.ArraySortHelper`1[T].Sort
    (T[] keys, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1[T]
    comparer) [0x00039] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Array.Sort[T]
    (T[] array, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1[T]
    comparer) [0x0004d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1[T].Sort
    (System.Int32 index, System.Int32 count, System.Collections.Generic.IComparer`1[T]
    comparer) [0x0002b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.List`1[T].Sort
    () [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax (System.Collections.Generic.List`1["
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string max = null;\n        int count = 0;\n        foreach(var word in
    words)\n        {\n            foreach(var character in word)\n            {\n
    \               if(max != null && max == character) count++;\n                else
    if((character == max) && (count > count)) max = character;\n            }\n        }\n
    \       if(max != null) return max;\n        else return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygy5ez4v.cs(26,35): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpygy5ez4v.cs(27,26): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpygy5ez4v.cs(27,70): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpygy5ez4v.cs(27,48): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] charArray = new char[words.Count];\n        int count = new int[words.Count];\n\n
    \       foreach (string s in words) {\n            foreach (char c in s) {\n                if
    (!Char.IsLetter(c)) {\n                    charArray[words.IndexOf(s)]--;\n                    count[words.IndexOf(s)]--;\n
    \                   return;\n                }\n\n                charArray[words.IndexOf(s)]++;\n
    \               count[words.IndexOf(s)]++;\n            }\n        }\n\n        int
    maxCount = count.Max();\n        for (int i = 0; i < words.length; i++) {\n            if
    (maxCount == count[i]) {\n                char temp = charArray[i];\n                charArray[i]
    = charArray[words.IndexOf(words[i])];\n                charArray[words.IndexOf(words[i])]
    = temp;\n            }\n        }\n        string result = new string(charArray);\n\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp61ult62_.cs(21,21): error CS0029: Cannot implicitly convert type ''int[]''
    to ''int''

    /tmp/tmp61ult62_.cs(27,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmp61ult62_.cs(28,21): error CS0126: An object of a type convertible to ''string''
    is required

    /tmp/tmp61ult62_.cs(32,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmp61ult62_.cs(36,24): error CS1929: ''int'' does not contain a definition
    for ''Max'' and the best extension method overload ''ParallelEnumerable.Max(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmp61ult62_.cs(37,35): error CS1061: ''List<string>'' does not contain a
    definition for ''length'' and no accessible extension method ''length'' accepting
    a first argument of type ''List<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmp61ult62_.cs(38,29): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var res = new List<char>();\n        var counts = new Dictionary<char,
    int>();\n        foreach (var word in words) {\n            foreach (var c in
    word) {\n                if (!counts.ContainsKey(c)) {\n                    counts.Add(c,
    1);\n                }\n                else {\n                    counts[c]
    = counts[c] + 1;\n                }\n            }\n        }\n        foreach
    (var c in counts) {\n            if (counts[c] > 1) {\n                res.Add(c);\n
    \           }\n        }\n        var max = new string(res.ToArray());\n        if
    (words.Count > 1) {\n            max = words[0];\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3697o79e.cs(33,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<char,
    int>'' to ''char''

    /tmp/tmp3697o79e.cs(34,25): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<char,
    int>'' to ''char''

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var characters = new List<char>();\n        var maxCount = 0;\n        foreach
    (var word in words) {\n            var uniqueCount = word.Distinct().Count();\n
    \           if (uniqueCount > maxCount) {\n                maxCount = uniqueCount;\n
    \           }\n            characters.AddRange(word);\n        }\n        if (maxCount
    == 0) {\n            return \"empty\";\n        }\n        var maxCount = characters.Count();\n
    \       if (maxCount > maxUnique) {\n            maxUnique = maxCount;\n        }\n
    \       characters.Sort();\n        foreach (var character in characters) {\n
    \           Console.WriteLine(character);\n        }\n        var result = words.First(word
    => characters.Contains(word[0]));\n        Console.WriteLine(result);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_5pw_m6k.cs(32,13): error CS0128: A local variable or function named ''maxCount''
    is already defined in this scope

    /tmp/tmp_5pw_m6k.cs(33,24): error CS0103: The name ''maxUnique'' does not exist
    in the current context

    /tmp/tmp_5pw_m6k.cs(34,13): error CS0103: The name ''maxUnique'' does not exist
    in the current context

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<string> uniqueWords = new List<string>();\n        foreach (string
    word in words) {\n            foreach (char c in word) {\n                uniqueWords.Add(new
    string(new char[] { c }));\n            }\n        }\n        Array.Sort(uniqueWords);\n
    \       int maxCharCount = 0;\n        int curCount = uniqueWords.Count;\n        while
    (curCount > 0) {\n            if (maxCharCount < uniqueWords.Count) {\n                maxCharCount
    = uniqueWords.Count;\n            }\n            if (maxCharCount == curCount)
    {\n                return uniqueWords[0];\n            }\n            curCount
    = curCount - 1;\n        }\n        return \"\";\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1j81psby.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''System.Array''

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var d = new Dictionary<string, int>();\n        int max = words.Count;\n
    \       foreach (string str in words) {\n            foreach (char c in str) {\n
    \               if (d.ContainsKey(c)) {\n                    int count = d[c];\n
    \                   if (count > max) {\n                        max = count;\n
    \                   }\n                }\n                else {\n                    d[c]
    = 1;\n                }\n            }\n        }\n        foreach (KeyValuePair<string,
    int> kvp in d) {\n            kvp.Value = kvp.Value < max ? kvp.Value : max;\n
    \       }\n        string maxKey = d.Keys.OrderByDescending(s => s[s.Length]).First();\n
    \       return maxKey == d.Keys.First() ? maxKey : maxKey.Substring(0, maxKey.Length
    - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnfd_q9w9.cs(24,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnfd_q9w9.cs(25,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnfd_q9w9.cs(31,23): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnfd_q9w9.cs(36,13): error CS0200: Property or indexer ''KeyValuePair<string,
    int>.Value'' cannot be assigned to -- it is read only

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string maxString = null;\n        string maxCountString = null;\n        char
    charCounter = ' ';\n        int maxCount = 1;\n\n        foreach (string word
    in words) {\n            charCounter = ' ';\n            foreach (char ch in word)
    {\n                charCounter += ch;\n            }\n            charCounter
    = charCounter.ToUpperInvariant();\n\n            int count = charCounter.Count(c
    => c == 'A') +\n                         charCounter.Count(c => c == 'B') +\n
    \                        charCounter.Count(c => c == 'C') +\n                         charCounter.Count(c
    => c == 'D') +\n                         charCounter.Count(c => c == 'E') +\n
    \                        charCounter.Count(c => c == 'F') +\n                         charCounter.Count(c
    => c == 'G') +\n                         charCounter.Count(c => c == 'H') +\n
    \                        charCounter.Count(c => c == 'I') +\n                         charCounter.Count(c
    => c == 'J') +\n                         charCounter.Count(c => c == 'K') +\n
    \                        charCounter.Count(c => c == 'L') +\n                         charCounter.Count(c
    => c == 'M') +\n                         charCounter.Count(c => c == 'N') +\n
    \                        charCounter.Count(c => c == 'O') +\n                         charCounter.Count(c
    => c == 'P') +\n                         charCounter.Count(c => c == 'Q') +\n
    \                        charCounter.Count(c => c == 'R') +\n                         charCounter.Count(c
    => c == 'S') +\n                         charCounter.Count(c => c == 'T') +\n
    \                        charCounter.Count(c => c == 'U') +\n                         charCounter.Count(c
    => c == 'V') +\n                         charCounter.Count(c => c == 'W') +\n
    \                        charCounter.Count(c => c == 'X') +\n                         charCounter.Count(c
    => c == 'Y') +\n                         charCounter.Count(c => c == 'Z');\n            if
    (count > maxCount) {\n                maxCount = count;\n                maxString
    = word;\n            }\n        }\n        if (maxCount > 1) {\n            maxString
    = maxString.Replace(maxString, maxCount.ToString() + \" \" + (maxCount - 1).ToString());\n
    \       }\n\n        if (maxCount > 1) {\n            foreach (string word in
    words) {\n                string newWord = word;\n                string maxString2
    = null;\n                int maxCount2 = 1;\n\n                foreach (char ch
    in word) {\n                    charCounter = ' ';\n                    \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipbh0kbm.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpipbh0kbm.cs(90,2): error CS1513: } expected

    '
  timestamp: 1659976426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Get the number of unique characters.\n        var uniqueCharacters
    = new Dictionary<char, int>();\n        foreach(var word in words) {\n            foreach(var
    character in word)\n                if(!uniqueCharacters.ContainsKey(character))\n
    \                   uniqueCharacters.Add(character, 1);\n        }\n        \n
    \       // Get the number of characters in lexicographical order.\n        var
    characters = uniqueCharacters.Keys.ToList();\n        characters.Sort();\n        \n
    \       // Get the number of words with maximum unique characters (in lexicographical
    order).\n        var maxCount = 0;\n        var maxWord = \"\";\n        foreach(var
    word in words) {\n            var count = 0;\n            foreach(var character
    in word) {\n                if(uniqueCharacters[character] >= count)\n                    count++;\n
    \           }\n            if(count == maxCount) {\n                maxCount =
    count;\n                maxWord = word;\n            }\n        }\n        return
    maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <605a8703c8694cc6902bcba1daa65cb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <605a8703c8694cc6902bcba1daa65cb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Your code goes here\n        string maxWord = String.Empty;\n        long
    maxUniqueChars = -1;\n        string maxWordIndex = 0;\n        foreach (string
    word in words) {\n            long uniqueChars = 0;\n            foreach (char
    c in word) {\n                if (char.IsLetter(c)) {\n                    uniqueChars++;\n
    \               }\n            }\n            if (maxUniqueChars < uniqueChars)
    {\n                maxUniqueChars = uniqueChars;\n                maxWord = word;\n
    \               maxWordIndex = words[words.FindIndex(x => x == word)];\n            }\n
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvunbxrvp.cs(23,31): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null || words.Count == 0) {\n            throw new ArgumentException(\"The
    argument words cannot be null or empty.\");\n        }\n\n        string temp
    = words[0];\n        int count = 1;\n        for (int i = 1; i < words.Count;
    i++) {\n            temp = FindMax(words[i], temp);\n            count++;\n        }\n\n
    \       return temp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupb0k85s.cs(27,20): error CS1501: No overload for method ''FindMax'' takes
    2 arguments

    '
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string maxWord = null;\n        foreach (string
    word in words) {\n            int count = 0;\n            foreach (char c in word)
    {\n                if (count > maxCount) {\n                    maxCount = count;\n
    \                   maxWord = word;\n                }\n                count++;\n
    \           }\n        }\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b86d14733b37404497052fca416b72df>:0
    \n\nUnhandled Exception:\nSystem.NullReferenceException: Object reference not
    set to an instance of an object\n  at Problem.Main (System.String[] args) [0x00201]
    in <b86d14733b37404497052fca416b72df>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException:
    Object reference not set to an instance of an object\n  at Problem.Main (System.String[]
    args) [0x00201] in <b86d14733b37404497052fca416b72df>:0 \n"
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count == 0)\n            return string.Empty;\n        if (words.Count
    == 1)\n            return words[0];\n        var chars = new HashSet<char>();\n
    \       string currentChars = string.Empty;\n        for (int i = 0; i < words.Count;
    i++) {\n            string s = words[i];\n            for (int j = 0; j < s.Length;
    j++) {\n                char c = s[j];\n                if (!chars.Contains(c))
    {\n                    chars.Add(c);\n                    currentChars += c;\n
    \               }\n            }\n        }\n        int maxCount = 0;\n        int
    index = -1;\n        for (int i = 0; i < words.Count; i++) {\n            string
    s = words[i];\n            for (int j = 0; j < s.Length; j++) {\n                char
    c = s[j];\n                if (chars.Contains(c)) {\n                    maxCount++;\n
    \                   if (maxCount > index) index = maxCount;\n                }\n
    \           }\n        }\n        if (index == words.Count - 1) return words[words.Count
    - 1];\n        return words[index];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x00156] in <5511e21d4c0045bbb12d2ae75369ffed>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <5511e21d4c0045bbb12d2ae75369ffed>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x00156] in <5511e21d4c0045bbb12d2ae75369ffed>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <5511e21d4c0045bbb12d2ae75369ffed>:0
    \n"
  stdout: ''
  timestamp: 1659976426
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Your code here...\n        return words.GroupBy(w=>w.Length).OrderByDescending(g=>g.Count()).First().Key;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa2ag2p_z.cs(21,16): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659976426
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string maxWord = null;\n        foreach (var
    word in words) {\n            var count = word.Count();\n            if (count
    > maxCount) {\n                maxCount = count;\n                maxWord = word;\n
    \           }\n        }\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4fd95aae51c64d469e6e69c03395f9f6>:0
    \n"
  stdout: ''
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count == 0)\n            throw new ArgumentException(\"List
    of words cannot be empty\");\n        \n        string currentMax = string.Empty;\n
    \       string currentChars = string.Empty;\n        int currentCharCount = 1;\n
    \       foreach (string word in words) {\n            currentChars += word;\n
    \           int uniqueCharCount = currentChars.Distinct().Count();\n            if
    (uniqueCharCount > currentCharCount) {\n                currentCharCount = uniqueCharCount;\n
    \               currentMax = word;\n            }\n        }\n        if (currentMax.Length
    > currentChars.Length)\n            currentMax = currentMax.Substring(currentChars.Length);\n
    \       return currentMax;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74df2ad37792423fb576b80b9b32a196>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74df2ad37792423fb576b80b9b32a196>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Your code goes here\n        var sorted = words.OrderByDescending(x
    => x.Length).ThenBy(x => x);\n        return sorted.FirstOrDefault();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56bec574926145579e1d79c0f9aeb397>:0
    \n"
  stdout: ''
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var unique = words.Select(x => x.ToCharArray().Distinct().Count() ).OrderByDescending(x
    => x).First();\n        if (unique.Equals(words.Select(x => x.ToCharArray().Distinct().Count()).Max()))\n
    \           return words.OrderByDescending(x => x).First();\n        return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1863a80f6b64f2dbe24d042b69daa7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1863a80f6b64f2dbe24d042b69daa7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       List<char> chars = new List<char>();\n        int maxCount = 0;\n        string
    maxWord = \"\";\n        foreach (string word in words) {\n            int count
    = 1;\n            foreach (char c in word) {\n                if (!chars.Contains(c))
    {\n                    chars.Add(c);\n                    count++;\n                }\n
    \           }\n            if (count > maxCount) {\n                maxCount =
    count;\n                maxWord = word;\n            }\n        }\n        if
    (maxCount == 1) {\n            return maxWord;\n        }\n        List<string>
    sortedWords = new List<string>();\n        foreach (string word in words) {\n
    \           int count = 1;\n            foreach (char c in word) {\n                if
    (!chars.Contains(c)) {\n                    chars.Add(c);\n                    count++;\n
    \               }\n            }\n            if (count == maxCount) {\n                sortedWords.Add(word);\n
    \           }\n        }\n        if (sortedWords.Count == 1) {\n            return
    sortedWords[0];\n        }\n        string min = sortedWords[0];\n        for
    (int i = 1; i < sortedWords.Count; i++) {\n            if (sortedWords[i].Length
    < min.Length) {\n                min = sortedWords[i];\n            }\n        }\n
    \       return min;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x00166] in <31c0cab69ea54babb969867765809adc>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <31c0cab69ea54babb969867765809adc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x00166] in <31c0cab69ea54babb969867765809adc>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <31c0cab69ea54babb969867765809adc>:0
    \n"
  stdout: ''
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var d = new Dictionary<char, int>();\n        foreach (var word in words)
    {\n            foreach (var c in word)\n                d[c] =\n                    d.ContainsKey(c)
    ? d[c] + 1 : 1;\n        }\n        var max = d.OrderByDescending(p => p.Value).FirstOrDefault();\n
    \       return max.Key == string.Empty ? \"empty\" : max.Key;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7q42m7jh.cs(27,16): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp7q42m7jh.cs(27,16): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''string'' and ''char''

    '
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null || words.Count == 0)\n            throw new ArgumentException(\"words\",
    \"List cannot be null or empty.\");\n        var result = (from word in words\n
    \                     orderby word.Count()\n                      select word).FirstOrDefault();\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <328ee7cbfeea40399fd5237782599e39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <328ee7cbfeea40399fd5237782599e39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int max = 0;\n        string word = null;\n        char maxChar = 0;\n
    \       int maxCharCount = 0;\n        foreach (string word in words) {\n            string
    temp = word;\n            int c = 0;\n            foreach (char c in word) {\n
    \               ++c;\n                if (c > maxCharCount) {\n                    maxCharCount
    = c;\n                    maxChar = c;\n                }\n            }\n            max
    = maxCharCount;\n            if (maxCharCount == max)\n                return
    word;\n        }\n        throw new Exception(\"no word has maximum number of
    unique characters\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd8rhcx7b.cs(22,24): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpd8rhcx7b.cs(24,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpd8rhcx7b.cs(27,27): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpd8rhcx7b.cs(28,19): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    /tmp/tmpd8rhcx7b.cs(26,17): warning CS0219: The variable ''c'' is assigned but
    its value is never used

    /tmp/tmpd8rhcx7b.cs(21,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string max = null;\n        foreach (string word in words) {\n            int
    n = word.Distinct().Count();\n            if (n > max && word.Length > 0)\n                max
    = word;\n        }\n        if (max != null)\n            max = max.Substring(0,
    max.Length - 1);\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_tg4z8u.cs(23,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       StringBuilder str = new StringBuilder();\n        string temp = string.Empty;\n
    \       long count = new long();\n        foreach(string w in words)\n        {\n
    \           temp.Length = 0;\n            temp = w;\n            foreach (string
    s in words)\n            {\n                if (temp.Length + s.Length > s.Length)\n
    \                   temp = s;\n            }\n            count++;\n            str.Append(temp.ToString());\n
    \           str.Append(\"\\r\\n\");\n        }\n        Console.WriteLine(str);\n
    \       long maxVal = count;\n        for(int i = 0; i < words.Count; i++)\n        {\n
    \           long count = GetUniqueCount(str.ToString());\n            if (count
    > maxVal)\n            {\n                maxVal = count;\n            }\n        }\n
    \       return maxVal.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpadw6qmi7.cs(25,13): error CS0200: Property or indexer ''string.Length''
    cannot be assigned to -- it is read only

    /tmp/tmpadw6qmi7.cs(40,18): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpadw6qmi7.cs(40,26): error CS0103: The name ''GetUniqueCount'' does not
    exist in the current context

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // TODO: Fill in the code here\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuf3iz6xl.cs(19,26): error CS0161: ''Problem.FindMax(List<string>)'': not
    all code paths return a value

    '
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCharacterCount = words.Max(w => w.Count());\n        string maxStringWithMostUniqueCharacters
    = String.Empty;\n        string maxStringWithMostUniqueCharactersMostRecentlyAddedToMax
    = String.Empty;\n        string recentStringWithMostUniqueCharactersMostRecentlyAddedToMax
    = String.Empty;\n        List<string> wordsWithMostUniqueCharacters = words.Where(w
    => w.Count() == maxCharacterCount).ToList();\n        if (wordsWithMostUniqueCharacters.Any())
    {\n            string mostRecentlyAddedToMax = wordsWithMostUniqueCharacters.Last();\n
    \           for (int i = 0; i < words.Count; i++) {\n                if (words[i].ToLower().Equals(mostRecentlyAddedToMax.ToLower()))
    {\n                    maxStringWithMostUniqueCharactersMostRecentlyAddedToMax
    = mostRecentlyAddedToMax;\n                    maxStringWithMostUniqueCharacters
    = mostRecentlyAddedToMax;\n                    recentStringWithMostUniqueCharactersMostRecentlyAddedToMax
    = words[i];\n                    break;\n                } else {\n                    for
    (int j = 0; j < wordsWithMostUniqueCharacters.Count; j++) {\n                        if
    (wordsWithMostUniqueCharacters[j].ToLower().Equals(words[i].ToLower())) {\n                            string
    mostRecentlyAddedToMax2 = wordsWithMostUniqueCharacters[j];\n                            for
    (int k = 0; k < wordsWithMostUniqueCharacters.Count; k++) {\n                                if
    (wordsWithMostUniqueCharacters[k].ToLower().Equals(mostRecentlyAddedToMax2.ToLower()))
    {\n                                    maxStringWithMostUniqueCharactersMostRecentlyAddedToMax
    = mostRecentlyAddedToMax2;\n                                    maxStringWithMostUniqueCharacters
    = mostRecentlyAddedToMax2;\n                                    recentStringWithMostUniqueCharactersMostRecentlyAddedToMax
    = words[i];\n                                    break;\n                                }\n
    \                           }\n                            break;\n                        }\n
    \                   }\n                }\n            }\n        }\n        return
    maxStringWithMostUniqueCharacters;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55610add72a248078c75c2932f4029ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55610add72a248078c75c2932f4029ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count == 0) {\n            throw new ArgumentException(\"The
    list must contain at least one string\");\n        }\n\n        int maxCount =
    words.Max(w => w.Length);\n        int maxIndex = words.IndexOf(words.Max(ww =>
    ww.Length));\n        if (maxIndex == -1) return \"\";\n\n        List<string>
    longestWords = new List<string>();\n\n        foreach (string w in words) {\n
    \           if (w.Length == maxCount) {\n                longestWords.Add(w);\n
    \           }\n        }\n        Debug.Assert(longestWords.Count > 1);\n\n        foreach
    (string w in longestWords) {\n            int uniqueChars = words.Where(w => w.Length
    == w.Count()).Distinct().Count();\n            if (uniqueChars == maxCount) {\n
    \               return w;\n            }\n        }\n\n        throw new ArgumentException(\"Unable
    to find word with max count of unique characters in list\");\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1j19x68v.cs(25,38): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // Create two dictionaries, one for counting and another for max count.\n
    \       Dictionary<string, int> count = new Dictionary<string, int>();\n        Dictionary<string,
    int> maxCount = new Dictionary<string, int>();\n\n        // Count the frequency
    of each word\n        for (int i = 0; i < words.Count; i++) {\n            string
    word = words[i];\n\n            // If word is not in the dictionary, add it\n
    \           if (count.ContainsKey(word) == false) {\n                count[word]
    = 1;\n            }\n            else {\n                // If word is in the
    dictionary, increment the count of that word\n                count[word]++;\n
    \           }\n        }\n\n        // Get the top most common word and its count\n
    \       string wordWithMostCharacters = \"\";\n        int maxCountWord = 0;\n
    \       for (int i = 0; i < words.Count; i++) {\n            string word = words[i];\n\n
    \           // Get the count for the word\n            int count = count[word];\n\n
    \           // If count is greater than max\n            if (count > maxCount)
    {\n                // Store the word and its count\n                maxCount =
    count;\n                maxCountWord = i;\n                wordWithMostCharacters
    = word;\n            }\n        }\n\n        // Return the top most common word
    and max count\n        if (maxCountWord > 0) {\n            return words[maxCountWord];\n
    \       }\n        else {\n            return wordWithMostCharacters;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpals6i_lm.cs(45,17): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpals6i_lm.cs(45,25): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpals6i_lm.cs(48,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''Dictionary<string, int>''

    /tmp/tmpals6i_lm.cs(50,28): error CS0029: Cannot implicitly convert type ''int''
    to ''System.Collections.Generic.Dictionary<string, int>''

    /tmp/tmpals6i_lm.cs(45,25): error CS0165: Use of unassigned local variable ''count''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       HashSet<string> uniques = new HashSet<string>();\n        foreach (string
    word in words) {\n            foreach (char c in word) {\n                if (!uniques.Contains(c))
    {\n                    uniques.Add(c);\n                }\n            }\n        }\n\n
    \       foreach (string word in words) {\n            if (uniques.Count == words.Count)
    {\n                return word;\n            }\n        }\n\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdcbp2uab.cs(23,39): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpdcbp2uab.cs(24,33): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char maxChar = words[0].ToCharArray().Max();\n        string maxWord =
    \"\";\n\n        for (int i = 1; i < words.Count; i++)\n        {\n            char
    currentChar = words[i].ToCharArray().Max();\n            if (currentChar > maxChar)\n
    \           {\n                maxChar = currentChar;\n                maxWord
    = words[i];\n            }\n        }\n\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74d620a914594da6a13349f793600fa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74d620a914594da6a13349f793600fa6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       HashSet<char> set = new HashSet<char>();\n        int maxUniqueCharacters
    = 0;\n        string wordWithMaxUniqueCharacters = string.Empty;\n        foreach
    (string word in words) {\n            char[] words = word.ToCharArray();\n            foreach
    (char character in words) {\n                if (set.Add(character)) {\n                    maxUniqueCharacters++;\n
    \               }\n            }\n            if (maxUniqueCharacters > wordWithMaxUniqueCharacters)
    {\n                wordWithMaxUniqueCharacters = word;\n            }\n            set.Clear();\n
    \       }\n        char[] wordsWithMaxUniqueCharacters = wordWithMaxUniqueCharacters.ToCharArray();\n
    \       Array.Sort(wordsWithMaxUniqueCharacters);\n        return wordWithMaxUniqueCharacters;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5aotz8fg.cs(24,20): error CS0136: A local or parameter named ''words''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp5aotz8fg.cs(30,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count == 0) return \"\";\n        // Use a dictionary to store
    number of occurrences of each character and sort using linq\n        var counts
    = words.GroupBy(w => w.ToCharArray())\n            .Select(g => new { \n                Key
    = g.Key,\n                Count = g.Count() \n            })\n            .OrderByDescending(o
    => o.Count)\n            .ToDictionary(o => o.Key.ToString(), o => o.Count);\n
    \       // Use a dictionary to store characters that appears the most frequently\n
    \       var mostFrequent = words.GroupBy(w => w.ToCharArray())\n            .Select(g
    => new {\n                Key = g.Key,\n                Count = g.Count()\n            })\n
    \           .OrderByDescending(o => o.Count)\n            .First();\n        //
    Count the number of unique characters and compare it to the most frequent\n        var
    uniqueCharCount = counts.Keys.Where(x => !counts.ContainsKey(x)).Distinct().Count();\n
    \       if (uniqueCharCount > mostFrequent.Count) return mostFrequent.Key;\n        return
    FindMax(words.Except(new List<string> { mostFrequent.Key }));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnd_h5gzl.cs(39,58): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    /tmp/tmpnd_h5gzl.cs(40,56): error CS1950: The best overloaded Add method ''List<string>.Add(string)''
    for the collection initializer has some invalid arguments

    /tmp/tmpnd_h5gzl.cs(40,56): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''string''

    '
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<char, int> counter = new Dictionary<char, int>();\n        int
    maxChars = 0;\n        string maxWord = \"\";\n        string currWord = \"\";\n
    \       foreach (string word in words) {\n            char[] chars = word.ToCharArray();\n
    \           foreach (char ch in chars) {\n                if (!counter.ContainsKey(ch))\n
    \                   counter.Add(ch, 1);\n                else\n                    counter[ch]
    += 1;\n            }\n            if (counter.Values.Sum() == chars.Length) {\n
    \               currWord = word;\n                maxChars = counter.Values.Max();\n
    \           }\n            else if (counter.Values.Sum() > maxChars) {\n                currWord
    = word;\n                maxChars = counter.Values.Max();\n            }\n        }\n
    \       if (maxChars != 0) {\n            List<string> orderedWords = words.Select(w
    => w).OrderBy(w => w).ToList();\n            foreach (string word in orderedWords)
    {\n                char[] chars = word.ToCharArray();\n                foreach
    (char ch in chars) {\n                    if (!counter.ContainsKey(ch))\n                        counter.Add(ch,
    1);\n                    else\n                        counter[ch] += 1;\n                }\n
    \               if (counter.Values.Sum() == chars.Length) {\n                    currWord
    = word;\n                    maxChars = counter.Values.Max();\n                }\n
    \               else if (counter.Values.Sum() > maxChars) {\n                    currWord
    = word;\n                    maxChars = counter.Values.Max();\n                }\n
    \           }\n        }\n        return maxWord;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f0fe491cd5846ef9ea49085f63bb50b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f0fe491cd5846ef9ea49085f63bb50b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var result = new List<string>();\n        int maxCount = 0;\n        var
    sortedWords = words.OrderBy(x => x).ToList();\n        foreach (string word in
    sortedWords) {\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c.Equals('a') || c.Equals('z') || c.Equals('A') || c.Equals('Z'))\n
    \                   count++;\n            }\n            if (count > maxCount)
    {\n                maxCount = count;\n                result = word;\n            }\n
    \       }\n        if (!result.Any())\n            return null;\n        return
    result.First();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxq7xslx.cs(31,26): error CS0029: Cannot implicitly convert type ''string''
    to ''System.Collections.Generic.List<string>''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCharCount = 1;\n        var max = words.Max(w => w.Count(c=>c=='a'));\n
    \       int currCount = words.Count(w => w.Count(c=>c=='a'));\n        if (currCount>max)
    {\n            return max;\n        }\n        words.ForEach(w => { \n            int
    curr = w.Count(c=>c=='a');\n            if (curr>max) {\n                if (curr>maxCharCount)
    {\n                    maxCharCount = curr;\n                }\n            }\n
    \       });\n        return words.FirstOrDefault(w => w.Count(c=>c=='a')==maxCharCount)?.FirstOrDefault();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0xe3xqi3.cs(22,42): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    /tmp/tmp0xe3xqi3.cs(22,42): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmp0xe3xqi3.cs(24,20): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp0xe3xqi3.cs(34,16): error CS0029: Cannot implicitly convert type ''char?''
    to ''string''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null) return null;\n        HashSet<char> counts = new HashSet<char>();\n
    \       string max = null;\n        int maxCount = 0;\n        foreach (string
    w in words) {\n            foreach (char c in w) {\n                if (counts.Contains(c))
    counts[c]++;\n                else {\n                    counts.Add(c);\n                    maxCount
    = counts.Count;\n                }\n            }\n            if (max != null
    && maxCount > counts.Count) continue;\n            if (maxCount == counts.Count)
    {\n                max = w;\n            } else {\n                if (words.FindIndex(x
    => x.Contains(max, StringComparer.OrdinalIgnoreCase)) == words.Count - 1) max
    = w;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppysnizsu.cs(26,41): error CS0021: Cannot apply indexing with [] to an
    expression of type ''HashSet<char>''

    /tmp/tmppysnizsu.cs(36,58): error CS1503: Argument 2: cannot convert from ''System.StringComparer''
    to ''System.StringComparison''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null) return null;\n        var result = new Dictionary<char,
    int>();\n        words.ForEach(w => {\n            var length = w.Length;\n            w.Aggregate(0,
    (acc, c) => {\n                if (!result.ContainsKey(c)) {\n                    result[c]
    = 1;\n                } else {\n                    result[c] += 1;\n                }\n
    \               return acc + 1;\n            }, 0);\n        });\n        var
    max = result.Keys.Max();\n        var maxIndex = 0;\n        var maxCount = result[max];\n
    \       words.ForEach(w => {\n            var length = w.Length;\n            var
    count = result[w];\n            if (count > maxCount) {\n                maxCount
    = count;\n                maxIndex = words.IndexOf(w);\n            } else if
    (count < maxCount) {\n                return;\n            }\n        });\n        return
    words[maxIndex];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp36xw_m5.cs(24,15): error CS0411: The type arguments for method ''Enumerable.Aggregate<TSource,
    TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource,
    TAccumulate>, Func<TAccumulate, TResult>)'' cannot be inferred from the usage.
    Try specifying the type arguments explicitly.

    /tmp/tmpp36xw_m5.cs(38,32): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string word = \"\";\n        foreach (string
    s in words) {\n            List<char> uniques = new List<char>();\n            foreach
    (char c in s) {\n                if (uniques.Contains(c))\n                    uniques.Add(c);\n
    \               else\n                    uniques.Add(0);\n            }\n            int
    count = uniques.Count;\n            if (count > maxCount) {\n                word
    = s;\n                maxCount = count;\n            }\n        }\n        if
    (maxCount > 0)\n            return word;\n        else\n            return \"\";\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp10wyseph.cs(28,33): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    '
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       string max = \"\";\n        int maxCount = 0;\n        foreach (string
    word in words)\n        {\n            int count = 0;\n            foreach (char
    c in word)\n            {\n                if (word.IndexOf(c) > -1)\n                    count++;\n
    \           }\n            if (count > maxCount)\n            {\n                maxCount
    = count;\n                max = word;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1afdd407f4094af887d0b915de60a6a7>:0
    \n"
  stdout: ''
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words.Count > 0)\n        {\n            int maxCount = 0;\n            string
    tempString = \"\";\n            foreach(var word in words)\n            {\n                char[]
    charArray = word.ToCharArray();\n                int count = 0;\n                foreach
    (char ch in charArray)\n                {\n                    count++;\n                }\n
    \               if (count > maxCount)\n                {\n                    maxCount
    = count;\n                    tempString = word;\n                }\n            }\n
    \           return tempString;\n        }\n        return string.Empty;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d008d417c05c47b689b19db19265f315>:0
    \n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        string maxWord = null;\n        foreach (string
    s in words) {\n            int count = 0;\n            foreach (char c in s) {\n
    \               if (char.IsLetter(c)) {\n                    count += 1;\n                }\n
    \           }\n            if (count > maxCount) {\n                maxCount =
    count;\n                maxWord = s;\n            }\n        }\n        if (maxCount
    > 0) {\n            return maxWord;\n        }\n        char[] chars = new char[maxCount];\n
    \       foreach (string s in words) {\n            int i = 0;\n            foreach
    (char c in s) {\n                chars[i++] = c;\n            }\n            Array.Sort(chars,
    0, chars.Length);\n            chars = Array.ConvertAll(chars, c => (char)c);\n
    \           string ss = new string(chars);\n            if (ss == maxWord) {\n
    \               return ss;\n            }\n        }\n        return maxWord;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e90bfdece6f436e96c16587d16ba573>:0
    \n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       StringBuilder str = new StringBuilder();\n        List<string> ordered
    = new List<string>();\n        foreach (string word in words) {\n            foreach
    (char c in word) {\n                if (str.Length > 0) {\n                    str.Append(c);\n
    \               }\n                else {\n                    str.Append(c);\n
    \               }\n            }\n            ordered.Add(str.ToString());\n            str.Clear();\n
    \       }\n        int max = ordered.Max(x => x.Length);\n        string result
    = ordered.Where(x => x.Length == max).FirstOrDefault();\n        if (result ==
    null) {\n            return string.Empty;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5f065df5bcd4b2b800dba0ee39d5b5c>:0
    \n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       if (words == null || words.Count < 1)\n            return \"\";\n        string
    max = null;\n        int maxCount = 0;\n        foreach (string word in words)
    {\n            int count = word.Distinct().Count();\n            if (count > maxCount)
    {\n                max = word;\n                maxCount = count;\n            }\n
    \       }\n        if (maxCount == 0)\n            return \"\";\n        if (maxCount
    > 1)\n            return FindMax(words.Where(w => w != max).ToList());\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8865adf8b99b4eb19dc4f529761214bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8865adf8b99b4eb19dc4f529761214bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976428
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int count = new int[26];\n\n        for (int i = 0; i < words.Count; i++)
    {\n            string word = words[i];\n            for (int j = 0; j < word.Length;
    j++) {\n                count[(int)word[j]] += 1;\n            }\n        }\n\n
    \       Array.Sort(count, (x, y) => x - y);\n\n        for (int i = 0; i < count.Length;
    i++) {\n            if (count[i] > 0)\n                return words[i];\n        }\n\n
    \       return words[0];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf52xiak3.cs(20,21): error CS0029: Cannot implicitly convert type ''int[]''
    to ''int''

    /tmp/tmpf52xiak3.cs(25,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    /tmp/tmpf52xiak3.cs(29,20): error CS1503: Argument 1: cannot convert from ''int''
    to ''System.Array''

    /tmp/tmpf52xiak3.cs(29,27): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    /tmp/tmpf52xiak3.cs(31,35): error CS1061: ''int'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''int'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpf52xiak3.cs(32,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    '
  timestamp: 1659976427
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       return words.OrderBy(w => w.Length).LastOrDefault();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <276b71a2fc8b4c7fbd1f452b98b3127d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <276b71a2fc8b4c7fbd1f452b98b3127d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976428
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int count = 0;\n        string maxWord = string.Empty;\n        foreach
    (string word in words) {\n            count += word.ToCharArray().Distinct().Count();\n
    \           if (count == words.Max()) {\n                maxWord = word;\n            }\n
    \       }\n        if (count == words.Max()) {\n            return maxWord;\n
    \       } else {\n            return words.Max();\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43zhqwhd.cs(24,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp43zhqwhd.cs(28,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''int'' and ''string''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxCount = 0;\n        foreach (string word in words) {\n            int
    count = CalculateUniqueCharCount(word);\n            if (count > maxCount) {\n
    \               maxCount = count;\n            }\n        }\n\n        return
    words[words.IndexOf(words[words.IndexOf(words[0])]\n            .OrderBy(c =>
    c.ToString()).ToArray())];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx8c6gjx0.cs(22,25): error CS0103: The name ''CalculateUniqueCharCount''
    does not exist in the current context

    /tmp/tmpx8c6gjx0.cs(28,36): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''string''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] charArray = words[0].ToCharArray();\n        int numberOfUniqueCharacters
    = 1;\n        for (int i = 0; i < charArray.Length; i++) {\n            for (int
    j = i+1; j < charArray.Length; j++) {\n                char characterA = charArray[i];\n
    \               char characterB = charArray[j];\n                if (characterA
    == characterB) continue;\n                if (characterA.ToString().Length < characterB.ToString().Length)
    {\n                    char temp = characterA;\n                    characterA
    = characterB;\n                    characterB = temp;\n                }\n                if
    (characterA != characterB) {\n                    numberOfUniqueCharacters++;\n
    \               }\n            }\n        }\n        List<string> duplicates =
    new List<string>();\n        foreach (string word in words) {\n            char[]
    charArray = word.ToCharArray();\n            int numberOfUniqueCharacters = 1;\n
    \           for (int i = 0; i < charArray.Length; i++) {\n                for
    (int j = i+1; j < charArray.Length; j++) {\n                    char characterA
    = charArray[i];\n                    char characterB = charArray[j];\n                    if
    (characterA == characterB) continue;\n                    if (characterA.ToString().Length
    < characterB.ToString().Length) {\n                        char temp = characterA;\n
    \                       characterA = characterB;\n                        characterB
    = temp;\n                    }\n                    if (characterA != characterB)
    {\n                        numberOfUniqueCharacters++;\n                    }\n
    \               }\n            }\n            if (numberOfUniqueCharacters > words.Count)\n
    \               duplicates.Add(word);\n        }\n        foreach (string word
    in duplicates) {\n            int number = 0;\n            foreach (char c in
    word) {\n                if (char.IsNumber(c)) {\n                    number++;\n
    \               }\n            }\n            string newWord = word;\n            if
    (number == words.Count && word != words[0])\n                newWord = words[0];\n
    \           return newWord;\n        }\n        return words[0];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_t1y1l59.cs(39,20): error CS0136: A local or parameter named ''charArray''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp_t1y1l59.cs(40,17): error CS0136: A local or parameter named ''numberOfUniqueCharacters''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var result = words.GroupBy(x => x.Length).Select(x => new {\n            count
    = x.Key,\n            word = x\n        }).OrderByDescending(x => x.count).First().word;\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\",
    (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1wp84z7a.cs(24,16): error CS0029: Cannot implicitly convert type ''System.Linq.IGrouping<int,
    string>'' to ''string''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       // code here\n        var wordCounts = words.GroupBy(x => x).ToDictionary(x
    => x.Key, x => x.Count());\n        string result = null;\n        if (wordCounts.ContainsKey(wordCounts.Values.Max()))\n
    \       {\n            result = wordCounts.Values.Max().ToString();\n        }\n
    \       else if (wordCounts.ContainsKey(wordCounts.Values.Min()))\n        {\n
    \           result = wordCounts.Values.Min().ToString();\n        }\n        else\n
    \       {\n            result = words.First().ToString();\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphlcpsmz8.cs(23,36): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmphlcpsmz8.cs(27,41): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659976427
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       long maxCount = 0;\n        string maxWord = null;\n        for (int i
    = 0; i < words.Count; i++) {\n            long uniqueCharCount = 0;\n            for
    (int j = 0; j < words.Count; j++) {\n                uniqueCharCount += words[j].Count(c
    => c==words[i].ElementAt(j));\n            }\n            if (uniqueCharCount
    > maxCount) {\n                maxCount = uniqueCharCount;\n                maxWord
    = words[i];\n            }\n        }\n        return maxWord;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: index\n  at System.Linq.Enumerable.ElementAt[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Int32 index) [0x0007b]
    in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem+<>c__DisplayClass0_2.<FindMax>b__0
    (System.Char c) [0x00021] in <51d76ff161fc4ca6bb6634856e40f815>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]
    predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x0006a] in <51d76ff161fc4ca6bb6634856e40f815>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <51d76ff161fc4ca6bb6634856e40f815>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: index\n  at System.Linq.Enumerable.ElementAt[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Int32 index) [0x0007b]
    in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem+<>c__DisplayClass0_2.<FindMax>b__0
    (System.Char c) [0x00021] in <51d76ff161fc4ca6bb6634856e40f815>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]
    predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.FindMax
    (System.Collections.Generic.List`1[T] words) [0x0006a] in <51d76ff161fc4ca6bb6634856e40f815>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <51d76ff161fc4ca6bb6634856e40f815>:0
    \n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int[] uniqueValues = new int[256];\n        int max = 0;\n        foreach
    (string word in words) {\n            foreach (char ch in word)\n                uniqueValues[ch]++;\n
    \           if (uniqueValues.Length > max)\n                max = uniqueValues.Length;\n
    \       }\n        foreach (string word in words) {\n            int count = 0;\n
    \           foreach (char ch in word)\n                count+=uniqueValues[ch];\n
    \           if (count>max)\n                max = count;\n        }\n        foreach
    (string word in words) {\n            int index = 0;\n            foreach (char
    ch in word)\n                index+=uniqueValues[ch];\n            if (index>max)\n
    \               max = index;\n        }\n        if (uniqueValues.Length>max)\n
    \           max = uniqueValues.Length;\n        string result = string.Empty;\n
    \       for (int i = 0; i < uniqueValues.Length; i++) {\n            if (uniqueValues[i]==max)\n
    \               result += words[i];\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c3db324c2834a6e8c27a08d7733b204>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c3db324c2834a6e8c27a08d7733b204>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] myCharArray = new char[500];\n        int uniqueCount = 0;\n        int
    count = 0;\n        for (int i = 0; i < words.Count; i++)\n        {\n            for
    (int j = 1; j < words.Count; j++)\n            {\n                if (words[i].ToCharArray().SequenceEqual(words[j].ToCharArray()))\n
    \               {\n                    myCharArray[count] = words[i].ToCharArray()[0];\n
    \                   uniqueCount++;\n                    break;\n                }\n
    \               else\n                {\n                    count++;\n                }\n
    \           }\n        }\n        int maxCount = Math.Max(count, uniqueCount);\n
    \       for (int i = 0; i < myCharArray.Length; i++)\n        {\n            if
    (maxCount == uniqueCount)\n            {\n                if (myCharArray[i] ==
    words[words.Count - 1].ToCharArray()[0])\n                {\n                    return
    words[words.Count - 1];\n                }\n            }\n        }\n        return
    \"None\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b19a5e41358a43aca7676c75b22b68b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b19a5e41358a43aca7676c75b22b68b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       var uniqueChars = new HashSet<char>();\n        foreach (var word in words)\n
    \       {\n            var str = word.ToLower();\n            var count = str.Count(c
    => uniqueChars.Contains(c));\n            if (count == uniqueChars.Count)\n            {\n
    \               return word;\n            }\n            uniqueChars.UnionWith(str.ToLower());\n
    \       }\n        return words[0];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0610c9356e6a4bbabd225416330a1ae0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0610c9356e6a4bbabd225416330a1ae0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int uniqueChars = 0;\n        int i = 0;\n        string maxWord = \"\";\n
    \       string curWord = \"\";\n        foreach (string word in words) {\n            if
    (word.Count() > uniqueChars) {\n                uniqueChars = word.Count();\n
    \               maxWord = curWord;\n            }\n            curWord = word;\n
    \       }\n        if (uniqueChars == words.Count()) {\n            return maxWord;\n
    \       }\n        int curChar = 0;\n        bool changed = true;\n        while
    (changed && i < words.Count()) {\n            if (words[i].Count() > curChar)
    {\n                curChar = words[i].Count();\n                maxWord = curWord;\n
    \           }\n            curWord = words[i];\n            i++;\n            if
    (i < words.Count()) {\n                if (words[i].Count() < curChar) {\n                    changed
    = false;\n                }\n            }\n        }\n        return maxWord;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12df6285ad034a52b5d4bde0fa5bba46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12df6285ad034a52b5d4bde0fa5bba46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976428
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       char[] charArray = new char[words.Count * words.Max(w => w.Count(c =>
    c == ' '))];\n        int count = 0;\n        foreach (var word in words) {\n
    \           for (int i = 0; i < word.Length; i++) {\n                charArray[count++]
    = word[i];\n            }\n        }\n        var r = new Random();\n        Array.Sort(charArray);\n
    \       charArray = charArray.Take(charArray.Length - words.Max(w => w.Count(c
    => c == ' '))).ToArray();\n        for (int i = 0; i < words.Count; i++) {\n            var
    d = charArray.Take(charArray.Length - words.Max(w => w.Count(c => c == ' ')));\n
    \           d = d.Distinct().ToArray();\n            if (d.Count() > 1) {\n                return
    words[i];\n            }\n        }\n        return words[0];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.FindMax (System.Collections.Generic.List`1[T]
    words) [0x0005e] in <15074bf113ba4574ad76d8baabbc0989>:0 \n  at Problem.Main (System.String[]
    args) [0x00024] in <15074bf113ba4574ad76d8baabbc0989>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005e]
    in <15074bf113ba4574ad76d8baabbc0989>:0 \n  at Problem.Main (System.String[] args)
    [0x00024] in <15074bf113ba4574ad76d8baabbc0989>:0 \n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       int maxUnique = 0;\n        string word = \"\";\n        foreach(var item
    in words) {\n            int uniqueChars = item.Distinct().Count();\n            if(uniqueChars
    > maxUnique) {\n                maxUnique = uniqueChars;\n                word
    = item;\n            }\n        }\n        return word;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\",
    (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\",
    (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",
    (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"nation\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"this\", (string)\"is\",
    (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01ddd418d9874bf6b8b9d4746fc0f2ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01ddd418d9874bf6b8b9d4746fc0f2ca>:0
    \n"
  stdout: ''
  timestamp: 1659976428
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function that accepts a list of strings.\n    // The
    list contains different words. Return the word with maximum number\n    // of
    unique characters. If multiple strings have maximum number of unique\n    // characters,
    return the one which comes first in lexicographical order.\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n
    \   // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\",
    (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new
    List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n
    \   // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n
    \       Dictionary<string, int> chars = new Dictionary<string, int>();\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    ch in word) {\n                count++;\n                chars[ch.ToString()]
    += 1;\n            }\n            if (count > chars.MaxValue) {\n                chars.Clear();\n
    \               chars.Add(\"*\", count);\n            }\n        }\n        if
    (chars.Count > 0)\n            chars = chars.OrderBy(x => x.Value).ToDictionary(x
    => x.Key, x => x.Value);\n\n        foreach (string key in chars.Keys)\n            chars[key]
    = chars[key].ToString();\n\n        if (chars.Keys.Count == 1)\n            return
    chars.Keys.First();\n\n        chars = chars.OrderBy(x => x.Key, new DictionaryComparer()).ToDictionary(x
    => x.Key, x => x.Value);\n        return chars.Keys.First();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\",
    (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"this\",
    (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\", (string)\"are\",
    (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new
    List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\",
    (string)\"nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new
    string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"b\")));\n
    \   Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\", (string)\"play\",
    (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoo06hya7.cs(27,31): error CS1061: ''Dictionary<string, int>'' does not
    contain a definition for ''MaxValue'' and no accessible extension method ''MaxValue''
    accepting a first argument of type ''Dictionary<string, int>'' could be found
    (are you missing a using directive or an assembly reference?)

    /tmp/tmpoo06hya7.cs(36,26): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    /tmp/tmpoo06hya7.cs(41,47): error CS0246: The type or namespace name ''DictionaryComparer''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976428
