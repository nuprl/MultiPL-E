language: cs
name: HumanEval_135_can_arrange
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxVal = -1;\n        long prevVal = 0;\n        long currVal = 0;\n        bool
    found = false;\n        foreach (var num in arr) {\n            if (num >= prevVal
    && num < currVal) {\n                found = true;\n                maxVal = num;\n
    \           } else if (found == true) {\n                maxVal = -1;\n            }\n
    \           prevVal = currVal;\n            currVal = num;\n        }\n        return
    maxVal;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e085cba9a3b547539bbfc7a123270624>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e085cba9a3b547539bbfc7a123270624>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    n = arr.Count;\n        for (int i = 0; i < n - 1; i++)\n            for (int
    j = i + 1; j < n; j++)\n                if (arr[i] > arr[j])\n                    return
    j;\n        return -1;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    result = -1L;\n        long smallest = arr.Min();\n        arr.Sort();\n        long
    largest = arr.Last();\n        foreach (long cur in arr.Skip(1))\n        {\n
    \           if (cur < smallest && result < smallest) result = smallest;\n            if
    (cur > largest && result > largest) result = largest;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f7fb9f538544dfa8e7b5e8e430e8557>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f7fb9f538544dfa8e7b5e8e430e8557>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    ans = -1L;\n        foreach(var item in arr)\n            if (ans == -1L)\n                ans
    = item;\n            else\n                if (item <= ans)\n                    ans
    = -1;\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b553ca00d369449e8619967f569e7bcd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b553ca00d369449e8619967f569e7bcd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count < 2)\n            return -1;\n        long max = arr.FirstOrDefault();\n
    \       for (int i = 0; i < arr.Count - 1; i++)\n            if (arr[i] > max)\n
    \               max = arr[i];\n        return max;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5d1f40fc7d64efd9afa93c1d914d1fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5d1f40fc7d64efd9afa93c1d914d1fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    largest = -1;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]
    > arr[largest]) {\n                largest = i;\n            }\n        }\n        return
    largest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0000f] in <c5903f0f8b8e41d4a0018bcc415af0df>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <c5903f0f8b8e41d4a0018bcc415af0df>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0000f] in <c5903f0f8b8e41d4a0018bcc415af0df>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <c5903f0f8b8e41d4a0018bcc415af0df>:0
    \n"
  stdout: ''
  timestamp: 1660015890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    n = arr.Count;\n        if (n == 0) return -1;\n\n        int max = arr.First();\n
    \       long max = max;\n        long max = max;\n        for (int i = 1; i <
    n; i++) {\n            if (arr[i] <= max) continue;\n            max = arr[i];\n
    \       }\n        return max;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp59499f6i.cs(22,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp59499f6i.cs(23,14): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmp59499f6i.cs(24,14): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmp59499f6i.cs(27,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0) return -1;\n        var result = new List<long>();\n        //
    Get a sorted version of the array\n        var arr = arr.OrderBy(x => x);\n        //
    Find the largest value not greater than any value in the array\n        long largest
    = arr.First();\n        for (int i = 1; i < arr.Count; i++) {\n            if
    (arr[i] < largest) break;\n            largest = arr[i];\n        }\n        //
    If the largest value is not greater than any value in the array,\n        // then
    -1 is returned.\n        if (largest == arr.First()) return -1;\n        // If
    the largest value is not greater than any value in the array,\n        // then
    the largest value is not greater than any value in the array\n        // so the
    largest value cannot be greater than any value in the array\n        // so the
    function returns -1\n        if (largest < arr.First()) return -1;\n        //
    If the largest value is not greater than any value in the array,\n        // then
    the largest value is not greater than any value in the array\n        // so the
    largest value cannot be greater than any value in the array\n        // so the
    function returns -1\n        if (largest < arr.First()) {\n            // If there
    are duplicate values in the array then return the index\n            // of the
    first duplicate value.\n            var dup = arr.Where((x, index) => x != arr.First()
    && x == arr[index]).First();\n            if (dup == arr.First()) return -1;\n
    \           if (dup < arr.First()) return -1;\n        }\n        // The largest
    value in the array is equal to the value of the first\n        // duplicate value
    in the array so the function returns the index of the\n        // duplicate value.\n
    \       return arr.IndexOf(dup);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfsvg44f1.cs(19,13): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpfsvg44f1.cs(19,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpfsvg44f1.cs(22,13): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpfsvg44f1.cs(22,19): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpfsvg44f1.cs(25,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpfsvg44f1.cs(51,28): error CS0103: The name ''dup'' does not exist in the
    current context

    '
  timestamp: 1660015890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxVal = arr.First();\n        long tempMaxVal = maxVal;\n        int i;\n        for
    (i = 1; i < arr.Count; i++) {\n            if (arr[i] >= tempMaxVal) {\n                tempMaxVal
    = arr[i];\n            }\n        }\n        if (tempMaxVal >= maxVal) {\n            return
    -1;\n        }\n        return maxVal;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <121dfd3e598d47d4b53d69ad69f42279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <121dfd3e598d47d4b53d69ad69f42279>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = arr.First();\n        for (var i = 1; i < arr.Count; i++) {\n            if
    (max < arr[i])\n                max = arr[i];\n        }\n        return max <
    arr.First() ? -1 : max;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85c7bc7e6d184921886ebb728b071fb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85c7bc7e6d184921886ebb728b071fb8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    list = arr.ToList();\n        list.Sort();\n        var index = list.BinarySearch((long)1L);\n
    \       if (index < 0)\n            return -1;\n        return list[index];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e657b04ed2f845279130843b3b6647e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e657b04ed2f845279130843b3b6647e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxVal = arr[0];\n        long index = -1;\n\n        if (arr.Count == 0) {\n
    \           return -1;\n        }\n\n        arr.Sort();\n\n        for (var i
    = 1; i < arr.Count; i++) {\n            if (arr[i] <= maxVal) {\n                maxVal
    = arr[i];\n                index = i;\n            }\n        }\n\n        return
    index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53db136a69d24922ab0618f98a22c5f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53db136a69d24922ab0618f98a22c5f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIndex = -1;\n        long currentIndex = 0;\n\n        foreach(var item in
    arr)\n        {\n            if(item < arr[currentIndex])\n            {\n                currentIndex
    = arr.IndexOf(item, currentIndex + 1);\n            }\n            else\n            {\n
    \               if(currentIndex > maxIndex) maxIndex = currentIndex;\n                currentIndex++;\n
    \           }\n        }\n\n        return maxIndex > -1 ? maxIndex : -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjrki1q9h.cs(24,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjrki1q9h.cs(26,50): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        double
    maxValue = double.MaxValue;\n        double currentValue = double.MaxValue;\n
    \       long largestIndex;\n        for (int i = 0; i < arr.Count - 1; i++) {\n
    \           if (arr[i] <= currentValue) {\n                continue;\n            }\n
    \           currentValue = arr[i];\n            largestIndex = i;\n            for
    (int j = i; j < arr.Count; j++) {\n                if (arr[j] <= currentValue)
    {\n                    continue;\n                }\n                currentValue
    = arr[j];\n                largestIndex = j;\n                if (currentValue
    > maxValue) {\n                    maxValue = currentValue;\n                }\n
    \           }\n        }\n        if (largestIndex == arr.Count - 1 && maxValue
    == double.MaxValue) {\n            return -1;\n        }\n        return largestIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjw3g2j60.cs(39,13): error CS0165: Use of unassigned local variable ''largestIndex''

    '
  timestamp: 1660015890
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        return
    arr.TakeWhile(x => x < arr.Skip(1).FirstOrDefault()).LastOrDefault();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13ef487ed6f64a979e28296239412cce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13ef487ed6f64a979e28296239412cce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0) return -1L;\n        var maxIndex = 0;\n        var maxElement
    = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (maxElement
    >= arr[i]) {\n                maxIndex = i;\n                maxElement = arr[i];\n
    \           }\n        }\n        return maxIndex;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aa1f178da104f50b16005255fa4f156>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aa1f178da104f50b16005255fa4f156>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    maxIndex = 0;\n        long maxValue = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            long value = arr[i];\n            if (value > maxValue) {\n
    \               maxIndex = i;\n                maxValue = value;\n            }\n
    \       }\n        if (maxIndex == arr.Count - 1) {\n            return -1;\n
    \       }\n        return maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e502b2fe07347489299d446e4424433>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e502b2fe07347489299d446e4424433>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIdx = -1;\n        long curIdx = arr.First();\n        foreach (var x in arr)\n
    \       {\n            if (x > curIdx)\n            {\n                maxIdx
    = curIdx;\n                curIdx = x;\n            }\n        }\n        return
    maxIdx;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <133c14aba0c543c8a716b4db0171ee60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <133c14aba0c543c8a716b4db0171ee60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = long.MaxValue;\n        int maxIndex = 0;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] >= max) {\n                max = arr[i];\n                maxIndex
    = i;\n            }\n        }\n        if (maxIndex >= arr.Count) return -1;\n
    \       return maxIndex;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8ad11fb711d491794c06f543aae2a88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8ad11fb711d491794c06f543aae2a88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015890
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    res = -1L;\n        bool flag = false;\n        foreach (var item in arr) {\n
    \           if (item != (-1L)) {\n                if (item > (-1L)) {\n                    flag
    = true;\n                    res = item;\n                }\n            }\n        }\n
    \       return (flag) ? res : -1L;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55d00f08dd464f05a5b672c97fdfbb62>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55d00f08dd464f05a5b672c97fdfbb62>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Your code here\n        int maxIndex = -1;\n        long currentElement = arr.First();\n
    \       for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < currentElement)
    {\n                currentElement = arr[i];\n                maxIndex = i;\n            }\n
    \       }\n        return maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1327493fc0c431d8b118ce945af2eaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1327493fc0c431d8b118ce945af2eaf>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00003] in <f1327493fc0c431d8b118ce945af2e"
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Find maximum index greater than or equal to any element.\n        int max = -1;\n
    \       int cur = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (max < 0 || arr[i] >= arr[max]) {\n                max = i;\n            }\n            if
    (arr[i] >= arr[cur]) {\n                cur = i;\n            }\n        }\n        return
    cur < arr.Count ? cur : -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00033] in <c3aa94a2aee74520808ed5200ba0ad9e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <c3aa94a2aee74520808ed5200ba0ad9e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00033] in <c3aa94a2aee74520808ed5200ba0ad9e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <c3aa94a2aee74520808ed5200ba0ad9e>:0
    \n"
  stdout: ''
  timestamp: 1660015890
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    retval = -1;\n        foreach (var l in arr) {\n            if (l < arr[0]) {\n
    \               retval = l;\n                break;\n            }\n        }\n
    \       return retval;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <035031ff7fc84c63a6dec0f6825dd1ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <035031ff7fc84c63a6dec0f6825dd1ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largestIndex = 0;\n        long tempIndex = 0;\n        int i;\n\n        for
    (i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] >= arr[i + 1]) {\n                tempIndex
    = arr[i + 1];\n                arr[i + 1] = arr[i];\n                arr[i] =
    tempIndex;\n            }\n        }\n        if (tempIndex > largestIndex) {\n
    \           largestIndex = tempIndex;\n        }\n        return largestIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8525cb7e74447038eb674a0ae89c3ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8525cb7e74447038eb674a0ae89c3ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    result = -1;\n        if (arr.Count < 2) return result;\n        var first = arr[0];\n
    \       foreach (var val in arr) {\n            if (val > first) {\n                result
    = Math.Max(val, result);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1q0u97f.cs(24,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    result = -1;\n        var index = 0;\n        var prev = -2;\n        arr.Sort();\n
    \       long minValue = arr[0];\n        bool first = true;\n        while (index
    < arr.Count - 1) {\n            if (arr.ElementAt(index) > arr.ElementAt(index
    + 1)) {\n                if (first) {\n                    first = false;\n                    prev++;\n
    \               } else {\n                    result = arr.ElementAt(prev);\n
    \                   break;\n                }\n            } else {\n                prev++;\n
    \           }\n            index++;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6xti93l8.cs(31,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Your code goes here\n        if (arr.Count == 0) return -1L;\n        var index
    = arr.LastIndex(lst => lst <= arr[0]) ?? -1L;\n        return index;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjk960s6s.cs(21,25): error CS1061: ''List<long>'' does not contain a definition
    for ''LastIndex'' and no accessible extension method ''LastIndex'' accepting a
    first argument of type ''List<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr == null || arr.Count == 0) return -1;\n        if (arr.Count == 1) return
    0;\n        if (arr.Count == 2) return 1;\n        if (arr.Count == 3) return
    2;\n        if (arr.Count > 3) return -1;\n        var result = -1;\n        var
    temp = 0;\n        arr.Reverse();\n        foreach (var item in arr)\n        {\n
    \           if (item <= temp)\n            {\n                if (result == -1)
    result = temp;\n                else\n                {\n                    result
    = Math.Max(item, result);\n                }\n            }\n            else\n
    \           {\n                temp = item;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppq4ap6kf.cs(34,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppq4ap6kf.cs(39,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    lastIndex = -1;\n        arr.Sort();\n        for (long i = 1; i < arr.Count;
    i++) {\n            if (arr[i] > arr[lastIndex]) {\n                lastIndex
    = i;\n            }\n        }\n        return lastIndex;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg56av5ci.cs(22,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpg56av5ci.cs(22,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    result = -1L;\n        long maximum = 0L;\n        for (int i = 0; i < arr.Count
    - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                result =
    i;\n                maximum = arr[i];\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0942d10a5a24e84aa5074368206d44c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0942d10a5a24e84aa5074368206d44c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr == null || arr.Count == 0)\n            return -1;\n        long max = arr[0],
    maxIndex = -1, i = 1, j;\n        while (i < arr.Count && arr[i] <= max) {\n            if
    (arr[i] > max)\n                max = arr[i];\n            maxIndex = i;\n            i++;\n
    \       }\n        if (maxIndex == arr.Count - 1)\n            return -1;\n        bool
    found = false;\n        for (i = arr.Count - 1; i >= maxIndex; i--) {\n            j
    = i + 1;\n            while (j < arr.Count && arr[j] < arr[i]) {\n                if
    (arr[j] > max)\n                    max = arr[j];\n                j++;\n            }\n
    \           if (arr[i] < max)\n                found = true;\n        }\n        return
    found ? maxIndex : -1;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr9tcgtp1.cs(22,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr9tcgtp1.cs(23,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr9tcgtp1.cs(24,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr9tcgtp1.cs(33,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr9tcgtp1.cs(33,50): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr9tcgtp1.cs(34,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr9tcgtp1.cs(35,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr9tcgtp1.cs(38,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    size = arr.Count;\n        if (size == 0) return -1;\n        long largest = arr[0];\n
    \       int largestIndex = 0;\n        for (int index = 1; index < size; index++)
    {\n            if (arr[index] > largest) {\n                largest = arr[index];\n
    \               largestIndex = index;\n            }\n        }\n        if (largest
    == arr[largestIndex]) {\n            return -1;\n        } else {\n            return
    largestIndex;\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50cdd96ef0754ef19a3da2891f5d8d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50cdd96ef0754ef19a3da2891f5d8d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long[]
    arr = arr.ToArray();\n        if (arr.Length == 0) {\n            return -1;\n
    \       }\n        if (arr.Length == 1) {\n            return 0;\n        }\n
    \       if (arr[0] == arr[1]) {\n            return 1;\n        }\n        long
    largestIndex = 0;\n        long smallestIndex = arr[0];\n        long largestVal
    = arr[0];\n        long smallestVal = arr[0];\n        foreach (long i in arr)
    {\n            if (i <= smallestVal) {\n                smallestVal = i;\n                smallestIndex
    = largestIndex;\n            } else if (i >= largestVal) {\n                largestVal
    = i;\n                largestIndex = smallestIndex;\n            }\n        }\n
    \       return largestIndex;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphq9f6kot.cs(19,16): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmphq9f6kot.cs(19,22): error CS0165: Use of unassigned local variable ''arr''

    '
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0)\n            return -1;\n\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (max < arr[i])\n                max
    = arr[i];\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c73b378f4cc40198c2a789dae65e4e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c73b378f4cc40198c2a789dae65e4e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count <= 1) {\n            return -1;\n        }\n        var low = 0;\n
    \       var high = arr.Count - 1;\n        while (low < high) {\n            var
    mid = (low + high) / 2;\n            var m = (long)Math.Min(arr[mid], arr[high]);\n
    \           if (m > arr[high]) {\n                high = mid - 1;\n            }
    else if (m > arr[low]) {\n                low = mid;\n            } else {\n                break;\n
    \           }\n        }\n        return high + 1;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88ff553aeffa4d5080cdb0808f77fe8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88ff553aeffa4d5080cdb0808f77fe8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = arr.First();\n        int maxIdx = -1;\n        foreach (long i in arr)
    {\n            if (i <= max) {\n                max = i;\n                maxIdx
    = arr.IndexOf(max);\n            }\n        }\n        return maxIdx;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57435086d2774701b0bf9c9c40d949c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57435086d2774701b0bf9c9c40d949c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    N = arr.Count;\n        if (N == 0) return -1;\n        var first = arr.FirstOrDefault();\n
    \       if (first == -1) return -1;\n        int low = N - 1;\n        int high
    = -1;\n        while (low >= 0 && arr[low] > first)\n            low--;\n        while
    (high < N && arr[high] > first)\n            high++;\n        if (high > low)\n
    \           return high;\n        return low;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0005d] in <a4c13cad12e74888bec6a4644c65cac4>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <a4c13cad12e74888bec6a4644c65cac4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0005d] in <a4c13cad12e74888bec6a4644c65cac4>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <a4c13cad12e74888bec6a4644c65cac4>:0
    \n"
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long[]
    v = new long[arr.Count];\n        for (int i = 0; i < v.Length; i++) {\n            v[i]
    = arr.ElementAt(i);\n        }\n        int left = 0, right = v.Length - 1;\n
    \       while (left < right) {\n            int mid = (left + right) / 2;\n            if
    (v[mid] > v[right]) {\n                right = mid;\n            } else {\n                left
    = mid + 1;\n            }\n        }\n        return left > 0 ? v[left] : -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0654ed583ed4b4a9b572bf78461a5b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0654ed583ed4b4a9b572bf78461a5b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0)\n            return -1;\n        int index = 0;\n        bool
    isIncreasing = true;\n        bool isFinding = true;\n        while (index < arr.Count
    && isFinding) {\n            isFinding = false;\n            long cur = arr[index];\n
    \           for (int i = index - 1; i >= 0; --i) {\n                if (cur <=
    arr[i]) {\n                    index = i;\n                    isFinding = true;\n
    \                   break;\n                }\n            }\n            if (isFinding)\n
    \               isIncreasing = !isIncreasing;\n        }\n        if (index >=
    arr.Count || !isFinding)\n            return -1;\n        if (isIncreasing ==
    false) {\n            index = arr.Count - 1;\n        }\n        return index;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dff5ab53de840d0bf27908a76d0641a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5dff5ab53de840d0bf27908a76d0641a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    result = -1;\n        if (arr.Count == 0) {\n            return result;\n        }\n
    \       List<long> list = new List<long>();\n        arr.CopyTo(list);\n        list.Sort();\n
    \       long max = 0;\n        if (list.Count > 0) {\n            max = list[0];\n
    \           for (int i = 1; i < list.Count; i++) {\n                if (list[i]
    < max) {\n                    max = list[i];\n                }\n            }\n
    \           result = max;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp05hdjy7n.cs(24,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long[]''

    '
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = arr[0];\n        int index = -1;\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] > largest) {\n                index = i;\n                largest
    = arr[i];\n            } else if (arr[i] < largest) {\n                break;\n
    \           }\n        }\n        return index;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba9322ddc914408da685434beaa30291>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba9322ddc914408da685434beaa30291>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    results = new List<long>();\n        long maxIndex = -1;\n        bool found =
    false;\n        foreach (var item in arr.Select((i, index) => new {i, index}))
    {\n            if (maxIndex == -1 || item.index <= maxIndex - 1) {\n                results.Add(item.i);\n
    \               maxIndex = item.index;\n                found = true;\n            }\n
    \       }\n\n        if (!found) {\n            return -1;\n        }\n\n        return
    results.Last();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa494c2944424e1696a9c169f57e24ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa494c2944424e1696a9c169f57e24ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    prevval = arr.First();\n        int idx = arr.Count - 1;\n        long currval
    = arr[idx];\n        while (idx > 0 && currval >= prevval) {\n            prevval
    = currval;\n            idx--;\n            currval = arr[idx];\n        }\n        return
    idx;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6ede42b770e4f2bb0427373219403b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6ede42b770e4f2bb0427373219403b6>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00001] in <d6ede42b770e4f2bb0427373219403"
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    result = arr.Last();\n        for(int i = 1; i < arr.Count; i++)\n            if(arr[i]
    < result)\n                result = arr[i];\n        return result == arr.Last()
    ? -1 : result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecb06b8a03a647d29a2877d704949846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecb06b8a03a647d29a2877d704949846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count < 2L)\n            return -1L;\n        var firstIndex = 0L;\n        var
    lastIndex = arr.Count - 1L;\n        var index = -1L;\n        var firstElement
    = arr.First();\n        var lastElement = arr.Last();\n        while (firstIndex
    < lastIndex) {\n            if (firstElement >= arr[index] && firstElement < arr[index
    + 1]) {\n                index = firstIndex;\n                break;\n            }\n
    \           ++firstIndex;\n        }\n        if (index >= 0) {\n            while
    (firstIndex < lastIndex) {\n                if (arr[index] < firstElement) {\n
    \                   break;\n                }\n                ++index;\n            }\n
    \           if (index >= 0) {\n                return index;\n            }\n
    \       }\n        index = lastIndex;\n        while (firstIndex < lastIndex)
    {\n            if (arr[index] > firstElement) {\n                break;\n            }\n
    \           ++index;\n        }\n        if (index >= 0) {\n            return
    index;\n        }\n        index = lastIndex;\n        while (firstIndex < lastIndex)
    {\n            if (arr[index] <= lastElement) {\n                break;\n            }\n
    \           --index;\n        }\n        if (index < 0) {\n            return
    index;\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1vg520kw.cs(27,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1vg520kw.cs(27,66): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1vg520kw.cs(35,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1vg520kw.cs(46,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1vg520kw.cs(56,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    result = -1;\n        foreach (long i in arr) {\n            if (i > result) {\n
    \               result = i;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7145fbdbad04419f82a650f842048cd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7145fbdbad04419f82a650f842048cd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = arr.LastOrDefault();\n        int maxIndex = 0;\n        for(int i = 0;
    i <= arr.Count - 1; i++) {\n            long current = arr[i];\n            if
    (current < max) {\n                max = current;\n                maxIndex =
    i;\n            }\n        }\n        return maxIndex;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23d0581e3f0b4507a74c566e528edf03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23d0581e3f0b4507a74c566e528edf03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    TODO Complete me!\n        long ret = -1;\n        for (int i = 0; i < arr.Count
    - 1; i++)\n        {\n            if (arr[i] > arr[ret])\n                ret
    = i;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfhuz4g_i.cs(23,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = 0;\n        long max = arr.ElementAt(0);\n        for(int i = 1; i < arr.Count;
    i++) {\n            if(arr.ElementAt(i) > max) {\n                max = arr.ElementAt(i);\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyh52_393.cs(20,14): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    '
  timestamp: 1660015892
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        arr.Sort();\n
    \       long curr = arr.First();\n        long max = arr.Last();\n        int
    i = 1;\n        while (i <= arr.Count - 2) {\n            int j = i;\n            long
    x = arr[j];\n            if (x > curr) {\n                i = j;\n            }
    else if (x == curr) {\n                j++;\n            }\n            max =
    Math.Max(max, x);\n            curr = Math.Max(x, arr[j]);\n        }\n        if
    (i == arr.Count - 2)\n            return -1;\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660015897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        bool
    contains = false;\n        long maxIndex = 0;\n        bool found = false;\n        foreach
    (long x in arr) {\n            long nextIndex = arr.IndexOf(x);\n            if
    (nextIndex > maxIndex || nextIndex == -1) {\n                contains = false;\n
    \               maxIndex = x;\n            } else if (nextIndex == -1 && found
    == false) {\n                contains = true;\n                maxIndex = x;\n
    \               found = true;\n            }\n        }\n        if (!contains)\n
    \           return -1;\n        return maxIndex;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43c703a1affd4e3c8ae7c71c810c4380>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43c703a1affd4e3c8ae7c71c810c4380>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = -1;\n        var idx = -1;\n        for (int i = 0; i < arr.Count; i++)
    {\n            if (arr[i] >= arr[(i + 1) % arr.Count]) {\n                // We
    found an element...\n                if (i == max) {\n                    idx
    = i;\n                }\n                else {\n                    max = i;\n
    \               }\n            }\n        }\n        return idx;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91035b41d9fa436284c7cf09d35bf55d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91035b41d9fa436284c7cf09d35bf55d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        double
    max = double.MinValue;\n        int max_i = -1;\n        int min_i = arr.Count
    - 1;\n        if (arr.Count == 0) {\n            throw new ArgumentException();\n
    \       }\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]
    < arr[i - 1]) {\n                max = Math.Max(max, arr[i]);\n                min_i
    = Math.Max(min_i, i);\n            }\n        }\n        if (max <= double.MinValue)
    {\n            return -1;\n        }\n        if (max == arr[0]) {\n            return
    0;\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    == max) {\n                return i;\n            }\n            if (arr[i] <
    arr[i - 1]) {\n                return Math.Max(max_i, i - 1);\n            }\n
    \       }\n        return Math.Max(max_i, arr.Count - 1);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x000db] in <ba3997178289422eaceaba607cf1cd36>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <ba3997178289422eaceaba607cf1cd36>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x000db] in <ba3997178289422eaceaba607cf1cd36>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <ba3997178289422eaceaba607cf1cd36>:0
    \n"
  stdout: ''
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0) {\n            return -1;\n        }\n        long maxIdx = 0;\n
    \       long curIdx = 0;\n        long maxVal = arr[0];\n        for (int i =
    1; i < arr.Count; i++) {\n            long val = arr[i];\n            if (val
    > maxVal) {\n                maxVal = val;\n                maxIdx = i;\n            }\n
    \       }\n        return maxIdx;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32f6cd3d781b4583a25f62459660e325>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32f6cd3d781b4583a25f62459660e325>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxVal = arr.FirstOrDefault();\n        for (int i = 1; i < arr.Count; i++) {\n
    \           if (arr[i] >= maxVal) {\n                maxVal = arr[i];\n            }\n
    \       }\n        return maxVal;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d91dbc2c9b8a43729c121b7e63b1b3fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d91dbc2c9b8a43729c121b7e63b1b3fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count() == 0)\n            return -1;\n\n        long largest = arr.Min();\n
    \       long smallest = arr.Max();\n        if (largest - smallest >= 0)\n            return
    -1;\n        return arr.LastIndexOf(largest) + 1;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fec763913eec44879e5e3f40d900e2e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fec763913eec44879e5e3f40d900e2e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count < 1) return -1L;\n        if (arr.Count > 1 && arr.Count < 100000)
    return -1L;\n        var maxIndex = 0;\n        for (int i = 0; i < arr.Count
    - 1; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex
    = i;\n            } else {\n                break;\n            }\n        }\n
    \       if (maxIndex < 0) return -1L;\n        return maxIndex;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f09aeea6c61e4323aac13a30e8271952>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f09aeea6c61e4323aac13a30e8271952>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Your code here\n        long largest = arr.First();\n        int count = 0;\n
    \       foreach (long i in arr)\n        {\n            if (i > largest)\n            {\n
    \               largest = i;\n                count = 1;\n            }\n            else\n
    \           {\n                count++;\n            }\n        }\n        return
    (largest == -1) ? -1 : largest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3ee9cb6c3654c67bc0d25ae94450c1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3ee9cb6c3654c67bc0d25ae94450c1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    index = arr.IndexOf(arr.Min());\n        while (index >= 0 && arr[index] > arr.Min())\n
    \       {\n            index--;\n        }\n        return index;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgc4vo6f1.cs(20,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = arr.Max();\n        var res = arr.Where((v, i) => v >= max);\n        if
    (res == null) {\n            return -1;\n        } else {\n            return
    res.FirstOrDefault();\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3efe982bab044a64b20af1725d29eb20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3efe982bab044a64b20af1725d29eb20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    minIndex = -1;\n        long largest = arr[0];\n        for (int i = 1; i < arr.Count;
    ++i) {\n            if (arr[i] >= largest) {\n                largest = arr[i];\n
    \               minIndex = i;\n            }\n        }\n        if (minIndex
    == -1) {\n            return -1;\n        } else {\n            return minIndex;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e60c2ae3a53342dda678897059c9b33b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e60c2ae3a53342dda678897059c9b33b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        Debug.Assert(arr.Count
    > 1);\n        long current = 0;\n        long largest = arr.Single(x => x >=
    current).Max();\n        for (int i = 1; i < arr.Count; i++) {\n            current
    = arr[i];\n            if (current >= largest) {\n                largest = current;\n
    \           }\n        }\n        return largest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa20qb0d4.cs(21,24): error CS1929: ''long'' does not contain a definition
    for ''Max'' and the best extension method overload ''ParallelEnumerable.Max(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIndex = -2;\n        for (int i = 1; i < arr.Count; ++i) {\n            if
    (arr[i - 1] >= arr[i])\n                maxIndex = i;\n        }\n        if (maxIndex
    >= 0)\n            return maxIndex;\n        else\n            return -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr == null || arr.Count == 0)\n            return -1;\n        long maxIndex
    = arr.Count - 1;\n        long currentIndex = arr[0];\n        for (int i = 0;
    i < arr.Count; i++) {\n            if (currentIndex >= arr[i])\n                currentIndex--;\n
    \           else {\n                if (currentIndex > maxIndex)\n                    maxIndex
    = currentIndex - 1;\n                currentIndex = arr[i];\n            }\n        }\n
    \       return maxIndex;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22138db6aebe46fab199bd1839fc85c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <22138db6aebe46fab199bd1839fc85c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    min = arr.Min();\n        int max = arr.Max();\n        for (int i = 0; i < arr.Count
    - 1; i++) {\n            if (max <= arr[i + 1]) {\n                return i;\n
    \           }\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj8yjrcjm.cs(19,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj8yjrcjm.cs(20,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    result = 0;\n        long prev = 0;\n        for (int i = 0; i < arr.Count - 1;
    i++) {\n            if (arr[i] > prev) {\n                result = Math.Max(result,
    i);\n            }\n            prev = arr[i];\n        }\n        return result
    == -1 ? -1 : arr.Count - 1 - result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80d6813405764382b79ba8e03bbfb1e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80d6813405764382b79ba8e03bbfb1e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    i = arr.IndexOf(arr.First());\n        if (i >= 0) {\n            return i;\n
    \       }\n\n        i = arr.IndexOf(arr.Last());\n        if (i >= 0) {\n            return
    i;\n        }\n\n        int[] arr = arr.ToArray();\n        i = arr.IndexOf(arr.Last());\n
    \       if (i >= 0) {\n            return i;\n        }\n\n        return -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvls657e.cs(19,17): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpkvls657e.cs(19,29): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpkvls657e.cs(24,13): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpkvls657e.cs(24,25): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    /tmp/tmpkvls657e.cs(29,15): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkvls657e.cs(30,17): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    prev = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if
    (arr[i] <= prev) {\n                return i;\n            }\n            prev
    = arr[i];\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01341c8cdcd44d6bbe29167c8679fb40>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00001] in <01341c8cdcd44d6bbe29167c8679fb40>:0
    \n  at Problem.Main (System.String[] args) [0x0009b] in <01341c8cdcd44d6bbe29167c8679fb40>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00001] in <01341c8cdcd44d6bbe29167c8679fb40>:0
    \n  at Problem.Main (System.String[] args) [0x0009b] in <01341c8cdcd44d6bbe29167c8679fb40>:0
    \n"
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr == null || arr.Count == 0) return -1L;\n        long maxVal = arr.Last();\n
    \       int maxIdx = -1;\n        long curIdx = maxIdx;\n        long curVal =
    maxVal;\n        for (int i = 1; i < arr.Count; i++) {\n            long curVal
    = arr[i];\n            if (curVal > maxVal) {\n                if (curIdx != -1
    && curVal > arr[curIdx]) {\n                    maxIdx = curIdx;\n                    maxVal
    = curVal;\n                } else {\n                    return -1;\n                }\n
    \           }\n            if (curVal == maxVal) {\n                maxIdx = i;\n
    \           }\n            curIdx = i;\n        }\n        return maxIdx;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxc8yg8g8.cs(25,18): error CS0136: A local or parameter named ''curVal''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpxc8yg8g8.cs(27,50): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxc8yg8g8.cs(28,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    maxIndex = (from i in Enumerable.Range(0, arr.Count - 1) where arr[i] < arr[i
    + 1] select i).Max();\n        if (maxIndex != arr.Count - 1)\n            return
    maxIndex;\n        else\n            return -1;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43eb50131783456e96eca171c8b88e80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <43eb50131783456e96eca171c8b88e80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    If the list is empty return -1\n        if (arr.Count == 0) return -1;\n        //
    If the list contains only one element return -1\n        if (arr.Count == 1) return
    -1;\n        // If the list contains only one element return -1\n        if (arr[0]
    == 1) return -1;\n        // Create a variable which will hold the maximum and
    the index of the\n        // largest number\n        long max = 0;\n        int
    maxInd = -1;\n        // Loop through all the elements except the first element\n
    \       for (int i = 1; i < arr.Count; i++) {\n            // Loop through all
    the elements except the ith element\n            int curInd = i;\n            int
    curVal = arr[i];\n            // Compare every element of the list with the current
    element by\n            // using a loop until curVal <= arr[i-1] and curVal >=
    arr[i] - 1\n            // If the current element is bigger than arr[i-1] and
    lesser than\n            // arr[i] - 1 then update maxInd and max\n            while
    (curVal < arr[curInd]) {\n                curInd++;\n                curVal =
    arr[curInd];\n            }\n            // If curVal is greater than max then
    update maxInd and max\n            if (curVal > max) {\n                max =
    curVal;\n                maxInd = curInd;\n            }\n        }\n        //
    Return the max index and max value\n        return maxInd;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprn3ia62z.cs(33,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprn3ia62z.cs(40,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0)\n            return -1;\n        long max = (long)arr.First();\n
    \       for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] >= max)\n
    \               max = arr[i];\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5673301cd8ff403888942040653863f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5673301cd8ff403888942040653863f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = arr.First();\n        long index = 0;\n        bool found = false;\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (max < arr[i]) {\n                max
    = arr[i];\n                index = i;\n                found = false;\n            }\n
    \           if (arr[i] == max) {\n                found = true;\n            }\n
    \       }\n        if (found) {\n            return index;\n        } else {\n
    \           return -1L;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8762801483584e1189a8b4e4f8e8bdb2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8762801483584e1189a8b4e4f8e8bdb2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    index = 0;\n        long largest = -2;\n        foreach (var i in arr.Skip(1))
    {\n            if (i < largest) {\n                largest = i;\n                index
    = arr.IndexOf(i);\n            }\n        }\n        return index;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8304bfb56fa4cd3815d8d48b24a51f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8304bfb56fa4cd3815d8d48b24a51f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = arr.GetRange(arr.IndexOf(arr.Last()) - 1).Last();\n        long cur = arr.First();\n
    \       foreach (var x in arr.Skip(1)) {\n            if (x >= cur) {\n                cur
    = x;\n            }\n            else {\n                cur = max;\n            }\n
    \       }\n        return cur;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoiyfrys_.cs(19,23): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''count'' of ''List<long>.GetRange(int, int)''

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = -1;\n        var maxIndex = 0;\n        arr.Sort();\n        for (var i
    = 0; i < arr.Count - 1; i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max
    = arr[i];\n                maxIndex = i;\n            }\n        }\n        return
    (maxIndex == arr.Count - 1) ? -1 : (long)maxIndex;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvnhc3qey.cs(24,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    This solution works because there are a number of different ways a\n        //
    list could be arranged. \n        // We start with a sorted array of all the elements.\n
    \       var sorted = arr.OrderBy(x => x);\n        long largest = sorted[0];\n
    \       int idx;\n        // We iterate through the array, finding the largest
    number that is not greater\n        // than the previous largest number in the
    array. If we find it then we know that\n        // the array is not arranged in
    increasing order.\n        for (idx = 0; idx < sorted.Count - 1; idx++) {\n            if
    (sorted[idx] > largest) {\n                largest = sorted[idx];\n            }\n
    \       }\n        if (sorted.Count > 1) {\n            if (sorted[idx] > largest)
    {\n                largest = sorted[idx];\n            }\n        }\n        //
    If we didn't find a suitable largest number then we know that it is\n        //
    larger than any previous value in the array and so there is no good\n        //
    place to insert a new element.\n        if (largest == -1) return -1;\n        //
    We now know where we can insert our new element. \n        // The idea is that
    the first time we get to insert the element we want to\n        // insert it at,
    we will try to insert it at the position of where it would\n        // otherwise
    be if we were to insert it at the end. \n        // If that position would not
    be possible then we will try to insert it at\n        // the end and so on until
    we find one that works. \n        // We can do that by iterating through all the
    possible indices until we find\n        // one that works.\n        int lastIdx
    = sorted.Count - 1;\n        long lastLargest = sorted[lastIdx];\n        int
    position;\n        for (position = lastIdx; position > 0; position--) {\n            if
    (sorted[position] > lastLargest) {\n                lastLargest = sorted[position];\n
    \               lastIdx = position;\n            }\n        }\n        // If we
    found no suitable place to insert the new number then we know that it\n        //
    is not possible. \n        if (lastIdx == -1) return -1;\n        sorted[lastIdx]
    = largest;\n        // We now have our new element in sorted. We can return it\n
    \       return largest;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeohu60tu.cs(23,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpeohu60tu.cs(28,29): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpeohu60tu.cs(29,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpeohu60tu.cs(30,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpeohu60tu.cs(33,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpeohu60tu.cs(34,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpeohu60tu.cs(35,27): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpeohu60tu.cs(50,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpeohu60tu.cs(51,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpeohu60tu.cs(54,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpeohu60tu.cs(55,31): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<long>''

    /tmp/tmpeohu60tu.cs(62,9): error CS0021: Cannot apply indexing with [] to an expression
    of type ''IOrderedEnumerable<long>''

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    max = 0;\n        int index = -1;\n        foreach (var item in arr)\n        {\n
    \           if (item >= max)\n            {\n                max = item;\n                index
    = arr.IndexOf(item);\n            }\n        }\n        return index;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqcmr0v5m.cs(25,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = arr.First();\n        var index = 0;\n\n        foreach(var number in arr.Skip(1))
    {\n            if (number > max) {\n                return -1;\n            }\n
    \           else {\n                max = number;\n                index++;\n
    \           }\n        }\n\n        return index;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39da6118f1a247b1a7dcfb5dadf575c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39da6118f1a247b1a7dcfb5dadf575c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = arr.First();\n        int i = 0;\n        foreach (long num in arr) {\n
    \           max = Math.Max(max, num);\n            i++;\n            if (max >=
    num) {\n                i = -1;\n            }\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6661ab1edbdc48d49f5b1ed18ff81798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6661ab1edbdc48d49f5b1ed18ff81798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    TODO: Implement your algorithm here!\n        long maxIndex = arr.Count - 1;\n
    \       bool isTrue = true;\n        for (int i = 0; i < arr.Count - 1; i++) {\n
    \           isTrue = false;\n            if (arr[i] >= arr[maxIndex]) {\n                isTrue
    = true;\n                maxIndex = i;\n            }\n            if (isTrue)
    {\n                break;\n            }\n        }\n        if (maxIndex == -1)
    {\n            return -1;\n        } else {\n            return maxIndex;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ywoelm7.cs(24,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Solution here\n        var prevElem = arr[0];\n        var prevElemIndex = -1;\n
    \       var index = -1;\n        for (int i = 1; i < arr.Count; i++) {\n            if
    (arr[i] > prevElem) {\n                prevElem = arr[i];\n                prevElemIndex
    = i;\n            }\n        }\n        if (prevElemIndex == -1) {\n            return
    -1;\n        }\n        return prevElemIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13a765f45d774e949895a78bc6889352>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13a765f45d774e949895a78bc6889352>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = arr.First();\n        bool flag = true;\n        foreach (long i in
    arr.Skip(1))\n        {\n            if (i > largest)\n            {\n                largest
    = i;\n                flag = true;\n            }\n            else\n            {\n
    \               flag = false;\n            }\n        }\n        return flag ?
    largest : -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4c729b7494142bfb457d9887ef04d6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4c729b7494142bfb457d9887ef04d6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = -1;\n        foreach (var item in arr) {\n            if (item > max) {\n
    \               max = item;\n            }\n        }\n        return max;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj92ru3mx.cs(22,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015893
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = -1;\n        bool found = false;\n        for(int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] <= largest) {\n                found = true;\n
    \               continue;\n            }\n            if (found) {\n                largest
    = arr[i];\n            }\n        }\n        return largest;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b8571898b344918a9744c5509f30a92>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b8571898b344918a9744c5509f30a92>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIndex = 0L;\n        if (arr.Count > 0) {\n            long curIndex = arr.FirstOrDefault();\n
    \           if (curIndex < 1L) {\n                return -1L;\n            }\n
    \           long curVal = 0L;\n            for (int i = 1; i < arr.Count; i++)
    {\n                curVal = curIndex - arr[i - 1];\n                if (curVal
    >= 0) {\n                    curIndex = arr[i - 1];\n                } else {\n
    \                   maxIndex = i;\n                    break;\n                }\n
    \           }\n        }\n        return maxIndex;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b3b602efa03497685f5793e5892f12e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b3b602efa03497685f5793e5892f12e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0) {\n            return -1;\n        }\n        if (arr.Count ==
    1) {\n            return arr[0];\n        }\n        long largest = arr[0];\n
    \       int left = 0;\n        int right = arr.Count - 1;\n        while (left
    < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid]
    > largest) {\n                largest = arr[mid];\n            } else {\n                if
    (arr[mid] > largest - 1) {\n                    right = mid;\n                }
    else {\n                    left = mid;\n                }\n            }\n        }\n
    \       return largest;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6sr8zd8m.cs(30,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6sr8zd8m.cs(31,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6sr8zd8m.cs(33,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6sr8zd8m.cs(34,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6sr8zd8m.cs(36,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        Debug.Assert(arr.Count
    > 0);\n        long max = -1L;\n        long last = -1L;\n        long pos = -1L;\n
    \       long currentMax = -1L;\n        foreach (long x in arr) {\n            pos
    = arr.IndexOf(x);\n            if (pos > 0 && arr[pos - 1] <= x) {\n                currentMax
    = x;\n                last = arr[pos - 1];\n            }\n            max = Math.Max(max,
    currentMax);\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph35skqtl.cs(26,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmph35skqtl.cs(28,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = arr.Single();\n        var max = arr.FirstOrDefault(e => e <= max);\n        if
    (max == null || max < 0)\n            return -1;\n        var c = arr.Count(e
    => e < max);\n        return arr.IndexOf(max, c-1);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9yis3tcv.cs(20,13): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    /tmp/tmp9yis3tcv.cs(21,13): warning CS0472: The result of the expression is always
    ''false'' since a value of type ''long'' is never equal to ''null'' of type ''long?''

    '
  timestamp: 1660015893
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0) return -1;\n        long max = -1;\n        int index = -1;\n
    \       long currentMax = arr[0];\n        for (int i = 1; i < arr.Count; i++)
    {\n            if (arr[i] < currentMax) {\n                currentMax = arr[i];\n
    \               index = i;\n            }\n        }\n        if (index != -1)
    {\n            max = currentMax;\n        }\n        return max;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7651c314eab41069bfff880c17c8544>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7651c314eab41069bfff880c17c8544>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0)\n            return -1;\n        if (arr.Count == 1)\n            return
    arr[0];\n        int maxIndex = 0;\n        long maxVal = arr[0];\n        for(int
    i = 1; i < arr.Count; i++) {\n            if (arr[i] > maxVal) {\n                if
    (maxIndex == 0)\n                    maxIndex = i;\n                maxVal = arr[i];\n
    \           } else if (arr[i] < maxVal) {\n                if (maxIndex != 0)
    {\n                    return -1;\n                }\n                maxVal =
    arr[i];\n            }\n        }\n        return maxIndex;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fedeb5f1cf18450d95d1c2c05f4fe63d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fedeb5f1cf18450d95d1c2c05f4fe63d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        double
    smallest = Math.Min(arr[0], arr[1]);\n        int smallestIndex = 0;\n        double
    largest = Math.Max(arr[0], arr[1]);\n        int largestIndex = arr.Count - 1;\n
    \       for (int i = 0; i < arr.Count - 1; ++i) {\n            if (arr[i] >= smallest
    && arr[i] < largest) {\n                if (arr[i] != smallest) {\n                    smallestIndex
    = i;\n                }\n                if (arr[i] != largest) {\n                    largestIndex
    = i;\n                }\n            }\n        }\n        return smallestIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d895fc121594f5a9e85c19a651bb15c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d895fc121594f5a9e85c19a651bb15c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    x = arr.Count - 1;\n        long a = arr.Last();\n        long b = arr.First();\n
    \       if (b > a)\n            return -1;\n        long xx = a;\n        long
    yy = b;\n        while (true) {\n            int m = (x + y) / 2;\n            long
    m = arr[m];\n            if (m > xx) {\n                x = m;\n                xx
    = m;\n            } else {\n                yy = m;\n            }\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b1w8w56.cs(27,26): error CS0103: The name ''y'' does not exist in the
    current context

    /tmp/tmp1b1w8w56.cs(28,18): error CS0128: A local variable or function named ''m''
    is already defined in this scope

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        return
    arr.OrderByDescending(x => x).First(x => x < arr[0]) ? arr.IndexOf(x) + 1 : -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm5_y20yw.cs(19,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpm5_y20yw.cs(19,83): error CS0103: The name ''x'' does not exist in the
    current context

    '
  timestamp: 1660015893
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    ans = -1;\n        foreach (long x in arr) {\n            int index = arr.FindIndex((y)
    => (y == x) || (y > x));\n            if (index > -1) {\n                if (ans
    < 0) {\n                    ans = index;\n                }\n                if
    (index != arr.Count - 1) {\n                    ans = Math.Max(ans, index - 1);\n
    \               }\n            }\n        }\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdf2670c91340658ed208166390740c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdf2670c91340658ed208166390740c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    minIndex = FindLargestIndexLessThanOrEqualToPrevious(arr);\n        if (minIndex
    < 0) return -1L;\n        return arr[minIndex];\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiynkffiu.cs(19,24): error CS0103: The name ''FindLargestIndexLessThanOrEqualToPrevious''
    does not exist in the current context

    '
  timestamp: 1660015893
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = -1L;\n        long curr = -1L;\n\n        for (int i = 0; i < arr.Count
    - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                curr = arr[i];\n
    \               max = arr[i + 1];\n            }\n        }\n\n        if (curr
    != -1L) {\n            return curr;\n        } else {\n            return max;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fb7eab45cb04e629227ae3ade2ba6d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fb7eab45cb04e629227ae3ade2ba6d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIndex = -1;\n        long maxValue = 0;\n        for (int i = 0; i < arr.Count;
    ++i) {\n            long value = arr[i];\n            if (value > maxValue) {\n
    \               maxValue = value;\n                maxIndex = i;\n            }\n
    \       }\n        return maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e30a31b334024aff81186fbd5968bb09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e30a31b334024aff81186fbd5968bb09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        Debug.Assert(arr.Count
    > 0);\n        Debug.Assert(arr.Count > 1);\n        long largest = 0;\n        long
    cur = 0;\n        bool first = true;\n        foreach (long item in arr) {\n            if
    (item.Equals(cur)) {\n                if (first) {\n                    largest
    = item;\n                    first = false;\n                }\n                else
    {\n                    if (item > largest) {\n                        largest
    = item;\n                    }\n                }\n            }\n            else
    {\n                if (first == false) {\n                    largest = item;\n
    \               }\n            }\n            cur = item;\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49c17df62c9b47ea8d812df4f8f06b79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49c17df62c9b47ea8d812df4f8f06b79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    res = -1;\n        var minIndex = arr.Last();\n        var minValue = arr.Last();\n
    \       arr.Reverse();\n        for (int i = 0; i < arr.Count; i++)\n        {\n
    \           if (arr[i] > minValue)\n            {\n                minValue =
    arr[i];\n                minIndex = i;\n            }\n        }\n        if (minIndex
    != -1)\n        {\n            arr.RemoveAt(minIndex);\n        }\n        else\n
    \       {\n            res = minIndex;\n        }\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr4shbnlq.cs(33,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr4shbnlq.cs(37,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0)\n            return -1;\n        long cur = 0;\n        long
    maxCur = arr.First();\n        foreach (var i in arr)\n        {\n            if
    (i <= maxCur)\n            {\n                cur = i;\n                maxCur
    = i;\n            }\n        }\n        return maxCur;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae6b48a0473446d786df925e7810b69d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae6b48a0473446d786df925e7810b69d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count <= 1) {\n            return -1;\n        }\n        long retVal = -1;\n
    \       bool found = false;\n        foreach (long e in arr) {\n            if
    (e > retVal) {\n                retVal = e;\n                found = true;\n            }\n
    \       }\n        return found ? retVal : -1;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee327156568a4352a4a6cd80252b9a83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee327156568a4352a4a6cd80252b9a83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    leftIndex = -1L;\n        long rightIndex = -1L;\n        int leftCount = 0;\n
    \       int rightCount = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] > arr[leftIndex]) {\n                rightCount++;\n                if
    (rightCount == 1) {\n                    leftIndex = i;\n                    rightIndex
    = i - 1;\n                }\n            } else {\n                leftCount++;\n
    \               if (leftCount == 1) {\n                    rightIndex = i;\n                    leftIndex
    = i + 1;\n                }\n            }\n        }\n\n        if (leftCount
    > rightCount) {\n            return leftIndex;\n        } else {\n            return
    rightIndex;\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeq3onnw1.cs(24,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015893
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = arr.Aggregate((i1, i2) => i1 > i2 ? i1 : i2);\n        int max_i = 0;\n
    \       for (int i = 1; i < arr.Count; i++)\n            if (arr[i] <= max)\n
    \               max = arr[i];\n                else\n                max_i = i;\n
    \       return max_i;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e79bca84d7d743ed97f708f4c1d74413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e79bca84d7d743ed97f708f4c1d74413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = arr.Count - 1;\n        long currentMax = arr.Last();\n        if (arr.Count
    > 0 && arr[currentMax] >= currentMax) {\n            max = currentMax;\n        }\n
    \       return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn0vqfk5k.cs(21,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    result = 0;\n        arr.Sort();\n        arr.Reverse();\n        long i = arr.Count
    - 1;\n        long prevVal = arr[i];\n        for (int j = 1; j < arr.Count; j++)
    {\n            if (arr[i] < arr[j]) {\n                result = j;\n                prevVal
    = arr[i];\n            }\n            i++;\n        }\n        return (prevVal
    < arr[i]) ? result : -1;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyw49sf4p.cs(23,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpyw49sf4p.cs(25,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpyw49sf4p.cs(27,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpyw49sf4p.cs(31,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    last = arr.Last();\n        var first = arr.First();\n\n        return last >=
    first ? last : -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59e3f46f6c9b4826a535023b5b76dd2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59e3f46f6c9b4826a535023b5b76dd2a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIndex = 0;\n        int maxDiff = arr.Count - 1;\n        int i;\n\n        //
    Keep traversing the list until we have found the index that would\n        //
    be greater than or equal to the next element\n        for (i = 0; i < arr.Count;
    i++) {\n            if (arr[i + 1] >= arr[i]) {\n                maxIndex = i
    + 1;\n            }\n            else if (arr[i + 1] < arr[i] && maxDiff > 0)
    {\n                maxDiff--;\n            }\n        }\n        return maxIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00012] in <b5082efa2997408c85a3ee561d3f4b47>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <b5082efa2997408c85a3ee561d3f4b47>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00012] in <b5082efa2997408c85a3ee561d3f4b47>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <b5082efa2997408c85a3ee561d3f4b47>:0
    \n"
  stdout: ''
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    res = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (i >
    0)\n                if (arr[i] >= arr[i-1])\n                    return i;\n                else\n
    \                   return -1;\n            else\n                if (arr[i] >=
    arr[0])\n                    return i;\n                else\n                    return
    -1;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68360e62ef984843978034aa22af5ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68360e62ef984843978034aa22af5ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count() > 0) {\n            var maxIndex = arr.IndexOf(arr[0]);\n            for
    (var i = 1; i < arr.Count(); i++) {\n                if (arr[i] >= arr[0]) {\n
    \                   maxIndex = i;\n                } else {\n                    return
    maxIndex;\n                }\n            }\n        }\n        return -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2e97ca2a7d54dc888a265045b6cae8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2e97ca2a7d54dc888a265045b6cae8c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Solve the problem using a for loop.\n        int largest = -1;\n        int index
    = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            // If the element
    is not greater than or equal to the previous\n            // element then store
    its index and reset index.\n            if (arr[i] <= arr[index]) {\n                index
    = i;\n            }\n        }\n\n        // Return the index of the first element
    greater than or equal to the\n        // previous element. If the previous element
    is the last in the list then\n        // return -1.\n        return largest ==
    -1 ? -1 : (arr[index] + 1);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0efa2fe29214ad3b58c27238c3250df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0efa2fe29214ad3b58c27238c3250df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count < 1) return -1;\n        long largest = 0;\n        long idx = 1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[idx])
    {\n                if (idx == arr.Count) return -1;\n                largest =
    idx;\n                idx = i;\n            }\n        }\n        if (largest
    != idx) largest = idx;\n        return largest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8hrvryxo.cs(23,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    sorted = arr.OrderByDescending(i => i).ToList();\n        if (arr.Count < 1 ||
    sorted.Count < 1)\n            return -1;\n        if (sorted[0] == sorted[1])
    {\n            if (sorted[0] > sorted[sorted.Count - 1]) {\n                return
    -1;\n            }\n        }\n        long index = 0;\n        while (index <
    arr.Count - 1) {\n            if (arr[index] > sorted[index]) {\n                return
    index;\n            }\n            index++;\n        }\n        return -1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3kldqfef.cs(29,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3kldqfef.cs(29,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    res = -1;\n        long max = -1;\n        bool first = true;\n        foreach
    (long num in arr) {\n            if (first) {\n                first = false;\n
    \               max = num;\n            }\n            if (num >= max) {\n                max
    = num;\n            }\n        }\n        if (max != -1) {\n            res =
    arr.IndexOf(max);\n        }\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be456dd6f2e04142ad82feac4636d807>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be456dd6f2e04142ad82feac4636d807>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIndex = -1;\n        long index = -1;\n        long curr = arr[0];\n        //
    Loop through all elements in the list. Keep track of the largest index\n        //
    which is not greater than the current element and which has the largest value\n
    \       // so far.\n        for (index = 1; index < arr.Count; index++) {\n            if
    (curr > arr[index]) {\n                maxIndex = index;\n            }\n            curr
    = arr[index];\n        }\n        return maxIndex;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6vco6st.cs(26,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpt6vco6st.cs(29,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    res = -1;\n        long prev = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] <= prev) {\n                res = i;\n            }\n
    \           prev = arr[i];\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00004] in <609d424a9e284ea28c420dde0fc93a73>:0
    \n  at Problem.Main (System.String[] args) [0x0009b] in <609d424a9e284ea28c420dde0fc93a73>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00004] in <609d424a9e284ea28c420dde0fc93a73>:0
    \n  at Problem.Main (System.String[] args) [0x0009b] in <609d424a9e284ea28c420dde0fc93a73>:0
    \n"
  stdout: ''
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    maxIndex = 0;\n        foreach (long num in arr)\n        {\n            if (num
    > arr[maxIndex])\n            {\n                maxIndex = maxIndex + 1;\n            }\n
    \       }\n        if (maxIndex < 0)\n        {\n            return -1;\n        }\n
    \       else\n        {\n            return maxIndex;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e15568bf93e4ce4815832d1c089bd61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e15568bf93e4ce4815832d1c089bd61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = -1;\n        long candidate = -1;\n        long last = -1;\n        foreach(long
    el in arr) {\n            // Get current candidate.\n            candidate = el;\n
    \           // Get current largest index\n            largest = Math.Max(candidate,
    last);\n            // Check if candidate is greater than or equal to the next
    element.\n            if (el >= arr[largest])\n                last = largest;\n
    \       }\n        return largest;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyr71ip07.cs(28,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015894
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    maxIndex = arr.FindIndex(x => !arr.TakeWhile(y => y <= x).Any());\n        return
    (maxIndex == arr.Count - 1) ? -1 : maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d30a620334e848d5903a100d7a236c38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d30a620334e848d5903a100d7a236c38>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        return
    CanArrangeHelper(arr, 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppdtn62v7.cs(19,16): error CS0103: The name ''CanArrangeHelper'' does not
    exist in the current context

    '
  timestamp: 1660015894
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        arr.Sort();\n
    \       return arr.Aggregate((a, x) => a > x ? x : -1);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99aa9c42a4da44458d81862c758d9fb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99aa9c42a4da44458d81862c758d9fb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = arr.First();\n        long minIndex = arr.IndexOf(arr.First());\n        foreach
    (long i in arr.Skip(1))\n            if (i <= minIndex) {\n                minIndex
    = i;\n            }\n        else {\n            if (i == minIndex + 1) {\n                return
    largest;\n            }\n            largest = i;\n        }\n        return -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <670bd189156f4d07b84ea82a3b0dcdcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <670bd189156f4d07b84ea82a3b0dcdcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count < 1) return -1;\n\n        var max = arr.First();\n        var result
    = -1;\n\n        for (var i = 1; i < arr.Count; i++) {\n            if (arr[i]
    <= max) {\n                max = arr[i];\n                result = i;\n            }\n
    \       }\n\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c9a1f458a52436393cf7bba3898e567>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c9a1f458a52436393cf7bba3898e567>:0
    \n"
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    maxIndex = 0;\n        var maxValue = default(long);\n        if (arr.Count ==
    1) {\n            return arr.First();\n        }\n        for (var i = 1; i <
    arr.Count; i++) {\n            if (arr.ElementAt(i) <= arr.ElementAt(maxIndex))
    {\n                return -1;\n            }\n            if (arr.ElementAt(i)
    > maxValue) {\n                maxValue = arr.ElementAt(i);\n                maxIndex
    = i;\n            }\n        }\n        return maxIndex;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b06a64e169b34b82b2dbcdb64c71c12a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b06a64e169b34b82b2dbcdb64c71c12a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        bool
    flag = false;\n        long maxVal = arr[0];\n        int index = 0;\n        foreach
    (var x in arr.Skip(1)) {\n            if (x > maxVal) {\n                if (flag)
    {\n                    return -1;\n                }\n                maxVal =
    x;\n                index = 1;\n            }\n            if (flag) {\n                return
    index;\n            }\n            if (x < maxVal) {\n                flag = true;\n
    \               index++;\n            }\n        }\n        return index;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfb191e2b8224094b7599e24fa9a016f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfb191e2b8224094b7599e24fa9a016f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Write your solution here\n        if (arr.Count == 0) return -1;\n        if (arr.Count
    == 1) return arr[0];\n        long max = arr[0];\n        for (int i = 1; i <
    arr.Count; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d48da43fe184324b26be2598f9126fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d48da43fe184324b26be2598f9126fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    minI = arr.IndexOf(arr.Min());\n        var minValue = arr[minI];\n        for
    (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] <= minValue)\n                return
    minI;\n            else if (arr[i] > minValue && arr[i + 1] < minValue)\n                return
    i;\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f0dcae8d3ef487d8d29351055fb69b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f0dcae8d3ef487d8d29351055fb69b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    n = arr.Count;\n        if (n == 0)\n            return -1;\n        int maxIndex
    = -1;\n        for (int index = 0; index < n-1; index++) {\n            if (arr[index]
    > arr[index + 1]) {\n                if (maxIndex == -1)\n                    maxIndex
    = index;\n            }\n        }\n        if (maxIndex == -1)\n            return
    -1;\n        int leftIndex = maxIndex - 1;\n        int rightIndex = n - 1;\n
    \       while (leftIndex >= 0 && arr[leftIndex] <= arr[rightIndex]) {\n            leftIndex--;\n
    \           rightIndex--;\n        }\n        if (leftIndex == -1)\n            return
    maxIndex;\n        else if (rightIndex == -1)\n            return maxIndex + 1;\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01247bf77e314e4a807da0c4feb2a8e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01247bf77e314e4a807da0c4feb2a8e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = arr.Last();\n        long index = 0;\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n                index
    = i;\n            }\n        }\n        if (max == arr.First()) {\n            return
    -1;\n        }\n        return index;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aded6912ecc43dfb687ec23cdfb4df8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aded6912ecc43dfb687ec23cdfb4df8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr == null || !arr.Any())\n            return -1;\n\n        long ret = -1;\n
    \       long prev = -2;\n        foreach (var item in arr) {\n            if (ret
    != -1 && item > prev)\n                return -1;\n            prev = item;\n
    \           ret = item;\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <972bbe9483db48e0939c9bc73f4815ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <972bbe9483db48e0939c9bc73f4815ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxI = -1;\n        long maxIndexI = -1;\n        bool first = true;\n        foreach
    (var item in arr.OrderByDescending(i=>i)) {\n            long itemI = arr.IndexOf(item);\n
    \           if (itemI >= 0) {\n                if (first) {\n                    maxIndexI
    = itemI;\n                } else {\n                    if (itemI <= maxI) {\n
    \                       return itemI;\n                    }\n                    else
    {\n                        maxIndexI = itemI;\n                    }\n                }\n
    \           }\n            else {\n                return itemI;\n            }\n
    \           first = false;\n        }\n        return maxIndexI;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9f0c56b3f364ef5a1d9c35e79d390ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a9f0c56b3f364ef5a1d9c35e79d390ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    current = arr.First();\n        var currentIndex = 1;\n        for (var i = 1;
    i < arr.Count; i++) {\n            if (arr[i] <= current) {\n                currentIndex++;\n
    \           }\n            else {\n                break;\n            }\n        }\n
    \       if (currentIndex == arr.Count) {\n            return -1;\n        }\n
    \       return current;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce7eae5e18934478be0bcf780412c1b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce7eae5e18934478be0bcf780412c1b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = arr.Last();\n        long maxPrev = -1;\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (max <= arr[i]) {\n                return -1;\n            }\n
    \           if (maxPrev == -1) {\n                maxPrev = arr[i];\n                max
    = arr[i];\n            }\n            if (arr[i] != max) {\n                return
    i;\n            }\n        }\n        return maxPrev;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dba76f7efc764b6f8cd42fd0a25f274b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dba76f7efc764b6f8cd42fd0a25f274b>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x00001] in <dba76f7efc764b6f8cd42fd0a25f274"
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIndex = 0;\n        int startIndex = -1;\n        int lastIndex = -1;\n        int
    i = 4;\n        for (int j = 0; j < arr.Count; j += i) {\n            if (arr.ElementAtOrDefault(j
    + i) != arr.ElementAtOrDefault(j)) {\n                startIndex = j;\n            }\n
    \           int currentIndex = j;\n            for (int k = j; k < arr.Count;
    k += i) {\n                if (arr.ElementAtOrDefault(k + i) > arr.ElementAtOrDefault(j
    + i)) {\n                    currentIndex = k;\n                }\n            }\n
    \           if (currentIndex != lastIndex) {\n                maxIndex = currentIndex;\n
    \               lastIndex = currentIndex;\n            }\n        }\n        if
    (lastIndex == -1) {\n            return -1;\n        }\n        return maxIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c922c49223be4c31887707484d2b5a6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c922c49223be4c31887707484d2b5a6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0)\n            return -1;\n        var minElement = arr.First();\n
    \       var maxElement = arr.First();\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] < minElement)\n                minElement = arr[i];\n
    \           if (arr[i] > maxElement)\n                maxElement = arr[i];\n        }\n
    \       int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] < minElement) {\n                minIndex = i;\n                break;\n
    \           }\n        }\n        int maxIndex = (arr.Count - 1);\n        if
    (maxIndex < minIndex)\n            return -1;\n        for (int i = minIndex +
    1; i <= maxIndex; i++) {\n            if (arr[i] < minElement) {\n                minIndex
    = i;\n                break;\n            }\n        }\n        return minIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dcbf5a9f1b824e00ad443c2cd0537c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dcbf5a9f1b824e00ad443c2cd0537c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr == null || arr.Count == 0) {\n            return -1;\n        }\n        var
    firstMax = arr.First();\n        var maxIndex = arr.FindIndex(x => x <= firstMax);\n
    \       if (maxIndex < 0) {\n            return -1;\n        }\n        long curMax
    = arr[maxIndex];\n        for (int i = maxIndex - 1; i >= 0; i--) {\n            if
    (arr[i] <= curMax) {\n                maxIndex = i;\n                curMax =
    arr[i];\n            }\n        }\n        return maxIndex;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ab7c87805d84ec395f54ca0322984cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ab7c87805d84ec395f54ca0322984cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr == null || arr.Count == 0) return -1L;\n        var maxIndex = 0;\n        for
    (int i = 1; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i - 1]) {\n
    \               if (arr[i] > arr[maxIndex]) {\n                    maxIndex =
    i;\n                }\n            } else {\n                if (arr[i] > arr[maxIndex])
    {\n                    maxIndex = -1;\n                    break;\n                }\n
    \           }\n        }\n        if (maxIndex > 0) {\n            return maxIndex;\n
    \       } else {\n            return -1L;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b075fa64f0b443d39b79324f4bd87ad4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b075fa64f0b443d39b79324f4bd87ad4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largestIndex = -1;\n        long prevElem = arr.First();\n        foreach (long
    elem in arr) {\n            if (elem <= prevElem) {\n                largestIndex
    = elem;\n            }\n            prevElem = elem;\n        }\n        if (largestIndex
    != -1) {\n            largestIndex--;\n        }\n        return largestIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8003518d2f9343bba0dab87feeb43f2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8003518d2f9343bba0dab87feeb43f2e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    > arr[largest]) largest = i;\n        }\n        return largest;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps7rgviyl.cs(21,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = arr.First();\n        long maxIndex = 0;\n\n        for (int i = 0; i <
    arr.Count - 1; i++) {\n            if (arr[i] < max && arr[i + 1] >= max) {\n
    \               max = arr[i + 1];\n                maxIndex = i;\n            }\n
    \       }\n\n        return maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c37050bb230f40c2a999c273167f43ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c37050bb230f40c2a999c273167f43ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i]
    >= arr[i + 1]) {\n                max = i;\n            }\n        }\n        if
    (max == -1) {\n            return -1;\n        }\n        return max;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e19e0a1e4fa42978becd50d06cd4f47>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e19e0a1e4fa42978becd50d06cd4f47>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    previous = -1;\n        var index = -1;\n        foreach (var item in arr) {\n
    \           if (item <= previous) {\n                index = -1;\n                break;\n
    \           } else if (item > previous) {\n                index = arr.IndexOf(previous);\n
    \               break;\n            }\n            previous = item;\n        }\n
    \       return index == -1 ? -1 : index + 1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2g3m_p1j.cs(29,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Sort descending\n        arr = arr.OrderByDescending(x => x).ToList();\n        int
    i = 1;\n        while (i < arr.Count && arr[i] <= arr[i-1]) {\n            i++;\n
    \       }\n        if (i >= arr.Count) {\n            return -1;\n        } else
    {\n            return i;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cea783c45224933bd4962c43635d788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9cea783c45224933bd4962c43635d788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = -1;\n        long cur = 0;\n        long curmax = -1;\n        foreach (long
    a in arr) {\n            curmax = Math.Max(a, curmax);\n            if (a > cur)
    {\n                max = Math.Max(a, max);\n                if (curmax >= cur)\n
    \                   max = -1;\n                cur = a;\n                curmax
    = a;\n            }\n        }\n        return max;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60dcbcb6a59843c4b481368f32927391>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60dcbcb6a59843c4b481368f32927391>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = arr.OrderByDescending(e => e).First();\n        if (arr.Count() > 1)\n            return
    -1;\n        var current = new List<long>();\n        for (var i = 1; i < arr.Count();
    i++) {\n            if (arr[i] <= max) {\n                current.Add(arr[i]);\n
    \               max = arr[i];\n            }\n        }\n        return current.Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9dc5f83553624f5782c05c85828f330a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9dc5f83553624f5782c05c85828f330a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    index = arr.First();\n        long maxIndex = 0;\n        if (arr.Count > 0) {\n
    \           long maxSoFar = arr.Last();\n            int i = 0;\n            for
    (int i = 1; i < arr.Count; i++) {\n                if (arr[i] > maxSoFar) {\n
    \                   maxIndex = i;\n                    maxSoFar = arr[i];\n                }\n
    \           }\n        }\n        if (maxIndex != arr.Count) {\n            return
    maxIndex;\n        } else {\n            return -1;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprqnozmd1.cs(24,22): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmprqnozmd1.cs(23,17): warning CS0219: The variable ''i'' is assigned but
    its value is never used

    '
  timestamp: 1660015895
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = 0;\n        foreach (long a in arr) {\n            max = Math.Max(a, max);\n
    \       }\n\n        long index = -1;\n        bool found = false;\n        foreach
    (long a in arr) {\n            if (found && a >= max) {\n                index
    = arr.IndexOf(a);\n                break;\n            }\n\n            if (a
    >= max) {\n                found = true;\n                index = arr.IndexOf(a);\n
    \           }\n        }\n\n        return index;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc55e74da4ea4f37b6792d97331117cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc55e74da4ea4f37b6792d97331117cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count < 2) {\n            return -1;\n        }\n        long currentMax
    = arr[0];\n        long maxIndex = 0;\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] <= currentMax) {\n                currentMax =
    arr[i];\n            } else {\n                maxIndex = i;\n            }\n
    \       }\n        return maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5088b71b70347659ee0df553a6b35c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5088b71b70347659ee0df553a6b35c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    max = -1;\n        var index = arr.IndexOf(0);\n        arr.RemoveAt(0);\n        for(int
    i = 0; i < arr.Count; i++){\n            max = Math.Max(max, arr[i]);\n            index
    = Math.Max(index, arr.IndexOf(arr[i]));\n        }\n        return max;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd8ac5ud2.cs(23,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015895
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long[]
    a = arr.ToArray();\n        long[] b = new long[a.Length - 1];\n        long maxIdx
    = 0;\n        long maxElem = a[0];\n        for (int i = 0; i < a.Length; i++)
    {\n            if (a[i] > maxElem) {\n                maxElem = a[i];\n                maxIdx
    = i;\n            }\n            b[i] = a[i + 1];\n        }\n        for (int
    i = 0; i < a.Length - 2; i++) {\n            if (b[i] < maxElem && b[i + 1] >
    maxElem) {\n                return maxIdx;\n            }\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.CanArrange (System.Collections.Generic.List`1[T]
    arr) [0x00038] in <0c2dd8f7f9ab475982b59c4be7e25093>:0 \n  at Problem.Main (System.String[]
    args) [0x00017] in <0c2dd8f7f9ab475982b59c4be7e25093>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.CanArrange (System.Collections.Generic.List`1[T] arr) [0x00038]
    in <0c2dd8f7f9ab475982b59c4be7e25093>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <0c2dd8f7f9ab475982b59c4be7e25093>:0 \n"
  stdout: ''
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    res = -1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i]
    < arr[i + 1]) {\n                res = Math.Max(res, i + 1);\n            }\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8913069af67240968b4742ab76d7ec19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8913069af67240968b4742ab76d7ec19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = arr.FirstOrDefault();\n        foreach (long i in arr.Skip(1)) {\n            if
    (i > largest)\n                return -1;\n            if (i < largest)\n                largest
    = i;\n        }\n        return largest;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2772299e6564cac99ff2dd8329c70b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2772299e6564cac99ff2dd8329c70b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        List<long>
    arranged = new List<long>();\n        for(int i = 0; i < arr.Count - 1; i++) {\n
    \           long index = arr[i];\n            while(index > arr[i + 1]) {\n                index
    = arr[i + 1];\n                arranged.Add(arr[i + 1]);\n            }\n            arranged.Add(index);\n
    \       }\n        if(arranged.Count > 0)\n            return arranged[arranged.Count
    - 1];\n        else\n            return -1L;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77fbb36de12f42138d0a482d70eca368>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77fbb36de12f42138d0a482d70eca368>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    result = (from index in Enumerable.Range(0, arr.Count - 1)\n                      let
    currentElem = arr[index]\n                      let prevElem = arr.Skip(index
    - 1).First()\n                      let temp = (currentElem + prevElem) % arr.Count\n
    \                     where temp > 0\n                      select temp).Max();\n\n
    \       return result == arr.Count ? -1 : result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c8730b18d1647018cbe0a399e4200c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c8730b18d1647018cbe0a399e4200c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxVal = arr.First();\n        long curVal;\n        long previousVal;\n        bool
    found = false;\n        for (int i = 1; i < arr.Count; i++) {\n            curVal
    = arr[i];\n            previousVal = arr[i-1];\n            if (curVal <= previousVal)
    {\n                found = true;\n            }\n            if (found) {\n                maxVal
    = curVal;\n            }\n        }\n        return maxVal;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfcd1a2ad1bf4274bcbd5484a2210d4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfcd1a2ad1bf4274bcbd5484a2210d4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxVal = arr.Max();\n        long maxIndex = 0;\n        int prevIndex = 0;\n
    \       bool foundMax = false;\n        for (int i = 0; i < arr.Count - 1; ++i)
    {\n            if (arr[i] >= maxVal) {\n                prevIndex = i;\n                maxIndex
    = i;\n                foundMax = true;\n            } else if (arr[i] == maxVal)
    {\n                if (foundMax) {\n                    return prevIndex + 1;\n
    \               }\n                maxIndex = prevIndex;\n                foundMax
    = true;\n            }\n        }\n        return maxIndex + 1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80fcf7e28bc549b18cef33dd07b7e2fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80fcf7e28bc549b18cef33dd07b7e2fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    biggest = arr[0];\n        long last = 1;\n        bool hasValue = false;\n        for
    (long i = 2; i <= arr.Count; i++) {\n            if (arr[i] < arr[i-1])\n                last++;\n
    \           else\n                last = 1;\n            if (last != 1 || biggest
    > arr[i])\n                biggest = last;\n            hasValue = true;\n        }\n
    \       return hasValue ? biggest : -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4oynzwzk.cs(23,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4oynzwzk.cs(23,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4oynzwzk.cs(27,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    maxIndex = -1;\n        double maxValue = Double.MaxValue;\n        double currentValue
    = Double.MaxValue;\n        long currentIndex;\n        foreach (long elem in
    arr) {\n            currentValue = currentIndex = (double)elem;\n            if
    (currentValue <= currentIndex) {\n                maxIndex = -1;\n                return
    -1;\n            }\n            if (currentValue > currentIndex) {\n                maxIndex
    = currentIndex;\n                maxValue = currentValue;\n            }\n        }\n
    \       return maxIndex;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpatc65wji.cs(24,43): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpatc65wji.cs(30,28): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0) {\n            return -1;\n        }\n        long maxIndex =
    -1;\n        for (int i = 1; i < arr.Count; ++i) {\n            if (arr[i] <=
    arr[i - 1]) {\n                maxIndex = i;\n            }\n        }\n        return
    maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        return
    arr.FindIndex(x=>x>arr.LastOrDefault()?-1:x==arr.FirstOrDefault()?arr.Last():x).FirstOrDefault();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppwzasomj.cs(19,33): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmppwzasomj.cs(19,33): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    max = arr[0].Value;\n        long maxIndex = 0;\n\n        for (int i = 1; i <
    arr.Count; i++) {\n            long current = arr[i].Value;\n            if (current
    > max) {\n                max = current;\n                maxIndex = i;\n            }\n
    \       }\n\n        if (maxIndex == arr.Count - 1) {\n            return -1;\n
    \       }\n        return maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyfxn4lju.cs(19,27): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpyfxn4lju.cs(23,35): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    arr = arr.OrderBy(x => x).ToArray();\n        for (int i = 1; i < arr.Length;
    i++) {\n            if (arr[i] > arr[i - 1]) {\n                return i;\n            }\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_09t42xb.cs(19,13): error CS0136: A local or parameter named ''arr'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp_09t42xb.cs(19,19): error CS0841: Cannot use local variable ''arr'' before
    it is declared

    '
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    >= largest && i != 0) {\n                largest = arr[i];\n            }\n        }\n
    \       if (largest == 0) {\n            return -1;\n        }\n        for (int
    i = 0; i < arr.Count; i++) {\n            if (arr[i] <= largest) {\n                return
    i;\n            }\n        }\n        return arr.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4f696f84b464f58bce78a9a4f809848>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4f696f84b464f58bce78a9a4f809848>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    ret = -1;\n        long previous = arr[arr.Count - 1];\n        if (arr.Count
    != 0) {\n            foreach (long x in arr) {\n                if (x > previous)
    {\n                    ret = x;\n                }\n                previous =
    x;\n            }\n        }\n        return ret;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8603518c51240e496681c561eabcdce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8603518c51240e496681c561eabcdce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    maxIndex = arr.Count() - 1;\n        var result = -1;\n        foreach (var val
    in arr) {\n            if (val >= arr[maxIndex]) {\n                if (result
    == -1) {\n                    result = maxIndex;\n                } else if (maxIndex
    - result > 1) {\n                    result = maxIndex;\n                }\n            }\n
    \           ++maxIndex;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0001f] in <ec63041c336542e48884a5eebd533483>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <ec63041c336542e48884a5eebd533483>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0001f] in <ec63041c336542e48884a5eebd533483>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <ec63041c336542e48884a5eebd533483>:0
    \n"
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        bool
    found = false;\n        long maxIndex = -1;\n\n        foreach (var x in arr)
    {\n            if (max < x) {\n                max = x;\n                maxIndex++;\n
    \           } else if (x == max) {\n                maxIndex++;\n            }
    else {\n                found = true;\n                break;\n            }\n
    \       }\n\n        if (found == false) {\n            return -1;\n        }
    else {\n            return maxIndex;\n        }\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdz8ey9nc.cs(23,17): error CS0103: The name ''max'' does not exist in the
    current context

    /tmp/tmpdz8ey9nc.cs(24,17): error CS0103: The name ''max'' does not exist in the
    current context

    /tmp/tmpdz8ey9nc.cs(26,29): error CS0103: The name ''max'' does not exist in the
    current context

    '
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        return
    CanArrange(arr, 0, arr.Count - 1);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7jwtblg.cs(19,16): error CS1501: No overload for method ''CanArrange''
    takes 3 arguments

    '
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    candidate = arr.First();\n        long max = candidate;\n        for (int i =
    0; i < arr.Count; i++) {\n            var element = arr[i];\n            if (element
    <= max) {\n                max = element;\n                candidate = element;\n
    \           }\n        }\n        return candidate;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f08a864f11264ba4b709341b868c4a69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f08a864f11264ba4b709341b868c4a69>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0) {\n            return -1;\n        }\n        long largest =
    arr[0];\n        long prev = 0;\n        for (int i = 1; i < arr.Count; i++) {\n
    \           if (arr[i] > largest) {\n                largest = prev;\n            }\n
    \           prev = arr[i];\n        }\n        return largest;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1a54616e3bb48689deab432a1ce1c66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1a54616e3bb48689deab432a1ce1c66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0) return -1;\n        if (arr.Count == 1) return arr[0];\n        var
    maxIndex = arr.Count - 1;\n        for (int i = 1; i < arr.Count; i++) {\n            if
    (arr[i] >= arr[maxIndex]) {\n                maxIndex = i;\n            }\n        }\n
    \       return maxIndex;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fcca35abb134282bbcc1a3cfe4826ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fcca35abb134282bbcc1a3cfe4826ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        List<long>
    temp = new List<long>();\n        long current = 0;\n        int index = 0;\n
    \       long max = -1;\n        arr.ForEach(x => {\n            if (x > current)
    {\n                temp.Add(current);\n                current = x;\n            }
    else {\n                if (current > max) {\n                    max = current;\n
    \               }\n            }\n            temp.Add(x);\n        });\n        if
    (temp[0] != 0) {\n            temp.RemoveAt(0);\n        }\n        index = temp[0];\n
    \       return index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsnec54h8.cs(37,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    index = arr.Count;\n        for (index--; (index >= 0) && arr[index] >= arr[index
    - 1]; index--);\n        return (index >= 0) ? index : -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0001e] in <fe180d9ce75e4ec69182f05be8b2e29c>:0
    \n  at Problem.Main (System.String[] args) [0x0003c] in <fe180d9ce75e4ec69182f05be8b2e29c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0001e] in <fe180d9ce75e4ec69182f05be8b2e29c>:0
    \n  at Problem.Main (System.String[] args) [0x0003c] in <fe180d9ce75e4ec69182f05be8b2e29c>:0
    \n"
  stdout: ''
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    maxIndex = 0;\n        var index = 0;\n        for (int i = 0; i < arr.Count;
    i++) {\n            index = i;\n            if (arr[i] > arr[index]) {\n                maxIndex
    = i;\n            }\n        }\n        return (maxIndex == 0 ? -1 : maxIndex);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b411c92663c94cf5bf0de58a51368168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b411c92663c94cf5bf0de58a51368168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Write your code here.\n        if (arr.Count == 0)\n            return -1;\n        if
    (arr.Count == 1)\n            return arr[0];\n        long result = arr[arr.Count
    - 1];\n        for (long i = 1; i < arr.Count; i++)\n        {\n            if
    (arr[i] > result)\n            {\n                result = arr[i];\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ewd1d2v.cs(27,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4ewd1d2v.cs(29,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count == 0)\n            return -1;\n        var max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            var tmp = arr[i];\n            if
    (tmp > max) {\n                max = tmp;\n            }\n        }\n        return
    max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c1b0607132a486480de71d72b8b054c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c1b0607132a486480de71d72b8b054c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    result = 0;\n        foreach (var i in arr)\n        {\n            if (i > result)\n
    \           {\n                result = i;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68838416eb9944dfa21cd17ed52c05bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68838416eb9944dfa21cd17ed52c05bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    sorted = arr.OrderBy(x => x);\n        int maxIndex = 0;\n        foreach (var
    i in sorted) {\n            maxIndex = i;\n        }\n        if (maxIndex > 0)
    {\n            return maxIndex;\n        }\n        return -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7yy_50ah.cs(22,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count <= 0)\n            return -1L;\n        var highest = arr.First();\n
    \       for (int i = 1; i < arr.Count; i++)\n            if (arr[i] < highest)\n
    \               return -1L;\n            if (arr[i] > highest)\n                highest
    = arr[i];\n        return highest;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_s5qzdtw.cs(25,21): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmp_s5qzdtw.cs(26,31): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1660015896
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    left = 0;\n        int right = arr.Count - 1;\n        long candidate = -1;\n
    \       while (left < right) {\n            candidate = Math.Max(arr[left], arr[right]);\n
    \           if (arr[left] == candidate || arr[right] == candidate) left++;\n            else
    if (candidate > arr[left]) right = left - 1;\n            else if (candidate <
    arr[right]) left = right + 1;\n            else return candidate;\n        }\n
    \       return candidate;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1d5caffabfc4ac49e77c0ff08c4a7f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a1d5caffabfc4ac49e77c0ff08c4a7f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr == null || arr.Count == 0) return -1L;\n        long max = arr[0];\n        int
    maxIndex = 0;\n        for (int i = 1; i < arr.Count; i++)\n        {\n            if
    (max < arr[i])\n            {\n                max = arr[i];\n                maxIndex
    = i;\n            }\n        }\n        return maxIndex;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8a8043dde04418db175ecf250fb966a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8a8043dde04418db175ecf250fb966a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Return the index with the largest value which is not greater than\n        //
    or equal to the previous element.\n        long largest_index = -1;\n        long
    largest_val = arr.Last();\n\n        foreach (long val in arr) {\n            if
    (val > largest_val) {\n                largest_index = largest_val;\n                largest_val
    = val;\n            } else if (val == largest_val) {\n                largest_index
    = val;\n            }\n        }\n        return largest_index;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2049c706a434a9b8ae046bc3fab55f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2049c706a434a9b8ae046bc3fab55f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    maxIndex = 0;\n        long max = 0;\n\n        arr.Sort();\n\n        for (int
    i = 0; i < arr.Count; i++) {\n            long current = arr[i];\n            long
    previousItem = arr[i-1];\n\n            if (current <= previousItem) {\n                return
    -1;\n            }\n\n            if (i == arr.Count - 1) {\n                if
    (current > max) {\n                    max = current;\n                    maxIndex
    = i;\n                }\n            }\n        }\n\n        return maxIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0001b] in <8bff3bc44b0e48a19fd58ac0e15ce380>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <8bff3bc44b0e48a19fd58ac0e15ce380>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0001b] in <8bff3bc44b0e48a19fd58ac0e15ce380>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <8bff3bc44b0e48a19fd58ac0e15ce380>:0
    \n"
  stdout: ''
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    maxIndex = 0;\n        long index = 0;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] >= arr[index]) {\n                maxIndex = i;\n
    \               break;\n            }\n            index++;\n        }\n        return
    (maxIndex == -1) ? -1L : maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppfvwrk02.cs(22,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015896
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    maxIndex = 0;\n        long maxVal = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] > maxVal) {\n                maxVal = arr[i];\n
    \               maxIndex = i;\n            }\n        }\n        if (maxVal ==
    0) return -1;\n        if (maxIndex > 0) return maxIndex - 1;\n        return
    maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da609e498b414d92a7f82f897e02fb71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da609e498b414d92a7f82f897e02fb71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count <= 0) {\n            return -1;\n        }\n        if (arr.Count ==
    1) {\n            return arr[0];\n        }\n        long largest = arr.Last();\n
    \       long middle = arr.Count / 2;\n        for (int i = 1; i < middle; i++)
    {\n            if (arr[i] > largest) {\n                largest = arr[i];\n            }\n
    \       }\n        if (arr[middle] >= largest) {\n            return -1;\n        }\n
    \       return middle-1;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5vmrztrq.cs(32,17): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    ans = -1;\n        var index = 0;\n        while (index+1 < arr.Count) {\n            if
    (arr[index] > arr[index+1]) {\n                index++;\n            }\n            else
    {\n                ans = arr[index];\n                index = index;\n            }\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvlcertnl.cs(26,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvlcertnl.cs(27,17): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1660015897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    prev = -1L;\n        long maxIndex = arr.Count - 1;\n        long current;\n        foreach
    (var elem in arr) {\n            if (elem < prev) {\n                return -1;\n
    \           }\n            if (elem > prev) {\n                prev = (long) elem;\n
    \               maxIndex = arr[0] > prev ? maxIndex : arr.Count - 1;\n            }\n
    \       }\n        return maxIndex;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6be893c3e45c4e12bcf20dc397499240>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6be893c3e45c4e12bcf20dc397499240>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    index = -1;\n        var nextIndex = 0;\n        while (nextIndex < arr.Count
    && arr[nextIndex] < arr[nextIndex - 1]) {\n            nextIndex++;\n        }\n
    \       if (nextIndex != arr.Count) {\n            index = nextIndex;\n            nextIndex++;\n
    \           while (nextIndex < arr.Count && arr[nextIndex] >= arr[nextIndex -
    1]) {\n                nextIndex++;\n            }\n        }\n        return
    index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0001d] in <138eed9358064ae49333207732944c3d>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <138eed9358064ae49333207732944c3d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CanArrange
    (System.Collections.Generic.List`1[T] arr) [0x0001d] in <138eed9358064ae49333207732944c3d>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <138eed9358064ae49333207732944c3d>:0
    \n"
  stdout: ''
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        return
    arr\n            .Select((item, idx) => new { item, idx })\n            .Where(x
    => x.item <= x.item + 1).Aggregate((x, y) => x < y ? x : y).idx;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr45fpjx6.cs(21,67): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''<anonymous type: long item, int idx>'' and ''<anonymous type:
    long item, int idx>''

    '
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        return
    arr.Skip(1).Aggregate(arr.IndexOf((x) => x > arr[0]),\n                                     (x,
    i) => x.CompareTo(arr[i] - 1), -1);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnq9dx_d.cs(19,50): error CS1660: Cannot convert lambda expression to
    type ''long'' because it is not a delegate type

    /tmp/tmpjnq9dx_d.cs(20,64): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    TODO: Write your code in C# 6.0 with .NET Fiddle here\n        var a = arr.ToArray();\n
    \       var max = a[0];\n        var res = -1;\n        for (var i = 0; i < a.Length;
    i++) {\n            if (max >= a[i]) continue;\n            res = i;\n            max
    = a[i];\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8df2e6b9db204814908d324f51417c82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8df2e6b9db204814908d324f51417c82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Write your answer here\n        // Declare and initialize variables\n        int
    current = 0;\n        int previous = 0;\n        long largest = int.MaxValue;\n
    \       // Look for greatest index\n        for (int i = 0; i < (arr.Count - 1);
    i++) {\n            if (arr[i] > arr[i + 1]) {\n                current++;\n                previous
    = current;\n                if (current > largest) {\n                    largest
    = current;\n                }\n            } else {\n                current++;\n
    \               previous = current;\n            }\n        }\n        // No element
    was found, return -1\n        if (largest == int.MaxValue) {\n            return
    -1;\n        }\n        // No element was found, return -1\n        if (arr[largest]
    > largest) {\n            return largest;\n        }\n        // We found an element
    greater than or equal to previous element,\n        // so return the index of
    the first such element that is less than\n        // or equal to previous element
    + 1\n        int first;\n        do {\n            first = previous;\n            previous++;\n
    \       } while (arr[first] < arr[previous]);\n        return first + 1;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxs84vusz.cs(42,17): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        var
    maxIndex = -1;\n        var maxElement = arr[0];\n        for (int i = 0; i <
    arr.Count - 1; i++) {\n            if (arr[i] > maxElement) {\n                maxIndex
    = i;\n                maxElement = arr[i];\n            }\n        }\n        return
    maxIndex > -1 ? maxIndex : -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d74366d57403453a91c1b0c4f2d7a2d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d74366d57403453a91c1b0c4f2d7a2d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    res = arr.FirstOrDefault(x => x >= arr.First());\n        if (res != -1)\n            return
    res;\n        else\n            return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7dd83f05f8a4eaabcdee332fde0a2ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7dd83f05f8a4eaabcdee332fde0a2ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largest = -1, maxIndex = -1;\n        for (int i = 1; i < arr.Count; i++) {\n
    \           if (arr[i] < arr[i - 1]) {\n                largest = arr[i - 1];\n
    \               maxIndex = i;\n            }\n        }\n        return maxIndex
    >= 0 ? maxIndex : largest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        bool
    found = false;\n        long maxIndex = -1;\n        long largestIndex = 0;\n
    \       for (int i = 0; i < arr.Count && !found; i++) {\n            long thisIndex
    = i;\n            if (thisIndex < arr.Count - 1) {\n                if (arr[i]
    < arr[i + 1]) {\n                    largestIndex = Math.Max(thisIndex, largestIndex);\n
    \               }\n            }\n            else {\n                if (arr[i]
    > arr[largestIndex]) {\n                    largestIndex = Math.Max(thisIndex,
    largestIndex);\n                }\n            }\n        }\n        return largestIndex;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==
    (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,
    (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,
    (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new
    List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps6b4dz5j.cs(30,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmps6b4dz5j.cs(20,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    '
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if
    (arr.Count <= 1)\n            return -1;\n        long maxIndex = 0;\n        long
    minIndex = arr.Count - 1;\n        while (minIndex > -1) {\n            long currentMaxIndex
    = maxIndex;\n            for (int index = 0; index < arr.Count; index++) {\n                if
    (arr[index] <= arr[currentMaxIndex])\n                    break;\n                else\n
    \                   currentMaxIndex = index;\n            }\n            if (maxIndex
    == currentMaxIndex)\n                return -1;\n            maxIndex = currentMaxIndex;\n
    \           minIndex--;\n        }\n        return maxIndex;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n
    \   Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)4L, (long)2L,
    (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjqgh2qru.cs(26,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        long
    largestIndex = -1;\n        long lastElementIndex = arr.Count-1;\n        foreach
    (long i in arr) {\n            while (lastElementIndex > 0 && arr[i] >= arr[lastElementIndex])\n
    \               lastElementIndex--;\n            if (lastElementIndex == -1)\n
    \               return largestIndex;\n            if (arr[i] < arr[lastElementIndex])\n
    \               largestIndex = i;\n            lastElementIndex--;\n        }\n
    \       return largestIndex;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr95ke_5b.cs(22,48): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr95ke_5b.cs(22,58): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr95ke_5b.cs(26,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr95ke_5b.cs(26,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        int
    low = 0;\n        int high = arr.Count - 1;\n        while (low <= high) {\n            int
    mid = (low + high) / 2;\n            int result = arr[mid];\n            if (result
    >= arr[mid-1]) return mid;\n            if (result < arr[mid+1]) return -1;\n
    \           if (result == arr[mid]) { low = mid + 1; continue; }\n            high
    = mid - 1;\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeeqybcw7.cs(23,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015897
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which returns the largest index of an element
    which\n    // is not greater than or equal to the element immediately preceding
    it. If\n    // no such element exists then return -1. The given list will not
    contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    //
    (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n
    \   // (-1L)\n    public static long CanArrange(List<long> arr) {\n        //
    Write your solution here\n        var largest = arr.First();\n        var largestIndex
    = 0;\n        var currentIndex = 1;\n        while (currentIndex <= arr.Count
    - 1) {\n            if (arr[currentIndex] <= largest) {\n                if (arr[currentIndex]
    == arr[currentIndex - 1]) {\n                    largest = arr[currentIndex];\n
    \                   largestIndex = currentIndex;\n                }\n                currentIndex++;\n
    \           } else {\n                currentIndex++;\n            }\n        }\n
    \       return largestIndex;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))) == (3L));\n    Debug.Assert(CanArrange((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new
    List<long>(new long[]{(long)4L, (long)8L, (long)5L, (long)7L, (long)3L}))) ==
    (4L));\n    Debug.Assert(CanArrange((new List<long>())) == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11a033e9de3f4e429cbc93f890d50307>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11a033e9de3f4e429cbc93f890d50307>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015897
