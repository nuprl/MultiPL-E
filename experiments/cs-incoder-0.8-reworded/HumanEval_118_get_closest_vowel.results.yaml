language: cs
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] { 'a', 'e', 'i', 'o', 'u' };\n        var vowelsCount = vowels.Count();\n\
    \        var vowelCount = word.Count(w => vowels.Contains(w));\n        if (vowelsCount\
    \ < 1 || vowelCount < 1) {\n            return string.Empty;\n        }\n    \
    \    var resultIndex = 0;\n        var lastVowelIndex = vowelsCount - 1;\n   \
    \     foreach (var vowel in vowels) {\n            var vowelIndex = word.IndexOf(vowel);\n\
    \            var vPossibles = new[] { vowelIndex + 1, vowelIndex - 1, vowelIndex\
    \ + vowelCount - 1 };\n            foreach (var vPossible in vPossibles) {\n \
    \               var vPossibleIndex = vPossible;\n                if (vPossibleIndex\
    \ < 0 || vPossibleIndex > word.Length) {\n                    continue;\n    \
    \            }\n                var current = vowelIndex;\n                while\
    \ (current < vPossibleIndex) {\n                    var currentString = word.Substring(current);\n\
    \                    if (!vowels.Contains(currentString)) {\n                \
    \        break;\n                    }\n                    current++;\n     \
    \           }\n                if (current == vPossibleIndex) {\n            \
    \        if (last != last) {\n                        resultIndex = current;\n\
    \                    }\n                    break;\n                }\n      \
    \      }\n            last = vowelIndex;\n        }\n        return word == null\
    \ ? string.Empty : word.Substring(resultIndex, 1);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcuzbulyo.cs(43,26): error CS1929: ''char[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<string>(ParallelQuery<string>,
    string)'' requires a receiver of type ''ParallelQuery<string>''

    /tmp/tmpcuzbulyo.cs(49,25): error CS0103: The name ''last'' does not exist in
    the current context

    /tmp/tmpcuzbulyo.cs(49,33): error CS0103: The name ''last'' does not exist in
    the current context

    /tmp/tmpcuzbulyo.cs(55,13): error CS0103: The name ''last'' does not exist in
    the current context

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string s = \"\
    \";\n        if (word.Length == 0) {\n            return s;\n        }\n     \
    \   string vowels = \"aeiouAEIOU\";\n        foreach (char c in word) {\n    \
    \        if (vowels.IndexOf(c) != -1) {\n                s += c;\n           \
    \ }\n        }\n        return s;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82831527665d4237922f5394778db124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82831527665d4237922f5394778db124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiouAEIOU\";\n        string vowels_upper = vowels.ToUpper();\n       \
    \ string vowels_lower = vowels.ToLower();\n        char[] arr = word.ToCharArray();\n\
    \        List<int> positions = new List<int>();\n        positions.AddRange(Enumerable.Range(0,\
    \ arr.Length));\n        positions.Sort();\n        int k = positions.Count -\
    \ 1;\n        for (int i = 0; i < arr.Length; i++) {\n            int j = (i +\
    \ 1) % arr.Length;\n            if (arr[i] == 'z') continue;\n            if (arr[i]\
    \ == 'Z') continue;\n            char a = arr[i];\n            char b = arr[j];\n\
    \            if (b == 'z') continue;\n            if (b == 'Z') continue;\n  \
    \          if ((a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z') || (b >= 'a' &&\
    \ b <= 'z') || (b >= 'A' && b <= 'Z')) {\n                if (vowels_upper.IndexOf(b)\
    \ != -1 || vowels_lower.IndexOf(b) != -1 || vowels.IndexOf(b) != -1 || positions.IndexOf(i)\
    \ != k && positions.IndexOf(j) != k) {\n                    return new string(new\
    \ char[] { arr[i] });\n                }\n            }\n        }\n        return\
    \ new string('');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi17yom26.cs(46,27): error CS1011: Empty character literal

    '
  timestamp: 1659976662
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || !word.Any()) return \"\";\n        int k = word.Length - 1;\n      \
    \  int vowelCount = 0;\n        for (int i = word.Length - 1; i >= 0; i--) \n\
    \        {\n            // Check last character first\n            if (vowelCount\
    \ > 0 && word[i] != word[k])\n            {\n                // check last character\
    \ is consonant\n                if (char.IsLower(word[i]) || word[i] == 'A' ||\
    \ word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U')\n    \
    \            {\n                    k = i;\n                    vowelCount++;\n\
    \                    break;\n                }\n            }\n            //\
    \ Check first character next\n            if (vowelCount > 0 && word[i] != word[k])\n\
    \            {\n                if (char.IsLower(word[i]) || word[i] == 'a' ||\
    \ word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n    \
    \            {\n                    k = i;\n                    vowelCount++;\n\
    \                    break;\n                }\n            }\n        }\n\n \
    \       if (vowelCount == 0) return \"\";\n\n        // find closest vowel\n \
    \       int lowerIndex = word.IndexOf(word[k], 1);\n        int upperIndex = word.IndexOf(word[k],\
    \ -1);\n        bool isLowerVowel = word[k - 1] == 'A' || word[k - 1] == 'a' ||\
    \ word[k - 1] == 'E' || word[k - 1] == 'e' || word[k - 1] == 'I' || word[k - 1]\
    \ == 'i' || word[k - 1] == 'O' || word[k - 1] == 'o' || word[k - 1] == 'U' ||\
    \ word[k - 1] == 'u';\n        bool isUpperVowel = word[k + 1] == 'A' || word[k\
    \ + 1] == 'a' || word[k + 1] == 'E' || word[k + 1] == 'e' || word[k + 1] == 'I'\
    \ || word[k + 1] == 'i' || word[k + 1] == 'O' || word[k + 1] == 'o' || word[k\
    \ + 1] == 'U' || word[k + 1] == 'u';\n        bool isVowel = isLowerVowel ? isUpperVowel\
    \ : isLowerVowel && !isUpperVowel;\n        if (isVowel) return word[k - 1];\n\
    \        if (isLowerVowel && isUpperVowel) return word[k + 1];\n        if (isLowerVowel)\
    \ return word[k - 1];\n        if (isUpperVowel) return word[k + 1];\n       \
    \ return word[k - 1];\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnd2z1yzb.cs(60,29): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpnd2z1yzb.cs(61,50): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpnd2z1yzb.cs(62,34): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpnd2z1yzb.cs(63,34): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpnd2z1yzb.cs(64,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string[] vowels\
    \ = { \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\" };\n\
    \        Array.Sort(vowels);\n        int length = word.Length;\n        if (length\
    \ < 2) {\n            return \"\";\n        }\n        for (int i = length - 1;\
    \ i >= 0; i--) {\n            if (vowels[length - i] == word[i]) {\n         \
    \       if (i - 1 > 0) {\n                    return vowels[i - 1];\n        \
    \        }\n                else {\n                    return \"\";\n       \
    \         }\n            }\n        }\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnzzqalqi.cs(31,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        Dictionary<string,\
    \ int> dict = word.ToUpperInvariant().Trim()\n                .Select((x, i) =>\
    \ new { Letter = x, Index = i })\n                .GroupBy(x => x.Letter)\n  \
    \              .ToDictionary(x => x.Key, x => x.Count());\n\n        IEnumerable<string>\
    \ vowels = \n            from i in Enumerable.Range(1, word.Length - 1)\n    \
    \        select word[i]; \n\n        return vowels.OrderByDescending(x => dict[x]).FirstOrDefault();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkvinmk7.cs(24,40): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.Dictionary<char,
    int>'' to ''System.Collections.Generic.Dictionary<string, int>''

    /tmp/tmpnkvinmk7.cs(30,13): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<char>''
    to ''System.Collections.Generic.IEnumerable<string>''. An explicit conversion
    exists (are you missing a cast?)

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] { 'a', 'e', 'i', 'o', 'u' };\n\n        int[] vowelIndices;\n        int\
    \ startIndex = word.Length - 1;\n\n        int index = vowels.IndexOf(word[startIndex]);\n\
    \        if (index != -1) {\n            vowelIndices = new int[] {index, index\
    \ + 1, index + 2, index + 3, index + 4, index + 5, index + 6 };\n        } else\
    \ {\n            vowelIndices = new int[0];\n        }\n\n        if (vowelIndices.Length\
    \ == 0) {\n            return string.Empty;\n        }\n\n        var min = vowelIndices[0];\n\
    \n        for (int i = 0; i < vowelIndices.Length; i++) {\n            if (vowelIndices[i]\
    \ != min + 1) {\n                continue;\n            }\n\n            if (vowels[i]\
    \ != word[startIndex]) {\n                return string.Empty;\n            }\n\
    \n            if (min == vowelIndices.Length - 1) {\n                return word[min];\n\
    \            }\n\n            min = vowelIndices[i + 1];\n        }\n        return\
    \ string.Empty;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1_2k3xhf.cs(29,28): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp1_2k3xhf.cs(52,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (string.IsNullOrEmpty(word))\n\
    \            return \"\";\n        var vowels = new[] { \"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"e\", \"\
    i\", \"o\", \"u\" };\n        var vowelsCount = (from vowel in vowels select vowel).ToList();\n\
    \        var vowelIndex = word.IndexOfAny(vowels, StringComparison.OrdinalIgnoreCase);\n\
    \        var vowelCount = vowelIndex == -1 ? 0 : (word.Length - vowelIndex) -\
    \ 1;\n        var vowelsCount = vowelsCount.Where(item => item != 0).ToList();\n\
    \        var vowelIndex1 = vowelIndex + 1;\n        var vowelIndex2 = vowelIndex1\
    \ + vowelsCount.Count - 1;\n        if (vowelIndex2 >= word.Length - 1)\n    \
    \        return \"\";\n        var consonantIndex1 = vowelIndex1 + 1;\n      \
    \  var consonantIndex2 = consonantIndex1 - vowelsCount.Count - 1;\n        var\
    \ consonantIndex3 = consonantIndex2 - vowelsCount.Count - 1;\n        if (consonantIndex2\
    \ <= 0)\n            return \"\";\n        if (consonantIndex3 <= 0)\n       \
    \     return \"\";\n        var consonantCount = (word.Length - consonantIndex2\
    \ - 1) - vowelsCount.Count - 1;\n        var consonantIndex4 = consonantIndex3\
    \ - vowelsCount.Count - 1;\n        var consonantCount2 = (word.Length - consonantIndex4\
    \ - 1) - vowelsCount.Count - 1;\n        var consonantIndex5 = consonantIndex4\
    \ - vowelsCount.Count - 1;\n        if (consonantIndex5 < 0)\n            return\
    \ \"\";\n        if (consonantCount2 < 0)\n            return \"\";\n        if\
    \ (consonantCount2 == 0)\n            return \"\";\n        if (consonantCount\
    \ > consonantCount2)\n            return \"\";\n        if (consonantCount < consonantCount2)\n\
    \            return \"\";\n        return vowels[vowelIndex];\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiiamlhdg.cs(28,42): error CS1503: Argument 1: cannot convert from ''string[]''
    to ''char[]''

    /tmp/tmpiiamlhdg.cs(28,50): error CS1503: Argument 2: cannot convert from ''System.StringComparison''
    to ''int''

    /tmp/tmpiiamlhdg.cs(30,13): error CS0128: A local variable or function named ''vowelsCount''
    is already defined in this scope

    /tmp/tmpiiamlhdg.cs(30,53): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // 1. Split\
    \ word into characters\n        char[] charArray = word.ToCharArray();\n     \
    \   // 2. Find left and right bounds for vowels\n        int leftVowel = 0;\n\
    \        int rightVowel = 0;\n        char leftVowelChar = charArray[0];\n   \
    \     char rightVowelChar = charArray[0];\n        for (int i = 1; i < charArray.Length;\
    \ i++) {\n            if (charArray[i] == 'a' || charArray[i] == 'e' || charArray[i]\
    \ == 'i' ||\n                charArray[i] == 'o' || charArray[i] == 'u' || charArray[i]\
    \ == 'y') {\n                leftVowel = i;\n                leftVowelChar = charArray[i];\n\
    \            } else if (charArray[i] == 'A' || charArray[i] == 'E' || charArray[i]\
    \ == 'I' ||\n                charArray[i] == 'O' || charArray[i] == 'U' || charArray[i]\
    \ == 'Y') {\n                rightVowel = i;\n                rightVowelChar =\
    \ charArray[i];\n            }\n        }\n        // 3. Return result if vowels\
    \ exists\n        if (leftVowel != 0 && rightVowel != 0) {\n            // find\
    \ next consonant that is not vowel \n            char leftConsonantChar = charArray[leftVowel];\n\
    \            bool isLeftConsonantVowel = false;\n            bool isRightConsonantVowel\
    \ = false;\n            for (int i = leftVowel + 1; i < charArray.Length; i++)\
    \ {\n                if (charArray[i] == leftVowelChar) {\n                  \
    \  isLeftConsonantVowel = true;\n                } else if (charArray[i] == rightVowelChar)\
    \ {\n                    isRightConsonantVowel = true;\n                }\n  \
    \          }\n            // find next consonant that is not vowel\n         \
    \   char rightConsonantChar = charArray[rightVowel];\n            bool isLeftConsonantVowel\
    \ = false;\n            bool isRightConsonantVowel = false;\n            for (int\
    \ i = rightVowel + 1; i < charArray.Length; i++) {\n                if (charArray[i]\
    \ == leftVowelChar) {\n                    isLeftConsonantVowel = true;\n    \
    \            } else if (charArray[i] == rightVowelChar) {\n                  \
    \  isRightConsonantVowel = true;\n                }\n            }\n         \
    \   // if consonants next to vowels exist and both are vowel\n            if (isLeftConsonantVowel\
    \ && isRightConsonantVowel) {\n                char leftConsonantChar = charArray[leftVowel];\n\
    \                char rightConsonantChar\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmvtm5kxm.cs(69,40): error CS1002: ; expected

    /tmp/tmpmvtm5kxm.cs(71,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpmvtm5kxm.cs(87,2): error CS1513: } expected

    '
  timestamp: 1659976662
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        bool found =\
    \ false;\n        int index = word.Length;\n        \n        while(index > 0\
    \ && !found) {\n            if (word[index] == \"A\" || word[index] == \"E\" ||\
    \ word[index] == \"I\" || word[index] == \"O\" || word[index] == \"U\") {\n  \
    \              if (index == word.Length - 1) {\n                    found = true;\n\
    \                }\n            } else if (word[index] == \"a\" || word[index]\
    \ == \"e\" || word[index] == \"i\" || word[index] == \"o\" || word[index] == \"\
    u\") {\n                if (index == word.Length - 1) {\n                    found\
    \ = true;\n                }\n            }\n            index--;\n        }\n\
    \n        if (found) {\n            return word.Substring(index);\n        } else\
    \ {\n            return \"\";\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplqo7by7a.cs(28,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(28,39): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(28,61): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(28,83): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(28,105): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(32,24): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(32,46): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(32,68): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(32,90): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmplqo7by7a.cs(32,112): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] {'A','a','E','e','I','i','O','o','U','u'};\n        var cons = new[] {'B','b','C','c','D','d','F','f','G','g','H','h','J','j','K','k',\n\
    \                          'M','m','N','n','P','p','Q','q','R','r','S','s','T','t','V','v',\n\
    \                          'W','w','X','x','Y','y','Z','z','a','b','c','d','e','f','g','h','i',\n\
    \                          'j','k','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \        string vowelsMatch = string.Empty;\n        string consonantsMatch =\
    \ string.Empty;\n        foreach(char c in word.ToCharArray()) {\n           \
    \ for(int i = cons.Length - 1; i >= 0; i--) {\n                bool isMatch =\
    \ (cons[i].Equals(c, StringComparison.OrdinalIgnoreCase));\n                if(isMatch)\
    \ {\n                    consonantsMatch = cons[i];\n                    vowelsMatch\
    \ = vowels[i];\n                    break;\n                }\n            }\n\
    \        }\n        return (vowelsMatch == string.Empty ? consonantsMatch : vowelsMatch);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaf_d7b43.cs(33,33): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpaf_d7b43.cs(35,39): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpaf_d7b43.cs(36,35): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Complete\
    \ the code\n        string vowel = \"\";\n        char vowel1;\n        char vowel2;\n\
    \        for (int i = 0; i < word.Length; i++) {\n            if (char.IsLetter(word[i]))\
    \ {\n                vowel1 = word[i];\n                break;\n            }\n\
    \        }\n        for (int j = word.Length - 1; j >= 0; j--) {\n           \
    \ if (char.IsLetter(word[j])) {\n                vowel2 = word[j];\n         \
    \       break;\n            }\n        }\n        if ((vowel1 >= 'a' && vowel1\
    \ <= 'z') || (vowel2 >= 'A' && vowel2 <= 'Z')) {\n            if (vowel1 >= vowel2)\
    \ {\n                vowel = vowel1;\n            }\n            else if (vowel1\
    \ <= vowel2) {\n                vowel = vowel2;\n            }\n        }\n  \
    \      return vowel;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwpez78x9.cs(42,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpwpez78x9.cs(45,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpwpez78x9.cs(40,14): error CS0165: Use of unassigned local variable ''vowel1''

    /tmp/tmpwpez78x9.cs(40,50): error CS0165: Use of unassigned local variable ''vowel2''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string result\
    \ = \"\";\n        foreach (char item in word) {\n            if (item == 'a'\
    \ || item == 'e' || item == 'i' || item == 'o' || item == 'u') {\n           \
    \     result = item;\n                break;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9f8dw4oi.cs(27,26): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int len = word.Length;\n\
    \        char[] vowels = new char[] { 'A', 'E', 'I', 'O', 'U' };\n\n        //\
    \ get first vowel\n        int pos1 = word.LastIndexOfAny(vowels, len - 1);\n\
    \        if (pos1 > 0) pos1 += 1;\n\n        // get last vowel\n        int pos2\
    \ = word.LastIndexOfAny(vowels, len - 1);\n        if (pos2 > 0) pos2 -= 1;\n\n\
    \        if (pos2 <= pos1) {\n            pos2 += 1;\n        }\n\n        if\
    \ (pos2 > pos1) {\n            int mid = (pos2 + pos1) / 2;\n            string\
    \ firstVowel = word.Substring(mid, 1);\n            return firstVowel;\n     \
    \   } else {\n            return \"\";\n        }\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9708d656ef0c4f0b97b0bfec28b192d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9708d656ef0c4f0b97b0bfec28b192d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"AEIOUaeiou\";\n        var vowelList = vowels.ToCharArray().ToList();\n  \
    \      var vowelIndexes = vowelList.FindIndex(x => x == word.Last());\n\n    \
    \    if (vowelIndexes == -1)\n            return \"\";\n        return vowelList[vowelIndexes\
    \ + 1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5hz5f6zh.cs(30,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int startIndex\
    \ = 0;\n        int endIndex = (word.Length - 1);\n        int currentIndex =\
    \ 0;\n        int currentCount = 0;\n        int vowelCount = 0;\n        int\
    \ vowelValue = 1;\n        string vowel = \"\";\n        char lastLetter = word[word.Length\
    \ - 1];\n        char currentLetter = word[currentIndex];\n        while(vowelCount\
    \ < 3 && currentCount < word.Length && currentIndex < word.Length) {\n       \
    \     vowelCount = vowelCount + ((lastLetter == 'A' || lastLetter == 'U' || lastLetter\
    \ == 'O' || lastLetter == 'I') ? 0 : 1);\n            currentIndex = currentIndex\
    \ + 1;\n            vowelCount = vowelCount + ((lastLetter == 'A' || lastLetter\
    \ == 'U' || lastLetter == 'O' || lastLetter == 'I') ? 0 : 1);\n            currentIndex\
    \ = currentIndex + 1;\n            vowelCount = vowelCount + ((lastLetter == 'A'\
    \ || lastLetter == 'U' || lastLetter == 'O' || lastLetter == 'I') ? 0 : 1);\n\
    \            currentIndex = currentIndex + 1;\n            vowelCount = vowelCount\
    \ + ((lastLetter == 'A' || lastLetter == 'U' || lastLetter == 'O' || lastLetter\
    \ == 'I') ? 0 : 1);\n            currentIndex = currentIndex + 1;\n          \
    \  vowelCount = vowelCount + ((lastLetter == 'A' || lastLetter == 'U' || lastLetter\
    \ == 'O' || lastLetter == 'I') ? 0 : 1);\n            currentIndex = currentIndex\
    \ + 1;\n            vowelCount = vowelCount + ((lastLetter == 'A' || lastLetter\
    \ == 'U' || lastLetter == 'O' || lastLetter == 'I') ? 0 : 1);\n            currentIndex\
    \ = currentIndex + 1;\n            vowelCount = vowelCount + ((lastLetter == 'A'\
    \ || lastLetter == 'U' || lastLetter == 'O' || lastLetter == 'I') ? 0 : 1);\n\
    \            currentIndex = currentIndex + 1;\n            vowelCount = vowelCount\
    \ + ((lastLetter == 'A' || lastLetter == 'U' || lastLetter == 'O' || lastLetter\
    \ == 'I') ? 0 : 1);\n            currentIndex = currentIndex + 1;\n          \
    \  vowelCount = vowelCount + ((lastLetter == 'A' || lastLetter == 'U' || lastLetter\
    \ == 'O' || lastLetter == 'I') ? 0 : 1);\n            currentIndex = currentIndex\
    \ + 1;\n            vowelCount = vowelCount + ((lastLetter == 'A' || lastLetter\
    \ == 'U' || lastLetter == 'O' || lastLetter == 'I') ? 0 : 1);\n            currentIndex\
    \ = currentIndex + 1;\n            vowelCount = vowelCount + ((lastLetter == 'A'\
    \ || lastLetter == 'U' || lastLetter == 'O' || lastLetter == 'I') ? 0 : 1);\n\
    \            currentIndex = currentIndex + 1;\n            vowelCount = vowelCount\
    \ + ((lastLetter == 'A' || lastLetter == 'U' || lastLetter == 'O' || last\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoubnl_18.cs(56,108): error CS1026: ) expected

    /tmp/tmpoubnl_18.cs(56,108): error CS1002: ; expected

    /tmp/tmpoubnl_18.cs(58,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpoubnl_18.cs(74,2): error CS1513: } expected

    '
  timestamp: 1659976662
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word.Length\
    \ <= 1 || word == \"\")\n            return \"\";\n\n        var vowels = new\
    \ HashSet<char>();\n        foreach (var letter in word.ToLowerInvariant())\n\
    \        {\n            var vowel = vowels.Contains(letter) ? \"a\" : \"e\";\n\
    \            if (letter < vowel || letter > word.LastOrDefault())\n          \
    \      vowels.Add(letter);\n        }\n\n        return vowels.Contains('a') ?\
    \ \"a\" : vowels.Contains('e') ? \"e\" : \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7gc4jhwx.cs(31,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        int low = word.Length - 1;\n        int high = word.Length\
    \ - 2;\n        while (low >= 0) {\n            if (vowels.Contains(word.Substring(low,\
    \ 1).ToUpper())) {\n                return word.Substring(low, 1).ToUpper();\n\
    \            }\n            low--;\n        }\n        while (high >= 0) {\n \
    \           if (vowels.Contains(word.Substring(high, 1).ToUpper())) {\n      \
    \          return word.Substring(high, 1).ToUpper();\n            }\n        \
    \    high--;\n        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26d29f6f8ef44c829d4b9f266ec0c5e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26d29f6f8ef44c829d4b9f266ec0c5e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new[] {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        string\
    \ vowelsString = string.Join(\"\", vowels);\n        List<string> vowelsFound\
    \ = word.ToLower().Replace(vowelsString, \"\").Split(new char[] { 'a' }).Distinct().ToList();\n\
    \        string vowelsFoundString = string.Join(\"\", vowelsFound);\n        if\
    \ (vowelsFoundString.Length != 0) {\n            return vowelsFoundString[vowelsFoundString.Length\
    \ - 1];\n        } else {\n            return \"\";\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3et8ors.cs(29,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiou\";\n        int index = 0;\n        bool found = false;\n        while\
    \ (index != word.Length) {\n            if (word.Substring(index, 1).Equals(vowels))\
    \ {\n                found = true;\n            }\n            index++;\n    \
    \    }\n        if (found) {\n            return word.Substring(index - 1, 1);\n\
    \        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <338b1b5f4f98404c90c990f2d8798c3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <338b1b5f4f98404c90c990f2d8798c3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        //convert string\
    \ to char array\n        var chars = word.ToCharArray();\n\n        // initialize\
    \ variables\n        string vowel = \"\";\n        char leftVowel = chars[0];\n\
    \        char rightVowel = chars[0];\n        var firstLetter = chars.First();\n\
    \n        // initialize first vowel check\n        var firstLetterCheck = GetFirstLetterChecker(firstLetter);\n\
    \        if (firstLetterCheck == 0)\n            return vowel;\n\n        // find\
    \ first vowel between firstLetter and rightVowel\n        var firstVowelCheck\
    \ = GetFirstVowelChecker(firstLetter, rightVowel);\n\n        // find first vowel\
    \ between leftVowel and rightVowel\n        var secondVowelCheck = GetSecondVowelChecker(leftVowel,\
    \ rightVowel);\n\n        // if any vowel is found for the first letter, return\
    \ it\n        if (firstVowelCheck != 0)\n            vowel = GetClosestVowelChecker(firstVowelCheck,\
    \ secondVowelCheck, firstLetter);\n        else\n            // if none is found,\
    \ return an empty string\n            return vowel;\n\n        // iterate through\
    \ char array\n        for (int i = 1; i < chars.Length - 1; i++) {\n         \
    \   // find first vowel between leftVowel and rightVowel\n            var secondVowelCheck\
    \ = GetSecondVowelChecker(leftVowel, chars[i]);\n\n            // if any vowel\
    \ is found for the first letter, return it\n            if (secondVowelCheck !=\
    \ 0)\n                vowel = GetClosestVowelChecker(secondVowelCheck, firstVowelCheck,\
    \ leftVowel);\n            else\n                // if none is found, return an\
    \ empty string\n                return vowel;\n        }\n\n        // if we are\
    \ here, no vowel was found in the char array\n        return vowel;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmdbg4nhh.cs(34,32): error CS0103: The name ''GetFirstLetterChecker'' does
    not exist in the current context

    /tmp/tmpmdbg4nhh.cs(39,31): error CS0103: The name ''GetFirstVowelChecker'' does
    not exist in the current context

    /tmp/tmpmdbg4nhh.cs(42,32): error CS0103: The name ''GetSecondVowelChecker'' does
    not exist in the current context

    /tmp/tmpmdbg4nhh.cs(46,21): error CS0103: The name ''GetClosestVowelChecker''
    does not exist in the current context

    /tmp/tmpmdbg4nhh.cs(54,17): error CS0136: A local or parameter named ''secondVowelCheck''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpmdbg4nhh.cs(54,36): error CS0103: The name ''GetSecondVowelChecker'' does
    not exist in the current context

    /tmp/tmpmdbg4nhh.cs(58,25): error CS0103: The name ''GetClosestVowelChecker''
    does not exist in the current context

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        // Your code goes here\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprnvaem2b.cs(24,16): warning CS0219: The variable ''vowels'' is assigned
    but its value is never used

    /tmp/tmprnvaem2b.cs(23,26): error CS0161: ''Problem.GetClosestVowel(string)'':
    not all code paths return a value

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word.Length == 0) {\n            return \"\";\n        }\n        char\
    \ firstLetter = word.First();\n        char lastLetter = word.Last();\n      \
    \  bool vowelsFound = false;\n        bool consonantsFound = false;\n        bool\
    \ consonantsOnTheRight = false;\n        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (Char.IsLower(firstLetter)) {\n                consonantsOnTheRight\
    \ = false;\n                consonantsFound = false;\n                vowelsFound\
    \ = false;\n                for (int j = 0; j < word.Length - 1 - i; j++) {\n\
    \                    if (!Char.IsLower(word[j])) {\n                        consonantsFound\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n                if (!consonantsFound) {\n                    if (!consonantsOnTheRight)\
    \ {\n                        consonantsOnTheRight = true;\n                  \
    \  }\n                }\n                if (!vowelsFound) {\n               \
    \     vowelsFound = true;\n                }\n            }\n            if (i\
    \ == word.Length - 1 && consonantsOnTheRight) {\n                return firstLetter;\n\
    \            }\n            firstLetter = word[i];\n            lastLetter = word[i\
    \ + 1];\n        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptyes6kse.cs(53,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = { 'a', 'A', 'i', 'I', 'o', 'O', 'u', 'U' };\n        var vowelsCount = vowels.Length;\n\
    \        var vowelIndex = 0;\n\n        foreach (char c in word) {\n         \
    \   if (vowels[vowelIndex] == c) vowelIndex++;\n            else break;\n    \
    \    }\n        int vowelLength = vowelIndex - 1;\n\n        if (vowelIndex <\
    \ vowelsCount) {\n            char[] leftSide = new char[word.Length - vowelLength];\n\
    \            Array.Copy(word, vowelIndex, leftSide, 0, word.Length - vowelLength);\n\
    \n            var index = 0;\n            foreach (char c in leftSide) {\n   \
    \             if (vowels[vowelIndex + index] == c) index++;\n                else\
    \ break;\n            }\n            if (index == vowelsCount) return string.Empty;\n\
    \            var result = new List<char>(vowelsCount - index);\n            foreach\
    \ (char c in leftSide)\n                result.Add(c);\n            return new\
    \ string(result.ToArray());\n        }\n        return string.Empty;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx38fmvt2.cs(36,24): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"\";\n        HashSet<char> charSet = new HashSet<char>(word);\n        foreach(char\
    \ c in word) {\n            if (charSet.Contains(c)) {\n                char vowels[]\
    \ = new[] {'a', 'e', 'i', 'o', 'u'};\n                vowel = vowels[Array.IndexOf(vowels,\
    \ c)];\n                break;\n            }\n        }\n        return vowel;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaw4ph9gj.cs(28,28): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // write your\
    \ code here\n        var list = new[] { 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c',\
    \ 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd',\
    \ 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e',\
    \ 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e' };\n       \
    \ var dict = new Dictionary<char, double>();\n        foreach (var c in word)\n\
    \        {\n            dict.Add(c, list[word.IndexOf(c)]);\n        }\n     \
    \   var result = \"\";\n        double maxValue = double.MaxValue;\n        foreach\
    \ (var v in dict)\n        {\n            if (Math.Abs(v.Value) < maxValue)\n\
    \            {\n                result = v.Key;\n                maxValue = Math.Abs(v.Value);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5crp4nh.cs(37,26): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"\";\n        var index = 0;\n        var length = word.Length;\n\n     \
    \   for (; index < length; index++) {\n            var letter = word[index];\n\
    \            if (letter == \"a\" || letter == \"e\" || letter == \"i\" || letter\
    \ == \"o\" || letter == \"u\") {\n                vowels += letter;\n        \
    \    }\n        }\n\n        for (int i = word.Length - 1; i >= 0; i--) {\n  \
    \          if (word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i]\
    \ == \"o\" || word[i] == \"u\") {\n                vowels += word[i];\n      \
    \      }\n        }\n        return vowels;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp80sj83ze.cs(30,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(30,34): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(30,51): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(30,68): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(30,85): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(36,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(36,35): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(36,53): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(36,71): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp80sj83ze.cs(36,89): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new string[] { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        var vowelsCount\
    \ = vowels.Count();\n        if (vowelsCount == 0)\n            return \"\";\n\
    \        var leftToRight = new List<string>();\n        var rightToLeft = new\
    \ List<string>();\n        foreach (var letter in word)\n        {\n         \
    \   var index = word.IndexOf(letter, StringComparison.OrdinalIgnoreCase);\n  \
    \          if (index >= 0)\n            {\n                var isVowel = vowels.Contains(letter.ToString());\n\
    \                if (isVowel && index == word.Length - 1 || index > word.Length\
    \ - 1)\n                {\n                    leftToRight.Add(letter.ToString());\n\
    \                }\n                if (isVowel && index == 0)\n             \
    \   {\n                    rightToLeft.Add(letter.ToString());\n             \
    \   }\n            }\n        }\n        if (leftToRight.Count != 0)\n       \
    \ {\n            return GetClosestVowel(leftToRight);\n        }\n        if (rightToLeft.Count\
    \ != 0)\n        {\n            return GetClosestVowel(rightToLeft);\n       \
    \ }\n        return \"\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxw4ud2oq.cs(48,36): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''string''

    /tmp/tmpxw4ud2oq.cs(52,36): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // The vowels\
    \ we want.\n        HashSet<char> vowels = new HashSet<char>(new[] {'a', 'e',\
    \ 'i', 'o', 'u', 'y'});\n        HashSet<char> consonants = new HashSet<char>(new[]\
    \ { 'b', 'c', 'd', 'f', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',\
    \ 'v', 'w', 'x' });\n\n        // The positions where we wanna search for vowels.\
    \ \n        // The first and last consonants are excluded, so that we don't search\n\
    \        // a vowel in a consonant group.\n        int firstConsonant = word.Length\
    \ - 1;\n        int lastConsonant = -1;\n\n        // For every consonants we\
    \ find, we count the closest vowel group. If there\n        // are multiple groups,\
    \ the first one is the closest one.\n        for (int i = firstConsonant; i >=\
    \ 0; i--) {\n            // Check if the current consonant is a vowel.\n     \
    \       char currentChar = word[i];\n\n            // If it is a vowel, check\
    \ if it is the one we want.\n            if (vowels.Contains(currentChar))\n \
    \           {\n                // If so, we find the closest vowel group.\n  \
    \              HashSet<char> group = new HashSet<char>(word.Substring(0, i));\n\
    \                int groupLength = group.Count;\n                char closestVowel\
    \ = group.FirstOrDefault();\n\n                // If the number of vowels is greater\
    \ than one, that means there\n                // are multiple groups. We compare\
    \ the distance.\n                if (groupLength > 1)\n                {\n   \
    \                 // We loop through every other vowel in the group. We check\n\
    \                    // if the distance of the vowels is lesser than the current\n\
    \                    // vowel distance. If it is, we update the closest vowel.\n\
    \                    for (int j = 0; j < groupLength - 1; j++)\n             \
    \       {\n                        int distance = Math.Abs(i - j);\n         \
    \               if (distance < closestVowelDistance)\n                       \
    \ {\n                            closestVowel = group[j];\n                  \
    \          closestVowelDistance = distance;\n                        }\n     \
    \               }\n                }\n\n                // We return the closest\
    \ vowel if it is found.\n                return closestVowel;\n            }\n\
    \        }\n\n        // If no vowel was found, we return an empty string.\n \
    \       return String.Empty;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppfsqm5ik.cs(58,40): error CS0103: The name ''closestVowelDistance'' does
    not exist in the current context

    /tmp/tmppfsqm5ik.cs(60,44): error CS0021: Cannot apply indexing with [] to an
    expression of type ''HashSet<char>''

    /tmp/tmppfsqm5ik.cs(61,29): error CS0103: The name ''closestVowelDistance'' does
    not exist in the current context

    /tmp/tmppfsqm5ik.cs(67,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmppfsqm5ik.cs(32,13): warning CS0219: The variable ''lastConsonant'' is
    assigned but its value is never used

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        string wordLower = word.ToLower();\n        int rightPosition\
    \ = wordLower.Length - 1;\n        int leftPosition = wordLower.Length - 1;\n\
    \        if (wordLower.StartsWith(\"a\") || wordLower.StartsWith(\"e\") || wordLower.StartsWith(\"\
    i\") || wordLower.StartsWith(\"o\") || wordLower.StartsWith(\"u\")) {\n      \
    \      leftPosition = 0;\n        }\n        if (wordLower.EndsWith(\"a\") ||\
    \ wordLower.EndsWith(\"e\") || wordLower.EndsWith(\"i\") || wordLower.EndsWith(\"\
    o\") || wordLower.EndsWith(\"u\")) {\n            rightPosition = wordLower.Length\
    \ - 1;\n        }\n        bool vowelFound = false;\n        for (int i = leftPosition\
    \ + 1; i < rightPosition; i++) {\n            if (vowels.Contains(wordLower.Substring(i,1).ToLower()))\
    \ {\n                vowelFound = true;\n                break;\n            }\n\
    \        }\n        if (!vowelFound) {\n            return \"\";\n        }\n\
    \        int vowelIndex = 0;\n        int vowelCount = 0;\n        for (int i\
    \ = leftPosition + 1; i < rightPosition; i++) {\n            if (wordLower.Substring(i,1).ToLower()\
    \ == wordLower.Substring(rightPosition - 1, 1).ToLower()) {\n                vowelIndex\
    \ = (i - leftPosition);\n                vowelCount++;\n            }\n      \
    \  }\n        string closestVowel = vowels[vowelIndex % vowels.Length];\n    \
    \    string vowelsAfterClosestVowel = wordLower.Substring(0, vowelIndex) + wordLower.Substring(vowelIndex\
    \ + 1, wordLower.Length - 1 - vowelIndex - 1);\n        string vowelsBeforeClosestVowel\
    \ = wordLower.Substring(vowelIndex + 1, wordLower.Length - 1 - vowelIndex);\n\
    \        return vowelsAfterClosestVowel + \"-\" + closestVowel + \"-\" + vowelsBeforeClosestVowel;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwu5aw3fp.cs(52,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        \n        int\
    \ consonantCount = word.Length;\n        bool consonantCountEven = (consonantCount\
    \ % 2) == 0;\n        consonantCount = consonantCount/2;\n        if(consonantCountEven)\
    \ {\n            string consonantCountString = consonantCount.ToString();\n  \
    \          consonantCount = int.Parse(consonantCountString);\n        }\n    \
    \    \n        string vowels = \"\";\n        for(int i = consonantCount; i <\
    \ word.Length; i++) {\n            if(char.IsUpper(word[i])) {\n             \
    \   break;\n            }\n            else {\n                vowels += word[i];\n\
    \            }\n        }\n        if(vowels.Length > 0) {\n            return\
    \ vowels;\n        }\n        else {\n            return \"\";\n        }\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <896a504fe1594411a2464ae193630e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <896a504fe1594411a2464ae193630e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Your code\
    \ goes here\n        bool flag = false;\n        int counter = 0;\n        bool\
    \ flag2 = false;\n        int counter2 = 0;\n        string vowel = \"\";\n  \
    \      for (int i = 0; i < word.Length; i++) {\n            string val = word[i];\n\
    \            char c = val.ToLower();\n            if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                counter++;\n          \
    \  }\n        }\n        for (int i = word.Length - 1; i >= 0; i--) {\n      \
    \      string val = word[i];\n            char c = val.ToLower();\n          \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \       counter--;\n            }\n        }\n        if (counter == 0) {\n  \
    \          flag = true;\n        }\n        if (counter == 0) {\n            flag2\
    \ = true;\n        }\n        if (flag == true && flag2 == true) {\n         \
    \   vowel = word.Substring(counter, counter2);\n            vowel = vowel.ToUpper();\n\
    \        }\n        if (counter == 0 && flag2 == true) {\n            vowel =\
    \ word.Substring(counter2, counter);\n            vowel = vowel.ToUpper();\n \
    \       }\n        return vowel;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvtw3sc_.cs(31,26): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmphvtw3sc_.cs(32,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmphvtw3sc_.cs(38,26): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmphvtw3sc_.cs(39,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"AEIOUaeiouAEIOUaeiou\";\n        var words = word.ToLower();\n        var\
    \ consonants = words.Replace(\"b\", \"\").Replace(\"p\", \"\").Replace(\"m\",\
    \ \"\").Replace(\"q\", \"\").Replace(\"s\", \"\");\n        List<char> results\
    \ = new List<char>();\n        // first find the consonants\n        foreach (var\
    \ consonant in consonants) {\n            var index = consonants.IndexOf(consonant);\n\
    \            var before = consonants.Take(index).ToArray();\n            var after\
    \ = consonants.Skip(index).ToArray();\n            var first = before.Where(w\
    \ => vowels.IndexOf(w.ToString()) != -1).LastOrDefault();\n            var last\
    \ = after.Where(w => vowels.IndexOf(w.ToString()) != -1).FirstOrDefault();\n \
    \           if (first != null && last != null) {\n                var mid = before.Where(w\
    \ => vowels.IndexOf(w.ToString()) != -1).Sum(w => w.ToString().Length) / 2.0;\n\
    \                var first = mid;\n                var last = mid;\n         \
    \       results.Add(consonant);\n            }\n        }\n        if (results.Count\
    \ == 0) {\n            return \"\";\n        }\n        // get the closest vowel\n\
    \        double totalDistance = 0;\n        var vowelsCount = vowels.Length;\n\
    \        var length = results.Count;\n        // get the vowel index\n       \
    \ var maxIndex = vowelsCount - 1;\n        var minIndex = 0;\n        var resultIndex\
    \ = 0;\n        var tempDist = Math.Abs((words[wordIndex] - 'a') - before[resultIndex]);\n\
    \        var tempDist2 = Math.Abs((words[wordIndex] - 'A') - after[resultIndex]);\n\
    \        double dist;\n        var min = double.MaxValue;\n        for (int i\
    \ = 0; i < length; i++) {\n            dist = tempDist;\n            if (tempDist\
    \ > tempDist2) {\n                dist = tempDist2;\n            }\n         \
    \   var current = results.ElementAt(i);\n            double currentDist = Math.Abs((words[wordIndex]\
    \ - 'a') - current.ToArray()[resultIndex]);\n            if (currentDist < dist)\
    \ {\n                dist = currentDist;\n            }\n            total +=\
    \ dist;\n            currentDist = Math.Abs((words[wordIndex] - 'A') - current.ToArray()[resultIndex]);\n\
    \            if (currentDist < dist) {\n                dist = currentDist;\n\
    \            }\n            total += dist;\n        }\n        var result = vowels.Skip(vowelsCount\
    \ - 1).FirstOrDefault(w => vowels.IndexOf(w.ToString()) != -1).ToString();\n \
    \       var result = vowels.Skip(vowel\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3anm76h9.cs(75,39): error CS1026: ) expected

    /tmp/tmp3anm76h9.cs(75,39): error CS1002: ; expected

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Write your\
    \ code here\n        string vowels = \"aeiou\";\n        string res = \"\";\n\
    \        string tmp = string.Join(\"\", word.Reverse());\n        int start =\
    \ 0;\n        int end = tmp.Length - 1;\n        if (word.Length > 2 && word.Contains(\"\
    A\") && word.Contains(\"Z\")) {\n            start = 2;\n            end = 4;\n\
    \        }\n        if (word.Length > 3 && word.Contains(\"A\") && word.Contains(\"\
    Z\")) {\n            start = 3;\n            end = 5;\n        }\n        if (word.Length\
    \ > 4 && word.Contains(\"A\") && word.Contains(\"Z\")) {\n            start =\
    \ 4;\n            end = 6;\n        }\n        if (word.Length > 5 && word.Contains(\"\
    A\") && word.Contains(\"Z\")) {\n            start = 5;\n            end = 7;\n\
    \        }\n        if (word.Length > 6 && word.Contains(\"A\") && word.Contains(\"\
    Z\")) {\n            start = 6;\n            end = 8;\n        }\n        if (word.Length\
    \ > 7 && word.Contains(\"A\") && word.Contains(\"Z\")) {\n            start =\
    \ 7;\n            end = 9;\n        }\n        if (word.Length > 8 && word.Contains(\"\
    A\") && word.Contains(\"Z\")) {\n            start = 8;\n            end = 10;\n\
    \        }\n        if (word.Length > 9 && word.Contains(\"A\") && word.Contains(\"\
    Z\")) {\n            start = 9;\n            end = 11;\n        }\n        if\
    \ (word.Length > 10 && word.Contains(\"A\") && word.Contains(\"Z\")) {\n     \
    \       start = 10;\n            end = 12;\n        }\n        for (int i = start;\
    \ i < end; i++) {\n            string x = tmp.Substring(i + 1, 1);\n         \
    \   if (vowels.Contains(x)) {\n                res = x;\n                break;\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f076e29dadb54fb0b15c05c48ffbf681>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f076e29dadb54fb0b15c05c48ffbf681>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int vowelIndex\
    \ = 0;\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if (Char.IsLetter(word[i]))\
    \ {\n                if (Char.IsLower(word[i])) {\n                    vowelIndex\
    \ = i;\n                }\n            }\n        }\n        string res = \"\"\
    ;\n        for (int i = 0; i < word.Length; i++) {\n            if (Char.IsLetter(word[i])\
    \ && (i != vowelIndex)) {\n                char c = word[i];\n               \
    \ char vowel = Char.GetNumericValue(c);\n                double sum = 0;\n   \
    \             int start = 0;\n                int end = word.Length - 1;\n   \
    \             while (end >= start) {\n                    if (Char.IsLower(word[end]))\
    \ {\n                        sum += Char.GetNumericValue(word[end]);\n       \
    \             }\n                    start++;\n                    end--;\n  \
    \              }\n                double min = sum / 2;\n                if (min\
    \ > vowel) {\n                    break;\n                }\n                else\
    \ {\n                    res += char.ToUpper(c);\n                }\n        \
    \    }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx83b513_.cs(36,30): error CS0266: Cannot implicitly convert type ''double''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"A\";\n        var words = word.ToLowerInvariant().Split(' ');\n        char[]\
    \ vowels = vowel.ToCharArray();\n        var vowelIndex = words.Length;\n\n  \
    \      if (vowels.Contains(word[0]))\n            vowelIndex = words.Length -\
    \ 2;\n        else if (vowels.Contains(word[vowelIndex]))\n            vowelIndex\
    \ -= 2;\n        else\n            return \"\";\n\n        var vowels = words.Take(vowelIndex).Concat(new\
    \ char[] {word[vowelIndex + 1]}).ToArray();\n        var vowelsCount = vowels.Distinct().Count();\n\
    \n        if (vowelsCount != 1) {\n            char[] vowelsArray = new char[vowelsCount];\n\
    \            vowels.CopyTo(vowelsArray);\n            Array.Sort(vowelsArray);\n\
    \            var firstChar = vowelsArray[0];\n            var lastChar = vowelsArray[vowelsCount\
    \ - 1];\n            if (lastChar == firstChar)\n                return firstChar;\n\
    \            else\n                return firstChar.ToString();\n        } else\n\
    \            return \"\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1s1_bu2p.cs(36,13): error CS0128: A local variable or function named ''vowels''
    is already defined in this scope

    /tmp/tmp1s1_bu2p.cs(36,22): error CS1929: ''IEnumerable<string>'' does not contain
    a definition for ''Concat'' and the best extension method overload ''ParallelEnumerable.Concat<char>(ParallelQuery<char>,
    IEnumerable<char>)'' requires a receiver of type ''ParallelQuery<char>''

    /tmp/tmp1s1_bu2p.cs(41,20): error CS0121: The call is ambiguous between the following
    methods or properties: ''MemoryExtensions.CopyTo<T>(T[], Span<T>)'' and ''MemoryExtensions.CopyTo<T>(T[],
    Memory<T>)''

    /tmp/tmp1s1_bu2p.cs(46,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word.Length <= 0) {\n            return \"\";\n        }\n        //\
    \ Get vowels list\n        List<char> vowels = GetVowels();\n        // Get position\
    \ of first consonant\n        int firstConsonant = word.IndexOfAny(new char[]\
    \ { 'b', 'd', 'f', 'g', 'j', 'k', 'l', 'm', 'n', 'p', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'z' });\n        if (firstConsonant == -1) {\n            return \"\";\n\
    \        }\n        // Get position of last consonant\n        int lastConsonant\
    \ = word.IndexOfAny(new char[] { 'p', 'z' });\n        if (lastConsonant == -1)\
    \ {\n            return \"\";\n        }\n        // Count vowels between\n  \
    \      int diff = firstConsonant - lastConsonant;\n        // Add vowel position\
    \ to consonant position\n        int consonantPosition = firstConsonant + 1;\n\
    \        bool isVowel = vowels.Contains(word[consonantPosition]);\n        //\
    \ Find nearest vowel\n        while (consonantPosition < lastConsonant && isVowel\
    \ == false) {\n            consonantPosition++;\n            isVowel = vowels.Contains(word[consonantPosition]);\n\
    \        }\n        // If no vowel found between consonants, return empty string\n\
    \        if (consonantPosition == lastConsonant && isVowel == false) {\n     \
    \       return \"\";\n        }\n        // If nearest vowel is not the last one\
    \ \n        if (consonantPosition == lastConsonant && isVowel == true) {\n   \
    \         return \"\";\n        }\n        // Find last vowel\n        while (consonantPosition\
    \ < lastConsonant && isVowel == true) {\n            consonantPosition++;\n  \
    \          isVowel = vowels.Contains(word[consonantPosition]);\n        }\n  \
    \      // If last vowel is not a consonant, return empty string\n        if (isVowel\
    \ == false) {\n            return \"\";\n        }\n        // Return last vowel\n\
    \        return word[consonantPosition];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9l8a46nk.cs(28,29): error CS0103: The name ''GetVowels'' does not exist
    in the current context

    /tmp/tmp9l8a46nk.cs(67,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        string[] arr = word.ToLower().ToArray();\n      \
    \  int count = arr.Count(a => vowels.Contains(a));\n        if (count >= 1)\n\
    \            return arr[(count - 1)];\n        else return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1skp740x.cs(25,24): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string[]''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUYaeiouy\";\n        string vowelsLeft = vowels.Substring(0, word.Length);\n\
    \        string vowelsRight = vowels.Substring(word.Length - 1);\n        int\
    \ minDistance = word.Length;\n        string minVowel = null;\n        for (int\
    \ i = (word.Length - 1); i >= 0; i--) {\n            if (vowelsLeft.IndexOf(word[i])\
    \ != -1 && vowelsRight.IndexOf(word[i]) != -1) {\n                string tempVowelsLeft\
    \ = vowelsLeft.Substring((word.Length - i), 1);\n                string tempVowelsRight\
    \ = vowelsRight.Substring((word.Length - i), 1);\n                int distance\
    \ = ((word.Length - i) * (word.Length - i));\n                int tempDistance\
    \ = 0;\n                for (int j = 0; j < word.Length - i; j++) {\n        \
    \            if (tempVowelsLeft.Equals(vowelsRight)) {\n                     \
    \   tempDistance += distance;\n                    }\n                    if (tempVowelsLeft.Equals(vowelsLeft))\
    \ {\n                        tempDistance += distance;\n                    }\n\
    \                    if (tempVowelsLeft.Equals(vowelsRight)) {\n             \
    \           tempDistance += distance;\n                    }\n               \
    \ }\n                if (tempDistance < minDistance) {\n                    minDistance\
    \ = tempDistance;\n                    minVowel = word[i];\n                }\n\
    \            }\n        }\n        return minVowel;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpofs4xzvz.cs(48,32): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"u\";\n        string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        int\
    \ len = word.Length;\n        for(int i = word.Length - 1; i >= 0; i--){\n   \
    \         if(vowel.IndexOf(word[i]) > -1) return vowel;\n        }\n        for(int\
    \ i = 0; i < len; i++) {\n            if(consonants.IndexOf(word[i]) > -1) return\
    \ consonants;\n        }\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3cafc81ba7448639f8df1db932def29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3cafc81ba7448639f8df1db932def29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new\
    \ List<char>() { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        if (word == null || word.Length\
    \ < 2)\n            return \"\";\n        var vowelsCount = vowels.Count(x =>\
    \ word.IndexOf(x.ToString(), StringComparison.OrdinalIgnoreCase) >= 0);\n    \
    \    var consonantsCount = consonants.Count(x => word.IndexOf(x.ToString(), StringComparison.OrdinalIgnoreCase)\
    \ >= 0);\n        if (vowelsCount <= 0 && consonantsCount <= 0)\n            return\
    \ \"\";\n        var left = word.Length - 1;\n        while (left >= 0 && vowels.Contains(word[left]))\
    \ {\n            left--;\n        }\n        var right = word.Length - 1;\n  \
    \      while (right >= 0 && consonants.Contains(word[right])) {\n            right--;\n\
    \        }\n        if (left >= 0 && right >= 0 && left + 1 == right)\n      \
    \      return word[left - 1];\n        else if (left + 1 == right)\n         \
    \   return word[left];\n        else if (left < right)\n            return GetClosestVowel(word.Substring(0,\
    \ left - 1) + word.Substring(left, word.Length - 1 - left));\n        else\n \
    \           return GetClosestVowel(word.Substring(0, right - 1) + word.Substring(right\
    \ + 1, word.Length - 1 - right));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2e11881f.cs(41,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp2e11881f.cs(43,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word.Length <= 2)\n            return \"\";\n        var vowels = \"\
    aeiouAEIOU\".ToCharArray();\n        var vowelCounts = word.ToCharArray().Count(c\
    \ => vowels.Contains(c.ToString()));\n        bool isVowelFound = false;\n   \
    \     var min = word.Length;\n        char closestVowel = '';\n        for (int\
    \ i = 0; i < word.Length; i++) {\n            if (isVowelFound) {\n          \
    \      if (vowelCounts[i] > vowelCounts[i - 1])\n                    min = i;\n\
    \            }\n            else {\n                var isClosestVowelFound =\
    \ word.Take(i).All(c => vowels.Contains(c.ToString()));\n                if (isClosestVowelFound)\
    \ {\n                    closestVowel = word.Take(i).Last();\n               \
    \     isVowelFound = true;\n                }\n            }\n        }\n    \
    \    return closestVowel;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0sf21pu5.cs(30,29): error CS1011: Empty character literal

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] { 'a', 'e', 'i', 'o', 'u' };\n        var index = word.IndexOfAny(vowels);\n\
    \        if (index >= 0)\n            return word.Substring(index, 1);\n     \
    \   \n        index = word.LastIndexOfAny(vowels);\n        if (index >= 0)\n\
    \            return word.Substring(index, 1);\n        return string.Empty;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f586580f4ad3464ca3b4c55a42d3fc52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f586580f4ad3464ca3b4c55a42d3fc52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new[] {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        string\
    \ vowelStr = string.Empty;\n        int start = 0;\n        int end = word.Length\
    \ - 1;\n        int minDistance = word.Length;\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            int currDistance = 0;\n            int currIdx\
    \ = 0;\n            while (start < end) {\n                string currChar = word.Substring(start,\
    \ 1);\n                if (vowels.Contains(currChar.ToUpper())) {\n          \
    \          currIdx++;\n                    if (currDistance < currIdx) {\n   \
    \                     currDistance = currIdx;\n                    }\n       \
    \         }\n                start = start + 1;\n                if (start >=\
    \ end) {\n                    break;\n                }\n            }\n     \
    \       if (currDistance < minDistance) {\n                minDistance = currDistance;\n\
    \                vowelStr = word.Substring(start, 1);\n            }\n       \
    \ }\n        return vowelStr;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvwzh__y4.cs(34,21): error CS1929: ''char[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<string>(ParallelQuery<string>,
    string)'' requires a receiver of type ''ParallelQuery<string>''

    '
  timestamp: 1659976663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = \"aeiou\".ToCharArray();\n        string vowelsStr = \"\";\n        foreach\
    \ (char c in word) {\n            if (vowels.Contains(c)) {\n                vowelsStr\
    \ += c;\n            } else {\n                string vowelsBefore = word.Substring(0,\
    \ word.Length - 1);\n                string vowelsAfter = word.Substring(word.Length\
    \ - 1, 1);\n                vowelsStr += vowelsBefore.Substring(vowelsBefore.IndexOf(c)\
    \ + 1) + vowelsAfter.Substring(vowelsAfter.IndexOf(c) + 1);\n            }\n \
    \       }\n        return vowelsStr;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d18d8b7ecb6b4fbb91f33ce571e87be5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d18d8b7ecb6b4fbb91f33ce571e87be5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = string.Empty;\n        var vowels = new List<char>() { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        var consonants = new List<char>() { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        var consonants1 = new List<char>() { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        var consonants2 = new List<char>() { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\n\
    \        // Get vowel indexes.\n        var vowelIndex = word.Select(c => vowels.IndexOf(c)).ToArray();\n\
    \        var vowelIndex1 = word.Select(c => consonants1.IndexOf(c)).ToArray();\n\
    \        var vowelIndex2 = word.Select(c => consonants2.IndexOf(c)).ToArray();\n\
    \n        // Get indexes of all consonants.\n        var consonantIndex = word.Select(c\
    \ => consonants.IndexOf(c)).ToArray();\n        var consonantIndex1 = word.Select(c\
    \ => consonants1.IndexOf(c)).ToArray();\n        var consonantIndex2 = word.Select(c\
    \ => consonants2.IndexOf(c)).ToArray();\n\n        // Get index of closest vowel\
    \ from the right side.\n        if (vowelIndex.Length > 0)\n            vowelIndex\
    \ = vowelIndex.Where(c => c > consonantIndex.Length).ToArray();\n        if (vowelIndex.Length\
    \ > 0)\n            vowelIndex = vowelIndex.First();\n        else\n         \
    \   vowelIndex = 0;\n\n        if (vowelIndex1.Length > 0)\n            vowelIndex1\
    \ = vowelIndex1.Where(c => c > consonantIndex1.Length).ToArray();\n        if\
    \ (vowelIndex1.Length > 0)\n            vowelIndex1 = vowelIndex1.First();\n \
    \       else\n            vowelIndex1 = 0;\n\n        if (vowelIndex2.Length >\
    \ 0)\n            vowelIndex2 = vowelIndex2.Where(c => c > consonantIndex2.Length).ToArray();\n\
    \        if (vowelIndex2.Length > 0)\n            vowelIndex2 = vowelIndex2.First();\n\
    \        else\n            vowelIndex2 = 0;\n\n        if (consonantIndex.Length\
    \ > 0)\n            consonantIndex = consonantIndex.Where(c => c > consonantIndex.Length).ToArray();\n\
    \        if (conson\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbnzj6ec3.cs(64,19): error CS1026: ) expected

    /tmp/tmpbnzj6ec3.cs(64,19): error CS1525: Invalid expression term ''}''

    /tmp/tmpbnzj6ec3.cs(64,19): error CS1002: ; expected

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string ret =\
    \ \"\";\n        string vowel = \"aeiouAEIOU\";\n        int pos = word.Length\
    \ - 1;\n        bool hasUpper = false;\n        bool hasLower = false;\n     \
    \   bool hasLetter = false;\n        bool hasNonLetter = false;\n        bool\
    \ hasVowel = false;\n\n        do {\n            if (word.Length > 0) {\n    \
    \            hasUpper = hasLower = hasLetter = hasNonLetter = hasVowel = false;\n\
    \                for (int i = word.Length - 1; i >= 0; i--) {\n              \
    \      hasUpper = (hasUpper && char.IsUpper(word[i]));\n                    hasLower\
    \ = (hasLower && char.IsLower(word[i]));\n                    hasLetter = (hasLetter\
    \ && char.IsLetter(word[i]));\n                    hasNonLetter = (hasNonLetter\
    \ && !char.IsLetter(word[i]));\n                    hasVowel = (hasVowel && vowel.IndexOf(word[i])\
    \ != -1);\n                }\n            }\n        } while (pos >= 0);\n\n \
    \       if (hasVowel)\n            ret = vowel[vowel.IndexOf(\"aeiou\") - 1];\
    \ // vowel index is 0 - 3\n        else if (hasNonLetter)\n            ret = word[word.Length\
    \ - 1];\n        else if (hasLower)\n            ret = word[word.Length - 1];\n\
    \        else if (hasUpper)\n            ret = word[word.Length - 1];\n      \
    \  else if (hasLetter)\n            ret = word[word.Length - 1];\n        else\n\
    \            return \"\";\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbp4ktdou.cs(47,19): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpbp4ktdou.cs(49,19): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpbp4ktdou.cs(51,19): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpbp4ktdou.cs(53,19): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpbp4ktdou.cs(55,19): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"a\";\n        int count = 0;\n        char[] ch = word.ToCharArray();\n\
    \        char[] vowelCh = vowel.ToCharArray();\n        for (int i = 0; i < ch.Length;\
    \ i++) {\n            char ch = ch[i];\n            for (int j = 0; j < vowelCh.Length;\
    \ j++) {\n                if (ch == vowelCh[j])\n                    count++;\n\
    \            }\n        }\n        if (count == 0)\n            return \"\";\n\
    \        char[] letter = word.ToCharArray();\n        char letter1 = letter[0];\n\
    \        for (int i = ch.Length - 1; i >= 0; i--) {\n            if (letter[i]\
    \ != vowel && letter[i] != letter1) {\n                return \"\";\n        \
    \    }\n        }\n        return vowel;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw9qc30kk.cs(29,18): error CS0136: A local or parameter named ''ch'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpw9qc30kk.cs(29,23): error CS0021: Cannot apply indexing with [] to an
    expression of type ''char''

    /tmp/tmpw9qc30kk.cs(40,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpw9qc30kk.cs(29,23): error CS0165: Use of unassigned local variable ''ch''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"AEIOUaeiou\";\n        int vowel_len = vowel.Length;\n        int num_consonants\
    \ = word.Count(c => c < 'A' || c > 'Z').Count();\n        int index = -1;\n  \
    \      int index_count = 0;\n        int count = 1;\n        int vowel_count =\
    \ 0;\n        for (int i = 0; i < num_consonants; i++) {\n            index =\
    \ word.IndexOfAny(vowel);\n            if (index >= 0) {\n                vowel_count++;\n\
    \                index_count++;\n                if (vowel_count == vowel_len)\
    \ {\n                    count += vowel_count - 1;\n                    break;\n\
    \                }\n            }\n        }\n        if (index_count == 0) {\n\
    \            return \"\";\n        }\n        string vowel_index = string.Empty;\n\
    \        int closest_vowel_index = -1;\n        for (int i = 0; i < num_consonants;\
    \ i++) {\n            index = word.IndexOfAny(vowel);\n            if (index >=\
    \ 0) {\n                closest_vowel_index = i;\n                break;\n   \
    \         }\n        }\n        string tmp = word.Substring(0, closest_vowel_index\
    \ + 1);\n        int min_distance = int.MaxValue;\n        for (int i = 0; i <\
    \ closest_vowel_index; i++) {\n            int distance = tmp.CompareTo(vowel[i]);\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \            }\n        }\n        return word.Substring(min_distance + 1);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4butnpra.cs(26,66): error CS1061: ''int'' does not contain a definition
    for ''Count'' and no accessible extension method ''Count'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp4butnpra.cs(32,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    /tmp/tmp4butnpra.cs(48,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var arr = word.ToCharArray();\n\
    \        var vowels = \"aeiouy\";\n        var res = \"\";\n        for (var i\
    \ = arr.Length - 1; i >= 0; i--) {\n            var c = arr[i];\n            if\
    \ (vowels.IndexOf(c) >= 0)\n                continue;\n            if (c != arr[0].ToString().ToUpper()\
    \ && c != arr[0].ToString().ToLower()) {\n                return \"\";\n     \
    \       }\n            res = c;\n            break;\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptlq7covj.cs(31,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmptlq7covj.cs(31,53): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmptlq7covj.cs(34,19): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new[] {'a', 'e', 'i', 'o', 'u'};\n        \n        char[] cArray = word.ToCharArray();\n\
    \        \n        int start = 0;\n        bool flag = false;\n        int end\
    \ = 0;\n        int length = word.Length;\n        \n        foreach (char c in\
    \ cArray)\n        {\n            flag = true;\n            for (int i = 0; i\
    \ < vowels.Length; i++)\n            {\n                if (c == vowels[i])\n\
    \                {\n                    start = i;\n                    flag =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if (!flag) end = length;\n            \n        }\n\n        for (int\
    \ i = start; i < end; i++)\n        {\n            if (cArray[i] == cArray[i +\
    \ 1])\n            {\n                return string.Empty;\n            }\n  \
    \          else\n            {\n                return cArray[i];\n          \
    \  }\n        }\n        \n        return string.Empty;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9pfty71m.cs(57,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp9pfty71m.cs(49,38): warning CS0162: Unreachable code detected

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"aeiouAEIOU\";\n        var index = 0;\n        var vowelCount = 0;\n     \
    \   var nextVowelCount = -1;\n        var found = false;\n        var foundVowel\
    \ = \"\";\n\n        while (index < word.Length) {\n            if (vowels.IndexOf(word[index],\
    \ StringComparison.OrdinalIgnoreCase) >= 0) {\n                vowelCount++;\n\
    \                index = index == word.Length - 1 ? 0 : index + 1;\n         \
    \       if (nextVowelCount == -1)\n                    nextVowelCount = vowelCount;\n\
    \                else if (vowelCount > nextVowelCount) {\n                   \
    \ found = true;\n                    foundVowel = vowels[(vowelCount - nextVowelCount\
    \ + 1)]; // find vowel at right side of the word\n                    break;\n\
    \                }\n            } else {\n                index++;\n         \
    \       vowelCount = 0;\n            }\n        }\n\n        return found ? foundVowel\
    \ : \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpedv1bij7.cs(39,34): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = string.Empty;\n        bool firstConsonant = true;\n        int vowelCount\
    \ = 0;\n        List<string> vowelsList = new List<string>() { \"A\", \"E\", \"\
    I\", \"O\", \"U\", \"Y\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"Ae\", \"\
    Ai\", \"Ao\", \"Au\", \"Ey\", \"Iy\", \"Oy\", \"Uy\" };\n        foreach (char\
    \ letter in word) {\n            int currentChar = Convert.ToInt32(letter);\n\
    \            if (vowelsList.Contains(letter)) {\n                vowelCount++;\n\
    \            }\n            if (!firstConsonant) {\n                if (currentChar\
    \ == 0x20) {\n                    vowel = vowelsList[0];\n                }\n\
    \                else {\n                    vowel = vowelsList[1];\n        \
    \        }\n            }\n            else {\n                if (currentChar\
    \ == 0x20) {\n                    vowel = vowelsList[0];\n                }\n\
    \                else {\n                    vowel = vowelsList[2];\n        \
    \        }\n            }\n            firstConsonant = false;\n        }\n  \
    \      if (vowelCount <= 2) {\n            return vowel;\n        }\n        int\
    \ maxVowelCount = 3;\n        char[] vowelArray = new char[vowelCount];\n    \
    \    vowelCount = 0;\n        foreach (char letter in word) {\n            vowelArray[vowelCount]\
    \ = letter;\n            vowelCount++;\n        }\n        vowelArray = vowelArray.Sort().ToArray();\n\
    \        int index = 0;\n        int left = 0;\n        int right = 0;\n     \
    \   while (vowelCount > 0) {\n            if (vowelArray[index] == vowelArray[0])\
    \ {\n                left++;\n            }\n            else if (vowelArray[index]\
    \ == vowelArray[vowelArray.Length - 1]) {\n                right++;\n        \
    \    }\n            index++;\n            vowelCount--;\n        }\n        if\
    \ (left > maxVowelCount) {\n            return vowelsList[0];\n        }\n   \
    \     else if (right > maxVowelCount) {\n            return vowelsList[1];\n \
    \       }\n        else {\n            return vowel;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpul9xcoob.cs(30,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpul9xcoob.cs(61,33): error CS1501: No overload for method ''Sort'' takes
    0 arguments

    /tmp/tmpul9xcoob.cs(61,39): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"\";\n        char[] vowelArray = { \"A\", \"a\", \"E\", \"e\", \"I\", \"\
    i\", \"O\", \"o\", \"U\", \"u\", \"Y\", \"y\" };\n        bool flag = false;\n\
    \        char temp;\n        string tempVowel = \"\";\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            temp = word[i];\n            for (int j = 0;\
    \ j < vowelArray.Length; j++) {\n                if (vowelArray[j] == temp) {\n\
    \                    flag = true;\n                    tempVowel = vowelArray[j];\n\
    \                    break;\n                }\n            }\n            if\
    \ (flag) {\n                flag = false;\n                vowel = tempVowel;\n\
    \            }\n        }\n        return vowel;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpheoqhlfs.cs(25,31): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,36): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,41): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,46): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,51): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,56): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,61): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,66): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,71): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,76): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,81): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(25,86): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpheoqhlfs.cs(34,33): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int count =\
    \ word.Length;\n        char[] ch = word.ToCharArray();\n        Array.Sort(ch,\
    \ ch + count - 1);\n        int mid = 0;\n        for (int i = 0; i < count -\
    \ 1; i++) {\n            if (ch[i] == 'a' || ch[i] == 'e' || ch[i] == 'i' || ch[i]\
    \ == 'o' || ch[i] == 'u') {\n                mid = i;\n                break;\n\
    \            }\n        }\n        if (mid > 0) {\n            int l = 1;\n  \
    \          int r = mid + 1;\n            while (l < r) {\n                int\
    \ mid1 = l + (r - l) / 2;\n                int mid2 = mid1 + 1;\n            \
    \    if (ch[mid1] == 'a' || ch[mid1] == 'e' || ch[mid1] == 'i' || ch[mid1] ==\
    \ 'o' || ch[mid1] == 'u') {\n                    r = mid1;\n                }\
    \ else {\n                    l = mid1;\n                }\n                if\
    \ (ch[mid2] == 'a' || ch[mid2] == 'e' || ch[mid2] == 'i' || ch[mid2] == 'o' ||\
    \ ch[mid2] == 'u') {\n                    r = mid2;\n                } else {\n\
    \                    l = mid2;\n                }\n            }\n           \
    \ return ch[mid + 1] == 'a' || ch[mid + 1] == 'e' || ch[mid + 1] == 'i' || ch[mid\
    \ + 1] == 'o' || ch[mid + 1] == 'u' ? ch[mid + 1] : \"\";\n        } else {\n\
    \            return \"\";\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3gb66r86.cs(26,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''char[]'' and ''int''

    /tmp/tmp3gb66r86.cs(51,20): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''char'' and ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"AEIOU\";\n        List<string> res = new List<string>();\n        int counter\
    \ = 0;\n        if (word == null || word.Length == 0)\n            return \"\"\
    ;\n        char lastChar = word.Substring(1, 1).ToLower();\n        string vowel1\
    \ = word.Substring(1, 2);\n        string vowel2 = word.Substring(2, 1);\n   \
    \     string vowel3 = word.Substring(1, 1);\n        foreach (char vowel in vowel)\n\
    \        {\n            if (vowel == lastChar)\n            {\n              \
    \  res.Add(vowel1);\n                counter++;\n                if (counter ==\
    \ 3)\n                    break;\n            }\n            if (vowel == vowel2)\n\
    \            {\n                res.Add(vowel2);\n                counter++;\n\
    \                if (counter == 3)\n                    break;\n            }\n\
    \            if (vowel == vowel3)\n            {\n                res.Add(vowel3);\n\
    \                counter++;\n                if (counter == 3)\n             \
    \       break;\n            }\n        }\n        if (res.Count == 0)\n      \
    \      return \"\";\n        if (res.Count == 1)\n            return res[0];\n\
    \        if (res.Count == 2)\n            return res[0] + res[1];\n        if\
    \ (res.Count == 3)\n            return res[0] + res[1] + res[2];\n        if (res.Count\
    \ == 4)\n            return res[0] + res[1] + res[2] + res[3];\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzyt_hizt.cs(29,25): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpzyt_hizt.cs(33,23): error CS0136: A local or parameter named ''vowel''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzyt_hizt.cs(42,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpzyt_hizt.cs(49,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Your code\
    \ here...\n        var vowels = new List<string>();\n        foreach (var letter\
    \ in word) {\n            if (letter == vowel.ToString()) return vowel;\n    \
    \    }\n        return \"\";\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzutf2h1j.cs(27,27): error CS0103: The name ''vowel'' does not exist in
    the current context

    /tmp/tmpzutf2h1j.cs(27,52): error CS0103: The name ''vowel'' does not exist in
    the current context

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOU\";\n        string vowelsReverse = vowels.ToUpper();\n        char[]\
    \ vowelArray = vowels.ToCharArray();\n        char[] vowelArrayReverse = vowelsReverse.ToCharArray();\n\
    \        if (vowelArray.Contains(word[word.Length - 1]) == false) {\n        \
    \    return \"\";\n        }\n        if (vowelArray.Contains(word[0]) == false)\
    \ {\n            return \"\";\n        }\n        int[] vowelPositions = new int[vowelArray.Length];\n\
    \        for (int i = 0; i < vowelArray.Length; i++) {\n            if (vowelArray.Contains(word[word.Length\
    \ - 1 - i]) == true) {\n                vowelPositions[i] = word.Length - 1 -\
    \ i;\n            }\n            if (vowelArray.Contains(word[word.Length - 1\
    \ - i - 1]) == true) {\n                vowelPositions[i] = word.Length - 1 -\
    \ i - 1;\n            }\n        }\n        int vowelPositionsMin = 0;\n     \
    \   int vowelPositionsMax = 0;\n        vowelPositionsMax = vowelPositions.Max();\n\
    \        vowelPositionsMin = vowelPositions.Min();\n        int consonantPosition\
    \ = word.Length - 1;\n        for (int i = vowelPositionsMin; i <= vowelPositionsMax;\
    \ i++) {\n            if (vowelArray.Contains(word[consonantPosition]) == true)\
    \ {\n                consonantPosition--;\n                break;\n          \
    \  }\n        }\n        int consonantPositionMax = 0;\n        int consonantPositionMin\
    \ = 0;\n        consonantPositionMax = consonantPosition;\n        consonantPositionMin\
    \ = consonantPosition;\n        int consonantCount = word.Length - 1;\n      \
    \  for (int i = consonantPositionMax; i >= consonantPositionMin; i--) {\n    \
    \        if (vowelArray.Contains(word[consonantCount]) == true) {\n          \
    \      consonantCount++;\n                break;\n            }\n        }\n \
    \       char vowel = vowelArray[vowelPositions[consonantPosition]];\n        char\
    \ reverseVowel = vowelArrayReverse[vowelPositions[consonantPosition]];\n     \
    \   char consonant = word[consonantPosition];\n        char reverseConsonant =\
    \ word[consonantCount];\n        int count = consonantCount - vowelPositions[consonantPosition]\
    \ + 1;\n        char finalVowel = vowelArray[vowelPositions[consonantPosition]\
    \ + 1];\n        char finalReverseVowel = vowelArrayReverse[vowelPositions[consonantPosition]\
    \ + 1];\n        string result = \"\";\n        if (vowelArray.Contains(vowel)\
    \ == true) {\n            if (vowelArray.Contains(reverseVowel) == true) {\n \
    \               result = result + finalReverseVowel;\n            } else {\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8jpwf94.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpk8jpwf94.cs(94,2): error CS1513: } expected

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel;\n\
    \        int minDistance = -1;\n\n        char[] chars = word.ToCharArray();\n\
    \        Array.Sort(chars);\n\n        for (int i = chars.Length - 1; i >= 0;\
    \ i--)\n        {\n            char currentChar = chars[i];\n            bool\
    \ isVowel = char.IsLower(currentChar) || char.IsUpper(currentChar);\n\n      \
    \      if (isVowel)\n            {\n                List<char> vowels = new List<char>\
    \ { currentChar };\n                vowels.AddRange(vowels.FindAll<char>(letter\
    \ => char.IsLower(letter) || char.IsUpper(letter)));\n                int currentDistance\
    \ = 0;\n\n                for (int j = i; j > 0; j--)\n                {\n   \
    \                 char previousChar = chars[j - 1];\n                    if (char.IsLower(previousChar))\n\
    \                    {\n                        currentDistance++;\n         \
    \           }\n                    else if (char.IsUpper(previousChar))\n    \
    \                {\n                        currentDistance--;\n             \
    \       }\n\n                    currentDistance = Math.Abs(currentDistance);\n\
    \                    if (currentDistance < minDistance)\n                    {\n\
    \                        vowel = currentChar;\n                        minDistance\
    \ = currentDistance;\n                    }\n                }\n            }\n\
    \        }\n\n        return vowel;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprheguu5l.cs(38,40): error CS0308: The non-generic method ''List<char>.FindAll(Predicate<char>)''
    cannot be used with type arguments

    /tmp/tmprheguu5l.cs(56,33): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmprheguu5l.cs(63,16): error CS0165: Use of unassigned local variable ''vowel''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new List<char>()\n        {\n            'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'\n        };\n        var vowelPositions = word.ToLowerInvariant()\n\
    \            .Replace(\" \", string.Empty)\n            .ToCharArray()\n     \
    \       .Where(c => vowels.Contains(c))\n            .ToArray();\n        if (vowelPositions.Length\
    \ > 0)\n        {\n            var vowelPositionsCount = vowelPositions.Length;\n\
    \            var vowelPositionsIndex = 0;\n            var vowelPositionsDistance\
    \ = vowelPositionsCount;\n            var vowelPositionsMin = vowelPositionsCount;\n\
    \            var vowelPositionsMax = vowelPositionsCount;\n            for (var\
    \ i = 1; i < vowelPositionsCount; i++)\n            {\n                var consonantCount\
    \ = vowelPositionsCount - i;\n                if (vowelPositionsIndex > consonantCount\
    \ - 1)\n                {\n                    break;\n                }\n   \
    \             var consonants = vowelPositions.Skip(vowelPositionsIndex).Take(consonantCount);\n\
    \                var consonantPositions = word.ToLowerInvariant()\n          \
    \          .Replace(\" \", string.Empty)\n                    .ToCharArray()\n\
    \                    .Where(c => consonants.Contains(c))\n                   \
    \ .ToArray();\n                vowelPositionsMin = Math.Min(vowelPositionsMin,\
    \ consonantPositions.Length);\n                vowelPositionsMax = Math.Max(vowelPositionsMax,\
    \ consonantPositions.Length);\n                vowelPositionsIndex += consonantCount;\n\
    \                vowelPositionsDistance += consonantCount;\n            }\n  \
    \          var vowelPositionsAvg = (double)vowelPositionsDistance / vowelPositionsCount;\n\
    \            if (vowelPositionsMin == vowelPositionsCount || vowelPositionsMax\
    \ == vowelPositionsCount)\n            {\n                return string.Empty;\n\
    \            }\n            else\n            {\n                var vowelPositionsAvgDistance\
    \ = vowelPositionsAvg - vowelPositionsMin;\n                var vowelPositionsMinIndex\
    \ = 0;\n                var vowelPositionsMinDistance = vowelPositionsMin;\n \
    \               var vowelPositionsMaxIndex = 0;\n                var vowelPositionsMaxDistance\
    \ = vowelPositionsMax;\n                for (var i = vowelPositionsMinIndex; i\
    \ <= vowelPositionsMaxIndex; i++)\n                {\n                    var\
    \ consonantCount = vowelPositionsCount - i;\n                    var consonants\
    \ = vowelPositions.Skip(vowelPositionsIndex).Take(consonantCount);\n         \
    \           var consonantPositions = word.ToLowerInvariant()\n               \
    \         .Replace(\" \", string.Empty)\n                        .ToChar\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps7zsyagr.cs(76,32): error CS1002: ; expected

    /tmp/tmps7zsyagr.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmps7zsyagr.cs(94,2): error CS1513: } expected

    '
  timestamp: 1659976663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = string.Empty;\n        var vowelList = new List<char> {'a', 'e', 'i', 'o',\
    \ 'u'};\n        var vowelList = vowelList.Distinct().ToList();\n        var leftIndex\
    \ = word.IndexOfAny(vowelList, StringComparison.OrdinalIgnoreCase);\n        var\
    \ rightIndex = word.LastIndexOfAny(vowelList, StringComparison.OrdinalIgnoreCase);\n\
    \        if (leftIndex >= 0 && rightIndex >= 0) {\n            var leftSubStr\
    \ = word.Substring(leftIndex, 1);\n            var rightSubStr = word.Substring(rightIndex,\
    \ 1);\n            var consonantList = new[] {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n   \
    \         var consonantList = consonantList.Distinct().ToList();\n           \
    \ int minVowelIndex = -1;\n            int maxVowelIndex = -1;\n            for\
    \ (int i = 0; i < vowelList.Count; i++) {\n                if (vowelList[i] ==\
    \ leftSubStr[0]) {\n                    minVowelIndex = i;\n                }\n\
    \                else if (vowelList[i] == rightSubStr[0]) {\n                \
    \    maxVowelIndex = i;\n                }\n            }\n            if (maxVowelIndex\
    \ >= minVowelIndex) {\n                vowel = vowelList[maxVowelIndex];\n   \
    \         }\n        }\n        return vowel;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ksdlqf6.cs(26,13): error CS0128: A local variable or function named ''vowelList''
    is already defined in this scope

    /tmp/tmp8ksdlqf6.cs(27,41): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<char>''
    to ''char[]''

    /tmp/tmp8ksdlqf6.cs(27,52): error CS1503: Argument 2: cannot convert from ''System.StringComparison''
    to ''int''

    /tmp/tmp8ksdlqf6.cs(28,46): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<char>''
    to ''char[]''

    /tmp/tmp8ksdlqf6.cs(28,57): error CS1503: Argument 2: cannot convert from ''System.StringComparison''
    to ''int''

    /tmp/tmp8ksdlqf6.cs(33,17): error CS0128: A local variable or function named ''consonantList''
    is already defined in this scope

    /tmp/tmp8ksdlqf6.cs(45,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiouAEIOU\";\n        if (word == null || word.Length < 2 || word.Length\
    \ > word.length) return \"\";\n        string res = \"\";\n        foreach (char\
    \ c in word.ToLower()) {\n            if (vowels.IndexOf(c) >= 0) continue;\n\
    \            int i = word.IndexOf(c, word.Length - 1);\n            if (i < 0)\
    \ return \"\";\n            int j = word.IndexOf(c, i + 1);\n            if (j\
    \ > 0) return \"\";\n            if (j < i) res += c;\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdtywsci2.cs(25,67): error CS1061: ''string'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = String.Empty;\n        char[] vowels = new[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] consonants = new[] {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        StringBuilder\
    \ vowelConsonants = new StringBuilder();\n        foreach (char ch in word) {\n\
    \            vowelConsonants.Append(ch);\n        }\n        for (int i = vowelConsonants.Length\
    \ - 1; i >= 0; i--) {\n            vowelConsonants.Insert(vowelConsonants.Length,\
    \ vowels[i]);\n            if (vowelConsonants.ToString().ToUpper().Contains(\"\
    A\") || vowelConsonants.ToString().ToUpper().Contains(\"E\") || vowelConsonants.ToString().ToUpper().Contains(\"\
    I\") || vowelConsonants.ToString().ToUpper().Contains(\"O\") || vowelConsonants.ToString().ToUpper().Contains(\"\
    U\")) {\n                vowel = vowels[i];\n                break;\n        \
    \    }\n        }\n        return vowel;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwnyocz_c.cs(34,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiouAEIOU\";\n        int vowelIndex = -1;\n        bool isVowel = false;\n\
    \        char currentVowel = '\\0';\n\n        char[] consonants = word.ToCharArray().Reverse().ToArray();\n\
    \n        for (int i = 0; i < consonants.Length; i++) {\n            currentVowel\
    \ = consonants[i];\n            if (vowels.IndexOf(currentVowel.ToString()) !=\
    \ -1) {\n                isVowel = true;\n                vowelIndex = i;\n  \
    \          }\n        }\n        if (isVowel) {\n            consonants = consonants.Reverse().ToArray();\n\
    \n            int start = Math.Max(0, vowelIndex - 1);\n            int end =\
    \ Math.Min(vowelIndex + 1, word.Length - 1);\n\n            while (start >= 0\
    \ && end < word.Length) {\n                if (consonants[start] == vowels[vowelIndex])\
    \ {\n                    start--;\n                }\n                if (consonants[end]\
    \ == vowels[vowelIndex]) {\n                    end++;\n                }\n  \
    \          }\n\n            if (start < 0 && end < word.Length) {\n          \
    \      return \"\";\n            }\n            if (start >= 0 && end >= word.Length)\
    \ {\n                return word.Substring(start, end - start + 1);\n        \
    \    }\n            if (start < 0) {\n                return word.Substring(0,\
    \ vowelIndex + 1);\n            }\n            if (end >= word.Length) {\n   \
    \             return word.Substring(vowelIndex + 1);\n            }\n        }\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        Debug.Assert(word\
    \ != null && word.Length > 0);\n        var vowels = new[] { 'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U' };\n        var vowelCount = new Dictionary<string,\
    \ int>();\n        foreach (var item in vowels) {\n            if (word.IndexOf(item,\
    \ StringComparison.OrdinalIgnoreCase) >= 0) {\n                vowelCount[item]\
    \ = word.Count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').ToString();\n\
    \            }\n        }\n        if (vowelCount.Any(kv => kv.Value > 2)) {\n\
    \            return \"\";\n        }\n        var bestVowel = \"\";\n        var\
    \ bestCount = 0;\n        foreach (var kv in vowelCount) {\n            var count\
    \ = kv.Value;\n            if (bestCount <= 2 || count < bestCount) {\n      \
    \          bestVowel = kv.Key;\n                bestCount = count;\n         \
    \   }\n        }\n        return bestVowel;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp60_yorww.cs(29,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<string>\
    \ vowels = new List<string>();\n        vowels.Add(\"a\");\n        vowels.Add(\"\
    e\");\n        vowels.Add(\"i\");\n        vowels.Add(\"o\");\n        vowels.Add(\"\
    u\");\n\n        if (word == null || word.Length <= 1) {\n            return string.Empty;\n\
    \        }\n        var lastIndex = word.Length - 1;\n        var index = word.LastIndexOfAny(vowels);\n\
    \        if (index >= 0) {\n            var next = word.Substring(index + 1);\n\
    \            var nextIndex = next.LastIndexOfAny(vowels);\n            if (nextIndex\
    \ < lastIndex &&\n                index < word.Length - 1 &&\n               \
    \ nextIndex < word.Length - 2) {\n                return next.Substring(0, nextIndex);\n\
    \            }\n        }\n        return string.Empty;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpty4uh_36.cs(35,41): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''char[]''

    /tmp/tmpty4uh_36.cs(38,49): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''char[]''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<string>\
    \ vowels = new List<string> { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        char\
    \ left = word.ToLower()[0];\n        int leftIndex = 0;\n        int leftCount\
    \ = 0;\n        int rightIndex = word.Length - 1;\n        int rightCount = 0;\n\
    \        char rightChar = word[word.Length - 1];\n        while (leftIndex < word.Length\
    \ && leftChar == left) {\n            leftIndex++;\n            leftCount++;\n\
    \        }\n        while (rightIndex > 0 && rightChar == right) {\n         \
    \   rightIndex--;\n            rightCount--;\n        }\n        if (leftIndex\
    \ > rightIndex) {\n            return \"\";\n        }\n        if (leftCount\
    \ > rightCount) {\n            char temp = leftChar;\n            leftChar = rightChar;\n\
    \            rightChar = temp;\n        }\n        if (leftChar == 'a') {\n  \
    \          if (rightChar == 'e' || rightChar == 'i' || rightChar == 'o' || rightChar\
    \ == 'u') {\n                vowels.Remove(\"a\");\n                return vowels[vowels.Count\
    \ - 1];\n            }\n        }\n        if (leftChar == 'e') {\n          \
    \  if (rightChar == 'a' || rightChar == 'i' || rightChar == 'o' || rightChar ==\
    \ 'u') {\n                vowels.Remove(\"e\");\n                return vowels[vowels.Count\
    \ - 1];\n            }\n        }\n        if (leftChar == 'i') {\n          \
    \  if (rightChar == 'a' || rightChar == 'e' || rightChar == 'o' || rightChar ==\
    \ 'u') {\n                vowels.Remove(\"i\");\n                return vowels[vowels.Count\
    \ - 1];\n            }\n        }\n        if (leftChar == 'o') {\n          \
    \  if (rightChar == 'a' || rightChar == 'e' || rightChar == 'i' || rightChar ==\
    \ 'u') {\n                vowels.Remove(\"o\");\n                return vowels[vowels.Count\
    \ - 1];\n            }\n        }\n        if (leftChar == 'u') {\n          \
    \  if (rightChar == 'a' || rightChar == 'e' || rightChar == 'i' || rightChar ==\
    \ 'o') {\n                vowels.Remove(\"u\");\n                return vowels[vowels.Count\
    \ - 1];\n            }\n        }\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe6c1_x06.cs(31,43): error CS0103: The name ''leftChar'' does not exist
    in the current context

    /tmp/tmpe6c1_x06.cs(35,47): error CS0103: The name ''right'' does not exist in
    the current context

    /tmp/tmpe6c1_x06.cs(43,25): error CS0103: The name ''leftChar'' does not exist
    in the current context

    /tmp/tmpe6c1_x06.cs(44,13): error CS0103: The name ''leftChar'' does not exist
    in the current context

    /tmp/tmpe6c1_x06.cs(47,13): error CS0103: The name ''leftChar'' does not exist
    in the current context

    /tmp/tmpe6c1_x06.cs(53,13): error CS0103: The name ''leftChar'' does not exist
    in the current context

    /tmp/tmpe6c1_x06.cs(59,13): error CS0103: The name ''leftChar'' does not exist
    in the current context

    /tmp/tmpe6c1_x06.cs(65,13): error CS0103: The name ''leftChar'' does not exist
    in the current context

    /tmp/tmpe6c1_x06.cs(71,13): error CS0103: The name ''leftChar'' does not exist
    in the current context

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        Dictionary<string,\
    \ string> vowels = new Dictionary<string, string>();\n        vowels.Add(\"a\"\
    , \"u\");\n        vowels.Add(\"e\", \"i\");\n        vowels.Add(\"i\", \"u\"\
    );\n        vowels.Add(\"o\", \"u\");\n        vowels.Add(\"u\", \"u\");\n   \
    \     vowels.Add(\"y\", \"u\");\n        vowels.Add(\"a\", \"A\");\n        vowels.Add(\"\
    e\", \"E\");\n        vowels.Add(\"i\", \"I\");\n        vowels.Add(\"o\", \"\
    O\");\n        vowels.Add(\"u\", \"U\");\n        vowels.Add(\"y\", \"Y\");\n\
    \        string vowel = \"\";\n        bool found = false;\n        for (int i\
    \ = word.Length - 1; i >= 0; i--) {\n            char c = word[i];\n         \
    \   if (vowels.ContainsKey(c)) {\n                vowel = vowels[c];\n       \
    \         found = true;\n                break;\n            }\n            char\
    \ ch = word.Substring(i + 1, 1);\n            if (vowels.ContainsKey(ch)) {\n\
    \                vowel = vowels[ch];\n                found = true;\n        \
    \        break;\n            }\n        }\n        if (!found)\n            return\
    \ \"\";\n        else\n            return vowel;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqsdmxdw5.cs(41,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpqsdmxdw5.cs(42,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpqsdmxdw5.cs(46,23): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpqsdmxdw5.cs(47,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpqsdmxdw5.cs(48,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = \"aeiou\".ToCharArray();\n        Array.Sort(vowels);\n        int min = word.Length;\n\
    \        string result = \"\";\n        for (int i = 0; i < word.Length; i++)\
    \ {\n            if (vowels.Contains(word[i])) {\n                min = i;\n \
    \           }\n        }\n        string middle = \"\";\n        for (int i =\
    \ min; i < word.Length; i++) {\n            if (vowels.Contains(word[i])) {\n\
    \                middle = word.Substring(i, i + 1);\n                break;\n\
    \            }\n        }\n        string vowelToFind = middle[0];\n        if\
    \ (vowelToFind == word.Substring(0, 1))\n            vowelToFind = vowelToFind.ToUpper();\n\
    \        if (vowelToFind == word.Substring(0, -1))\n            vowelToFind =\
    \ vowelToFind.ToUpper();\n        if (vowels.Contains(vowelToFind))\n        \
    \    return vowelToFind;\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0l2dm7mt.cs(40,30): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp0l2dm7mt.cs(45,13): error CS1929: ''char[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<string>(ParallelQuery<string>,
    string)'' requires a receiver of type ''ParallelQuery<string>''

    /tmp/tmp0l2dm7mt.cs(27,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = string.Empty;\n        foreach (char c in word) {\n            int i = (int)c;\n\
    \            if (i > 96 && i < 123 && c > 64 && c < 91)\n                continue;\n\
    \            else if (i > 96 && i < 123 && c > 91 && c < 97)\n               \
    \ continue;\n            else if (i > 96 && i < 123 && c > 123 && c < 121)\n \
    \               continue;\n            else if (i > 97 && i < 123 && c > 64 &&\
    \ c < 91)\n                continue;\n            else if (i > 97 && i < 123 &&\
    \ c > 91 && c < 97)\n                continue;\n            else if (i > 97 &&\
    \ i < 123 && c > 123 && c < 121)\n                continue;\n            else\
    \ if (i > 123 && i < 126 && c > 64 && c < 91)\n                continue;\n   \
    \         else if (i > 123 && i < 126 && c > 91 && c < 97)\n                continue;\n\
    \            else if (i > 123 && i < 126 && c > 123 && c < 121)\n            \
    \    continue;\n            else if (i > 126 && i < 129 &&c > 64 && c < 91)\n\
    \                continue;\n            else if (i > 126 && i < 129 &&c > 91 &&\
    \ c < 97)\n                continue;\n            else if (i > 126 && i < 129\
    \ &&c > 123 && c < 121)\n                continue;\n            else if (i > 129\
    \ && i < 134 && c > 64 && c < 91)\n                continue;\n            else\
    \ if (i > 129 && i < 134 && c > 91 && c < 97)\n                continue;\n   \
    \         else if (i > 129 && i < 134 && c > 123 && c < 121)\n               \
    \ continue;\n            else if (i > 134 && i < 137 && c > 64 && c < 91)\n  \
    \              continue;\n            else if (i > 134 && i < 137 && c > 91 &&\
    \ c < 97)\n                continue;\n            else if (i > 134 && i < 137\
    \ && c > 123 && c < 121)\n                continue;\n            else if (i >\
    \ 137 && i < 140 &&c > 64 && c < 91)\n                continue;\n            else\
    \ if (i > 137 && i < 140 &&c > 91 && c < 97)\n                continue;\n    \
    \        else if (i > 137 && i < 140 &&c > 123 && c < 121)\n                continue;\n\
    \            else if (i > 140 && i < 143 && c > 64 && c < 91)\n              \
    \  continue;\n            else if (i > 140 && i < 143 && c \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmypbg9j2.cs(71,45): error CS1026: ) expected

    /tmp/tmpmypbg9j2.cs(71,45): error CS1525: Invalid expression term ''}''

    /tmp/tmpmypbg9j2.cs(71,45): error CS1002: ; expected

    /tmp/tmpmypbg9j2.cs(73,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpmypbg9j2.cs(89,2): error CS1513: } expected

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<char> vowels\
    \ = new List<char>();\n        vowels.AddRange(new char[] {'a', 'e', 'i', 'o',\
    \ 'u'});\n\n        int lastIndex = word.Length - 1;\n        for (int i = 0;\
    \ i <= lastIndex; i++) {\n            char current = word[i];\n            int\
    \ index = vowels.IndexOf(current);\n            char nextVowel = index + 1 ==\
    \ vowels.Count ? current\n                : vowels[index + 1];\n            if\
    \ (current == nextVowel) {\n                return current;\n            } else\
    \ if (i + 1 == lastIndex) {\n                return \"\";\n            }\n   \
    \     }\n        return \"\";\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprqulaimm.cs(34,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = string.Empty;\n        char[] arr = word.ToCharArray();\n        foreach (char\
    \ letter in arr) {\n            if (vowel == string.Empty && letter != 'A') {\n\
    \                vowel = letter;\n                continue;\n            }\n \
    \           if (vowel == string.Empty && letter != 'a') {\n                vowel\
    \ = letter;\n                continue;\n            }\n            if (vowel ==\
    \ string.Empty && letter != 'e') {\n                vowel = letter;\n        \
    \        continue;\n            }\n            if (vowel == string.Empty && letter\
    \ != 'I') {\n                vowel = letter;\n                continue;\n    \
    \        }\n            if (vowel == string.Empty && letter != 'I') {\n      \
    \          vowel = letter;\n                continue;\n            }\n       \
    \     if (vowel == string.Empty && letter != 'o') {\n                vowel = letter;\n\
    \                continue;\n            }\n            if (vowel == string.Empty\
    \ && letter != 'O') {\n                vowel = letter;\n                continue;\n\
    \            }\n            if (vowel == string.Empty && letter != 'u') {\n  \
    \              vowel = letter;\n                continue;\n            }\n   \
    \         if (vowel == string.Empty && letter != 'U') {\n                vowel\
    \ = letter;\n                continue;\n            }\n        }\n        return\
    \ vowel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxbz8276i.cs(28,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpxbz8276i.cs(32,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpxbz8276i.cs(36,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpxbz8276i.cs(40,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpxbz8276i.cs(44,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpxbz8276i.cs(48,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpxbz8276i.cs(52,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpxbz8276i.cs(56,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpxbz8276i.cs(60,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<string>\
    \ vowels = new List<string> { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        int\
    \ counter = 0;\n        foreach (char c in word) {\n            int index = -1;\n\
    \            bool found = false;\n            foreach (string vowel in vowels)\
    \ {\n                if (vowel.Equals(c)) {\n                    found = true;\n\
    \                    index = vowels.IndexOf(vowel);\n                    break;\n\
    \                }\n            }\n            if (found)\n                counter++;\n\
    \            if (counter > 1) {\n                int upperIndex = index - 1;\n\
    \                while (upperIndex >= 0 && vowels[upperIndex].Equals(c))\n   \
    \                 upperIndex--;\n                int lowerIndex = index + 1;\n\
    \                while (lowerIndex < vowels.Count && vowels[lowerIndex].Equals(c))\n\
    \                    lowerIndex++;\n                if (lowerIndex < upperIndex)\
    \ {\n                    string vowel1 = vowels[lowerIndex].ToString();\n    \
    \                string vowel2 = vowels[upperIndex].ToString();\n            \
    \        if (vowel1 == vowel2)\n                        return vowel1;\n     \
    \           }\n            }\n        }\n        return string.Empty;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02adc3e535ac4c7eaeb5e1a868676c21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02adc3e535ac4c7eaeb5e1a868676c21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new HashSet<char>(new char[] { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U' });\n        var firstLetter = word.First();\n        if (firstLetter !=\
    \ firstLetter.ToUpper()) {\n            return string.Empty;\n        }\n    \
    \    var secondLetter = word.FirstOrDefault(c => !vowels.Contains(c));\n     \
    \   if (secondLetter == null) {\n            return string.Empty;\n        }\n\
    \        var thirdLetter = word.LastOrDefault(c => !vowels.Contains(c));\n   \
    \     if (thirdLetter == null) {\n            return string.Empty;\n        }\n\
    \        if (vowels.Contains(firstLetter) && vowels.Contains(secondLetter) &&\
    \ vowels.Contains(thirdLetter)) {\n            var index = word.IndexOf(secondLetter);\n\
    \            var letter = word[index + 1];\n            return letter;\n     \
    \   }\n        return string.Empty;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt0yp8mg6.cs(26,40): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    /tmp/tmpt0yp8mg6.cs(40,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpt0yp8mg6.cs(30,13): warning CS0472: The result of the expression is always
    ''false'' since a value of type ''int'' is never equal to ''null'' of type ''int?''

    /tmp/tmpt0yp8mg6.cs(34,13): warning CS0472: The result of the expression is always
    ''false'' since a value of type ''int'' is never equal to ''null'' of type ''int?''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] arr =\
    \ word.ToCharArray();\n        Array.Sort(arr);\n        var i = 0;\n        var\
    \ j = arr.Length - 1;\n        var res = \"\";\n        while(i < j) {\n     \
    \       if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' ||\
    \ arr[i] == 'u' || arr[i] == 'A' || arr[i] == 'E' || arr[i] == 'I' || arr[i] ==\
    \ 'O' || arr[i] == 'U')\n                i++;\n            else if (arr[j] ==\
    \ 'a' || arr[j] == 'e' || arr[j] == 'i' || arr[j] == 'o' || arr[j] == 'u' || arr[j]\
    \ == 'A' || arr[j] == 'E' || arr[j] == 'I' || arr[j] == 'O' || arr[j] == 'U')\n\
    \                j--;\n            else\n                i++;\n            j--;\n\
    \        }\n        foreach(var v in arr)\n            if (v == 'a' || v == 'e'\
    \ || v == 'i' || v == 'o' || v == 'u' || v == 'A' || v == 'E' || v == 'I' || v\
    \ == 'O' || v == 'U')\n                res = v;\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv6eavq__.cs(40,23): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int len = word.Length;\n\
    \        List<char> vowels = new List<char>();\n        vowels.Add(\"a\");\n \
    \       vowels.Add(\"e\");\n        vowels.Add(\"i\");\n        vowels.Add(\"\
    o\");\n        vowels.Add(\"u\");\n        \n        int i;\n        for (i =\
    \ 0; i < len - 1; i++) {\n            if (vowels.Contains(word[i]) && vowels.Contains(word[i\
    \ + 1])) {\n                char ch1 = word[i];\n                char ch2 = word[i\
    \ + 1];\n                int diff = ch1 - ch2;\n                if (diff > 0 &&\
    \ (ch1 > ch2) || (ch1 < ch2)) {\n                    return string.Empty;\n  \
    \              }\n                if (diff < 0 && (ch1 > ch2) || (ch1 < ch2))\
    \ {\n                    char temp = ch2;\n                    ch2 = ch1;\n  \
    \                  ch1 = temp;\n                }\n                return word[i];\n\
    \            }\n        }\n        return string.Empty;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpywcopqkd.cs(26,20): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpywcopqkd.cs(27,20): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpywcopqkd.cs(28,20): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpywcopqkd.cs(29,20): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpywcopqkd.cs(30,20): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpywcopqkd.cs(46,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Your code\
    \ here\n        if (word.Length <= 1) return \"\";\n        int last = 0;\n  \
    \      for (int i = word.Length - 2; i >= 0; i--)\n            if (word[i] ==\
    \ 'e')\n                return \"\";\n            if (word[i] == 'a' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u')\n                last = i;\n   \
    \     int start = last + 1;\n        int end = word.Length - 1;\n        while\
    \ (start >= 0 && end < word.Length && word[start] == word[end])\n            start--;\n\
    \        while (end > start && word[start] == word[end - 1])\n            end--;\n\
    \        int diff = Math.Abs((end - start) / 2);\n        if (diff < 1) {\n  \
    \          diff = word[word.Length - 1] - word[word.Length - 2];\n        }\n\
    \        int index = diff;\n        for (int i = word.Length - 2; i >= 0; i--)\n\
    \            if (index-- == 0) {\n                return word[i];\n          \
    \  }\n            return \"\";\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphzdpx1_9.cs(30,22): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmphzdpx1_9.cs(30,40): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmphzdpx1_9.cs(30,58): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmphzdpx1_9.cs(30,76): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmphzdpx1_9.cs(31,24): error CS0103: The name ''i'' does not exist in the
    current context

    /tmp/tmphzdpx1_9.cs(45,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"u\";\n        string vowel1 = \"a\";\n        string vowel2 = \"e\";\n \
    \       string vowel3 = \"o\";\n        string vowel4 = \"a\";\n        string\
    \ vowel5 = \"u\";\n        string vowel6 = \"e\";\n        string vowel7 = \"\
    o\";\n        string vowel8 = \"a\";\n        string vowel9 = \"u\";\n       \
    \ string vowel10 = \"e\";\n        string vowel11 = \"o\";\n        string vowel12\
    \ = \"a\";\n        string vowel13 = \"u\";\n        string vowel14 = \"e\";\n\
    \        string vowel15 = \"o\";\n        string vowel16 = \"a\";\n        string\
    \ vowel17 = \"u\";\n        string vowel18 = \"e\";\n        string vowel19 =\
    \ \"o\";\n        string vowel20 = \"a\";\n        string vowel21 = \"u\";\n \
    \       string vowel22 = \"e\";\n        string vowel23 = \"o\";\n        string\
    \ vowel24 = \"a\";\n        string vowel25 = \"u\";\n        string vowel26 =\
    \ \"e\";\n        string vowel27 = \"o\";\n        string vowel28 = \"a\";\n \
    \       string vowel29 = \"u\";\n        string vowel30 = \"e\";\n        string\
    \ vowel31 = \"o\";\n        string vowel32 = \"a\";\n        string vowel33 =\
    \ \"u\";\n        string vowel34 = \"e\";\n        string vowel35 = \"o\";\n \
    \       string vowel36 = \"a\";\n        string vowel37 = \"u\";\n        string\
    \ vowel38 = \"e\";\n        string vowel39 = \"o\";\n        string vowel40 =\
    \ \"a\";\n        string vowel41 = \"u\";\n        string vowel42 = \"e\";\n \
    \       string vowel43 = \"o\";\n        string vowel44 = \"a\";\n        string\
    \ vowel45 = \"u\";\n        string vowel46 = \"e\";\n        string vowel47 =\
    \ \"o\";\n        string vowel48 = \"a\";\n        string vowel49 = \"u\";\n \
    \       string vowel50 = \"e\";\n        string vowel51 = \"o\";\n        string\
    \ vowel52 = \"a\";\n        string vowel53 = \"u\";\n        string vowel54 =\
    \ \"e\";\n        string vowel55 = \"o\";\n        string vowel56 = \"a\";\n \
    \       string vowel57 = \"u\";\n        string vowel58 = \"e\";\n        string\
    \ vowel59 = \"o\";\n        string vowel60 = \"a\";\n        string vowel61 =\
    \ \"u\";\n        string vowel62 = \"e\";\n        string vowel63\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpclo3_9zf.cs(87,23): error CS1002: ; expected

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"aeiouAEIOU\";\n        string vowelsUp = vowels.Substring(0, vowels.Length\
    \ - 1);\n        string vowelsDown = vowels.Substring(1, vowels.Length - 1);\n\
    \        int vowelCountUp = 0;\n        int vowelCountDown = 0;\n        \n  \
    \      var consonants = word.ToCharArray().Where(c => char.IsLetter(c)).ToList();\n\
    \        consonants.Reverse();\n        \n        int i = 0;\n        int j =\
    \ 0;\n        while (i != consonants.Count && j != vowels.Length) {\n        \
    \    int c = consonants[i];\n            if (c == vowels[j]) {\n             \
    \   vowelCountUp++;\n                i++;\n                j++;\n            }\n\
    \            else if (c == vowels[j + 1]) {\n                vowelCountDown++;\n\
    \                j++;\n            }\n            else if (c == vowels[j - 1])\
    \ {\n                vowelCountDown++;\n                j--;\n            }\n\
    \            else if (c == vowels[j + 1]) {\n                vowelCountDown++;\n\
    \                i++;\n                j++;\n            }\n            else if\
    \ (c == vowels[j - 1]) {\n                vowelCountUp++;\n                i++;\n\
    \                j--;\n            }\n            else {\n                i++;\n\
    \                j++;\n            }\n        }\n        \n        if (vowelCountUp\
    \ <= vowelCountDown) {\n            return vowelsUp;\n        }\n        else\
    \ {\n            return vowelsDown;\n        }\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.GetClosestVowel (System.String word)\
    \ [0x000cc] in <90f6d58060fe46cab5f804f323710a4e>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <90f6d58060fe46cab5f804f323710a4e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.GetClosestVowel (System.String word) [0x000cc] in <90f6d58060fe46cab5f804f323710a4e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <90f6d58060fe46cab5f804f323710a4e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiou\";\n        int index = word.Length;\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       index = i;\n                break;\n            }\n        }\n       \
    \ int leftIndex = word.Length - 1 - index;\n        int rightIndex = word.Length\
    \ - 1 - index - 1;\n        if (leftIndex < 0)\n            leftIndex = 0;\n \
    \       if (rightIndex < 0)\n            rightIndex = 0;\n        int leftLength\
    \ = word.Length - 1 - leftIndex;\n        int rightLength = word.Length - 1 -\
    \ rightIndex;\n        List<char> left = new List<char>();\n        List<char>\
    \ right = new List<char>();\n        for (int i = 0; i < leftLength; i++) {\n\
    \            left.Add(word[leftIndex + i]);\n        }\n        for (int i = 0;\
    \ i < rightLength; i++) {\n            right.Add(word[rightIndex + i]);\n    \
    \    }\n        leftIndex += 1;\n        rightIndex -= 1;\n        List<string>\
    \ leftVowels = new List<string>();\n        List<string> rightVowels = new List<string>();\n\
    \        foreach (char v in vowels) {\n            if (left.Contains(v))\n   \
    \             leftVowels.Add(v.ToString());\n            if (right.Contains(v))\n\
    \                rightVowels.Add(v.ToString());\n        }\n        List<string>\
    \ ret = new List<string>();\n        foreach (string s in leftVowels) {\n    \
    \        if (!rightVowels.Contains(s))\n                ret.Add(s);\n        }\n\
    \        if (ret.Count == 0)\n            return \"\";\n        string retValue\
    \ = ret[0];\n        foreach (string s in rightVowels) {\n            if (!leftVowels.Contains(s))\n\
    \                retValue = s;\n        }\n        return retValue;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3009f5b56d5d4616ba398178de05df14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3009f5b56d5d4616ba398178de05df14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Find the\
    \ first vowel\n        int index = word.LastIndexOf(\"a\");\n        if(index==-1)return\
    \ \"\";\n        int countOfVowels = word.LastIndexOf(\"e\") - index;\n      \
    \  char firstVowel = 'a';\n        char lastVowel = 'e';\n        if(countOfVowels\
    \ == 0){\n            char currentChar = firstVowel;\n            while(currentChar\
    \ != lastVowel)currentChar++;\n            lastVowel = currentChar;\n        }\n\
    \        else{\n            char currentChar = firstVowel;\n            while(currentChar\
    \ != lastVowel && currentChar < lastVowel)currentChar++;\n            lastVowel\
    \ = currentChar;\n        }\n        // Find the second vowel\n        index =\
    \ word.LastIndexOf(\"e\");\n        if(index==-1)return \"\";\n        int countOfVowels\
    \ = word.LastIndexOf(\"i\") - index;\n        char secondVowel = 'e';\n      \
    \  char firstVowel = 'i';\n        if(countOfVowels == 0){\n            char currentChar\
    \ = firstVowel;\n            while(currentChar != secondVowel)currentChar--;\n\
    \            secondVowel = currentChar;\n        }\n        else{\n          \
    \  char currentChar = firstVowel;\n            while(currentChar != secondVowel\
    \ && currentChar > secondVowel)currentChar--;\n            secondVowel = currentChar;\n\
    \        }\n        int length = word.length;\n        int midIndex = length /\
    \ 2;\n        char m1 = word[midIndex];\n        char m2 = word[length - midIndex\
    \ - 1];\n        // Find the third vowel\n        index = word.LastIndexOf(\"\
    i\");\n        if(index==-1)return \"\";\n        int countOfVowels = word.LastIndexOf(\"\
    o\") - index;\n        char thirdVowel = 'i';\n        char secondVowel = 'o';\n\
    \        if(countOfVowels == 0){\n            char currentChar = secondVowel;\n\
    \            while(currentChar != thirdVowel)currentChar++;\n            thirdVowel\
    \ = currentChar;\n        }\n        else{\n            char currentChar = secondVowel;\n\
    \            while(currentChar != thirdVowel && currentChar < thirdVowel)currentChar++;\n\
    \            thirdVowel = currentChar;\n        }\n        int countOfVowel\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5x5ovhep.cs(76,25): error CS1002: ; expected

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var result =\
    \ new List<char>();\n        for (int i = word.Length - 1; i >= 0; i--) {\n  \
    \          bool found = false;\n            foreach (char c in word.Where((c)\
    \ => c >= 'a' && c <= 'z').ToArray()) {\n                if (word.LastOrDefault()\
    \ == c) continue;\n                if (word.FirstOrDefault() == c) continue;\n\
    \                if (word.LastOrDefault() == c) continue;\n                if\
    \ (word.FirstOrDefault() == c) continue;\n                found = true;\n    \
    \        }\n            if (found) {\n                result.Add(word.LastOrDefault());\n\
    \            }\n        }\n        return result.Count()\n            ? result.First()\n\
    \            : string.Empty;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8xe2kjp2.cs(38,16): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    /tmp/tmp8xe2kjp2.cs(38,16): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''char'' and ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (string.IsNullOrWhiteSpace(word))\n\
    \            return \"\";\n        var consonants = new[]{\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"};\n        var vowels = new[]{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"};\n        var consonantsCount = 0;\n        var\
    \ vowelsCount = 0;\n        var length = word.Length;\n        foreach (char letter\
    \ in word) {\n            if (consonants.Contains(letter))\n                consonantsCount++;\n\
    \            if (vowels.Contains(letter))\n                vowelsCount++;\n  \
    \      }\n        if (consonantsCount < 2 || vowelsCount < 2)\n            return\
    \ \"\";\n        int upperPosition = 0;\n        int lowerPosition = length -\
    \ 1;\n        int closestVowel = 0;\n        while ((upperPosition >= 0) && (lowerPosition\
    \ >= 0)) {\n            int lowerChar = word[lowerPosition];\n            int\
    \ upperChar = word[upperPosition];\n            bool lowerCharIsVowel = vowels.Contains(lowerChar);\n\
    \            bool upperCharIsVowel = vowels.Contains(upperChar);\n           \
    \ if ((lowerChar == upperChar) && ((lowerCharIsVowel == upperCharIsVowel) || (lowerCharIsVowel\
    \ && upperCharIsVowel)))\n                closestVowel = lowerChar;\n        \
    \    else if (lowerCharIsVowel && upperCharIsVowel)\n                closestVowel\
    \ = upperChar;\n            else if (lowerCharIsVowel)\n                closestVowel\
    \ = lowerChar;\n            else\n                closestVowel = upperChar;\n\
    \            upperPosition--;\n            lowerPosition--;\n        }\n     \
    \   return closestVowel;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo7h7weby.cs(32,17): error CS1929: ''string[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<char>(ParallelQuery<char>,
    char)'' requires a receiver of type ''ParallelQuery<char>''

    /tmp/tmpo7h7weby.cs(34,17): error CS1929: ''string[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<char>(ParallelQuery<char>,
    char)'' requires a receiver of type ''ParallelQuery<char>''

    /tmp/tmpo7h7weby.cs(45,37): error CS1929: ''string[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<int>(ParallelQuery<int>,
    int)'' requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpo7h7weby.cs(46,37): error CS1929: ''string[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<int>(ParallelQuery<int>,
    int)'' requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmpo7h7weby.cs(58,16): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new char[] { 'a', 'A', 'i', 'I', 'o', 'O', 'u', 'U', 'y' };\n        string\
    \ vowel_left = \"\";\n        string vowel_right = \"\";\n        int vowel_index\
    \ = -1;\n        foreach (char c in word.Reverse().ToArray()) {\n            int\
    \ vowel_left_index = vowels.IndexOf(c);\n            int vowel_right_index = vowels.IndexOf(c,\
    \ vowel_left_index + 1);\n            if (vowel_left_index > -1) {\n         \
    \       vowel_left = vowels[vowel_left_index];\n            }\n            if\
    \ (vowel_right_index > -1) {\n                vowel_right = vowels[vowel_right_index];\n\
    \            }\n            if (vowel_left != \"\" && vowel_right != \"\") {\n\
    \                vowel_index = vowel_left.Length;\n                break;\n  \
    \          }\n        }\n        if (vowel_index == -1) {\n            return\
    \ \"\";\n        }\n        int vowel_diff = vowel_index - word[vowel_index].Length;\n\
    \        int vowel_diff_from_left = vowel_diff + vowel_left.Length;\n        int\
    \ vowel_diff_from_right = vowel_diff - vowel_right.Length;\n        if (vowel_left_index\
    \ > vowel_right_index && vowel_diff_from_left < vowel_diff_from_right) {\n   \
    \         return vowel_left;\n        }\n        else if (vowel_left_index < vowel_right_index\
    \ && vowel_diff_from_left > vowel_diff_from_right) {\n            return vowel_right;\n\
    \        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3k3hc_vd.cs(29,43): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp3k3hc_vd.cs(30,52): error CS1503: Argument 1: cannot convert from ''char''
    to ''System.Array''

    /tmp/tmp3k3hc_vd.cs(32,30): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp3k3hc_vd.cs(35,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp3k3hc_vd.cs(45,58): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp3k3hc_vd.cs(48,13): error CS0103: The name ''vowel_left_index'' does not
    exist in the current context

    /tmp/tmp3k3hc_vd.cs(48,32): error CS0103: The name ''vowel_right_index'' does
    not exist in the current context

    /tmp/tmp3k3hc_vd.cs(51,18): error CS0103: The name ''vowel_left_index'' does not
    exist in the current context

    /tmp/tmp3k3hc_vd.cs(51,37): error CS0103: The name ''vowel_right_index'' does
    not exist in the current context

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<string>\
    \ vowels = Enumerable.Range(1, word.Length).Select(i => i.ToString()).ToList();\n\
    \        vowels.Insert(0, \"u\");\n        vowels.Add(\"U\");\n        vowels.Insert(vowels.Count\
    \ - 1, \"e\");\n        vowels.Insert(vowels.Count - 2, \"a\");\n        vowels.Insert(vowels.Count\
    \ - 3, \"o\");\n        vowels.Insert(vowels.Count - 4, \"i\");\n        vowels.Insert(vowels.Count\
    \ - 5, \"A\");\n        vowels.Insert(vowels.Count - 6, \"O\");\n        vowels.Insert(vowels.Count\
    \ - 7, \"I\");\n\n        char[] vowelChars = word.ToCharArray();\n\n        char\
    \ lastVowel = vowelChars[vowelChars.Length - 1];\n        char currentVowel =\
    \ vowelChars[0];\n        int distance = 0;\n\n        for (int i = 0; i < vowelChars.Length\
    \ - 1; i++) {\n            distance += vowels.IndexOf(vowelChars[i]).CompareTo(vowels.IndexOf(lastVowel));\n\
    \            if (vowelChars[i + 1] == lastVowel) {\n                currentVowel\
    \ = vowelChars[i];\n                distance = i;\n            }\n        }\n\
    \        return currentVowel == lastVowel ? vowels[distance] : \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ag_9ozz.cs(42,40): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp9ag_9ozz.cs(42,80): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // write your\
    \ code here\n        int start = -1;\n        int end = word.Length - 1;\n\n \
    \       string vowels = \"\";\n        string vowel = \"\";\n\n        while (start\
    \ < word.Length - 1) {\n            if (word.Substring(start, 1).ToUpper() ==\
    \ word.Substring(start + 1, 1).ToUpper()) {\n                start += 1;\n   \
    \             vowels += word.Substring(start, 1);\n            }\n           \
    \ if (word.Substring(end - 1, 1).ToUpper() == word.Substring(end + 1, 1).ToUpper())\
    \ {\n                end -= 1;\n                vowel += word.Substring(end -\
    \ 1, 1);\n            }\n        }\n        vowels = vowels.ToUpper();\n     \
    \   vowel = vowel.ToUpper();\n        if (vowels.Length > vowel.Length) {\n  \
    \          return vowels;\n        }\n        return vowel;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: StartIndex\
    \ cannot be less than zero.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00004] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.GetClosestVowel (System.String word) [0x0001b] in <12aac18656ab42c4a5555b8756242b99>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <12aac18656ab42c4a5555b8756242b99>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: StartIndex\
    \ cannot be less than zero.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00004] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.GetClosestVowel (System.String word) [0x0001b] in <12aac18656ab42c4a5555b8756242b99>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <12aac18656ab42c4a5555b8756242b99>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"aeiouyAEIOUY\";\n        var consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        var consonantIndex = consonants.IndexOf(vowels.Last());\n\n       \
    \ if (consonantIndex == -1) return \"\";\n        \n        // find last consonant\
    \ of word\n        var consonantIndex2 = consonants.IndexOf(word.Last(), consonantIndex\
    \ + 1);\n        if (consonantIndex2 == -1) return \"\";\n        \n        var\
    \ leftConsonants = word.Substring(0, consonantIndex + 1).ToUpper();\n        var\
    \ rightConsonants = word.Substring(consonantIndex2 + 1).ToUpper();\n\n       \
    \ var vIndex = Array.IndexOf(vowels, leftConsonants);\n        if (vIndex == -1)\
    \ return \"\";\n\n        var vIndex2 = Array.IndexOf(vowels, rightConsonants);\n\
    \        if (vIndex2 == -1) return \"\";\n\n        // check if the given word\
    \ is a consonant or not\n        if (consonants.Contains(leftConsonants) == false)\
    \ \n            return \"\";\n\n        // find the vowel in the given word between\
    \ the two consonants\n        if (leftConsonants.IndexOf(rightConsonants) > vIndex)\
    \ \n            return \"\";\n            \n        \n        if (rightConsonants.IndexOf(vIndex2)\
    \ < vIndex) \n            return \"\";\n            \n        if (leftConsonants.IndexOf(vIndex2)\
    \ < vIndex) \n            return \"\";\n\n        var vIndex3 = Array.IndexOf(vowels,\
    \ rightConsonants);\n        if (vIndex3 == -1) return \"\";\n\n        \n   \
    \     if (rightConsonants.IndexOf(vIndex3) > vIndex) \n            return \"\"\
    ;\n\n        return leftConsonants.Substring(vIndex + 1).ToUpper();\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa446hirv.cs(37,36): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpa446hirv.cs(40,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpa446hirv.cs(52,37): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    /tmp/tmpa446hirv.cs(55,36): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    /tmp/tmpa446hirv.cs(58,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpa446hirv.cs(62,37): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        //write your\
    \ code in here\n        string vowel = string.Empty;\n        string vowels =\
    \ string.Empty;\n        int index = 0;\n        int size = word.Length;\n   \
    \     if (word.Length > 1) {\n            for (index = size; index >= 1; index--)\
    \ {\n                if (Char.IsUpper(word[index])) {\n                    vowels\
    \ += word[index].ToString();\n                }\n                else {\n    \
    \                index = index - 1;\n                }\n            }\n      \
    \      vowel = vowels.Substring(0, vowels.Length - 1);\n            if (vowel.Contains(\"\
    A\") || vowel.Contains(\"E\") || vowel.Contains(\"I\") || vowel.Contains(\"O\"\
    ) || vowel.Contains(\"U\")) {\n                return vowel;\n            }\n\
    \            else {\n                return string.Empty;\n            }\n   \
    \     }\n        else {\n            return vowel;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.GetClosestVowel (System.String word)\
    \ [0x0002e] in <58a4fc78ebc842bab614a36d05cff48e>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <58a4fc78ebc842bab614a36d05cff48e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.GetClosestVowel (System.String word) [0x0002e] in <58a4fc78ebc842bab614a36d05cff48e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <58a4fc78ebc842bab614a36d05cff48e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word.Length < 3)\n            return \"\";\n\n        char first = word[word.Length\
    \ - 2];\n        char last = word[word.Length - 1];\n\n        List<char> vowels\
    \ = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        List<char> consonants\
    \ = new List<char>() { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\n        char prevConsonant\
    \ = (char)0;\n        char nextConsonant = (char)0;\n\n        for (int i = 0;\
    \ i < word.Length - 1; i++) {\n            prevConsonant = consonants[consonants.IndexOf(first)];\n\
    \            nextConsonant = consonants[consonants.IndexOf(last)];\n\n       \
    \     if (vowels.Contains(first) && vowels.Contains(last)) {\n               \
    \ if (vowels.IndexOf(prevConsonant) < vowels.IndexOf(nextConsonant))\n       \
    \             return first.ToString();\n\n                else if (vowels.IndexOf(prevConsonant)\
    \ > vowels.IndexOf(nextConsonant))\n                    return last.ToString();\n\
    \            }\n        }\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8394a44ceaa46f3a81cb190a3b9c8e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8394a44ceaa46f3a81cb190a3b9c8e7>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.GetClosestVowel (System.String word) [0x0"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        \n        string pattern = vowels.Substring(0, vowels.Length\
    \ - 1);\n        string vowelWithTwoConsonants = Regex.Replace(vowels, pattern,\
    \ \"\");\n\n        string pattern2 = vowelWithTwoConsonants.Substring(1, vowelWithTwoConsonants.Length\
    \ - 2);\n        string vowelWithTwoConsonantsAndNextConsonant = Regex.Replace(vowelWithTwoConsonants,\
    \ pattern2, \"\");\n        \n        string pattern3 = vowelWithTwoConsonantsAndNextConsonant.Substring(0,\
    \ vowelWithTwoConsonantsAndNextConsonant.Length - 1);\n        string vowelWithTwoConsonantsAndNextConsonantAndNextConsonant\
    \ = Regex.Replace(vowelWithTwoConsonantsAndNextConsonant, pattern3, \"\");\n\n\
    \        string pattern4 = vowelWithTwoConsonantsAndNextConsonantAndNextConsonant.Substring(1,\
    \ vowelWithTwoConsonantsAndNextConsonantAndNextConsonant.Length - 1);\n      \
    \  string vowelWithTwoConsonantsAndNextConsonantAndNextConsonantAndNextConsonant\
    \ = Regex.Replace(vowelWithTwoConsonantsAndNextConsonantAndNextConsonant, pattern4,\
    \ \"\");\n\n        string pattern5 = vowelWithTwoConsonantsAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonant.Substring(0,\
    \ vowelWithTwoConsonantsAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonant.Length\
    \ - 1);\n        string vowelWithTwoConsonantsAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonant\
    \ = Regex.Replace(vowelWithTwoConsonantsAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonant,\
    \ pattern5, \"\");\n\n        string pattern6 = vowelWithTwoConsonantsAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonant.Substring(1,\
    \ vowelWithTwoConsonantsAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonant.Length\
    \ - 1);\n        string vowelWithTwoConsonantsAndNextConsonantAndNextConsonantAndNextConsonantAndNextConsonantAnd\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo96w13uu.cs(42,105): error CS1002: ; expected

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int vowels =\
    \ 0, consonants = 0, index = 0;\n        char previous = string.Empty;\n     \
    \   for (int i = word.Length - 2; i >= 0; i--) {\n            char current = (char)word[i];\n\
    \            if (current == 'a' || current == 'e' || current == 'i' || current\
    \ == 'o' || current == 'u' || current == 'y' || current == 'A' || current == 'E'\
    \ || current == 'I' || current == 'O' || current == 'U' || current == 'Y') {\n\
    \                vowels++;\n                continue;\n            }\n       \
    \     for (int j = 0; j < i; j++) {\n                char left = (char)word[j];\n\
    \                if (left == current) {\n                    index++;\n      \
    \              previous = left;\n                    if (index == 2) {\n     \
    \                   return current;\n                    }\n                }\n\
    \            }\n        }\n        return previous;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7f9a413x.cs(25,25): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp7f9a413x.cs(38,32): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp7f9a413x.cs(43,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp7f9a413x.cs(24,25): warning CS0219: The variable ''consonants'' is assigned
    but its value is never used

    '
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        bool hasUpper\
    \ = false;\n        bool hasLower = false;\n        string vowel = \"a\";\n  \
    \      string vowel2 = \"\";\n        bool hasVowel2 = false;\n        for (int\
    \ i = 0; i < word.Length; i++) {\n            char ch = word[i];\n           \
    \ if (Char.IsUpper(ch)) {\n                if (hasUpper) {\n                 \
    \   vowel2 = vowel + string.Empty;\n                    hasVowel2 = false;\n \
    \                   hasUpper = false;\n                } else {\n            \
    \        hasUpper = true;\n                    vowel = \"A\";\n              \
    \  }\n            } else if (Char.IsLower(ch)) {\n                if (hasLower)\
    \ {\n                    vowel2 = vowel + string.Empty;\n                    hasVowel2\
    \ = false;\n                    hasLower = false;\n                } else {\n\
    \                    hasLower = true;\n                    vowel = \"a\";\n  \
    \              }\n            } else {\n                if (vowel2 == string.Empty)\
    \ {\n                    vowel2 = vowel + string.Empty;\n                    hasVowel2\
    \ = true;\n                }\n            }\n        }\n        if (hasVowel2)\
    \ {\n            vowel2 = vowel + vowel2;\n        }\n        int index = word.Length\
    \ - 2;\n        for (int i = (word.Length - 1); i >= 0; i--) {\n            if\
    \ (i == index) {\n                return vowel2;\n            }\n            char\
    \ ch = word[i];\n            if (Char.IsUpper(ch)) {\n                index--;\n\
    \                if (index == -1) {\n                    return vowel2;\n    \
    \            }\n                hasUpper = false;\n                vowel = \"\
    A\";\n                if (index == word.Length - 2) {\n                    index++;\n\
    \                }\n            } else if (Char.IsLower(ch)) {\n             \
    \   index--;\n                if (index == -1) {\n                    return vowel2;\n\
    \                }\n                hasLower = false;\n                vowel =\
    \ \"a\";\n                if (index == word.Length - 2) {\n                  \
    \  index++;\n                }\n            } else {\n                if (vowel2\
    \ == string.Empty) {\n                    vowel2 = vowel + string.Empty;\n   \
    \                 hasVowel2 = true;\n                }\n            }\n      \
    \  }\n        if (hasVowel2) {\n            return vowel2;\n        }\n      \
    \  return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3d02ceea47f499db1fee4e1b451edf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3d02ceea47f499db1fee4e1b451edf5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"a\";\n        int length = word.Length;\n        for (int i = 0; i < length;\
    \ i++) {\n            if (word.Substring(i, 1).ToLower() == vowel.ToLower()) {\n\
    \                break;\n            }\n        }\n        string result = \"\"\
    ;\n        for (int i = (length - 1); i >= 0; i--) {\n            if (word.Substring(i,\
    \ 1).ToLower() == vowel.ToLower()) {\n                result = word.Substring(0,\
    \ i);\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <094b1b44a2e3446d9b443221408dddd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <094b1b44a2e3446d9b443221408dddd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        int len = word.Length;\n        int consonantCount\
    \ = 0;\n        string result = \"\";\n        for (int i = len - 1; i >= 0; i--)\
    \ {\n            if (vowels.IndexOf(word[i]) != -1) {\n                consonantCount\
    \ += 1;\n            }\n            else if (consonantCount == 1) {\n        \
    \        result = word[i];\n            }\n            if (consonantCount == 2\
    \ && i >= len) {\n                return result;\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp58f_ylv1.cs(33,26): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] letters\
    \ = word.ToCharArray();\n        List<char> vowels = new List<char>();\n     \
    \   foreach (char letter in letters) {\n            if (letter == 'A' || letter\
    \ == 'E' || letter == 'I' || letter == 'O' || letter == 'U') {\n             \
    \   vowels.Add(letter);\n            }\n        }\n        foreach (char letter\
    \ in letters) {\n            if (letter == 'Y' || letter == 'O' || letter == 'U')\
    \ {\n                vowels.Add(letter);\n            }\n        }\n        foreach\
    \ (char letter in letters) {\n            if (letter == 'a' || letter == 'e' ||\
    \ letter == 'i' || letter == 'o' || letter == 'u') {\n                vowels.Add(letter);\n\
    \            }\n        }\n        foreach (char letter in letters) {\n      \
    \      if (letter == 'y' || letter == 'o' || letter == 'u') {\n              \
    \  vowels.Add(letter);\n            }\n        }\n        if (vowels.Count > 2)\
    \ {\n            int index = 0;\n            for (int i = vowels.Count - 1; i\
    \ >= 0; i--) {\n                if (vowels.Contains(letters[i])) {\n         \
    \           if (letters[i] == vowels[vowels.Count - 1]) {\n                  \
    \      index = i;\n                    }\n                }\n            }\n \
    \           while (index >= 0) {\n                char c = vowels[index];\n  \
    \              index--;\n                if (letters[index] == c) {\n        \
    \            return c;\n                }\n            }\n            return string.Empty;\n\
    \        }\n        return string.Empty;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppxsjklfs.cs(59,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word.Length <= 0)\n            return \"\";\n        List<string> vowelList\
    \ = new List<string> { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        List<string>\
    \ tempList = new List<string>();\n        int index = 0;\n        while (index\
    \ != word.Length - 1) {\n            index = word.IndexOfAny(vowelList, index);\n\
    \            if (index == -1)\n                return \"\";\n            tempList.Add(word.Substring(index\
    \ + 1, 1));\n            index++;\n        }\n        string vowel = tempList.First();\n\
    \        for (int i = 0; i < tempList.Count - 1; i++) {\n            if (vowel.Equals(tempList[i]))\
    \ {\n                vowel = tempList[i + 1];\n            }\n        }\n    \
    \    return vowel;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp30nevmfl.cs(30,37): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''char[]''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Your code\
    \ here\n        bool bFirstConsonant = false;\n        bool bLastConsonant = false;\n\
    \        int index = word.Length - 1;\n        string vowels = string.Empty;\n\
    \        while(index >= 0) {\n            if (char.IsUpper(word[index]))\n   \
    \             bFirstConsonant = true;\n            else if (char.IsUpper(word[index\
    \ + 1]))\n                bLastConsonant = true;\n            if (bFirstConsonant\
    \ && bLastConsonant)\n                vowels += \"U\";\n            else if (bFirstConsonant)\n\
    \                vowels += \"U\";\n            else if (bLastConsonant)\n    \
    \            vowels += \"U\";\n            else\n                vowels += word[index];\n\
    \            index--;\n        }\n        return vowels;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.GetClosestVowel (System.String word)\
    \ [0x00030] in <4c3a1c59e08d4f8fa748ff2eb3368cf4>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <4c3a1c59e08d4f8fa748ff2eb3368cf4>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.GetClosestVowel (System.String word) [0x00030] in <4c3a1c59e08d4f8fa748ff2eb3368cf4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <4c3a1c59e08d4f8fa748ff2eb3368cf4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word == \"\") return \"\";\n        bool isVowel = Char.IsUpper(word[0])\
    \ || Char.IsUpper(word[word.Length-1]);\n        if (isVowel) return \"\";\n \
    \       string result = \"\";\n        for(int i = word.Length-2; i >= 0; i--)\
    \ {\n            string vowel = word.Substring(i,2);\n            char consonant\
    \ = word.Substring(i,1);\n            if ((consonant.Equals(\"y\")) && (vowel.Equals(\"\
    a\")) || (vowel.Equals(\"i\")) || (vowel.Equals(\"o\")) || (vowel.Equals(\"u\"\
    ))) {\n                result = vowel;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqnqrh2bg.cs(30,30): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        string vowelsLeft = vowels.Substring(0,vowels.Length-1);\n\
    \        string vowelsRight = vowels.Substring(-1,vowels.Length);\n        string\
    \ vowelsBoth = vowelsLeft + vowelsRight;\n        string vowelsBoth2 = vowels.Substring(0,vowels.Length-1);\n\
    \        string vowelsBoth3 = vowels.Substring(-1,vowels.Length);\n\n        Dictionary<string,\
    \ string> vowelDict = new Dictionary<string, string>();\n        vowelDict.Add(\"\
    a\", \"\");\n        vowelDict.Add(\"e\", \"\");\n        vowelDict.Add(\"i\"\
    , \"\");\n        vowelDict.Add(\"o\", \"\");\n        vowelDict.Add(\"u\", \"\
    \");\n        vowelDict.Add(\"A\", \"\");\n        vowelDict.Add(\"E\", \"\");\n\
    \        vowelDict.Add(\"I\", \"\");\n        vowelDict.Add(\"O\", \"\");\n  \
    \      vowelDict.Add(\"U\", \"\");\n        vowelDict.Add(\"a\", \"\");\n    \
    \    vowelDict.Add(\"e\", \"\");\n        vowelDict.Add(\"i\", \"\");\n      \
    \  vowelDict.Add(\"o\", \"\");\n        vowelDict.Add(\"u\", \"\");\n        vowelDict.Add(\"\
    A\", \"\");\n        vowelDict.Add(\"E\", \"\");\n        vowelDict.Add(\"I\"\
    , \"\");\n        vowelDict.Add(\"O\", \"\");\n        vowelDict.Add(\"U\", \"\
    \");\n\n        string temp = vowelsBoth.TrimEnd();\n        List<char> vowelList\
    \ = new List<char>();\n        for (int i = 0; i < temp.Length; i++) {\n     \
    \       char c = temp[i];\n            if (vowelDict.ContainsKey(c)) {\n     \
    \           vowelList.Add(c);\n            }\n        }\n\n        for (int i\
    \ = temp.Length-1; i >= 0; i--) {\n            if (vowelDict.ContainsKey(temp[i]))\
    \ {\n                vowelList.Add(temp[i]);\n            }\n        }\n\n   \
    \     bool vowelFound = false;\n        for (int i = 0; i < vowelList.Count; i++)\
    \ {\n            if (vowelsBoth.IndexOf(vowelList[i]) != -1) {\n             \
    \   vowelFound = true;\n                break;\n            }\n        }\n   \
    \     if (!vowelFound) return \"\";\n        int consonantIndex = word.Length\
    \ - vowelsBoth.Length;\n        char[] consonants = word.ToCharArray();\n    \
    \    consonants[consonantIndex] = 'z';\n        string consonantsString = String.Join(\"\
    \", consonants);\n        List<char> consonantList = new List<char>();\n     \
    \   for (int i = 0; i < consonantsString.Length; i++) {\n            char c =\
    \ consonantsString[i];\n            if (vowelDict.ContainsKey(c)) {\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn_evex43.cs(86,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpn_evex43.cs(102,2): error CS1513: } expected

    '
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"\";\n        HashSet<string> vowels = new HashSet<string> { \"A\", \"a\"\
    , \"E\", \"e\", \"I\", \"i\", \"O\", \"o\", \"U\", \"u\" };\n        char[] vowelChar\
    \ = word.ToCharArray().Where(x => vowels.Contains(x.ToString())).ToArray();\n\
    \        if (vowelChar.Length > 0)\n            vowel = vowelChar[vowelChar.Length\
    \ - 1].ToString();\n\n        return vowel;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8237ca1810f54c938f7e03a675bde949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8237ca1810f54c938f7e03a675bde949>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // 1. Your code\
    \ goes here\n        var vowels = new List<char>() { 'A', 'U', 'I', 'O', 'U',\
    \ 'I', 'O', 'U', 'I', 'O', 'U', 'I' };\n        var vowelsCount = vowels.Count;\n\
    \        var vowelIndexes = word.Reverse().Select((c, i) => new { \n         \
    \   c = c, \n            i = i })\n        .Where(x => vowels.Contains(x.c) &&\
    \ vowelIndexes.Skip(vowels.IndexOf(x.c) + 1).Take(vowelsCount).SequenceEqual(vowels.Reverse())).SelectMany(x\
    \ => new []{ x.i }).ToList();\n        if (vowelIndexes.Count == 0) return string.Empty;\n\
    \        return vowelIndexes.Aggregate((x, y) => vowels[y].ToString());\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprp1y51cr.cs(30,45): error CS0841: Cannot use local variable ''vowelIndexes''
    before it is declared

    /tmp/tmprp1y51cr.cs(31,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char letter\
    \ = '\\0';\n        char consonant = '\\0';\n        int len = word.Length;\n\
    \        string vowel = \"AEIOUaeiou\";\n        int consonantLength = vowel.Length;\n\
    \        if (len > consonantLength) {\n            char letter2 = word.Substring((len\
    \ - consonantLength));\n            if (vowel.Contains(letter2))\n           \
    \     letter2 = word.Substring((len - consonantLength - 1));\n            letter\
    \ = letter2;\n        } else {\n            consonant = word.Substring((len -\
    \ consonantLength));\n            if (vowel.Contains(consonant))\n           \
    \     consonant = word.Substring((len - consonantLength - 1));\n            letter\
    \ = consonant;\n        }\n        bool isVowel = false;\n        for (int i =\
    \ len - 1; i >= 0; i--) {\n            char letter2 = word.Substring(i);\n   \
    \         if (vowel.Contains(letter2))\n                isVowel = true;\n    \
    \    }\n        if (isVowel)\n            return vowel.IndexOf(letter) + 1 + letter;\n\
    \        else\n            return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6e673yyu.cs(30,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp6e673yyu.cs(32,27): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp6e673yyu.cs(35,25): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp6e673yyu.cs(37,29): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp6e673yyu.cs(42,28): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp6e673yyu.cs(47,20): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new List<char>() { 'A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u' };\n   \
    \     var index = 0;\n        var resultIndex = vowels.Count;\n        foreach\
    \ (var c in word.ToLower()) {\n            index = word.IndexOf(c, index);\n \
    \           if (index > 0 && vowels.Contains(c)) {\n                index++;\n\
    \                resultIndex--;\n            }\n        }\n        string result\
    \ = \"\";\n        if (resultIndex != 0) {\n            result = vowels[resultIndex];\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmpsucxoo.cs(36,22): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = \"aeiouAEIOU\".ToCharArray();\n        int startPosition = -1;\n        int\
    \ endPosition = word.Length;\n        foreach (char ch in word) {\n          \
    \  if (vowels.Contains(ch)) {\n                startPosition = word.IndexOf(ch,\
    \ startPosition + 1);\n                endPosition = word.IndexOf(ch, endPosition\
    \ - 1);\n                if (startPosition == -1 || endPosition == -1) {\n   \
    \                 return \"\";\n                }\n                if (endPosition\
    \ < startPosition) {\n                    endPosition = startPosition;\n     \
    \           }\n                string result = word.Substring(startPosition +\
    \ 1, endPosition - startPosition - 1);\n                return result;\n     \
    \       }\n        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82ee0206364e4bfaa7b21ac87f211786>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82ee0206364e4bfaa7b21ac87f211786>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<char> charList\
    \ = word.ToCharArray().ToList();\n        Dictionary<string,List<char>> dic =\
    \ new Dictionary<string,List<char>>();\n        foreach(var v in vowels)\n   \
    \     {\n            if(charList.IndexOf(v) == 0) dic.Add(v,new List<char>());\n\
    \            else \n            {\n                foreach(var c in charList)\n\
    \                {\n                    if(v == c) break;\n                  \
    \  if(v > c) break;\n                }\n                if(charList.IndexOf(v)\
    \ == charList.Count) dic.Add(v,new List<char>());\n                else\n    \
    \            {\n                    List<char> temp = dic.FirstOrDefault(k=>k.Value.IndexOf(v)\
    \ > -1 && k.Value.IndexOf(v) < k.Value.IndexOf(c));\n                    if(temp\
    \ != null) dic.Remove(k);\n                    dic.Add(v,new List<char>(c));\n\
    \                }\n            }\n        }\n        \n        var result = dic.FirstOrDefault(k\
    \ => k.Value.Count > 0 && k.Value.IndexOf(vowels.Last()) != -1).Value;\n     \
    \   if(result == null || result.Count() == 0) return string.Empty;\n        result\
    \ = result.IndexOf(vowels.Last()) + vowels.Count;\n        return vowels[result];\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsc7rlm8d.cs(26,26): error CS0103: The name ''vowels'' does not exist in
    the current context

    /tmp/tmpsc7rlm8d.cs(39,125): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmpsc7rlm8d.cs(40,49): error CS0103: The name ''k'' does not exist in the
    current context

    /tmp/tmpsc7rlm8d.cs(41,46): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmpsc7rlm8d.cs(46,83): error CS0103: The name ''vowels'' does not exist in
    the current context

    /tmp/tmpsc7rlm8d.cs(48,33): error CS0103: The name ''vowels'' does not exist in
    the current context

    /tmp/tmpsc7rlm8d.cs(48,50): error CS0103: The name ''vowels'' does not exist in
    the current context

    /tmp/tmpsc7rlm8d.cs(49,16): error CS0103: The name ''vowels'' does not exist in
    the current context

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = { ' ', 'A', 'E', 'I', 'O', 'U' };\n        var vowelIndex = word.Length -\
    \ 1;\n        int lastConsonantIndex = 0;\n        int consonantIndex = word.Length\
    \ - 1;\n        while (vowelIndex >= 0 && consonantIndex >= 0) {\n           \
    \ var consonant = word[consonantIndex];\n            var vowel = vowels[vowelIndex];\n\
    \            if (vowel == consonant) {\n                vowelIndex--;\n      \
    \          consonantIndex--;\n            }\n            else if (consonant ==\
    \ 'Z') {\n                if (vowelIndex > 0) {\n                    vowelIndex--;\n\
    \                }\n                else {\n                    consonantIndex--;\n\
    \                }\n            }\n            else if (vowel == 'Z' && consonant\
    \ != 'Z') {\n                vowelIndex--;\n                consonantIndex--;\n\
    \            }\n            else if (vowel == 'E') {\n                vowelIndex--;\n\
    \                if (consonantIndex > 0) {\n                    consonantIndex--;\n\
    \                }\n            }\n            else if (vowel == 'I') {\n    \
    \            vowelIndex--;\n                if (consonantIndex > 0) {\n      \
    \              if (consonant == word[consonantIndex - 1]) {\n                \
    \        consonantIndex--;\n                    }\n                }\n       \
    \     }\n            else if (vowel == 'O') {\n                vowelIndex--;\n\
    \                if (consonantIndex > 0) {\n                    consonantIndex--;\n\
    \                }\n                if (consonantIndex > 0 && consonant == word[consonantIndex\
    \ - 1]) {\n                    vowelIndex--;\n                }\n            }\n\
    \            else if (vowel == 'U') {\n                vowelIndex--;\n       \
    \         if (consonantIndex > 0) {\n                    consonantIndex--;\n \
    \               }\n                if (consonantIndex > 0 && consonant == word[consonantIndex\
    \ - 1]) {\n                    vowelIndex--;\n                }\n            \
    \    if (vowelIndex > 0 && consonantIndex > 0 && vowel == word[vowelIndex - 1])\
    \ {\n                    consonantIndex--;\n                }\n            }\n\
    \            lastConsonantIndex = consonantIndex;\n        }\n        if (vowelIndex\
    \ < 0) {\n            return \"\";\n        }\n        return vowels[vowelIndex];\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprsim2klm.cs(87,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] { 'A', 'E', 'I', 'O', 'U' };\n        var vowelsString = string.Join(\"\
    \", vowels);\n        var firstVowel = word.LastIndexOf(vowelsString) + 1;\n \
    \       var lastVowel = word.IndexOf(vowelsString, firstVowel);\n        if (firstVowel\
    \ < 0)\n            return \"\";\n        if (lastVowel < 0)\n            return\
    \ \"\";\n        var rightSide = word.Substring(firstVowel, lastVowel - firstVowel);\n\
    \        var result = vowels.FirstOrDefault(x => rightSide.Contains(x));\n   \
    \     return result ?? \"\";\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3ssol_4.cs(34,16): error CS0019: Operator ''??'' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"a\";\n        string vowels = \"aeiou\";\n\n        char[] arr = word.ToCharArray();\n\
    \        int j = arr.Length - 1;\n        int k = arr.Length - 2;\n\n        int\
    \ c = 0;\n        if (arr.Any(x => vowels.Contains(x.ToString()))) {\n       \
    \     c = arr.Count(x => vowels.Contains(x.ToString()));\n        }\n\n      \
    \  char[] a = new char[j + 2];\n        char[] b = new char[k + 2];\n\n      \
    \  for (int i = 0; i <= j; i++)\n        {\n            a[i] = arr[i];\n     \
    \   }\n        a[j] = '\\0';\n        a[j + 1] = '\\0';\n        Array.Sort(a,\
    \ 0, a.Length, (x, y) => x.ToString().CompareTo(y.ToString()));\n\n        for\
    \ (int i = 0; i <= k; i++)\n        {\n            b[i] = arr[i];\n        }\n\
    \        b[k] = '\\0';\n        b[k + 1] = '\\0';\n        Array.Sort(b, 0, b.Length,\
    \ (x, y) => x.ToString().CompareTo(y.ToString()));\n\n        string result1 =\
    \ \"\";\n        string result2 = \"\";\n        for (int i = j; i <= k; i++)\n\
    \        {\n            if (a[i].ToString().Equals(\"a\"))\n            {\n  \
    \              result1 = vowel;\n            }\n            else if (a[i].ToString().Equals(\"\
    e\"))\n            {\n                result1 = vowel + \"\";\n            }\n\
    \            else if (a[i].ToString().Equals(\"i\"))\n            {\n        \
    \        result1 = vowel + \"\";\n            }\n            else if (a[i].ToString().Equals(\"\
    o\"))\n            {\n                result1 = vowel + \"\";\n            }\n\
    \            else if (a[i].ToString().Equals(\"u\"))\n            {\n        \
    \        result1 = vowel + \"\";\n            }\n            else if (a[i].ToString().Equals(\"\
    y\"))\n            {\n                result1 = vowel + \"\";\n            }\n\
    \            else if (a[i].ToString().Equals(\"Y\"))\n            {\n        \
    \        result1 = vowel + \"\";\n            }\n            else if (a[i].ToString().Equals(\"\
    a\"))\n            {\n                result2 = vowel;\n            }\n      \
    \      else if (a[i].ToString().Equals(\"e\"))\n            {\n              \
    \  result2 = vowel + \"\";\n            }\n            else if (a[i].ToString().Equals(\"\
    i\"))\n            {\n                result2 = vowel + \"\";\n            }\n\
    \            else if (a[i].ToString().Equals(\"o\"))\n            {\n        \
    \        result2 = vowel + \"\";\n            }\n            else if (a[i].ToString().Equals(\"\
    u\"))\n            {\n                result2 = vowel + \"\";\n            }\n\
    \            else if (a[i].ToString().Equals(\"y\"))\n            {\n        \
    \        result2 = vowel + \"\";\n            }\n            else if (a[i].ToString().Equals(\"\
    Y\"))\n            {\n                result2 = vowel + \"\";\n            }\n\
    \n        }\n\n        int v\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphj7m5xbv.cs(118,14): error CS1002: ; expected

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string result\
    \ = \"\";\n        HashSet<char> vowels = new HashSet<char>();\n        vowels.Add('a');\n\
    \        vowels.Add('e');\n        vowels.Add('i');\n        vowels.Add('o');\n\
    \        vowels.Add('u');\n        vowels.Add('y');\n\n        var lastConsonant\
    \ = word.IndexOf(char.Parse(word.Last()));\n        var currentConsonant = lastConsonant\
    \ + 1;\n        while (currentConsonant < word.Length - 1 && vowels.Contains(word[currentConsonant]))\
    \ {\n            result = (word[currentConsonant] + result);\n            currentConsonant++;\n\
    \        }\n\n        if (currentConsonant < word.Length - 1 && vowels.Contains(word[currentConsonant]))\
    \ {\n            result = (word[currentConsonant] + result);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjaxrt5_8.cs(33,53): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<char> list\
    \ = new List<char>();\n        int counter = 0;\n        int vowelCount = 0;\n\
    \n        foreach (char c in word.ToUpper()) {\n            if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U')\n                vowelCount++;\n\
    \            else\n                list.Add(c);\n        }\n        if (vowelCount\
    \ == 0) {\n            return \"\";\n        }\n        list.Reverse();\n    \
    \    counter = list.Count - 1;\n        while (vowelCount > 1) {\n           \
    \ counter--;\n            if (list[counter] == 'A' || list[counter] == 'E' ||\
    \ list[counter] == 'I' || list[counter] == 'O' || list[counter] == 'U')\n    \
    \            break;\n            vowelCount--;\n        }\n        list.Reverse();\n\
    \        if (list[counter] == 'A' || list[counter] == 'E' || list[counter] ==\
    \ 'I' || list[counter] == 'O' || list[counter] == 'U')\n            return list[counter].ToString();\n\
    \        else\n            return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87160a5ffe8f4da885d0e8ff2543fe99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87160a5ffe8f4da885d0e8ff2543fe99>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.GetClosestVowel (System.String word) [0x0"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<char> vowels\
    \ = new List<char> {'a', 'e', 'i', 'o', 'u'};\n        // Split your string to\
    \ character array \n        char[] vowelCharArray = word.ToCharArray();\n    \
    \    int start = 0;\n        char[] currentVowelCharArray = null;\n        foreach\
    \ (char c in vowelCharArray) {\n            if (vowels.Contains(c)) {\n      \
    \          currentVowelCharArray = vowelCharArray.GetRange(start, vowelCharArray.Length\
    \ - start);\n                char[] currentVowelCharArrayAsCharArray = currentVowelCharArray.ToCharArray();\n\
    \                int rightSideIndex = 0;\n                int leftSideIndex =\
    \ 0;\n                // if last character is a vowel and current one is not \n\
    \                if (currentVowelCharArrayAsCharArray[currentVowelCharArray.Length\
    \ - 1] == 'u' \n                    && currentVowelCharArrayAsCharArray[currentVowelCharArray.Length\
    \ - 2] == 'u') {\n                    rightSideIndex = currentVowelCharArray.Length\
    \ - 2;\n                }\n                else {\n                    rightSideIndex\
    \ = currentVowelCharArray.Length - 1;\n                }\n                char[]\
    \ rightSideVowelCharArray = vowelCharArray.GetRange(rightSideIndex, vowelCharArray.Length\
    \ - rightSideIndex);\n                char[] leftSideVowelCharArray = vowelCharArray.GetRange(start,\
    \ vowelCharArray.Length - start);\n                char[] leftSideVowelCharArrayAsCharArray\
    \ = leftSideVowelCharArray.ToCharArray();\n                char leftSideVowel\
    \ = leftSideVowelCharArrayAsCharArray[0];\n                char rightSideVowel\
    \ = rightSideVowelCharArray[0];\n                if (rightSideVowel == leftSideVowel)\n\
    \                    return \"\";\n                else\n                    return\
    \ leftSideVowel;\n            }\n            start = vowelCharArray.Length;\n\
    \        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpudc_y6xx.cs(31,56): error CS1061: ''char[]'' does not contain a definition
    for ''GetRange'' and no accessible extension method ''GetRange'' accepting a first
    argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpudc_y6xx.cs(32,81): error CS1061: ''char[]'' does not contain a definition
    for ''ToCharArray'' and no accessible extension method ''ToCharArray'' accepting
    a first argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpudc_y6xx.cs(43,65): error CS1061: ''char[]'' does not contain a definition
    for ''GetRange'' and no accessible extension method ''GetRange'' accepting a first
    argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpudc_y6xx.cs(44,64): error CS1061: ''char[]'' does not contain a definition
    for ''GetRange'' and no accessible extension method ''GetRange'' accepting a first
    argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpudc_y6xx.cs(45,83): error CS1061: ''char[]'' does not contain a definition
    for ''ToCharArray'' and no accessible extension method ''ToCharArray'' accepting
    a first argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpudc_y6xx.cs(51,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpudc_y6xx.cs(34,21): warning CS0219: The variable ''leftSideIndex'' is
    assigned but its value is never used

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        char[] chars = word.ToCharArray();\n        StringBuilder\
    \ newWord = new StringBuilder();\n        bool flag = false;\n        string bestVowel\
    \ = \"\";\n\n        for(int i = chars.Length-1; i >= 0; i--) {\n            char\
    \ ch = chars[i];\n            if (vowels.IndexOf(ch) >= 0) {\n               \
    \ newWord.Append(ch);\n                flag = true;\n            } else {\n  \
    \              if (!flag) break;\n                newWord.Append(ch);\n      \
    \          flag = false;\n            }\n        }\n\n        if (bestVowel.IndexOfAny(newWord.ToString().ToUpper())\
    \ >= 0) {\n            return bestVowel;\n        } else {\n            return\
    \ string.Empty;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb3c9im0u.cs(42,34): error CS1503: Argument 1: cannot convert from ''string''
    to ''char[]''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"aeiouAEIOU\".ToCharArray().ToList();\n        if (vowels.Any(x => x == word.Last().ToString().ToLower())\
    \ == false)\n            return \"\";\n        if (word.Length > 0)\n        \
    \    word = word.Substring(word.Last().ToString().ToLower().Length);\n       \
    \ var count = 1;\n        var prevIndex = 0;\n        var nextIndex = word.Length;\n\
    \        var vowelsFound = false;\n        while (vowelsFound == false)\n    \
    \    {\n            var currentIndex = 0;\n            while (vowelsFound == false\
    \ && currentIndex < word.Length)\n            {\n                if (vowels.Contains(word[currentIndex].ToString().ToLower()))\n\
    \                {\n                    vowelsFound = true;\n                \
    \    prevIndex = currentIndex;\n                    break;\n                }\n\
    \                currentIndex++;\n            }\n            while (vowelsFound\
    \ == false && currentIndex < word.Length)\n            {\n                if (vowels.Contains(word[nextIndex].ToString().ToLower()))\n\
    \                {\n                    vowelsFound = true;\n                \
    \    nextIndex = currentIndex;\n                    break;\n                }\n\
    \                currentIndex++;\n            }\n            while (currentIndex\
    \ < word.Length)\n            {\n                if (vowels.Contains(word[currentIndex].ToString().ToLower()))\n\
    \                {\n                    vowelsFound = true;\n                \
    \    break;\n                }\n                currentIndex++;\n            }\n\
    \            count++;\n        }\n        var prevChar = word[prevIndex].ToString();\n\
    \        var nextChar = word[nextIndex].ToString();\n        if (prevChar == nextChar)\n\
    \            return prevChar;\n        if (prevChar.ToLower() == nextChar.ToLower())\n\
    \            return prevChar.ToString();\n        if (prevChar.ToLower() == nextChar.ToUpper())\n\
    \            return prevChar.ToString().ToUpper();\n        if (prevChar.ToUpper()\
    \ == nextChar.ToUpper())\n            return prevChar.ToString().ToUpper();\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx4dhud09.cs(25,29): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpx4dhud09.cs(38,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpx4dhud09.cs(48,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpx4dhud09.cs(58,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        return word\n\
    \            .Reverse()\n            .SkipWhile(x => x != 'z' && x != 'Z')\n \
    \           .Skip(1)\n            .TakeWhile(x => x != 'z' && x != 'Z')\n    \
    \        .FirstOrDefault();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjw_nzc6h.cs(24,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (string.IsNullOrEmpty(word))\n\
    \            return \"\";\n        int index = -1;\n        var firstUpper = word.ToUpper().First();\n\
    \        var firstLower = word.ToLower().First();\n        var lastUpper = word.ToUpper().Last();\n\
    \        var lastLower = word.ToLower().Last();\n        var firstVowel = Enumerable.Range(0,\
    \ word.Length)\n            .Where(i => word.ToUpper()[i] != firstUpper &&\n \
    \               word.ToLower()[i] != firstLower &&\n                word.ToUpper()[i]\
    \ != lastUpper &&\n                word.ToLower()[i] != lastLower).First();\n\
    \        if (firstVowel == 0)\n            return \"\";\n        if (firstVowel\
    \ > index)\n            index = firstVowel;\n        if (index == word.Length)\n\
    \            return \"\";\n        var nextVowel = index + 1;\n        var nextChar\
    \ = word.ToUpper()[index + 1];\n        var nextCharLower = word.ToLower()[index\
    \ + 1];\n        if (nextChar == 'A' || nextChar == 'E' || nextChar == 'I' ||\
    \ nextChar == 'O' || nextChar == 'U')\n            return \"\";\n        if (nextChar\
    \ == 'B' || nextChar == 'E' || nextChar == 'I' || nextChar == 'O' || nextChar\
    \ == 'U')\n            return \"\";\n        if (nextChar == 'C' || nextChar ==\
    \ 'E' || nextChar == 'I' || nextChar == 'O' || nextChar == 'U')\n            return\
    \ \"\";\n        if (nextChar == 'D' || nextChar == 'E' || nextChar == 'I' ||\
    \ nextChar == 'O' || nextChar == 'U')\n            return \"\";\n        if (nextChar\
    \ == 'F' || nextChar == 'I' || nextChar == 'O' || nextChar == 'U')\n         \
    \   return \"\";\n        if (nextChar == 'G' || nextChar == 'I' || nextChar ==\
    \ 'O' || nextChar == 'U')\n            return \"\";\n        if (nextChar == 'H'\
    \ || nextChar == 'I' || nextChar == 'O' || nextChar == 'U')\n            return\
    \ \"\";\n        if (nextChar == 'J' || nextChar == 'O' || nextChar == 'U')\n\
    \            return \"\";\n        if (nextChar == 'K' || nextChar == 'O' || nextChar\
    \ == 'U')\n            return \"\";\n        if (nextChar == 'M' || nextChar ==\
    \ 'O' || nextChar == 'U')\n            return \"\";\n        if (nextChar == 'N'\
    \ || nextChar == 'O' || nextChar == 'U')\n            return \"\";\n        if\
    \ (nextChar == 'P' || nextChar == 'O' || nextChar == 'U')\n            return\
    \ \"\";\n        if (nextChar == 'Q' || nextChar == 'O' || nextChar == 'U')\n\
    \            return \n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjtyv6wfb.cs(70,19): error CS1525: Invalid expression term ''}''

    /tmp/tmpjtyv6wfb.cs(70,19): error CS1002: ; expected

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"\";\n        string consonant = \"\";\n        bool vowelExist = false;\n\
    \        foreach (char letter in word) {\n            vowelExist = true;\n   \
    \         if (char.IsUpper(letter)) {\n                vowelExist = true;\n  \
    \          }\n            if (char.IsLower(letter)) {\n                vowelExist\
    \ = true;\n            }\n            if (vowelExist == true) {\n            \
    \    break;\n            }\n            else {\n                vowelExist = false;\n\
    \            }\n        }\n        if (vowelExist == true) {\n            vowel\
    \ = vowel;\n        }\n        if (vowelExist == false) {\n            consonant\
    \ = word;\n        }\n        string vowelPosition = consonant.ToLower();\n  \
    \      int vowelPosLength = vowelPosition.Length;\n        int vowelStartIndex\
    \ = vowelPosLength - vowelPosLength;\n        int vowelEndIndex = vowelStartIndex;\n\
    \        int vowelIndex = -1;\n        int vowelCount = 0;\n        bool foundVowel\
    \ = false;\n        for (int i = (vowelStartIndex + vowelPosLength); i <= wordLength;\
    \ i++) {\n            if (foundVowel == true) {\n                break;\n    \
    \        }\n            if (vowelPosition[i] == vowel) {\n                vowelIndex\
    \ += 1;\n                if (vowelIndex == vowelPosLength) {\n               \
    \     vowelCount = 0;\n                    foundVowel = true;\n              \
    \  }\n                else {\n                    vowelCount++;\n            \
    \    }\n            }\n            else {\n                if (vowelIndex > 0)\
    \ {\n                    vowelCount -= 1;\n                }\n               \
    \ foundVowel = false;\n            }\n        }\n        if (vowelIndex > 0) {\n\
    \            if (vowelCount < 0) {\n                vowelIndex = vowelIndex -\
    \ 1;\n            }\n            else {\n                vowelIndex = vowelIndex\
    \ + vowelCount - 1;\n            }\n        }\n        return vowelIndex;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4zioknhn.cs(55,63): error CS0103: The name ''wordLength'' does not exist
    in the current context

    /tmp/tmp4zioknhn.cs(59,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp4zioknhn.cs(84,16): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp4zioknhn.cs(43,13): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string[] vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        var firstConsonantIndex = word.IndexOfAny(char.IsLetter);\n\
    \        var lastConsonantIndex = word.LastIndexOfAny(char.IsLetter);\n      \
    \  if (firstConsonantIndex < 1 || lastConsonantIndex < 1)\n            return\
    \ \"\";\n        var firstConsonant = word.Substring(0, firstConsonantIndex).ToLower();\n\
    \        var lastConsonant = word.Substring(lastConsonantIndex).ToLower();\n \
    \       double distance = Math.Abs(firstConsonant.IndexOf(lastConsonant) - lastConsonant.IndexOf(firstConsonant));\n\
    \        double minimumDistance = Double.MaxValue;\n        foreach (var vowel\
    \ in vowels) {\n            var vowelIndex = word.ToLower().IndexOf(vowel);\n\
    \            if (vowelIndex < 0 || vowelIndex > distance)\n                continue;\n\
    \            double vowelDistance = vowelIndex - distance - 1;\n            double\
    \ currentDistance = Math.Abs(vowelDistance - word.IndexOf(vowel));\n         \
    \   if (currentDistance < minimumDistance) {\n                minimumDistance\
    \ = currentDistance;\n                closestVowel = vowel;\n            }\n \
    \       }\n        return closestVowel;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8yg22711.cs(25,51): error CS1503: Argument 1: cannot convert from ''method
    group'' to ''char[]''

    /tmp/tmp8yg22711.cs(26,54): error CS1503: Argument 1: cannot convert from ''method
    group'' to ''char[]''

    /tmp/tmp8yg22711.cs(41,17): error CS0103: The name ''closestVowel'' does not exist
    in the current context

    /tmp/tmp8yg22711.cs(44,16): error CS0103: The name ''closestVowel'' does not exist
    in the current context

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"AEIOUaeiou\";\n        var consonants = \"BCDFGHJKLMNPQRSTVWXZ\";\n      \
    \  var vowelIndex = vowels.IndexOf(word[word.Length - 1]);\n        var consonantIndex\
    \ = consonants.IndexOf(word[word.Length - 2]);\n        var closestVowelIndex\
    \ = ((vowelIndex + consonantIndex) / 2);\n        if (closestVowelIndex == 0)\
    \ return \"\";\n        if (closestVowelIndex == 1) return vowels[word.Length\
    \ - 1];\n        if (closestVowelIndex == word.Length) return vowels[word.Length\
    \ - 1];\n        if (closestVowelIndex == word.Length - 1) return vowels[word.Length\
    \ - 1];\n        return vowels[closestVowelIndex];\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0rii2l2q.cs(30,44): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp0rii2l2q.cs(31,54): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp0rii2l2q.cs(32,58): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp0rii2l2q.cs(33,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word.Length\
    \ == 0) {\n            return \"\";\n        }\n        char leftmostConsonant\
    \ = Char.ToLowerInvariant(word[0]);\n        char rightmostConsonant = Char.ToLowerInvariant(word[word.Length\
    \ - 1]);\n        if (leftmostConsonant == 'y' || leftmostConsonant == 'a' ||\
    \ leftmostConsonant == 'e' || leftmostConsonant == 'i' || leftmostConsonant ==\
    \ 'o' || leftmostConsonant == 'u') {\n            return leftmostConsonant;\n\
    \        }\n        char consonantOne = Char.ToLowerInvariant(word[1]);\n    \
    \    if (consonantOne == 'y' || consonantOne == 'a' || consonantOne == 'e' ||\
    \ consonantOne == 'i' || consonantOne == 'o' || consonantOne == 'u') {\n     \
    \       return consonantOne;\n        }\n        char consonantTwo = Char.ToLowerInvariant(word[2]);\n\
    \        if (consonantTwo == 'y' || consonantTwo == 'a' || consonantTwo == 'e'\
    \ || consonantTwo == 'i' || consonantTwo == 'o' || consonantTwo == 'u') {\n  \
    \          return consonantTwo;\n        }\n        char consonantThree = Char.ToLowerInvariant(word[3]);\n\
    \        if (consonantThree == 'y' || consonantThree == 'a' || consonantThree\
    \ == 'e' || consonantThree == 'i' || consonantThree == 'o' || consonantThree ==\
    \ 'u') {\n            return consonantThree;\n        }\n        char consonantFour\
    \ = Char.ToLowerInvariant(word[4]);\n        if (consonantFour == 'y' || consonantFour\
    \ == 'a' || consonantFour == 'e' || consonantFour == 'i' || consonantFour == 'o'\
    \ || consonantFour == 'u') {\n            return consonantFour;\n        }\n \
    \       char consonantFive = Char.ToLowerInvariant(word[5]);\n        if (consonantFive\
    \ == 'y' || consonantFive == 'a' || consonantFive == 'e' || consonantFive == 'i'\
    \ || consonantFive == 'o' || consonantFive == 'u') {\n            return consonantFive;\n\
    \        }\n        char consonantSix = Char.ToLowerInvariant(word[6]);\n    \
    \    if (consonantSix == 'y' || consonantSix == 'a\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp91o9gr54.cs(53,52): error CS1010: Newline in constant

    /tmp/tmp91o9gr54.cs(53,54): error CS1026: ) expected

    /tmp/tmp91o9gr54.cs(53,54): error CS1525: Invalid expression term ''}''

    /tmp/tmp91o9gr54.cs(53,54): error CS1002: ; expected

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        List<char> list = word.ToList();\n        int index\
    \ = list.IndexOf(list[list.Count - 1]);\n        if (index < 0 || index == list.Count\
    \ - 1 || list[index] == ' ') {\n            return \"\";\n        }\n        int\
    \ index = list.Count - 1;\n        while (index >= 0 && list[index] != ' ') {\n\
    \            int charIndex = list.IndexOf(list[index], index + 1);\n         \
    \   if (charIndex == -1 || charIndex == list.Count - 1 || list[charIndex] == '\
    \ ') {\n                break;\n            }\n            if (vowels.Contains(list[index]))\
    \ {\n                index = charIndex;\n            } else {\n              \
    \  break;\n            }\n        }\n        if (index == list.Count - 1) {\n\
    \            return \"\";\n        }\n        list.RemoveAt(index);\n        if\
    \ (list.Count == 0) {\n            return \"\";\n        }\n        if (list.Count\
    \ % 2 == 0) {\n            return list[list.Count - 1];\n        }\n        list.Reverse();\n\
    \        char firstChar = list[list.Count / 2];\n        int firstCharIndex =\
    \ list.IndexOf(firstChar);\n        char secondChar = list[list.Count - 1];\n\
    \        int secondCharIndex = list.IndexOf(secondChar);\n        if (firstCharIndex\
    \ > secondCharIndex) {\n            return list[firstCharIndex];\n        } else\
    \ {\n            return list[secondCharIndex];\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpngbhsm6c.cs(30,13): error CS0128: A local variable or function named ''index''
    is already defined in this scope

    /tmp/tmpngbhsm6c.cs(50,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpngbhsm6c.cs(58,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpngbhsm6c.cs(60,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word.Length < 1) {\n            return \"\";\n        }\n        var\
    \ vowels = \"AEIOUaeiou\";\n        var vowelsRight = vowels.Substring(0, vowels.Length\
    \ - 1);\n        var consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n        var consonantsRight = consonants.Substring(0, consonants.Length - 1);\n\
    \        var vowels = vowels.ToCharArray().Where(x => !char.IsLower(x)).ToList();\n\
    \        var consonants = consonants.ToCharArray().Where(x => !char.IsLower(x)).ToList();\n\
    \        var vowelsRight = vowelsRight.ToCharArray().Where(x => !char.IsLower(x)).ToList();\n\
    \        var consonantsRight = consonantsRight.ToCharArray().Where(x => !char.IsLower(x)).ToList();\n\
    \        var vowelsHashSet = new HashSet<char>(vowels);\n        var consonantsHashSet\
    \ = new HashSet<char>(consonants);\n        var vowelsRightHashSet = new HashSet<char>(vowelsRight);\n\
    \        var consonantsRightHashSet = new HashSet<char>(consonantsRight);\n  \
    \      var vowelsHashSetCount = vowels.Count;\n        var consonantsHashSetCount\
    \ = consonants.Count;\n        var vowelsRightHashSetCount = vowelsRight.Count;\n\
    \        var consonantsRightHashSetCount = consonantsRight.Count;\n        var\
    \ vowelsHashSetCount2 = vowelsHashSet.Count;\n        var consonantsHashSetCount2\
    \ = consonantsHashSet.Count;\n        var vowelsRightHashSetCount2 = vowelsRightHashSet.Count;\n\
    \        var consonantsRightHashSetCount2 = consonantsRightHashSet.Count;\n  \
    \      var vowelsHashSetCount3 = vowelsHashSet2.Count;\n        var consonantsHashSetCount3\
    \ = consonantsHashSet2.Count;\n        var vowelsRightHashSetCount3 = vowelsRightHashSet2.Count;\n\
    \        var consonantsRightHashSetCount3 = consonantsRightHashSet2.Count;\n \
    \       var vowelsHashSetCount4 = vowelsHashSet3.Count;\n        var consonantsHashSetCount4\
    \ = consonantsHashSet3.Count;\n        var vowelsRightHashSetCount4 = vowelsRightHashSet3.Count;\n\
    \        var consonantsRightHashSetCount4 = \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpta5jam1d.cs(54,43): error CS1525: Invalid expression term ''}''

    /tmp/tmpta5jam1d.cs(54,43): error CS1002: ; expected

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int consonants\
    \ = word.Count(c => c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' ||\
    \ c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c ==\
    \ 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w'\
    \ || c == 'x' || c == 'y' || c == 'z');\n        int vowels = word.Count(c =>\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        if (vowels\
    \ == 0 || consonants == 0)\n            return \"\";\n        double vowelPerc\
    \ = (vowels * 100.0 / consonants);\n        double consonantPerc = (consonants\
    \ * 100.0 / vowels);\n        List<char> vowelList = new List<char>() { 'a', 'e',\
    \ 'i', 'o', 'u' };\n        double vowelDistance = vowelList.Select(c => word.Count(w\
    \ => w.Equals(c))).Sum();\n        double consonantDistance = word.Count(w =>\
    \ w.Equals(c)).Sum();\n        if (vowelDistance < consonantDistance)\n      \
    \      return \"\";\n        if (vowelDistance == consonantDistance)\n       \
    \     return word.Substring(vowelDistance, vowelList.Count);\n        if (vowelDistance\
    \ > consonantDistance)\n            return word.Substring(consonantDistance, vowelList.Count);\n\
    \        double maxDistance = vowelList.Select(c => word.Count(w => w.Equals(c))).Max();\n\
    \        if (maxDistance == 0)\n            return \"\";\n        if (maxDistance\
    \ < vowelDistance)\n            return word.Substring(vowelDistance, vowelList.Count);\n\
    \        if (maxDistance > vowelDistance)\n            return word.Substring(consonantDistance,\
    \ vowelList.Count);\n        int minDistance = vowelList.Select(c => word.Count(w\
    \ => w.Equals(c))).Min();\n        if (minDistance == 0)\n            return \"\
    \";\n        if (minDistance < vowelDistance)\n            return word.Substring(vowelDistance,\
    \ vowelList.Count);\n        if (minDistance > vowelDistance)\n            return\
    \ word.Substring(consonantDistance, vowelList.Count);\n        double minDistanceVow\
    \ = word.Count(w => w.Equals(vowelList.First()));\n        double minDistanceCons\
    \ = word.Count(w => w.Equals(consonantList.First()));\n        if (minDistanceVow\
    \ < minDistanceCons)\n            return \"\";\n        if (minDistanceVow > minDistanceCons)\n\
    \            return word.Substring(consonantDistance, vowelList.Count);\n    \
    \    if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpchsvyeik.cs(59,13): error CS1525: Invalid expression term ''}''

    /tmp/tmpchsvyeik.cs(59,13): error CS1026: ) expected

    /tmp/tmpchsvyeik.cs(59,13): error CS1002: ; expected

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var consonants\
    \ = new[] {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'};\n        var vowels = new[] {'a', 'e', 'i', 'o',\
    \ 'u'};\n        var vowelIndex = 0;\n        \n        // Find the index of last\
    \ consonant\n        for (int i = 0; i < word.Length; i++) {\n            if (consonants.Contains(word[i]))\n\
    \                break;\n        }\n        \n        // Find the index of last\
    \ vowel\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                vowelIndex = i;\n            \
    \    break;\n            }\n        }\n\n        string vowel;\n        if (vowelIndex\
    \ < consonants.Length)\n            vowel = vowels[vowelIndex];\n        else\n\
    \            return \"\";\n\n        if (vowelIndex + 1 < consonants.Length &&\
    \ vowelIndex < vowels.Length)\n            vowel = vowels[vowelIndex + 1];\n \
    \       return vowel;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe4_y7a71.cs(44,21): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpe4_y7a71.cs(49,21): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"\";\n        int len = word.Length;\n        for (int i = 0; i < len; i++)\n\
    \        {\n            if (word[i].ToLower() == \"a\" || word[i].ToLower() ==\
    \ \"e\" || word[i].ToLower() == \"i\" || word[i].ToLower() == \"o\" || word[i].ToLower()\
    \ == \"u\")\n            {\n                vowels += word[i];\n            }\n\
    \        }\n        return vowels.Substring(vowels.Length - 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_atpfono.cs(28,25): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmp_atpfono.cs(28,53): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmp_atpfono.cs(28,81): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmp_atpfono.cs(28,109): error CS1501: No overload for method ''ToLower''
    takes 0 arguments

    /tmp/tmp_atpfono.cs(28,137): error CS1501: No overload for method ''ToLower''
    takes 0 arguments

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        int startIndex = word.Length\
    \ - 1;\n        int endIndex = word.Length - 1;\n        while (startIndex >=\
    \ 0 && vowels.Contains(word[startIndex])) {\n            startIndex--;\n     \
    \   }\n        while (endIndex < word.Length && vowels.Contains(word[endIndex]))\
    \ {\n            endIndex++;\n        }\n        if (startIndex >= endIndex) return\
    \ \"\";\n        char startVowel = vowels[startIndex];\n        char endVowel\
    \ = vowels[endIndex];\n        string closest = GetClosestVowel(word, startIndex,\
    \ endIndex, startVowel, \n                                      endVowel);\n \
    \       return closest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoucs1hac.cs(36,26): error CS1501: No overload for method ''GetClosestVowel''
    takes 5 arguments

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int vowelCount\
    \ = 0;\n        string vowelToFind;\n        foreach (char c in word.ToUpper())\
    \ \n            if (char.IsLetter(c)) \n                vowelCount++;\n      \
    \  vowelToFind = string.Empty;\n        foreach (char c in word.ToUpper()) \n\
    \            if (char.IsLetter(c)) \n                vowelToFind = (vowelToFind\
    \ == string.Empty) ? c : vowelToFind + \"A\";\n        vowelToFind = vowelToFind.Substring(0,\
    \ vowelToFind.Length - vowelCount);\n        List<char> vowels = new List<char>\
    \ { 'A', 'E', 'I', 'O', 'U', 'aE', 'iO', 'uU' };\n        if (vowels.Contains(vowelToFind))\
    \ return vowelToFind;\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2f24yrc4.cs(34,71): error CS1012: Too many characters in character literal

    /tmp/tmp2f24yrc4.cs(34,77): error CS1012: Too many characters in character literal

    /tmp/tmp2f24yrc4.cs(34,83): error CS1012: Too many characters in character literal

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<string>\
    \ vowels = new List<string>();\n        vowels.Add(\"a\");\n        vowels.Add(\"\
    e\");\n        vowels.Add(\"i\");\n        vowels.Add(\"o\");\n        vowels.Add(\"\
    u\");\n        vowels.Add(\"y\");\n        vowels.Add(\"Y\");\n        vowels.Add(\"\
    \xF3\");\n        vowels.Add(\"\xD3\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xCD\");\n        vowels.Add(\"\xFA\");\n        vowels.Add(\"\
    \xDA\");\n        vowels.Add(\"\xFA\");\n        vowels.Add(\"\xDA\");\n     \
    \   vowels.Add(\"\xDA\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xCD\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\
    \xED\");\n        vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n     \
    \   vowels.Add(\"\xED\");\n        vowels.Add(\"\xED\");\n        \n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6w1spol6.cs(23,26): error CS0161: ''Problem.GetClosestVowel(string)'':
    not all code paths return a value

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int rightBound\
    \ = word.Length - 1;\n        int leftBound = 0;\n        bool isVowel = false;\n\
    \        string closestVowel = \"\";\n        do {\n            int leftVowelIndex\
    \ = GetVowelIndex(word, leftBound);\n            int rightVowelIndex = GetVowelIndex(word,\
    \ rightBound);\n            if (leftVowelIndex == -1 || rightVowelIndex == -1)\
    \ {\n                return \"\";\n            }\n            if (leftVowelIndex\
    \ < rightVowelIndex) {\n                isVowel = true;\n                closestVowel\
    \ = GetVowel(leftVowelIndex);\n            } else {\n                isVowel =\
    \ false;\n                closestVowel = GetVowel(rightVowelIndex);\n        \
    \    }\n            leftBound = leftVowelIndex + 1;\n            rightBound =\
    \ rightVowelIndex - 1;\n        } while (!isVowel);\n        return closestVowel;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9vev63wl.cs(29,34): error CS0103: The name ''GetVowelIndex'' does not
    exist in the current context

    /tmp/tmp9vev63wl.cs(30,35): error CS0103: The name ''GetVowelIndex'' does not
    exist in the current context

    /tmp/tmp9vev63wl.cs(36,32): error CS0103: The name ''GetVowel'' does not exist
    in the current context

    /tmp/tmp9vev63wl.cs(39,32): error CS0103: The name ''GetVowel'' does not exist
    in the current context

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (string.IsNullOrWhiteSpace(word))\
    \ return \"\";\n\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u'\
    \ };\n\n        char[] letters = word.ToCharArray();\n        int index = Array.IndexOf(letters,\
    \ 'A') - 1;\n        if (index < 0) index = Array.IndexOf(letters, 'a') - 1;\n\
    \        if (index >= letters.Length) return \"\";\n        int index1 = Array.IndexOf(letters,\
    \ letters[index], index + 1);\n        if (index1 < 0) index1 = Array.IndexOf(letters,\
    \ 'a') - 1;\n        if (index1 >= letters.Length) return \"\";\n\n        char[]\
    \ letters1 = letters.Where((c, i) => i > index && i < index1).ToArray();\n   \
    \     if (letters1 == null || letters1.Length == 0) return \"\";\n\n        Dictionary<string,\
    \ int> vowels = new Dictionary<string, int>();\n        vowels.Add(\"a\", -1);\n\
    \        vowels.Add(\"e\", -1);\n        vowels.Add(\"i\", -1);\n        vowels.Add(\"\
    o\", -1);\n        vowels.Add(\"u\", -1);\n        foreach (char c in letters1)\
    \ {\n            vowels[c] = -1;\n        }\n\n        for (int i = 0; i < letters1.Length;\
    \ i++) {\n            int index = Array.IndexOf(vowels, letters1[i]);\n      \
    \      if (index == -1) continue;\n            if (index > 0) vowels[letters1[i]]\
    \ = index;\n            if (index < letters1.Length - 1) vowels[letters1[i] +\
    \ 1] = index;\n        }\n        if (vowels.ContainsKey(\"a\") && vowels.ContainsKey(\"\
    e\") && vowels.ContainsKey(\"i\") && vowels.ContainsKey(\"o\") && vowels.ContainsKey(\"\
    u\")) return \"A\";\n        if (vowels.ContainsKey(\"a\") && vowels.ContainsKey(\"\
    e\") && vowels.ContainsKey(\"i\") && vowels.ContainsKey(\"o\")) return \"E\";\n\
    \        if (vowels.ContainsKey(\"a\") && vowels.ContainsKey(\"e\") && vowels.ContainsKey(\"\
    i\") && vowels.ContainsKey(\"o\") && vowels.ContainsKey(\"u\")) return \"I\";\n\
    \        if (vowels.ContainsKey(\"a\") && vowels.ContainsKey(\"e\") && vowels.ContainsKey(\"\
    i\") && vowels.ContainsKey(\"o\") && vow\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd349wt5t.cs(58,124): error CS1026: ) expected

    /tmp/tmpd349wt5t.cs(58,124): error CS1525: Invalid expression term ''}''

    /tmp/tmpd349wt5t.cs(58,124): error CS1002: ; expected

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        string vowels2 = vowels.Replace(\"AE\", \"\").Replace(\"\
    O\", \"\").Replace(\"I\", \"\");\n        List<string> list = new List<string>();\n\
    \        foreach(char letter in word) {\n            int x = vowels2.IndexOf(letter);\n\
    \            if (x != -1)\n                list.Add(letter);\n            int\
    \ y = vowels2.IndexOf(letter.ToString());\n            if (y != -1)\n        \
    \        list.Add(letter.ToString());\n        }\n        string result = \"\"\
    ;\n        if (list.Count > 1) {\n            list.Sort();\n            int i\
    \ = list.Count - 1;\n            int j = list.Count - 2;\n            if (list[j]\
    \ > list[i])\n                i = j;\n            result = list[i];\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwbuk5yt3.cs(30,26): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpwbuk5yt3.cs(40,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word.Length <= 0) return \"\";\n        int left = 0;\n        int right\
    \ = word.Length - 1;\n        while (left < right) {\n            int middle;\n\
    \            string vowel;\n            vowel = GetVowel(word, left, right, out\
    \ middle);\n            if (vowel.Length == 0 || vowel.Length > middle + 1) {\n\
    \                return \"\";\n            }\n            if (vowel.StartsWith(\"\
    a\") == word.Substring(left, 1).ToLowerInvariant().Contains(\"e\")) {\n      \
    \          left = middle + 1;\n            } else {\n                right = middle\
    \ - 1;\n            }\n        }\n        return GetVowel(word, left, right, out\
    \ left);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3cwkne_1.cs(30,21): error CS0103: The name ''GetVowel'' does not exist
    in the current context

    /tmp/tmp3cwkne_1.cs(40,16): error CS0103: The name ''GetVowel'' does not exist
    in the current context

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        //your code\
    \ here\n        var vowels = new List<string> { \"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\" };\n        var result = \"\";\n        if (word.IndexOf(vowels.Last())\
    \ < word.LastIndexOf(vowels.First())) {\n            var firstVowel = word.LastIndexOf(vowels.First());\n\
    \            var secondVowel = firstVowel + vowels.Count() - 1;\n            result\
    \ = String.Join(\"\", word.Take(firstVowel).Concat(word.Skip(secondVowel + 1)));\n\
    \        } else {\n            var firstVowel = word.FirstIndexOf(vowels.Last());\n\
    \            var secondVowel = firstVowel + vowels.Count() - 1;\n            result\
    \ = String.Join(\"\", word.Take(secondVowel).Concat(word.Skip(firstVowel + 1)));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2p4rb6u2.cs(32,35): error CS1061: ''string'' does not contain a definition
    for ''FirstIndexOf'' and no accessible extension method ''FirstIndexOf'' accepting
    a first argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int len = word.Length;\n\
    \        var vowelsCount = new List<char>() { 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z' };\n        var lastVowels = new List<char>() { 'A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n        for (int i = 0; i < len; i +=\
    \ 2) {\n            if (vowelsCount.Contains(word[i]))\n            {\n      \
    \          int vCount = vowelsCount.IndexOf(word[i]);\n                lastVowels.Insert(vCount,\
    \ word[i]);\n                if (vowelsCount.IndexOf(word[i + 1]) > vCount)\n\
    \                    lastVowels.Add(word[i + 1]);\n            }\n        }\n\
    \        if (lastVowels.Count < 2)\n            return \"\";\n        else\n \
    \           return lastVowels[lastVowels.Count - 2];\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp436cs2u1.cs(39,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new List<char>() { 'a', 'e', 'i', 'o', 'u', 'y' };\n        var vowelIndexes\
    \ = vowels.IndexOf(word.LastOrDefault(c => char.IsUpper(c)));\n        var vowelIndex\
    \ = vowelIndexes > -1 ? vowelIndexes : vowels.IndexOf(word.LastOrDefault(c =>\
    \ char.IsUpper(c)));\n        var vowel = vowels[vowelIndex];\n        var startIndex\
    \ = Math.Max(vowelIndex, word.Length - vowelIndex - 1);\n        var endIndex\
    \ = Math.Min(vowelIndex + word.Length - 1, word.Length);\n        var isVowel\
    \ = vowel.Equals(word.Substring(startIndex, vowelIndex + 1 - startIndex));\n \
    \       var isVowelLeft = word.Substring(0, startIndex).Equals(vowel);\n     \
    \   var isVowelRight = word.Substring(endIndex).Equals(vowel);\n        if (isVowelLeft\
    \ || isVowelRight) {\n            if (isVowelLeft)\n                return word.Substring(startIndex,\
    \ vowelIndex + 1 - startIndex);\n            if (isVowelRight)\n             \
    \   return word.Substring(endIndex + 1, word.Length - endIndex - 1);\n       \
    \ }\n        return string.Empty;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetClosestVowel\
    \ (System.String word) [0x0009c] in <62a8b651a83f438aa1862bc1d1169024>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <62a8b651a83f438aa1862bc1d1169024>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetClosestVowel\
    \ (System.String word) [0x0009c] in <62a8b651a83f438aa1862bc1d1169024>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <62a8b651a83f438aa1862bc1d1169024>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n        var vowelCount = new\
    \ List<int>();\n        var vowelCountIndex = new List<int>();\n        var i\
    \ = 0;\n        foreach (var c in word) {\n            if (vowels.Contains(c))\
    \ {\n                vowelCount.Add(word.Count(s => s == c));\n              \
    \  vowelCountIndex.Add(i);\n            }\n            i++;\n        }\n\n   \
    \     var min = vowelCount.Min();\n        var max = vowelCount.Max();\n     \
    \   var index = 0;\n        var closestVowelIndex = 0;\n        foreach (var c\
    \ in word) {\n            var vowelCountInWord = vowelCount.Where(w => w == c).FirstOrDefault();\n\
    \            if (vowelCountInWord == 0)\n                continue;\n         \
    \   var diff = Math.Abs(vowelCountInWord - max);\n            if (diff < min)\n\
    \                index = vowelCountIndex.Where(w => w == c).FirstOrDefault();\n\
    \            else if (diff == min)\n                closestVowelIndex = vowelCountIndex.Where(w\
    \ => w == c).FirstOrDefault();\n            else\n                break;\n   \
    \     }\n        return word[index];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_atp0g2o.cs(52,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiouAEIOU\";\n        Dictionary<char, double> freq = new Dictionary<char,\
    \ double>();\n        char c;\n        double num;\n        foreach(char c in\
    \ word){\n            if (vowels.Contains(c)) {\n                freq.Add(c, freq[c]\
    \ + 1);\n            }\n        }\n        List<char> vowelsLeft = new List<char>(vowels);\n\
    \        for (int i = vowels.Length-1; i >= 0; i--) {\n            c = vowels[i];\n\
    \            if (freq.ContainsKey(c)) {\n                num = freq[c];\n    \
    \            vowelsLeft.Remove(c);\n                freq.Remove(c);\n        \
    \        if (num >= vowelsLeft.Count - 1) {\n                    return \"\";\n\
    \                }\n            }\n        }\n        if (vowelsLeft.Count > 0)\
    \ {\n            return vowelsLeft.FirstOrDefault();\n        }\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppzjpq_s8.cs(28,22): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmppzjpq_s8.cs(46,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] { 'a', 'e', 'i', 'o', 'u' };\n        var searchIndex = word.Length -\
    \ 1;\n        while (searchIndex >= 0) {\n            var nextChar = word[searchIndex];\n\
    \            var vowelIndex = vowels.IndexOf(nextChar, StringComparer.OrdinalIgnoreCase);\n\
    \            if (vowelIndex >= 0) {\n                return word[searchIndex];\n\
    \            }\n            searchIndex--;\n        }\n        return string.Empty;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphjjdms22.cs(28,45): error CS1503: Argument 1: cannot convert from ''char''
    to ''System.Array''

    /tmp/tmphjjdms22.cs(30,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"AEIOUaeiou\";\n        string vowel_end = vowel.ToUpper();\n        string\
    \ vowel_start = vowel.ToLower();\n        int vowel_mid = 0;\n        int length\
    \ = word.Length;\n        string result = string.Empty;\n        int index_mid\
    \ = 0;\n        int index = 0;\n        bool found = false;\n        bool found_start\
    \ = false;\n        bool found_end = false;\n        bool found_mid = false;\n\
    \        bool found_vowel = false;\n        bool found_startvowel = false;\n \
    \       bool found_endvowel = false;\n        bool found_midvowel = false;\n \
    \       bool found_vowel_start = false;\n        bool found_vowel_end = false;\n\
    \        bool found_midvowel_start = false;\n        bool found_midvowel_end =\
    \ false;\n        bool foundfound = false;\n        bool foundfound_start = false;\n\
    \        bool foundfound_end = false;\n        bool foundfound_mid = false;\n\
    \        bool foundfound_vowel = false;\n        bool foundfound_startvowel =\
    \ false;\n        bool foundfound_endvowel = false;\n        bool foundfound_midvowel\
    \ = false;\n        bool foundfoundfound = false;\n        bool foundfoundfound_start\
    \ = false;\n        bool foundfoundfound_end = false;\n        bool foundfoundfound_mid\
    \ = false;\n        bool foundfoundfound_vowel = false;\n        bool foundfoundfound_startvowel\
    \ = false;\n        bool foundfoundfound_endvowel = false;\n        bool foundfoundfound_midvowel\
    \ = false;\n        do {\n            foundfound = false;\n            foundfound_start\
    \ = false;\n            foundfound_end = false;\n            foundfound_mid =\
    \ false;\n            foundfound_startvowel = false;\n            foundfound_endvowel\
    \ = false;\n            foundfound_midvowel = false;\n            foundfoundfound\
    \ = false;\n            foundfoundfound_start = false;\n            foundfoundfound_end\
    \ = false;\n            foundfoundfound_mid = false;\n            foundfoundfound_startvowel\
    \ = false;\n            foundfoundfound_endvowel = false;\n            foundfoundfound_midvowel\
    \ = false;\n            for (int i = 0; i <= length - 1; i++) {\n            \
    \    char c = word[i];\n                if (Char.IsLetter(c)) {\n            \
    \        if (!found_start) {\n                        found_start = true;\n  \
    \                      found_startvowel = false;\n                    }\n    \
    \                if (!found_end) {\n                        found_end = true;\n\
    \                        found_endvowel = false;\n                    }\n    \
    \                if (!found_mid) {\n                        found_mid = true;\n\
    \                        found_midvowel = false;\n                    }\n    \
    \                if (!found_startvowel) {\n                        found_startvowel\
    \ = true;\n                        found_vowel = false;\n                    }\n\
    \                    if (!found_endvowel) {\n                        found_endvowel\
    \ = true;\n                        found_vowel = false;\n                    }\n\
    \                    if (!found_midvowel) {\n                        found_midvowel\
    \ = true;\n                        found_vowel = false;\n                    }\n\
    \                    if (!found_vowel) {\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1uxykyxc.cs(104,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp1uxykyxc.cs(120,2): error CS1513: } expected

    /tmp/tmp1uxykyxc.cs(120,2): error CS1003: Syntax error, ''while'' expected

    /tmp/tmp1uxykyxc.cs(120,2): error CS1003: Syntax error, ''('' expected

    /tmp/tmp1uxykyxc.cs(120,2): error CS1733: Expected expression

    /tmp/tmp1uxykyxc.cs(120,2): error CS1026: ) expected

    /tmp/tmp1uxykyxc.cs(120,2): error CS1002: ; expected

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Implement\
    \ your function here.\n        List<char> arr = new List<char>(word.ToLower());\n\
    \        string v = \"AEIOUaeiou\";\n        int len = arr.Count;\n        char\
    \ c;\n        List<char> l = new List<char>();\n        int i, pos;\n        char[]\
    \ charArray = word.ToCharArray();\n        for (int j = 0;j<len;j++) {\n     \
    \       c = charArray[j];\n            pos = Array.IndexOf(v,c.ToString());\n\
    \            if (pos < 0) {\n                pos = v.IndexOf(c.ToString());\n\
    \            }\n            if (pos != 0) {\n                l.Add(c);\n     \
    \       }\n        }\n        if (v.Count > l.Count) {\n            return \"\"\
    ;\n        }\n        if (v.Count < l.Count) {\n            i = Array.IndexOf(v,l[l.Count-1].ToString());\n\
    \            i = Math.Max(0,i);\n            c = l[i];\n        }\n        return\
    \ c.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjurteae0.cs(34,33): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpjurteae0.cs(42,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpjurteae0.cs(45,13): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''int''

    /tmp/tmpjurteae0.cs(46,31): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpjurteae0.cs(50,16): error CS0165: Use of unassigned local variable ''c''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n        var vowels = \"aeiou\";\n        var lastVowel\
    \ = vowels.Last();\n        var lastConsonant = consonants.Last();\n        int\
    \ consonantsCount = word.Count(x => x == lastConsonant);\n        int vowelsCount\
    \ = word.Count(x => x == lastVowel);\n        var vowelPositions = new List<int>();\n\
    \        var consonantPositions = new List<int>();\n        int position = word.IndexOf(lastConsonant);\n\
    \        while(position >= 0) {\n            consonantPositions.Add(position);\n\
    \            position = word.IndexOf(lastConsonant, position + 1);\n        }\n\
    \        position = word.IndexOf(lastVowel);\n        while(position >= 0) {\n\
    \            vowelPositions.Add(position);\n            position = word.IndexOf(lastVowel,\
    \ position + 1);\n        }\n        if(consonantsCount > vowelsCount) {\n   \
    \         vowelPositions.Add(consonantPositions.Count - 1);\n        }\n     \
    \   if(consonantsCount < vowelsCount) {\n            consonantPositions.Add(vowelPositions.Count\
    \ - 1);\n        }\n        Debug.WriteLine(consonantsCount);\n        Debug.WriteLine(vowelsCount);\n\
    \        Debug.WriteLine(vowelPositions);\n        Debug.WriteLine(consonantPositions);\n\
    \        var vowelPosition = vowelPositions.Min();\n        var consonantPosition\
    \ = consonantPositions.Min();\n        Debug.WriteLine(vowelPosition);\n     \
    \   Debug.WriteLine(consonantPosition);\n        if(vowelPosition != consonantPosition)\
    \ {\n            return \"\";\n        }\n        var vowelCount = vowelPositions.Count(x\
    \ => x == vowelPosition);\n        var consonantCount = consonantPositions.Count(x\
    \ => x == consonantPosition);\n        if(vowelCount == 0) {\n            return\
    \ \"\";\n        }\n        if(consonantCount > 0) {\n            return word.Substring(vowelPosition,\
    \ consonantCount - vowelPosition);\n        }\n        return word.Substring(vowelPosition,\
    \ vowelCount - vowelPosition);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "0\n1\nSystem.Collections.Generic.List`1[System.Int32]\nSystem.Collections.Generic.List`1[System.Int32]\n\
    3\n0\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <905c178bb8344d948424dbfe1c66c7ef>:0 \n0\n1\nSystem.Collections.Generic.List`1[System.Int32]\n\
    System.Collections.Generic.List`1[System.Int32]\n1\n0\nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <905c178bb8344d948424dbfe1c66c7ef>:0 \n0\n0\nSystem.Collections.Generic.List`1[System.Int32]\n\
    System.Collections.Generic.List`1[System.Int32]\n\nUnhandled Exception:\nSystem.Invalid"
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"aeiouAEIOU\";\n        bool found = false;\n        string result = \"\"\
    ;\n        foreach (char c in word.ToCharArray()) {\n            if (vowel.IndexOf(c)\
    \ == -1) {\n                continue;\n            }\n            int index =\
    \ vowel.IndexOf(c);\n            int startIndex = index - 1;\n            if (startIndex\
    \ < 0) {\n                startIndex = 0;\n            }\n            int endIndex\
    \ = index + 1;\n            if (endIndex > vowel.Length) {\n                endIndex\
    \ = vowel.Length;\n            }\n            if (word.Length > 0) {\n       \
    \         if (startIndex == word.Length - 1 && endIndex == word.Length - 1) {\n\
    \                    found = true;\n                    break;\n             \
    \   }\n                if (startIndex != word.Length - 1) {\n                \
    \    if (endIndex == word.Length - 1 && startIndex == 0) {\n                 \
    \       found = true;\n                        break;\n                    }\n\
    \                }\n            }\n            if (found) {\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <baec6fbc343b47ac984134783caaae99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <baec6fbc343b47ac984134783caaae99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (string.IsNullOrWhiteSpace(word))\
    \ return \"\";\n        string vowel = word.LastOrDefault(c => char.IsLetter(c)\
    \ && c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U');\n        if (vowel == null) return\
    \ \"\";\n        int start = (int)word.LastIndexOf('a') - 1;\n        int end\
    \ = (int)word.LastIndexOf('e') - 1;\n        int index = (int)word.LastIndexOf('i')\
    \ - 1;\n        int os = (start < end) ? start : end;\n        int es = (start\
    \ > end) ? start : end;\n        int id = (start > end) ? end : start;\n     \
    \   int oi = (index < os) ? index : os;\n        int ei = (index > os) ? index\
    \ : os;\n        int ui = (index < id) ? index : id;\n        int eu = (index\
    \ > id) ? index : id;\n        string vowel1 = word.Substring(oi);\n        string\
    \ vowel2 = word.Substring(ei);\n        string vowel3 = word.Substring(ui);\n\
    \        string vowel4 = word.Substring(eu);\n        if (vowel == vowel1) return\
    \ vowel;\n        if (vowel == vowel2) return vowel;\n        if (vowel == vowel3)\
    \ return vowel;\n        if (vowel == vowel4) return vowel;\n        return \"\
    \";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbqlsc0iq.cs(25,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null)\n            return null;\n        if (word.Length < 2)\n            return\
    \ string.Empty;\n        char[] vowels = new char[] { ',', '.', ';', '?', '!'\
    \ };\n        var vowelCount = word.Count(c => vowels.Contains(c));\n        var\
    \ vowelCount = word.Count(c => char.IsUpper(c));\n        int consonantCount =\
    \ word.Length - vowelCount;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            char c = word[i];\n            if (char.IsUpper(c) && i - consonantCount\
    \ > 0) {\n                return word[i];\n            }\n        }\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4uia87qe.cs(30,13): error CS0128: A local variable or function named ''vowelCount''
    is already defined in this scope

    /tmp/tmp4uia87qe.cs(35,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Your code\
    \ goes here:\n        var vowels = new[] { \"a\", \"e\", \"i\", \"o\", \"u\",\
    \ \"y\" };\n        var vowelsHash = vowels.ToDictionary(x => x.ToString(), y\
    \ => y.ToString());\n        var consonants = new[] { \"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n        var consonantsHash =\
    \ consonants.ToDictionary(x => x.ToString(), y => y.ToString());\n\n        string\
    \ vowel = \"\";\n        string consonant = \"\";\n        string str = word;\n\
    \n        foreach (char c in str) {\n            if (vowelsHash.ContainsKey(c))\n\
    \            {\n                if (vowelsHash[c].Length > vowel.Length)\n   \
    \             {\n                    vowel = vowelsHash[c];\n                }\n\
    \            }\n            else if (consonantsHash.ContainsKey(c))\n        \
    \    {\n                if (consonantsHash[c].Length > consonant.Length)\n   \
    \             {\n                    consonant = consonantsHash[c];\n        \
    \        }\n            }\n        }\n        return vowel;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsrt03f0v.cs(35,40): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpsrt03f0v.cs(37,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpsrt03f0v.cs(39,40): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpsrt03f0v.cs(42,49): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpsrt03f0v.cs(44,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpsrt03f0v.cs(46,48): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"AEIOUaeiou\";\n        var vowelIndex = -1;\n        var word = word?.ToUpper();\n\
    \        var pos = word.Length - 1;\n        while (pos >= 0) {\n            var\
    \ index = word.IndexOf(vowels, pos + 1);\n            var result = word[index\
    \ - 1];\n            if (result != string.Empty)\n                return result;\n\
    \            pos = index - 1;\n        }\n        return string.Empty;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpssiqdaop.cs(26,13): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpssiqdaop.cs(26,20): error CS0841: Cannot use local variable ''word'' before
    it is declared

    /tmp/tmpssiqdaop.cs(25,13): warning CS0219: The variable ''vowelIndex'' is assigned
    but its value is never used

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiou\";\n        List<char> vowelList = new List<char>();\n        List<char>\
    \ consonantList = new List<char>();\n        foreach (char c in word.ToLower())\
    \ {\n            if (vowels.Contains(c.ToLower())) {\n                vowelList.Add(c.ToLower());\n\
    \            }\n            if (consonants.Contains(c.ToLower())) {\n        \
    \        consonantList.Add(c.ToLower());\n            }\n        }\n\n       \
    \ string ret = \"\";\n        int count = 0;\n        foreach (char c in word.ToLower())\
    \ {\n            if (vowelList.Contains(c)) {\n                count++;\n    \
    \        }\n            if (count == consonantList.Count) {\n                ret\
    \ += c;\n                break;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgt9gjhl0.cs(28,35): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmpgt9gjhl0.cs(29,33): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmpgt9gjhl0.cs(31,17): error CS0103: The name ''consonants'' does not exist
    in the current context

    /tmp/tmpgt9gjhl0.cs(31,39): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    /tmp/tmpgt9gjhl0.cs(32,37): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        Dictionary<string,\
    \ int> vowels = new Dictionary<string, int>();\n        vowels.Add(\"a\", 1);\n\
    \        vowels.Add(\"e\", 1);\n        vowels.Add(\"i\", 1);\n        vowels.Add(\"\
    o\", 1);\n        vowels.Add(\"u\", 1);\n        vowels.Add(\"y\", 1);\n     \
    \   vowels.Add(\"a\", 1);\n        vowels.Add(\"e\", 1);\n        vowels.Add(\"\
    i\", 1);\n        vowels.Add(\"o\", 1);\n        vowels.Add(\"u\", 1);\n     \
    \   vowels.Add(\"y\", 1);\n        vowels.Add(\"a\", 1);\n        vowels.Add(\"\
    e\", 1);\n        vowels.Add(\"i\", 1);\n        vowels.Add(\"o\", 1);\n     \
    \   vowels.Add(\"u\", 1);\n        vowels.Add(\"y\", 1);\n        vowels.Add(\"\
    a\", 1);\n        vowels.Add(\"e\", 1);\n        vowels.Add(\"i\", 1);\n     \
    \   vowels.Add(\"o\", 1);\n        vowels.Add(\"u\", 1);\n        vowels.Add(\"\
    y\", 1);\n        vowels.Add(\"a\", 1);\n        vowels.Add(\"e\", 1);\n     \
    \   vowels.Add(\"i\", 1);\n        vowels.Add(\"o\", 1);\n        vowels.Add(\"\
    u\", 1);\n        vowels.Add(\"y\", 1);\n        vowels.Add(\"a\", 1);\n     \
    \   vowels.Add(\"e\", 1);\n        vowels.Add(\"i\", 1);\n        vowels.Add(\"\
    o\", 1);\n        vowels.Add(\"u\", 1);\n        vowels.Add(\"y\", 1);\n     \
    \   vowels.Add(\"a\", 1);\n        vowels.Add(\"e\", 1);\n        vowels.Add(\"\
    i\", 1);\n        vowels.Add(\"o\", 1);\n        vowels.Add(\"u\", 1);\n     \
    \   vowels.Add(\"y\", 1);\n        vowels.Add(\"a\", 1);\n        vowels.Add(\"\
    e\", 1);\n        vowels.Add(\"i\", 1);\n        vowels.Add(\"o\", 1);\n     \
    \   vowels.Add(\"u\", 1);\n        vowels.Add(\"y\", 1);\n        vowels.Add(\"\
    a\", 1);\n        vowels.Add(\"e\", 1);\n        vowels.Add(\"i\", 1);\n     \
    \   vowels.Add(\"o\", 1);\n        vowels.Add(\"u\", 1);\n        vowels.Add(\"\
    y\", 1);\n        vowels.Add(\"a\", 1);\n        vowels.Add(\"e\", 1);\n     \
    \   vowels.Add(\"i\", 1);\n        vowels.Add\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptch1zbf9.cs(82,19): error CS1002: ; expected

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"AEIOUaeiou\";\n        var consonants = \"BCDFGHJKLMNPRSTVWXYZ\";\n      \
    \  var vowelCount = vowels.Length;\n        var consonantCount = consonants.Length;\n\
    \        var index = 0;\n        var closestVowel = null;\n        var closestConsonant\
    \ = 0;\n        var closestIndex = -1;\n\n        // Search for the closest vowel\
    \ to the right side of the word\n        // \"quick\" -> \"qu\"\n        // \"\
    ab\" -> \"a\"\n        while (index < word.Length) {\n            if (word[index]\
    \ == 'F' || word[index] == 'v') {\n                closestVowel = \"v\";\n   \
    \             closestConsonant = index;\n                closestIndex = index;\n\
    \                break;\n            }\n            if (word[index] == word[index\
    \ + 1]) {\n                closestVowel = word[index];\n                closestConsonant\
    \ = index + 1;\n                closestIndex = index;\n                break;\n\
    \            }\n            if (consonants.IndexOf(word[index + 1]) >= 0) {\n\
    \                closestVowel = word[index + 1];\n                closestConsonant\
    \ = index + 1;\n                closestIndex = index;\n                break;\n\
    \            }\n            index++;\n        }\n\n        if (closestVowel ==\
    \ null || closestVowel != \"v\") {\n            return \"\";\n        }\n\n  \
    \      // Search for the closest consonant\n        // \"yogurt\" -> \"gurt\"\n\
    \        // \"FULL\" -> \"FUL\"\n        // \"quick\" -> \"\"\n        while (closestConsonant\
    \ < word.Length) {\n            if (consonants.IndexOf(word[closestConsonant])\
    \ < 0) {\n                closestConsonant = word.Length;\n                break;\n\
    \            }\n            if (consonants.IndexOf(word[closestConsonant]) >=\
    \ 0) {\n                closestConsonant = word.Length - 1;\n                break;\n\
    \            }\n            closestConsonant++;\n        }\n\n        return closestVowel\
    \ + consonants.Substring(closestConsonant, 1);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb6rrdf2g.cs(29,13): error CS0815: Cannot assign <null> to an implicitly-typed
    variable

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"AEIOUaeiou\";\n        var charList = word.ToCharArray();\n        var vowelCount\
    \ = new HashSet<char>(vowels);\n        var lastIndex = charList.Length - 1;\n\
    \        var lastVowel = charList[lastIndex];\n        bool isVowel = false;\n\
    \        for (int i = 0; i < lastIndex; ++i) {\n            isVowel = false;\n\
    \            var currentChar = charList[i];\n            for (int j = 0; j < vowels.Length;\
    \ ++j) {\n                if (vowels[j] == currentChar) {\n                  \
    \  isVowel = true;\n                    break;\n                }\n          \
    \  }\n            if (isVowel) {\n                vowelCount.Add(currentChar);\n\
    \            }\n        }\n\n        if (!vowelCount.Contains(lastVowel)) {\n\
    \            return string.Empty;\n        }\n        var vowelIndex = vowelCount.IndexOf(lastVowel);\n\
    \        if (vowelIndex == 0) {\n            return string.Empty;\n        }\n\
    \n        var vowels = word.Substring(0, vowelIndex).ToCharArray();\n        var\
    \ vowelCount = new HashSet<char>(vowels);\n        var charList = word.Substring(vowelIndex\
    \ + 1).ToCharArray();\n        lastIndex = charList.Length - 1;\n        lastVowel\
    \ = charList[lastIndex];\n        bool isVowel = false;\n        for (int i =\
    \ 0; i < lastIndex; ++i) {\n            isVowel = false;\n            var currentChar\
    \ = charList[i];\n            for (int j = 0; j < vowels.Length; ++j) {\n    \
    \            if (vowels[j] == currentChar) {\n                    isVowel = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isVowel) {\n                vowelCount.Add(currentChar);\n            }\n \
    \       }\n\n        if (!vowelCount.Contains(lastVowel)) {\n            return\
    \ string.Empty;\n        }\n        vowelIndex = vowelCount.IndexOf(lastVowel);\n\
    \        if (vowelIndex == 0) {\n            return string.Empty;\n        }\n\
    \n        var vowels = word.Substring(0, vowelIndex).ToCharArray();\n        var\
    \ vowelCount = new HashSet<char>(vowels);\n        var charList = word.Substring(vowelIndex\
    \ + 1).ToCharArray();\n        lastIndex = charList.Length - 1;\n        lastVowel\
    \ = charList[lastIndex];\n        bool isVowel = false;\n        for (int i =\
    \ 0; i < lastIndex; ++i) {\n            isVowel = false;\n            var currentChar\
    \ = charList[i];\n            for (int j = 0; j < vowels.Length; ++j) {\n    \
    \            if (vowels[j] == currentChar) {\n                    isVowel = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isVowel) {\n                vowelCount.Add(currentChar);\n            }\n \
    \       }\n\n        if (!vowelCount.Contains(lastVowel)) {\n            return\
    \ string.Empty;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbot0mto.cs(104,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpmbot0mto.cs(120,2): error CS1513: } expected

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] { \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"o\", \"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\", \"o\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" };\n  \
    \      var vowelsLength = vowels.Length;\n        var vowelsHash = new HashSet<string>(vowels);\n\
    \        var vowelsHashLength = vowelsHash.Count;\n\n        if (vowelsLength\
    \ == 0) return \"\";\n\n        var words = word.Split(' ');\n        var wordLength\
    \ = words.Length;\n        var word = words[0];\n        var lastIndex = word.Length\
    \ - 1;\n        var wordChar = word.First().ToString().ToLower();\n        var\
    \ lastChar = word.Last().ToString().ToLower();\n\n        if (wordChar == lastChar)\
    \ return \"\";\n\n        var result = new List<string>();\n\n        bool isFound\
    \ = false;\n        for (var i = 0; i < wordLength; i++) {\n            var currentChar\
    \ = word[i].ToString().ToLower();\n            var currentCharIndexInWord = i;\n\
    \            var vowelIndexInWord = 0;\n\n            while (vowelIndexInWord\
    \ < vowelsLength && currentCharIndexInWord >= 0 && currentCharIndexInWord <= lastIndex)\
    \ {\n                vowelIndexInWord++;\n                currentCharIndexInWord--;\n\
    \            }\n\n            if (vowelIndexInWord == vowelsLength) {\n      \
    \          isFound = true;\n                break;\n            }\n\n        \
    \    var distance = vowelsHash.IndexOf(currentChar) - vowelsHash.IndexOf(vowels[vowelIndexInWord]);\n\
    \n            if (distance > -1 && distance < vowelsLength - 1) {\n          \
    \      result.Add(vowels[vowelIndexInWord]);\n                isFound = true;\n\
    \            }\n\n            if (currentChar == lastChar) {\n               \
    \ isFound = true;\n                break;\n            }\n        }\n\n      \
    \  if (isFound) return string.Join(\"\", result.ToArray());\n        return \"\
    \";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsrh6oyhc.cs(31,21): error CS0841: Cannot use local variable ''word'' before
    it is declared

    /tmp/tmpsrh6oyhc.cs(33,13): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpsrh6oyhc.cs(58,28): error CS1929: ''HashSet<string>'' does not contain
    a definition for ''IndexOf'' and the best extension method overload ''MemoryExtensions.IndexOf<int>(Span<int>,
    int)'' requires a receiver of type ''Span<int>''

    /tmp/tmpsrh6oyhc.cs(58,62): error CS1929: ''HashSet<string>'' does not contain
    a definition for ''IndexOf'' and the best extension method overload ''MemoryExtensions.IndexOf<string>(Span<string>,
    string)'' requires a receiver of type ''Span<string>''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int count =\
    \ (word.Length < 4 ? word.Length : word.Length - 3);\n        List<char> vowels\
    \ = new List<char> {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n     \
    \   int[] counts = Enumerable.Range(0, count).Select(i => word.Length * i + 1).ToArray();\n\
    \        List<int> values = new List<int>();\n        for (int i = 0; i < vowels.Count;\
    \ i++) {\n            values.Add(vowels.IndexOf(vowels[i]));\n        }\n    \
    \    int[] vals = values.ToArray();\n        Array.Sort(vals);\n        for (int\
    \ i = 0; i < vals.Length; i++) {\n            if (vals[i] >= counts[i]) {\n  \
    \              return \"\";\n            }\n        }\n        int min = 0;\n\
    \        for (int i = 0; i < vals.Length; i++) {\n            if (vals[i] < counts[i])\
    \ {\n                min = vals[i];\n                break;\n            }\n \
    \       }\n        string res = \"\";\n        for (int i = min; i < vals.Length;\
    \ i++) {\n            if (vowels.Contains(vals[i])) {\n                res = vowels[vals[i]\
    \ - 1];\n                break;\n            }\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpznsa08pt.cs(47,33): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    /tmp/tmpznsa08pt.cs(48,23): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiouAEIOU\";\n        bool vowelFound = false;\n        char[] wordChars\
    \ = word.ToCharArray();\n        char lastChar = wordChars[wordChars.Length -\
    \ 1];\n        bool isVowel = vowels.Contains(lastChar.ToString());\n        if(isVowel)\
    \ vowelFound = true;\n        else vowelFound = false;\n        foreach(char c\
    \ in wordChars) {\n            if(!vowels.Contains(c.ToString()) && vowelFound)\
    \ {\n                isVowel = false;\n            }\n        }\n        if(isVowel)\
    \ return lastChar.ToString();\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c34ea7d63b624f2e938670a106b0fb9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c34ea7d63b624f2e938670a106b0fb9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        char[] vowelsArray = vowels.ToCharArray();\n    \
    \    List<char> vowelList = new List<char>();\n        foreach (char vowel in\
    \ vowelsArray) {\n            vowelList.Add(vowel);\n        }\n\n        string\
    \ vowelAfter = string.Empty;\n        int wordLength = word.Length;\n        int\
    \ vowelIndex = 0;\n        bool found = false;\n        for (int i = 0; i < wordLength;\
    \ i++) {\n            vowelIndex = i;\n            found = false;\n          \
    \  while (vowelIndex < wordLength) {\n                if (vowelsArray[vowelIndex].ToString().Equals(word.Substring(vowelIndex,\
    \ 1))) {\n                    found = true;\n                    break;\n    \
    \            }\n                vowelIndex++;\n            }\n            if (found)\
    \ {\n                vowelAfter = word.Substring(vowelIndex, 1);\n           \
    \ }\n        }\n        return vowelAfter;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9a3815a25784377804073199a2a027a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9a3815a25784377804073199a2a027a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        string vowelsArr = vowels.ToCharArray();\n      \
    \  string word = word.ToUpperInvariant();\n        int wordLenght = word.Length;\n\
    \        for (int i = 0; i < wordLenght; i++) {\n            string consonants\
    \ = word.Substring(0, i);\n            char consonant;\n            if (consonants.Contains('A'))\
    \ {\n                consonant = 'A';\n            }\n            else if (consonants.Contains('E'))\
    \ {\n                consonant = 'E';\n            }\n            else if (consonants.Contains('I'))\
    \ {\n                consonant = 'I';\n            }\n            else if (consonants.Contains('O'))\
    \ {\n                consonant = 'O';\n            }\n            else if (consonants.Contains('U'))\
    \ {\n                consonant = 'U';\n            }\n            else {\n   \
    \             consonant = ' ';\n            }\n            int consonantCount\
    \ = consonants.Count(x => x == consonant);\n            if (consonantCount > 1)\
    \ {\n                for (int j = i + 1; j <= wordLenght - 1; j++) {\n       \
    \             string vowelsAt = word.Substring(i, j);\n                    char\
    \ vowel;\n                    if (vowelsAt.Contains('A')) {\n                \
    \        vowel = 'A';\n                    }\n                    else if (vowelsAt.Contains('E'))\
    \ {\n                        vowel = 'E';\n                    }\n           \
    \         else if (vowelsAt.Contains('I')) {\n                        vowel =\
    \ 'I';\n                    }\n                    else if (vowelsAt.Contains('O'))\
    \ {\n                        vowel = 'O';\n                    }\n           \
    \         else if (vowelsAt.Contains('U')) {\n                        vowel =\
    \ 'U';\n                    }\n                    else {\n                  \
    \      vowel = ' ';\n                    }\n                    int vowelCount\
    \ = vowelsArr.Count(x => x == vowel);\n                    if (vowelCount > 1)\
    \ {\n                        string closestVowel = string.Empty;\n           \
    \             for (int k = j + 1; k < wordLenght; k++) {\n                   \
    \         string vowelsAt = word.Substring(i, k);\n                          \
    \  char vowel;\n                            if (vowelsAt.Contains('A')) {\n  \
    \                              vowel = 'A';\n                            }\n \
    \                           else if (vowelsAt.Contains('E')) {\n             \
    \                   vowel = 'E';\n                            }\n            \
    \                else if (vowelsAt.Contains('I')) {\n                        \
    \        vowel = 'I';\n                            }\n                       \
    \     else if (vowelsAt.Contains('O')) {\n                                vowel\
    \ = 'O';\n                            }\n                            else if (vowelsAt.Contains('U'))\
    \ {\n                                vowel = 'U';\n                          \
    \  }\n                            else {\n                                vowel\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzi2ox7e0.cs(94,38): error CS1002: ; expected

    /tmp/tmpzi2ox7e0.cs(96,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzi2ox7e0.cs(112,2): error CS1513: } expected

    '
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int left = 0;\n\
    \        int right = 0;\n        string vowel = \"\";\n\n        for(int i = word.Length-1;\
    \ i >= 0; i--) {\n            right = word.IndexOf('e', i+1);\n            if\
    \ (right == -1) right = word.Length;\n\n            string leftSub = word.Substring(0,\
    \ i);\n            string rightSub = word.Substring(right);\n            bool\
    \ isVowel = System.Array.IndexOf(new char[]{'a', 'e', 'i', 'o', 'u'}, leftSub.ToLower())\
    \ >= 0;\n            bool isConsonant = System.Array.IndexOf(new char[]{'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}, leftSub.ToLower()) >= 0;\n\n            if (isVowel && !isConsonant)\
    \ {\n                vowel = leftSub;\n            }\n            else if (!isVowel\
    \ && isConsonant) {\n                vowel = rightSub;\n            }\n      \
    \  }\n        return vowel;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09ebfa869bef4aa0aba2898dd97033eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09ebfa869bef4aa0aba2898dd97033eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Your code\
    \ goes here\n        string vowel = \"AEIOU\";\n        int cons = 0;\n      \
    \  int vowelIndex = 0;\n        int conIndex = 0;\n        List<int> positions\
    \ = new List<int>();\n        List<int> vowelPositions = new List<int>();\n  \
    \      foreach (char c in word) {\n            vowelPositions.Add(vowel.IndexOf(c));\n\
    \            if (vowelPositions.IndexOf(vowelIndex) > -1 && vowelPositions.IndexOf(conIndex)\
    \ > -1) {\n                cons = cons + 1;\n                positions.Add(vowelPositions.IndexOf(vowelIndex));\n\
    \            }\n            vowelIndex = vowelIndex + 1;\n            conIndex\
    \ = conIndex + 1;\n        }\n        if (cons == 0) {\n            return \"\"\
    ;\n        }\n        int min = int.MaxValue;\n        int minIndex = 0;\n   \
    \     for (int i = 0; i < positions.Count - 1; i++) {\n            if (positions[i]\
    \ < positions[i + 1]) {\n                min = positions[i + 1] - positions[i];\n\
    \                minIndex = i;\n            }\n        }\n        return vowel[minIndex];\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfrx70_tn.cs(51,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        int size = word.Length;\n        int index = 0;\n\
    \        if (size <= 0) {\n            return \"\";\n        }\n        while\
    \ (index != size - 1) {\n            string left = new string(word.TakeWhile(c\
    \ => char.IsLetter(c)).ToArray());\n            string right = new string(word.SkipWhile(c\
    \ => char.IsLetter(c)).ToArray());\n            string vowel = new string(left.TakeWhile(c\
    \ => vowels.Contains(c)).ToArray());\n            if (vowel.Equals(right)) {\n\
    \                return vowel;\n            }\n            ++index;\n        }\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <655d30380e5744969201c0d74a6cb316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <655d30380e5744969201c0d74a6cb316>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"\";\n        char[] vowels = { ',', '.', '/', '*', '!', '@', '\"', '\\''};\n\
    \        foreach (char c in word) {\n            for (int i = word.Length - 1;\
    \ i >= 0; i--) {\n                if (vowels.Contains(word.Substring(i, 1).ToLower()))\
    \ {\n                    vowel = word.Substring(0, i);\n                    break;\n\
    \                }\n            }\n            if (vowel.Length > 0) {\n     \
    \           break;\n            }\n        }\n        return vowel;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyl3e894q.cs(28,21): error CS1929: ''char[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<string>(ParallelQuery<string>,
    string)'' requires a receiver of type ''ParallelQuery<string>''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        string letters = \"aAeEiIoOuU\";\n        char[]\
    \ letterArray = word.ToCharArray();\n        Array.Sort(letterArray);\n      \
    \  bool isVowel = true;\n        foreach (char c in letterArray) {\n         \
    \   if (vowels.IndexOf(c) == -1) {\n                isVowel = false;\n       \
    \         break;\n            }\n        }\n        if (isVowel) {\n         \
    \   string vowelIndex = vowels.IndexOf(letterArray[0]);\n            int index1\
    \ = word.IndexOf(letterArray[0]);\n            int index2 = word.LastIndexOf(letterArray[0]);\n\
    \            int index3 = index2 > index1 ? index2 : index1;\n            int\
    \ index4 = index3 > index1 ? index3 : index1;\n            string firstLetter\
    \ = word.Substring(index4, 1);\n            int pos;\n            for (int i =\
    \ 1; i < word.Length; i++) {\n                pos = word.IndexOf(letterArray[i]);\n\
    \                string nextLetter = word.Substring(pos + 1, 1);\n           \
    \     if (vowels.IndexOf(nextLetter) == -1) {\n                    isVowel = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isVowel) {\n                return firstLetter;\n            } else {\n   \
    \             return \"\";\n            }\n        } else {\n            return\
    \ \"\";\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_6xtj8ap.cs(36,33): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp_6xtj8ap.cs(25,16): warning CS0219: The variable ''letters'' is assigned
    but its value is never used

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        int len = word.Length;\n        List<int> vowelIndexes\
    \ = new List<int>();\n        for (int i = 0; i < len; i++) {\n            if\
    \ (vowels.IndexOf(word[i]) >= 0)\n                vowelIndexes.Add(i);\n     \
    \   }\n        if (vowelIndexes.Count == 0) {\n            return string.Empty;\n\
    \        }\n        int first = vowelIndexes[0];\n        int last = vowelIndexes[vowelIndexes.Count\
    \ - 1];\n        string vowel = word.Substring(first, last - first + 1).ToLower();\n\
    \        int leftCount = 1;\n        int rightCount = 1;\n        List<string>\
    \ vowelSubstrings = new List<string>();\n        List<int> vowelSubstringIndexes\
    \ = new List<int>();\n        int i = len - 1;\n        while (i >= 0) {\n   \
    \         string next = word.Substring(i + 1, 1).ToLower();\n            if (vowelIndexes.Contains(i))\
    \ {\n                if (vowelSubstrings.Count == 0) {\n                    vowelSubstrings.Add(next);\n\
    \                    vowelSubstringIndexes.Add(i);\n                }\n      \
    \          else {\n                    int j = vowelSubstrings.Count - 1;\n  \
    \                  while (j >= 0) {\n                        if (vowelSubstrings[j].Equals(next))\
    \ {\n                            vowelSubstrings[j] = next;\n                \
    \            vowelSubstringIndexes.Add(i);\n                            break;\n\
    \                        }\n                        j--;\n                   \
    \ }\n                }\n            }\n            i--;\n        }\n        int\
    \ leftCount = 1;\n        int rightCount = 1;\n        List<string> vowelSubstrings\
    \ = new List<string>();\n        List<int> vowelSubstringIndexes = new List<int>();\n\
    \        int i = len - 1;\n        while (i >= 0) {\n            string next =\
    \ word.Substring(i + 1, 1).ToLower();\n            if (vowelIndexes.Contains(i))\
    \ {\n                if (vowelSubstrings.Count == 0) {\n                    vowelSubstrings.Add(next);\n\
    \                    vowelSubstringIndexes.Add(i);\n                }\n      \
    \          else {\n                    int j = vowelSubstrings.Count - 1;\n  \
    \                  while (j >= 0) {\n                        if (vowelSubstrings[j].Equals(next))\
    \ {\n                            vowelSubstrings[j] = next;\n                \
    \            vowelSubstringIndexes.Add(i);\n                            break;\n\
    \                        }\n                        j--;\n                   \
    \ }\n                }\n            }\n            i--;\n        }\n        bool\
    \ rightIndexesAreEqual = true;\n        bool leftIndexesAreEqual = true;\n   \
    \     vowelSubstrings.Sort();\n        for (int i = 0; i < vowelSubstrings.Count\
    \ - 1; i++) {\n            if (vowelSubstringIndexes[i] >= first) {\n        \
    \        if (vowelSubstringIndexes[i + 1] >= last) {\n                    if (vowelSubstringIndexes[i\
    \ + 1] != vowelSubstringIndexes[i]) {\n                        rightIndexesAreEqual\
    \ = false;\n                    }\n                }\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw6zjfvf9.cs(101,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpw6zjfvf9.cs(117,2): error CS1513: } expected

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var res = new\
    \ Dictionary<char, int>();\n        foreach (var letter in word)\n        {\n\
    \            if (!res.ContainsKey(letter))\n            {\n                res[letter]\
    \ = 0;\n            }\n            res[letter] = res[letter] + 1;\n        }\n\
    \        var vowel = \"A\";\n        var vowelFound = false;\n        var vowelCount\
    \ = 0;\n        foreach (var letter in word.ToLower())\n        {\n          \
    \  vowelFound = false;\n            if (res[letter] > 0)\n            {\n    \
    \            vowelFound = true;\n                vowelCount = res[letter];\n \
    \           }\n            else if (res[letter] == 0)\n            {\n       \
    \         vowelFound = false;\n            }\n            if (!vowelFound)\n \
    \           {\n                if (res[vowel] > 0)\n                {\n      \
    \              vowelFound = true;\n                    vowelCount = res[vowel];\n\
    \                    vowel = letter;\n                }\n                else\
    \ if (res[vowel] == 0)\n                {\n                    vowelFound = false;\n\
    \                }\n                if (!vowelFound)\n                {\n    \
    \                vowelFound = false;\n                }\n            }\n     \
    \   }\n        return vowel.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppaabvxt5.cs(50,25): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmppaabvxt5.cs(53,38): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmppaabvxt5.cs(54,29): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmppaabvxt5.cs(56,30): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char vowel =\
    \ 'a';\n        char v = 'z';\n        int vowelCount = 0;\n        int vCount\
    \ = 0;\n        int vStart = 0;\n        int vEnd = word.Length - 1;\n       \
    \ bool flag = false;\n        bool isUpper = false;\n        while (vowelCount\
    \ < word.Length / 2 && vCount < word.Length / 2)\n        {\n            if (isUpper\
    \ == true)\n            {\n                isUpper = false;\n                vowel\
    \ = word.ToUpper().ToCharArray()[0];\n            }\n            else\n      \
    \      {\n                isUpper = true;\n                vowel = word.ToUpper().ToCharArray()[1];\n\
    \            }\n            if (word[vowelCount] == vowel)\n            {\n  \
    \              vowelCount++;\n            }\n            else\n            {\n\
    \                vowelCount--;\n            }\n            if (word[vCount] ==\
    \ vowel)\n            {\n                vCount++;\n            }\n          \
    \  else\n            {\n                vCount--;\n            }\n           \
    \ if (word[vStart] == 'i' || word[vStart] == 'I')\n            {\n           \
    \     if (vowel == v)\n                {\n                    vStart = vCount\
    \ + 1;\n                }\n                else\n                {\n         \
    \           vStart = vCount - 1;\n                }\n            }\n         \
    \   else\n            {\n                if (vowel == v)\n                {\n\
    \                    vStart = vCount + 1;\n                }\n               \
    \ else\n                {\n                    vStart = vCount - 1;\n        \
    \        }\n            }\n            if (word[vEnd] == 'i' || word[vEnd] ==\
    \ 'I')\n            {\n                if (vowel == v)\n                {\n  \
    \                  vEnd = vStart + 1;\n                }\n                else\n\
    \                {\n                    vEnd = vStart - 1;\n                }\n\
    \            }\n            else\n            {\n                if (vowel ==\
    \ v)\n                {\n                    vEnd = vStart + 1;\n            \
    \    }\n                else\n                {\n                    vEnd = vStart\
    \ - 1;\n                }\n            }\n        }\n        if (flag == false)\n\
    \        {\n            if (word.Length == 1)\n            {\n               \
    \ return \"\";\n            }\n            else\n            {\n             \
    \   return word[vStart];\n            }\n        }\n        else\n        {\n\
    \            if (word.Length == 1)\n            {\n                return \"\"\
    ;\n            }\n            else\n            {\n                return word[vStart];\n\
    \            }\n        }\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp16at9xkh.cs(113,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp16at9xkh.cs(124,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new[] { 'a', 'e', 'i', 'o', 'u' };\n        string vowelFound = \"\";\n  \
    \      foreach (char c in word) {\n            bool isVowel = false;\n       \
    \     foreach (char vowel in vowels) {\n                if (c == vowel) {\n  \
    \                  isVowel = true;\n                    vowelFound = vowel;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isVowel) {\n                break;\n            }\n        }\n        return\
    \ vowelFound;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfydifecw.cs(31,34): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Your code\
    \ here\n        // Solving for the first vowel \n        // The key here is to\
    \ check from right side\n        // First check the first vowel and then check\
    \ \n        // the other vowel from the right\n\n        if(word[0] == 'a') {\
    \ \n            var temp = 'a';\n            for(; temp <= 'z'; temp++) {\n  \
    \              if(temp != word[0]) {\n                    return temp;\n     \
    \           }\n            }\n        }\n\n        var temp = 'a';\n        for(;\
    \ temp <= 'z'; temp++) {\n            if(temp != word[0]) {\n                return\
    \ temp;\n            }\n        }\n\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcosb1vnh.cs(31,17): error CS0136: A local or parameter named ''temp''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpcosb1vnh.cs(34,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpcosb1vnh.cs(42,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"aeiouAEIOU\";\n        var searchedVowel = vowels.ToLower();\n        var\
    \ searchedWord = word.ToLower();\n        var charIndex = word.IndexOfAny(searchedWord.ToArray());\n\
    \n        if (charIndex >= 0) {\n            var lastChar = searchedWord[charIndex];\n\
    \            var newWord = searchedWord.Remove(0, charIndex).Insert(charIndex,\
    \ searchedVowel);\n            var newCharIndex = newWord.IndexOfAny(newWord.ToArray());\n\
    \            if (newCharIndex >= 0) {\n                var newLastChar = newWord[newCharIndex];\n\
    \                var newWordToSearch = newWord.Remove(0, newCharIndex).Insert(newCharIndex,\
    \ searchedVowel);\n                var newCharIndexToSearch = newWordToSearch.IndexOfAny(newWordToSearch.ToArray());\n\
    \n                if (newCharIndexToSearch >= 0 && newLastChar == lastChar) {\n\
    \                    var newWordToSearchLength = newWordToSearch.Length;\n   \
    \                 var newWordToSearchSub = newWordToSearch.Substring(0, newCharIndexToSearch);\n\
    \                    var newWordToSearchNew = newWordToSearch.Substring(newCharIndexToSearch\
    \ + newWordToSearchLength);\n\n                    var newSearchedWord = newWordToSearchNew\
    \ + newWordToSearchSub;\n                    var newCharIndexToSearch2 = newSearchedWord.IndexOfAny(newSearchedWord.ToArray());\n\
    \n                    if (newCharIndexToSearch2 >= 0) {\n                    \
    \    return newSearchedWord.Remove(newCharIndexToSearch2 + newWordToSearchLength).Insert(newCharIndexToSearch2,\
    \ searchedVowel);\n                    }\n                }\n            }\n \
    \       }\n        return \"\";\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <831154bb7f3f42bd8d66dd741b6c2d29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <831154bb7f3f42bd8d66dd741b6c2d29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Check whether\
    \ string is null\n        if (word == null)\n            return string.Empty;\n\
    \        // Check whether word length is 1\n        if (word.Length == 1)\n  \
    \          return word[0];\n        // Check whether word length is 2\n      \
    \  if (word.Length == 2)\n            return word[0] + word[1];\n        // Check\
    \ whether word length is 3\n        if (word.Length == 3)\n            return\
    \ word[0] + word[1] + word[2];\n        // Check whether word length is 4\n  \
    \      if (word.Length == 4)\n            return word[0] + word[1] + word[2] +\
    \ word[3];\n        // Check whether word length is 5\n        if (word.Length\
    \ == 5)\n            return word[0] + word[1] + word[2] + word[3] + word[4];\n\
    \        // Check whether word length is 6\n        if (word.Length == 6)\n  \
    \          return word[0] + word[1] + word[2] + word[3] + word[4] + word[5];\n\
    \        // Check whether word length is 7\n        if (word.Length == 7)\n  \
    \          return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] +\
    \ word[6];\n        // Check whether word length is 8\n        if (word.Length\
    \ == 8)\n            return word[0] + word[1] + word[2] + word[3] + word[4] +\
    \ word[5] + word[6] + word[7];\n        // Check whether word length is 9\n  \
    \      if (word.Length == 9)\n            return word[0] + word[1] + word[2] +\
    \ word[3] + word[4] + word[5] + word[6] + word[7] + word[8];\n        // Check\
    \ whether word length is 10\n        if (word.Length == 10)\n            return\
    \ word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7]\
    \ + word[8] + word[9];\n        // Check whether word length is 11\n        if\
    \ (word.Length == 11)\n            return word[0] + word[1] + word[2] + word[3]\
    \ + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10];\n  \
    \      // Check whether word length is 12\n        if (word.Length == 12)\n  \
    \          return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] +\
    \ word[6] + word[7] + word[8] + word[9] + word[10] + word[11];\n        // Check\
    \ whether word length is 13\n        if (word.Length == 13)\n            return\
    \ word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7]\
    \ + word[8] + word[9] + word[10] + word[11] + word[12];\n        // Check whether\
    \ word length is 14\n        if (word.Length == 14)\n            return word[0]\
    \ + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8]\
    \ + word[9] + word[10] + word[11] + word[12] + word\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsfvvqnvl.cs(68,157): error CS1002: ; expected

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] chars\
    \ = word.ToCharArray();\n        int[] vowelStartVowels = new int[] { 0, 3, 6,\
    \ 9, 12 };\n        int[] vowelEndVowels = new int[] { 1, 4, 7, 10, 13 };\n  \
    \      // If the word is length 1, return an empty string\n        if (chars.Length\
    \ == 1) {\n            return \"\";\n        }\n        int totalCount = 0;\n\
    \        // Iterate from right side to left side of the word\n        for(int\
    \ i = chars.Length-1; i >= 0; i--) {\n            // Check whether the letter\
    \ matches the consonant or not\n            if (chars[i] == 'a' || chars[i] ==\
    \ 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u' || chars[i] ==\
    \ 'A' || chars[i] == 'E' || chars[i] == 'I' || chars[i] == 'O' || chars[i] ==\
    \ 'U') {\n                totalCount += vowelStartVowels[i];\n            }\n\
    \            // Check whether the letter matches the consonant or not\n      \
    \      if (chars[i] == 'b' || chars[i] == 'c' || chars[i] == 'd' || chars[i] ==\
    \ 'f' || chars[i] == 'g' || chars[i] == 'H' || chars[i] == 'K' || chars[i] ==\
    \ 'J' || chars[i] == 'M' || chars[i] == 'N' || chars[i] == 'P' || chars[i] ==\
    \ 'Q' || chars[i] == 'R' || chars[i] == 'S' || chars[i] == 'T' || chars[i] ==\
    \ 'V' || chars[i] == 'X' || chars[i] == 'Z') {\n                totalCount +=\
    \ vowelEndVowels[i];\n            }\n        }\n        // If count of all vowels\
    \ is odd, return an empty string\n        if (totalCount % 2 != 0) {\n       \
    \     return \"\";\n        }\n        // If count of all vowels is even, return\
    \ the vowel met \n        // the condition, otherwise return an empty string\n\
    \        return vowelStartVowels[totalCount / 2] >= 0 ? vowelStartVowels[totalCount\
    \ / 2] : \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_xd3bljb.cs(49,16): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''int'' and ''string''

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        if (vowels.Contains(word.ToUpper()))\n          \
    \  return word.ToUpper();\n\n        if (word.Length <= 2) return \"\";\n\n  \
    \      char[] consonants = new char[] { 'b', 'c', 'd', 'f', 'g', 'h',\n      \
    \                                      'j', 'k', 'l', 'm', 'n', 'p', 'q',\n  \
    \                                          'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z' };\n\n        var vowelsLeft = word.Substring(0, 1);\n        var vowelsRight\
    \ = word.Substring(word.Length - 1, 1);\n\n        var vowelsRightToLeft = GetClosestVowel(vowelsRight);\n\
    \        var vowelsLeftToRight = GetClosestVowel(vowelsLeft);\n\n        if (vowelsLeft.Length\
    \ > vowelsRight.Length) {\n            return vowelsRightToLeft;\n        }\n\
    \        else if (vowelsLeft.Length < vowelsRight.Length) {\n            return\
    \ vowelsLeftToRight;\n        }\n\n        string vowelsLeftToRightVowels = GetClosestVowel(vowelsLeftToRight);\n\
    \        string vowelsRightToLeftVowels = GetClosestVowel(vowelsRightToLeft);\n\
    \n        if (vowelsLeft.Length > vowelsRight.Length &&\n            vowelsLeftToRightVowels\
    \ != vowelsRightToLeftVowels)\n        {\n            return vowelsLeftToRightVowels;\n\
    \        }\n\n        if (vowelsLeft.Length < vowelsRight.Length &&\n        \
    \    vowelsRightToLeftVowels != vowelsLeftToRightVowels)\n        {\n        \
    \    return vowelsRightToLeftVowels;\n        }\n\n        if (vowelsLeft.Length\
    \ < vowelsRight.Length &&\n            vowelsLeftToRightVowels == vowelsRightToLeftVowels)\n\
    \        {\n            return vowelsLeftToRightVowels;\n        }\n\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9ffdd9a25b04f21b1392cb2a66a7ed4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9ffdd9a25b04f21b1392cb2a66a7ed4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var result =\
    \ \"\";\n        int len = word.Length;\n        for (int i = len-1; i >= 0; i--)\
    \ {\n            if (word.Substring(i, 1).ToLower() == \"a\") {\n            \
    \    continue;\n            }\n            if (word.Substring(i, 1).ToLower()\
    \ == \"e\") {\n                continue;\n            }\n            if (word.Substring(i,\
    \ 1).ToLower() == \"i\") {\n                continue;\n            }\n       \
    \     if (word.Substring(i, 1).ToLower() == \"o\") {\n                continue;\n\
    \            }\n            if (word.Substring(i, 1).ToLower() == \"u\") {\n \
    \               break;\n            }\n            if (word.Substring(i, 1).ToLower()\
    \ == \"y\") {\n                continue;\n            }\n            if (word.Substring(i,\
    \ 1).ToLower() == \"s\") {\n                continue;\n            }\n       \
    \     if (word.Substring(i, 1).ToLower() == \"t\") {\n                continue;\n\
    \            }\n            return result;\n        }\n        return \"\";\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc18007fed304acda68c8759129e8e0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc18007fed304acda68c8759129e8e0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n        var consonants =\
    \ new[] {\n            char.ConvertFromUtf32(0x0061), char.ConvertFromUtf32(0x0063),\
    \ \n            char.ConvertFromUtf32(0x0064), char.ConvertFromUtf32(0x0065),\
    \ \n            char.ConvertFromUtf32(0x0068), char.ConvertFromUtf32(0x006A),\
    \ \n            char.ConvertFromUtf32(0x006E), char.ConvertFromUtf32(0x0073)\n\
    \        };\n        var consonants_count = consonants.Select(c => c.ToString(\"\
    X\")).ToArray();\n        var vowels_count = vowels.Select(v => v.ToString(\"\
    X\")).ToArray();\n        var count = consonants_count.Concat(vowels_count).Distinct().Count();\n\
    \        var leftSide = word.ToCharArray()\n            .Select((c, i) => new\
    \ {\n                index = i,\n                v = consonants[consonants_count.IndexOf(c)]\n\
    \            }).Where(c => c.v == consonants.Last()).Take(count);\n        var\
    \ rightSide = word.ToCharArray()\n            .Select((c, i) => new {\n      \
    \          index = i,\n                v = vowels[vowels_count.IndexOf(c)]\n \
    \           }).Where(c => c.v == vowels.Last()).Take(count);\n        string retval\
    \ = string.Empty;\n        if (leftSide.Count() == 0 && rightSide.Count() == 0)\
    \ {\n            return retval;\n        }\n        if (leftSide.Count() == 0)\
    \ {\n            return rightSide.Last().ToString();\n        }\n        if (rightSide.Count()\
    \ == 0) {\n            return leftSide.First().ToString();\n        }\n      \
    \  var leftToRight = leftSide.Zip(rightSide, (l, r) => new {\n            l,\n\
    \            r\n        }).Where(a => a.l.v != a.r.v).Select(a => a.l.v);\n  \
    \      if (leftToRight.Count() == 0) {\n            return retval;\n        }\n\
    \        var closestIndex = (int) Math.Sqrt(leftToRight.Count());\n        var\
    \ closest = leftToRight[closestIndex];\n        var distance = Math.Abs(word.ToLower().IndexOf(closest.ToString(),\
    \ StringComparison.OrdinalIgnoreCase) - 1);\n        if (distance < retval.Length)\
    \ {\n            retval = closest;\n        }\n        return retval;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe8kw0fg9.cs(31,66): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.IFormatProvider''

    /tmp/tmpe8kw0fg9.cs(32,58): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.IFormatProvider''

    /tmp/tmpe8kw0fg9.cs(62,23): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IEnumerable<string>''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (word ==\
    \ null || word.Length <= 2)\n            return \"\";\n\n        char[] vowels\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        int vowelCount = 0;\n   \
    \     string vowel;\n\n        for (int i = 0; i < word.Length - 2; i++) {\n \
    \           vowelCount = 0;\n            vowel = word[i];\n            for (int\
    \ j = 0; j < vowels.Length; j++) {\n                if (vowel == vowels[j]) {\n\
    \                    vowelCount++;\n                }\n            }\n       \
    \     if (vowelCount == 0)\n                break;\n        }\n\n        for (int\
    \ i = word.Length - 2; i >= 0; i--) {\n            vowelCount = 0;\n         \
    \   vowel = word[i];\n            for (int j = 0; j < vowels.Length; j++) {\n\
    \                if (vowel == vowels[j]) {\n                    vowelCount++;\n\
    \                }\n            }\n            if (vowelCount == 0)\n        \
    \        break;\n        }\n\n        if (vowelCount == 0)\n            return\
    \ \"\";\n\n        for (int i = 0; i < word.Length - 1; i++) {\n            if\
    \ (vowels[i] > vowels[i + 1])\n                return \"\";\n        }\n\n   \
    \     return vowels[vowels.Length - 1];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnxdi6vi1.cs(33,21): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpnxdi6vi1.cs(35,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpnxdi6vi1.cs(45,21): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpnxdi6vi1.cs(47,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpnxdi6vi1.cs(63,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string[] vowels\
    \ = {\"A\",\"a\",\"O\",\"o\",\"I\",\"i\",\"U\",\"u\"};\n        int vowelIndex=vowels.IndexOf(word.Substring(word.Length-1));\n\
    \        int consonantIndex=-1;\n        if(vowelIndex!=-1)\n        {\n     \
    \       consonantIndex=vowelIndex+2;\n        }\n        else\n        {\n   \
    \         consonantIndex=word.Length-1;\n        }\n        int consonantIndex2=consonantIndex-1;\n\
    \        int consonantIndex3=consonantIndex+1;\n        if(consonantIndex3<0)\n\
    \        {\n            consonantIndex3=0;\n        }\n        if(consonantIndex2<0)\n\
    \        {\n            consonantIndex2=0;\n        }\n        if(consonantIndex<0)\n\
    \        {\n            consonantIndex=0;\n        }\n        if(consonantIndex>word.Length-1)\n\
    \        {\n            consonantIndex=word.Length-1;\n        }\n        List<string>\
    \ vowelsFound=new List<string>();\n        for(int i=0;i<word.Length;i++)\n  \
    \      {\n            if(vowels[i]==word[i])\n            {\n                vowelsFound.Add(vowels[i].ToString());\n\
    \            }\n        }\n        if(vowelsFound.Count>1)\n        {\n      \
    \      string closestVowel=vowelsFound.Find(x=>x==vowels[consonantIndex].ToString()).ToString();\n\
    \            if(!vowelsFound.Contains(closestVowel))\n            {\n        \
    \        closestVowel=vowelsFound.Find(x=>x==vowels[consonantIndex2].ToString()).ToString();\n\
    \            }\n            if(!vowelsFound.Contains(closestVowel))\n        \
    \    {\n                closestVowel=vowelsFound.Find(x=>x==vowels[consonantIndex3].ToString()).ToString();\n\
    \            }\n            if(!vowelsFound.Contains(closestVowel))\n        \
    \    {\n                closestVowel=vowelsFound.Find(x=>x==vowels[consonantIndex].ToString().ToLower()).ToString();\n\
    \            }\n            return closestVowel;\n        }\n        return \"\
    \";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx_bfi7zh.cs(25,31): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpx_bfi7zh.cs(56,16): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        if (string.IsNullOrEmpty(word))\n\
    \            return \"\";\n        var result = \"\";\n        var vowels = \"\
    aeiouAEIOU\";\n        var letters = word.ToLower();\n        var position = new\
    \ List<int>();\n        foreach (var letter in letters)\n            position.Add(letters.IndexOf(letter));\n\
    \        int left = 0;\n        int right = position.Count - 1;\n        while\
    \ (left < right)\n        {\n            var index = position[left];\n       \
    \     var next = position[right - 1];\n            var countVowel = vowels.IndexOf(letters[index],\
    \ StringComparison.OrdinalIgnoreCase);\n            var countNext = vowels.IndexOf(letters[next],\
    \ StringComparison.OrdinalIgnoreCase);\n            if ((countVowel > 0) && (countNext\
    \ > 0))\n            {\n                var diff = index - next;\n           \
    \     if (diff < 0)\n                    left++;\n                else if (diff\
    \ > 0)\n                    right--;\n                else\n                {\n\
    \                    result = vowels[countVowel];\n                    break;\n\
    \                }\n            }\n            else if (countVowel > 0)\n    \
    \        {\n                result = vowels[countVowel];\n                break;\n\
    \            }\n            else if (countNext > 0)\n            {\n         \
    \       result = vowels[countNext];\n                break;\n            }\n \
    \           left++;\n            right--;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ptkac4q.cs(49,30): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp0ptkac4q.cs(55,26): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp0ptkac4q.cs(60,26): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new string[] { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        var vowelsIndexes\
    \ = vowels.Select(x => vowels.IndexOf(x)).ToList();\n\n        var vowelsReverseIndexes\
    \ = vowels.Select(x => vowels.IndexOf(x, StringComparison.InvariantCultureIgnoreCase)).ToList();\n\
    \n        var index = GetIndexFromRight(word, vowelsIndexes);\n\n        return\
    \ GetClosestVowelFromIndex(word, index, vowelsReverseIndexes);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplae7v5n8.cs(25,55): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmplae7v5n8.cs(27,70): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmplae7v5n8.cs(29,21): error CS0103: The name ''GetIndexFromRight'' does
    not exist in the current context

    /tmp/tmplae7v5n8.cs(31,16): error CS0103: The name ''GetClosestVowelFromIndex''
    does not exist in the current context

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        int counter\
    \ = 0;\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        int lenght\
    \ = word.Length;\n        for (int i = 1; i < lenght; i++) {\n            for\
    \ (int j = 0; j < vowels.Length; j++) {\n                if (word[i] == vowels[j])\
    \ {\n                    counter++;\n                    i = i - 1;\n        \
    \            lenght = lenght - 1;\n                }\n            }\n        }\n\
    \        if (counter > 0) {\n            return word.Substring(counter, 1);\n\
    \        }\n        else {\n            return \"\";\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ca97c777cf742588606a877014f7326>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ca97c777cf742588606a877014f7326>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.GetClosestVowel (System.String word) [0x00027] in <3ca97c777cf742588606a877014f7326>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00035] in <3ca97c777cf742588606a877014f7326>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfR"
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"AEIOUaeiou\";\n        string consonants = \"bcdfghjklmnpqrstvwxyz\";\n\
    \        \n        // Check validity of string\n        if (word == null || !vowels.Contains(word.First())\n\
    \             || !consonants.Contains(word.Substring(word.Length - 1, 1))) {\n\
    \            return \"\";\n        }\n        \n        char[] vowelArray = word.ToArray();\n\
    \        string vowelString = \"\";\n        bool found = false;\n        string\
    \ vowelString = String.Empty;\n        \n        for (int i = 0; i < vowelArray.Length;\
    \ i++) {\n            if (vowelArray[i] == vowels.First()) {\n               \
    \ if (vowelArray[i + 1] == vowels.First()) {\n                    if (vowelArray[i\
    \ + 2] == vowels.First()) {\n                        if (vowelArray[i + 3] ==\
    \ vowels.First()) {\n                            if (vowelArray[i + 4] == vowels.First())\
    \ {\n                                found = true;\n                         \
    \       vowelString = vowels.First();\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        \n        return found ? vowelString : \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphta5d4en.cs(36,16): error CS0128: A local variable or function named ''vowelString''
    is already defined in this scope

    /tmp/tmphta5d4en.cs(45,47): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = { \"a\", \"e\", \"i\", \"o\", \"u\" };\n        int i = 0;\n        int len\
    \ = word.Length;\n        Dictionary<char, double> dic = new Dictionary<char,\
    \ double>();\n        foreach (char c in word.ToLower()) {\n            double\
    \ dist = word.Length - i;\n            dic.Add(c, dist);\n        }\n        double\
    \ maxDist = 0;\n        char maxChar = vowels[0];\n        foreach (char c in\
    \ vowels) {\n            if (dic.ContainsKey(c)) {\n                double dist\
    \ = dic[c];\n                if (dist > maxDist) {\n                    maxDist\
    \ = dist;\n                    maxChar = c;\n                }\n            }\n\
    \        }\n        return maxChar;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_fmy3iuj.cs(24,27): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp_fmy3iuj.cs(24,32): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp_fmy3iuj.cs(24,37): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp_fmy3iuj.cs(24,42): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp_fmy3iuj.cs(24,47): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp_fmy3iuj.cs(43,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new List<char>();\n        vowels.AddRange(new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' });\n        var index = word.LastIndexOfAny(vowels.ToArray());\n      \
    \  if (index >= 0)\n        {\n            var vowel = word.Substring(index +\
    \ 1);\n            return vowel;\n        }\n        vowels.Reverse();\n     \
    \   index = word.LastIndexOfAny(vowels.ToArray());\n        if (index >= 0)\n\
    \        {\n            var vowel = word.Substring(index + 1);\n            return\
    \ vowel;\n        }\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36ac0c5dd2f84e3f8298e162f6b980aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36ac0c5dd2f84e3f8298e162f6b980aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        List<char> vowels\
    \ = new List<char>();\n        vowels.Add('a', 'e', 'i', 'o', 'u');\n        vowels.Add('A',\
    \ 'E', 'I', 'O', 'U');\n\n        var index = (from v in vowels where word.Contains(v)\
    \ select v.ToLower()).First();\n        return word.Substring(0, (word.Length\
    \ - word.IndexOf(index)));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd3of3l4a.cs(25,16): error CS1501: No overload for method ''Add'' takes
    5 arguments

    /tmp/tmpd3of3l4a.cs(26,16): error CS1501: No overload for method ''Add'' takes
    5 arguments

    /tmp/tmpd3of3l4a.cs(28,71): error CS1501: No overload for method ''ToLower'' takes
    0 arguments

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"\";\n        var consonants = word.ToLowerInvariant().Where(c => char.IsLetter(c)).ToList();\n\
    \        if (consonants.Count > 0) {\n            int i = 0;\n            int\
    \ j = 1;\n            while (i <= word.Length - 2 && j >= 0) {\n             \
    \   int left = consonants.IndexOf(word.Substring(i,2));\n                int right\
    \ = consonants.IndexOf(word.Substring(j,2));\n                if (left == right)\
    \ {\n                    vowels += consonants[left];\n                }\n    \
    \            i++;\n                j--;\n            }\n        }\n        return\
    \ vowels.ToLowerInvariant();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw6l0i_zv.cs(30,47): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpw6l0i_zv.cs(31,48): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char vowel =\
    \ 'a';\n        string vowels = string.Empty;\n        int index = 0;\n      \
    \  while (index < word.Length) {\n            var char = word[index];\n      \
    \      if (char == 'a' || char == 'e' || char == 'i' || char == 'o' || char ==\
    \ 'u' || char == 'y') {\n                vowels += char;\n                index++;\n\
    \            } else {\n                index++;\n                if (char == 'b'\
    \ || char == 'c' || char == 'd' || char == 'f' || char == 'g' || char == 'h' ||\
    \ char == 'j' || char == 'k' || char == 'l' || char == 'm' || char == 'n' || char\
    \ == 'p' || char == 'q' || char == 'r' || char == 's' || char == 't' || char ==\
    \ 'v' || char == 'w' || char == 'x' || char == 'z') {\n                    vowels\
    \ += char;\n                }\n            }\n        }\n        char letter =\
    \ 'a';\n        string letters = string.Empty;\n        int index1 = word.Length\
    \ - 1;\n        while (index1 >= 0) {\n            var char1 = word[index1];\n\
    \            if (char1 == 'a' || char1 == 'e' || char1 == 'i' || char1 == 'o'\
    \ || char1 == 'u' || char1 == 'y') {\n                letters += char1;\n    \
    \            index1--;\n            } else {\n                index1--;\n    \
    \            if (char1 == 'b' || char1 == 'c' || char1 == 'd' || char1 == 'f'\
    \ || char1 == 'g' || char1 == 'h' || char1 == 'j' || char1 == 'k' || char1 ==\
    \ 'l' || char1 == 'm' || char1 == 'n' || char1 == 'p' || char1 == 'q' || char1\
    \ == 'r' || char1 == 's' || char1 == 't' || char1 == 'v' || char1 == 'w' || char1\
    \ == 'x' || char1 == 'z') {\n                    letters += char1;\n         \
    \       }\n            }\n        }\n        int index2 = 0;\n        while (index2\
    \ < word.Length) {\n            var char2 = word[index2];\n            if (char2\
    \ == 'a' || char2 == 'e' || char2 == 'i' || char2 == 'o' || char2 == 'u' || char2\
    \ == 'y') {\n                vowels += char2;\n                index2++;\n   \
    \         } else {\n                index2++;\n                if (char2 == 'b'\
    \ || char2 == 'c' || char2 == 'd' || char2 == 'f' || char2 == 'g' || char2 ==\
    \ 'h' || char2 == 'j' || char2 == 'k' || char2 == 'l' || char2 == 'm' || char2\
    \ == 'n' || char2 == 'p' || char2 == 'q' || char2 == 'r' || char2 == 's' || char2\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph2knfn73.cs(28,17): error CS1002: ; expected

    /tmp/tmph2knfn73.cs(28,22): error CS1001: Identifier expected

    /tmp/tmph2knfn73.cs(29,17): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(29,32): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(29,47): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(29,62): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(29,77): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(29,92): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(30,27): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,21): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,36): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,51): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,66): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,81): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,96): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,111): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,126): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,141): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,156): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,171): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,186): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,201): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,216): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,231): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,246): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,261): error CS1525: Invalid expression term ''char''

    /tmp/tmph2knfn73.cs(34,276): error CS1525: '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"aeiouAEIOU\";\n        int i = word.Length - 1;\n        while(i >= 0 && !(vowels.Contains(word.Substring(i,\
    \ 1))))\n        {\n            i -= 1;\n        }\n        while(i < word.Length\
    \ &&\n            (!vowels.Contains(word.Substring(i, 1))) &&\n            (word.Length\
    \ > 1))\n        {\n            i += 1;\n        }\n        if(i >= word.Length)\n\
    \            return \"\";\n        var c = word.Substring(i, 1);\n        return\
    \ c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87756e1d50fc461a8de39e46e2c98072>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87756e1d50fc461a8de39e46e2c98072>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new char[] {'a','e','i','o','u', ''};\n        // Initialize current and max\
    \ to beginning and end of the string\n        char current = '\\0';\n        int\
    \ max = 0;\n        // Initialize previous position to the beginning of the string\n\
    \        int previous = 0;\n        // Initialize vowel checker variable to false\n\
    \        bool vowelCheck = false;\n        // Loop through all the characters\
    \ of the word\n        foreach(char c in word)\n        {\n            // Check\
    \ if current character is vowel \n            if (vowels.Contains(c))\n      \
    \      {\n                // If current character is vowel \n                vowelCheck\
    \ = true;\n                previous = current;\n                max = c;\n   \
    \         }\n            else\n            {\n                // If current character\
    \ is not vowel \n                if (vowelCheck == false)\n                {\n\
    \                    // If the current character is equal to max character \n\
    \                    if (c == max)\n                    {\n                  \
    \      // If current character is greater than max character \n              \
    \          if (c>max)\n                        {\n                           \
    \ // If current character is less than max character \n                      \
    \      if (c<max)\n                            {\n                           \
    \     // Set current to the max character\n                                max\
    \ = c;\n                                // Set previous to the current character\n\
    \                                previous = current;\n                       \
    \     }\n                            // If the current character is equal to max\
    \ character \n                            else\n                            {\n\
    \                                // If the current character is greater than max\
    \ character \n                                if (c<max)\n                   \
    \             {\n                                    // Set current to the max\
    \ character\n                                    max = c;\n                  \
    \                  // Set previous to the current character\n                \
    \                    previous = current;\n                                }\n\
    \                                // If the current character is less than max\
    \ character \n                                else\n                         \
    \       {\n                                    // Set vowel check to false\n \
    \                                   vowelCheck = false;\n                    \
    \            }\n                            }\n                        }\n   \
    \                     // If the current character is less than max character \n\
    \                        else\n                        {\n                   \
    \         // Set vowel check to false\n                            vowelCheck\
    \ = false;\n                        }\n                    }\n               \
    \     // If the current character is greater than max character \n           \
    \         else\n                    {\n                        // Set current\
    \ to the max character\n                        max = c;\n                   \
    \     // Set previous to the current character\n                        previous\
    \ = current;\n                    }\n                }\n                // If\
    \ the current character is not equal to max character \n                else\n\
    \                {\n                    // If the current character is greater\
    \ than max character \n                    if (c>max)\n                    {\n\
    \                        // If current character is less than max character \n\
    \                        if (c<max)\n                        {\n             \
    \               // Set current to the max character\n                        \
    \    max = c;\n                            // Set previous to the current character\n\
    \                            previous = current;\n                        }\n\
    \                        // If the current character is equal to max character\
    \ \n                        else\n                        {\n                \
    \            // If the current character is greater than max character \n    \
    \                        if (c<\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3i8qdo60.cs(24,58): error CS1011: Empty character literal

    /tmp/tmp3i8qdo60.cs(115,35): error CS1525: Invalid expression term ''}''

    /tmp/tmp3i8qdo60.cs(115,35): error CS1026: ) expected

    /tmp/tmp3i8qdo60.cs(115,35): error CS1002: ; expected

    /tmp/tmp3i8qdo60.cs(117,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3i8qdo60.cs(133,2): error CS1513: } expected

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"aeiouAEIOU\";\n        bool flag = false;\n        string temp = word;\n\
    \        string sub = \"\";\n        char[] arr = temp.ToCharArray();\n      \
    \  for (int i = 0; i < arr.Length; i++) {\n            bool vowelFound = false;\n\
    \            if (arr[i] == vowel[0]) {\n                vowelFound = true;\n \
    \               for (int j = 0; j < word.Length; j++) {\n                    if\
    \ (word.Substring(j, 1) == vowel[vowel.Length - 1 - i]) {\n                  \
    \      sub += arr[i];\n                        flag = true;\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \         if (!vowelFound) {\n                sub += arr[i];\n            }\n\
    \        }\n        if (!flag) {\n            return \"\";\n        }\n      \
    \  return sub;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9kvtzow8.cs(34,25): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new[] { 'a', 'e', 'i', 'o', 'u' };\n        var vowelCount = word.Count(i =>\
    \ vowels.Contains(i.ToString().ToLower())) / 2;\n        var consonants = word.Where(i\
    \ => i.ToString().ToLower() != \"y\" && i.ToString().ToLower() != \"u\").ToArray();\n\
    \        var minDiff = vowelCount + consonants.Sum(i => vowels.IndexOf(i) - word.IndexOf(i));\n\
    \        var vowel = vowels.FirstOrDefault(i => vowels.IndexOf(i) - word.IndexOf(i)\
    \ == minDiff);\n        return vowel != null ? vowel.ToString() : \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkm9dfe_v.cs(25,42): error CS1929: ''char[]'' does not contain a definition
    for ''Contains'' and the best extension method overload ''ParallelEnumerable.Contains<string>(ParallelQuery<string>,
    string)'' requires a receiver of type ''ParallelQuery<string>''

    /tmp/tmpkm9dfe_v.cs(27,63): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpkm9dfe_v.cs(28,55): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = \"a\";\n        string letter = word.ToLower();\n        for(int i = word.Length-1;\
    \ i >= 0; i--) {\n            if(letter[i] == 'a' || letter[i] == 'e' || letter[i]\
    \ == 'i' || letter[i] == 'o' || letter[i] == 'u') {\n                vowel = letter[i];\n\
    \                break;\n            }\n        }\n        return vowel;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprwnvytmh.cs(28,25): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new char[] { 'A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u', 'Y', 'y' };\n\
    \        string vowelsString = string.Empty;\n        foreach (char vowel in vowels)\n\
    \        {\n            if (word.Contains(vowel))\n            {\n           \
    \     vowelsString += vowel;\n            }\n        }\n\n        List<char> consonants\
    \ = word.ToCharArray().Except(vowels).ToList();\n        string consonantsString\
    \ = string.Empty;\n        foreach (char consonant in consonants)\n        {\n\
    \            if (word.Contains(consonant))\n            {\n                consonantsString\
    \ += consonant;\n            }\n        }\n        int consonantsLength = consonantsString.Length;\n\
    \        int vowelsLength = vowelsString.Length;\n        if (consonantsLength\
    \ == 0 || vowelsLength == 0)\n        {\n            return \"\";\n        }\n\
    \        string leftSide = consonantsString.Substring(0, (consonantsLength - vowelsLength));\n\
    \        string rightSide = consonantsString.Substring((consonantsLength - vowelsLength));\n\
    \        int vowelIndex = 0;\n        foreach (char vowel in vowels)\n       \
    \ {\n            if (vowelsString.Contains(vowel))\n            {\n          \
    \      vowelIndex = vowels.IndexOf(vowel);\n                break;\n         \
    \   }\n        }\n        if (vowelIndex == 0)\n        {\n            return\
    \ \"\";\n        }\n        int leftIndex = consonantsString.IndexOf(leftSide);\n\
    \        int rightIndex = consonantsString.IndexOf(rightSide);\n        if (leftIndex\
    \ == -1)\n        {\n            return \"\";\n        }\n        if (rightIndex\
    \ == -1)\n        {\n            return \"\";\n        }\n        int currentRightIndex\
    \ = rightIndex;\n        int currentLeftIndex = leftIndex;\n        bool isSameVowel\
    \ = false;\n        while (currentRightIndex != -1)\n        {\n            if\
    \ (currentRightIndex == currentLeftIndex + vowelsLength)\n            {\n    \
    \            isSameVowel = true;\n            }\n            else\n          \
    \  {\n                isSameVowel = false;\n            }\n            currentRightIndex\
    \ = consonantsString.IndexOf(rightSide, currentRightIndex + 1);\n            currentLeftIndex\
    \ = consonantsString.IndexOf(leftSide, currentLeftIndex);\n        }\n       \
    \ if (isSameVowel)\n        {\n            return vowelsString;\n        }\n \
    \       else\n        {\n            return \"\";\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3yudob3s.cs(56,37): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiouyAEIOUY\";\n        char[] chars = word.ToCharArray();\n        int\
    \ start = 0;\n        int end = 0;\n        for(int i = 0; i < chars.Length; i++)\
    \ {\n            if(chars[i] == 'e') {\n                end = i;\n           \
    \     break;\n            }\n            if(chars[i] == 'u') {\n             \
    \   start = i + 1;\n                break;\n            }\n        }\n       \
    \ if(start < 0 || end == 0 || end == chars.Length - 1) {\n            return \"\
    \";\n        }\n        char[] a = new char[end - start + 1];\n        Array.Copy(chars,\
    \ start, a, 0, end - start);\n        string res = \"\";\n        for(int i =\
    \ 0; i < a.Length; i++) {\n            if(vowels.IndexOf(a[i]) != -1) {\n    \
    \            if(i == 0) {\n                    if(a[a.Length - 1] == 'o' || a[a.Length\
    \ - 1] == 'E') {\n                        res += \"E\";\n                    }\
    \ else {\n                        res += \"O\";\n                    }\n     \
    \           } else {\n                    res += vowels.IndexOf(a[i]) + \" \"\
    ;\n                }\n                break;\n            }\n        }\n     \
    \   return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85b4196a7787450a85331042f6594db9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85b4196a7787450a85331042f6594db9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = string.Empty;\n        int vowelCount = 0;\n        int consonantCount = 0;\n\
    \        int leftConsonantCount = 0;\n        int rightConsonantCount = 0;\n \
    \       List<char> vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U' };\n        List<char> consonants = new List<char>() { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        for (int i = 0; i < word.Length - 1; i++) {\n    \
    \        char c = word[i];\n            if (consonants.Contains(c)) {\n      \
    \          consonantCount += 1;\n                if (consonantCount == 2) {\n\
    \                    leftConsonantCount += 1;\n                }\n           \
    \ } else if (vowels.Contains(c)) {\n                vowelCount += 1;\n       \
    \         if (vowelCount == 2) {\n                    rightConsonantCount += 1;\n\
    \                }\n            }\n        }\n        if (consonantCount >= 2\
    \ && rightConsonantCount >= 2 && leftConsonantCount == 2 && vowelCount == 2 &&\
    \ word[word.Length - 1] == 'e') {\n            return vowel;\n        }\n    \
    \    return string.Empty;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a4125ad05fa477c80dfc91a030e9940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a4125ad05fa477c80dfc91a030e9940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // Convert string\
    \ into chars\n        var charArray = word.ToCharArray();\n        var closestVowel\
    \ = charArray.Aggregate(\n            new StringBuilder(),\n            (sb, c)\
    \ => {\n                var currentVowel = GetCurrentVowel(c);\n             \
    \   var vowelIndexesArr = GetVowelIndexesArrFromLeftToRight(sb, currentVowel);\n\
    \                if (vowelIndexesArr.Length == 0) {\n                    return\
    \ sb.Append(c);\n                } else if (vowelIndexesArr.Length == 1) {\n \
    \                   if (vowelIndexesArr[0] < vowelIndexesArr[1]) {\n         \
    \               return sb.Append(c);\n                    }\n                }\
    \ else {\n                    var lowerChar = charArray[vowelIndexesArr[0]];\n\
    \                    var lowerCharIndex = vowelIndexesArr[0];\n              \
    \      var upperChar = charArray[vowelIndexesArr[1]];\n                    var\
    \ upperCharIndex = vowelIndexesArr[1];\n                    \n               \
    \     // Find closest vowel between lower and upper char\n                   \
    \ if (GetLowerOrUpperVowelIndex(lowerChar, upperChar) != lowerCharIndex) {\n \
    \                       return sb.Append(c);\n                    }\n\n      \
    \              // Find closest vowel between lower and upper char\n          \
    \          if (GetLowerOrUpperVowelIndex(upperChar, lowerChar) != upperCharIndex)\
    \ {\n                        return sb.Append(c);\n                    }\n\n \
    \                   // Find closest vowel between lower and upper char\n     \
    \               if (GetLowerOrUpperVowelIndex(lowerChar, upperChar) != lowerCharIndex)\
    \ {\n                        return sb.Append(c);\n                    }\n   \
    \             }\n                \n                return sb;\n            });\n\
    \        return closestVowel.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp31dmz0ds.cs(29,36): error CS0103: The name ''GetCurrentVowel'' does not
    exist in the current context

    /tmp/tmp31dmz0ds.cs(30,39): error CS0103: The name ''GetVowelIndexesArrFromLeftToRight''
    does not exist in the current context

    /tmp/tmp31dmz0ds.cs(44,25): error CS0103: The name ''GetLowerOrUpperVowelIndex''
    does not exist in the current context

    /tmp/tmp31dmz0ds.cs(49,25): error CS0103: The name ''GetLowerOrUpperVowelIndex''
    does not exist in the current context

    /tmp/tmp31dmz0ds.cs(54,25): error CS0103: The name ''GetLowerOrUpperVowelIndex''
    does not exist in the current context

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        // If no vowels\
    \ are in the string, return empty string.\n        if (string.IsNullOrEmpty(word))\
    \ return \"\";\n        // Initialize variables to store vowels\n        char[]\
    \ vowels = \"aeiou\".ToCharArray();\n        char[] vowelsEnd = new char[] {'a',\
    \ 'e', 'i', 'o', 'u'};\n        char[] consonants = \"bcdfghjklmnpqrstvwxyz\"\
    .ToCharArray();\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n\
    \        foreach (char c in word) {\n            if (!dict.ContainsKey(c)) {\n\
    \                dict.Add(c, 0);\n            }\n            dict[c]++;\n    \
    \    }\n        // If only a single vowel is found, return that vowel.\n     \
    \   if (dict.Count == 1) return vowels[(int)dict.First().Value];\n        // Otherwise,\
    \ go through the vowels and find the closest one to the right of\n        // the\
    \ first consonant.\n        foreach (char c in vowels) {\n            if (dict.ContainsKey(c)\
    \ && dict[c] > 0) break;\n        }\n        // If the closest vowel comes from\
    \ right of a consonant, return that vowel.\n        if (dict.ContainsKey(c) &&\
    \ dict[c] > 0 && c != consonants[consonants.Length - 1]) return vowels[(int)dict[c]-1];\n\
    \        // Otherwise, return an empty string.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp00gwm0tc.cs(38,37): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp00gwm0tc.cs(45,30): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp00gwm0tc.cs(45,41): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp00gwm0tc.cs(45,51): error CS0103: The name ''c'' does not exist in the
    current context

    /tmp/tmp00gwm0tc.cs(45,115): error CS0103: The name ''c'' does not exist in the
    current context

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new char[] { 'A', 'E', 'I', 'O', 'U' };\n        char[] consonants = { \n\
    \            'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        // Find the index of the\
    \ consonants array that start with the second letter of the word \n        //\
    \ and end with first letter of the word.\n        var first = word.Substring(1).FirstOrDefault();\n\
    \        int index = consonants.IndexOf(first);\n        index = consonants.IndexOf(word.Substring(0,\
    \ word.Length - 1), index + 1);\n        var firstConsonant = consonants[index];\n\
    \        // Find the index of the vowels array that start with the first letter\
    \ of the word and end \n        // with the last letter of the word.\n       \
    \ var last = word.Substring(0, word.Length - 1).LastOrDefault();\n        index\
    \ = vowels.IndexOf(last);\n        index = vowels.IndexOf(word.Substring(0, word.Length\
    \ - 1), index + 1);\n        var lastVowel = vowels[index];\n        // Return\
    \ the closest vowel based on the following conditions:\n        // If the last\
    \ vowel doesn't meet the above condition, return the last vowel.\n        // If\
    \ the first consonant doesn't meet the above condition, return the last vowel.\n\
    \        // If the last consonant doesn't meet the above condition, return the\
    \ last vowel.\n        // If the first consonant and the last consonant doesn't\
    \ meet the above condition, return the last vowel.\n        if (word.Length <\
    \ 1)\n            return string.Empty;\n        var index = word.IndexOf(firstConsonant);\n\
    \        index = word.IndexOf(lastVowel, index);\n        if (index < 0)\n   \
    \         return lastVowel;\n        index = word.IndexOf(firstConsonant, index);\n\
    \        if (index < 0)\n            return lastVowel;\n        index = word.IndexOf(lastConsonant,\
    \ index);\n        if (index < 0)\n            return lastVowel;\n        index\
    \ = word.IndexOf(firstConsonant, index);\n        if (index < 0)\n           \
    \ return lastVowel;\n        return string.Empty;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjjemg7nh.cs(30,32): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpjjemg7nh.cs(31,36): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpjjemg7nh.cs(36,24): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpjjemg7nh.cs(37,32): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    /tmp/tmpjjemg7nh.cs(46,13): error CS0128: A local variable or function named ''index''
    is already defined in this scope

    /tmp/tmpjjemg7nh.cs(49,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpjjemg7nh.cs(52,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpjjemg7nh.cs(53,30): error CS0103: The name ''lastConsonant'' does not
    exist in the current context

    /tmp/tmpjjemg7nh.cs(55,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpjjemg7nh.cs(58,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        char[] vowels\
    \ = new[] {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\n        var vowelCount\
    \ = 0;\n        var lastVowel = vowels.Last();\n        var lastVowelIndex = vowels.IndexOf(lastVowel);\n\
    \        bool isVowel = false;\n        foreach (char c in word) {\n         \
    \   if (vowels.Contains(c)) {\n                isVowel = true;\n             \
    \   if (vowelCount > 0 && vowels[vowelCount-1].Equals(c)) {\n                \
    \    vowelCount++;\n                } else\n                    vowelCount++;\n\
    \            } else isVowel = false;\n        }\n        char[] consonants = new[]\
    \ { 'B', 'D', 'F', 'G', 'J', 'K', 'M', 'N', 'P', 'R', 'S', 'T', 'V', 'W', 'X'\
    \ };\n        var vowelsLength = vowels.Length;\n        for (int i = word.Length\
    \ - 1; i > 0; i--) {\n            if (vowels.Contains(word[i])) {\n          \
    \      if (vowelCount == 0) {\n                    if (isVowel) {\n          \
    \              return word;\n                    } else {\n                  \
    \      return \"\";\n                    }\n                }\n              \
    \  if (!isVowel) {\n                    if (vowelCount >= vowelsLength - 1) {\n\
    \                        if (vowelCount == vowelsLength - 1 && vowels[vowelCount-1].Equals(word[i]))\
    \ {\n                            return word;\n                        } else\
    \ {\n                            return \"\";\n                        }\n   \
    \                 } else {\n                        if (vowelCount == 0) {\n \
    \                           if (isVowel) {\n                                return\
    \ word;\n                            } else {\n                              \
    \  return \"\";\n                            }\n                        }\n  \
    \                      if (vowelCount < vowelsLength - 1 && vowels[vowelCount+1].Equals(word[i]))\
    \ {\n                            vowelCount++;\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmv_4ch_a.cs(27,37): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowel\
    \ = String.Empty;\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        bool isVowel = false;\n        if (vowel.IndexOfAny(vowels) != -1)\
    \ {\n            return vowel;\n        }\n        foreach (char c in word) {\n\
    \            if (Char.IsUpper(c)) {\n                isVowel = true;\n       \
    \     }\n            if (!isVowel) {\n                break;\n            }\n\
    \        }\n        if (vowel.IndexOfAny(vowels) != -1) {\n            return\
    \ vowel;\n        }\n        char[] letter = word.ToCharArray();\n        int\
    \ startIndex = word.Length - 1;\n        int endIndex = word.Length;\n       \
    \ while (vowel.IndexOfAny(vowels) != -1) {\n            if (endIndex < word.Length\
    \ && Char.IsUpper(word[endIndex])) {\n                endIndex--;\n          \
    \  }\n            if (startIndex > 0 && Char.IsUpper(word[startIndex])) {\n  \
    \              startIndex--;\n            }\n            int startVowelPosition\
    \ = startIndex + vowel.IndexOfAny(vowels);\n            if (startVowelPosition\
    \ >= 0 && startVowelPosition < word.Length && Char.IsUpper(word[startVowelPosition]))\
    \ {\n                if (endIndex < word.Length && Char.IsUpper(word[endIndex]))\
    \ {\n                    endIndex--;\n                }\n                startIndex\
    \ = startVowelPosition;\n                isVowel = true;\n            }\n    \
    \        if (!isVowel) {\n                break;\n            }\n        }\n \
    \       return vowel;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"\
    a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"\
    ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"o\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff862a2c457f4c32879aa6ee55a346bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff862a2c457f4c32879aa6ee55a346bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var firstVowel\
    \ = GetVowel(word, 1);\n        var lastVowel = GetVowel(word, -1);\n        return\
    \ (firstVowel == lastVowel) ? firstVowel : \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxt15lob0.cs(24,26): error CS0103: The name ''GetVowel'' does not exist
    in the current context

    /tmp/tmpxt15lob0.cs(25,25): error CS0103: The name ''GetVowel'' does not exist
    in the current context

    '
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        StringBuilder\
    \ result = new StringBuilder();\n        int count = word.Length;\n        int\
    \ pos = word.Length - 1;\n        bool isVowel = false;\n\n        // count the\
    \ total vowel occurance\n        foreach (char c in word) {\n            if (char.IsLetter(c))\
    \ {\n                isVowel = true;\n            }\n        }\n\n        // find\
    \ the first vowel occurance\n        foreach (char c in word) {\n            if\
    \ (char.IsLetter(c)) {\n                if (c == word.ToCharArray()[pos]) {\n\
    \                    pos--;\n                }\n            }\n        }\n\n \
    \       // find the second vowel occurance\n        foreach (char c in word) {\n\
    \            if (char.IsLetter(c)) {\n                if (c == word.ToCharArray()[pos])\
    \ {\n                    pos++;\n                }\n            }\n        }\n\
    \n        // if there are two vowels in the middle of the word, return empty string\n\
    \        if (pos == 0) {\n            return \"\";\n        }\n\n        // if\
    \ there are two vowels at the beginning of the word, return empty string\n   \
    \     if (pos == 1) {\n            return \"\";\n        }\n\n        // if the\
    \ count of vowel in middle is less than the count of vowel at the beginning,\n\
    \        // return the empty string\n        if (count == (pos - 1)) {\n     \
    \       return \"\";\n        }\n\n        // If the count of vowel in the middle\
    \ is less than the count of vowel at the \n        // beginning, return the empty\
    \ string\n        if (count == (pos - 2)) {\n            return \"\";\n      \
    \  }\n\n        // calculate the difference between the count of vowel at the\
    \ begining and \n        // the count of vowel in the middle\n        int diff\
    \ = pos - 2;\n\n        // if the word is consonant + vowel, return the vowel\
    \ at the middle\n        if (isVowel) {\n            diff += 1;\n        }\n\n\
    \        // if the count of vowel is less than the count of vowel in middle, return\
    \ the \n        // vowel at the middle\n        if (diff == 1) {\n           \
    \ return word.ToCharArray()[pos];\n        }\n\n        // if the count of vowel\
    \ is less than the count of vowel in middle, return the \n        // vowel at\
    \ the middle\n        if (diff == 2) {\n            return word.ToCharArray()[pos\
    \ - 1];\n        }\n\n        // if the count of vowel is less than the count\
    \ of vowel in middle, return the \n        // vowel at the middle\n        if\
    \ (diff == 3) {\n            return word.ToCharArray()[pos - 2];\n        }\n\n\
    \        // if the count of vowel is less than the count of vowel in middle, return\
    \ the \n        // vowel at the middle\n        if (diff == 4) {\n           \
    \ return word.ToCharArray()[pos - 3];\n        }\n\n        // if the count of\
    \ vowel is less than the count of vowel in middle, return the \n        // vowel\
    \ at the middle\n        if (diff == 5\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"u\")));\n\
    \    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptu9z_u_a.cs(111,22): error CS1026: ) expected

    /tmp/tmptu9z_u_a.cs(111,22): error CS1525: Invalid expression term ''}''

    /tmp/tmptu9z_u_a.cs(111,22): error CS1002: ; expected

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        StringBuilder\
    \ vowels = new StringBuilder(\" \");\n        var vowel = word.ToCharArray().ToList().TakeWhile(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n \
    \           .SkipWhile(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' || c == 'y').Skip(1).FirstOrDefault();\n        if (vowel != null) {\n\
    \            vowels.Append(vowel);\n        }\n        return vowels.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
    yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <762a27f774e14900ade72cf6291c0976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <762a27f774e14900ade72cf6291c0976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ new HashSet<string> { \"a\",\"e\",\"i\",\"o\",\"u\" };\n        var result =\
    \ string.Empty;\n        var vowelCount = new HashSet<string> { \"a\",\"e\",\"\
    i\",\"o\",\"u\" };\n        var index = word.Length - 1;\n        do {\n     \
    \       var firstVowel = word.Substring(0, index).ToLower();\n            var\
    \ secondVowel = word.Substring(index).ToLower();\n            var countFirstVowel\
    \ = vowelCount.Contains(firstVowel) ? vowelCount.Count() : 1;\n            var\
    \ countSecondVowel = vowelCount.Contains(secondVowel) ? vowelCount.Count() : 1;\n\
    \            var countTotal = countFirstVowel + countSecondVowel;\n          \
    \  if (countTotal > 1) {\n                var diff = Math.Abs(countFirstVowel\
    \ - countSecondVowel);\n                if (vowels.Contains(firstVowel) && vowels.Contains(secondVowel)\
    \ && diff > 1) {\n                    var diffFromSecond = Math.Abs(countSecondVowel\
    \ - countFirstVowel);\n                    if (diffFromSecond < diff) {\n    \
    \                    result = firstVowel;\n                        index = index\
    \ - 1;\n                    }\n                }\n            }\n            index--;\n\
    \        } while (index >= 0);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <812630d76fb8425b8ce84648cd8861a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <812630d76fb8425b8ce84648cd8861a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        string vowels\
    \ = \"aeiouy\";\n        string vowelToCheck = vowels.Substring(word.Length -\
    \ 1);\n        string lastVowel = \"\";\n        List<char> vowelsList = vowels.ToCharArray().ToList();\n\
    \        foreach (char c in vowelsList) {\n            if (vowelsList.IndexOf(c)\
    \ > vowelsList.IndexOf(vowelToCheck)) {\n                lastVowel = c;\n    \
    \        }\n        }\n        return lastVowel;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"\
    easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"eAsy\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"most\")).Equals((\"\
    o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"quick\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"i\")));\n    Debug.Assert(GetClosestVowel((\"\
    Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"Above\")).Equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkcincqsi.cs(29,60): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    /tmp/tmpkcincqsi.cs(30,29): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static string GetClosestVowel(string word) {\n        var vowels =\
    \ \"aeiouAEIOU\";\n        var vowelCount = vowels.Count(vowel => word.StartsWith(vowel));\n\
    \        return word[word.Length - vowelCount + vowels.Count()];\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"yogurt\"\
    )).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
    u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
    most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
    \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
    i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
    Above\")).Equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoo9ngjim.cs(26,16): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976668
