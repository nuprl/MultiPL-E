name: HumanEval_7_filter_by_substring
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Filter an input list of strings only for ones that contain given\
  \ substring\n    // >>> FilterBySubstring((new List<string>()), (\"a\"))\n    //\
  \ (new List<string>())\n    // >>> FilterBySubstring((new List<string>(new string[]{(string)\"\
  abc\", (string)\"bacd\", (string)\"cde\", (string)\"array\"})), (\"a\"))\n    //\
  \ (new List<string>(new string[]{(string)\"abc\", (string)\"bacd\", (string)\"array\"\
  }))\n    public static List<string> FilterBySubstring(List<string> strings, string\
  \ substring) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>()), (\"john\")).Equals((new List<string>())));\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"xxy\", (string)\"\
  john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xxx\")).Equals((new List<string>(new\
  \ string[]{(string)\"xxx\", (string)\"xxxAAA\", (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"asd\", (string)\"aaaxxy\"\
  , (string)\"john doe\", (string)\"xxxAAA\", (string)\"xxx\"})), (\"xx\")).Equals((new\
  \ List<string>(new string[]{(string)\"xxx\", (string)\"aaaxxy\", (string)\"xxxAAA\"\
  , (string)\"xxx\"}))));\n    Debug.Assert(FilterBySubstring((new List<string>(new\
  \ string[]{(string)\"grunt\", (string)\"trumpet\", (string)\"prune\", (string)\"\
  gruesome\"})), (\"run\")).Equals((new List<string>(new string[]{(string)\"grunt\"\
  , (string)\"prune\"}))));\n    }\n\n}\n"
completions: ["        // If the substring is empty, the list is empty\n        if\
    \ (substring.Length == 0)\n            return new List<string>();\n        //\
    \ Return an empty list if the input list is empty\n        if (strings.Count ==\
    \ 0)\n            return new List<string>();\n        // Return an empty list\
    \ if the substring does not match the element at index 0\n        if (strings[0].IndexOf(substring,\
    \ StringComparison.CurrentCultureIgnoreCase) == -1)\n            return new List<string>();\n\
    \        // Return strings that contain the substring\n        return strings.Where(s\
    \ => s.IndexOf(substring, StringComparison.CurrentCultureIgnoreCase) != -1).ToList();",
  "        if (strings.Count <= 0)\n            throw new ArgumentException(\"List\
    \ must be non-empty\");\n        if (substring == null)\n            throw new\
    \ ArgumentException(\"Substring must not be null\");\n        if (substring.Length\
    \ > strings.Count)\n            throw new ArgumentException(\"Substring must not\
    \ be longer than string length\");\n\n        StringBuilder result = new StringBuilder();\n\
    \        foreach (string s in strings) {\n            if (s.Contains(substring))\n\
    \                result.Append(s);\n        }\n        return new List<string>(result.ToString().Split(new[]\
    \ { substring }, StringSplitOptions.None));", "        if (strings == null ||\
    \ string.IsNullOrEmpty(substring)) return strings;\n        return strings.Where(n\
    \ => n.IndexOf(substring, StringComparison.OrdinalIgnoreCase) != -1).ToList();",
  "        var result = new List<string>();\n        // Loop through the list to find\
    \ matching strings\n        foreach (var s in strings) {\n            // If this\
    \ string is found, then add it to our return list\n            if (s.IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) != -1) {\n                result.Add(s);\n\
    \            }\n        }\n        // Return result\n        return result;",
  '        return strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)
    >= 0).ToList();', "        var result = new List<string>();\n        foreach (var\
    \ s in strings) {\n            if (s.Contains(substring)) {\n                result.Add(s);\n\
    \            }\n        }\n        return result;", "        List<string> ret\
    \ = new List<string>();\n        foreach (string s in strings) {\n           \
    \ if (s.Contains(substring)) {\n                ret.Add(s);\n            }\n \
    \       }\n        return ret;", "        string[] substringArray = substring.ToCharArray();\n\
    \        List<string> filtered = new List<string>();\n        foreach(var str\
    \ in strings) {\n            bool found = true;\n            foreach(var c in\
    \ substringArray) {\n                if(str.IndexOf(c) == -1) {\n            \
    \        found = false;\n                    break;\n                }\n     \
    \       }\n            if(found)\n                filtered.Add(str);\n       \
    \ }\n        return filtered;", "        var filtered = new List<string>();\n\
    \        foreach (string s in strings) {\n            int pos = s.IndexOf(substring);\n\
    \            if (pos >= 0)\n                filtered.Add(s);\n        }\n    \
    \    return filtered;", "        if (string.IsNullOrEmpty(substring)) {\n    \
    \        throw new ArgumentNullException(nameof(substring));\n        }\n    \
    \    if (strings == null) {\n            throw new ArgumentNullException(nameof(strings));\n\
    \        }\n        if (strings.Count <= 0) {\n            return strings;\n \
    \       }\n        return strings.Where(string => string.Contains(substring)).ToList();",
  '        return strings.Where(x => x.Contains(substring)).ToList();', "        if\
    \ (strings == null) return null;\n        List<string> result = new List<string>();\n\
    \        foreach (string s in strings) {\n            if (s.Contains(substring))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", '        return strings.Where(x => x.IndexOf(substring, StringComparison.InvariantCultureIgnoreCase)
    >= 0).ToList();', '        return strings.Where(x => x.Contains(substring)).ToList();',
  "        List<string> result = new List<string>();\n        List<string> filter\
    \ = new List<string>();\n        foreach (string str in strings) {\n         \
    \   if (str.IndexOf(substring) != -1)\n                filter.Add(str);\n    \
    \    }\n        result = new List<string>(filter);\n        return result;", " \
    \       var list = new List<string>();\n        if (strings.Count > 0) {\n   \
    \         foreach (var s in strings) {\n                if (s.IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) >= 0)\n                    list.Add(s);\n\
    \            }\n        }\n        return list;", '        return strings.Where(s
    => s.Contains(substring)).ToList();', "        List<string> res = new List<string>();\n\
    \        strings.ForEach(str => \n            { \n                if (str.Contains(substring))\n\
    \                    res.Add(str); \n            });\n        return res;", " \
    \       // Create dictionary and reverse lookup to find all substrings\n     \
    \   Dictionary<string, List<string>> lookup = new Dictionary<string, List<string>>();\n\
    \        foreach (string s in strings) {\n            lookup.Add(s, new List<string>());\n\
    \        }\n        foreach (string s in strings) {\n            lookup[s].Add(s);\n\
    \            lookup[s.Substring(0, s.Length - substring.Length)].Add(s.Substring(0,\
    \ s.Length - substring.Length));\n        }\n        // Filter only those substrings\
    \ that contain the substring\n        return lookup[substring].SelectMany(s =>\
    \ s).Where(s => strings.Contains(s)).ToList();", "        var matches = strings.Where(s\
    \ => s.ToLower().IndexOf(substring.ToLower()) != -1).ToList();\n        return\
    \ matches;", "        Regex pattern = new Regex(substring);\n        return strings.Where(s\
    \ => pattern.IsMatch(s)).ToList();", "        var result = new List<string>();\n\
    \        foreach (string s in strings) {\n            if (s.Contains(substring))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", "        // Create a new list with filtered elements\n        var\
    \ filtered = new List<string>();\n        foreach (var s in strings) {\n     \
    \       if (s.Contains(substring)) {\n                filtered.Add(s);\n     \
    \       }\n        }\n        return filtered;", '        return strings.Where(str
    => str.Contains(substring)).ToList();', "        List<string> result = new List<string>();\n\
    \        foreach (string s in strings) {\n            if (s.Contains(substring))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", "        if (string.IsNullOrEmpty(substring)) return strings;\n  \
    \      return strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0).ToList();", "        List<string> result = new List<string>();\n     \
    \   foreach (string s in strings) {\n            bool found = false;\n       \
    \     foreach (char c in s) {\n                if (c == substring[0]) {\n    \
    \                found = true;\n                    break;\n                }\n\
    \            }\n            if (!found)\n                result.Add(s);\n    \
    \    }\n        return result;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.Contains(substring)).ToList();', '        return strings.Where(s
    => s.Contains(substring)).ToList();', '        return strings.Where(s => s.IndexOf(substring,
    StringComparison.OrdinalIgnoreCase) >= 0).ToList();', '        return strings.Where(x
    => x.Contains(substring)).ToList();', '        return strings.Where(s => s.Contains(substring)).ToList();',
  "        string filterSubstring = string.Join(\"\", substring.Where(char.IsLetter));\n\
    \        return strings.Where(s => s.Contains(filterSubstring)).ToList();", " \
    \       bool found = false;\n        bool first = true;\n        List<string>\
    \ result = new List<string>();\n        foreach (string s in strings) {\n    \
    \        if (first) {\n                first = false;\n                if (s.StartsWith(substring))\
    \ {\n                    result.Add(s);\n                    found = true;\n \
    \               }\n            } else {\n                if (s.EndsWith(substring))\
    \ {\n                    result.Add(s);\n                    found = true;\n \
    \               }\n            }\n        }\n        if (found) {\n          \
    \  return result;\n        } else {\n            return strings;\n        }",
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(a => a.Contains(substring)).ToList();', "        var stringList\
    \ = strings.ToList();\n        return stringList.Where(x => x.Contains(substring)).ToList();",
  "        if (strings == null || substring == null) {\n            return null;\n\
    \        }\n\n        List<string> filtered = new List<string>();\n        foreach\
    \ (string s in strings) {\n            if (s.Contains(substring)) {\n        \
    \        filtered.Add(s);\n            }\n        }\n\n        return filtered;",
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase) >=
    0).ToList();', '        return strings.Where(x => x.IndexOf(substring, StringComparison.OrdinalIgnoreCase)
    != -1).ToList();', '        return strings.Where(str => str.Contains(substring)).ToList();',
  "        List<string> result = new List<string>();\n        foreach (string item\
    \ in strings) {\n            if (item.Contains(substring)) {\n               \
    \ result.Add(item);\n            }\n        }\n        return result;", "    \
    \    Regex regex = new Regex(substring, RegexOptions.IgnoreCase);\n        return\
    \ regex.Matches(strings).Cast<Match>().Select(x => x.Value).ToList();", "    \
    \    // filter out any empty strings\n        string result = strings.Where(x\
    \ => x.Contains(substring)).FirstOrDefault();\n        if (result == null)\n \
    \           return new List<string>();\n        else\n            return new List<string>()\
    \ { result };", "        List<string> filtered = new List<string>();\n       \
    \ foreach (var s in strings) {\n            if (s.Contains(substring)) {\n   \
    \             filtered.Add(s);\n            }\n        }\n        return filtered;",
  '        return strings.Where(x => x.IndexOf(substring, StringComparison.CurrentCultureIgnoreCase)
    > -1).ToList();', "        if (strings == null || substring == null) {\n     \
    \       return strings;\n        }\n\n        List<string> filteredStrings = new\
    \ List<string>();\n        foreach (string string in strings) {\n            if\
    \ (string.Contains(substring)) {\n                filteredStrings.Add(string);\n\
    \            }\n        }\n\n        return filteredStrings;", "        var result\
    \ = new List<string>();\n        foreach (var s in strings) {\n            if\
    \ (s.Contains(substring))\n                result.Add(s);\n        }\n       \
    \ return result;", '        return strings.Where(n => n.Contains(substring)).ToList();',
  "        List<string> list = new List<string>();\n        foreach (string str in\
    \ strings) {\n            list.Add(str);\n        }\n        list = list.Where(x\
    \ => x.Contains(substring)).ToList();\n        return list;", '        return
    strings.Where(s => s.Contains(substring)).ToList();', "        // Create a dictionary\
    \ that will hold unique substrings and their counts\n        Dictionary<string,\
    \ int> substringCount = new Dictionary<string, int>();\n        foreach (string\
    \ string in strings) {\n            foreach (string substr in string.Split(' '))\n\
    \                if (substr.Equals(substring)) {\n                    if (!substringCount.ContainsKey(substr))\n\
    \                        substringCount.Add(substr, 1);\n                    else\n\
    \                        substringCount[substr]++;\n                }\n      \
    \  }\n        // Filter the original list of strings using our dictionary\n  \
    \      List<string> filtered = new List<string>();\n        foreach (string string\
    \ in strings) {\n            foreach (string substr in string.Split(' '))\n  \
    \              if (substr.Equals(substring) && substringCount.ContainsKey(substr))\n\
    \                    filtered.Add(string);\n        }\n        return filtered;",
  "        List<string> list = new List<string>();\n        foreach(string s in strings)\n\
    \            if(s.IndexOf(substring, StringComparison.CurrentCultureIgnoreCase)\
    \ != -1)\n                list.Add(s);\n        return list;", "        if (strings\
    \ == null || string.IsNullOrEmpty(substring))\n            return strings;\n \
    \       return strings.Where(s => s.IndexOf(substring, StringComparison.InvariantCultureIgnoreCase)\
    \ >= 0).ToList();", "        List<string> matches = new List<string>();\n    \
    \    foreach (string s in strings) {\n            if (s.Contains(substring)) matches.Add(s);\n\
    \        }\n        return matches;", '        return strings.Where(s => s.IndexOf(substring)
    != -1).ToList();', "        string[] subList = substring.ToArray();\n        return\
    \ strings.Where(s => s.IndexOfAny(subList) != -1).ToList();", "        var results\
    \ = new List<string>();\n        foreach(string s in strings) {\n            if(s.Contains(substring))\
    \ {\n                results.Add(s);\n            }\n        }\n        return\
    \ results;", "        var filtered = new List<string>();\n        foreach (string\
    \ s in strings) {\n            if (s.Contains(substring))\n                filtered.Add(s);\n\
    \        }\n        return filtered;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(str => str.Contains(substring)).ToList();', "    \
    \    List<string> filtered = new List<string>();\n        foreach (string s in\
    \ strings) {\n            if (s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0)\n                filtered.Add(s);\n        }\n        return filtered;",
  "        if (string.IsNullOrEmpty(substring)) throw new ArgumentNullException(\"\
    substring\");\n        List<string> result = new List<string>();\n        foreach\
    \ (string s in strings) {\n            if (s.IndexOf(substring, 0, substring.Length)\
    \ != -1) {\n                result.Add(s);\n            }\n        }\n       \
    \ return result;", "        var filtered = new List<string>();\n        strings.ForEach(x\
    \ =>\n        {\n            if (x.Contains(substring))\n            {\n     \
    \           filtered.Add(x);\n            }\n        });\n        return filtered;",
  "        var filterdStrings = new List<string>();\n        foreach (var str in strings)\
    \ {\n            var index = str.IndexOf(substring);\n            if (index >=\
    \ 0) {\n                filterdStrings.Add(str);\n            }\n        }\n \
    \       return filterdStrings;", "        if (substring == null) throw new ArgumentNullException(\"\
    substring\");\n        if (strings == null) throw new ArgumentNullException(\"\
    strings\");\n        if (strings.Count == 0) throw new ArgumentOutOfRangeException(\"\
    strings\");\n        if (substring.Length == 0) {\n            return strings;\n\
    \        }\n        // Use HashSet<T> to avoid the quadratic time for .IndexOf(substring,\
    \ startIndex).\n        HashSet<string> subs = new HashSet<string>(substring);\n\
    \        List<string> result = new List<string>();\n        foreach (string s\
    \ in strings) {\n            if (subs.Contains(s)) {\n                result.Add(s);\n\
    \            }\n        }\n        return result;", "        List<string> filtered\
    \ = new List<string>();\n        bool containsSubstring = false;\n        for\
    \ (int i = 0; i < strings.Count; i++) {\n            if (strings[i].Contains(substring))\
    \ {\n                filtered.Add(strings[i]);\n                containsSubstring\
    \ = true;\n            }\n        }\n        if (!containsSubstring) filtered.Add(\"\
    \");\n        return filtered;", '        return strings.Where(x => x.Contains(substring)).ToList();',
  '        return strings.Where(x => x.Contains(substring)).ToList();', "        List<string>\
    \ filteredStrings = new List<string>();\n        foreach (string s in strings)\
    \ {\n            if (s.Contains(substring)) {\n                filteredStrings.Add(s);\n\
    \            }\n        }\n        return filteredStrings;", "        foreach\
    \ (string s in strings) {\n            if (s.ToLower().Contains(substring.ToLower()))\
    \ {\n                yield return s;\n            }\n        }", "        List<string>\
    \ res = new List<string>();\n        foreach (var item in strings) {\n       \
    \     if (item.Contains(substring)) {\n                res.Add(item);\n      \
    \      }\n        }\n        return res;", "        if (strings == null || substring\
    \ == null)\n            throw new ArgumentNullException();\n        var result\
    \ = new List<string>();\n        foreach (var s in strings)\n            if (s.Contains(substring))\n\
    \                result.Add(s);\n        return result;", "        var result\
    \ = new List<string>();\n        strings.Where(s => s.IndexOf(substring, StringComparison.InvariantCultureIgnoreCase)\
    \ >= 0)\n              .ToList()\n              .ForEach(s => result.Add(s));\n\
    \        return result;", "        if (string.IsNullOrEmpty(substring)) {\n  \
    \          return new List<string>();\n        }\n        return strings.Where(x\
    \ => x.IndexOf(substring, StringComparison.OrdinalIgnoreCase) >= 0).ToList();",
  '        return strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)
    >= 0).ToList();', "        var newList = new List<string>();\n        foreach(var\
    \ s in strings) {\n            if (s.Contains(substring)) newList.Add(s);\n  \
    \      }\n        return newList;", "        List<string> filtered = new List<string>();\n\
    \        if (strings == null || string.IsNullOrEmpty(substring)) {\n         \
    \   return filtered;\n        }\n        foreach (string item in strings) {\n\
    \            if (item.Contains(substring)) {\n                filtered.Add(item);\n\
    \            }\n        }\n        return filtered;", "        // If substring\
    \ not found, return input\n        if (substring == null) return strings;\n  \
    \      // If substring found, remove from input strings\n        if (substring\
    \ in strings) strings.Remove(substring);\n        // Return filtered string\n\
    \        return strings;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  "        var list = new List<string>();\n        foreach (var s in strings) {\n\
    \            if (s.Contains(substring)) {\n                list.Add(s);\n    \
    \        }\n        }\n        return list;", "        List<string> filtered =\
    \ new List<string>();\n        foreach (string s in strings) {\n            if\
    \ (s.IndexOf(substring, StringComparison.InvariantCultureIgnoreCase) > 0) {\n\
    \                filtered.Add(s);\n            }\n        }\n        return filtered;",
  '        return strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)
    >= 0).ToList();', '        return strings.Where(x => x.Contains(substring)).ToList();',
  "        List<string> output = new List<string>();\n        foreach (string s in\
    \ strings) {\n            if (s.Contains(substring)) {\n                output.Add(s);\n\
    \            }\n        }\n        return output;", "        List<string> filtered\
    \ = new List<string>();\n        foreach (string s in strings) {\n           \
    \ if (s.Contains(substring)) {\n                filtered.Add(s);\n           \
    \ }\n        }\n        return filtered;", "        List<string> result = new\
    \ List<string>();\n        foreach (string item in strings) {\n            if\
    \ (item.Contains(substring)) {\n                result.Add(item);\n          \
    \  }\n        }\n        return result;", '        return strings.Where(str =>
    str.IndexOf(substring, StringComparison.OrdinalIgnoreCase) >= 0).ToList();', " \
    \       if (strings == null) return null;\n        if (substring==null || strings.Count\
    \ == 0) return strings;\n        if (substring == \"\") return strings;\n    \
    \    if (substring.Length == 0) {\n            return strings;\n        }\n  \
    \      if (substring.IndexOfAny(new char[] { '*', '?' }) > -1) {\n           \
    \ return strings;\n        }\n        var filteredList = new List<string>();\n\
    \        foreach (var s in strings) {\n            if (s.Contains(substring))\
    \ {\n                filteredList.Add(s);\n            }\n        }\n        return\
    \ filteredList;", "        if (strings == null)\n            throw new ArgumentNullException(\"\
    strings\", \"strings cannot be null\");\n        if (substring == null)\n    \
    \        throw new ArgumentNullException(\"substring\", \"substring cannot be\
    \ null\");\n        if (substring.length == 0)\n            throw new ArgumentException(\"\
    substring cannot be empty\", \"substring\");\n        var result = new List<string>();\n\
    \        foreach (var item in strings) {\n            if (item.IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) > -1)\n                result.Add(item);\n\
    \        }\n        return result;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  "        if (strings == null) throw new ArgumentNullException(nameof(strings));\n\
    \        if (substring == null) throw new ArgumentNullException(nameof(substring));\n\
    \n        // Reverse string list for efficient search of first match\n       \
    \ // If not reversed the substring will be matched with first string in input\
    \ list\n        // If found the search algorithm would terminate before looking\
    \ at other strings\n        List<string> reversedStrings = strings.Reverse().ToList();\n\
    \        int index = reversedStrings.BinarySearch(substring);\n        if (index\
    \ >= 0) return strings.FindIndex(s => s.Equals(substring)).Take(index).ToList();\n\
    \        return null;", "        var filtered = new List<string>();\n        foreach\
    \ (var str in strings) {\n            if (str.ToLower().Contains(substring.ToLower()))\
    \ {\n                filtered.Add(str);\n            }\n        }\n        return\
    \ filtered;", "        string[] filteredStrings = strings.Where(x => x.Contains(substring)).ToArray();\n\
    \        return new List<string>(filteredStrings);", "        if (strings == null\
    \ || substring==null) {\n            throw new ArgumentNullException(\"strings\"\
    , \"strings must be not null and substring must be not null\");\n        }\n\n\
    \        List<string> filteredList = new List<string>();\n\n        foreach (string\
    \ str in strings) {\n            if (str.Contains(substring))\n              \
    \  filteredList.Add(str);\n        }\n\n        return filteredList;", "     \
    \   if (strings == null || substring == null) return strings;\n        List<string>\
    \ result = new List<string>();\n        foreach (string s in strings) {\n    \
    \        if (s.Contains(substring)) result.Add(s);\n        }\n        return\
    \ result;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  "        string[] items = substring.GetUppercaseChars();\n        return strings.Where(s\
    \ => items.Any(i => s.Contains(i))).ToList();", '        return strings.Where(s
    => s.Contains(substring)).ToList();', "        var result = new List<string>();\n\
    \        foreach(var s in strings) {\n            if (s.IndexOf(substring) > -1)\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  "        var filteredList = strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0);\n        if (filteredList.Count > 0) {\n            return filteredList;\n\
    \        } else {\n            return new List<string>();\n        }", "     \
    \   List<string> ret = new List<string>();\n        foreach(string s in strings)\
    \ {\n            if(s.Contains(substring)) {\n                ret.Add(s);\n  \
    \          }\n        }\n        return ret;", '        return strings.Where(s
    => s.IndexOf(substring, StringComparison.InvariantCultureIgnoreCase) >= 0).ToList();',
  '        return strings.Where(n => n.Contains(substring)).ToList();', "        List<string>\
    \ output = new List<string>();\n        string regexPattern = string.Format(\"\
    ^{0}.*$\", substring);\n        foreach (string s in strings) {\n            if\
    \ (Regex.IsMatch(s.Trim(), regexPattern)) {\n                output.Add(s);\n\
    \            }\n        }\n        return output;", "        var list = new List<string>();\n\
    \        foreach (string s in strings) {\n            if (s.Contains(substring))\
    \ {\n                list.Add(s);\n            }\n        }\n        return list;",
  '        return strings.Where(x => x.Contains(substring)).ToList();', '        return
    strings.Where(x => x.Contains(substring)).ToList();', "        var filteredList\
    \ = new List<string>();\n        foreach (string str in strings) {\n         \
    \   if (str.Contains(substring))\n                filteredList.Add(str);\n   \
    \     }\n        return filteredList;", "        List<string> filtered = new List<string>();\n\
    \        foreach (var s in strings) {\n            if (s.Contains(substring))\
    \ {\n                filtered.Add(s);\n            }\n        }\n        return\
    \ filtered;", "        var result = new List<string>();\n        foreach (var\
    \ str in strings) {\n            if (str.Contains(substring)) {\n            \
    \    result.Add(str);\n            }\n        }\n        return result;", '        return
    strings.Where(x => x.Contains(substring)).ToList();', "        Debug.Assert(substring\
    \ != null);\n        return strings.Where(x => x.Contains(substring)).ToList();",
  "        var filteredList = new List<string>();\n        foreach (string s in strings)\
    \ {\n            if (s.Contains(substring)) {\n                filteredList.Add(s);\n\
    \            }\n        }\n        return filteredList;", "        var stringArray\
    \ = strings.ToArray();\n        // Find the substring in the strings\n       \
    \ var match = stringArray.FirstOrDefault(s => s.IndexOf(substring) != -1);\n \
    \       // If the substring isn't found\n        if (match == null) {\n      \
    \      return new List<string>();\n        } else {\n            // The new list\
    \ contains only those strings that contain substring\n            return strings.Where(s\
    \ => s.IndexOf(substring) != -1).ToList();\n        }", '        return strings.Where(string
    => string.Contains(substring)).ToList();', '        return strings.Where(s =>
    s.Contains(substring)).ToList();', "        return strings.Where(s => s.IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) >= 0)\n                      .ToList();",
  '        return strings.Where(s => s.Contains(substring)).ToList();', "        if\
    \ (strings == null || string.IsNullOrEmpty(substring))\n            return strings;\n\
    \        return strings.Where(x => x.Contains(substring)).ToList();", "      \
    \  List<string> result = new List<string>();\n\n        foreach (string s in strings)\
    \ {\n            if (s.Contains(substring)) {\n                result.Add(s);\n\
    \            }\n        }\n\n        return result;", '        return strings.Where(x
    => x.Contains(substring)).ToList();', '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(string => string.Contains(substring)).ToList();',
  '        return strings.Where(x => x.IndexOf(substring, StringComparison.CurrentCultureIgnoreCase)
    >= 0).ToList();', "        if (string.IsNullOrEmpty(strings)) return strings;\n\
    \        string[] filteredStrings = new string[strings.Count];\n        for (int\
    \ i = 0; i < strings.Count; i++) {\n            if (strings[i].Contains(substring))\
    \ {\n                filteredStrings[i] = strings[i];\n            }\n       \
    \ }\n        return (new List<string>(filteredStrings));", "        // Sort input\
    \ strings so we always return the first input string that contains the given substring\n\
    \        strings.Sort();\n\n        // Iterate over the input strings until we\
    \ find the first string that contains the given substring\n        foreach (var\
    \ s in strings) {\n            // If the given substring is found, return this\
    \ string\n            if (substring.Equals(s, StringComparison.InvariantCultureIgnoreCase))\
    \ {\n                return strings;\n            }\n        }\n\n        // If\
    \ the given substring is not found, return an empty list with the original input\
    \ string\n        return strings.Where(x => x.Contains(substring, StringComparison.InvariantCultureIgnoreCase)).Select(x\
    \ => x).ToList();", '        return strings.Where(x => x.Contains(substring)).ToList();',
  "        if (strings == null)\n            return null;\n        if (!string.IsNullOrEmpty(substring))\n\
    \            strings = strings.Where(s => s.Contains(substring)).ToList();\n \
    \       return strings;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(i => i.Contains(substring)).ToList();', '        return
    strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase) >=
    0).ToList();', "        var filtered = strings.Where(s => s.IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) >= 0).ToList();\n        if (string.IsNullOrEmpty(substring))\n\
    \            return strings;\n        if (!filtered.Any())\n            return\
    \ strings;\n        return filtered;", "        // Convert string array to list\n\
    \        List<string> sublist = new List<string>(substring);\n        List<string>\
    \ result = new List<string>();\n        foreach (string item in strings) {\n \
    \           // If string contains substring\n            if (sublist.Any(a =>\
    \ item.Contains(a))) result.Add(item);\n        }\n        return result;", '        return
    strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase) >=
    0).ToList();', "        List<string> filtered = new List<string>();\n        foreach\
    \ (string s in strings) {\n            if (s.Contains(substring)) {\n        \
    \        filtered.Add(s);\n            }\n        }\n        return filtered;",
  "        if (substring == null)\n            return strings;\n        List<string>\
    \ result = new List<string>();\n        if (strings.Count == 0)\n            return\
    \ result;\n        foreach (string s in strings) {\n            if (s.IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) >= 0)\n                result.Add(s);\n\
    \        }\n        return result;", "        // TODO: Make this recursive to\
    \ avoid calling FilterBySubstring with null strings\n        return strings.Where(x\
    \ => x.Contains(substring)).ToList();", "        var result = new List<string>();\n\
    \        foreach(var s in strings) {\n            if(s.Contains(substring))\n\
    \                result.Add(s);\n        }\n        return result;", "       \
    \ // Filter strings\n        return strings.Where(s => s.Contains(substring)).ToList();",
  "        var result = new List<string>();\n        foreach (var s in strings) {\n\
    \            if (s.Contains(substring)) {\n                result.Add(s);\n  \
    \          }\n        }\n        return result;", "        List<string> filtered\
    \ = new List<string>();\n        foreach (string s in strings) {\n           \
    \ if (s.ToLower().Contains(substring)) {\n                filtered.Add(s);\n \
    \           }\n        }\n        return filtered;", "        if (strings == null)\
    \ throw new ArgumentNullException(\"strings\");\n        if (substring == null)\
    \ throw new ArgumentNullException(\"substring\");\n        if (substring.Length\
    \ == 0) throw new ArgumentException(\"Empty substring not allowed.\");\n\n   \
    \     // The strings where we store the result\n        List<string> result =\
    \ new List<string>();\n\n        foreach (string s in strings)\n            if\
    \ (s.Contains(substring)) result.Add(s);\n        return result;", '        return
    strings.Where(s => s.Contains(substring)).ToList();', '        return strings.Where(s
    => s.Contains(substring)).ToList();', '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', "        foreach\
    \ (string s in strings) {\n            if (substring.IndexOf(s) >= 0) {\n    \
    \            return strings;\n            }\n        }\n        return null;",
  '        return strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)
    >= 0).ToList();', "        if (string.IsNullOrEmpty(substring))\n            return\
    \ strings;\n        return strings.Where(s => s.Contains(substring)).ToList();",
  "        // If the substring is not found return an empty list\n        if (substring\
    \ == null || substring == \"\") {\n            return new List<string>();\n  \
    \      }\n        return strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0).ToList();", '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase) >=
    0).ToList();', '        return strings.Where(x => x.Contains(substring)).ToList();',
  '        return strings.Where(s => s.Contains(substring)).ToList();', '        return
    strings.Where(s => s.Contains(substring)).ToList();', '        return strings.Where(n
    => n.Contains(substring)).ToList();', "        // TODO: Implement me\n       \
    \ return strings.Where(s => s.Contains(substring)).ToList();", "        if (string.IsNullOrEmpty(substring))\
    \ {\n            return strings;\n        }\n        return strings.Where(s =>\
    \ s.Contains(substring)).ToList();", '        return strings.Where(s => s.Contains(substring)).ToList();',
  "        List<string> result = new List<string>();\n        bool found = false;\n\
    \        foreach (string s in strings) {\n            if (s.Contains(substring))\
    \ {\n                found = true;\n                result.Add(s);\n         \
    \   }\n        }\n        if (!found) return result;\n        if (result.Count\
    \ == 0) return null;\n        return result;", '        return strings.Where(x
    => x.Contains(substring)).ToList();', "        string allSubstrings = new StringBuilder();\n\
    \        for (int i = 0; i < strings.Count; i++) {\n            allSubstrings\
    \ = (allSubstrings + strings[i] + Environment.NewLine);\n        }\n        Regex\
    \ regex = new Regex(\".*\" + substring + \".*\");\n        List<string> filteredList\
    \ = new List<string>();\n        foreach (string s in allSubstrings.Split(new\
    \ string[] { Environment.NewLine }, StringSplitOptions.None)) {\n            if\
    \ (regex.IsMatch(s)) {\n                filteredList.Add(s);\n            }\n\
    \        }\n        return filteredList;", '        return strings.Where(s =>
    s.Contains(substring)).ToList();', "        var result = new List<string>();\n\
    \        foreach (var s in strings) {\n            if (s.Contains(substring))\
    \ result.Add(s);\n        }\n        return result;", '        return strings.Where(s
    => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase) >= 0).ToList();',
  "        List<string> result = new List<string>();\n        List<string> filtered\
    \ = new List<string>();\n        foreach (string s in strings) {\n           \
    \ if (s.Contains(substring))\n                filtered.Add(s);\n        }\n  \
    \      foreach (string s in filtered) {\n            Console.WriteLine(s);\n \
    \           result.Add(s);\n        }\n        return result;", "        if (strings\
    \ == null || string.IsNullOrEmpty(substring)) {\n            return strings;\n\
    \        }\n\n        var result = new List<string>();\n\n        foreach (var\
    \ s in strings) {\n            if (s.IndexOf(substring, 0, substring.Length) !=\
    \ -1) {\n                result.Add(s);\n            }\n        }\n\n        return\
    \ result;", "        string[] temp = strings.ToArray();\n        return temp.Where(x\
    \ => x.Contains(substring)).ToList();", "        var filtered = new List<string>();\n\
    \        foreach (string s in strings)\n        {\n            if (s.Contains(substring))\n\
    \            {\n                filtered.Add(s);\n            }\n        }\n \
    \       return filtered;", "        List<string> output = new List<string>();\n\
    \        foreach(string s in strings) {\n            if(s.Contains(substring))\
    \ {\n                output.Add(s);\n            }\n        }\n        return\
    \ output;", "        var filtered = strings.Where(s => s.Contains(substring)).ToList();\n\
    \        Debug.Assert(filtered.Count > 0, \"No matching strings found\");\n  \
    \      return filtered;", "        string[] parts = string.Split(',', substring);\n\
    \        List<string> filter = new List<string>();\n        foreach (string s\
    \ in strings) {\n            bool found = false;\n            foreach (string\
    \ part in parts) {\n                if (s.Contains(part)) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (found) filter.Add(s);\n        }\n        return filter;",
  "        List<string> filtered = new List<string>();\n        foreach (string s\
    \ in strings) {\n            if (s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0) {\n                filtered.Add(s);\n            }\n        }\n      \
    \  return filtered;", "        var stringEnumerator = strings.GetEnumerator();\n\
    \        var found = false;\n        while (stringEnumerator.MoveNext()) {\n \
    \           var currentString = stringEnumerator.Current;\n            if (currentString.Contains(substring))\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            return strings;\n        } else {\n\
    \            return new List<string>();\n        }", '        return strings.Where(s
    => s.Contains(substring)).ToList();', '        return strings.Where(x => x.Contains(substring)).ToList();',
  "        // Substring is not in any string, return the original list\n        if\
    \ (string.IsNullOrEmpty(substring)) return strings;\n\n        // Only process\
    \ strings containing substring\n        var filteredStrings = strings.Where(s\
    \ => s.Contains(substring)).ToList();\n        if (filteredStrings.Count > 0)\
    \ {\n            Console.WriteLine(\"{0} {1}\", substring, filteredStrings.Count);\n\
    \        }\n\n        // Return filtered list\n        return filteredStrings;",
  "        List<string> result = new List<string>();\n\n        // Start with any\
    \ string\n        result.AddRange(strings);\n\n        foreach (string string\
    \ in strings) {\n            if (string.Contains(substring)) {\n             \
    \   // String is one we want\n                result.Add(string);\n          \
    \      // Remove the string from the list so we don't add it again later\n   \
    \             strings.Remove(string);\n            }\n        }\n\n        return\
    \ result;", "        if (substring.Length == 0) {\n            return strings;\n\
    \        }\n\n        List<string> filtered = new List<string>();\n        foreach\
    \ (string s in strings) {\n            if (s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0)\n                filtered.Add(s);\n        }\n        return filtered;",
  "        List<string> filtered = new List<string>();\n        foreach (string s\
    \ in strings) {\n            if (s.Contains(substring)) {\n                filtered.Add(s);\n\
    \            }\n        }\n        return filtered;", '        return strings.Where(s
    => s.Contains(substring)).ToList();', '        return strings.Where(s => s.IndexOf(substring,
    StringComparison.OrdinalIgnoreCase) >= 0).ToList();', "        List<string> result\
    \ = new List<string>();\n        foreach (string s in strings) {\n           \
    \ if (s.Contains(substring))\n                result.Add(s);\n        }\n    \
    \    return result;", "        string pattern = substring.ToLower();\n       \
    \ return strings.Where(s => s.IndexOf(pattern) >= 0).ToList();", "        var\
    \ filteredStrings = new List<string>();\n        foreach (var str in strings)\
    \ {\n            if (str.Contains(substring)) {\n                filteredStrings.Add(str);\n\
    \            }\n        }\n        return filteredStrings;", "        List<string>\
    \ result = new List<string>();\n        bool found = false;\n        for (int\
    \ i = 0; i < strings.Count; i++) {\n            if (strings[i].IndexOf(substring)\
    \ != -1) {\n                found = true;\n                result.Add(strings[i]);\n\
    \            }\n        }\n        if (found == false)\n            result.Add(substring);\n\
    \        return result;", '        return strings.Where(s => s.Contains(substring)).ToList();',
  '        return strings.Where(x => x.Contains(substring)).ToList();', "        //\
    \ TODO: Implement filter\n        return null;", "        var result = new List<string>();\n\
    \        foreach (string s in strings) {\n            if (s.Contains(substring))\
    \ {\n                result.Add(s);\n            }\n        }\n        return\
    \ result;", "        List<string> filtered = new List<string>();\n        foreach\
    \ (string s in strings) {\n            if (s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0)\n                filtered.Add(s);\n        }\n        return filtered;",
  "        List<string> result = new List<string>();\n        foreach (string s in\
    \ strings) {\n            if (s.Contains(substring)) result.Add(s);\n        }\n\
    \        return result;", '        return strings.Where(x => x.Contains(substring)).ToList();',
  '        return strings.Where(s => s.IndexOf(substring, StringComparison.OrdinalIgnoreCase)
    >= 0).ToList();']
stop_tokens:
- "\n    }\n"
