name: HumanEval_117_select_words
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns a list of all words from string\
  \ s that contain exactly \n    // n consonants, in order these words appear in the\
  \ string s.\n    // If the string s is empty then the function should return an\
  \ empty list.\n    // Note: you may assume the input string contains only letters\
  \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
  ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>\
  \ SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
  \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
  \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
  Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n\
  \    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"\
  Uncle\"}))\n    public static List<string> SelectWords(string s, long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
  Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
  little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
  \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
  simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
  Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
  \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
  \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
  \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
  \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
  f\"}))));\n    }\n\n}\n"
completions: ["        // Your code here\n        int counter = 0;\n        List<string>\
    \ list = new List<string>();\n        foreach (char c in s)\n        {\n     \
    \       if (char.IsLetter(c))\n            {\n                counter++;\n   \
    \             if (counter == n)\n                {\n                    list.Add(c);\n\
    \                }\n            }\n        }\n        return list;", "       \
    \ if (string.IsNullOrEmpty(s))\n            return new List<string>();\n     \
    \   Debug.Assert(n > 0);\n        if (n == 1) {\n            return new List<string>(new\
    \ string[] { s });\n        }\n        int firstIndex = s.IndexOfAny(new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' });\n        if (firstIndex == -1)\n            return\
    \ new List<string>();\n        int lastIndex = s.LastIndexOfAny(new char[] { 'a',\
    \ 'e', 'i', 'o', 'u' });\n        if (lastIndex == -1)\n            return new\
    \ List<string>();\n        List<string> ret = new List<string>();\n        Debug.Assert(firstIndex\
    \ <= lastIndex);\n        Debug.Assert(firstIndex < lastIndex);\n        Debug.Assert(firstIndex\
    \ >= 1);\n        Debug.Assert(lastIndex >= 1);\n        Debug.Assert(lastIndex\
    \ <= s.Length);\n        for (int i = firstIndex; i <= lastIndex; i++) {\n   \
    \         Debug.Assert(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u');\n            if (i < firstIndex) {\n                continue;\n\
    \            }\n            if (i == firstIndex) {\n                for (int j\
    \ = firstIndex; j < i; j++) {\n                    Debug.Assert(s[j] != 'a' &&\
    \ s[j] != 'e' && s[j] != 'i' && s[j] != 'o' && s[j] != 'u');\n               \
    \     if (j < firstIndex) {\n                        continue;\n             \
    \       }\n                    if (s[j] == s[i]) {\n                        ret.Add((new\
    \ string(s.Substring(i, j + 1 - i)))));\n                    }\n             \
    \   }\n            }\n            if (i == lastIndex) {\n                for (int\
    \ j = lastIndex; j <= lastIndex; j++) {\n                    Debug.Assert(s[j]\
    \ != 'a' && s[j] != 'e' && s[j] != 'i' && s[j] != 'o' && s[j] != 'u');\n     \
    \               if (j < lastIndex) {\n                        continue;\n    \
    \                }\n                    if (s[j] == s[i]) {\n                \
    \        ret.Add((new string(s.Substring(i, j + 1 - i)))));\n                \
    \    }\n                }\n            }\n        }\n        return ret;", " \
    \       // TODO: your implementation goes here\n        var list = new List<string>();\n\
    \        int start = 0;\n        long count = s.Count(c => c < 'a' || c > 'z');\n\
    \        while (n-- > 0) {\n            list.AddRange(s.Substring(start, s.Length\
    \ - start).Split(new[] {' ', '\\n', '\\t'}, StringSplitOptions.RemoveEmptyEntries));\n\
    \            start += list.Count - 1;\n        }\n        return list.Where(c\
    \ => Regex.IsMatch(c, @\"^[b-df-hj-np-tv-z]+$\")).ToList();", "        // (1)\
    \ The most interesting part.\n        // The list returned should contain all\
    \ the words from s containing exactly n \n        // consonants, in order these\
    \ words appear in the string s.\n        long maxConsonants = (long)s.Length -\
    \ 1;\n        List<string> result = new List<string>();\n        if (maxConsonants\
    \ < n)\n            return result;\n        \n        // (2) This part is where\
    \ we can use regexp to solve the problem.\n        Regex regex = new Regex(@\"\
    ^[^aeiouy]+$\", RegexOptions.Compiled);\n        MatchCollection matches = regex.Matches(s);\n\
    \        if (matches == null || matches.Count < n)\n            return result;\n\
    \        \n        // (3) This part is what makes it interesting.\n        string\
    \ word = matches[0].Value;\n        char[] chars = word.ToCharArray();\n     \
    \   for (int i = 0; i < chars.Length; i++)\n            if (chars[i] != 'a' &&\
    \ chars[i] != 'e' && chars[i] != 'i' && chars[i] != 'o' &&\n                chars[i]\
    \ != 'u')\n                result.Add(word.Substring(0, i) + word.Substring(i\
    \ + 1, word.Length - i));\n        return result;", "        int[] letters = new\
    \ int[26];\n        for (int i = 0; i < s.Length; i++) {\n            letters[(s[i]\
    \ - 'a')]++;\n        }\n\n        var list = new List<string>();\n        if\
    \ (s.Length > 0) {\n            var sortedLetters = new int[26];\n           \
    \ for (int i = 0; i < 26; i++) {\n                sortedLetters[i] = letters.Where(i\
    \ => i < i).Sum();\n            }\n            Array.Sort(sortedLetters);\n\n\
    \            foreach (int count in sortedLetters) {\n                for (int\
    \ i = 0; i < count; i++) {\n                    list.Add(string.Join(\"\", s.TakeWhile(j\
    \ => j != ' ')).ToLower());\n                }\n            }\n        }\n   \
    \     return list;", "        List<string> list = new List<string>();\n      \
    \  long count = 0;\n        foreach (var item in s) {\n            count += item.Length;\n\
    \            if (count >= n) {\n                list.Add(item);\n            \
    \    count = 0;\n            }\n        }\n        if (count != 0) {\n       \
    \     list.Add(\"\");\n        }\n        return list;", "        // Complete\
    \ the SelectWords method here.\n        string result = \"\";\n        char temp;\n\
    \        List<string> list = new List<string>();\n        if(s.Length > 0){\n\
    \            temp = s[0];\n            for(int i = 0; i < s.Length; i++){\n  \
    \              temp = s[i];\n                if(temp == 'a' || temp == 'e' ||\
    \ temp == 'i' || temp == 'o' || temp == 'u'){\n                    list.Add(s);\n\
    \                    s = \"\";\n                    break;\n                }\n\
    \                else\n                    s += temp;\n            }\n       \
    \     if(s.Length == n)\n                list.Add(s);\n        }\n        return\
    \ list;", "        int count = 0;\n        char[] arr = s.ToCharArray();\n   \
    \     int maxCount = 0;\n        List<string> res = new List<string>();\n    \
    \    foreach (char c in s) {\n            if (c == '\\'') { maxCount++; }\n  \
    \          if (count > maxCount) { count = 0; maxCount++; }\n            if (c.IsLetter()\
    \ + 'A' >= c && c <= 'Z' + 1) {\n                count++;\n            }\n   \
    \     }\n        if (s == \"\") { return new List<string>();}\n        int start\
    \ = 0;\n        foreach (char c in s) {\n            if (c == '\\'') { start++;\
    \ }\n            if (count == n) { res.Add(s.Substring(start, s.Length - start).Trim());\
    \ }\n        }\n        return res;", "        List<string> result = new List<string>();\n\
    \        foreach (char c in s.ToCharArray()) {\n            if (c.Equals(' '))\
    \ {\n                result.Add(c);\n                continue;\n            }\n\
    \            long? count = WordCount(c, n);\n            if (count.HasValue) {\n\
    \                result.Add(string.Concat(c, \"(\", count.Value, \")\"));\n  \
    \          }\n        }\n        return result;", "        int n = Math.Abs(n);\n\
    \        if (s == \"\") {\n            return new List<string>();\n        }\n\
    \        List<string> result = new List<string>();\n        if (s.Length == 1)\
    \ {\n            List<char> letters = new List<char>();\n            letters.Add(s[0]);\n\
    \            result.Add(s.Substring(0, s.Length - 1));\n            int count\
    \ = 0;\n            foreach (char c in letters) {\n                if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n\
    \                    if (count == n) {\n                        result.Add(s);\n\
    \                    }\n                }\n            }\n        }\n        else\
    \ {\n            char[] chars = s.ToCharArray();\n            string[] words =\
    \ s.Split(' ');\n            foreach (string word in words) {\n              \
    \  List<char> letters = new List<char>();\n                foreach (char c in\
    \ word) {\n                    letters.Add(c);\n                }\n          \
    \      result.Add(word);\n                int count = 0;\n                foreach\
    \ (char c in letters) {\n                    if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                        count++;\n         \
    \               if (count == n) {\n                            result.Add(s);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return result;", '        return SelectWords(s, n).ToList();',
  "        // TODO: implement this function\n        return null;", "        return\
    \ s.Split(' ').Where(w => w.Count(char.IsConsonant) == n).ToList();", "      \
    \  if (s == null || s.Length < 1) return new List<string>();\n        char[] c\
    \ = new char[s.Length];\n        int max = 0;\n        int index = 0;\n      \
    \  int count = 0;\n        for (int i = 0; i < s.Length; i++)\n        {\n   \
    \         if (char.IsLetterOrDigit(s[i]))\n            {\n                c[index]\
    \ = s[i];\n                index++;\n                count++;\n            }\n\
    \            else\n            {\n                if (count > n) break;\n    \
    \            c[index] = ' ';\n                index++;\n                count\
    \ = 0;\n            }\n        }\n        List<string> result = new List<string>();\n\
    \        for (int i = 1; i < index; i++)\n        {\n            result.Add(c.Substring(0,\
    \ i).Trim());\n        }\n        result.Add(s.Substring(0, index).Trim());\n\
    \        return result;", "        List<string> result = new List<string>();\n\
    \        if (string.IsNullOrEmpty(s)) \n            return result;\n        if\
    \ (n == 0)\n            return result;\n        var splittedString = s.ToCharArray();\n\
    \        var allConsonants = Enumerable.Range(0, splittedString.Length).Where(x\
    \ => splittedString[x] == (char)('n'))\n                                     \
    \   .Select(x => splittedString[x])\n                                        .ToList();\n\
    \        var currentLetters = Enumerable.Range(0, splittedString.Length).Where(x\
    \ => splittedString[x] == (char)('n'))\n                                     \
    \           .Select(x => splittedString[x])\n                                \
    \                .ToList();\n        foreach (var currentLetter in currentLetters)\
    \ \n            allConsonants.Remove(currentLetter);\n        var allWordsAsArray\
    \ = s.Split().ToArray();\n        var allWordsAsStringArray = allWordsAsArray.Select(x\
    \ => x.ToString()).ToArray();\n        var firstWord = allWordsAsArray[0];\n \
    \       result.Add(firstWord);\n        for (int i = 0; i < allWordsAsString.Length;\
    \ i++) {\n            foreach (var consonantLetter in allConsonants) {\n     \
    \           if (allWordsAsArray[i] == (char)('n')) \n                    continue;\n\
    \                if (allWordsAsArray[i] == (char)('c') && !allWordsAsArray[i +\
    \ 1].Equals(firstWord)) {\n                    allConsonants.Add(consonantLetter);\n\
    \                    result.Add(allWordsAsArray[i]);\n                    allConsonants.Remove(consonantLetter);\n\
    \                    break;\n                }\n                if (allWordsAsArray[i].Equals(firstWord)\
    \ && (allWordsAsArray[i + 1].Equals(consonantLetter))) {\n                   \
    \ allConsonants.Remove(consonantLetter);\n                    result.Add(allWordsAsArray[i]);\n\
    \                    allConsonants.Remove(consonantLetter);\n                \
    \    break;\n                }\n            }\n        }\n        if (allConsonants.Count()\
    \ == 0) {\n            result.RemoveAll((x => x == (char)('c')));\n        }\n\
    \        return result;", "        List<string> words = new List<string>();\n\
    \        if (s == \"\") return words;\n        string vowels = \"AEIOUaeiou\"\
    ;\n        bool hasConsonant = false;\n        char[] characters = s.ToCharArray();\n\
    \        for (long i = 0; i < characters.Length; i++) {\n            if (characters[i]\
    \ == ' ') continue;\n            if (vowels.Contains(characters[i])) continue;\n\
    \            if (hasConsonant) break;\n            if (characters[i] == 'a' ||\
    \ characters[i] == 'e' || characters[i] == 'i' || characters[i] == 'o' || characters[i]\
    \ == 'u') {\n                hasConsonant = true;\n            }\n        }\n\
    \        if (characters.Length == 0 || hasConsonant) return words;\n        words.AddRange(SelectWords(s.Substring(0,\
    \ i), n));\n        words.AddRange(SelectWords(s.Substring(i + 1), n));\n    \
    \    return words;", "        List<string> result = new List<string>();\n    \
    \    long lastindex = -1;\n        long currentindex = -1;\n        long currentWord\
    \ = -1;\n        string currentWordS;\n        foreach (string item in s.Split('\
    \ ')){\n            currentindex = item.Length;\n            currentWordS = item;\n\
    \            currentWord = Convert.ToInt64(currentWordS.Trim());\n           \
    \ while (currentWord != -1){\n                lastindex = currentindex;\n    \
    \            currentWord = Convert.ToInt64(currentWordS.Substring(currentindex,\
    \ 1).Trim());\n                currentindex++;\n                if (currentWord\
    \ == n){\n                    result.Add(currentWordS.Substring(0, lastindex));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<string> answer = new List<string>();\n        if (n == 0) {\n       \
    \     return new List<string>();\n        }\n        string word = \"\";\n   \
    \     long numOfConsonants = 0;\n        string temp = \"\";\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            char c = s[i];\n            temp =\
    \ c.ToString();\n            if (temp.Contains(\"a\") || temp.Contains(\"e\")\
    \ || temp.Contains(\"i\") || temp.Contains(\"o\") || temp.Contains(\"u\")) {\n\
    \                word += temp + \" \";\n                answer.Add(word);\n  \
    \              numOfConsonants++;\n                word = \"\";\n            }\
    \ else {\n                if (numOfConsonants == n) {\n                    word\
    \ += temp + \" \";\n                    answer.Add(word);\n                }\n\
    \                numOfConsonants = 0;\n            }\n        }\n        return\
    \ answer;", "        List<string> result = new List<string>();\n        StringBuilder\
    \ builder = new StringBuilder();\n        foreach (string word in SplitWords(s))\n\
    \        {\n            if (builder.Length >= n)\n            {\n            \
    \    result.Add(builder.ToString());\n                builder.Clear();\n     \
    \       }\n            builder.Append(word);\n        }\n        return result;",
  "        List<string> words = new List<string>();\n        if (string.IsNullOrEmpty(s))\
    \ {\n            return words;\n        }\n        string[] words = s.Split('\
    \ ');\n        string word = \"\";\n        string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        List<string> consonantsToBeRemoved = new List<string>();\n        string\
    \ current = \"\";\n        for (int i = 0; i < words.Length; i++) {\n        \
    \    current = words[i];\n            int j = 0;\n            do {\n         \
    \       j = 0;\n                while (j++ < consonants.Length) {\n          \
    \          string temp = consonants[j];\n                    if (!current.Contains(temp))\
    \ {\n                        consonantsToBeRemoved.Add(temp);\n              \
    \      }\n                }\n                current = current.Substring(0, current.Length\
    \ - 1);\n                if (consonantsToBeRemoved.Count == 0) {\n           \
    \         words.RemoveAt(i);\n                    i--;\n                    break;\n\
    \                }\n                current = current.Replace(\" \", string.Empty);\n\
    \            } while (current.Length > n);\n            words.Add(current);\n\
    \        }\n        return words;", "        List<string> result = new List<string>();\n\
    \        if (string.IsNullOrEmpty(s)) return result;\n        if (n == 0) return\
    \ result;\n        int i = 0;\n        string nextWord = \"\";\n        while\
    \ (i < s.Length) {\n            char c = s[i];\n            i++;\n           \
    \ if (c != ' ') nextWord += c;\n            if (nextWord.ToLower() == s.ToLower()\
    \ && s.Length > 1) {\n                if (n <= nextWord.Length) {\n          \
    \          result.Add(nextWord);\n                    nextWord = \"\";\n     \
    \           }\n            }\n            if (s.Length == 1) {\n             \
    \   result.Add(nextWord);\n                nextWord = \"\";\n            }\n \
    \       }\n        return result;", "        var list = new List<string>();\n\n\
    \        if (String.IsNullOrEmpty(s))\n            return list;\n\n        long\
    \ wordCount = 0;\n        foreach (var word in s.Split(' '))\n        {\n    \
    \        wordCount++;\n\n            var currentWordCount = wordCount;\n     \
    \       var currentWord = new List<string>();\n\n            foreach (var letter\
    \ in word)\n            {\n                if (currentWordCount == n)\n      \
    \          {\n                    currentWord.Add(letter);\n                }\n\
    \                else if (currentWordCount >= n)\n                {\n        \
    \            if (currentWordCount == currentWord.Count)\n                    \
    \    currentWord.Add(letter);\n                    else if (currentWord.Count\
    \ != currentWordCount)\n                        currentWord.Add(string.Empty);\n\
    \                }\n                else\n                {\n                \
    \    currentWord.Add(string.Empty);\n                }\n\n                currentWordCount++;\n\
    \            }\n\n            if (currentWord.Count != currentWordCount)\n   \
    \             currentWord.Add(string.Empty);\n\n            list.AddRange(currentWord);\n\
    \        }\n\n        return list;", "        // Write your logic here\n     \
    \   if (s == null || s == \"\")\n            return new List<string>();\n    \
    \    var list = new List<string>();\n        string word = \"\";\n        var\
    \ chars = s.ToCharArray();\n        foreach (var character in chars)\n       \
    \ {\n            if (character.ToString() == \"a\" || character.ToString() ==\
    \ \"e\" || character.ToString() == \"i\" || character.ToString() == \"o\" || character.ToString()\
    \ == \"u\")\n            {\n                if (word.ToCharArray().Count(c=>c.ToString()==character.ToString())==n)\n\
    \                    list.Add(word);\n                word = \"\";\n         \
    \   }\n            else\n                word += character.ToString();\n     \
    \   }\n        if (word.ToCharArray().Count(c=>c.ToString()==\"a\")==n)\n    \
    \        list.Add(word);\n        return list;", "        if (string.IsNullOrEmpty(s))\n\
    \            return new List<string>();\n\n        List<string> words = new List<string>();\n\
    \        char[] c = s.ToCharArray();\n\n        long sum = 0;\n\n        for (int\
    \ i = 0; i < c.Length; i++)\n        {\n            if (c[i] == '\\0' || c[i]\
    \ == '\\n' || c[i] == '\\r' || c[i] == '\\t' || c[i] == '\\0')\n             \
    \   break;\n\n            sum += c[i];\n\n            if (sum == n)\n        \
    \    {\n                words.Add(c.ToString());\n                sum = 0;\n \
    \           }\n        }\n\n        return words;", '        return string.IsNullOrEmpty(s)
    ? new List<string>() : SelectWords(s, n, new List<string>());', "        if (s.IsEmpty())\
    \ return new List<string>();\n\n        var words = s.Split().ToList();\n    \
    \    var dict = new Dictionary<string, int>();\n        foreach (var word in words)\n\
    \            dict[word] = 1;\n\n        var words = words.Where(w => dict.ContainsKey(w)).ToList();\n\
    \        long total = 0;\n        var list = words.Select(w => {\n           \
    \ var count = dict[w];\n            total += count;\n            dict.Remove(w);\n\
    \            dict.Add(w, count + 1);\n            return count;\n        }).ToList();\n\
    \n        var maxValue = (long)words.Sum(w => dict[w]);\n        var totalValue\
    \ = words.Count;\n        var result = list.Where(w => w >= n).ToList();\n   \
    \     \n        if (result != null && result.Count > 0) {\n            List<string>\
    \ filteredWords = new List<string>();\n            \n            var sortedWords\
    \ = result.OrderByDescending(w => w).ToList();\n            for (int i = 0; i\
    \ < sortedWords.Count; i++) {\n                var count = sortedWords[i];\n \
    \               if (count == n)\n                    filteredWords.Add(words[sortedWords.IndexOf(sortedWords[i])]);\n\
    \            }\n            return filteredWords;\n        }\n        if (n ==\
    \ 0)\n            return words;\n        else\n            return new List<string>();",
  "        if (string.IsNullOrEmpty(s))\n            return new List<string>();\n\
    \        List<string> result = new List<string>();\n        HashSet<string> vowels\
    \ = new HashSet<string>();\n        HashSet<string> consonants = new HashSet<string>();\n\
    \        HashSet<string> chars = new HashSet<string>();\n        string currentWord\
    \ = \"\";\n        foreach (char c in s) {\n            currentWord += c;\n  \
    \          if (chars.Contains(currentWord))\n                continue;\n     \
    \       if (chars.Add(currentWord))\n            {\n                foreach (char\
    \ c1 in currentWord.ToCharArray())\n                    if (chars.Add(c1))\n \
    \                       vowels.Add(c1);\n            }\n            else if (chars.Add(currentWord))\n\
    \            {\n                foreach (char c1 in currentWord.ToCharArray())\n\
    \                    if (consonants.Add(c1))\n                        consonants.Remove(c1);\n\
    \            }\n            if (consonants.Count == n)\n            {\n      \
    \          result.Add(currentWord);\n                consonants.Clear();\n   \
    \         }\n        }\n        return result;", "        // Your code here\n\
    \        var list = new List<string>();\n        if (s == \"\") list.Add(\"\"\
    );\n        if (n == 0 || n == 1) list.AddRange(s.Split(' '));\n        if (n\
    \ > 1) list.AddRange(s.Split(' '));\n        if (s.Contains(\"a\") && s.Contains(\"\
    e\") && s.Contains(\"i\") && s.Contains(\"o\") && s.Contains(\"u\")) list.AddRange(new\
    \ string[] { \"a\", \"e\", \"i\", \"o\", \"u\" });\n        if (s.Contains(\"\
    a\") && s.Contains(\"e\") && s.Contains(\"i\") && s.Contains(\"o\") && s.Contains(\"\
    u\")) list.AddRange(new string[] { \"a\", \"e\", \"i\", \"o\", \"u\" });\n   \
    \     if (s.Contains(\"a\") && s.Contains(\"e\") && s.Contains(\"i\") && s.Contains(\"\
    o\") && s.Contains(\"u\")) list.AddRange(new string[] { \"a\", \"e\", \"i\", \"\
    o\", \"u\" });\n        if (s.Contains(\"a\") && s.Contains(\"e\") && s.Contains(\"\
    i\") && s.Contains(\"o\") && s.Contains(\"u\")) list.AddRange(new string[] { \"\
    a\", \"e\", \"i\", \"o\", \"u\" });\n        if (s.Contains(\"a\") && s.Contains(\"\
    e\") && s.Contains(\"i\") && s.Contains(\"o\") && s.Contains(\"u\")) list.AddRange(new\
    \ string[] { \"a\", \"e\", \"i\", \"o\", \"u\" });\n        if (s.Contains(\"\
    a\") && s.Contains(\"e\") && s.Contains(\"i\") && s.Contains(\"o\") && s.Contains(\"\
    u\")) list.AddRange(new string[] { \"a\", \"e\", \"i\", \"o\", \"u\" });\n   \
    \     if (s.Contains(\"a\") && s.Contains(\"e\") && s.Contains(\"i\") && s.Contains(\"\
    o\") && s.Contains(\"u\")) list.AddRange(new string[] { \"a\", \"e\", \"i\", \"\
    o\", \"u\" });\n        if (s.Contains(\"a\") && s.Contains(\"e\") && s.Contains(\"\
    i\") && s.Contains(\"o\") && s.Contains(\"u\")) list.AddRange(new string[] { \"\
    a\", \"e\", \"i\", \"o\", \"u\" });\n        if (s.Contains(\"a\") && s.Contains(\"\
    e\") && s.Contains(\"i\") && s.Contains(\"o\") && s.Contains(\"u\")) list.AddRange(new\
    \ string[] { \"a\", \"e\", \"i\", \"o\", \"u\" });\n        if (s.Contains(\"\
    a\") && s.Contains(\"e\") && s.Contains(\"i\") && s.Contains(\"o\") && s.Contains(\"\
    u\")) list.AddRange(new string[] { \"a\", \"e\", \"i\", \"o\", \"u\" });\n   \
    \     if (s.Contains(\"a\") && s.Contains(\"e\") && s.Contains(\"i\") && s.Contain",
  "        // Write your code here\n        char[] chars = s.ToCharArray();\n    \
    \    char[] numChars = n.ToString().ToCharArray();\n        Dictionary<char, int>\
    \ map = new Dictionary<char, int>();\n        StringBuilder sb = new StringBuilder();\n\
    \        string word;\n        List<string> result = new List<string>();\n   \
    \     for (int i = 0; i < chars.Length; i++)\n        {\n            map.Add(chars[i],\
    \ 0);\n        }\n        foreach (char c in chars)\n        {\n            if\
    \ (map.ContainsKey(c))\n            {\n                map.Remove(c);\n      \
    \          sb.Append(c);\n            }\n            else\n            {\n   \
    \             word = sb.ToString().ToLower();\n                if (map.Count ==\
    \ numChars)\n                {\n                    result.Add(word);\n      \
    \          }\n            }\n            map.Add(c, 1);\n        }\n        return\
    \ result;", "        char[] chars = s.ToCharArray();\n        char[] consonants\
    \ = new char[] {'a','e','i','o','u','y','e','e','a'};\n        int[] count = new\
    \ int[consonants.Length];\n        int n = Convert.ToInt32(n);\n        StringBuilder\
    \ str = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n \
    \           str.Append(chars[i]);\n        }\n        char[] countArray = str.ToCharArray();\n\
    \        foreach(char c in countArray)\n        {\n            count[c]++;\n \
    \       }\n        string[] res = new string[countArray.Length];\n        for\
    \ (int i = 0; i < countArray.Length; i++)\n        {\n            if (countArray[i]\
    \ == consonants[i])\n            {\n                res[i] = str.Substring(0,\
    \ i) + \" \" + str.Substring(i+1);\n            }\n        }\n        return res;",
  "        // TODO: Write your solution here\n        return new List<string>();",
  "        HashSet<string> words = new HashSet<string>();\n        foreach (string\
    \ item in s) {\n            if (item.Length == n)\n                words.Add(item);\n\
    \        }\n        return words.ToList();", "        List<string> list = new\
    \ List<string>();\n        // write your code here\n        string words = Regex.Split(s,\
    \ @\"\\W+\");\n        long count = 0;\n        foreach (string word in words)\
    \ {\n            if (IsConsonant(word)) {\n                count++;\n        \
    \    }\n            if (count == n) {\n                list.Add(word);\n     \
    \           count = 0;\n            }\n        }\n        return list;", "   \
    \     var dict = new Dictionary<string, List<string>>();\n        if (s == null\
    \ || s.Length == 0) {\n            return new List<string>();\n        }\n   \
    \     string currentWord = \"\";\n        long nWords = 0;\n        foreach (var\
    \ letter in s) {\n            if (letter == ' ') {\n                dict[currentWord].Add(letter);\n\
    \                nWords++;\n                currentWord = \"\";\n            }\
    \ else {\n                currentWord += letter;\n            }\n            if\
    \ (nWords == n) {\n                List<string> newWords = new List<string>();\n\
    \                newWords.AddRange(dict[currentWord]);\n                dict[currentWord]\
    \ = newWords;\n                nWords = 0;\n                currentWord = \"\"\
    ;\n            }\n        }\n        return new List<string>(dict.Values.Where(x\
    \ => x.Count == n).Select(x => x.First()));", "        List<string> words = new\
    \ List<string>();\n\n        Dictionary<string, int> d = new Dictionary<string,\
    \ int>();\n\n        if (s.Contains(\"\\0\")) {\n            return new List<string>();\n\
    \        }\n\n        foreach (char c in s) {\n            d.Add(c.ToString(),\
    \ 0);\n        }\n\n        foreach (char c in s) {\n            d.Add(c.ToString(),\
    \ 0);\n        }\n\n        foreach (var x in d.Keys) {\n            if (x.ToString().Contains(\"\
    \\0\")) {\n                continue;\n            }\n            foreach (char\
    \ y in s) {\n                if (x.Equals(y)) {\n                    d[x] += 1;\n\
    \                    if (d[x] == n) {\n                        words.Add(x.ToString());\n\
    \                    }\n                }\n            }\n        }\n\n      \
    \  return words;", "        var result = new List<string>();\n        if (s.Length\
    \ == 0) return result;\n        var counter = new ConsonantCounter();\n      \
    \  foreach (var letter in s) {\n            counter.Consonant(letter);\n     \
    \   }\n        counter.Consonant(s.Last());\n        \n        foreach(var entry\
    \ in counter.Count.ToDictionary()) {\n            if(!entry.Value == n) continue;\n\
    \            for(int i = counter.Count[entry.Key] - 1; i >= 0; i--) {\n      \
    \          if(counter.Count[i] > 0) {\n                    result.Add(s.Substring(0,\
    \ i) + s.Substring(i + 1, s.Length - i - 1));\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // Convert string s to an array (of characters)\n        char[] charArray =\
    \ s.ToCharArray();\n        List<string> words = new List<string>();\n       \
    \ char[] cArray = new char[charArray.Length];\n        int pos = 0;\n        int\
    \ i = 0;\n        while (i != charArray.Length) {\n            cArray[i] = charArray[i];\n\
    \            i++;\n        }\n        char[] cArray2 = new char[cArray.Length];\n\
    \        // Add each word that contains exactly n consonants into a list\n   \
    \     foreach (char c in cArray) {\n            bool cont = true;\n          \
    \  pos = 0;\n            while (pos != cArray.Length) {\n                cArray2[pos]\
    \ = c;\n                pos++;\n                if (pos + 1 == cArray.Length)\
    \ {\n                    cont = false;\n                    break;\n         \
    \       }\n            }\n            if (cont) {\n                words.Add(new\
    \ string(cArray2));\n            }\n        }\n        return words;", "     \
    \   List<string> answer = new List<string>();\n\n        using (BitArray ba =\
    \ new BitArray(Encoding.ASCII.GetBytes(s)))\n        {\n            int total\
    \ = 0;\n            int count = 0;\n            while (count < ba.Length)\n  \
    \          {\n                if (ba[count])\n                {\n            \
    \        total += 1;\n                    count += 1;\n                }\n   \
    \             else\n                {\n                    if (count == ba.Length)\n\
    \                    {\n                        answer.AddRange(FindWords(s.Substring(0,count),\
    \ n));\n                        break;\n                    }\n              \
    \      else\n                    {\n                        count += 1;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ answer;", '        // Your code goes here!', "        long count = 0;\n    \
    \    char[] splitter = new char[] {'\\\\', 'n', ' ', '\\\\', ',', '\\\\', ',',\
    \ '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\
    \\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\',\
    \ '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\
    \\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\',\
    \ '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\
    \\', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\\
    ', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',',\
    \ '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\',\
    \ ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',',\
    \ '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\',\
    \ ',', '\\\\', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\',\
    \ ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', '\\\
    \\', ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\',\
    \ ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\\
    ', ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', ',',\
    \ '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',',\
    \ '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\',\
    \ ',', '\\\\', ',', '\\\\', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',',\
    \ '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',',\
    \ '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',',\
    \ '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ',', '\\\\', ",
  "        if (s == null)\n            return new List<string>();\n        if (n ==\
    \ 0)\n            return new List<string>();\n        List<string> result = new\
    \ List<string>();\n        int len = s.Length;\n        string newString = s;\n\
    \        string tmpString = \"\";\n        bool startFound = false;\n        bool\
    \ endFound = false;\n        bool done = false;\n        bool notDone = false;\n\
    \        while (notDone == false) {\n            tmpString = newString;\n    \
    \        tmpString += \" \";\n            notDone = true;\n            startFound\
    \ = false;\n            endFound = false;\n            done = false;\n       \
    \     for (int i = 0; i < len; i++) {\n                if (char.IsUpper(tmpString[0])\
    \ == true) {\n                    if (startFound == false) {\n               \
    \         startFound = true;\n                    }\n                } else {\n\
    \                    if (endFound == false) {\n                        endFound\
    \ = true;\n                    }\n                }\n                if (tmpString[len\
    \ - i - 1].ToLower() == \".\") {\n                    if (done == false) {\n \
    \                       done = true;\n                        notDone = false;\n\
    \                    }\n                }\n            }\n            if (startFound\
    \ == true && endFound == true) {\n                result.Add(tmpString);\n   \
    \         }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n\n        bool hasSubstring = true;\n        if (s ==\
    \ \"\") {\n            return new List<string>();\n        }\n\n        string\
    \ currentSubstring = \"\";\n\n        int currentIndex = 0;\n        char[] charArray\
    \ = s.ToCharArray();\n\n        while (hasSubstring) {\n            if (charArray.Length\
    \ >= n + currentIndex + 1) {\n                if (charArray[currentIndex] == '\
    \ ') {\n                    currentSubstring += \" \";\n                    currentIndex++;\n\
    \                    continue;\n                }\n\n                if (charArray[currentIndex]\
    \ == '.') {\n                    currentSubstring += \".\";\n                \
    \    currentIndex++;\n                    continue;\n                }\n\n   \
    \             if (charArray[currentIndex] == '-') {\n                    currentSubstring\
    \ += \"-\";\n                    currentIndex++;\n                    continue;\n\
    \                }\n\n                if (charArray[currentIndex] == '@') {\n\
    \                    currentSubstring += \"@\";\n                    currentIndex++;\n\
    \                    continue;\n                }\n\n                if (charArray[currentIndex]\
    \ == '&') {\n                    currentSubstring += \"&\";\n                \
    \    currentIndex++;\n                    continue;\n                }\n\n   \
    \             if (charArray[currentIndex] == '*') {\n                    currentSubstring\
    \ += \"*\";\n                    currentIndex++;\n                    continue;\n\
    \                }\n\n                if (charArray[currentIndex] == '$') {\n\
    \                    currentSubstring += \"$\";\n                    currentIndex++;\n\
    \                    continue;\n                }\n\n                if (charArray[currentIndex]\
    \ == '%') {\n                    currentSubstring += \"%\";\n                \
    \    currentIndex++;\n                    continue;\n                }\n\n   \
    \             if (charArray[currentIndex] == '+') {\n                    currentSubstring\
    \ += \"+\";\n                    currentIndex++;\n                    continue;\n\
    \                }\n\n                if (charArray[currentIndex] == '\\\\') {\n\
    \                    currentSubstring += \"\\\\\";\n                    currentIndex++;\n\
    \                    continue;\n                }\n\n                if (charArray[currentIndex]\
    \ == '(') {\n                    currentSubstring += \")\";\n                \
    \    currentIndex++;\n                    continue;\n                }\n\n   \
    \             if (charArray[currentIndex] == ')') {\n                    currentSubstring\
    \ += \"(\";\n                    currentIndex++;\n                    continue;\n\
    \                }\n\n                if (charArray[currentIndex] == '!') {\n\
    \                    currentSubstring += \"!\";\n                    currentIndex++;\n\
    \                    continue;\n                }\n\n                if (charArray[currentIndex]\
    \ == '(') {\n                    currentSubstring += \"(\";\n                \
    \    currentIndex++;\n                    continue;\n                }\n\n   \
    \             if (charArray[currentIndex] == ')') {\n                    currentSubstring\
    \ += \")\";\n                    currentIndex++;\n                    continue;\n\
    \                }\n\n                if (charArray[currentIndex] == '[') {\n\
    \                    currentSubstring += \"[\";\n                    currentIndex",
  "        List<string> result = new List<string>();\n        if (s.Length == 0) {\n\
    \            return result;\n        }\n        string first = s;\n        while\
    \ (first.IndexOfAny(new char[] {'a'..'z', ' '}) != -1) {\n            first =\
    \ first.Remove(first.IndexOfAny(new char[] {'a'..'z', ' '}), 1);\n        }\n\
    \        bool found = false;\n        for (int i = first.Length - 1; i >= 0; i--)\
    \ {\n            char c = first[i];\n            if (Char.IsDigit(c)) {\n    \
    \            found = true;\n                break;\n            }\n        }\n\
    \        if (!found) {\n            char c = s[0];\n            if (Char.IsLetter(c))\
    \ {\n                while (true) {\n                    c = s[0];\n         \
    \           if (Char.IsLetter(c)) {\n                        s = s.Remove(0, 1);\n\
    \                    } else {\n                        break;\n              \
    \      }\n                }\n            } else {\n                result.Add(\"\
    Hello world\");\n            }\n            return result;\n        }\n      \
    \  char[] words = new char[s.Length];\n        int n = 0;\n        for (int i\
    \ = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (!Char.IsLetter(c))\
    \ {\n                words[n - 1] = words[n - 1] + c;\n                n++;\n\
    \            } else {\n                if (n == 0) {\n                    words.Add(c);\n\
    \                    n++;\n                } else if (n == 1) {\n            \
    \        result.Add(new string(words));\n                    n = 0;\n        \
    \            words.Clear();\n                } else {\n                    words.Add(c);\n\
    \                }\n            }\n        }\n        while (n < words.Length)\
    \ {\n            words[n - 1] = words[n - 1] + words[n - 1];\n            n++;\n\
    \        }\n        if (n > 0) {\n            result.Add(new string(words));\n\
    \        }\n        return result;", "        // TODO: Complete the implementation\
    \ here\n        List<string> res = new List<string>();\n        if(s.Trim().Length==0){\n\
    \            return new List<string>();\n        }\n        foreach (char c in\
    \ s.ToCharArray()) {\n            if((int)c==(int)' '){\n                res.Add(\"\
    \");\n            }\n            else if (char.IsDigit(c) || (int)c>=65 && (int)c<=90\
    \ || char.IsLetter(c))\n            {\n                string t = \"\";\n    \
    \            for (int i = 0; i < ((int)c) - 64; i++) {\n                    int\
    \ k = Convert.ToInt32((char.ConvertFromUtf32(s.ToCharArray()) + i), 16);\n   \
    \                 t += k.ToString();\n                }\n                if(t.Length==n)\n\
    \                {\n                    res.Add(t);\n                }\n     \
    \       }\n            else{\n                res.Add(\"\");\n            }\n\
    \        }\n        return res;", "        if (string.IsNullOrEmpty(s)) return\
    \ new List<string>();\n        var result = new List<string>();\n        var count\
    \ = s.ToCharArray().Count(c => char.IsLetter(c) || char.IsDigit(c));\n       \
    \ long c = 0;\n        foreach (var item in s.Split(' '))\n        {\n       \
    \     c += item.Count(x => char.IsLetter(x) || char.IsDigit(x));\n           \
    \ if(c == n)\n            {\n                result.Add(item);\n            }\n\
    \        }\n        return result;", "        List<string> words = new List<string>();\n\
    \        bool hasSpace = s.Contains(\" \");\n        bool hasNonSpace = s.Contains(\"\
    _\");\n        if (s.Length == 0) {\n            words.AddRange(Enumerable.Empty<string>());\n\
    \        }\n        long len = s.Length;\n        string nonSpace = hasNonSpace\
    \ ? s.Substring(0, len - 1) : s;\n        string space = hasSpace ? s.Substring(0,\
    \ len - 1) : s;\n        long i = nonSpace.LastIndexOf(' ');\n        long j =\
    \ space.LastIndexOf(' ');\n        long k = nonSpace.LastIndexOf('_');\n     \
    \   long l = space.LastIndexOf('_');\n        bool addIfMatched = false;\n   \
    \     // Add only words if it has a _ after a space, else add words that don't\
    \ have a _\n        if ((hasSpace && hasNonSpace) && (i + 1 == len) && (j + 1\
    \ == len) && (k + 1 == len) && (l + 1 == len)) {\n            addIfMatched = true;\n\
    \        }\n        // add words that have a _ before a space\n        if (hasNonSpace\
    \ && (j + 1 == len)) {\n            addIfMatched = true;\n        }\n        //\
    \ add words that have a _ after a space\n        if (hasSpace && (k + 1 == len))\
    \ {\n            addIfMatched = true;\n        }\n        // add words that have\
    \ spaces before\n        if (hasNonSpace && (i + 1 == len) && (j + 1 == len))\
    \ {\n            addIfMatched = true;\n        }\n        // add words that have\
    \ spaces after\n        if (hasSpace && (i + 1 == len) && (k + 1 == len)) {\n\
    \            addIfMatched = true;\n        }\n        // add words with no spaces\n\
    \        if (hasNonSpace && (i + 1 == len) && (k + 1 == len)) {\n            addIfMatched\
    \ = true;\n        }\n        if (addIfMatched) {\n            int count = 0;\n\
    \            while (i < len - 1) {\n                string current = nonSpace.Substring(i,\
    \ (len - 1) - i);\n                string nextChar = nonSpace.Substring((len -\
    \ 1) - i, 1);\n                string nextChar2 = nonSpace.Substring(len - (len\
    \ - 1) - i, 1);\n                string nextChar3 = nonSpace.Substring(len - (len\
    \ - 2) - i, 1);\n                string nextChar4 = nonSpace.Substring(len - (len\
    \ - 3) - i, 1);\n                if (current[0] == ' ') {\n                  \
    \  string nextChar5 = nonSpace.Substring(len - (len - 1) - i, 1);\n          \
    \          string nextChar6 = nonSpace.Substring(len - (len - 2) - i, 1);\n  \
    \                  string nextChar7 = ", "        List<string> list = new List<string>();\n\
    \        long maxLen = s.Length;\n        if (maxLen <= 0) return list;\n    \
    \    List<char> consonants = new List<char>(new char[] {'a','e','i','o','u'});\n\
    \        List<char> vowels = new List<char>(new char[] {'a','e','i','o','u','y','A','E','I','O','U','Y'});\n\
    \        long nConsonants = n;\n        long nVowels = nConsonants / 2;\n    \
    \    bool firstWord = true;\n        while (maxLen > 0){\n            string currString\
    \ = s.Substring(0, maxLen);\n            if (currString.Length <= 0) break;\n\
    \            char firstChar = currString[0];\n            if (firstChar == ' ')\
    \ break;\n            if (firstChar in consonants) consonants.Remove(firstChar);\n\
    \            if (firstChar in vowels) vowels.Remove(firstChar);\n            maxLen--;\n\
    \        }\n        string word1 = consonants.Count == 0 ? \"\" : consonants.ToArray().ToString();\n\
    \        string word2 = vowels.Count == 0 ? \"\" : vowels.ToArray().ToString();\n\
    \        if (word1 != \"\") list.Add(word1);\n        if (word2 != \"\") list.Add(word2);\n\
    \        if (s.Length == 0) list.Add(\"\");\n        List<string> results = new\
    \ List<string>();\n        foreach (string word in list){\n            string\
    \ newWord = \"\";\n            if (word1 != \"\") newWord += word1;\n        \
    \    if (word2 != \"\") newWord += word2;\n            if (word != \"\") results.Add(newWord\
    \ + (word.Length > maxLen ? \"...\" : \"\"));\n        }\n        return results;",
  "        string x = \"\";\n        if (s == null || s.Length == 0) return new List<string>();\n\
    \        long xl = s.Length;\n        if (n>xl) return new List<string>();\n \
    \       StringBuilder y = new StringBuilder();\n        bool flag = false;\n \
    \       for (int i = 0; i < xl; i++) {\n            if (char.IsDigit(s[i])){\n\
    \                x+=s[i];\n            }\n            if (s[i] == ' ') {\n   \
    \             if (x==\"\") {\n                    flag = true;\n             \
    \       y.Append(x);\n                    x = \"\";\n                }\n     \
    \           else if (flag == false) {\n                    y.Append(x);\n    \
    \                x = \"\";\n                    flag = false;\n              \
    \  }\n            }\n            else if (char.IsLetter(s[i])) {\n           \
    \     if (flag == true) {\n                    y.Append(x);\n                \
    \    x = \"\";\n                    flag = false;\n                }\n       \
    \         y.Append(s[i]);\n            }\n        }\n        if (x.Length > 0)\
    \ {\n            if (flag == true) {\n                y.Append(x);\n         \
    \   }\n        }\n        if (y.ToString().ToLower().Contains(\"a\") || y.ToString().ToLower().Contains(\"\
    e\") || y.ToString().ToLower().Contains(\"i\") || y.ToString().ToLower().Contains(\"\
    o\") || y.ToString().ToLower().Contains(\"u\")) {\n            List<string> list\
    \ = new List<string>();\n            list.Add(y.ToString());\n            return\
    \ list;\n        }\n        else {\n            List<string> list = new List<string>();\n\
    \            if (y.ToString().Count(c => char.IsDigit(c)).Equals(n)) {\n     \
    \           list.Add(y.ToString());\n                return list;\n          \
    \  }\n            long xx = s.Length;\n            long nn = int.Parse(y.ToString());\n\
    \            bool b = false;\n            long i = 1;\n            while (i <=\
    \ xx && i <= nn) {\n                if (nn - i < 0) {\n                    b =\
    \ (nn - i) == 0;\n                    list.Add((b.ToString() + (s.Substring(i\
    \ - 1, i).Contains(\"a\") ? \"\" : \" \")));\n                    list.Add((s.Substring(i\
    \ - 1, i)));\n                    list.Add((b.ToString() + (s.Substring(i - 1,\
    \ i).Contains(\"e\") ? \"\" : \" \")));\n                    list.Add((s.Substring(i\
    \ - 1, i)));\n                    list.Add((b.ToString() + (s.Substring(i - 1,\
    \ i).Contains(\"i\") ? \"\" : \" \")));\n                    list.Add((s.Substring(i\
    \ - 1, i)));\n                    list.Add((b.ToString() + (s.Substring(i - 1,\
    \ i).Contains(\"o\") ? \"\" : \" \")));\n                    list.Add((s.Substring(i\
    \ - 1, i)));\n                    list.Add((b.ToString() ", "        List<string>\
    \ result = new List<string>();\n\n        if (s == \"\")\n            return result;\n\
    \n        foreach (string word in s.Split(' '))\n        {\n            if (Regex.Matches(word,\
    \ \"[^aeiouAEIOU]\").Count != n)\n            {\n                result.Add(word);\n\
    \            }\n        }\n\n        return result;", "        string pattern\
    \ = n.ToString() + \" consonants\";\n        Regex regex = new Regex(string.Format(\"\
    ^{0}$\", pattern));\n        Regex regexPattern = new Regex(string.Format(\"{0}$\"\
    , pattern));\n        List<string> ret = new List<string>();\n        if (s.Length\
    \ == 0) {\n            return ret;\n        }\n        List<string> words = regex.Split(s);\n\
    \        foreach (string word in words) {\n            if (regexPattern.IsMatch(word))\
    \ {\n                ret.Add(word);\n            }\n        }\n        return\
    \ ret;", "        long count = new HashSet<long>().Where(x => x > n).Count();\n\
    \        char[] chars = s.ToCharArray();\n        List<string> lst = new List<string>();\n\
    \        string str = string.Empty;\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] != ' ') {\n                str += chars[i].ToString();\n\
    \            } else {\n                lst.Add(str);\n                str = string.Empty;\n\
    \            }\n        }\n        if (lst.Count > 0) {\n            lst.Add(str);\n\
    \        }\n        return lst;", "        long x = 0;\n        List<string> result\
    \ = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n      \
    \      long y = 0;\n            long z = 0;\n            char c = s[i];\n    \
    \        if (Char.IsLetter(c)) {\n                y += c;\n                if\
    \ (Char.IsLower(c)) {\n                    z += c;\n                }\n      \
    \      }\n            x = y * z;\n            result.Add(s.Substring(x, z).ToUpper());\n\
    \        }\n        if (n == 0) {\n            return result;\n        }\n   \
    \     if (n == 1) {\n            return result.Where(x => x == s).ToList();\n\
    \        }\n        if (n > result.Count || n < 0)\n            return result;\n\
    \        List<string> left = new List<string>();\n        List<string> right =\
    \ new List<string>();\n        for (int i = 0; i < result.Count - 1; i++) {\n\
    \            if (result[i].Contains(result[i + 1])) {\n                left.Add(result[i]);\n\
    \            }\n        }\n        for (int i = 0; i < result.Count - 1; i++)\
    \ {\n            if (!left.Contains(result[i])) {\n                right.Add(result[i]);\n\
    \            }\n        }\n        int i = 0;\n        while (i < left.Count &&\
    \ i < right.Count) {\n            if (left.Count > right.Count || right.Count\
    \ > left.Count) {\n                break;\n            }\n            if (left[i]\
    \ == right[i]) {\n                i++;\n            } else {\n               \
    \ break;\n            }\n        }\n        if (i == 0) {\n            if (left.Count\
    \ > right.Count) {\n                left.RemoveAt(left.Count - 1);\n         \
    \       right.RemoveAt(right.Count - 1);\n            } else {\n             \
    \   right.RemoveAt(right.Count - 1);\n            }\n            left = left.Distinct().ToList();\n\
    \            right = right.Distinct().ToList();\n        }\n        left = left.Skip(n\
    \ - 1).ToList();\n        right = right.Skip(n - 1).ToList();\n        left =\
    \ left.Distinct().ToList();\n        right = right.Distinct().ToList();\n    \
    \    left.AddRange(right);\n        left.AddRange(right);\n        return left;",
  "        var result = new List<string>();\n        if (String.IsNullOrEmpty(s))\n\
    \            return result;\n        if (n == 0)\n            return result;\n\
    \        string currentWord = \"\";\n        foreach (var ch in s.ToCharArray())\
    \ {\n            bool containsLetter = false;\n            bool containsNumber\
    \ = false;\n            if (ch >= 'A' && ch <= 'Z') {\n                containsLetter\
    \ = true;\n            }\n            if (ch >= '0' && ch <= '9') {\n        \
    \        containsNumber = true;\n            }\n            if (containsLetter)\
    \ {\n                currentWord += ch;\n            }\n            if (containsNumber)\
    \ {\n                result.Add(currentWord);\n                currentWord = \"\
    \";\n            }\n            if (currentWord.Length > 0 && currentWord.Length\
    \ == n) {\n                result.Add(currentWord);\n                currentWord\
    \ = \"\";\n            }\n        }\n        return result;", "        if (string.IsNullOrWhiteSpace(s))\n\
    \            return new List<string>();\n        string word = \"1\";\n      \
    \  List<string> words = new List<string>();\n        long count = 1;\n       \
    \ foreach (char c in s)\n        {\n            long temp = count;\n         \
    \   count += 1;\n            for (long i = count; i > 0; i -= temp)\n        \
    \    {\n                word += \"1\";\n                if (words[i - 1] != word)\n\
    \                    words.Insert(i, word);\n            }\n        }\n      \
    \  if (words.Count < n)\n            return new List<string>();\n        return\
    \ words;", "        char[] chars = s.ToCharArray();\n        List<string> list\
    \ = new List<string>();\n        int count = 0;\n        foreach (char c in chars)\
    \ {\n            if (c.ToString() == \"a\")\n                count++;\n      \
    \      else if (c.ToString() == \"e\")\n                count++;\n           \
    \ else if (c.ToString() == \"i\")\n                count++;\n            else\
    \ if (c.ToString() == \"o\")\n                count++;\n            else if (c.ToString()\
    \ == \"u\")\n                count++;\n            else if (c.ToString() == \"\
    y\")\n                count++;\n            else if (c.ToString() == \"o\")\n\
    \                count++;\n            else if (c.ToString() == \"y\")\n     \
    \           count++;\n            else if (c.ToString() == \"i\")\n          \
    \      count++;\n            else if (c.ToString() == \"e\")\n               \
    \ count++;\n            else if (c.ToString() == \"a\")\n                count++;\n\
    \            else if (c.ToString() == \"o\")\n                count++;\n     \
    \       else if (c.ToString() == \"y\")\n                count++;\n          \
    \  else if (c.ToString() == \"e\")\n                count++;\n            else\
    \ if (c.ToString() == \"a\")\n                count++;\n            else if (c.ToString()\
    \ == \"o\")\n                count++;\n            else if (c.ToString() == \"\
    y\")\n                count++;\n            else if (c.ToString() == \"i\")\n\
    \                count++;\n            else if (c.ToString() == \"e\")\n     \
    \           count++;\n            else if (c.ToString() == \"a\")\n          \
    \      count++;\n            else if (c.ToString() == \"o\")\n               \
    \ count++;\n            else if (c.ToString() == \"y\")\n                count++;\n\
    \            else if (c.ToString() == \"e\")\n                count++;\n     \
    \       else if (c.ToString() == \"a\")\n                count++;\n          \
    \  else if (c.ToString() == \"o\")\n                count++;\n            else\
    \ if (c.ToString() == \"y\")\n                count++;\n            else if (c.ToString()\
    \ == \"e\")\n                count++;\n            else if (c.ToString() == \"\
    a\")\n                count++;\n            else if (c.ToString() == \"o\")\n\
    \                count++;\n            else if (c.ToString() == \"y\")\n     \
    \           count++;\n            else if (c.ToString() == \"e\")\n          \
    \      count++;\n            else if (c.ToString() == \"a\")\n               \
    \ count++;\n            else if (c.ToString() == \"o\")\n                count++;\n\
    \            else if (c.ToString() == \"y\")\n                count++;\n     \
    \       else if (c.ToString() == \"i\")\n                count++;\n          \
    \  else if (c.ToString() == \"e\")\n                count++;\n            else\
    \ if (c.ToString() == \"a\")\n                count++;\n            else if (c.ToString()\
    \ == \"o\")\n                count++;\n            else if (c.ToString() == \"\
    y\")\n                count++;\n            else if (c.ToString() == \"e\")\n\
    \                count++;\n            else if (c.ToString() == \"a\")\n     \
    \           count++;\n            else if (c.ToString() == \"o\")\n          \
    \      ", "        char[] arr = s.ToCharArray();\n        List<string> ret = new\
    \ List<string>();\n        bool flag = true;\n        int i = 0;\n        int\
    \ j = 0;\n        while(i < arr.Length && flag) {\n            if(arr[i] == '\
    \ ') {\n                i++;\n                if(j < n) {\n                  \
    \  j++;\n                }\n            } else {\n                if(j < n) {\n\
    \                    j++;\n                    ret.Add(new string(arr, i));\n\
    \                    i = j + 1;\n                    flag = false;\n         \
    \       } else {\n                    i++;\n                }\n            }\n\
    \        }\n        if(i < arr.Length) {\n            for(int k = i; k < arr.Length;\
    \ k++) {\n                if(arr[k] == ' ') {\n                    i++;\n    \
    \            } else {\n                    flag = true;\n                }\n \
    \           }\n            if(flag) {\n                for(int k = i; k < arr.Length;\
    \ k++) {\n                    if(arr[k] == ' ') {\n                        i++;\n\
    \                    } else {\n                        ret.Add(new string(arr,\
    \ i));\n                        i = j + 1;\n                        flag = false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ ret;", "        if (s.Length == 0) {\n            return new List<string>();\n\
    \        }\n        string word = \"\";\n        List<string> result = new List<string>();\n\
    \        char[] chars = s.ToCharArray();\n        foreach (char c in chars) {\n\
    \            if (n >= char.ToLower(c)) {\n                word += c;\n       \
    \         if (word.Length == n) {\n                    result.Add(word);\n   \
    \             }\n            }\n        }\n        return result;", "        var\
    \ result = new List<string>();\n        \n        Debug.Assert(s.IsNotNullOrEmpty(),\
    \ \"The input string cannot be empty\");\n        Debug.Assert(n > 0L, \"The input\
    \ n must be positive\");\n        Debug.Assert(n <= s.Length, \"n cannot be bigger\
    \ than or equal to s.length\");\n\n        if (s.Length == 0)\n            return\
    \ new List<string>();\n\n        var count = Enumerable.Range(1, s.Length).TakeWhile(i\
    \ => !char.IsWhiteSpace(s[i]) && n != 1L).Count(i => char.IsLetter(s[i]));\n\n\
    \        if (n == count)\n            result.Add(s);\n\n        for (int i = 1;\
    \ i < s.Length; i++)\n            if (!char.IsLetter(s[i]) || n != count) {\n\
    \                result.Clear();\n                break;\n            }\n\n  \
    \      for (int i = n; i < s.Length; i++)\n            if (!char.IsLetter(s[i]))\n\
    \                break;\n\n        if (n == count)\n            result.Add(s);\n\
    \n        return result;", "        int i = 0;\n        List<string> words = new\
    \ List<string>();\n        string word = string.Empty;\n\n        while (i < s.Length)\
    \ {\n            if (s.CharAt(i) != ' ') {\n                word += s.CharAt(i);\n\
    \                i++;\n                if (word.Length >= n) {\n             \
    \       words.Add(word);\n                    word = string.Empty;\n         \
    \       }\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (word != string.Empty)\n            words.Add(word);\n\n     \
    \   return words;", "        long nL = n;\n        int nS = s.Length;\n      \
    \  int[] count = new int[nS + 1];\n        Array.Sort(s.ToCharArray(), count);\n\
    \        List<string> result = new List<string>();\n        long totalCount =\
    \ 0;\n        for (int i = 0; i <= nS; i++) {\n            totalCount += count[i];\n\
    \            if (totalCount == nL) {\n                result.Add(s.Substring(i,\
    \ s.Length - i));\n                break;\n            }\n        }\n        return\
    \ result;", "        // Your implementation goes here\n        return new List<string>();",
  "        var res = new List<string>();\n        var list = new List<char>();\n \
    \       int i = 0;\n        while (i != s.Length) {\n            if (s.Contains(s[i]))\
    \ {\n                if (list.Count == n) {\n                    res.Add((new\
    \ string(list)).ToLower());\n                    list.Clear();\n             \
    \       list.Add(s[i++]);\n                }\n                else {\n       \
    \             list.Add(s[i]);\n                }\n            }\n            else\
    \ {\n                list.Add(s[i]);\n            }\n        }\n        if (list.Count\
    \ != 0)\n            res.Add((new string(list)).ToLower());\n        return res;",
  '        return SelectWords(s, n, new List<string>());', "        HashSet<string>\
    \ result = new HashSet<string>();\n        SelectWords(s, n, result);\n      \
    \  return result.ToList();", "        List<string> r = new List<string>();\n \
    \       // TODO: your code here\n        return r;", "        // Your code here\n\
    \        long result = 0;\n        long count = 0;\n        string newWord = \"\
    \";\n        List<string> result = new List<string>();\n        char[] chars =\
    \ s.ToCharArray();\n        int nLen = s.Length;\n        string str=\"\";\n \
    \       for(int i=0;i<nLen;i++){\n            str += chars[i];\n            count++;\n\
    \            if(nLen -count==3){\n                if(str.Contains(\"a\") || str.Contains(\"\
    e\") || str.Contains(\"i\") || str.Contains(\"o\") || str.Contains(\"u\")){\n\
    \                    newWord = str.ToUpper();\n                    result.Add(newWord);\n\
    \                    str = \"\";\n                    count = 0;\n           \
    \     }\n            }\n        }\n        return result;", "        if(string.IsNullOrEmpty(s))\n\
    \            return new List<string>();\n        char[] chars = s.ToCharArray();\n\
    \        string result = \"\";\n        int count = 0;\n        bool found = false;\n\
    \        while(!found && chars.Length > 0)\n        {\n            count++;\n\
    \            if(chars.Length == 0)\n            {\n                found = true;\n\
    \                break;\n            }\n            char ch = chars[0];\n    \
    \        for(int i = 1; i < chars.Length; i++)\n            {\n              \
    \  if(chars[i] == ch)\n                {\n                    if(chars[i-1] ==\
    \ 'a' && chars[i+1] == 'p' && chars[i+2] == 'p')\n                    {\n    \
    \                    result = result + (result != \"\" ? \" \" : \"\") + ch;\n\
    \                        found = true;\n                    }\n              \
    \      break;\n                }\n            }\n            chars = chars.Skip(1).ToArray();\n\
    \        }\n        if(count == n)\n        {\n            return new List<string>(new\
    \ string[]{result});\n        }\n        return new List<string>();", "      \
    \  Debug.Assert(s !=null && s.Length > 0 && n > 0, \"Invalid parameter encountered.\"\
    );\n\n        long cnt = 0;\n        string word = null;\n        var ret = new\
    \ List<string>();\n        var list = s.ToLowerInvariant();\n\n        // get\
    \ all consonants\n        foreach (char c in list.Where(c => char.IsLetterOrDigit(c)).ToArray())\n\
    \        {\n            word = word == null ? c.ToString() : word + c.ToString();\n\
    \            cnt++;\n\n            if (cnt == n)\n                ret.Add(word);\n\
    \        }\n        if (word != null)\n            ret.Add(word);\n        return\
    \ ret;", "        var result = new List<string>();\n        if(string.IsNullOrWhiteSpace(s))\
    \ {\n            return result;\n        }\n        string str = s.ToLower();\n\
    \        var words = str.Split(' ').Where(x => !string.IsNullOrWhiteSpace(x)).ToList();\n\
    \        List<string> wordList = new List<string>();\n        bool flag = true;\n\
    \        long counter = 1;\n        foreach(var item in words) {\n           \
    \ if(item.Length > n) {\n                counter++;\n            }\n         \
    \   if(counter > n) {\n                flag = false;\n                break;\n\
    \            }\n            wordList.Add(item);\n        }\n        if(flag) {\n\
    \            for(int i = 0; i < wordList.Count; i++) {\n                foreach(var\
    \ item in wordList[i]) {\n                    if(!result.Contains(item)) {\n \
    \                       result.Add(item);\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        string result\
    \ = string.Empty;\n        List<string> list = new List<string>();\n        string\
    \ tmp;\n        int i = 0;\n        int j = 0;\n        long totalWords = 1;\n\
    \        while (i != s.Length) {\n            tmp = s.Substring(i, 1);\n     \
    \       string t = tmp.ToLower();\n            if (t.Length == 1 && t == \"a\"\
    ) {\n                list.Add(string.Empty);\n                totalWords++;\n\
    \                i += 1;\n            } else if (t.Length > 1 && n >= totalWords)\
    \ {\n                j = 0;\n                while ((j < s.Length) && s.Substring(i,\
    \ j).ToLower().Contains(t)) {\n                    j++;\n                }\n \
    \               list.Add(s.Substring(i, j));\n                i += j;\n      \
    \          totalWords++;\n            } else {\n                i += 1;\n    \
    \        }\n        }\n        return list;", "        if (s == null) {\n    \
    \        return new List<string>();\n        }\n        List<string> words = new\
    \ List<string>();\n        foreach (char letter in s.ToCharArray()) {\n      \
    \      if (letter == '\\0' || string.IsNullOrEmpty(letter)) {\n              \
    \  continue;\n            }\n            if (s.IndexOf(letter) != -1) {\n    \
    \            int count = 0;\n                int index = s.IndexOf(letter);\n\
    \                while (index != -1) {\n                    count++;\n       \
    \             s = s.Remove(index, 1);\n                    index = s.IndexOf(letter);\n\
    \                }\n                if (count >= n) {\n                    words.Add(letter);\n\
    \                }\n            }\n        }\n        if (words.Count == 0) {\n\
    \            words.Add(s);\n        }\n        return words;", "        // Step\
    \ 1: Implement your solution\n        // You will need to iterate over every character\
    \ in string s and count how many \n        // characters are consonants.\n   \
    \     List<string> result = new List<string>();\n        if (s != \"\")\n    \
    \    {\n            for (int i = 0; i < s.Length; i++)\n            {\n      \
    \          char c = s[i];\n                if (!char.IsLetter(c))\n          \
    \      {\n                    return result;\n                }\n            }\n\
    \        }\n        return result;", "        StringBuilder words = new StringBuilder();\n\
    \        var result = new List<string>();\n        if (String.IsNullOrEmpty(s))\
    \ {\n            return result;\n        }\n        var len = s.Length;\n    \
    \    var result = new List<string>();\n        var currentCount = 0;\n       \
    \ var isInGroup = false;\n        var word = new StringBuilder();\n        var\
    \ wordCount = 0;\n        var currentWord = word;\n        while (s.Length > 0)\
    \ {\n            char c = s[0];\n            currentWord.Append(c);\n        \
    \    currentCount++;\n            if (char.IsLetterOrDigit(c)) {\n           \
    \     wordCount++;\n                if (wordCount >= n) {\n                  \
    \  result.Add(currentWord.ToString());\n                    currentCount = 1;\n\
    \                    wordCount = 0;\n                }\n                word =\
    \ new StringBuilder();\n            }\n            if (char.IsSpaceOrNewLine(c))\
    \ {\n                if (!isInGroup) {\n                    if (currentCount >\
    \ 1 && currentCount < n) {\n                        result.Add(currentWord.ToString());\n\
    \                    }\n                    if (currentCount == 1 && word.Length\
    \ > 0) {\n                        result.Add(currentWord.ToString());\n      \
    \              }\n                    if (currentCount > 1 && currentCount < n\
    \ && word.Length > 0) {\n                        result.Add(currentWord.ToString());\n\
    \                    }\n                    isInGroup = true;\n              \
    \  }\n                currentCount = 0;\n                wordCount = 0;\n    \
    \        }\n            else if (char.IsLetterOrDigit(c)) {\n                isInGroup\
    \ = true;\n            }\n            else\n                isInGroup = false;\n\
    \            currentWord.Remove(0, 1);\n            s.Remove(0, 1);\n        }\n\
    \        return result;", "        string x = \"\";\n        string y = \"\";\n\
    \        string z = \"\";\n        List<string> z2 = new List<string>();\n   \
    \     if (String.IsNullOrEmpty(s))\n        {\n            return new List<string>();\n\
    \        }\n        else\n        {\n            for (int i = 0; i < s.Length;\
    \ i++)\n            {\n                x = s.Substring(i, 1);\n              \
    \  y = s.Substring(i + 1, 1);\n                z = s.Substring(i + 2, 1);\n  \
    \              if (x.Equals(\"A\") && y.Equals(\"E\") && z.Equals(\"I\") && n\
    \ <= 5)\n                {\n                    z2.Add(z);\n                }\n\
    \                if (x.Equals(\"B\") && y.Equals(\"F\") && z.Equals(\"I\") &&\
    \ n <= 4)\n                {\n                    z2.Add(z);\n               \
    \ }\n                if (x.Equals(\"C\") && y.Equals(\"G\") && z.Equals(\"I\"\
    ) && n <= 5)\n                {\n                    z2.Add(z);\n            \
    \    }\n                if (x.Equals(\"D\") && y.Equals(\"H\") && z.Equals(\"\
    I\") && n <= 4)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"E\") && y.Equals(\"J\") && z.Equals(\"\
    K\") && n <= 6)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"F\") && y.Equals(\"L\") && z.Equals(\"\
    M\") && n <= 5)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"G\") && y.Equals(\"L\") && z.Equals(\"\
    M\") && n <= 6)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"H\") && y.Equals(\"N\") && z.Equals(\"\
    O\") && n <= 7)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"I\") && y.Equals(\"N\") && z.Equals(\"\
    O\") && n <= 6)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"J\") && y.Equals(\"P\") && z.Equals(\"\
    R\") && n <= 7)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"K\") && y.Equals(\"P\") && z.Equals(\"\
    R\") && n <= 6)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"L\") && y.Equals(\"Q\") && z.Equals(\"\
    S\") && n <= 7)\n                {\n                    z2.Add(z);\n         \
    \       }\n                if (x.Equals(\"M\") && y.Equals(\"Q\") && z.Equals(\"\
    S\") && n ", "        List<string> result = new List<string>();\n        if (n\
    \ == 0) {\n            return result;\n        }\n        bool flag = false;\n\
    \        char[] arr = s.ToCharArray();\n        for (int i = 0; i < arr.Length;\
    \ i++) {\n            flag = false;\n            for (int j = 0; j < arr.Length;\
    \ j++) {\n                if (arr[i] == arr[j]) {\n                    if (!flag)\
    \ {\n                        result.Add(s);\n                        flag = true;\n\
    \                    }\n                }\n                if (arr[i] == ' ' &&\
    \ !flag) {\n                    result.Add(s);\n                    flag = true;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<string> result = new List<string>();\n        if (String.IsNullOrEmpty(s))\
    \ {\n            return result;\n        }\n        string vowels = \"AEIOUaeiou\"\
    ;\n        char vowelChar = vowels.ToCharArray()[0];\n        if (vowels.ToCharArray().Length\
    \ == 2) {\n            vowels = \"AEIOUaeiouy\";\n            vowelChar = vowels.ToCharArray()[0];\n\
    \        }\n        string consonants = \"BCDFGHKLMNPRSTVWXYZbcdfghklmnprstvwxyz\"\
    ;\n        char consonantChar = consonants.ToCharArray()[0];\n        long count\
    \ = 0;\n        HashSet<char> hash = new HashSet<char>();\n        foreach (char\
    \ c in s) {\n            if (hash.Contains(c)) {\n                count++;\n \
    \           }\n            hash.Add(c);\n        }\n        if (count < n) {\n\
    \            char[] consonants2 = consonants.ToCharArray();\n            char[]\
    \ vowels2 = vowels.ToCharArray();\n            while (count < n) {\n         \
    \       result.Add(consonants2[(int)(Math.random() * (consonants2.Length - 1))]\
    \ + vowels2[(int)(Math.random() * (vowels2.Length - 1))]);\n                count++;\n\
    \            }\n        }\n        foreach (string word in result.Distinct())\
    \ {\n            if (word.Length == n) {\n                result.Remove(word);\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here\n        return \"\";", "        // Add your code here\n        if (String.IsNullOrWhiteSpace(s))\n\
    \            return new List<string>();\n\n        List<string> result = new List<string>();\n\
    \n        long c = 0;\n        foreach (var c in s.ToCharArray())\n        {\n\
    \            if (Char.IsLetter(c))\n            {\n                result.Add(s.Substring(c,\
    \ 1));\n            }\n            else\n            {\n                c--;\n\
    \            }\n        }\n\n        if (n < result.Count)\n            result.RemoveRange(result.Count\
    \ - n, result.Count);\n\n        return result;", "        List<string> result\
    \ = new List<string>();\n        if (s == \"\") {\n            result.Add(\"\"\
    );\n            return result;\n        }\n        List<char> chars = GetCharacters(s);\n\
    \        bool hasConsonants = false;\n        foreach (char c in chars) {\n  \
    \          if (IsConsonant(c)) {\n                hasConsonants = true;\n    \
    \        }\n        }\n        if (hasConsonants == false) return result;\n  \
    \      List<long> counts = new List<long>();\n        for (int i = 0; i < chars.Count;\
    \ i++) {\n            counts.Add(0);\n        }\n        for (int i = 0; i < chars.Count;\
    \ i++) {\n            counts[chars[i] - 'a'] += 1;\n        }\n        List<string>\
    \ words = new List<string>();\n        string lastWord = \"\";\n        long maxCount\
    \ = 0;\n        for (int i = 0; i < counts.Count; i++) {\n            long count\
    \ = counts[i];\n            if (count >= n) {\n                words.Add(lastWord);\n\
    \                if (count > maxCount) {\n                    maxCount = count;\n\
    \                }\n            }\n            else if (count > maxCount) {\n\
    \                words.Add(lastWord);\n                maxCount = count;\n   \
    \         }\n            else {\n                lastWord = GetWord(lastWord,\
    \ count);\n            }\n        }\n        result.AddRange(words);\n       \
    \ return result;", "        var ret = new List<string>();\n        var stack =\
    \ new Stack<string>();\n        bool match = false;\n\n        foreach (var c\
    \ in s) {\n            if (c.ToCharArray().All(char.IsLetter)) {\n           \
    \     stack.Clear();\n                var lastChar = c;\n                while\
    \ (!stack.Any()) {\n                    match = false;\n                    foreach\
    \ (var p in ps) {\n                        stack.Push(p);\n                  \
    \      if (lastChar.ToCharArray().All(char.IsLetter)) {\n                    \
    \        var sRes = stack.ToArray();\n                            ret.AddRange(s.Split(sRes.Select(t\
    \ => t), StringSplitOptions.None));\n                            ret.RemoveAll(t\
    \ => t.Equals(s));\n                            match = true;\n              \
    \          }\n                        stack.Pop();\n                    }\n  \
    \                  if (!match) break;\n                }\n            }\n    \
    \        else {\n                break;\n            }\n        }\n        return\
    \ ret;", "        var list = new List<string>();\n\n        if (String.IsNullOrEmpty(s))\
    \ return list;\n\n        long totalCharacterCount = 0;\n\n        foreach (var\
    \ c in s) {\n            if (char.IsLetter(c) || c == ' ')\n                totalCharacterCount++;\n\
    \        }\n\n        if (totalCharacterCount > n)\n            return list;\n\
    \n        int letterCount = 0;\n\n        var groups = from c in s\n         \
    \            let isLetter = char.IsLetter(c)\n                     select new\n\
    \                     {\n                         Character = c,\n           \
    \              IsLetter = isLetter,\n                         Count = isLetter\
    \ ? 1 : 0\n                     };\n\n        foreach (var group in groups)\n\
    \        {\n            if (group.IsLetter) letterCount++;\n\n            if (letterCount\
    \ == n)\n                list.Add(group.Character);\n        }\n\n        return\
    \ list;", "        // write your implementation here\n        if (s.Length ==\
    \ 0) {\n            return new List<string>();\n        }\n        char[] arr\
    \ = s.ToCharArray();\n        List<string> result = new List<string>();\n    \
    \    string temp = \"\";\n        long count = 0;\n        long i = 1;\n     \
    \   long count = 0;\n        foreach (char item in arr) {\n            if (item.ToString()\
    \ == \"H\" || item.ToString() == \"e\" || item.ToString() == \"l\" || item.ToString()\
    \ == \"o\" || item.ToString() == \"W\" || item.ToString() == \"o\" || item.ToString()\
    \ == \"r\" || item.ToString() == \"d\" || item.ToString() == \"u\" || item.ToString()\
    \ == \"r\" || item.ToString() == \"c\" || item.ToString() == \"a\") {\n      \
    \          temp += item.ToString();\n                count++;\n            }\n\
    \            else if (item.ToString() == \"s\") {\n                temp += item.ToString();\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.Add(temp);\n        }\n        foreach (char item in arr)\
    \ {\n            i++;\n            if (i == n) {\n                result.Add(temp);\n\
    \            }\n            else\n            {\n                temp = \"\";\n\
    \                count = 0;\n            }\n        }\n        return result;",
  "        if (String.IsNullOrEmpty(s)) return new List<string>();\n        if (n\
    \ == 0) return new List<string>();\n        char[] chars = s.ToCharArray();\n\
    \        List<string> list = new List<string>();\n        long k = 0;\n      \
    \  bool hasMore = true;\n        while(hasMore) {\n            hasMore = false;\n\
    \            long k = k + 1;\n            for( int i = 0; i < (chars.Length -\
    \ k); i++) {\n                char c = chars[i];\n                if(c > 128)\
    \ {\n                    if(chars[i + 1] >= 128) continue;\n                 \
    \   if(chars[i + 1] < 128) list.Add(new string(new char[] {c}));\n           \
    \         else list.Add(new string(new char[] { c, (chars[i + 1] + 1)}));\n  \
    \                  k = k + 1;\n                }\n            }\n            long\
    \ l = k;\n            k = k + n + 1;\n            for( int i = chars.Length -\
    \ k; i < chars.Length; i++) {\n                list.Add(new string(new char[]\
    \ {chars[i]}));\n            }\n            if(l > k) {\n                hasMore\
    \ = true;\n            }\n        }\n        return list;", "        List<string>\
    \ result = new List<string>();\n        string word = \"\";\n        Regex r =\
    \ new Regex(@\"(?i)\\b\\w+\\b\");\n        string word = r.Replace(s, string.Empty);\n\
    \        string word2 = word.Replace(\" \", \"\");\n        string word3 = word2.Replace(\"\
    ,\", \"\");\n        string word4 = word3.Replace(\".\", \"\");\n        string\
    \ word5 = word4.Replace(\"(\", \"\").Replace(\")\", \"\").Replace(\"!\", \"\"\
    ).Replace(\"?\", \"\").Replace(\";\", \"\").Replace(\":\", \"\").Replace(\"<\"\
    , \"\").Replace(\">\", \"\").Replace(\"%\", \"\").Replace(\"^\", \"\").Replace(\"\
    $\", \"\").Replace(\"&\", \"\").Replace(\"*\", \"\").Replace(\"(\", \"\").Replace(\"\
    )\", \"\").Replace(\"!\", \"\").Replace(\"?\", \"\").Replace(\";\", \"\").Replace(\"\
    :\", \"\").Replace(\"<\", \"\").Replace(\">\", \"\").Replace(\"%\", \"\").Replace(\"\
    ^\", \"\").Replace(\"$\", \"\").Replace(\"&\", \"\").Replace(\"*\", \"\").Replace(\"\
    (\", \"\").Replace(\")\", \"\").Replace(\"!\", \"\").Replace(\"?\", \"\").Replace(\"\
    ;\", \"\").Replace(\":\", \"\").Replace(\"<\", \"\").Replace(\">\", \"\").Replace(\"\
    %\", \"\").Replace(\"^\", \"\").Replace(\"$\", \"\").Replace(\"&\", \"\").Replace(\"\
    *\", \"\").Replace(\"(\", \"\").Replace(\")\", \"\").Replace(\"!\", \"\").Replace(\"\
    ?\", \"\").Replace(\";\", \"\").Replace(\":\", \"\").Replace(\"<\", \"\").Replace(\"\
    >\", \"\").Replace(\"%\", \"\").Replace(\"^\", \"\").Replace(\"$\", \"\").Replace(\"\
    &\", \"\").Replace(\"*\", \"\").Replace(\"(\", \"\").Replace(\")\", \"\").Replace(\"\
    !\", \"\").Replace(\"?\", \"\").Replace(\";\", \"\").Replace(\":\", \"\").Replace(\"\
    <\", \"\").Replace(\">\", \"\").Replace(\"%\", \"\").Replace(\"^\", \"\").Replace(\"\
    $\", \"\").Replace(\"&\", \"\").Replace(\"*\", \"\").Replace(\"(\", \"\").Replace(\"\
    )\", \"\").Replace(\"!\", \"\").Replace(\"?\", \"\").Replace(\";\", \"\").Replace(\"\
    :\", \"\").Replace(\"<\", \"\").Replace(\">\", \"\").Replace(\"%\", \"\").Replace(\"\
    ^\", \"\").Replace(\"$\", \"\").Replace(\"&\", \"\").Replace(\"*\", \"\").Replace(\"\
    (\", \"\").Replace(\")\", \"\").Replace(\"!\", \"\").Replace(\"?\", \"\").Replace(\"\
    ;\", \"\").Replace(\":\", \"\").Replace(\"<\", \"\").Replace(\">\", \"\").Replace(\"\
    %\", \"\").Replace(\"^\", \"\"", "        char[] chars = s.ToCharArray();\n  \
    \      var words = new List<string>();\n        var stack = new Stack<string>();\n\
    \        bool insideWord = false;\n        foreach (var c in chars) {\n      \
    \      if (insideWord) {\n                insideWord = false;\n              \
    \  stack.Push(c);\n            }\n            if (char.IsLetterOrDigit(c)) {\n\
    \                if (stack.Count == n) {\n                    insideWord = true;\n\
    \                }\n            }\n            else if (c == ' ') {\n        \
    \        if (stack.Count == n) {\n                    insideWord = true;\n   \
    \                 words.Add(string.Join(\"\", stack));\n                    stack.Clear();\n\
    \                }\n            }\n        }\n        if (stack.Count > 0) {\n\
    \            words.Add(string.Join(\"\", stack));\n        }\n        return words;",
  "        // Your code here\n        var result = new List<string>();\n        var\
    \ i = 0;\n        string word = \"\";\n        while (i < s.Length) {\n      \
    \      if (s.Length > i + n && i < s.Length - n) {\n                for (int j\
    \ = 0; j <= i; j++) {\n                    if (char.IsLower(s[j])) {\n       \
    \                 word += s[j];\n                    }\n                }\n  \
    \              for (int j = i; j <= i+ n; j++) {\n                    if (char.IsLower(s[j]))\
    \ {\n                        word += s[j];\n                    }\n          \
    \      }\n                result.Add(word);\n                word = \"\";\n  \
    \          }\n            i++;\n        }\n        if (s.Length > i && i < s.Length\
    \ - n) {\n            for (int j = i; j <= s.Length - n; j++) {\n            \
    \    if (char.IsLower(s[j])) {\n                    word += s[j];\n          \
    \      }\n            }\n            result.Add(word);\n        }\n        return\
    \ result;", "        if (s == \"\") return new List<string>();\n        var result\
    \ = new List<string>();\n        foreach (var word in s.Split(' '))\n        {\n\
    \            var count = 0;\n            foreach (var letter in word)\n      \
    \      {\n                if (Letters.Contains(letter)) count++;\n           \
    \ }\n            if (count == n) result.Add(word);\n        }\n        return\
    \ result;", "        if (s.Length == 0) {\n            return new List<string>();\n\
    \        }\n        string lowerS = s.ToLower();\n        HashSet<string> matches\
    \ = new HashSet<string>();\n        // The below code is what makes this problem\
    \ a little harder. It makes \n        // it easier by splitting the input string\
    \ into words and then reordering them\n        // to find the substring that matches\
    \ the target length n. However, the \n        // below algorithm won't work for\
    \ strings with repeated letters.\n        var splits = new List<string>();\n \
    \       foreach (char c in lowerS) {\n            if (char.IsLetter(c) && splits.Count\
    \ == 0) {\n                splits.Add(c);\n            }\n            if (char.IsLetter(c)\
    \ && splits.Count > 0) {\n                splits.Add(c);\n            }\n    \
    \        if (char.IsLetter(c)) {\n                if (splits.Count > n) {\n  \
    \                  splits = splits.Take(n).ToList();\n                }\n    \
    \            splits.Add(c);\n            }\n        }\n        // At this point,\
    \ splits is a list of all possible substrings, including\n        // repeated\
    \ letters.\n        // Now we go through each substring, finding all the occurrences\
    \ of \n        // the target length. We maintain a dictionary that associates\
    \ a substring\n        // to the number of occurrences of that substring. Once\
    \ we have done this,\n        // we can loop through the list of substrings and\
    \ add the strings that \n        // match to matches.\n        Dictionary<string,\
    \ long> countDict = new Dictionary<string, long>();\n        foreach (string s\
    \ in splits) {\n            foreach (char c in s) {\n                if (countDict.ContainsKey(c))\
    \ {\n                    countDict[c] = countDict[c] + 1;\n                }\n\
    \                else {\n                    countDict.Add(c, 1);\n          \
    \      }\n            }\n        }\n        // Now that we have done this, we\
    \ can loop through the dictionary to find \n        // all substrings that are\
    \ equal to the target length and add them to \n        // matches.\n        foreach\
    \ (KeyValuePair<string, long> entry in countDict) {\n            if (entry.Value\
    \ == n) {\n                matches.Add(entry.Key);\n            }\n        }\n\
    \        List<string> result = new List<string>();\n        if (matches.Count\
    \ > 0) {\n            result = matches.ToList();\n        }\n        return result;",
  "        if (string.IsNullOrEmpty(s)) return new List<string>();\n        var res\
    \ = new List<string>();\n        // We start by looking for the first non-letter\n\
    \        var pos = s.IndexOf(\" \", s.Length - 1);\n        // We assume that\
    \ the first non-letter will always be the last one\n        while (pos != -1)\
    \ {\n            if (SelectNonLettersCount(s, pos, n).Count < n) break;\n    \
    \        pos = s.IndexOf(\" \", pos);\n        }\n        // Since this was not\
    \ a letter we assume that last letter was the end\n        // We can start by\
    \ looking for non letters till the last letter\n        while (pos != -1) {\n\
    \            if (SelectNonLettersCount(s, pos, n).Count > n) break;\n        \
    \    pos = s.IndexOf(\" \", pos + 1);\n        }\n        // This last letter\
    \ must be the end of the string.\n        if (pos == -1) res.Add(s.Substring(0,\
    \ s.Length - 1));\n        // Now we look for the first letter\n        pos =\
    \ s.IndexOf(' ', s.Length - 1);\n        // We assume that the first letter will\
    \ always be the last one\n        while (pos != -1) {\n            if (SelectLettersCount(s,\
    \ pos, n).Count < n) break;\n            pos = s.IndexOf(' ', pos);\n        }\n\
    \        // Since this was not a letter we assume that last letter was the end\n\
    \        // We can start by looking for letters till the last letter\n       \
    \ while (pos != -1) {\n            if (SelectLettersCount(s, pos, n).Count > n)\
    \ break;\n            pos = s.IndexOf(' ', pos + 1);\n        }\n        // This\
    \ last letter must be the end of the string.\n        if (pos == -1) res.Add(s.Substring(0,\
    \ s.Length - 1));\n        // Now we look at the other part\n        pos = s.IndexOf('\
    \ ', s.Length - 1);\n        // We assume that the first letter will always be\
    \ the last one\n        while (pos != -1) {\n            if (SelectNonLettersCount(s,\
    \ pos, n).Count < n) break;\n            pos = s.IndexOf(' ', pos);\n        }\n\
    \        // Since this was not a letter we assume that last letter was the end\n\
    \        // We can start by looking for letters till the last letter\n       \
    \ while (pos != -1) {\n            if (SelectNonLettersCount(s, pos, n).Count\
    \ > n) break;\n            pos = s.IndexOf(' ', pos + 1);\n        }\n       \
    \ // This last letter must be the end of the string.\n        if (pos == -1) res.Add(s.Substring(0,\
    \ s.Length - 1));\n        return res;", "        List<string> result = new List<string>();\n\
    \        bool isWord = false;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            string word = s.Substring(i, i + 1);\n            for (int j = 0;\
    \ j < word.Length; j++) {\n                char letter = word[j];\n          \
    \      if (!isWord) {\n                    isWord = true;\n                  \
    \  result.Add(word);\n                } else {\n                    string currentWord\
    \ = word + \" \" + currentWord;\n                    long currentWordLength =\
    \ currentWord.Length;\n                    if (currentWordLength > n) {\n    \
    \                    isWord = false;\n                        break;\n       \
    \             }\n                    if (IsConsonant(letter, currentWord.Substring(0,\
    \ currentWordLength - 1))) {\n                        isWord = false;\n      \
    \                  break;\n                    }\n                    for (int\
    \ k = 0; k < currentWordLength; k++) {\n                        if (!IsConsonant(letter,\
    \ currentWord.Substring(currentWordLength - 1, k))) {\n                      \
    \      isWord = false;\n                            break;\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        if (s.Length > 0) {\n            isWord = false;\n            string\
    \ word = s.Substring(0, s.Length - 1);\n            for (int j = 0; j < word.Length;\
    \ j++) {\n                char letter = word[j];\n                if (!isWord)\
    \ {\n                    isWord = true;\n                    result.Add(word);\n\
    \                } else {\n                    string currentWord = word + \"\
    \ \" + currentWord;\n                    long currentWordLength = currentWord.Length;\n\
    \                    if (currentWordLength > n) {\n                        isWord\
    \ = false;\n                        break;\n                    }\n          \
    \          if (IsConsonant(letter, currentWord.Substring(0, currentWordLength\
    \ - 1))) {\n                        isWord = false;\n                        break;\n\
    \                    }\n                    for (int k = 0; k < currentWordLength;\
    \ k++) {\n                        if (!IsConsonant(letter, currentWord.Substring(currentWordLength\
    \ - 1, k))) {\n                            isWord = false;\n                 \
    \           break;\n                        }\n                    }\n       \
    \         }\n            }\n        }\n        return result;", "        var result\
    \ = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return\
    \ result;\n        }\n        \n        var chars = new List<string>();\n    \
    \    for (int i = 0; i <= s.Length; i++) {\n            chars.Add(s.Substring(i,1));\n\
    \        }\n        \n        List<string> candidates = new List<string>();\n\
    \        \n        for (int j = 0; j < chars.Count; j++) {\n            candidates.AddRange(SelectWordsWith(candidates,\
    \ j, chars, n, s, \"\"));\n        }\n        \n        return candidates;", " \
    \       if (string.IsNullOrEmpty(s))\n            return new List<string>();\n\
    \n        List<string> words = new List<string>();\n\n        long count1 = 0;\n\
    \        long count2 = 0;\n        long count3 = 0;\n        long count4 = 0;\n\
    \n        string tempString = string.Empty;\n        long currentCount = 1;\n\
    \        foreach (char letter in s) {\n            count1 += currentCount;\n \
    \           if (letter == 'b')\n                count2++;\n            else if\
    \ (letter == 'c')\n                count3++;\n            else if (letter == 'd')\n\
    \                count4++;\n            else if (letter == 'p')\n            \
    \    currentCount += 3;\n        }\n        if (count1 == n && count2 == n &&\
    \ count3 == n && count4 == n)\n            words.Add(s);\n        if (count1 >\
    \ n || count2 > n || count3 > n || count4 > n)\n            return words;\n\n\
    \        long temp = n;\n        while (n > 0) {\n            long temp = temp\
    \ / 4;\n            long temp1 = temp;\n            temp = temp - temp1;\n\n \
    \           string tempString = string.Empty;\n            long currentCount1\
    \ = 1;\n            long currentCount2 = 1;\n            long currentCount3 =\
    \ 1;\n            long currentCount4 = 1;\n            foreach (char letter in\
    \ s) {\n                currentCount1 += currentCount;\n                currentCount2\
    \ += currentCount;\n                currentCount3 += currentCount;\n         \
    \       currentCount4 += currentCount;\n                if (letter == 'b')\n \
    \                   currentCount1++;\n                else if (letter == 'c')\n\
    \                    currentCount2++;\n                else if (letter == 'd')\n\
    \                    currentCount3++;\n                else if (letter == 'p')\n\
    \                    currentCount4++;\n            }\n            if (currentCount1\
    \ == n && currentCount2 == n && currentCount3 == n && currentCount4 == n)\n  \
    \              words.Add(s);\n\n            if (currentCount1 > n || currentCount2\
    \ > n || currentCount3 > n || currentCount4 > n)\n                return words;\n\
    \        }\n\n        if (currentCount > n)\n            return words;\n\n   \
    \     string tempString = string.Empty;\n        long currentCount1 = 1;\n   \
    \     long currentCount2 = 1;\n        long currentCount3 = 1;\n        long currentCount4\
    \ = 1;\n        foreach (char letter in s) {\n            currentCount1 += currentCount;\n\
    \            currentCount2 += currentCount;\n            currentCount3 += currentCount;\n\
    \            currentCount4 += currentCount;\n            if (letter == 'b')\n\
    \                currentCount1++;\n            else if (letter == 'c')\n     \
    \           currentCount2++;\n            else if (letter == 'd')\n          \
    \      currentCount3++;\n            else if (letter == 'p')\n                ",
  "        string res = \"\";\n        bool first = true;\n        foreach(char c\
    \ in s) {\n            long curLen = s.Count(x => x == c);\n            if(curLen\
    \ == n) {\n                if(!first) {\n                    res += \" \";\n \
    \               }\n                res += c.ToString();\n                first\
    \ = false;\n            }\n        }\n        if(first) {\n            return\
    \ new List<string>();\n        }\n        return new List<string>(res.Split('\
    \ ').ToList());", '        return SelectWords(s, n, new List<string>());', " \
    \       List<string> list = new List<string>();\n        if (String.IsNullOrEmpty(s))\
    \ {\n            return list;\n        }\n        StringBuilder sb = new StringBuilder(s);\n\
    \        for (int i = 0; i < sb.Length; i++) {\n            string str = sb.ToString().Substring(0,\
    \ i);\n            bool found = false;\n            for (int j = 0; j < n; j++)\
    \ {\n                if (str.Contains(\"a\")) found = true;\n                else\
    \ if (str.Contains(\"e\")) found = true;\n                else if (str.Contains(\"\
    i\")) found = true;\n                else if (str.Contains(\"o\")) found = true;\n\
    \                else if (str.Contains(\"u\")) found = true;\n               \
    \ else if (str.Contains(\"y\")) found = true;\n                else if (str.Contains(\"\
    b\")) found = true;\n                else if (str.Contains(\"l\")) found = true;\n\
    \                else if (str.Contains(\"s\")) found = true;\n               \
    \ else if (str.Contains(\"p\")) found = true;\n                else if (str.Contains(\"\
    d\")) found = true;\n                else if (str.Contains(\"t\")) found = true;\n\
    \                else if (str.Contains(\"m\")) found = true;\n               \
    \ else if (str.Contains(\"h\")) found = true;\n                else if (str.Contains(\"\
    g\")) found = true;\n                else if (str.Contains(\"z\")) found = true;\n\
    \            }\n            if (found) {\n                list.Add(str);\n   \
    \         }\n        }\n        return list;", "        var list = new List<string>();\n\
    \        var words = new HashSet<string>();\n        list.AddRange(SelectWords(s,\
    \ new List<string>(words), n));\n        return list;", "        if (String.IsNullOrEmpty(s))\
    \ return new List<string>();\n        var letters = s ?? \"\";\n        var list\
    \ = s.Split(null, (char)' ');\n        var count = letters.Count(l => l == ' ');\n\
    \        if (count == 0) return new List<string>();\n        string str = \"\"\
    ;\n        var nums = new HashSet<int>();\n        var index = 0;\n        foreach\
    \ (char letter in letters) {\n            if (letter != ' ') str = $\"{str} {letter}\"\
    ;\n            if (index == list.Length - 1) break;\n            var num = Int32.Parse(str);\n\
    \            nums.Add(num);\n            str = String.Empty;\n            index++;\n\
    \        }\n        if (nums.Count != n) throw new ArgumentException(\"invalid\
    \ number\");\n        \n        List<string> list = new List<string>();\n    \
    \    foreach (var num in nums) {\n            var stringBuilder = new StringBuilder();\n\
    \            while (num > 0) {\n                var remain = num % 10;\n     \
    \           num -= remain;\n                stringBuilder.Append((char)('0' +\
    \ remain));\n            }\n            list.Add(stringBuilder.ToString());\n\
    \        }\n        return list;", "        // TODO: Implement the function\n\
    \        return new List<string>();", "        List<string> result = new List<string>();\n\
    \        if (s == \"\") \n            return new List<string>();\n        for\
    \ (int i = 0; i < s.Length; i++)\n        {\n            if (s.Substring(0, i).ToLower()\
    \ == s.Substring(0, i).ToLower()[i])\n            {\n                if (s.Substring(0,\
    \ i).ToLower() == s.Substring(0, i).ToLower()[i])\n                {\n       \
    \             result.Add(s.Substring(0, i));\n                }\n            \
    \    else\n                {\n                    for (int j = 0; j < s.Length;\
    \ j++)\n                    {\n                        if (s.Substring(0, i).ToLower()\
    \ == s.Substring(i, j).ToLower()[j])\n                        {\n            \
    \                result.Add(s.Substring(0, i));\n                        }\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result;", "        char[] chr = s.ToCharArray();\n        List<string> ret =\
    \ new List<string>();\n        if (s.Length == 0) {\n            return ret;\n\
    \        }\n        HashSet<string> h = new HashSet<string>();\n        List<string>\
    \ l = new List<string>();\n        // get all consonants\n        foreach (char\
    \ c in chr) {\n            string w = \"\";\n            if (c == 'a') {\n   \
    \             w = c; w.ToLower();\n                h.Add(w);\n            }\n\
    \            else if (c == 'b') {\n                w = c; w.ToLower();\n     \
    \           h.Add(w);\n            }\n            else if (c == 'c') {\n     \
    \           w = c; w.ToLower();\n                h.Add(w);\n            }\n  \
    \          else if (c == 'd') {\n                w = c; w.ToLower();\n       \
    \         h.Add(w);\n            }\n            else if (c == 'e') {\n       \
    \         w = c; w.ToLower();\n                h.Add(w);\n            }\n    \
    \        else if (c == 'f') {\n                w = c; w.ToLower();\n         \
    \       h.Add(w);\n            }\n            else if (c == 'g') {\n         \
    \       w = c; w.ToLower();\n                h.Add(w);\n            }\n      \
    \      else if (c == 'h') {\n                w = c; w.ToLower();\n           \
    \     h.Add(w);\n            }\n            else if (c == 'i') {\n           \
    \     w = c; w.ToLower();\n                h.Add(w);\n            }\n        \
    \    else if (c == 'j') {\n                w = c; w.ToLower();\n             \
    \   h.Add(w);\n            }\n            else if (c == 'k') {\n             \
    \   w = c; w.ToLower();\n                h.Add(w);\n            }\n          \
    \  else if (c == 'l') {\n                w = c; w.ToLower();\n               \
    \ h.Add(w);\n            }\n            else if (c == 'm') {\n               \
    \ w = c; w.ToLower();\n                h.Add(w);\n            }\n            else\
    \ if (c == 'n') {\n                w = c; w.ToLower();\n                h.Add(w);\n\
    \            }\n            else if (c == 'o') {\n                w = c; w.ToLower();\n\
    \                h.Add(w);\n            }\n            else if (c == 'p') {\n\
    \                w = c; w.ToLower();\n                h.Add(w);\n            }\n\
    \            else if (c == 'q') {\n                w = c; w.ToLower();\n     \
    \           h.Add(w);\n            }\n            else if (c == 'r') {\n     \
    \           w = c; w.ToLower();\n                h.Add(w);\n            }\n  \
    \          else if (c == 's') {\n", "        // Add your code here\n        string\
    \ key = \"\";\n        string keyTemp;\n        List<string> returnList = new\
    \ List<string>();\n        if(s == \"\")\n        {\n            return returnList;\n\
    \        }\n        Dictionary<string, long> dictionary = new Dictionary<string,\
    \ long>();\n        char[] characters = s.ToCharArray();\n        for(int i =\
    \ 0; i < characters.Length; i++)\n        {\n            string key = characters[i].ToString();\n\
    \            keyTemp = key;\n            dictionary.Add(key,0);\n        }\n \
    \       foreach(var item in dictionary)\n        {\n            if(item.Value\
    \ == n)\n            {\n                returnList.Add(item.Key);\n          \
    \      keyTemp = \"\";\n            }\n            else\n            {\n     \
    \           foreach(var temp in dictionary)\n                {\n             \
    \       if(temp.Value == 0)\n                    {\n                        break;\n\
    \                    }\n                    if(temp.Value == item.Value)\n   \
    \                 {\n                        keyTemp += temp.Key;\n          \
    \              break;\n                    }\n                }\n            }\n\
    \        }\n        List<string> words = new List<string>();\n        for(int\
    \ i = 0; i < returnList.Count; i++)\n        {\n            words.Add((returnList[i]));\n\
    \        }\n        return words;", "        List<string> result = new List<string>();\n\
    \        foreach (string word in s)\n        {\n            if (SelectWord(word,\
    \ n))\n            {\n                result.Add(word);\n            }\n     \
    \   }\n        return result;", "        if (s == null || s.Length == 0)\n   \
    \         return new List<string>();\n        bool isAllLetters = true;\n    \
    \    bool isAllNumbers = true;\n        bool isAllSpaces = true;\n        bool\
    \ isAllCaps = false;\n        long totalConsonantCount = 0;\n        long totalLetterCount\
    \ = 0;\n        long totalNumberCount = 0;\n        long totalSpaceCount = 0;\n\
    \        long totalCapCount = 0;\n        List<string> words = new List<string>();\n\
    \n        foreach (char letter in s) {\n            if (letter == ' ') {\n   \
    \             isAllSpaces = true;\n                totalSpaceCount++;\n      \
    \      } else {\n                if (char.IsLetter(letter)) {\n              \
    \      isAllLetters = true;\n                    totalLetterCount++;\n       \
    \         } else {\n                    isAllNumbers = true;\n               \
    \     totalNumberCount++;\n                }\n            }\n        }\n\n   \
    \     foreach (char letter in s) {\n            if (letter == ' ') {\n       \
    \         isAllSpaces = true;\n                totalSpaceCount++;\n          \
    \  } else {\n                if (char.IsLetter(letter)) {\n                  \
    \  isAllLetters = true;\n                    totalLetterCount++;\n           \
    \     } else {\n                    isAllCaps = true;\n                    totalCapCount++;\n\
    \                }\n            }\n        }\n\n        foreach (char letter in\
    \ s) {\n            if (letter == ' ') {\n                isAllSpaces = true;\n\
    \                totalSpaceCount++;\n            } else {\n                if\
    \ (char.IsLetter(letter)) {\n                    isAllLetters = true;\n      \
    \              totalLetterCount++;\n                } else {\n               \
    \     isAllCaps = true;\n                    totalCapCount++;\n              \
    \  }\n            }\n        }\n\n        if (isAllLetters) {\n            if\
    \ (totalLetterCount == n)\n                words.Add(s.Substring(0, s.Length -\
    \ 1));\n            else\n                words.Add(\"No letters\");\n       \
    \ } else {\n            words.Add(\"No letters\");\n        }\n\n        if (isAllNumbers)\
    \ {\n            if (totalNumberCount == n)\n                words.Add(s.Substring(0,\
    \ s.Length - 1));\n            else\n                words.Add(\"No numbers\"\
    );\n        } else {\n            words.Add(\"No numbers\");\n        }\n\n  \
    \      if (isAllCaps) {\n            if (totalCapCount == n)\n               \
    \ words.Add(s.Substring(0, s.Length - 1));\n            else\n               \
    \ words.Add(\"No caps\");\n        } else {\n            words.Add(\"No caps\"\
    );\n        }\n\n        if (isAllSpaces) {\n            if (totalSpaceCount ==\
    \ n)\n                words.Add(s.Substring(0, s.Length - 1));\n            else\n\
    \                words.Add(\"No spaces\");\n        } else {\n            words.Add(\"\
    No spaces\");\n        }\n\n        return words;", "        char[] chars = s.ToCharArray();\n\
    \        List<string> result = new List<string>();\n        bool needNext = true;\n\
    \        List<string> words = new List<string>();\n        while (chars.Length\
    \ > 0) {\n            needNext = false;\n            for (int i = 1; i < chars.Length;\
    \ i++) {\n                if (chars[i - 1] == 'd' && chars[i] == 'a' && chars[i\
    \ + 1] == 'g') {\n                    words.Add(new string((chars[i - 1],chars[i],chars[i\
    \ + 1])+\"\"));\n                    chars[i - 1] = chars[i + 1] = chars[i - 1]\
    \ = chars[i] = '\\0';\n                    needNext = true;\n                \
    \    break;\n                }\n            }\n            if (needNext)\n   \
    \             words.Add(new string(chars));\n            chars = chars.Where(x\
    \ => x != '\\0').ToArray();\n        }\n        foreach (string word in words)\
    \ {\n            result.Add(word.Replace('\\0', '').Replace(\" \", \"\"));\n \
    \       }\n        return result.Take(n).ToList();", "        // Your code goes\
    \ here\n        if (String.IsNullOrEmpty(s))\n            return new List<string>();\n\
    \n        char[] chars = s.ToCharArray();\n        var r = new List<string>();\n\
    \        var r = new List<string>();\n        long cur = 0;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            if (chars[i] == 'h') {\n          \
    \      cur++;\n            }\n            if (chars[i] == 'e') {\n           \
    \     cur++;\n            }\n            if (chars[i] == 'l') {\n            \
    \    cur++;\n            }\n            if (chars[i] == 'l') {\n             \
    \   cur++;\n            }\n            if (chars[i] == 'o') {\n              \
    \  cur++;\n            }\n            if (chars[i] == 'r') {\n               \
    \ cur++;\n            }\n            if (chars[i] == 's') {\n                cur++;\n\
    \            }\n            if (chars[i] == 'm') {\n                cur++;\n \
    \           }\n            if (chars[i] == ' ') {\n                r.Add(new string(chars,\
    \ 0, i));\n            }\n        }\n        r.Sort();\n        var temp = r.ToArray();\n\
    \        return r.ToList();", "        string temp = \"\";\n        if (s.Length\
    \ == 0)\n            return new List<string>();\n        // string temp2 = \"\"\
    ;\n        List<string> res = new List<string>();\n        for (int i = 0; i <=\
    \ s.Length; i++) {\n            for (int j = 0; j <= s.Length; j++) {\n      \
    \          if (i != 0 && i != j && j > i)\n                    if (char.GetNumericValue(s.Substring(i\
    \ - 1, 1)) == char.GetNumericValue(s.Substring(j, 1)) && (j - i) == n) {\n   \
    \                     temp += s.Substring(i, j);\n                    }\n    \
    \            }\n            }\n        if (temp.Length > 0)\n            res.Add(temp);\n\
    \        return res;", "        \n        char[] chars = s.ToCharArray();\n  \
    \      List<string> results = new List<string>();\n        if (chars.Length ==\
    \ 0) {\n            return results;\n        }\n        \n        var result =\
    \ new HashSet<char>();\n        \n        foreach (char c in chars) {\n      \
    \      if (result.Contains(c)) {\n                continue;\n            }\n \
    \           result.Add(c);\n            \n            if (n > 0) {\n         \
    \       for (int i = 1; i < n; i++) {\n                    if (result.Contains((char)(i\
    \ * 10 + c))) {\n                        continue;\n                    }\n  \
    \                  if (i < n) {\n                        result.Add(i);\n    \
    \                }\n                }\n            }\n            \n         \
    \   for (int i = 1; i < 9; i++) {\n                if (result.Contains((char)(10\
    \ * i + c))) {\n                    continue;\n                }\n           \
    \     if (i < n) {\n                    result.Add(i);\n                }\n  \
    \          }\n        }\n        \n        if (result.Count == 0) {\n        \
    \    return results;\n        }\n        \n        if (n > result.Count) {\n \
    \           return results;\n        }\n        \n        List<string> resultList\
    \ = new List<string>();\n        foreach (var item in result) {\n            resultList.Add((s.Substring(0,\
    \ s.Length - item.ToString().Length)).ToString() + item);\n        }\n       \
    \ return resultList;", "        long numConsonants = n.ToString().ToUpper().Count(c\
    \ => c == 'C' || c == 'S');\n        List<string> result = new List<string>();\n\
    \n        if (String.IsNullOrEmpty(s))\n            return result;\n\n       \
    \ // Add first word in string s\n        result.Add((s.Length > 0 ? s.Substring(0,\
    \ s.Length - 1) : String.Empty).ToUpper());\n\n        // Add next words until\
    \ we reach the end of string s\n        for (int i = s.Length - 1; i >= 0; i--)\
    \ {\n            // Check if word contains exactly n consonants\n            if\
    \ (s.Substring(i).Count(c => c >= 'A' && c <= 'Z') <= numConsonants)\n       \
    \         // Add it to list\n                result.Add((s.Substring(i).ToUpper()));\n\
    \        }\n\n        return result;", "        List<string> list = new List<string>();\n\
    \        if (n == 0L)\n            return list;\n        var splits = s.Split('\
    \ ', '\\n', '\\t');\n        foreach (var item in splits)\n            list.AddRange(SelectWords(item,\
    \ n));\n        return list;", "        if (string.IsNullOrWhiteSpace(s))\n  \
    \          return new List<string>();\n        var dict = new Dictionary<string,\
    \ long>();\n        dict.Add(\"a\", 1);\n        dict.Add(\"e\", 1);\n       \
    \ dict.Add(\"i\", 1);\n        dict.Add(\"o\", 1);\n        dict.Add(\"u\", 1);\n\
    \        dict.Add(\"y\", 1);\n        dict.Add(\"a\", n);\n        dict.Add(\"\
    e\", n);\n        dict.Add(\"i\", n);\n        dict.Add(\"o\", n);\n        dict.Add(\"\
    u\", n);\n        dict.Add(\"y\", n);\n        var res = (from c in s\n      \
    \          from k in dict\n                where c==k\n                select\
    \ k);\n        return res.ToList();", "        StringBuilder sb = new StringBuilder();\n\
    \        long[] digits = new long[26];\n        bool isPal = false;\n        string\
    \ letter = \"\";\n        int index = 0;\n        foreach (char c in s) {\n  \
    \          isPal = isPal || IsPal(c);\n            letter += c;\n        }\n \
    \       string upperLetter = letter.ToUpper();\n        bool isFirst = true;\n\
    \        long currentDigit = 0;\n        foreach (char c in upperLetter) {\n \
    \           currentDigit = (Convert.ToInt64(c) - 'A') * 1;\n            if (isFirst)\
    \ {\n                currentDigit = currentDigit % n;\n                if (currentDigit\
    \ == 0)\n                    isFirst = false;\n            }\n            else\
    \ {\n                currentDigit = currentDigit % n + 1;\n            }\n   \
    \         if (currentDigit == 0)\n                sb.Append(c);\n            else\
    \ if (isPal)\n                sb.Append((char)('A' + index));\n            else\n\
    \                sb.Append((char)('A' + index));\n            index++;\n     \
    \   }\n        List<string> result = new List<string>();\n        foreach (string\
    \ word in sb.ToString().Split(' ')) \n            result.Add(word);\n        return\
    \ result;", "        char[] chars = char.ToLower(s.ToLower()).ToArray();\n   \
    \     List<string> result = new List<string>();\n        HashSet<string> seen\
    \ = new HashSet<string>();\n        int index = 0;\n        while (index < chars.Length)\
    \ {\n            string temp = s.Substring(index++, 1);\n            if (seen.Contains(temp))\n\
    \                continue;\n            seen.Add(temp);\n            long counter\
    \ = 0;\n            while (counter < n) {\n                if (chars[index] ==\
    \ ' ')\n                    break;\n                counter++;\n            }\n\
    \            if (counter == n) {\n                result.Add(temp);\n        \
    \    }\n        }\n        return result;", "        var list = new List<string>();\n\
    \        if (String.IsNullOrEmpty(s)) {\n            return new List<string>();\n\
    \        }\n        var vowels = \"AEIOU\";\n        var consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\
    \n            .Select(x => new { val = x, index = char.IsUpper(x) ? 2 : char.IsLower(x)\
    \ ? 1 : 0 })\n            .Where(x => vowels.Contains(x.val)).ToList();\n    \
    \    if (consonants.Count >= n) {\n            var splits = s.Split(' ');\n  \
    \          for (var i = 0; i < splits.Count(); i++) {\n                var words\
    \ = splits[i].Split(consonants);\n                var wordsCount = words.Count();\n\
    \                if (wordsCount == n) {\n                    var sb = new StringBuilder();\n\
    \                    sb.Append(words[0]);\n                    words.RemoveAt(0);\n\
    \                    words.ForEach(x => sb.Append(x));\n                    list.Add(sb.ToString());\n\
    \                }\n                if (wordsCount > n) {\n                  \
    \  for (int j = 0; j < wordsCount - n; j++) {\n                        list.Add(words[j]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ list;", "        List<string> res = new List<string>();\n\n        if(s.Length\
    \ == 0)\n            return new List<string>();\n\n        if(n <= 0 || n > s.Length)\n\
    \            throw new ArgumentOutOfRangeException();\n\n        List<char> cons\
    \ = new List<char>() { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        List<char> vowels\
    \ = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n\n        char[] wordChars\
    \ = s.ToCharArray();\n        List<char> currentWord = new List<char>();\n\n \
    \       for(int i = 0; i < wordChars.Length; i++)\n        {\n            char\
    \ c = wordChars[i];\n            if(vowels.Contains(c))\n            {\n     \
    \           if(currentWord.Count == n)\n                {\n                  \
    \  res.Add(new string(currentWord.ToArray()));\n                    currentWord.Clear();\n\
    \                }\n                else\n                    currentWord.Add(c);\n\
    \            }\n            else\n            {\n                if(cons.Contains(c))\n\
    \                {\n                    currentWord.Add(c);\n                }\n\
    \                else\n                {\n                    if(currentWord.Count\
    \ == n)\n                    {\n                        res.Add(new string(currentWord.ToArray()));\n\
    \                        currentWord.Clear();\n                    }\n       \
    \             else\n                        currentWord.Add(c);\n            \
    \    }\n            }\n        }\n\n        return res;", "        HashSet<string>\
    \ words = new HashSet<string>();\n        if (s.Length == 0) {\n            return\
    \ new List<string>();\n        }\n        // Find the first occurrence of n consonants.\n\
    \        int j = 0;\n        int i = s.Length;\n        while (j != 0 && j >=\
    \ i && (!Char.IsLetterOrDigit(s[j])) && (s[i-1] == ' ')) {\n            i++;\n\
    \            j++;\n        }\n        // If there is a consonant before the first\
    \ non-space, return everything\n        // up to n consonants.\n        if (j\
    \ != 0) {\n            while (j >= i && (!Char.IsLetterOrDigit(s[j])) && (s[i-1]\
    \ == ' ')) {\n                i++;\n                j++;\n            }\n    \
    \        words.AddRange(s.Substring(0, i).Split(' ')).ToList();\n        }\n \
    \       // Find the last occurrence of n consonants.\n        i = 0;\n       \
    \ j = 0;\n        bool found = false;\n        while (j != s.Length - 1) {\n \
    \           if (Char.IsLetterOrDigit(s[j])) {\n                found = true;\n\
    \            }\n            j++;\n        }\n        if (found) {\n          \
    \  words.AddRange(s.Substring(i, s.Length - i).Split(' ')).ToList();\n       \
    \ }\n        // Add words with no n consonants following.\n        i = 0;\n  \
    \      j = s.Length - 1;\n        while (j != s.Length - 1) {\n            if\
    \ (!Char.IsLetterOrDigit(s[j])) {\n                found = true;\n           \
    \ }\n            j--;\n        }\n        if (found) {\n            words.AddRange(s.Substring(0,\
    \ i + 1).Split(' ')).ToList();\n        }\n        return new List<string>(words);",
  "        // TODO: Write your code here\n        List<string> words = new List<string>();\n\
    \        long remainder;\n        foreach (var c in s) {\n            if (Char.IsLetter(c))\
    \ {\n                words.Add(c.ToString());\n            }\n        }\n    \
    \    if (s.Length == 0) {\n            return words;\n        }\n\n        remainder\
    \ = n;\n        long index = 0;\n        Dictionary<char, List<int>> dict = new\
    \ Dictionary<char, List<int>>();\n        foreach (var c in s) {\n           \
    \ if (Char.IsLetter(c)) {\n                List<int> list;\n                if\
    \ (!dict.TryGetValue(c, out list)) {\n                    list = new List<int>();\n\
    \                }\n                list.Add(index);\n                dict[c]\
    \ = list;\n            }\n            index++;\n        }\n        while (index\
    \ != 0) {\n            int count = dict.Count + 1;\n            long remain =\
    \ index - remainder;\n            foreach (var c in s) {\n                if (Char.IsLetter(c))\
    \ {\n                    List<int> list = dict[c];\n                    if (list.Count\
    \ > 1) {\n                        bool firstMatch = false;\n                 \
    \       int index = 0;\n                        for (; index < list.Count && !firstMatch;\
    \ index++) {\n                            if (list[index] == remainder) {\n  \
    \                              firstMatch = true;\n                          \
    \      break;\n                            }\n                        }\n    \
    \                    if (firstMatch) {\n                            words.Add(c.ToString()\
    \ + s.Substring(index, list.Count - 1).ToString());\n                        }\n\
    \                    }\n                }\n            }\n            index -=\
    \ count;\n        }\n        return words;", "        List<string> result = new\
    \ List<string>();\n        \n        if (s == string.Empty) return result;\n \
    \       \n        if (n == 1L) result.Add(s);\n        \n        HashSet<string>\
    \ letters = new HashSet<string>();\n        StringBuilder currentLetter = new\
    \ StringBuilder();\n        \n        for (int i = 0; i < s.Length; i++) {\n \
    \           string c = s[i];\n            \n            if (letters.Contains(c))\
    \ continue;\n            \n            letters.Add(c);\n            currentLetter.Clear();\n\
    \            \n            foreach (char ltr in c) {\n                if (char.IsLetter(ltr))\
    \ currentLetter.Append(ltr);\n            }\n            \n            bool equal\
    \ = currentLetter.Length == n;\n            \n            if (equal) result.Add(currentLetter.ToString());\n\
    \        }\n        \n        return result;", "        List<string> result =\
    \ new List<string>();\n        if (s == \"\" || n < 0)\n            return result;\n\
    \n        List<string> words = s.Split().Where(c => Char.IsLetter(c) || Char.IsWhiteSpace(c)).ToList();\n\
    \        Dictionary<string, int> dictionary = new Dictionary<string, int>();\n\
    \        foreach (string word in words)\n        {\n            dictionary.Add(word,\
    \ 0);\n        }\n\n        foreach (string word in words)\n        {\n      \
    \      if (dictionary.ContainsKey(word))\n            {\n                dictionary[word]\
    \ += 1;\n                if (dictionary[word] == n)\n                {\n     \
    \               result.Add(word);\n                }\n            }\n        }\n\
    \        return result;", "        var result = new List<string>();\n        var\
    \ charList = s.ToCharArray();\n        var wordList = s.Split(' ');\n        if\
    \ (String.IsNullOrEmpty(s))\n        {\n            return result;\n        }\n\
    \        var consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    \
    \    var consonantCount = new Dictionary<char, int>();\n        var resultString\
    \ = string.Empty;\n        foreach (var c in charList)\n        {\n          \
    \  bool isConsonant = false;\n            bool isConsonantAlreadyInWord = false;\n\
    \            foreach (var cc in consonants)\n            {\n                if\
    \ (c == cc)\n                {\n                    if (consonantCount.TryGetValue(c,\
    \ out int cc))\n                    {\n                        isConsonantAlreadyInWord\
    \ = true;\n                        cc++;\n                    }\n            \
    \        else\n                    {\n                        isConsonantAlreadyInWord\
    \ = false;\n                        consonantCount[c] = 1;\n                 \
    \   }\n                }\n            }\n            if (isConsonantAlreadyInWord)\n\
    \                continue;\n            isConsonant = true;\n            foreach\
    \ (var cc in consonants)\n            {\n                if (c == cc)\n      \
    \          {\n                    if (consonantCount.TryGetValue(c, out int cc))\n\
    \                    {\n                        cc++;\n                      \
    \  consonantCount[c] = cc;\n                    }\n                    else\n\
    \                    {\n                        consonantCount[c] = 1;\n     \
    \               }\n                }\n            }\n            if (isConsonant)\n\
    \            {\n                resultString += c;\n                if (consonantCount.TryGetValue(c,\
    \ out int cc))\n                {\n                    if (cc == n)\n        \
    \            {\n                        result.Add(resultString);\n          \
    \          }\n                }\n            }\n        }\n        return result;",
  "        List<string> res = new List<string>();\n        foreach (string word in\
    \ Words(s)) {\n            if (word.Length == n) res.Add(word);\n        }\n \
    \       return res;", "        long count = s.Length - n;\n        List<string>\
    \ res = new List<string>();\n        if (count == 0) return new List<string>();\n\
    \n        if (n > 1) {\n            List<string> res = SelectWords(s, count /\
    \ 2);\n            res.AddRange(SelectWords(s.Substring(count / 2), count / 2));\n\
    \            return res;\n        } else {\n            if (s.ToLower().Contains(\"\
    a\")) res.Add(\"a\");\n            if (s.ToLower().Contains(\"e\")) res.Add(\"\
    e\");\n            if (s.ToLower().Contains(\"i\")) res.Add(\"i\");\n        \
    \    if (s.ToLower().Contains(\"o\")) res.Add(\"o\");\n            if (s.ToLower().Contains(\"\
    u\")) res.Add(\"u\");\n            return res;\n        }", "        if (s ==\
    \ \"\") return new List<string>();\n        if (n < 1) throw new ArgumentOutOfRangeException(String.Format(\"\
    The value of n should be greater than or equal to {0}.\", 1));\n        if (n\
    \ == 1) return new List<string>(new string[]{s});\n        if (s.ToUpper() ==\
    \ s) s = s.ToLower();\n\n        List<string> list = new List<string>();\n   \
    \     Regex regex = new Regex(@\"[^aeiouy]+\");\n        MatchCollection matches\
    \ = regex.Matches(s);\n\n        foreach (Match match in matches)\n        {\n\
    \            string word = match.ToString();\n            long wordLength = word.Length;\n\
    \            int countOfLetters = 0;\n            char[] charArray = word.ToCharArray();\n\
    \            bool isConsonant = true;\n            int index = 0;\n          \
    \  while (isConsonant && countOfLetters < n)\n            {\n                isConsonant\
    \ = charArray[index] == charArray[index + 1];\n                index += 2;\n \
    \               countOfLetters += isConsonant ? 1 : 0;\n            }\n      \
    \      list.Add(word);\n        }\n\n        return list;", "        if (string.IsNullOrEmpty(s))\
    \ return new List<string>();\n        long startIndex = 0;\n        long endIndex\
    \ = s.Length - 1;\n        List<string> result = new List<string>();\n\n     \
    \   while (startIndex <= endIndex) {\n            int count = 0;\n           \
    \ string word = s.Substring(startIndex, endIndex - startIndex + 1);\n        \
    \    for (int index = 0; index < word.Length; index++) {\n                if (char.IsLetter(word[index]))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) result.Add(word);\n            startIndex++;\n          \
    \  endIndex--;\n        }\n        return result;", "        var result = new\
    \ List<string>();\n        Debug.Assert(!string.IsNullOrEmpty(s));\n        Debug.Assert(n\
    \ > 0);\n        foreach (char c in s) {\n            if (n < 1) break;\n    \
    \        var hasDigit = c >= '0' && c <= '9';\n            if (hasDigit) n = n\
    \ * 10 + c - '0';\n            else if ('A' <= c && c <= 'Z') n = n * 26 + c -\
    \ 'A';\n            else if ('a' <= c && c <= 'z') n = n * 26 + c - 'a';\n   \
    \         else break;\n        }\n        Debug.Assert(n > 0);\n        string\
    \ word = string.Empty;\n        bool lastWasDigit = false, isDigit = false;\n\
    \        foreach (char c in s) {\n            if (lastWasDigit) {\n          \
    \      if (isDigit) word += c;\n                else word += c;\n            }\n\
    \            else {\n                if (isDigit) {\n                    if (c\
    \ >= '0' && c <= '9') word += c;\n                    else lastWasDigit = false;\n\
    \                }\n                else if (c >= 'A' && c <= 'Z') word += c;\n\
    \                else if (c >= 'a' && c <= 'z') word += c;\n                else\
    \ {\n                    lastWasDigit = true;\n                    isDigit = true;\n\
    \                    word += c;\n                }\n            }\n        }\n\
    \        if (word.Length == n) result.Add(word);\n        return result;", " \
    \       // I used the following steps:\n        //    1. Convert s to lowercase.\n\
    \        //    2. Loop through each character in the string and find if there\
    \ exists \n        //       exactly n consonants within that character.\n    \
    \    //    3. Sort the found characters and return the result.\n        List<string>\
    \ result = new List<string>();\n        if (!String.IsNullOrEmpty(s)) {\n    \
    \        foreach (char c in s.ToLower()) {\n                ConsonantCounter cc\
    \ = new ConsonantCounter(c);\n                if (cc.GetConsonantCount() == n)\n\
    \                    result.Add(c.ToString());\n            }\n        }\n   \
    \     return result.OrderBy(r => r).ToList();", "        var result = new List<string>();\n\
    \n        if (string.IsNullOrEmpty(s)) return result;\n\n        var result =\
    \ new List<string>();\n        Dictionary<char, int> chars = new Dictionary<char,\
    \ int>();\n        chars.Add('0', 1);\n        chars.Add('1', 1);\n        chars.Add('2',\
    \ 1);\n        chars.Add('3', 1);\n        chars.Add('4', 1);\n        chars.Add('5',\
    \ 1);\n        chars.Add('6', 1);\n        chars.Add('7', 1);\n        chars.Add('8',\
    \ 1);\n        chars.Add('9', 1);\n\n        // Add any words with more than n\
    \ consonants\n        foreach (char c in s.ToUpper())\n        {\n           \
    \ if (chars.ContainsKey(c))\n            {\n                if (chars[c] >= n)\n\
    \                {\n                    result.Add(s);\n                }\n  \
    \          }\n            else\n            {\n                result.Add(s);\n\
    \            }\n        }\n        return result;", "        var words = new List<string>();\n\
    \        string word = \"\";\n        string currentWord = \"\";\n        bool\
    \ containsLetter = false;\n        if (s == \"\") {\n            return words;\n\
    \        }\n        if (n < 0 || n > 3) {\n            Console.WriteLine(\"Invalid\
    \ n\");\n            return words;\n        }\n        var i = 0;\n        do\
    \ {\n            currentWord = s.Substring(i).Trim();\n            containsLetter\
    \ = currentWord.All(x => char.IsLetter(x));\n            if (containsLetter) {\n\
    \                word += currentWord;\n            }\n            i++;\n     \
    \   } while (i < s.Length);\n        if (word.Length == n) {\n            words.Add(word);\n\
    \        }\n        return words;", "        // The implementation is straightforward:\
    \ split the string into an array of words\n        // and then count the number\
    \ of consonants in each word. If the number of\n        // consonants equals the\
    \ desired n then that word is returned.\n        var wordsArray = s.Split(' ')\n\
    \            .Select(word => new string(word.Where(c => Char.IsLetterOrDigit(c)\
    \ || Char.IsPunctuation(c)).ToArray()))\n            .ToList();\n\n        //\
    \ Return an empty list if there are no words\n        if (wordsArray.Count ==\
    \ 0)\n            return new List<string>();\n\n        var results = new List<string>();\n\
    \        // Count the number of consonants in each word\n        foreach (var\
    \ word in wordsArray) {\n            int consonantCount = word.Count(c => Char.IsLetterOrDigit(c)\
    \ || Char.IsPunctuation(c));\n            if (consonantCount == n)\n         \
    \       results.Add(word);\n        }\n        return results;", "        if (String.IsNullOrEmpty(s))\
    \ {\n            return new List<string>();\n        }\n        List<string> result\
    \ = new List<string>();\n        int maxCharIndex = 0;\n        bool end = false;\n\
    \        StringBuilder sb = new StringBuilder(s.Length);\n        foreach (char\
    \ c in s) {\n            if (char.IsLetterOrDigit(c) || (int)c == (int)'-' ||\
    \ (int)c == (int)'.' || (int)c == (int)'/') {\n                sb.Append(c);\n\
    \                maxCharIndex++;\n                if (maxCharIndex == n) {\n \
    \                   result.Add(sb.ToString());\n                    sb.Clear();\n\
    \                    maxCharIndex = 0;\n                }\n                end\
    \ = true;\n            }\n        }\n        if (end) {\n            result.Add(sb.ToString());\n\
    \        }\n        return result;", "        char[] arr = s.ToCharArray();\n\
    \        long temp = 0;\n        bool done = false;\n        while (!done) {\n\
    \            temp = temp + arr[arr.Length-1];\n            if (temp >= n)\n  \
    \              done = true;\n            else\n                arr = Remove(arr,\
    \ arr.Length-1, 1);\n        }\n        return new List<string>(arr.Select((x,\
    \ index) => (index == 0) ? x : \" \").ToArray());", "        // (1) Use a list\
    \ to store all words that contain n consonants.\n        List<string> w = new\
    \ List<string>();\n\n        // (2) If there is no string, then return empty string.\n\
    \        if (string.IsNullOrEmpty(s)) {\n            return w;\n        }\n\n\
    \        // (3) Use a dictionary to store all consonants.\n        Dictionary<char,\
    \ int> consonants = new Dictionary<char, int>();\n\n        // (4) Loop through\
    \ each letter in the string.\n        for (int i = 0; i < s.Length; i++) {\n \
    \           // (4.1) If the letter at position i is a consonant, increment the\
    \ count by 1.\n            if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i]\
    \ != 'o' && s[i] != 'u') {\n                consonants[s[i]] = consonants[s[i]]\
    \ + 1;\n            }\n        }\n\n        // (5) Loop through each consonant\
    \ in the dictionary.\n        foreach (var kvp in consonants) {\n            //\
    \ (5.1) If the number of occurrences of that consonant is equal to n, \n     \
    \       // add it to w.\n            if (kvp.Value == n) {\n                w.Add(kvp.Key);\n\
    \            }\n        }\n\n        return w;", "        \n        // Step 1:\
    \ Check Input\n        if (string.IsNullOrEmpty(s)) {\n            return new\
    \ List<string>();\n        }\n        \n        StringBuilder sb = new StringBuilder();\n\
    \        \n        // Step 2: Create a HashSet of all the characters in s\n  \
    \      HashSet<char> charHashSet = new HashSet<char>(s);\n        \n        //\
    \ Step 3: For each character in string s, compare it with the next character\n\
    \        // and if they are same, append the character to the StringBuilder\n\
    \        foreach (char c in s) {\n            if (charHashSet.Contains(c)) {\n\
    \                sb.Append(c);\n            }\n            \n            // Step\
    \ 4: If next character is different than current character, then\n           \
    \ // add them to the StringBuilder but do not append them\n            charHashSet.Remove(c);\n\
    \        }\n        \n        // Step 5: If the StringBuilder still has characters\
    \ appended, remove them\n        // from the StringBuilder\n        if (charHashSet.Count\
    \ > 0) {\n            sb.Remove(sb.Length - 1, 1);\n        }\n        \n    \
    \    // Step 6: Create a List of all the words in s\n        List<string> wordsFound\
    \ = new List<string>();\n        \n        // Step 7: For each character in StringBuilder,\
    \ append it to a List<string>\n        // and check whether the word length is\
    \ equal to the target n and\n        // if it is add it to the List<string>\n\
    \        foreach (char c in sb.ToString()) {\n            string word = sb.ToString();\n\
    \            if (word != \"\") {\n                if (wordFound.Count != 0) {\n\
    \                    List<string> tempWords = wordsFound;\n                  \
    \  wordsFound = new List<string>();\n                    wordsFound.Add(word);\n\
    \                    List<string> tempWordsList = new List<string>();\n      \
    \              tempWordsList.AddRange(tempWords);\n                    if (tempWordsList.Count(x\
    \ => x.Length == n) == 1) {\n                        wordsFound.Add(word);\n \
    \                   }\n                } else {\n                    wordsFound.Add(word);\n\
    \                    if (word.Length == n) {\n                        wordsFound.Add(word);\n\
    \                    }\n                }\n            }\n        }\n        \n\
    \        // Step 8: If wordsFound is empty then return an empty list\n       \
    \ if (wordsFound.Count == 0) {\n            return new List<string>();\n     \
    \   }\n        \n        // Step 9: Create a List of all words in wordsFound and\
    \ sort it\n        // by its length\n        List<string> sortedWords = new List<string>();\n\
    \        \n        // Step 10: Sort the list according to the length of each string\n\
    \        sortedWords.AddRange(wordsFound.OrderBy(x => x.Length));\n        \n\
    \        // Step 11: Create an empty List<string> which contains \n        //\
    \ the list of words from strings which contain exactly n", "        string sLower\
    \ = s.ToLower();\n        if (sLower.Length == 0) {\n            return new List<string>();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        long k =\
    \ sLower.Length;\n        long n = n;\n        while (k > 0) {\n            if\
    \ (sLower.Substring(k, 1).All(c => !IsConsonant(c))) {\n                sb.Append(sLower.Substring(0,\
    \ k));\n                sb.Append(\" \");\n            }\n            k--;\n \
    \       }\n        string sSub = sb.ToString();\n        return Regex.Matches(sSub,\
    \ @\"\\w+\").Cast<Match>()\n            .Select(m => new string(m.Value, 1, 1))\n\
    \            .Where(m => m.All(c => !IsConsonant(c)))\n            .ToList();",
  "        var words = new List<string>();\n        if (s.IsEmpty())\n           \
    \ return words;\n        string vowels = \"aeiou\";\n        bool first = true;\n\
    \        // Add words that contain a single vowel.\n        foreach (char letter\
    \ in s) {\n            if (vowels.Contains(letter.ToString()))\n             \
    \   words.Add((first == true) ? s.Substring(0, s.Length - 1) : s.Substring(1));\n\
    \            first = false;\n        }\n        // Add words that contain a second\
    \ vowel.\n        foreach (char letter in s) {\n            if (vowels.Contains(letter.ToString()))\
    \ {\n                long len = vowels.Length;\n                long v = 0;\n\
    \                foreach (char vowel in vowels)\n                    v |= (long)vowel\
    \ << ((len + 1) - vowel.ToString().Length);\n                while (len > 0) {\n\
    \                    if (v & 1L << (len - 1))\n                        words.Add((first\
    \ == true) ? s.Substring(0, s.Length - 1) : s.Substring(1));\n               \
    \     v >>= 1;\n                    len--;\n                }\n            }\n\
    \        }\n        if (words.Count >= n)\n            return words;\n       \
    \ else\n            return new List<string>();", "        List<string> result\
    \ = new List<string>();\n        if (s.Equals(\"\"))\n            return result;\n\
    \        if (n == 0)\n            return result;\n        if (n <= 0)\n      \
    \      return result;\n        if (s.Length <= n)\n            return result;\n\
    \        if (n == 1) {\n            if (s.Contains(\"a\") && s.Contains(\"e\"\
    ) && s.Contains(\"i\") && s.Contains(\"o\")\n                && s.Contains(\"\
    u\"))\n                result.Add(\"a\");\n            else if (s.Contains(\"\
    b\") && s.Contains(\"l\") && s.Contains(\"l\") && s.Contains(\"y\")\n        \
    \        && s.Contains(\"t\"))\n                result.Add(\"b\");\n         \
    \   else if (s.Contains(\"c\") && s.Contains(\"h\") && s.Contains(\"i\") && s.Contains(\"\
    s\")\n                && s.Contains(\"y\"))\n                result.Add(\"c\"\
    );\n            else if (s.Contains(\"d\") && s.Contains(\"e\") && s.Contains(\"\
    e\") && s.Contains(\"n\")\n                && s.Contains(\"t\"))\n           \
    \     result.Add(\"d\");\n            else if (s.Contains(\"f\") && s.Contains(\"\
    l\") && s.Contains(\"l\") && s.Contains(\"o\")\n                && s.Contains(\"\
    r\"))\n                result.Add(\"f\");\n            else if (s.Contains(\"\
    g\") && s.Contains(\"o\") && s.Contains(\"o\") && s.Contains(\"u\")\n        \
    \        && s.Contains(\"r\"))\n                result.Add(\"g\");\n         \
    \   else if (s.Contains(\"h\") && s.Contains(\"i\") && s.Contains(\"i\") && s.Contains(\"\
    s\")\n                && s.Contains(\"t\"))\n                result.Add(\"h\"\
    );\n            else if (s.Contains(\"j\") && s.Contains(\"k\") && s.Contains(\"\
    l\") && s.Contains(\"l\")\n                && s.Contains(\"o\")\n            \
    \    && s.Contains(\"r\"))\n                result.Add(\"j\");\n            else\
    \ if (s.Contains(\"k\") && s.Contains(\"l\") && s.Contains(\"o\") && s.Contains(\"\
    u\")\n                && s.Contains(\"r\"))\n                result.Add(\"k\"\
    );\n            else if (s.Contains(\"l\") && s.Contains(\"n\") && s.Contains(\"\
    o\") && s.Contains(\"u\")\n                && s.Contains(\"r\"))\n           \
    \     result.Add(\"l\");\n            else if (s.Contains(\"m\") && s.Contains(\"\
    o\") && s.Contains(\"u\") && s.Contains(\"r\")\n                && s.Contains(\"\
    s\"))\n                result.Add(\"m\");\n            else if (s.Contains(\"\
    n\") && s.Contains(\"o\") && s.Contains(\"u\") && s.Contains(\"r\")\n        \
    \        && s.Contains(\"t\"))\n                result.Add(\"n\");\n         \
    \   else if (s.Contains(\"o\") && s.Contains(\"p\") && s.Contains(\"r\") && s.Contains(\"",
  '        return SelectWords(s, n, new List<string>());', "        var words = new\
    \ List<string>();\n        string sTemp = s;\n        long nTemp = n;\n      \
    \  bool isFirstChar = true;\n        bool isLastChar = true;\n        foreach\
    \ (char c in sTemp) {\n            // check first char\n            if (isFirstChar)\
    \ {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n                    isFirstChar = false;\n                }\n      \
    \          else {\n                    words.Add(sTemp.Substring(0, s.Length));\n\
    \                    isFirstChar = true;\n                }\n            }\n \
    \           // check last char\n            else if (isLastChar) {\n         \
    \       if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \                isLastChar = false;\n                }\n                else\
    \ {\n                    words.Add(sTemp.Substring(s.Length - 1, s.Length));\n\
    \                    isLastChar = true;\n                }\n            }\n  \
    \          // check middle char\n            else {\n                if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                   \
    \ words.Add(sTemp.Substring(s.Length - 1, s.Length));\n                }\n   \
    \         }\n        }\n        return words;", "        // Complete the implementation\
    \ of this function.\n        List<string> result = new List<string>();\n     \
    \   if (string.IsNullOrEmpty(s)) {\n            return new List<string>();\n \
    \       }\n\n        char[] letters = s.ToCharArray();\n        List<char> consonants\
    \ = new List<char>();\n        List<char> vowels = new List<char>();\n\n     \
    \   for (int i = 0; i < letters.Length; i++) {\n            char c = letters[i];\n\
    \            int position = Array.IndexOf(letters, c);\n            if (position\
    \ >= 0) {\n                if (IsConsonant(c)) {\n                    consonants.Add(c);\n\
    \                }\n                else {\n                    vowels.Add(c);\n\
    \                }\n            }\n        }\n\n        if (consonants.Count ==\
    \ n) {\n            result.Add(new string(consonants.ToArray()));\n        }\n\
    \        if (vowels.Count == n) {\n            result.Add(new string(vowels.ToArray()));\n\
    \        }\n\n        return result;", "        HashSet<string> hs = new HashSet<string>();\n\
    \n        if (string.IsNullOrEmpty(s))\n            return new List<string>();\n\
    \n        string[] words = s.Split(' ');\n\n        List<string> result = new\
    \ List<string>();\n\n        foreach (string w in words)\n            if (hs.Add(w))\n\
    \                result.Add(w);\n\n        return result;", '        return SelectWords(s,
    new List<string>(), n);', "        string p = \"aeiou\";\n        List<string>\
    \ res = new List<string>();\n        for (int i = 0; i < s.Length; i++) {\n  \
    \          if (s.Substring(i, 1).All(c => p.Contains(c))) {\n                string\
    \ r = s.Substring(0, i) + s.Substring(i + 1).Where(c => p.Contains(c)).ToString()\
    \ + s.Substring(i + 1);\n                if (r.Length == n)\n                \
    \    res.Add(r);\n            }\n        }\n        return res;", "        var\
    \ list = new List<string>();\n        foreach(var word in s) {\n            list.AddRange(GetWords(word));\n\
    \        }\n        return list.Count == 0 ? new List<string> : list.Take(list.Count\
    \ - 1).Intersect(list.Skip(1)).Take(1);", "        List<string> result = new List<string>();\n\
    \        if (s.Contains(\",\")) {\n            string[] words = s.Split(',');\n\
    \            foreach (string word in words) {\n                result.AddRange(SelectWords(word,\
    \ n));\n            }\n        } else if (s.Contains(\"(\")) {\n            string[]\
    \ words = s.Split('(');\n            foreach (string word in words) {\n      \
    \          result.AddRange(SelectWords(word, n));\n            }\n        } else\
    \ if (s.Contains(\"'\")) {\n            string[] words = s.Split('\\'');\n   \
    \         foreach (string word in words) {\n                result.AddRange(SelectWords(word,\
    \ n));\n            }\n        } else if (s.Contains(\"\\\"\")) {\n          \
    \  string[] words = s.Split('\"');\n            foreach (string word in words)\
    \ {\n                result.AddRange(SelectWords(word, n));\n            }\n \
    \       } else {\n            for (int i = 0; i < s.Length; i++) {\n         \
    \       if (Char.IsLetter(s[i]) && (s.Length - i) == n) {\n                  \
    \  result.Add(s.Substring(0, i + 1).Trim());\n                }\n            }\n\
    \        }\n        return result;", "        List<string> ret = new List<string>();\n\
    \        if (string.IsNullOrEmpty(s)) return new List<string>();\n        char[]\
    \ chars = s.ToCharArray();\n        int n = Convert.ToInt32(n);\n        char[]\
    \ letters = \"aeiou\".ToCharArray();\n        for(int i=0;i<chars.Length;i++){\n\
    \            char c = chars[i];\n            for(int j=0;j<letters.Length;j++){\n\
    \                char l = letters[j];\n                if(c==l){\n           \
    \         if(i+n>=chars.Length || i+n<0) continue;\n                    for(int\
    \ k=i;k<i+n;k++){\n                        ret.add(new string(chars.Take(i+k).ToArray()));\n\
    \                    }\n                    break;\n                }\n      \
    \      }\n        }\n        return ret;", "        if (string.IsNullOrWhiteSpace(s))\
    \ return new List<string>();\n        if (n == 0) return new List<string>();\n\
    \        HashSet<string> words = new HashSet<string>();\n        HashSet<string>\
    \ words2 = new HashSet<string>();\n        List<string> result = new List<string>();\n\
    \        string temp = string.Empty;\n        foreach (var item in s.ToLower())\
    \ {\n            if (char.IsLetter(item)) {\n                temp = temp + item;\n\
    \            } else {\n                if (words.Contains(temp)) {\n         \
    \           if (!words2.Contains(temp)) {\n                        result.Add(temp);\n\
    \                    }\n                }\n                words.Add(temp);\n\
    \                temp = \"\";\n            }\n        }\n        if (words.Count\
    \ != 0) result.Add(temp);\n        if (result.Count == 1 && string.IsNullOrWhiteSpace(result[0]))\
    \ {\n            return new List<string>();\n        }\n        return result;",
  "        var list = new List<string>();\n        var words = new List<string>();\n\
    \        foreach (var word in GetWords(s, n))\n            words.Add(word);\n\n\
    \        var groups = words.GroupBy(x => x).Where(x => x.Count() == n)\n     \
    \                       .ToList();\n        if (groups.Count > 0)\n          \
    \  list.AddRange(groups.Select(x => x.Key).ToList());\n\n        return list;",
  "        char[] chars = s.ToCharArray();\n        List<string> results = new List<string>();\n\
    \        foreach (char c in chars) {\n            bool found = false;\n      \
    \      for (long i = 0; i < n; i++) {\n                if (chars.Contains(c))\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (found)\n                results.Add(s.Substring(0,\
    \ s.Length - 1));\n        }\n        return results;", "        List<string>\
    \ words = new List<string>();\n        if (s == \"\") {\n            return words;\n\
    \        }\n        Dictionary<string, int> counter = new Dictionary<string, int>();\n\
    \        foreach (string word in SplitWords(s)) {\n            foreach (char c\
    \ in word) {\n                if (char.IsLetterOrDigit(c)) {\n               \
    \     if (counter.ContainsKey(c)) {\n                        int count = counter[c]\
    \ + 1;\n                        counter[c] = count;\n                    } else\
    \ {\n                        counter.Add(c, 1);\n                    }\n     \
    \           }\n            }\n        }\n        foreach (var item in counter.OrderBy(o\
    \ => o.Value).ThenBy(o => o.Key).GroupBy(o => o.Value).Where(o => o.Count > n).Select(o\
    \ => o.Key).Distinct()) {\n            if (counter[item] == n) {\n           \
    \     words.Add(item);\n            }\n        }\n        if (words.Count == 0)\
    \ {\n            words = new List<string>();\n        }\n        return words;",
  "        long n = n as long;\n        var result = new List<string>();\n       \
    \ var index = new List<long>();\n        foreach (var item in s.Split(' ')) {\n\
    \            if (index[0] == n) { // index starts at 1\n                result.Add(item.Trim('\
    \ '));\n                index.RemoveAt(0);\n            }\n            else {\n\
    \                index.Add(item.IndexOf(' ') + 1);\n            }\n        }\n\
    \        return result.ToList();", "        if (String.IsNullOrWhiteSpace(s))\n\
    \            return new List<string>();\n        \n        char[] c = s.ToCharArray();\n\
    \        int[] count = new int[26];\n        int cCount = 0;\n        \n     \
    \   for (int i = 0; i < c.Length; i++) {\n            if (Char.IsLetter(c[i]))\
    \ {\n                if (cCount >= n)\n                    return new List<string>();\n\
    \                \n                cCount++;\n                count[(cCount -\
    \ 1) % 26]++;\n            }\n        }\n        \n        var result = new List<string>();\n\
    \        int pos = 0;\n        while (pos < count.Length) {\n            result.AddRange(c.TakeWhile((c,\
    \ i) => count[i] > pos).ToList());\n            pos = pos + 1;\n        }\n  \
    \      \n        return result;", "        // write your code in C#\n        List<string>\
    \ result = new List<string>();\n        if (s.Length == 0)\n            return\
    \ result;\n        char[] c = s.ToCharArray();\n        bool startNewWord = true;\n\
    \        char[] temp = new char[c[c].Length];\n        int index = 0;\n      \
    \  for (int i = 0; i < c[c].Length; i++) {\n            int cIndex = c[i].ToLowerInvariant().ToArray().FindIndex(n\
    \ => n == n);\n            if (cIndex != -1) {\n                temp[index] =\
    \ c[i];\n                if (cIndex == index) {\n                    if (i ==\
    \ c[i].Length - 1)\n                        startNewWord = false;\n          \
    \      }\n                if (startNewWord) {\n                    result.Add(new\
    \ string(temp));\n                    index++;\n                    startNewWord\
    \ = true;\n                }\n            }\n        }\n        return result;",
  "        var result = new List<string>();\n        List<char> list = new List<char>();\n\
    \        foreach (var c in s.ToLowerInvariant()) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                list.Add(c);\n            }\n        }\n        HashSet<string>\
    \ set = new HashSet<string>();\n        while (list.Count > n) {\n           \
    \ string substr = list.ToList().Take(n).ToArray().ToLowerInvariant().Aggregate(string.Empty,\
    \ (current, c) => current + c).Trim();\n            if (set.Contains(substr))\
    \ {\n                return result;\n            }\n            result.Add(substr);\n\
    \            set.Add(substr);\n            list.RemoveAt(0);\n        }\n    \
    \    return result;", "        // TODO: Fill in the body of the function here:\n\
    \        \n        var result = new List<string>();\n        if(s.Length == 0)\n\
    \            return result;\n        var wordList = s.Split(' ');\n        foreach(var\
    \ word in wordList)\n        {\n            var count = new int[n];\n        \
    \    int i = 0;\n            foreach(var character in word)\n            {\n \
    \               count[i++] += (int)Char.GetNumericValue(character);\n        \
    \    }\n            if(count.All(c => c == n))\n                result.Add(word);\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        if(!String.IsNullOrEmpty(s))\n        {\n            string word = s;\n\
    \            string wordWithLetters = \"\";\n            while(word.Length > 0)\n\
    \            {\n                wordWithLetters += word[0];\n                wordWithLetters\
    \ += \" \";\n                word = word.Remove(0, 1);\n            }\n      \
    \      while(wordWithLetters.Length > 0)\n            {\n                if(wordWithLetters.Length\
    \ < n) break;\n                if(wordWithLetters.Contains(\" \") == false)\n\
    \                {\n                    result.Add(wordWithLetters);\n       \
    \         }\n                wordWithLetters = wordWithLetters.Remove(wordWithLetters.LastIndexOf(\"\
    \ \"));\n            }\n        }\n        return result;", "        long nConsonants\
    \ = 0;\n        long nLetters = 0;\n        bool nLettersFound = false;\n    \
    \    bool wordEnded = false;\n        long count = new long();\n        StringBuilder\
    \ sb = new StringBuilder();\n        List<string> list = new List<string>();\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))\n\
    \                list.Add(s[i]);\n            else\n                break;\n \
    \       }\n        if (list.Count > 0) {\n            foreach (string word in\
    \ list) {\n                foreach (char c in word) {\n                    if\
    \ (char.IsConsonant(c)) {\n                        nConsonants++;\n          \
    \          }\n                    if (char.IsLetter(c)) {\n                  \
    \      nLetters++;\n                        if (nLettersFound == false) {\n  \
    \                          nLettersFound = true;\n                           \
    \ if (char.IsConsonant(c)) {\n                                nConsonants--;\n\
    \                            }\n                        }\n                  \
    \      else {\n                            wordEnded = true;\n               \
    \         }\n                    }\n                    if (nLetters == n)\n \
    \                       break;\n                }\n                if (wordEnded\
    \ == true)\n                    break;\n            }\n        }\n        sb.AppendLine(list);\n\
    \        for (int i = 0; i < list.Count; i++)\n            count += list[i].Length;\n\
    \        sb.AppendLine(string.Format(\"{0} = {1}\", count, list.Count));\n   \
    \     list.Clear();\n        for (int i = 0; i < s.Length; i++) {\n          \
    \  if (char.IsLetter(s[i]))\n                list.Add(s[i]);\n            else\n\
    \                break;\n        }\n        if (list.Count > 0) {\n          \
    \  foreach (string word in list) {\n                foreach (char c in word) {\n\
    \                    if (char.IsConsonant(c)) {\n                        nConsonants++;\n\
    \                    }\n                    if (char.IsLetter(c)) {\n        \
    \                nLetters++;\n                        if (nLettersFound == false)\
    \ {\n                            nLettersFound = true;\n                     \
    \       if (char.IsConsonant(c)) {\n                                nConsonants--;\n\
    \                            }\n                        }\n                  \
    \      else {\n                            wordEnded = true;\n               \
    \         }\n                    }\n                    if (nLetters == n)\n \
    \                       break;\n                }\n                if (wordEnded\
    \ == true)\n                    break;\n            }\n        }\n        sb.AppendLine(list);\n\
    \        for (int i = 0; i < list.Count; i++)\n            count += list[i].Length;\n\
    \        sb.AppendLine(string.Format(\"{0} = {1}\", count, list.Count));\n   \
    \     list.Clear();\n        for (int i = 0; i < s.Length; i++) {\n          \
    \  if (char.IsLetter(s[i]))\n                list.Add(s[i]);\n            else\n\
    \                break;\n        }\n        if (list.Count > 0) {\n          \
    \  foreach (string word in list) {\n                foreach (char c in word) {\n\
    \                    if (char.IsConsonant(c)) {\n                        nConsonants++;",
  "        long? found = null;\n        var chars = s.ToCharArray();\n        List<string>\
    \ result = new List<string>();\n        for (int i = 0; i < chars.Length; i++)\
    \ {\n            int value = chars[i] - 'a';\n            if (value != -1) {\n\
    \                found = value*(n-1)+n;\n                if (found == 0) {\n \
    \                   result.Add(new string(chars, i, 1));\n                   \
    \ found = null;\n                } else if (found != long.MaxValue) {\n      \
    \              int k = (int)(Math.Floor(found / Math.Abs(n)));\n             \
    \       found = found % Math.Abs(n);\n                    if (k == 0) {\n    \
    \                    result.Add(new string(chars, i, 1));\n                  \
    \  } else {\n                        result.AddRange(SelectWords(new string(chars,\
    \ i, 1), n));\n                    }\n                }\n            }\n     \
    \   }\n        return result;", "        List<string> result = new List<string>();\n\
    \        string word = \"\";\n        bool found = false;\n        if (s.Trim().Length\
    \ > 0) {\n            word = s.Substring(0, s.Length - 1);\n            s.Remove(s.Length\
    \ - 1, 1);\n        }\n        if (n == 0) {\n            if (s.Trim().Length\
    \ == 0) {\n                found = true;\n            }\n        }\n        if\
    \ (n > 0) {\n            for (int i = 0; i < s.Length; i++) {\n              \
    \  char ch = s[i];\n                if (char.IsLetter(ch)) {\n               \
    \     for (int j = 0; j < word.Length; j++) {\n                        char ch\
    \ = word[j];\n                        if (char.IsLetter(ch)) {\n             \
    \               if (ch != ch) {\n                                found = true;\n\
    \                                break;\n                            }\n     \
    \                   }\n                    }\n                    if (found) {\n\
    \                        result.Add(word);\n                        word = \"\"\
    ;\n                        found = false;\n                    }\n           \
    \     }\n                if (!found) {\n                    if (char.IsLetter(ch))\
    \ {\n                        result.Add(word);\n                        found\
    \ = true;\n                        word = \"\";\n                    } else {\n\
    \                        word += ch;\n                    }\n                }\n\
    \                if (i >= s.Length - 1) {\n                    result.Add(word);\n\
    \                }\n            }\n        }\n        if (s.Trim().Length > 0)\
    \ {\n            result.Add(word);\n        }\n        return result;", "    \
    \    long count = 0;\n        string word = \"\";\n        List<string> result\
    \ = new List<string>();\n        foreach (char c in s) {\n            count +=\
    \ (int)Char.GetUnicodeCategory(c);\n        }\n        if (count > n) {\n    \
    \        int wordLength = s.Length - count - 1;\n            word = s.Substring(0,\
    \ wordLength);\n            result.Add(word);\n        }\n        char[] chars\
    \ = s.ToCharArray();\n        foreach (char c in chars) {\n            int unicode\
    \ = (int)Char.GetUnicodeCategory(c);\n            if (unicode == CatConsonants)\
    \ {\n                string word = s.Substring(0, s.IndexOf(c) + 1);\n       \
    \         if (word.Length > 0) {\n                    result.Add(word);\n    \
    \            }\n            }\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        if (string.IsNullOrWhiteSpace(s))\n  \
    \          return result;\n        \n        if (s.Length < n)\n            return\
    \ result;\n\n        var dictionary = new Dictionary<string, int>();\n       \
    \ var chars = s.ToCharArray().ToList();\n        \n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            var item = chars[i];\n            if (dictionary.ContainsKey(item))\n\
    \                dictionary[item]++;\n            else {\n                dictionary.Add(item,\
    \ 1);\n            }\n        }\n        \n        foreach (var item in dictionary)\
    \ {\n            if (item.Value == n) {\n                result.Add(item.Key);\n\
    \            }\n        }\n        return result;", "        if (s == null) {\n\
    \            return new List<string>();\n        }\n        var chars = s.ToCharArray();\n\
    \        var words = new List<string>();\n        var j = 0;\n        for (var\
    \ i = 1; i < chars.Length; i++) {\n            if (chars[i] != '\\0') {\n    \
    \            j = i;\n                break;\n            }\n        }\n      \
    \  var startChar = chars.GetValue(j);\n        words.Add(s.Substring(startChar));\n\
    \        var numCons = CountConsonants(s, startChar);\n        if (numCons ==\
    \ n) {\n            words.Add(s.Substring(startChar + 1, s.Length - startChar\
    \ - 1));\n        }\n        return words;", "        var results = new List<string>();\n\
    \        if(string.IsNullOrWhiteSpace(s)){\n            return new List<string>();\n\
    \        }\n        foreach(var word in s.Split(' ')){\n            string trimmedWord\
    \ = word.Trim();\n            long count = 0;\n            foreach(var letter\
    \ in trimmedWord){\n                if(char.IsLetterOrDigit(letter)){\n      \
    \              count++;\n                }\n            }\n            if(count\
    \ == n){\n                results.Add(word);\n            }\n        }\n     \
    \   return results;", "        if (String.IsNullOrEmpty(s)) {\n            return\
    \ new List<string>();\n        }\n\n        var results = new List<string>();\n\
    \        var hash = new Dictionary<string, int>();\n        hash.Add(\"Z\", 1);\n\
    \        hash.Add(\"A\", 1);\n        hash.Add(\"B\", 2);\n        hash.Add(\"\
    C\", 2);\n        hash.Add(\"D\", 3);\n        hash.Add(\"E\", 3);\n        hash.Add(\"\
    F\", 3);\n        hash.Add(\"G\", 4);\n        hash.Add(\"H\", 4);\n        hash.Add(\"\
    I\", 5);\n        hash.Add(\"J\", 5);\n        hash.Add(\"K\", 5);\n        hash.Add(\"\
    L\", 5);\n        hash.Add(\"M\", 6);\n        hash.Add(\"N\", 6);\n        hash.Add(\"\
    O\", 6);\n        hash.Add(\"P\", 7);\n        hash.Add(\"Q\", 7);\n        hash.Add(\"\
    R\", 7);\n        hash.Add(\"S\", 7);\n        hash.Add(\"T\", 7);\n        hash.Add(\"\
    U\", 7);\n        hash.Add(\"V\", 7);\n        hash.Add(\"W\", 7);\n        hash.Add(\"\
    X\", 7);\n        hash.Add(\"Y\", 7);\n        hash.Add(\"Z\", 7);\n        hash.Add(\"\
    a\", 1);\n        hash.Add(\"b\", 2);\n        hash.Add(\"c\", 2);\n        hash.Add(\"\
    d\", 3);\n        hash.Add(\"e\", 3);\n        hash.Add(\"f\", 3);\n        hash.Add(\"\
    g\", 4);\n        hash.Add(\"h\", 4);\n        hash.Add(\"i\", 5);\n        hash.Add(\"\
    j\", 5);\n        hash.Add(\"k\", 5);\n        hash.Add(\"l\", 5);\n        hash.Add(\"\
    m\", 6);\n        hash.Add(\"n\", 6);\n        hash.Add(\"o\", 6);\n        hash.Add(\"\
    p\", 7);\n        hash.Add(\"q\", 7);\n        hash.Add(\"r\", 7);\n        hash.Add(\"\
    s\", 7);\n        hash.Add(\"t\", 7);\n        hash.Add(\"u\", 7);\n        hash.Add(\"\
    v\", 7);\n        hash.Add(\"w\", 7);\n        hash.Add(\"x\", 7);\n        hash.Add(\"\
    y\", 7);\n        hash.Add(\"z\", 7);\n        hash.Add(\"0\", 1);\n        hash.Add(\"\
    1\", 1);\n        hash.Add(\"2\", 2);\n        hash.Add(\"3\", 2);\n        hash.Add(\"\
    4\", 3);\n        hash.Add(\"5\", 3);\n        hash.Add(\"6\", 3);\n        hash.Add(\"\
    7\", 3);\n", "        List<string> result = new List<string>();\n        if (String.IsNullOrWhiteSpace(s))\n\
    \            return result;\n        StringBuilder sb = new StringBuilder();\n\
    \        string currentWord = \"\";\n        bool found = false;\n        foreach\
    \ (var letter in s) {\n            found = false;\n            if (char.IsWhiteSpace(letter))\n\
    \                sb.Append(letter);\n            else\n                sb.Append(letter);\n\
    \            for (int i = 0; i < sb.Length; i++) {\n                if (Char.IsLetterOrDigit(sb[i])\
    \ || Char.IsPunctuation(sb[i]))\n                    found = true;\n         \
    \   }\n            if (found) {\n                if (sb.Length > n)\n        \
    \            currentWord = sb.Substring(0, n);\n                else\n       \
    \             currentWord = sb.ToString();\n                result.Add(currentWord);\n\
    \                sb.Clear();\n                found = false;\n            }\n\
    \        }\n        if (sb.Length > 0)\n            result.Add(sb.ToString());\n\
    \        return result;", "        var ret = new List<string>();\n        if (s\
    \ == \"\") return ret;\n        \n        List<string> found = new List<string>();\n\
    \        string word = \"\";\n        foreach (char c in s.ToLowerInvariant())\
    \ {\n            if (Convert.ToInt32(c) > 'z' || Convert.ToInt32(c) < 'a') continue;\n\
    \            \n            if (Convert.ToInt32(c.ToString()) == Convert.ToInt32(c))\n\
    \                word += c.ToString();\n            else\n            {\n    \
    \            if (found.Count == n)\n                {\n                    ret.Add(word);\n\
    \                    found = new List<string>();\n                    word = \"\
    \";\n                }\n                else\n                {\n            \
    \        found.Add(word);\n                }\n                word += c.ToString();\n\
    \            }\n        }\n        if (found.Count == n) ret.Add(word);\n    \
    \    return ret;", "        // write your code in C# 6.0 with .NET FW 4.7\n  \
    \      List<string> result = new List<string>();\n        long max = (long)s.Length;\n\
    \        if (n == 1L) result.Add(s);\n        else if (n > max)\n            return\
    \ result;\n        else\n        {\n            long remaining = n;\n        \
    \    for (int i = s.Length - 1; i >= 0; i--)\n            {\n                if\
    \ (s[i] == 'e' || s[i] == 'a' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \                    remaining--;\n                else\n                {\n \
    \                   long temp = remaining;\n                    temp--;\n    \
    \                if (temp < 0)\n                        temp = 0;\n          \
    \          result.Add(s.Substring(0, i));\n                    remaining = temp;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        string input = s;\n        if (input == \"\" ||\
    \ n == 0)\n            return new List<string>();\n        List<string> ret =\
    \ new List<string>();\n        long num = 0;\n        for (int i = 0; i < input.Length;\
    \ i++) {\n            if (Char.IsLetterOrDigit(input[i])) {\n                num++;\n\
    \                if (num == n)\n                    ret.Add(input.Substring(i));\n\
    \            }\n        }\n        return ret;", "        var list = new List<string>();\n\
    \        if (n == 0) return list;\n        string newstr = s.ToLower();\n    \
    \    char current = 'a';\n        foreach (char character in newstr) {\n     \
    \       if (character == ' ' || character == '\\t') {\n                if (!list.Contains(current))\
    \ list.Add(current);\n                current = character;\n            }\n  \
    \          else if (character == current) {\n                current += character;\n\
    \            }\n            else if (n == 1) {\n                list.Add(current);\n\
    \                current = 'a';\n            }\n            else if (n % 2 ==\
    \ 0 && character == current) {\n                list.Add(current);\n         \
    \       current = 'a';\n                n /= 2;\n            }\n            else\
    \ if (n % 2 == 1 && character == current) {\n                n /= 2;\n       \
    \     }\n        }\n        return list;", "        List<string> words = new List<string>();\n\
    \        long index = 0;\n        string currentString = string.Empty;\n     \
    \   while (n != 0) {\n            currentString = s.Substring(index, currentString.Length);\n\
    \            words.Add(currentString);\n            n -= currentString.Length;\n\
    \            index++;\n        }\n        return words;", "        //Write your\
    \ code here\n        HashSet<string> words = new HashSet<string>();\n        string[]\
    \ temp = new string[s.Length];\n        for (int i = 0; i < s.Length; i++)\n \
    \       {\n            if (s[i].Equals(' '))\n            {\n                break;\n\
    \            }\n            if (s[i] == ' ')\n            {\n                words.Add(string.Join(\"\
    \", temp));\n                temp.Clear();\n            }\n            if (s[i]\
    \ != ' ')\n            {\n                temp[temp.Length] = s[i].ToString();\n\
    \            }\n        }\n        if (temp.Length > 0)\n        {\n         \
    \   words.Add(string.Join(\"\", temp));\n        }\n        words.RemoveAll(x\
    \ => x.Length == 0);\n        if (words.Count > n)\n        {\n            List<string>\
    \ list = new List<string>();\n            for (int i = 0; i < words.Count; i++)\n\
    \            {\n                if (i == n - 1)\n                {\n         \
    \           list.Add(words[i]);\n                }\n                else\n   \
    \             {\n                    list.Add(words[i] + words[i + 1]);\n    \
    \            }\n            }\n            return list;\n        }\n        else\n\
    \        {\n            return new List<string>();\n        }", "        // Initialize\
    \ your answer here\n        List<string> ret = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            ret.Add(\"\");\n            return\
    \ ret;\n        }\n        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                if (!char.IsUpper(c))\
    \ {\n                    sb.Append(c);\n                }\n            } else\
    \ if (char.IsWhiteSpace(c)) {\n                ret.Add(\"\");\n              \
    \  break;\n            } else {\n                ret.Add(sb.ToString());\n   \
    \             sb = new StringBuilder();\n                sb.Append(c);\n     \
    \       }\n        }\n        if (sb.Length == 0) {\n            ret.Add(sb.ToString());\n\
    \        }\n        return ret;", "        List<string> result = new List<string>();\n\
    \        long n = Convert.ToInt64(n);\n        if (n == 0L) return result;\n\n\
    \        // If there is only one word return it\n        if (s.Length > 1L) return\
    \ new List<string> {s};\n\n        var regex = new Regex(@\"[^a-z ]+\");\n   \
    \     var words = regex.Split(s);\n        var currentWord = string.Empty;\n \
    \       foreach (string word in words) {\n            currentWord = word;\n  \
    \          string currentWordWithoutConsonants = Regex.Replace(currentWord, @\"\
    [aeiou]\", \"\");\n            if (currentWordWithoutConsonants.Length == n) return\
    \ result.Add(currentWord);\n            n = n - currentWordWithoutConsonants.Length;\n\
    \        }\n        return result;", "        \n        //Your code here\n   \
    \     \n        if (s == null || s.Equals(\"\"))\n            return new List<string>();\n\
    \        char[] chars = s.ToCharArray();\n        Dictionary<string, long> count\
    \ = new Dictionary<string, long>();\n        int count = 0;\n        int i = 0;\n\
    \        \n        foreach(char c in chars) {\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U' || c == 'Y') {\n                count[c]\
    \ = count.ContainsKey(c) ? count[c] + 1 : 1;\n            } \n            \n \
    \           else {\n                if (count.ContainsKey(c)) {\n            \
    \        if (count[c] > n) {\n                        i++;\n                 \
    \       while (i < chars.Length && chars[i] == c) {\n                        \
    \    i++;\n                        }\n                        string key = chars.Substring(0,\
    \ i).ToLower();\n                        string value = chars.Substring(i).ToLower();\n\
    \                        count.Remove(key);\n                        count.Add(value,\
    \ 1);\n                        \n                    }\n                    count[c]\
    \ = count[c] - 1;\n                }\n            }\n        }\n        return\
    \ new List<string>(count.Keys.ToList());", "        List<string> result = new\
    \ List<string>();\n        if (string.IsNullOrEmpty(s)) {\n            return\
    \ result;\n        }\n        var sb = new StringBuilder(s);\n        // Remove\
    \ trailing spaces\n        while (s.EndsWith(\" \")) {\n            sb.Remove(sb.Length\
    \ - 1, 1);\n        }\n        // Remove trailing characters\n        while (sb.Length\
    \ > 0) {\n            sb.Remove(sb.Length - 1, 1);\n        }\n        // Remove\
    \ leading spaces\n        while (sb.Length > 0 && sb.StartsWith(\" \")) {\n  \
    \          sb.Remove(0, 1);\n        }\n        // Remove leading characters\n\
    \        while (sb.Length > 0 && sb.StartsWith(\" \")) {\n            sb.Remove(0,\
    \ 1);\n        }\n        // Remove duplicate characters\n        while (sb.Length\
    \ > 0) {\n            if (sb.First() != sb.Last()) {\n                sb.Remove(sb.Length\
    \ - 1, 1);\n            }\n        }\n        var words = sb.Split();\n      \
    \  foreach (var word in words) {\n            result.AddRange(SelectWords(word,\
    \ n));\n        }\n        return result;", "        List<string> result;\n  \
    \      List<string> strings = new List<string>();\n        bool isStringEmpty\
    \ = true;\n        StringBuilder builder = new StringBuilder();\n        char\
    \ currentChar;\n        long currentLength;\n        bool isFirstChar = true;\n\
    \        bool isLastChar = false;\n        bool isLastWord = false;\n        bool\
    \ isLastWordOrSpace = false;\n        for (int i = 0; i < s.Length; i++) {\n \
    \           currentChar = s[i];\n            currentLength = s.Length - i;\n \
    \           builder.Append(currentChar);\n            if (currentLength == n)\
    \ {\n                if (builder.Length > 0) {\n                    string word\
    \ = builder.ToString();\n                    strings.Add(word);\n            \
    \        builder.Clear();\n                }\n                isLastWord = true;\n\
    \                isLastChar = true;\n                isStringEmpty = false;\n\
    \                isFirstChar = false;\n                isLastWordOrSpace = true;\n\
    \            } else if (currentLength == n) {\n                if (currentChar\
    \ == ' ') {\n                    isLastWordOrSpace = true;\n                }\
    \ else {\n                    isLastChar = true;\n                }\n        \
    \    } else if (currentLength == 0) {\n                if (currentChar == ' ')\
    \ {\n                    isLastChar = true;\n                } else {\n      \
    \              isStringEmpty = true;\n                }\n            } else {\n\
    \                isLastChar = false;\n            }\n        }\n        if (isStringEmpty)\
    \ {\n            result = new List<string>();\n        } else {\n            result\
    \ = new List<string>(strings);\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        if (s == \"\")\n            return result;\n\
    \        if (n == 0)\n            result.Add(s);\n        if (n == 1)\n      \
    \      return result;\n        var chars = s.ToCharArray();\n        var dict\
    \ = new Dictionary<char, List<int>>();\n        var count = 0;\n        for (int\
    \ i = 0; i < chars.Length; i++)\n            dict[chars[i]].Add(i);\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            var list = dict[chars[i]];\n\
    \            if (count < n) {\n                foreach (int j in list)\n     \
    \               result.Add(s.Substring(j, i - j));\n                count++;\n\
    \            }\n        }\n        return result;", "        string s0 = s;\n\
    \        string s1 = null;\n        string s2 = null;\n        string s3 = null;\n\
    \        List<string> ret = new List<string>();\n        bool end = false;\n \
    \       while (!end) {\n            string sTemp = s0.Substring(0, (s0.Length\
    \ - 1));\n            end = (sTemp == null) ? true : false;\n            s1 =\
    \ sTemp.Replace(\"\\\"\", \"\");\n            s2 = s1.Replace(\" \", \"\");\n\
    \            s3 = s2.Replace(\",\", \"\");\n            string[] words = s3.Split('\
    \ ');\n            if (words.Count() == 0) {\n                end = true;\n  \
    \          } else {\n                foreach (string word in words) {\n      \
    \              if (word != null && !word.Contains(\".\")) {\n                \
    \        bool bAll = true;\n                        for (int i = 0; i < word.Length;\
    \ i++) {\n                            char ch = word[i];\n                   \
    \         bAll = (bAll && ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')));\n\
    \                        }\n                        if (bAll) {\n            \
    \                if (n == word.Length) {\n                                ret.Add(word);\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        if (s0.Length == 0)\
    \ {\n            return ret;\n        } else {\n            return null;\n   \
    \     }", "        List<string> lst = new List<string>();\n        bool blnFound\
    \ = false;\n        long currentLength = s.Length;\n        string currentWord\
    \ = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            if (Convert.ToChar(s[i]).ToString()\
    \ == \"<\") {\n                currentWord = currentWord + s[i];\n           \
    \     blnFound = true;\n            }\n            else if (Convert.ToChar(s[i]).ToString()\
    \ == \">\") {\n                if (currentLength < n) {\n                    lst.Add(currentWord);\n\
    \                    currentWord = \"\";\n                    currentLength++;\n\
    \                }\n                blnFound = false;\n            }\n       \
    \     if (!blnFound) {\n                currentWord = currentWord + s[i];\n  \
    \          }\n        }\n        if (currentLength > n) {\n            lst.Add(currentWord);\n\
    \        }\n        return lst;", "        // TODO Write your solution here\n\
    \        return null;", "        long result = 0;\n        List<string> result\
    \ = new List<string>();\n\n        if (s.Length > 0) {\n            var counter\
    \ = new Counter();\n            foreach (var item in s)\n            {\n     \
    \           counter.Update(item);\n            }\n\n            foreach (var item\
    \ in counter.Values)\n            {\n                result += item;\n       \
    \     }\n        }\n        List<string> result;\n\n        if (result >= n) \n\
    \        {\n            for (int i = 0; i < s.Length; i++)\n            {\n  \
    \              if (s[i] != '')\n                {\n                    result.Add(s[i]);\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      for (int i = 0; i < s.Length; i++)\n            {\n                char\
    \ c = s[i];\n                if (c != '')\n                {\n               \
    \     result.Add(s.Substring(0, i));\n                }\n            }\n     \
    \   }\n\n        return result;", "        string vowels = \"aeiou\";\n      \
    \  string consonants = \"bdghjmnpqrstvwxyz\";\n        string vowelConsonants\
    \ = \"aeiou\";\n        string vowelAndConsonants = \"aeiou\";\n        string\
    \ vowelConsonantsAndConsonants = \"aeiou\";\n        List<string> list = new List<string>();\n\
    \        if (!string.IsNullOrWhiteSpace(s)) {\n            if (s.Length > 0) {\n\
    \                char[] arrays = s.ToCharArray();\n                string[] vowelsAndConsonants\
    \ = vowels.Split(arrays);\n                string[] vowelAndConsonants = vowelConsonants.Split(arrays);\n\
    \                string[] vowelConsonantsAndConsonants = vowelConsonantsAndConsonants.Split(arrays);\n\
    \                foreach (string vowel in vowelsAndConsonants) {\n           \
    \         foreach (string consonant in vowelAndConsonants) {\n               \
    \         foreach (string vowelConsonantAndConsonant in vowelConsonantsAndConsonants)\
    \ {\n                            if (vowel == consonant || vowel == vowelConsonantAndConsonant)\
    \ {\n                                if (n == (long)vowelsAndConsonants.Length\
    \ * vowelAndConsonants.Length * vowelConsonantsAndConsonants.Length) {\n     \
    \                               list.Add(vowel);\n                           \
    \     }\n                            }\n                        }\n          \
    \          }\n                }\n            }\n        }\n        return list;",
  "        int len = s.Length;\n        if (len == 0) {\n            return new List<string>();\n\
    \        }\n\n        var result = new List<string>();\n        int n = n % 26;\n\
    \        int m = n % 26;\n        bool b = true;\n        string cur = \"\";\n\
    \        string next = \"\";\n        HashSet<char> set = new HashSet<char>();\n\
    \n        for (int i = 0; i < len; i++) {\n            next = s[i];\n        \
    \    if (set.Contains(next)) {\n                continue;\n            }\n   \
    \         set.Add(next);\n            for (int j = 0, k = i + 1; j < len; j++,\
    \ k++) {\n                cur = s[k];\n                if (set.Contains(cur))\
    \ {\n                    continue;\n                }\n                if (j ==\
    \ k) {\n                    continue;\n                }\n                if (next\
    \ == cur) {\n                    if (next == \" \") {\n                      \
    \  result.Add(next);\n                        i += 1;\n                    }\n\
    \                    if (n == 1) {\n                        result.Add(next);\n\
    \                        break;\n                    }\n                }\n  \
    \              b = false;\n                if (n == 1) {\n                   \
    \ if (IsConsonant(next, cur, m, n)) {\n                        result.Add(next);\n\
    \                        break;\n                    }\n                }\n  \
    \              n = n / 26;\n                m = m / 26;\n            }\n     \
    \       if (b) {\n                result.Add(next);\n            }\n        }\n\
    \        return result;", "        List<string> words = new List<string>();\n\
    \        // TODO: Write your solution here\n        return words;", "        List<string>\
    \ result = new List<string>();\n        char[] c = new char[s.Length];\n     \
    \   int count = 0;\n        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (char x in s) {\n            c[count] = x;\n            count++;\n        }\n\
    \        for (int i = 0; i < s.Length; i++) {\n            if (c[i] == ' ') {\n\
    \                result.Add(sb.ToString());\n                sb = new StringBuilder();\n\
    \            }\n            else\n                sb.Append(c[i]);\n        }\n\
    \        foreach (string x in result) {\n            int count = 0;\n        \
    \    while (x.Length > n) {\n                string temp = x;\n              \
    \  string newTemp = temp.Substring(0, temp.IndexOf(' ', count));\n           \
    \     count++;\n                if (newTemp.IndexOf(' ', count) == -1) {\n   \
    \                 string newTemp2 = temp.Substring(0, temp.IndexOf(' ', count));\n\
    \                    if (newTemp2.IndexOf(' ', count) == -1)\n               \
    \         break;\n                }\n            }\n        }\n        return\
    \ result;", "        int sum = 0;\n        for (int i = 0; i < s.Length; i++)\
    \ {\n            sum += s[i] - ' ';\n        }\n\n        List<string> result\
    \ = new List<string>();\n        long start = 0;\n        long end = 0;\n    \
    \    int sumOfDivisors = 0;\n        string sumOfSubstrings = \"\";\n        while\
    \ (sumOfDivisors < n) {\n            end = start + 1;\n            sumOfSubstrings\
    \ = \"\";\n            while (end < s.Length) {\n                if (s[end] ==\
    \ '\\'') {\n                    sumOfSubstrings += s[end];\n                 \
    \   end++;\n                    continue;\n                }\n               \
    \ int sum = sum - s[end] - ' ';\n                sumOfSubstrings += s[end];\n\
    \                end = end + 1;\n                if (sum == 0 && end - start +\
    \ 1 == sumOfSubstrings.Length) {\n                    result.Add(sumOfSubstrings);\n\
    \                }\n            }\n            sumOfDivisors = 0;\n          \
    \  start = end;\n            for (int i = 0; i < sumOfSubstrings.Length; i++)\
    \ {\n                sum += (int)sumOfSubstrings[i];\n                sumOfDivisors\
    \ += (int)sumOfSubstrings[i] - '0';\n            }\n        }\n\n        return\
    \ result;", "        List<string> result = new List<string>();\n        long numCount\
    \ = 0;\n        foreach(string w in s.Split(' ')) {\n            numCount = 0;\n\
    \            foreach(char c in w) {\n                if (char.IsLetter(c)) {\n\
    \                    numCount++;\n                } else {\n                 \
    \   break;\n                }\n            }\n            if (numCount == n) {\n\
    \                result.Add(w);\n            }\n        }\n        return result;",
  "        var words = new List<string>();\n        if (string.IsNullOrEmpty(s))\n\
    \            return words;\n        bool isWordFound = false;\n        // If n\
    \ is greater or equal to the number of consonants, this string contains\n    \
    \    // only n consonants, so the function returns this string as one word\n \
    \       if (n == 0 || s.Length <= n)\n            words.Add(s);\n        foreach\
    \ (var letter in s)\n        {\n            if (letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u')\n                continue;\n\
    \            if (letter == 'i' && isWordFound)\n                continue;\n  \
    \          words.Add(letter.ToString());\n            isWordFound = true;\n  \
    \      }\n        return words;", "        // Your code here\n        List<string>\
    \ result = new List<string>();\n        string str = \"\";\n        char[] sArray\
    \ = s.ToCharArray();\n        for (int i = 0; i < s.Length; i++) {\n         \
    \   str += sArray[i] + \" \";\n            if (sArray[i] == ' ') {\n         \
    \       result.Add(str);\n                str = \"\";\n            }\n       \
    \ }\n        if (str.Length > 0)\n            result.Add(str);\n        List<string>\
    \ resultList = new List<string>();\n        if (n > result.Count)\n          \
    \  n = result.Count;\n        if (n > 0) {\n            for (int i = 0; i < n;\
    \ i++) {\n                for (int j = 0; j < result.Count; j++) {\n         \
    \           if (result[j].Contains(resultList[i])) {\n                       \
    \ resultList.Add(result[j]);\n                        break;\n               \
    \     }\n                }\n            }\n        }\n        return result;",
  "        List<string> ret = new List<string>();\n        long l = (long)s.Length;\n\
    \        if (l == 0) {\n            return ret;\n        }\n        string word\
    \ = s.Substring(0, (int)l);\n        if (word.Contains(\"x\") || word.Contains(\"\
    X\")) {\n            return ret;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        string firstWord = word.Substring(0, (int)n);\n        for (int i = 0;\
    \ i < n; i++) {\n            sb.Append(firstWord);\n            firstWord = word.Substring((int)n,\
    \ 1);\n        }\n        ret.Add(sb.ToString());\n        return ret;", "   \
    \     return s.Split(' ').Where(w => w.Count(c => char.IsConsonant(c))==n).OrderBy(w=>w).ToList();",
  "        List<string> result = new List<string>();\n        if (s == \"\") return\
    \ result;\n        int[] vowels = { 5, 6, 7 };\n        int[] consonants = { 0,\
    \ 1 };\n        char[] c = s.ToCharArray();\n        int[] p = new int[c.Length];\n\
    \        for (int i = 0; i < c.Length; i++) {\n            if (vowels.Contains(c[i]))\
    \ {\n                p[i] = vowels.IndexOf(c[i]);\n            } else {\n    \
    \            p[i] = consonants.IndexOf(c[i]);\n            }\n        }\n    \
    \    int[] q = new int[c.Length];\n        for (int i = 0; i < c.Length; i++)\
    \ {\n            q[i] = p[i] + n;\n            if (q[i] >= c.Length) q[i] = c.Length\
    \ - 1;\n            if (q[i] < 0) q[i] = 0;\n        }\n        List<string> l\
    \ = new List<string>();\n        l.AddRange(SelectWords(s, 0, new int[c.Length],\
    \ p));\n        return l;", "        long n = Math.Abs(n);\n        if (s == null)\n\
    \            return new List<string>();\n        Dictionary<char, long> count\
    \ = new Dictionary<char, long>();\n        bool isWord = false;\n        for (int\
    \ i = 0; i < s.Length; i++) {\n            char c = s[i];\n            count[c]\
    \ = count.ContainsKey(c) ? count[c] + 1 : 1;\n            if (count[c] == n) {\n\
    \                isWord = true;\n            }\n            if (isWord && count[c]\
    \ >= n) break;\n        }\n        List<string> results = new List<string>();\n\
    \        if (isWord) {\n            for (int i = 0; i < s.Length; i++) {\n   \
    \             char c = s[i];\n                if (count.ContainsKey(c) && count[c]\
    \ == n) {\n                    results.Add(s.Substring(i, s.Length - i));\n  \
    \              }\n            }\n        }\n        return results;", "      \
    \  string word = \"\";\n        bool hasLetter = false;\n        List<string>\
    \ result = new List<string>();\n        foreach (char ch in s) {\n           \
    \ if (char.IsLetter(ch)) {\n                hasLetter = true;\n              \
    \  word += ch;\n            }\n            if (hasLetter == n && word != \"\"\
    ) {\n                result.Add(word);\n                word = \"\";\n       \
    \         hasLetter = false;\n            }\n        }\n        return result;",
  "        // Your code goes here\n        return null;", "        string p = s +\
    \ \"\\0\";\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        while (p.Length > 0) {\n            word = p.Remove(0,\
    \ 1);\n            bool found = true;\n            foreach (char c in word) {\n\
    \                if (char.IsUpper(c)) {\n                    string s = word;\n\
    \                    s = s.ToLower();\n                    string s2 = \"\";\n\
    \                    foreach (char c2 in s) {\n                        if (c2\
    \ != c) {\n                            s2 += c2;\n                        }\n\
    \                    }\n                    if (!s2.Contains(s)) {\n         \
    \               found = false;\n                        break;\n             \
    \       }\n                } else {\n                    if (!p.Contains(c)) {\n\
    \                        found = false;\n                        break;\n    \
    \                }\n                }\n            }\n            if (found) {\n\
    \                result.Add(word);\n                p = p.Remove(word.Length -\
    \ 1, 1);\n                for (int i = 0; i < n; i++) {\n                    string\
    \ s2 = word;\n                    for (int j = 0; j < word.Length; j++) {\n  \
    \                      s2 = s2.Remove(j, 1);\n                    }\n        \
    \            result.Add(s2);\n                    p = p.Remove(s2.Length - 1,\
    \ 1);\n                }\n            }\n        }\n        return result;", " \
    \       if (string.IsNullOrEmpty(s)) {\n            return new List<string>();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        bool found\
    \ = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                if (found) {\n                    sb.Append(c);\n       \
    \             found = false;\n                    sb.Append(\" \");\n        \
    \        } else {\n                    sb.Append(c);\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (sb.Length\
    \ != n) return new List<string>();\n        sb.Replace(\" \", string.Empty);\n\
    \        return Regex.Matches(sb.ToString(), @\"\\b\\w+\\b\").Cast<Match>().ToList();",
  "        string word = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in s.ToUpper()) {\n            if (c.Equals(c))\n   \
    \         {\n                word = \"\";\n            }\n            else\n \
    \           {\n                word += c;\n                if (n == 0)\n     \
    \           {\n                    words.Add(word);\n                }\n     \
    \           else\n                {\n                    if (s.IndexOfAny(c.ToString())\
    \ == -1)\n                    {\n                        words.Add(word);\n  \
    \                      word = \"\";\n                    }\n                }\n\
    \            }\n        }\n        return words;", "        string str = string.Empty;\n\
    \        List<string> results = new List<string>();\n\n        // Your code goes\
    \ here\n        List<string> list = new List<string>();\n        if (s.Length\
    \ != 0)\n        {\n            char[] words = s.ToCharArray();\n            string[]\
    \ arr = new string[words.Length];\n            foreach (string str in words)\n\
    \            {\n                arr[i] = str;\n                i++;\n        \
    \    }\n        }\n\n        return list;", "        // Use a HashSet to remove\
    \ duplicates\n        var set = new HashSet<string>(s);\n        HashSet<string>\
    \ ret = new HashSet<string>();\n        foreach (var word in set) {\n        \
    \    if (word.Count(x => x == 'c') <= n)\n                ret.Add(word);\n   \
    \     }\n        // Return empty list if there are no matches\n        return\
    \ ret.Count == 0 ? new List<string> { string.Empty } : ret;", "        var ret\
    \ = new List<string>();\n        var words = s.Split(' ');\n        foreach(var\
    \ word in words) {\n            if (word.Length == n)\n                ret.Add(word);\n\
    \        }\n        return ret;", "        var list = new List<string>();\n  \
    \      foreach (var letter in s) {\n            list.AddRange(letters.Where(letter\
    \ => IsConsonant(letter)));\n        }\n        return list.Distinct().Take(n).ToList();"]
stop_tokens:
- "\n    }\n"
