language: cs
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '<') {\n                if (sb.Length == 0) {\n                    return\
    \ false;\n                }\n                sb.Append('>');\n            }\n\
    \            else if (brackets[i] == '>') {\n                if (sb.Length !=\
    \ 0) {\n                    return false;\n                }\n               \
    \ sb.Append('<');\n            }\n            else if (brackets[i] == '<') {\n\
    \                if (sb.Length == 0) {\n                    return false;\n  \
    \              }\n                sb.Append('>');\n            }\n        }\n\
    \        return sb.ToString().Length == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd8ea8fb816c49d7b626820d74dca7f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd8ea8fb816c49d7b626820d74dca7f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBracketIndex = 0;\n  \
    \      int closeBracketIndex = 0;\n        int i = 0;\n        while (i < brackets.Length)\
    \ {\n            if (brackets[i] == '<') {\n                if (openBracketIndex\
    \ < closeBracketIndex) {\n                    return false;\n                }\n\
    \                openBracketIndex++;\n            } else {\n                if\
    \ (openBracketIndex != closeBracketIndex) {\n                    return false;\n\
    \                }\n                closeBracketIndex++;\n            }\n    \
    \        i++;\n        }\n        return closeBracketIndex == openBracketIndex;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87593d7baa8f4ec78d01cf1a40a8fe6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87593d7baa8f4ec78d01cf1a40a8fe6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new Stack<char>();\n\
    \        var closingBrackets = new Stack<char>();\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets.Push(c);\n\
    \            } else if (c == '>') {\n                if (openingBrackets.Count\
    \ > 0) {\n                    closingBrackets.Push(openingBrackets.Pop());\n \
    \               } else {\n                    return false;\n                }\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \        // if we are here then every opening bracket has a corresponding closing\
    \ bracket.\n        return closingBrackets.Count == openingBrackets.Count;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fade886c476412193a1aace27088ef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fade886c476412193a1aace27088ef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] open = brackets.ToCharArray();\n\
    \        char[] close = open.Reverse().ToArray();\n        // for each opening\
    \ bracket, check if we encounter a matching closing bracket.\n        foreach\
    \ (char c in open) {\n            int count = 0;\n            foreach (char d\
    \ in close) {\n                if (d == c)\n                    count++;\n   \
    \         }\n            if (count == 0)\n                return false;\n    \
    \    }\n        // if we get here, we have all opening brackets properly closed.\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30ee6e85de174da69f6996624ecfce11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30ee6e85de174da69f6996624ecfce11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBracketCount = 0;\n  \
    \      int closeBracketCount = 0;\n\n        for(int i = 0; i < brackets.Length;\
    \ i++) {\n            if (brackets[i] == '<') {\n                openBracketCount++;\n\
    \            }\n            else if (brackets[i] == '>') {\n                closeBracketCount++;\n\
    \            }\n        }\n\n        if (closeBracketCount == openBracketCount)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f3eb48168af4ca08caa6d6bebffdeb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f3eb48168af4ca08caa6d6bebffdeb0>:0 \n"
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<int> openingBrackets = new\
    \ List<int>();\n        List<int> closingBrackets = new List<int>();\n       \
    \ foreach (char c in brackets) {\n            int openingBracketIndex = brackets.IndexOf(c\
    \ + \"<\");\n            int closingBracketIndex = brackets.IndexOf(c + \">\"\
    );\n            if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n\
    \                return false;\n            }\n            openingBrackets.Add(openingBracketIndex);\n\
    \            closingBrackets.Add(closingBracketIndex);\n        }\n        return\
    \ openingBrackets.All(i => closingBrackets.Contains(i));\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d6f52620e0a4572b9c4e89f40323e51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d6f52620e0a4572b9c4e89f40323e51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Count(c => c ==\
    \ \">\") + brackets.Count(c => \"<\") > 2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwlfcfauk.cs(20,36): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpwlfcfauk.cs(20,68): error CS0029: Cannot implicitly convert type ''string''
    to ''bool''

    /tmp/tmpwlfcfauk.cs(20,68): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // convert strings to character\
    \ arrays:\n        char[] opening = brackets.ToCharArray();\n        char[] closing\
    \ = brackets.Reverse().ToCharArray();\n\n        // if opening and closing are\
    \ both empty, then brackets contains no brackets\n        if (opening.Length ==\
    \ 0 || closing.Length == 0) return true;\n\n        // for each opening bracket,\
    \ look at the corresponding closing bracket.\n        // if it's not found, return\
    \ false; otherwise, compare the corresponding character in both arrays.\n    \
    \    for (int i = 0; i < opening.Length; i++) {\n            char open = opening[i];\n\
    \            char close = closing[i];\n            if (close != open) {\n    \
    \            return false;\n            }\n        }\n        return true;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdncxz22v.cs(22,45): error CS1061: ''IEnumerable<char>'' does not contain
    a definition for ''ToCharArray'' and no accessible extension method ''ToCharArray''
    accepting a first argument of type ''IEnumerable<char>'' could be found (are you
    missing a using directive or an assembly reference?)

    '
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string s = \"<\";\n        string\
    \ openingBracket = brackets[0];\n        bool foundClosing = false;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            string bracket = brackets[i];\n\
    \            if (bracket == \">\") {\n                foundClosing = true;\n \
    \           } else if (bracket == \">=\") {\n                foundClosing = false;\n\
    \            } else if (bracket == s) {\n                foundClosing = false;\n\
    \                s = s.Replace(\"=\", \"!=\");\n            } else if (bracket\
    \ == s) {\n                s = s.Replace(\">=\", \"!=\");\n            }\n   \
    \     }\n        return foundClosing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3xpgj43b.cs(21,33): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp3xpgj43b.cs(24,30): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Regex regex = new Regex(@\"\\\
    <(.*?)\\>\");\n        return regex.IsMatch(brackets);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_p4_ik7.cs(20,9): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpj_p4_ik7.cs(20,27): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] openingBrackets = { '<',\
    \ '>' };\n        int openingCount = 0, closingCount = 0;\n        for (int i\
    \ = 0; i < brackets.Length; i++) {\n            if (openingBrackets.Contains(brackets[i]))\
    \ {\n                openingCount++;\n            }\n            else {\n    \
    \            closingCount++;\n            }\n        }\n        return openingCount\
    \ == closingCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05dcc5e468e54968a777f6e8282e87cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05dcc5e468e54968a777f6e8282e87cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ < 1)\n            return false;\n        var openingBrackets = new HashSet<char>();\n\
    \        var closingBrackets = new HashSet<char>();\n        foreach (var c in\
    \ brackets) {\n            switch (c) {\n                case '<': openingBrackets.Add('>');\
    \ closingBrackets.Add('>'); break;\n                case '>': openingBrackets.Add('<');\
    \ closingBrackets.Add('<'); break;\n                case '<': openingBrackets.Add('>');\
    \ closingBrackets.Add('>'); break;\n                case '>': openingBrackets.Add('<');\
    \ closingBrackets.Add('<'); break;\n            }\n        }\n        return openingBrackets.Count\
    \ <= closingBrackets.Count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbjcp80f2.cs(28,17): error CS0152: The switch statement contains multiple
    cases with the label value ''<''

    /tmp/tmpbjcp80f2.cs(29,17): error CS0152: The switch statement contains multiple
    cases with the label value ''>''

    '
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return CorrectBracketing(brackets,\
    \ 0).FirstOrDefault();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpypubp9t4.cs(20,16): error CS1501: No overload for method ''CorrectBracketing''
    takes 2 arguments

    '
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // remove any trailing newline\n\
    \        brackets = brackets.TrimEnd('\\r', '\\n', '\\0', '\\n');\n        bool\
    \ isCorrect = true;\n        foreach (char opening in brackets.ToCharArray())\
    \ {\n            if (opening == '<') {\n                int closing = brackets.IndexOf('<',\
    \ 0, brackets.IndexOf(brackets, 0, brackets.IndexOf(opening) + 1));\n        \
    \        if (closing < 0) {\n                    isCorrect = false;\n        \
    \            break;\n                }\n                string openings = brackets.Substring(0,\
    \ closing);\n                string closings = brackets.Substring(closing + 1);\n\
    \                bool match = openings.IndexOf(brackets, 0, openings.IndexOf(opening)\
    \ + 1) == openings.Length;\n                if (!match) {\n                  \
    \  isCorrect = false;\n                    break;\n                }\n       \
    \         int closingBracket = closings.IndexOf('>');\n                if (closingBracket\
    \ < 0) {\n                    isCorrect = false;\n                    break;\n\
    \                }\n                int closingBracketOpeningLength = openings.IndexOf(brackets,\
    \ 0, closingBracket);\n                int closingBracketClosingLength = closings.IndexOf(brackets,\
    \ 0, closingBracketOpeningLength + 1);\n                if (closingBracketClosingLength\
    \ < 0 || closingBracketClosingLength > closings.Length - 1) {\n              \
    \      isCorrect = false;\n                    break;\n                }\n   \
    \             string closingBrackets = closings.Substring(0, closingBracketClosingLength);\n\
    \                bool closingBracketsMatch = closingBrackets.IndexOf(brackets,\
    \ 0, closingBrackets.IndexOf(opening) + 1) == closingBrackets.Length;\n      \
    \          if (!closingBracketsMatch) {\n                    isCorrect = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return isCorrect;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Count must\
    \ be positive and count must refer to a location within the string/array/collection.\n\
    Parameter name: count\n  at System.String.IndexOf (System.Char value, System.Int32\
    \ startIndex, System.Int32 count) [0x00024] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00054] in <cfb556b99e454386b134186193a0206b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <cfb556b99e454386b134186193a0206b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Count\
    \ must be positive and count must refer to a location within the string/array/collection.\n\
    Parameter name: count\n  at System.String.IndexOf (System.Char value, System.Int32\
    \ startIndex, System.Int32 count) [0x00024] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00054] in <cfb556b99e454386b134186193a0206b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <cfb556b99e454386b134186193a0206b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Return false if brackets is\
    \ null or empty.\n        if (brackets == null) return false;\n        // Return\
    \ false if the string is empty.\n        if (brackets.Length <= 1) return false;\n\
    \n        // Set up a stack to keep track of brackets.\n        Stack<char> stack\
    \ = new Stack<char>();\n        // Set up a boolean value to keep track of whether\
    \ brackets are correct.\n        bool correct = true;\n\n        // Iterate through\
    \ the string, and whenever we encounter an opening bracket,\n        // push it\
    \ to the stack.  When we encounter a closing bracket, pop\n        // it off the\
    \ stack, and check to see if the top of the stack is\n        // equal to the\
    \ closing bracket.  If not, the brackets are not correct.\n        foreach (char\
    \ bracket in brackets) {\n            if (char.IsLetter(bracket) || char.IsDigit(bracket))\
    \ {\n                stack.Push(bracket);\n            } else {\n            \
    \    // If the current character is a letter, a digit, the\n                //\
    \ stack is empty, we've encountered a mismatched bracket.\n                //\
    \ The string is not correct and the function returns false.\n                if\
    \ (stack.Count == 0) {\n                    correct = false;\n               \
    \     break;\n                }\n                // Otherwise, if the top of the\
    \ stack is the current\n                // closing bracket, then the brackets\
    \ are correct.\n                else if (stack.Pop().ToString() != bracket.ToString())\
    \ {\n                    correct = false;\n                    break;\n      \
    \          }\n            }\n        }\n        return correct;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd7c97ad9dfd4ef5931ccbfe50d2cfa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dd7c97ad9dfd4ef5931ccbfe50d2cfa5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Length > 0 &&\n\
    \            ((brackets.Contains(\"<\") && brackets.Contains(\">\")) ||\n    \
    \        (brackets.Contains(\"<=\") && brackets.Contains(\">=\")) ||\n       \
    \     (brackets.Contains(\"<=\") && brackets.Contains(\">\")));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b28b7a67dc9d4ed4ba575cf294165efc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b28b7a67dc9d4ed4ba575cf294165efc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // get rid of \"(\" and \")\"\
    \ first\n        brackets = brackets.Replace(\"(\", String.Empty);\n        brackets\
    \ = brackets.Replace(\")\", String.Empty);\n        bool result = false;\n   \
    \     // split string into brackets\n        char[] bracketArray = brackets.ToCharArray();\n\
    \        int openingBracketCount = 0;\n        int closingBracketCount = 0;\n\
    \        for (int i = 0; i < bracketArray.Length; i++) {\n            char bracket\
    \ = bracketArray[i];\n            if (bracket == '<') {\n                openingBracketCount++;\n\
    \            }\n            if (bracket == '>') {\n                closingBracketCount++;\n\
    \            }\n        }\n        if (openingBracketCount != closingBracketCount)\
    \ {\n            result = true;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cd305a048874545933a62ad9e0cacd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cd305a048874545933a62ad9e0cacd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] opening = new string[brackets.Length\
    \ / 2];\n        string[] closing = new string[brackets.Length / 2];\n       \
    \ for (int i = 0; i < brackets.Length; i += 2) {\n            opening[i/2] = brackets.Substring(i,\
    \ 2);\n            closing[i/2] = brackets.Substring(i + 1, 2);\n        }\n \
    \       return opening.All(open => closing.All(close => open == close));\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x0003a] in <f5c7eec73d6d4e72a1bd9a51ebe67e5f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <f5c7eec73d6d4e72a1bd9a51ebe67e5f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x0003a] in <f5c7eec73d6d4e72a1bd9a51ebe67e5f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <f5c7eec73d6d4e72a1bd9a51ebe67e5f>:0 \n"
  stdout: ''
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string openingBrackets = \"\"\
    ;\n        string closingBrackets = \"\";\n        int openingBracketCount = 0,\
    \ closingBracketCount = 0;\n\n        // For every opening bracket...\n      \
    \  for (int i = 0; i < brackets.Length; i++) {\n            // ...increment the\
    \ counter variable.\n            openingBracketCount++;\n\n            // If this\
    \ character is equal to the next character...\n            if (brackets[i] ==\
    \ brackets[i + 1]) {\n                // ...the count is increased by one.\n \
    \               openingBracketCount++;\n            } else {\n               \
    \ // If this character is equal to another character...\n                if (brackets[i]\
    \ == '<') {\n                    // ...the count is increased by one.\n      \
    \              openingBracketCount++;\n                    // ...and added to\
    \ the opening bracket list.\n                    openingBrackets += brackets[i];\n\
    \                } else {\n                    // If this character is equal to\
    \ another character...\n                    if (brackets[i] == '>') {\n      \
    \                  // ...the count is increased by one.\n                    \
    \    openingBracketCount++;\n                        // ...and added to the opening\
    \ bracket list.\n                        openingBrackets += brackets[i];\n   \
    \                     // ...and added to the closing bracket list.\n         \
    \               closingBrackets += brackets[i + 1];\n                    }\n \
    \               }\n            }\n        }\n\n        // For every closing bracket...\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            // ...decrement\
    \ the counter variable.\n            closingBracketCount--;\n\n            //\
    \ If this character is equal to the next character...\n            if (brackets[i]\
    \ == brackets[i + 1]) {\n                // ...the count is increased by one.\n\
    \                closingBracketCount--;\n            } else {\n              \
    \  // If this character is equal to another character...\n                if (brackets[i]\
    \ == '<') {\n                    // ...the count is increased by one.\n      \
    \              closingBracketCount--;\n                    // ...and added to\
    \ the opening bracket list.\n                    closingBrackets += brackets[i];\n\
    \                } else {\n                    // If this character is equal to\
    \ another character...\n                    if (brackets[i] == '>') {\n      \
    \                  // ...the count is increased by one.\n                    \
    \    closingBracketCount--;\n                        // ...and added to the opening\
    \ bracket list.\n                        closingBrackets += brackets[i];\n   \
    \                     // ...and added to the closing bracket list.\n         \
    \               openingBrackets += brackets[i + 1];\n                    }\n \
    \               }\n            }\n        }\n\n        // If the opening bracket\
    \ count is zero, the brackets are in\n        // the wrong order (i.e., there\
    \ are no opening and closing\n        // brackets).\n        if (openingBracketCount\
    \ == 0)\n            return false;\n        // If the closing bracket count is\
    \ zero, the brackets are in\n        // the wrong order (i.e., there are no opening\
    \ and closing\n        // brackets).\n        else if (closingBracketCount ==\
    \ 0)\n            return true;\n\n        // Otherwise, the brackets are \n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptebzf4ec.cs(19,24): error CS0161: ''Problem.CorrectBracketing(string)'':
    not all code paths return a value

    '
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Contains(\"<\"\
    ) && (brackets.Contains(\">\") || brackets.Contains(\"<<\"));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac10f702b07745b285ddc60b19906766>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac10f702b07745b285ddc60b19906766>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length % 2 == 1)\
    \ return false;\n        if (brackets == \"<>\") return true;\n        // this\
    \ check is probably not needed.\n        if (brackets.Length == 0 || brackets.Length\
    \ == 1) return true;\n        string openingBracketsAsString = \"\";\n       \
    \ for (int i = 0; i < brackets.Length; i++)\n        {\n            if (brackets[i]\
    \ != \"<\" && brackets[i] != \">\") return false;\n            if (openingBracketsAsString.Length\
    \ > 0)\n            {\n                if (openingBracketsAsString.Length != (i\
    \ + 1))\n                    return false;\n                if (openingBracketsAsString[0]\
    \ != brackets[i])\n                    return false;\n                openingBracketsAsString\
    \ = openingBracketsAsString.Substring(1);\n            }\n            else { openingBracketsAsString\
    \ = brackets[i]; }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_2bffw_c.cs(27,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp_2bffw_c.cs(27,39): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp_2bffw_c.cs(36,46): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBrackets = 0;\n      \
    \  for (int i = 0; i < brackets.Length; i++)\n        {\n            if (brackets[i]\
    \ == '<') openBrackets++;\n            if (brackets[i] == '>') openBrackets--;\n\
    \        }\n        return openBrackets == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <750da85f1dad4a88994e54b2487b8f35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <750da85f1dad4a88994e54b2487b8f35>:0 \n"
  stdout: ''
  timestamp: 1659976933
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string s = brackets;\n       \
    \ int count = 0;\n        bool ans = false;\n        for(int i = s.Length - 1;\
    \ i >= 0; i--) {\n            if(s.Substring(i, 1) == \">\") {\n             \
    \   count++;\n                if(brackets.Substring(count * 2, 2) == \">>\")\n\
    \                    ans = true;\n                else\n                    ans\
    \ = false;\n            }\n            else if(s.Substring(i, 1) == \"<\") {\n\
    \                count--;\n                if(count == 0 && brackets.Substring(count\
    \ * 2, 2) == \"<<\")\n                    ans = true;\n                else\n\
    \                    ans = false;\n            }\n        }\n        return ans;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00033] in <5d493c360cc0472595b8ef27b0a8ab50>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <5d493c360cc0472595b8ef27b0a8ab50>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x00033] in <5d493c360cc0472595b8ef27b0a8ab50>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <5d493c360cc0472595b8ef27b0a8ab50>:0 \n"
  stdout: ''
  timestamp: 1659976933
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) return false;\n\
    \        var stack = new Stack<char>();\n        foreach (char c in brackets)\
    \ {\n            if (c == '>') {\n                if (stack.Count != 0) return\
    \ false;\n                if (c != '>') return false;\n                stack.Clear();\n\
    \            } else if (c == '<') {\n                if (stack.Count != 1) return\
    \ false;\n                if (c != '<') return false;\n                stack.Clear();\n\
    \            } else if (stack.Count != 0) {\n                if (c != '>' && c\
    \ != '<') return false;\n            } else {\n                stack.Push(c);\n\
    \            }\n        }\n        if (stack.Count != 0) return false;\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01ac36c3b7f04a59adfe2360e5c57a9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01ac36c3b7f04a59adfe2360e5c57a9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBrackets = 0;\n   \
    \     for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '<')\n                openingBrackets++;\n            else if (brackets[i]\
    \ == '>')\n                openingBrackets--;\n        }\n        return openingBrackets\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33e39f3d2465438ca88b641d714b9500>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33e39f3d2465438ca88b641d714b9500>:0 \n"
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return false;\n        List<char> openingBrackets = brackets.ToCharArray().Where(ch\
    \ => ch == '<').ToList();\n        List<char> closingBrackets = brackets.ToCharArray().Where(ch\
    \ => ch == '>').ToList();\n        foreach(char openingBracket in openingBrackets)\
    \ {\n            if (!closingBrackets.Contains(openingBracket))\n            \
    \    return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87e40474d36e4ac1a2759fd5a03cadf1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87e40474d36e4ac1a2759fd5a03cadf1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<string>();\n\
    \        foreach (char c in brackets) {\n            switch (c) {\n          \
    \  case '<':\n                stack.Push('>');\n                break;\n     \
    \       case '>':\n                string curr = stack.Pop();\n              \
    \  if (curr != \"<\")\n                    return false;\n                break;\n\
    \            default:\n                if (!stack.Contains(c))\n             \
    \       return false;\n                break;\n            }\n        }\n    \
    \    return stack.Count == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2lj3tcrt.cs(24,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp2lj3tcrt.cs(32,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string correct = brackets.Replace(\"\
    >\", \"><\").Replace(\"<\", \"><\");\n        return correct == brackets;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cef5be8e27ef461a83be482755227ddb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cef5be8e27ef461a83be482755227ddb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      throw new ArgumentNullException(\"brackets\");\n        if (brackets.Length\
    \ == 0)\n            throw new ArgumentException(\"brackets\", \"brackets cannot\
    \ be empty\", \"brackets\");\n        if (brackets.Length > 1)\n            return\
    \ false;\n        StringBuilder sb = new StringBuilder(brackets[0]);\n       \
    \ for (int i = 1; i < brackets.Length; i++) {\n            char c = brackets[i];\n\
    \            if (c == '>')\n                sb.Append(c);\n            else if\
    \ (c == '<')\n                sb.Insert(0, c);\n            else if (c != brackets[0])\n\
    \                return false;\n        }\n        return sb.ToString().All(c\
    \ => c == '<');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz64c0r4c.cs(23,81): error CS1503: Argument 3: cannot convert from ''string''
    to ''System.Exception''

    '
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool allFound = true;\n      \
    \  var charArray = brackets.ToArray();\n        var openingBrackets = new List<char>();\n\
    \        var closingBrackets = new List<char>();\n        foreach (var c in charArray)\
    \ {\n            switch (c) {\n                case '<':\n                   \
    \ openingBrackets.Add(c);\n                    break;\n                case '>':\n\
    \                    if (openingBrackets.Contains(c)) {\n                    \
    \    closingBrackets.Add(c);\n                    }\n                    break;\n\
    \            }\n        }\n        if (openingBrackets.Count != closingBrackets.Count)\
    \ {\n            allFound = false;\n        }\n        return allFound;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d829d59a648245e580263d8e83776d09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d829d59a648245e580263d8e83776d09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // A list to hold the positions\
    \ of matching brackets.\n        List<int> matchingBrackets = new List<int>();\n\
    \        // Iterate through the string and record the positions of matching brackets.\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            // A flag for\
    \ whether the current character is matching bracket.\n            bool matchBracket\
    \ = false;\n            // Iterate through the positions to find matching brackets.\n\
    \            for (int j = 0; j < matchingBrackets.Count; j++)\n              \
    \  // If the matching bracket exists, add the index to the list.\n           \
    \     if (brackets[i] == brackets[matchingBrackets[j]])\n                    matchBracket\
    \ = true;\n            // If a matching bracket is found, record the position\
    \ in the list.\n            if (matchBracket) {\n                matchingBrackets.Add(i);\n\
    \            }\n        }\n        // If there are matching brackets, there will\
    \ be one closing bracket at the end.\n        if (matchingBrackets.Count >= 2)\n\
    \            return true;\n        // Otherwise, there will be one opening bracket\
    \ at the beginning.\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <835f794f8edd457da1adc1a107da4f7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <835f794f8edd457da1adc1a107da4f7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBrackets = 0;\n      \
    \  int current = 0;\n        bool isDone = true;\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                current++;\n            } else\
    \ if (c == '>') {\n                current--;\n            } else if (c == '<'\
    \ && current == 0) {\n                isDone = false;\n            }\n       \
    \     if (current == 0) {\n                openBrackets--;\n            } else\
    \ {\n                openBrackets++;\n            }\n        }\n        return\
    \ isDone;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fa44f7739954980b89e1e5e0677764c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fa44f7739954980b89e1e5e0677764c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<string> open = new List<string>();\n\
    \        List<string> close = new List<string>();\n        foreach (string i in\
    \ brackets) {\n            if (i.Equals('<')) {\n                open.Add(i);\n\
    \            } else\n            if (i.Equals('>')) {\n                close.Add(i);\n\
    \            } else\n            if (i.Equals('(')) {\n                if (close.Count\
    \ > 0) {\n                    if (close[close.Count - 1] != '(') {\n         \
    \               return false;\n                    }\n                } else {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n        if (open.Count == 0) {\n            return true;\n        }\n   \
    \     if (close.Count == 0) {\n            return false;\n        }\n        bool\
    \ flag = false;\n        foreach (string j in open) {\n            if (close.Contains(j))\
    \ {\n                flag = true;\n            }\n        }\n        return flag;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpofyg_tz2.cs(31,25): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpofyg_tz2.cs(22,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<string>();\n\
    \        foreach (var bracket in brackets) {\n            if (bracket == \"<\"\
    )\n                stack.Push(bracket);\n            else if (bracket == \">\"\
    )\n                while (stack.Count > 0 && stack.Peek() != \"<\")\n        \
    \            stack.Pop();\n            else\n                while (stack.Count\
    \ > 0 && stack.Peek() != \"<\" && stack.Peek() != \">\")\n                   \
    \ stack.Pop();\n        }\n        return stack.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkkindhwq.cs(22,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpkkindhwq.cs(23,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpkkindhwq.cs(24,22): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if(brackets == null) return false;\n\
    \        for(int i = 0; i < brackets.Length; i++)\n            if(brackets[i]\
    \ == '<') return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01574a1e114c40d6815d5ad2c60bdeef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01574a1e114c40d6815d5ad2c60bdeef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return (brackets.Count(n => n\
    \ == '<') == brackets.Count(n => n == '>'));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0de72490848c4ba980849138dbb69283>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0de72490848c4ba980849138dbb69283>:0 \n"
  stdout: ''
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string pattern = string.Join(\"\
    |\", brackets);\n        var openingBracketRegex = new Regex(pattern, RegexOptions.IgnoreCase);\n\
    \        foreach (char c in brackets) {\n            if (openingBracketRegex.IsMatch(c))\n\
    \                return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpongyuipa.cs(21,39): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpongyuipa.cs(21,54): error CS0103: The name ''RegexOptions'' does not exist
    in the current context

    '
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBrackets = 0;\n   \
    \     int closingBrackets = 0;\n        for (int i = 0; i < brackets.Length; i++)\
    \ {\n            if (brackets[i] == '<') {\n                openingBrackets++;\n\
    \            }\n            if (brackets[i] == '>') {\n                closingBrackets++;\n\
    \            }\n        }\n        return (openingBrackets == closingBrackets);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cabfff31cda4e8a933cb93276bfed0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cabfff31cda4e8a933cb93276bfed0e>:0 \n"
  stdout: ''
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack stack = new Stack();\n \
    \       for (int i = 0; i < brackets.Length; i++) {\n            char bracket\
    \ = brackets[i];\n            if (bracket == '<') {\n                stack.push(bracket);\n\
    \            } else if (bracket == '>') {\n                char next = stack.pop();\n\
    \                if (next == '<') {\n                    return false;\n     \
    \           } else if (next != '>') {\n                    return true;\n    \
    \            }\n            } else if (bracket == '<') {\n                char\
    \ next = stack.pop();\n                if (next == '<') {\n                  \
    \  return true;\n                } else if (next != '>') {\n                 \
    \   return false;\n                }\n            }\n        }\n        return\
    \ stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk5zw94fv.cs(20,9): error CS0305: Using the generic type ''Stack<T>'' requires
    1 type arguments

    /tmp/tmpk5zw94fv.cs(20,27): error CS0305: Using the generic type ''Stack<T>''
    requires 1 type arguments

    /tmp/tmpk5zw94fv.cs(41,16): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string text = brackets.Replace(\"\
    <|>\", \" \");\n        // Split the string into individual words using the space\
    \ character\n        // as the delimiter.\n        List<string> words = text.Split().Where(word\
    \ => !string.IsNullOrEmpty(word)).ToList();\n        List<string> list = new List<string>();\n\
    \        foreach (string word in words) {\n            list.Add(word);\n     \
    \   }\n        bool result = false;\n        string last = \"\";\n        // Compare\
    \ every word with the previous word.\n        for (int i = 0; i < list.Count -\
    \ 1; i++) {\n            string current = list[i];\n            if (current.StartsWith(\"\
    <\") && last.EndsWith(\">\")) {\n                result = true;\n            }\n\
    \            last = current;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb4b0e9d455e407ca9714f03692d6052>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fb4b0e9d455e407ca9714f03692d6052>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // If there are no brackets, this\
    \ must be false.\n        if (brackets == null)\n            return false;\n\n\
    \        // First, find every opening bracket in the input string.\n        string\
    \ openingBracket = string.Empty;\n        int openingBracketCount = 0;\n     \
    \   int openingBracketPos = 0;\n        while ((openingBracketPos = brackets.IndexOf(\"\
    <\", openingBracketPos + 1)) != -1) {\n            ++openingBracketCount;\n  \
    \          openingBracket = brackets.Substring(openingBracketPos, openingBracket.Length);\n\
    \        }\n\n        // If there are zero brackets, this must be false.\n   \
    \     if (openingBracketCount == 0)\n            return false;\n\n        // Next,\
    \ find every closing bracket in the input string.\n        int closingBracketPos\
    \ = 0;\n        string closingBracket = string.Empty;\n        while ((closingBracketPos\
    \ = brackets.IndexOf(\">\", closingBracketPos + 1)) != -1) {\n            closingBracket\
    \ = brackets.Substring(closingBracketPos, closingBracket.Length);\n        }\n\
    \n        // If there are zero closing brackets, this must be false.\n       \
    \ if (closingBracket.Length == 0)\n            return false;\n\n        // Otherwise,\
    \ they must match.\n        return openingBracket == closingBracket;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <824e3ea7564a45ee8276a2a31a486cc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <824e3ea7564a45ee8276a2a31a486cc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string pattern = String.Format(\"\
    \\\\<({0})\\\\>\", String.Join(\"|\", brackets.ToCharArray()));\n        string\
    \ input = String.Join(\"\", brackets.ToCharArray());\n        bool result = Regex.IsMatch(input,\
    \ pattern);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgorwj3i4.cs(22,23): error CS0103: The name ''Regex'' does not exist in
    the current context

    '
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Dictionary<char, int> counts =\
    \ brackets.ToDictionary(c => c, c => 1);\n        foreach (char c in brackets)\
    \ {\n            counts[c]++;\n        }\n        bool hasCorrectCount = true;\n\
    \        foreach (char c in brackets) {\n            if (counts[c] != 1) {\n \
    \               hasCorrectCount = false;\n            }\n        }\n        return\
    \ hasCorrectCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <597c4a90a4444756945c94d9092b5f73>:0 \n\nUnhandled Exception:\n\
    System.ArgumentException: An item with the same key has already been added. Key:\
    \ <\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey\
    \ key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`2[T,TResult] keySelector, System.Func`2[T,TResult] elementSelector,\
    \ System.Collections.Generic.IEqualityComparer`1[T] comparer) [0x0009e] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`2[T,TResult] keySelector, System.Func`2[T,TResult] elementSelector)\
    \ [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.CorrectBracketing\
    \ (System.String brackets) [0x00001] in <597c4a90a4444756945c94d9092b5f73>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00011] in <597c4a90a4444756945c94d9092b5f73>:0 "
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBracketsCounts = new\
    \ Dictionary<char, int>();\n        var closingBracketsCounts = new Dictionary<char,\
    \ int>();\n        for (int i = 0; i < brackets.Length; i++) {\n            var\
    \ c = brackets[i];\n            if (!openingBracketsCounts.ContainsKey(c)) {\n\
    \                openingBracketsCounts[c] = 1;\n                closingBracketsCounts[c]\
    \ = 0;\n            } else {\n                openingBracketsCounts[c]++;\n  \
    \          }\n        }\n        for (int i = 0; i < brackets.Length; i++) {\n\
    \            var c = brackets[i];\n            if (!closingBracketsCounts.ContainsKey(c))\
    \ {\n                closingBracketsCounts[c] = 1;\n            } else {\n   \
    \             closingBracketsCounts[c]++;\n            }\n        }\n        return\
    \ closingBracketsCounts.Values.All(c => c == 0);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dff21a61cfdc47c6bf0f9a0bc5eb22f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dff21a61cfdc47c6bf0f9a0bc5eb22f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new List<int>();\n\
    \        var closingBrackets = new List<int>();\n        for (var i = 0; i < brackets.Length;\
    \ i++) {\n            var bracket = brackets[i];\n            if (bracket == '<')\
    \ {\n                openingBrackets.Add(i);\n            }\n            if (bracket\
    \ == '>') {\n                closingBrackets.Add(i);\n            }\n        }\n\
    \        return openingBrackets.Count == closingBrackets.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <106c45da78cb4c5ca0aac59fa53c5191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <106c45da78cb4c5ca0aac59fa53c5191>:0 \n"
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Split(new[] {\
    \ '<', '>' }, StringSplitOptions.RemoveEmptyEntries).All(x => x.Equals(\"<\",\
    \ StringComparison.OrdinalIgnoreCase)) && brackets.Split(new[] { '<', '>' }, StringSplitOptions.RemoveEmptyEntries).All(x\
    \ => x.Equals(\">\", StringComparison.OrdinalIgnoreCase));\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b756de39ff674d8da3d2988dc4fd3012>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b756de39ff674d8da3d2988dc4fd3012>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976934
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int counter = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                counter++;\n\
    \            }\n            else if (c == '>') {\n                if (counter\
    \ == 0) {\n                    return false;\n                }\n            \
    \    counter--;\n            }\n        }\n        return counter == 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int len = brackets.Length;\n \
    \       Stack<char> stack = new Stack<char>();\n        bool first = true;\n \
    \       foreach (char c in brackets) {\n            if (c == '<') {\n        \
    \        if (first) {\n                    first = false;\n                } else\
    \ {\n                    if (stack.Count > 0 && stack.Peek() == '>') return false;\n\
    \                    stack.Push(stack.Count == 0 ? c : stack.Pop());\n       \
    \         }\n            } else {\n                if (stack.Count == 0 || stack.Peek()\
    \ != '<') return false;\n                stack.Pop();\n            }\n       \
    \ }\n        return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <011be035eeb04c5f953a4a597984bfad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <011be035eeb04c5f953a4a597984bfad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new Stack<char>();\n\
    \        var closingBrackets = new Stack<char>();\n\n        // keep track of\
    \ opened and closed brackets.\n        foreach (char c in brackets) {\n      \
    \      // open brackets.\n            if (c == '<')\n                openingBrackets.Push(c);\n\
    \            // close brackets.\n            else if (c == '>')\n            \
    \    closingBrackets.Push(c);\n            else\n                continue;\n \
    \       }\n\n        if (openingBrackets.Count == closingBrackets.Count)\n   \
    \         return true;\n\n        // opening brackets don't match closing brackets.\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dfd1e53783b4511868600d019bb569b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dfd1e53783b4511868600d019bb569b>:0 \n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var counter = 0;\n        var\
    \ count = 0;\n        var isopen = false;\n        foreach (char c in brackets)\
    \ {\n            switch (c) {\n                case '<':\n                   \
    \ if (!isopen) {\n                        isopen = true;\n                   \
    \     counter++;\n                    }\n                    break;\n        \
    \        case '>':\n                    if (isopen) {\n                      \
    \  isopen = false;\n                        counter--;\n                    }\n\
    \                    break;\n            }\n            count++;\n        }\n\
    \        return (count % 2 == 1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8986bb91baee41e0836a00e719d8f3b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8986bb91baee41e0836a00e719d8f3b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = false;\n       \
    \ if (brackets != null) {\n            List<int> open = new List<int>();\n   \
    \         List<int> close = new List<int>();\n            int count = 0;\n   \
    \         foreach (var c in brackets) {\n                if (c == '<') {\n   \
    \                 open.Add(count++);\n                }\n                else\
    \ if (c == '>') {\n                    close.Add(count++);\n                }\n\
    \            }\n            for (int i = 0; i < open.Count; i++) {\n         \
    \       if (close.Contains(open[i])) {\n                    result = true;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b606f69e37e4c49a080b3921ff0ad18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b606f69e37e4c49a080b3921ff0ad18>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool found = false;\n        //\
    \ If brackets is empty, there is nothing to check!\n        if (String.IsNullOrEmpty(brackets))\
    \ return false;\n\n        // Make sure that the brackets we are checking are\
    \ the same type.\n        // If they are not the same type, return false.\n  \
    \      if (!brackets.All(char => char.IsLetterOrDigit())) return false;\n\n  \
    \      // Convert the string to an array.\n        char[] array = brackets.ToCharArray();\n\
    \        // Initialize the count of opening and closing brackets.\n        int\
    \ count = 0;\n        // Initialize the number of opening brackets.\n        int\
    \ openingCount = 0;\n        // Initialize the number of closing brackets.\n \
    \       int closingCount = 0;\n\n        // Check each character in the string\
    \ and\n        // count the number of opening brackets.\n        for (int i =\
    \ 0; i < array.Length; i++) {\n            // Check if the character is a bracket.\n\
    \            if (array[i] == '<') {\n                // If the opening bracket\
    \ is found, increment the count.\n                if (openingCount == 0) {\n \
    \                   count++;\n                }\n                // If not the\
    \ first opening bracket, increment the count.\n                else {\n      \
    \              count++;\n                }\n            }\n            // Check\
    \ if the character is a bracket.\n            else if (array[i] == '>') {\n  \
    \              // If the closing bracket is found, decrement the count.\n    \
    \            if (closingCount == 0) {\n                    count--;\n        \
    \        }\n                // If not the first closing bracket, decrement the\
    \ count.\n                else {\n                    count--;\n             \
    \   }\n            }\n            // Check if the character is an opening bracket.\n\
    \            else if (array[i] == '(') {\n                // If this is the first\
    \ opening bracket, increment the count.\n                if (openingCount == 0)\
    \ {\n                    count++;\n                }\n                // If not\
    \ the first opening bracket, increment the count.\n                else {\n  \
    \                  count++;\n                }\n                openingCount++;\n\
    \            }\n            // Check if the character is a closing bracket.\n\
    \            else if (array[i] == ')') {\n                // If this is the first\
    \ closing bracket, decrement the count.\n                if (closingCount == 0)\
    \ {\n                    count--;\n                }\n                // If not\
    \ the first closing bracket, decrement the count.\n                else {\n  \
    \                  count--;\n                }\n                closingCount++;\n\
    \            }\n        }\n        // If the count is 0, the brackets are balanced.\n\
    \        if (count == 0) {\n            found = true;\n        }\n        // Otherwise,\
    \ there are unbalanced brackets.\n        else {\n            found = false;\n\
    \        }\n        // Return the found value.\n        return found;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_w0vtx8w.cs(26,27): error CS1525: Invalid expression term ''char''

    /tmp/tmp_w0vtx8w.cs(26,32): error CS1003: Syntax error, '','' expected

    /tmp/tmp_w0vtx8w.cs(26,35): error CS1003: Syntax error, '','' expected

    '
  timestamp: 1659976934
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length != 1)\n  \
    \          return false;\n        int index = 0;\n        char openingBracket\
    \ = brackets[0];\n        char closingBracket;\n        while ((closingBracket\
    \ = brackets.Substring(index++)) != openingBracket) {\n            if (closingBracket\
    \ != '>' && closingBracket != '<')\n                return false;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj8nw4low.cs(25,34): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var bracketStack = new Stack<char>();\n\
    \        var currentChar = string.Empty;\n        for (int i = 0; i < brackets.Length;\
    \ i++) {\n            if (brackets.Length == 1) {\n                return false;\n\
    \            }\n            currentChar = brackets[i];\n            if (bracketStack.Peek()\
    \ != '<') {\n                return false;\n            }\n            if (currentChar\
    \ == '>') {\n                if (bracketStack.Count != 2) {\n                \
    \    return false;\n                }\n                bracketStack.Pop();\n \
    \               bracketStack.Pop();\n            }\n            else {\n     \
    \           if (currentChar != bracketStack.Peek()) {\n                    return\
    \ false;\n                }\n                bracketStack.Pop();\n           \
    \ }\n        }\n        return bracketStack.Peek() == '>';\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj1tfgl6p.cs(26,27): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpj1tfgl6p.cs(30,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpj1tfgl6p.cs(38,21): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    '
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<string> openingBrackets =\
    \ new List<string>();\n        List<string> closingBrackets = new List<string>();\n\
    \        bool bracketsAreCorrect = true;\n        foreach (string bracket in brackets)\
    \ {\n            if (bracket == \"<\") {\n                openingBrackets.Add(\"\
    <\");\n            } else if (bracket == \">\") {\n                closingBrackets.Add(\"\
    >\");\n            } else {\n                bracketsAreCorrect = false;\n   \
    \             break;\n            }\n        }\n        if (bracketsAreCorrect)\
    \ {\n            List<string> openingBracketsInList = new List<string>(openingBrackets);\n\
    \            List<string> closingBracketsInList = new List<string>(closingBrackets);\n\
    \            if (openingBracketsInList.SequenceEqual(closingBracketsInList)) {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpte9emh8q.cs(23,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<char> stack = new List<char>();\n\
    \        Stack<char> openings = new Stack<char>();\n        bool hasCorrectBracketing\
    \ = false;\n        foreach (char bracket in brackets) {\n            if (bracket\
    \ == '<') {\n                openings.Push(bracket);\n            } else if (bracket\
    \ == '>') {\n                if (openings.Count > 0) {\n                    char\
    \ opening = openings.Pop();\n                    if (opening == '<') {\n     \
    \                   openings.Push(opened);\n                    } else {\n   \
    \                     // We have no more \"<\"s but the next opening has \">\"\
    .\n                        return false;\n                    }\n            \
    \    } else {\n                    // We have no more \"</\"s.\n             \
    \       return false;\n                }\n            }\n        }\n        if\
    \ (openings.Count == 0) {\n            hasCorrectBracketing = true;\n        }\n\
    \        return hasCorrectBracketing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdljiqx3g.cs(30,39): error CS0103: The name ''opened'' does not exist in
    the current context

    '
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) return false;\
    \ // null is a valid input string.\n        if (brackets.Length == 0) return false;\
    \ // empty brackets is a valid input string.\n        char prevChar = brackets[0];\
    \ // the first character of the input string.\n        int bracketCount = 0; //\
    \ the number of open brackets in the string.\n        foreach (char nextChar in\
    \ brackets) {\n            if (nextChar == prevChar) // if two chars are the same,\
    \ increment the count.\n                bracketCount++;\n            else // else,\
    \ if a char has a different char, return false.\n                return false;\n\
    \            prevChar = nextChar;\n        }\n        // if the bracketCount is\
    \ zero, then all of the brackets are closed.\n        return bracketCount == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de283a4efe0a44d39d14f91949162b8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de283a4efe0a44d39d14f91949162b8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool bRet = true;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] != '<')\n\
    \                bRet = false;\n            else\n                i++;\n     \
    \       if (brackets[i] != '>')\n                bRet = false;\n            else\n\
    \                i++;\n        }\n        return bRet;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <833fbcd64e3a45e280b6c2297bde7672>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <833fbcd64e3a45e280b6c2297bde7672>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBracketCount = brackets.Count(x\
    \ => x == '<');\n        int closeBracketCount = brackets.Count(x => x == '>');\n\
    \        bool result = openBracketCount == closeBracketCount;\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123da8b5b5f1474088b3ac9b9d972452>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123da8b5b5f1474088b3ac9b9d972452>:0 \n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBracketCount = 0;\n\
    \        int closingBracketCount = 0;\n        int openingBrackets = brackets.Count(c\
    \ => c == '<');\n        int closingBrackets = brackets.Count(c => c == '>');\n\
    \        foreach (char openingBracket in brackets) {\n            if (openingBracket\
    \ == '<') openingBracketCount++;\n            if (openingBracket == '>') closingBracketCount++;\n\
    \        }\n        return openingBracketCount == closingBracketCount;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5764ef44d46d4d5d889f1a3c4a608a61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5764ef44d46d4d5d889f1a3c4a608a61>:0 \n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.All(\n       \
    \     b => b == '>' || (b == '<' && brackets.IndexOf(b) == brackets.Length - 1));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0020980463c642178ba37a7d891327c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0020980463c642178ba37a7d891327c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Count() == 1) {\n\
    \            int index = brackets.IndexOf(\">\");\n            return index <\
    \ brackets.Length - 1 && index > 0;\n        }\n        bool isMatch = false;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         int index = brackets.IndexOf(c);\n                int end = brackets.IndexOf('>');\n\
    \                int index = index < end ? index : end + 1;\n                isMatch\
    \ = true;\n                for (int i = index; i <= brackets.Length - 1; i++)\
    \ {\n                    if (brackets[i] != '<' && brackets[i] != '>') {\n   \
    \                     isMatch = false;\n                        break;\n     \
    \               }\n                }\n            } else {\n                isMatch\
    \ = false;\n            }\n        }\n        return isMatch;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp831db_22.cs(29,21): error CS0128: A local variable or function named ''index''
    is already defined in this scope

    '
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            switch (brackets[i])\
    \ {\n                case '<':\n                    stack.Push(brackets[i]);\n\
    \                    break;\n                case '>':\n                    if\
    \ (stack.Count > 0) {\n                        char c = stack.Pop();\n       \
    \                 if (c != brackets[i]) {\n                            return\
    \ false;\n                        }\n                    } else {\n          \
    \              return false;\n                    }\n                    break;\n\
    \            }\n        }\n        return stack.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3fef0cdc6c7843eb8339fc73c62e4ec3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3fef0cdc6c7843eb8339fc73c62e4ec3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<bool> bracketStack = new\
    \ Stack<bool>();\n        foreach (char c in brackets.ToCharArray()) {\n     \
    \       if (bracketStack.Count > 0) {\n                if (c != '>') {\n     \
    \               return false;\n                }\n                if (bracketStack.Peek())\
    \ {\n                    bracketStack.Pop();\n                } else {\n     \
    \               return false;\n                }\n            } else {\n     \
    \           if (c == '<') {\n                    bracketStack.Push(true);\n  \
    \              } else if (c == '>') {\n                    bracketStack.Push(false);\n\
    \                } else {\n                    return false;\n               \
    \ }\n            }\n        }\n        return bracketStack.Peek();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x000a3] in <1954f5f5682343c3ab0567782d32f212>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <1954f5f5682343c3ab0567782d32f212>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack\
    \ empty.\n  at System.Collections.Generic.Stack`1[T].Peek () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x000a3] in <1954f5f5682343c3ab0567782d32f212>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <1954f5f5682343c3ab0567782d32f212>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return (brackets.Length >= 2 &&\
    \ brackets.Contains(\"<\") &&\n            brackets.Contains(\">\"));\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b886cda4bfd4739bba1e4fdc79055f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b886cda4bfd4739bba1e4fdc79055f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<StringBuilder>();\n\
    \        foreach (var ch in brackets) {\n            if (ch == '<') {\n      \
    \          if (stack.Count > 0) {\n                    return false;\n       \
    \         } else {\n                    stack.Enqueue(new StringBuilder());\n\
    \                }\n            } else if (ch == '>') {\n                if (stack.Count\
    \ > 0) {\n                    stack.Pop();\n                }\n            } else\
    \ {\n                stack.Push(new StringBuilder(ch, 1));\n            }\n  \
    \      }\n        return stack.Count == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz0hkbn59.cs(26,27): error CS1061: ''Stack<StringBuilder>'' does not contain
    a definition for ''Enqueue'' and no accessible extension method ''Enqueue'' accepting
    a first argument of type ''Stack<StringBuilder>'' could be found (are you missing
    a using directive or an assembly reference?)

    '
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) return\
    \ true;\n\n        StringBuilder sb = new StringBuilder();\n\n        bool insideQuote\
    \ = false;\n        bool insideBracket = false;\n        bool insidePair = false;\n\
    \n        for (int i = 0; i < brackets.Length; i++) {\n            switch (brackets[i])\
    \ {\n                case '<':\n                    insideBracket = true;\n  \
    \                  break;\n                case '>':\n                    insideBracket\
    \ = false;\n                    sb.Append(brackets[i]);\n                    break;\n\
    \                case '\"':\n                    if (!insideQuote) {\n       \
    \                 insideQuote = true;\n                        insideBracket =\
    \ false;\n                        insidePair = false;\n                      \
    \  continue;\n                    }\n                    break;\n            \
    \    case '(':\n                    if (!insideBracket) {\n                  \
    \      insidePair = true;\n                        sb.Append(brackets[i]);\n \
    \                       continue;\n                    }\n                   \
    \ break;\n                case ')':\n                    if (!insidePair) {\n\
    \                        insidePair = false;\n                        sb.Append(brackets[i]);\n\
    \                        continue;\n                    }\n                  \
    \  break;\n                default:\n                    sb.Append(brackets[i]);\n\
    \                    break;\n            }\n        }\n\n        if (insideBracket)\
    \ {\n            return false;\n        }\n\n        if (!insideQuote) {\n   \
    \         return true;\n        }\n\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67ae2d8e4d7e4dfbac09c78e225ccdfa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67ae2d8e4d7e4dfbac09c78e225ccdfa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // remove brackets.\n        string\
    \ unbracket = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        //\
    \ count the length of unbracket.\n        int size = unbracket.Length;\n\n   \
    \     // if the count is odd, return false\n        if (size % 2 != 0) {\n   \
    \         return false;\n        }\n\n        int[] open = new int[size + 1];\n\
    \        int[] close = new int[size + 1];\n        int i = 0, j = 0;\n       \
    \ while (i < size) {\n            if (open[i] < open[j]) {\n                open[j]++;\n\
    \            } else if (open[j] < open[i]) {\n                open[i] += 2;\n\
    \            } else {\n                close[i] += 2;\n            }\n       \
    \     i++;\n            j++;\n        }\n\n        // for every open bracket\n\
    \        for (i = 0; i < open.Length; i++) {\n            // if the count is even,\
    \ return false\n            if (open[i] % 2 == 0) {\n                return false;\n\
    \            }\n        }\n\n        // for every close bracket\n        for (i\
    \ = 0; i < close.Length; i++) {\n            // if the count is even, return false\n\
    \            if (close[i] % 2 == 0) {\n                return false;\n       \
    \     }\n        }\n\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79aa341a22de4940aa18e98d7366d4c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <79aa341a22de4940aa18e98d7366d4c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // split brackets into string\
    \ array\n        ArrayList stringArray = new ArrayList();\n        foreach (char\
    \ bracket in brackets) {\n            stringArray.Add(bracket);\n        }\n\n\
    \        // check if every opening bracket has a corresponding closing bracket.\n\
    \        for (int i = 0; i < stringArray.Count; i++) {\n            if (stringArray[i]\
    \ == '>') {\n                for (int j = i; j < stringArray.Count; j++){\n  \
    \                  if (stringArray[j] == '<'){\n                        Console.WriteLine(\"\
    true\");\n                        return true;\n                    }\n      \
    \          }\n            }\n        }\n\n        Console.WriteLine(\"false\"\
    );\n        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwe099snm.cs(21,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpwe099snm.cs(21,37): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpwe099snm.cs(27,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmpwe099snm.cs(29,33): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var brackets = brackets.Trim().ToLower();\n\
    \        var foundClosingBracket = false;\n        foreach(char c in brackets)\
    \ {\n            if(c == '<') {\n                if(!foundClosingBracket) {\n\
    \                    // found the first opening bracket\n                    foundClosingBracket\
    \ = true;\n                } else {\n                    // found a closing bracket\n\
    \                    return false;\n                }\n            } else {\n\
    \                // not a opening bracket\n                foundClosingBracket\
    \ = false;\n            }\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjvg8sja7.cs(20,13): error CS0136: A local or parameter named ''brackets''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpjvg8sja7.cs(20,24): error CS0841: Cannot use local variable ''brackets''
    before it is declared

    /tmp/tmpjvg8sja7.cs(22,27): error CS1579: foreach statement cannot operate on
    variables of type ''int'' because ''int'' does not contain a public instance definition
    for ''GetEnumerator''

    /tmp/tmpjvg8sja7.cs(20,24): error CS0165: Use of unassigned local variable ''brackets''

    '
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        foreach (var c in brackets) {\n            switch (c) {\n           \
    \     case '<': stack.Add('<'); break;\n                case '>': stack.Add('>');\
    \ break;\n                case '{': stack.Add('{'); break;\n                case\
    \ '}': stack.Add('}'); break;\n                default: return false;\n      \
    \      }\n        }\n\n        if (stack.Count != 1) return false;\n        char\
    \ c1 = stack.Pop();\n        char c2 = stack.Pop();\n        if (c1 != c2) return\
    \ false;\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuzj32fo3.cs(23,33): error CS1061: ''Stack<char>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpuzj32fo3.cs(24,33): error CS1061: ''Stack<char>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpuzj32fo3.cs(25,33): error CS1061: ''Stack<char>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpuzj32fo3.cs(26,33): error CS1061: ''Stack<char>'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ == 0) return true;\n\n        var index = 0;\n        while (index < brackets.Length)\
    \ {\n            int open = brackets.IndexOf('<', index);\n            if (open\
    \ < 0) break;\n            int close = brackets.IndexOf('>', open);\n        \
    \    if (close < 0) break;\n            // if close is -1, then we're done.\n\
    \            if (close == -1) {\n                return index == brackets.Length;\n\
    \            }\n            if (close < open) {\n                return false;\n\
    \            }\n            index = close + 1;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebd8370dcc08471bb3197cfcf260ec03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebd8370dcc08471bb3197cfcf260ec03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var foundOpeningBracket = new\
    \ HashSet<char>();\n        var foundClosingBracket = new HashSet<char>();\n\n\
    \        // Find the opening brackets.\n        foreach (var bracket in brackets)\
    \ {\n            if (foundClosingBracket.Contains(bracket)) {\n              \
    \  return false;\n            }\n\n            if (foundOpeningBracket.Contains(bracket))\
    \ {\n                foundOpeningBracket.Remove(bracket);\n            }\n   \
    \         else {\n                foundOpeningBracket.Add(bracket);\n        \
    \    }\n        }\n\n        // Find the closing brackets.\n        foreach (var\
    \ bracket in brackets) {\n            if (foundOpeningBracket.Contains(bracket))\
    \ {\n                foundClosingBracket.Remove(bracket);\n            }\n   \
    \         else {\n                foundClosingBracket.Add(bracket);\n        \
    \    }\n        }\n\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bdc061eb35f4e3489aea3143891ca65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bdc061eb35f4e3489aea3143891ca65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] parts = brackets.Split('>');\n\
    \        bool result = false;\n        for (int i = 0; i < parts.Length; i++)\n\
    \        {\n            if (parts[i].Contains(\"<\"))\n            {\n       \
    \         for (int j = i + 1; j < parts.Length; j++)\n                {\n    \
    \                if (parts[j].Contains(\"<\"))\n                    {\n      \
    \                  result = true;\n                        break;\n          \
    \          }\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88a453b0d6ae4484b57b78c734134249>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88a453b0d6ae4484b57b78c734134249>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) return false;\n\
    \        bool found = false;\n        StringBuilder sb = new StringBuilder(brackets);\n\
    \        while (sb.Length > 0) {\n            string x = sb.Remove(0, 1).ToString();\n\
    \            string y = sb.Remove(0, 1).ToString();\n            if (x != y) {\n\
    \                found = true;\n                return false;\n            }\n\
    \        }\n        return found;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c267507e0882408d81ed01ccd370b812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c267507e0882408d81ed01ccd370b812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openedBrackets = new Stack<char>();\n\
    \        var closedBrackets = new Stack<char>();\n        foreach (char openingBracket\
    \ in brackets.ToCharArray()) {\n            if (openingBracket == '>') {\n   \
    \             openedBrackets.Push(openingBracket);\n            } else if (openingBracket\
    \ == '<') {\n                closedBrackets.Push(openingBracket);\n          \
    \  } else {\n                if (openedBrackets.Count == 0) {\n              \
    \      return false;\n                }\n\n                var lastOpenedBracket\
    \ = openedBrackets.Pop();\n                var lastClosedBracket = closedBrackets.Pop();\n\
    \                if (lastClosedBracket != openingBracket) {\n                \
    \    return false;\n                }\n            }\n        }\n        return\
    \ openedBrackets.Count == 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12d9453a2d9b4140a20d777967b1ce51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12d9453a2d9b4140a20d777967b1ce51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var counts = new Dictionary<char,\
    \ int>();\n        for (int i = 0; i < brackets.Length; i++)\n        {\n    \
    \        char c = brackets[i];\n            if (!counts.ContainsKey(c))\n    \
    \        {\n                counts.Add(c, 1);\n            }\n            else\n\
    \            {\n                counts[c]++;\n            }\n        }\n\n   \
    \     foreach (KeyValuePair<char, int> c in counts)\n        {\n            if\
    \ (c.Value != 1)\n            {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46e1833392fa42caa169c840d0e0d66d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46e1833392fa42caa169c840d0e0d66d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // If the string is empty or only\
    \ contains one bracket, then the string is\n        // valid.\n        if (brackets.Length\
    \ <= 0)\n            return true;\n\n        // If the string contains only one\
    \ bracket, it is valid.\n        if (brackets.Length == 1)\n            return\
    \ true;\n\n        // Create a stack of brackets. Pop each bracket from the string\
    \ and\n        // add the popped bracket to the stack. If the popped bracket is\
    \ not a\n        // closing bracket, then the stack is not valid.\n        Stack<char>\
    \ stack = new Stack<char>();\n        foreach (char c in brackets) {\n       \
    \     switch (c) {\n                case '<':\n                case '(':\n   \
    \                 stack.Push(c);\n                    break;\n               \
    \ case '>':\n                case ')':\n                    if (!stack.Any())\n\
    \                        return false;\n                    char lastPopped =\
    \ stack.Pop();\n                    if (!lastPopped.Equals(c))\n             \
    \           return false;\n                    break;\n                default:\n\
    \                    stack.Pop();\n                    stack.Push(c);\n      \
    \              break;\n            }\n        }\n\n        // If stack is empty,\
    \ then the string is valid.\n        return stack.Count == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb6634e20a7b4f3fa4d1853884646833>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb6634e20a7b4f3fa4d1853884646833>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        List<char> openings = new List<char>();\n        List<char> closings\
    \ = new List<char>();\n        foreach (char opening in brackets) {\n        \
    \    if (opening == '<') {\n                stack.Push(opening);\n           \
    \     openings.Add(opening);\n            }\n            else {\n            \
    \    char closing = stack.Pop();\n                if (opening != closing)\n  \
    \                  return false;\n                openings.Remove(opening);\n\
    \                closings.Add(closing);\n            }\n        }\n        return\
    \ closings.Count == openings.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c290f9dc40734224b3ca6ea406e34355>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c290f9dc40734224b3ca6ea406e34355>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int numBrackets = brackets.Count(x\
    \ => x == '<');\n        if (numBrackets != brackets.Count(x => x == '>')) return\
    \ false; // not a bracket\n        int numOpenBrackets = brackets.Count(x => x\
    \ == '<');\n        if (numOpenBrackets != brackets.Count(x => x == '>')) return\
    \ false; // not a bracket\n        bool hasMatchingOpenBracket = brackets.Count(x\
    \ => x == '<') == numOpenBrackets; // must contain all opening brackets\n    \
    \    int numCloseBrackets = brackets.Count(x => x == '>');\n        if (numCloseBrackets\
    \ != numOpenBrackets - 1) return false; // must have exactly one closing bracket\n\
    \        bool hasMatchingCloseBracket = brackets.Count(x => x == '>') == numCloseBrackets\
    \ - 1; // must contain all closing brackets\n        return hasMatchingOpenBracket\
    \ && hasMatchingCloseBracket;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f7c5f8a4ea94f25a10d378cf59076d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f7c5f8a4ea94f25a10d378cf59076d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var pairs = brackets.Split('>').Select(x\
    \ => x.Trim()).ToList();\n        foreach (var pair in pairs) {\n            foreach\
    \ (var open in pair) {\n                foreach (var close in pair) {\n      \
    \              if (open.Equals(\"<\", StringComparison.OrdinalIgnoreCase) && close.Equals(\"\
    <\", StringComparison.OrdinalIgnoreCase)) {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2_9_jq3t.cs(24,25): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmp2_9_jq3t.cs(24,81): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    '
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char openingBracket = brackets[0];\n\
    \        char closingBracket = brackets[2];\n        bool isRight = brackets[1]\
    \ == '>';\n        if (brackets.Length == 1)\n            return false;\n    \
    \    else\n            return isRight ? OpeningRightToLeft(brackets, openingBracket,\
    \ closingBracket) : OpeningLeftToRight(brackets, openingBracket, closingBracket);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpap9de8r5.cs(26,30): error CS0103: The name ''OpeningRightToLeft'' does
    not exist in the current context

    /tmp/tmpap9de8r5.cs(26,93): error CS0103: The name ''OpeningLeftToRight'' does
    not exist in the current context

    '
  timestamp: 1659976935
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      throw new ArgumentNullException();\n        StringBuilder sb = new StringBuilder(brackets);\n\
    \        Stack stack = new Stack();\n        for (int i = 0; i < brackets.Length;\
    \ i++) {\n            if (sb.Length > 0) {\n                switch (sb.CharAt(i))\
    \ {\n                    case '>':\n                        stack.Push(brackets[i]);\n\
    \                        sb.Remove(i, 1);\n                        i = i + 1;\n\
    \                        break;\n                    case '<':\n             \
    \           while ((stack.Count > 0) && (sb.Length > 0) &&\n                 \
    \              (stack.Peek() != '<')) {\n                            if (sb.CharAt(i)\
    \ != stack.Peek())\n                                return false;\n          \
    \                  i++;\n                            sb.Remove(i, 1);\n      \
    \                  }\n                        stack.Pop();\n                 \
    \       break;\n                    case '^':\n                        if ((stack.Count\
    \ > 0) && (sb.Length > 0) &&\n                             (stack.Count != 0)\
    \ &&\n                             ((stack.Peek() == '<') && (sb.CharAt(i) ==\
    \ '<'))) {\n                            stack.Pop();\n                       \
    \ }\n                        break;\n                    case '^>':\n        \
    \                if ((stack.Count > 0) && (sb.Length > 0) &&\n               \
    \              (stack.Count != 0) &&\n                             ((stack.Peek()\
    \ == '<') && (sb.CharAt(i) == '<'))) {\n                            while ((stack.Count\
    \ > 0) && (sb.Length > 0) &&\n                                   (stack.Count\
    \ != 0) &&\n                                   ((stack.Peek() == '>') && (sb.CharAt(i)\
    \ == '>'))) {\n                                if (sb.CharAt(i) != stack.Peek())\n\
    \                                    return false;\n                         \
    \       i++;\n                                sb.Remove(i, 1);\n             \
    \               }\n                            stack.Pop();\n                \
    \        }\n                        break;\n                }\n            }\n\
    \        }\n        return (stack.Count == 0);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy_l5190b.cs(49,26): error CS1012: Too many characters in character literal

    '
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ == 0)\n            return true;\n        int openCount = 0;\n        for (int\
    \ i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n  \
    \              openCount++;\n            if (brackets[i] == '>')\n           \
    \     openCount--;\n        }\n        return openCount == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65759753097548afa148280be8188e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65759753097548afa148280be8188e04>:0 \n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (char.IsLetterOrDigit(c)\
    \ || c == '(') {\n                if (stack.Count > 0) {\n                   \
    \ Debug.Assert(stack.Peek() == c);\n                } else {\n               \
    \     Debug.Assert(c == '(');\n                    stack.Push(c);\n          \
    \      }\n            } else if (c == ')') {\n                Debug.Assert(stack.Count\
    \ > 0);\n                if (stack.Count > 0) {\n                    Debug.Assert(stack.Pop()\
    \ == c);\n                } else {\n                    return false;\n      \
    \          }\n            } else {\n                return false;\n          \
    \  }\n        }\n        return stack.Count == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af9d040bf36748e7819c4d30ed8494ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af9d040bf36748e7819c4d30ed8494ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) {\n\
    \            return true;\n        }\n        var bracketedOpeningBrackets = new\
    \ List<char>();\n        var bracketedClosingBrackets = new List<char>();\n  \
    \      var i = 0;\n        for (; i < brackets.Length; i++) {\n            var\
    \ c = brackets[i];\n            if (c == '<') {\n                bracketedOpeningBrackets.Add(c);\n\
    \            } else if (c == '>') {\n                bracketedClosingBrackets.Add(c);\n\
    \            }\n        }\n        return brackets.Length == (\n            bracketedOpeningBrackets.Count\
    \ +\n            bracketedClosingBrackets.Count);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3fbf90516eba423d83dd33362757359a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3fbf90516eba423d83dd33362757359a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<string> opening = new List<string>();\n\
    \        List<string> closing = new List<string>();\n        foreach (var x in\
    \ brackets) {\n            if (x == '<') {\n                if (!opening.Contains(x))\
    \ {\n                    opening.Add(x);\n                } else {\n         \
    \           return false;\n                }\n            } else if (x == '>')\
    \ {\n                if (!closing.Contains(x)) {\n                    closing.Add(x);\n\
    \                } else {\n                    return false;\n               \
    \ }\n            }\n        }\n        bool result = true;\n        if (opening.Count\
    \ == closing.Count) {\n            for (int i = 0; i < opening.Count; i++) {\n\
    \                if (opening[i] != closing[i]) {\n                    result =\
    \ false;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplsknxmq5.cs(24,39): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmplsknxmq5.cs(25,33): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmplsknxmq5.cs(30,39): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmplsknxmq5.cs(31,33): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) return false;\n\
    \        // initialize a stack to keep track of the current position\n       \
    \ Stack<string> s = new Stack<string>();\n        \n        // push brackets onto\
    \ the stack\n        for (int i = 0; i < brackets.Length; i++) {\n           \
    \ s.Push(brackets[i]);\n        }\n        \n        // run until we run out of\
    \ brackets\n        while (s.Count > 0) {\n            // get the next bracket\n\
    \            string s = s.Pop();\n            \n            // if we see a closing\
    \ bracket, reverse the stack\n            if (s.Equals(\"<\") || s.Equals(\">\"\
    )) {\n                s.Push(s.Reverse());\n            }\n            else {\n\
    \                // otherwise return false\n                return false;\n  \
    \          }\n        }\n        \n        // return true if every opening bracket\
    \ has a corresponding closing bracket\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsumrkao9.cs(26,20): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpsumrkao9.cs(32,20): error CS0136: A local or parameter named ''s'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsumrkao9.cs(32,26): error CS1061: ''string'' does not contain a definition
    for ''Pop'' and no accessible extension method ''Pop'' accepting a first argument
    of type ''string'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpsumrkao9.cs(36,19): error CS1061: ''string'' does not contain a definition
    for ''Push'' and no accessible extension method ''Push'' accepting a first argument
    of type ''string'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpsumrkao9.cs(32,24): error CS0165: Use of unassigned local variable ''s''

    '
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets.Length >\
    \ 0);\n        var bracket_index = brackets.IndexOfAny(new char[] { '<', '>' });\n\
    \        if (bracket_index == -1) return false;\n        StringBuilder ret = new\
    \ StringBuilder(\"\");\n        var open_count = 0;\n        var closing_index\
    \ = 0;\n        var opening_brackets = new List<int>();\n        var closing_brackets\
    \ = new List<int>();\n        for (int i = 0; i < brackets.Length; i++) {\n  \
    \          var char = brackets[i];\n            if (char == '>') {\n         \
    \       closing_index = i;\n                if (closing_brackets.Count == 0) {\n\
    \                    ret.Append(brackets);\n                    return ret.ToString()\
    \ == brackets;\n                }\n                else {\n                  \
    \  ret.SloppyAppend(brackets.Substring(0, closing_index));\n                 \
    \   closing_brackets.RemoveAt(closing_brackets.Count - 1);\n                }\n\
    \            }\n            else if (char == '<') {\n                opening_brackets.Add(i);\n\
    \                if (closing_index >= 0) {\n                    opening_brackets.Add(closing_index);\n\
    \                }\n                open_count++;\n            }\n        }\n\
    \        if (open_count != closing_brackets.Count) {\n            ret.SloppyAppend(brackets.Substring(0,\
    \ opening_brackets.First()));\n            return ret.ToString() == brackets;\n\
    \        }\n        ret.SloppyAppend(brackets);\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuscq9v73.cs(29,17): error CS1002: ; expected

    /tmp/tmpuscq9v73.cs(29,22): error CS1001: Identifier expected

    /tmp/tmpuscq9v73.cs(30,17): error CS1525: Invalid expression term ''char''

    /tmp/tmpuscq9v73.cs(41,22): error CS1525: Invalid expression term ''char''

    '
  timestamp: 1659976935
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Count() < 2)\n  \
    \          return false;\n        foreach (char c in brackets) {\n           \
    \ if (c != '>' && c != '<')\n                return false;\n        }\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53a387a901ac4de59aebdfc19e834076>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53a387a901ac4de59aebdfc19e834076>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string result = \"\";\n      \
    \  foreach (char c in brackets) {\n            result += c;\n        }\n     \
    \   string[] list = result.ToCharArray();\n        int counter = 0;\n        int\
    \ index = 0;\n        int lastIndex = list.Length - 1;\n        int temp = 0;\n\
    \        while (index < list.Length) {\n            temp = list[index];\n    \
    \        list[index] = list[index + 1];\n            list[index + 1] = temp;\n\
    \            index++;\n        }\n        if (counter == 0) {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppkmso5nk.cs(24,25): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string[]''

    /tmp/tmppkmso5nk.cs(30,20): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    /tmp/tmppkmso5nk.cs(32,31): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // TODO: Write your answer here\n\
    \        \n        return false; \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <baa27f9ee6104026af98105024777cda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <baa27f9ee6104026af98105024777cda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string bracket = string.Empty;\n\
    \        foreach (char c in brackets) {\n            if (c == '>') {\n       \
    \         if (bracket == string.Empty) {\n                    bracket = c;\n \
    \               }\n            }\n            if (c == '<') {\n              \
    \  if (bracket == string.Empty) {\n                    bracket = c;\n        \
    \        }\n            }\n        }\n        if (string.IsNullOrEmpty(bracket))\
    \ {\n            return false;\n        }\n        bool ok = true;\n        for\
    \ (int i = 0; i < bracket.Length; ++i) {\n            if (bracket[i] == '>') {\n\
    \                if (i < bracket.Length - 1) {\n                    if (bracket[i\
    \ + 1] != '<') {\n                        ok = false;\n                    }\n\
    \                }\n            }\n            if (bracket[i] == '<') {\n    \
    \            if (i < bracket.Length - 1) {\n                    if (bracket[i\
    \ + 1] != '>') {\n                        ok = false;\n                    }\n\
    \                }\n            }\n        }\n        return ok;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdb1toja.cs(24,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpzdb1toja.cs(29,31): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Check each character, and if\
    \ the bracket is closed or not.\n        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            switch (c) {\n                case '<':\n\
    \                    result &= !(brackets.IndexOf('<', brackets.Length - 1) >=\
    \ 0);\n                    break;\n                case '>':\n               \
    \     result &= !(brackets.IndexOf('>', brackets.Length - 1) >= 0);\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39792efe283a449eafeb65495c530b33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39792efe283a449eafeb65495c530b33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBracketCount = 0;\n  \
    \      foreach (char c in brackets) {\n            if (c == '<') openBracketCount++;\n\
    \            else if (c == '>') openBracketCount--;\n        }\n        return\
    \ openBracketCount == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <088f7f34c69f42a6ab8c8f322b580225>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <088f7f34c69f42a6ab8c8f322b580225>:0 \n"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> s = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; ++i) {\n            char c = brackets[i];\n\
    \            if ((c == '<') && s.Count > 0)\n                return false;\n \
    \           s.push(c);\n        }\n        if (s.Count != 0)\n            return\
    \ false;\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuwipwgfe.cs(25,15): error CS1061: ''Stack<char>'' does not contain a definition
    for ''push'' and no accessible extension method ''push'' accepting a first argument
    of type ''Stack<char>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        foreach (var b in brackets) {\n\
    \            if (b == '<') continue;\n            if (b == '>') break;\n     \
    \       return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac708113253548e796223a74ddb27e46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ac708113253548e796223a74ddb27e46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string s = \"0<0>1<1>2<2>3<3>4<4>5<5>6<6>7<7>8<8>9<9>\"\
    ;\n        StringBuilder sb = new StringBuilder();\n        StringBuilder sb2\
    \ = new StringBuilder();\n        bool check = false;\n        for (int i = 0;\
    \ i < brackets.Length; i++) {\n            if (brackets[i] == '<') {\n       \
    \         sb.Append(\"<\");\n                sb2.Append(\">\");\n            }\
    \ else {\n                sb.Append(string.Empty);\n                sb2.Append(string.Empty);\n\
    \            }\n        }\n        bool retval = false;\n        for (int i =\
    \ 0; i < s.Length; i++) {\n            if (s.Substring(i, 1) == \"0\") {\n   \
    \             int j = i;\n                int k = 0;\n                bool done\
    \ = false;\n                while ((j < s.Length) && (k < sb2.Length)) {\n   \
    \                 if (s[j] == '0') {\n                        sb.Append(string.Empty);\n\
    \                        sb2.Append(string.Empty);\n                        j++;\n\
    \                        k++;\n                    } else {\n                \
    \        sb.Append(s[j]);\n                        sb2.Append(sb2[k]);\n     \
    \                   j++;\n                        k++;\n                    }\n\
    \                }\n                if (!done) {\n                    retval =\
    \ true;\n                    break;\n                }\n            }\n      \
    \  }\n        return check;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b806782072b3444584ee504e41d65b7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b806782072b3444584ee504e41d65b7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        for\
    \ (int i = 0; i < brackets.Length; ++i) {\n            char ch = brackets[i];\n\
    \            if (ch == '<') {\n                char next = brackets[i + 1];\n\
    \                if (next != '>') {\n                    result = false;\n   \
    \                 break;\n                }\n            } else if (ch == '>')\
    \ {\n                char prev = brackets[i - 1];\n                if (prev !=\
    \ '<') {\n                    result = false;\n                    break;\n  \
    \              }\n            }\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abf3d3cf6560489b973b13449c70bcfa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abf3d3cf6560489b973b13449c70bcfa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (string.IsNullOrEmpty(brackets))\
    \ {\n            return false;\n        }\n        int opening = 0;\n        int\
    \ closing = 0;\n        char lastChar = '\\0';\n        bool ret = true;\n   \
    \     for (int i = 0; i < brackets.Length; ++i) {\n            char c = brackets[i];\n\
    \            switch (c) {\n            case '<':\n                if (opening\
    \ != -1) {\n                    closing = opening;\n                    opening\
    \ = -1;\n                    lastChar = c;\n                    ret = false;\n\
    \                }\n                break;\n            case '>':\n          \
    \      ++closing;\n                if (opening == -1) {\n                    opening\
    \ = closing;\n                    lastChar = c;\n                }\n         \
    \       break;\n            case '\\0':\n                if (opening != -1) {\n\
    \                    closing = opening;\n                    opening = -1;\n \
    \                   lastChar = c;\n                    ret = false;\n        \
    \        }\n                break;\n            default:\n                if (opening\
    \ != -1) {\n                    if (c == lastChar) {\n                       \
    \ ++closing;\n                    } else {\n                        ret = false;\n\
    \                    }\n                }\n                if (closing != -1)\
    \ {\n                    if (c == lastChar) {\n                        --opening;\n\
    \                    } else {\n                        ret = false;\n        \
    \            }\n                }\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppo9o45hm.cs(53,13): error CS8070: Control cannot fall out of switch from
    final case label (''default:'')

    '
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ == 0) return false;\n        string result = \"\";\n        StringBuilder sb\
    \ = new StringBuilder();\n        foreach (char c in brackets) {\n           \
    \ if (c == '<') {\n                if (sb.Length > 0) sb.Append('>');\n      \
    \          sb.Append(c);\n            } else if (c == '>') {\n               \
    \ if (sb.Length > 0) sb.Append('<');\n                sb.Append(c);\n        \
    \    } else if (c == '>') {\n                if (sb.Length > 0) sb.Append('<');\n\
    \                sb.Append(c);\n            } else if (c == '<') {\n         \
    \       if (sb.Length > 0) sb.Append('>');\n                sb.Append(c);\n  \
    \          }\n        }\n        result = sb.ToString();\n        return result.Length\
    \ == brackets.Length;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2ddb4ea9e69472db9f4f66e543206a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2ddb4ea9e69472db9f4f66e543206a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // split brackets string into\
    \ an array of \"<\" and \">\"\n        string[] bracketList = brackets.Split('>');\n\
    \        bool correct = false;\n        for(int i=0; i<bracketList.Length; i++)\
    \ {\n            string currentBracket = bracketList[i];\n            bool currentBracketCorrect\
    \ = false;\n            // check if currentBracket is correctly closed\n     \
    \       if(currentBracket.Length > 0) {\n                currentBracket = currentBracket.Substring(1,\
    \ currentBracket.Length-1);\n                if(bracketList[i+1].Length > 0) {\n\
    \                    if(currentBracket.Equals(\"<\") && bracketList[i+1].Equals(\"\
    <\")) {\n                        currentBracketCorrect = true;\n             \
    \       }\n                    else if(currentBracket.Equals(\">\") && bracketList[i+1].Equals(\"\
    >\")) {\n                        currentBracketCorrect = true;\n             \
    \       }\n                    else if(bracketList[i+1].Equals(\"<\") && !currentBracket.Equals(\"\
    >\")) {\n                        currentBracketCorrect = true;\n             \
    \       }\n                    else if(!bracketList[i+1].Equals(\">\") && !currentBracket.Equals(\"\
    <\")) {\n                        currentBracketCorrect = true;\n             \
    \       }\n                    else if(!bracketList[i+1].Equals(\">\") && !currentBracket.Equals(\"\
    <\") && !currentBracket.Equals(\"<\")) {\n                        currentBracketCorrect\
    \ = true;\n                    }\n                    else if(!bracketList[i+1].Equals(\"\
    >\") && !currentBracket.Equals(\"<\") && currentBracket.Equals(\">\")) {\n   \
    \                     currentBracketCorrect = true;\n                    }\n \
    \                   else {\n                        currentBracketCorrect = false;\n\
    \                    }\n                }\n                else {\n          \
    \          if(currentBracket.Equals(\"<\")) {\n                        currentBracketCorrect\
    \ = true;\n                    }\n                    else if(currentBracket.Equals(\"\
    >\")) {\n                        currentBracketCorrect = true;\n             \
    \       }\n                    else if(bracketList[i+1].Equals(\"<\")) {\n   \
    \                     currentBracketCorrect = true;\n                    }\n \
    \                   else if(!bracketList[i+1].Equals(\">\")) {\n             \
    \           currentBracketCorrect = true;\n                    }\n           \
    \         else if(!bracketList[i+1].Equals(\"<\") && !bracketList[i+1].Equals(\"\
    <\")) {\n                        currentBracketCorrect = true;\n             \
    \       }\n                    else {\n                        currentBracketCorrect\
    \ = false;\n                    }\n                }\n            }\n        \
    \    else {\n                currentBracketCorrect = true;\n            }\n  \
    \          // set correct to true only if currentBracketCorrect is true\n    \
    \        if(currentBracketCorrect) {\n                correct = true;\n      \
    \      }\n        }\n        // return the correct value\n        return correct;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2856943a040b4fd18d6cb9405bc3f2ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2856943a040b4fd18d6cb9405bc3f2ef>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.CorrectBracketing (System.String brackets) [0x0003f] in <2856943a040b4fd18d6cb9405bc3f2ef>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00067] in <2856943a040b4fd18d6cb9405bc3f2ef>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Index"
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        for (int i = 0; i < brackets.Length; ++i) {\n            var c = brackets[i];\n\
    \            if (c == '<') {\n                stack.Push(brackets[i]);\n     \
    \       } else if (c == '>') {\n                if (stack.Pop() != '>') {\n  \
    \                  return false;\n                }\n            } else if (stack.Count\
    \ != 0) {\n                bool found = false;\n                foreach (char\
    \ c2 in stack) {\n                    if (c2 == c) found = true;\n           \
    \     }\n                if (!found) return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <705ef6e9248f41fa9ccdffc94497f6b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <705ef6e9248f41fa9ccdffc94497f6b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool foundCloseBracket = false;\n\
    \        foreach ( char c in brackets) {\n            if (c == '<') {\n      \
    \          if (foundCloseBracket)\n                    return false;\n       \
    \         foundCloseBracket = true;\n            }\n            else if (c ==\
    \ '>') {\n                foundCloseBracket = false;\n            }\n        }\n\
    \        return foundCloseBracket;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4664935da6474b0b8c2f005fe64f95e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4664935da6474b0b8c2f005fe64f95e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        var bracketsStack = new Stack<char>();\n\n        foreach (var c in brackets)\
    \ {\n            switch (c) {\n                case '<':\n                   \
    \ stack.Push('>');\n                    break;\n                case '>':\n  \
    \                  stack.Push('<');\n                    break;\n            \
    \    case '<':\n                case '>':\n                    // Do nothing because\
    \ the stack will handle this for us.\n                    break;\n           \
    \     case '{':\n                    bracketsStack.Push('}');\n              \
    \      break;\n                case '}':\n                    bracketsStack.Pop();\n\
    \                    break;\n                case '(':\n                    bracketsStack.Push(')');\n\
    \                    break;\n                case ')':\n                    bracketsStack.Pop();\n\
    \                    break;\n                default:\n                    return\
    \ false;\n            }\n        }\n\n        // Check that the stack is empty\
    \ and that bracketsStack is empty.\n        if (stack.Count == 0 && bracketsStack.Count\
    \ == 0)\n            return true;\n        else if (stack.Count != 0 && bracketsStack.Count\
    \ != 0)\n            return false;\n        else if (stack.Count == 0)\n     \
    \       return false;\n        else if (bracketsStack.Count == 0)\n          \
    \  return true;\n        else\n            return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprm9zf56h.cs(31,17): error CS0152: The switch statement contains multiple
    cases with the label value ''<''

    /tmp/tmprm9zf56h.cs(32,17): error CS0152: The switch statement contains multiple
    cases with the label value ''>''

    '
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int bracketCount = 0;\n      \
    \  string openingBracket = null;\n        string closingBracket = null;\n    \
    \    foreach (char openingBracketChar in brackets) {\n            bracketCount++;\n\
    \            if (openingBracketChar == '<') {\n                openingBracket\
    \ = openingBracketChar;\n            } else if (openingBracketChar == '>') {\n\
    \                closingBracket = openingBracketChar;\n            }\n       \
    \ }\n        if (bracketCount != brackets.Length) {\n            return false;\n\
    \        }\n        if (openingBracket == null || closingBracket == null) {\n\
    \            return false;\n        }\n        if (brackets.IndexOf(openingBracket)\
    \ == 0 || brackets.IndexOf(closingBracket) == 0) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpie0ujp43.cs(26,34): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpie0ujp43.cs(28,34): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976936
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<string>();\n\
    \n        foreach (var c in brackets) {\n            if (c == '<')\n         \
    \       stack.Push(c);\n            else if (c == '>')\n            {\n      \
    \          if (!stack.Contains(\"<\"))\n                    return false;\n  \
    \              stack.Pop();\n            }\n        }\n        if (stack.Count\
    \ < 2)\n            return false;\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj3c3i85s.cs(24,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string closeBracket = \")\";\n\
    \        string openBracket = \"(\";\n        string closeBracketCount = \"(\"\
    ;\n        string openBracketCount = \"(\";\n        bool hasClosingBracket =\
    \ false;\n        bool hasOpeningBracket = false;\n        foreach (char c in\
    \ brackets) {\n            switch (c) {\n                case '<':\n         \
    \           hasOpeningBracket = true;\n                    openBracketCount =\
    \ openBracketCount + 1;\n                    break;\n                case '>':\n\
    \                    hasClosingBracket = true;\n                    closeBracketCount\
    \ = closeBracketCount + 1;\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n\n        if (hasClosingBracket)\
    \ {\n            Console.WriteLine(\"(\" + closeBracketCount + \")\");\n     \
    \   }\n        if (hasOpeningBracket) {\n            Console.WriteLine(openBracketCount\
    \ + closeBracket);\n        }\n        return (hasOpeningBracket && hasClosingBracket);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <000c134a2b2b44218497fbd4e2509773>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <000c134a2b2b44218497fbd4e2509773>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: '((1)

    (1)

    ((111)

    (111)

    ((111111)

    (111111)

    ((1111111111111)

    (1111111111111)

    ((11111)

    (1111)

    ((11)

    (11)

    (1)

    (1111)

    ((1)

    ((1)

    (11)

    ((11111111)

    (11111111)

    ((111111111)

    (1111111)

    '
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return false;\n        int bracketCount = brackets.Count();\n        if\
    \ (bracketCount == 0)\n            return true;\n        Stack<string> openingBrackets\
    \ = new Stack<string>();\n        List<char> characters = new List<char>();\n\
    \        foreach (char bracket in brackets) {\n            characters.Add(bracket);\n\
    \            if (bracket == '<')\n                openingBrackets.Push(bracket);\n\
    \            else\n            {\n                while (!openingBrackets.IsEmpty()\
    \ && openingBrackets.Peek() != '<') {\n                    char openingBracket\
    \ = openingBrackets.Pop();\n                    if (openingBracket == '>') {\n\
    \                        characters.Remove(openingBracket);\n                \
    \        if (characters.Count == 0)\n                            return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ characters.Count == bracketCount;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwydkal_q.cs(30,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpwydkal_q.cs(33,41): error CS1061: ''Stack<string>'' does not contain a
    definition for ''IsEmpty'' and no accessible extension method ''IsEmpty'' accepting
    a first argument of type ''Stack<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpwydkal_q.cs(33,54): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpwydkal_q.cs(34,43): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || !brackets.Any())\
    \ {\n            return false;\n        }\n\n        var bracketOpens = new List<int>();\n\
    \        var bracketCloses = new List<int>();\n\n        for (int i = 0; i < brackets.Length;\
    \ i++) {\n            var b = brackets[i];\n\n            if (b == '<') {\n  \
    \              bracketOpens.Add(i);\n            }\n\n            if (b == '>')\
    \ {\n                bracketCloses.Add(i);\n            }\n        }\n\n     \
    \   if ((bracketOpens.Count + bracketCloses.Count) != brackets.Length) {\n   \
    \         return false;\n        }\n\n        foreach (var open in\n         \
    \   from b in bracketOpens\n            where bracketCloses.Contains(b)\n    \
    \        select b\n        ) {\n            var close = bracketCloses[bracketCloses.IndexOf(open)];\n\
    \            if (close > open) {\n                return false;\n            }\n\
    \            bracketCloses.Remove(close);\n        }\n\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2367bcfc7c0441f38c8a5d3adc8cfdc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2367bcfc7c0441f38c8a5d3adc8cfdc9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = false;\n       \
    \ foreach (char c in brackets) {\n            switch (c) {\n                case\
    \ '<':\n                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '>':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '>':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '>':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '>':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '>':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '>':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '>':\n\
    \                    result = (result || CorrectBracketing(brackets.Substring(0,\
    \ brackets.Length - 1)));\n                    break;\n                case '<':\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps34h8zcc.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmps34h8zcc.cs(92,2): error CS1513: } expected

    '
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = 0;\n        // count\
    \ how many opening brackets are found.\n        foreach (char c in brackets) {\n\
    \            if (c == '<') count++;\n        }\n        // count how many closing\
    \ brackets are found.\n        foreach (char c in brackets) {\n            if\
    \ (c == '>') count--;\n        }\n        // return false if count is 0\n    \
    \    return count == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <531daa658d4c4e24a7a002ecf16f88c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <531daa658d4c4e24a7a002ecf16f88c4>:0 \n"
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool correct = true;\n       \
    \ string opening = brackets.Replace(\"<\", string.Empty);\n        string closing\
    \ = brackets.Replace(\">\", string.Empty);\n        bool openClosed = opening.Count(c\
    \ => c == '<') == closing.Count(c => c == '>');\n        if (!openClosed)\n  \
    \          correct = false;\n        return correct;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5fcc6c9e81a4b80ad43aa9f7d143853>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5fcc6c9e81a4b80ad43aa9f7d143853>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<string> openings = new List<string>();\n\
    \        List<string> closings = new List<string>();\n        for (int i = 0;\
    \ i < brackets.Length; ++i) {\n            char c = brackets[i];\n           \
    \ if (c == '<') {\n                openings.Add(brackets.Substring(0, i));\n \
    \           } else if (c == '>') {\n                closings.Add(brackets.Substring(i\
    \ + 1, 1));\n            }\n        }\n        if (openings.Count == 0 || closings.Count\
    \ == 0) {\n            return false;\n        }\n        foreach (string opening\
    \ in openings) {\n            bool foundClosing = false;\n            for (int\
    \ j = 0; j < closings.Count; ++j) {\n                string closing = closings[j];\n\
    \                if (opening.IndexOf(closing) != -1) {\n                    closings.RemoveAt(j);\n\
    \                    foundClosing = true;\n                }\n            }\n\
    \            if (!foundClosing) {\n                return false;\n           \
    \ }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00044] in <de814049163b43f0ba6472b2095caae3>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <de814049163b43f0ba6472b2095caae3>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x00044] in <de814049163b43f0ba6472b2095caae3>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <de814049163b43f0ba6472b2095caae3>:0 \n"
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        HashSet<string> set = new HashSet<string>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (set.Contains(brackets.Substring(0,\
    \ i)) ||\n                set.Contains(brackets.Substring(i + 1, brackets.Length\
    \ - i - 1))) {\n                return false;\n            }\n            set.Add(brackets.Substring(i));\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d6523ecf6f47b1b7527ac650df173d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d6523ecf6f47b1b7527ac650df173d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0 || brackets.Count(x\
    \ => x == '<') == brackets.Count(x => x == '>')) {\n            return true;\n\
    \        }\n\n        var pairs = brackets.Split('>')\n            .GroupBy(x\
    \ => x)\n            .Where(x => x.Count() == 2)\n            .ToDictionary(x\
    \ => x.Key, x => x.Key);\n\n        foreach (var pair in pairs) {\n          \
    \  if (pair.Value == \"<\") {\n                // only 1 opening bracket, so there\
    \ must be 1 closing bracket.\n                return true;\n            }\n\n\
    \            if (pair.Value == \">\") {\n                // there must be 1 opening\
    \ bracket\n                return true;\n            }\n\n            return false;\n\
    \        }\n\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88f608f679e341439c2139f473bebbfd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88f608f679e341439c2139f473bebbfd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Count() != brackets.Replace(\"\
    <<\", \">>\")\n            .Replace(\"<<<\", \"<><\")\n            .Replace(\"\
    >>>\", \">><>\")\n            .Replace(\">>><\", \"><><\")\n            .Replace(\"\
    <>>\", \"><><\")\n            .Replace(\"<>><\", \"><><\")\n            .Replace(\"\
    <>\", \"><>\")\n            .Replace(\">>\", \">>\")\n            .Replace(\"\
    >><\", \"><>\")\n            .Replace(\"<>\", \"<>\")\n            .Replace(\"\
    <<\", \"<\")\n            .Replace(\"<<<\", \"<\")\n            .Replace(\">>>\"\
    , \">>\")\n            .Replace(\">>><\", \">\")\n            .Replace(\"<>>\"\
    , \">\")\n            .Replace(\"<>><\", \">\")\n            .Replace(\"<>\",\
    \ \"<\")\n            .Replace(\">>\", \">\")\n            .Replace(\">><\", \"\
    <\")\n            .Replace(\"<>\", \"<\")\n            .Replace(\"<<\", \"<\"\
    )\n            .Replace(\"<<<\", \"<\")\n            .Replace(\">>>\", \">>\"\
    )\n            .Replace(\">>><\", \">\")\n            .Replace(\"<>>\", \">\"\
    )\n            .Replace(\"<>><\", \">\")\n            .Replace(\"<>\", \"<\")\n\
    \            .Replace(\">>\", \">\")\n            .Replace(\">><\", \"<\")\n \
    \           .Replace(\"<>\", \"<\")\n            .Replace(\"<<\", \"<\")\n   \
    \         .Replace(\"<<<\", \"<\")\n            .Replace(\">>>\", \">>\")\n  \
    \          .Replace(\">>><\", \">\")\n            .Replace(\"<>>\", \">\")\n \
    \           .Replace(\"<>><\", \">\")\n            .Replace(\"<>\", \"<\")\n \
    \           .Replace(\">>\", \">\")\n            .Replace(\">><\", \"<\")\n  \
    \          .Replace(\"<>\", \"<\")\n            .Replace(\"<<\", \"<\")\n    \
    \        .Replace(\"<<<\", \"<\")\n            .Replace(\">>>\", \">>\")\n   \
    \         .Replace(\">>><\", \">\")\n            .Replace(\"<>>\", \">\")\n  \
    \          .Replace(\"<>><\", \">\")\n            .Replace(\"<>\", \"<\")\n  \
    \          .Replace(\">>\", \">\")\n            .Replace(\">><\", \"<\")\n   \
    \         .Replace(\"<>\", \"<\")\n            .Replace(\"<<\", \"<\")\n     \
    \       .Replace(\"<<<\", \"<\")\n            .Replace(\">>>\", \">>\")\n    \
    \        .Replace(\">>><\", \">\")\n            .Replace(\"<>>\", \">\")\n   \
    \         .Replace(\"<>><\", \">\")\n            .Replace(\"<>\", \"<\")\n   \
    \         .Replace(\">>\", \">\")\n            .\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp064foe6f.cs(78,14): error CS1001: Identifier expected

    /tmp/tmp064foe6f.cs(78,14): error CS1026: ) expected

    /tmp/tmp064foe6f.cs(78,14): error CS1525: Invalid expression term ''}''

    /tmp/tmp064foe6f.cs(78,14): error CS1002: ; expected

    '
  timestamp: 1659976936
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var bracketCounts = new Dictionary<char,\
    \ int>();\n        for (int i = 0; i < brackets.Length; i++) {\n            char\
    \ bracket = brackets[i];\n            if (bracketCounts.ContainsKey(bracket))\
    \ {\n                bracketCounts[bracket]++;\n            } else {\n       \
    \         bracketCounts.Add(bracket, 1);\n            }\n        }\n        foreach\
    \ (var entry in bracketCounts) {\n            if (entry.Value != 1) {\n      \
    \          return false;\n            }\n        }\n        return true;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f83c9f7122244a9cbf3ae20adcbed65d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f83c9f7122244a9cbf3ae20adcbed65d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] opening = brackets.Split(new\
    \ char[] { '<' }, StringSplitOptions.RemoveEmptyEntries);\n        string[] closing\
    \ = brackets.Split(new char[] { '>' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        for (int i = 0; i < opening.Length; ++i) {\n            if (closing[i]\
    \ != null && opening[i] == closing[i]) {\n                continue;\n        \
    \    }\n            if (opening[i] == null) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ab04b770c2e44308a4238fcf7b6bb69>:0 \n\nUnhandled Exception:\n\
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n\
    \  at Problem.CorrectBracketing (System.String brackets) [0x0002c] in <3ab04b770c2e44308a4238fcf7b6bb69>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00054] in <3ab04b770c2e44308a4238fcf7b6bb69>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x0002c] in <3ab04b770c2e44308a4238fcf7b6bb69>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00054] in <3ab04b770c2e44308a4238fcf7b6bb69>:0 \n"
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<Char>();\n\
    \        foreach (var c in brackets) {\n            if (c == '<') stack.Push(c);\n\
    \            else if (c == '>') {\n                if (stack.Count > 0) stack.Pop();\n\
    \                else return false;\n            }\n        }\n        return\
    \ stack.Count == 0;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBracketCount = brackets.Count(c\
    \ => c == '<');\n        int closingBracketCount = brackets.Count(c => c == '>');\n\
    \        int total = openingBracketCount + closingBracketCount;\n\n        return\
    \ total == brackets.Length;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56093527a008471f8caee80c3dfe7324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56093527a008471f8caee80c3dfe7324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // TODO: implement me :)\n   \
    \     throw new NotImplementedException();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation\
    \ is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <fc25339313794798972e1880cb23e1c1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method\
    \ or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]\
    \ in <fc25339313794798972e1880cb23e1c1>:0 \n"
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return true;\n        int count = brackets.Length;\n        for (int i\
    \ = 0; i < count; i++) {\n            if (brackets[i] == '<') {\n            \
    \    if (i < count - 1 && brackets[i + 1] == '>')\n                    return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a3f94db52844b09af6ce216f4225f33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a3f94db52844b09af6ce216f4225f33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        StringBuilder sb = new StringBuilder(brackets);\n\
    \        int openingBracketCount = 0;\n        int closingBracketCount = 0;\n\
    \        bool retVal = true;\n        for (int i = 0; i < brackets.Length; i++)\
    \ {\n            if (brackets[i] == '<') {\n                openingBracketCount++;\n\
    \            } else if (brackets[i] == '>') {\n                closingBracketCount++;\n\
    \            }\n        }\n        if (openingBracketCount != closingBracketCount)\
    \ {\n            retVal = false;\n        }\n        return retVal;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0908f8e98dc44f1db867d6a09446b8e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0908f8e98dc44f1db867d6a09446b8e3>:0 \n"
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length < 1) return\
    \ false;\n        Stack<char> bracketStack = new Stack<char>();\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                if (!bracketStack.Any())\n\
    \                    return false;\n                char next = bracketStack.Pop();\n\
    \                if (next != '<')\n                    return false;\n       \
    \         bracketStack.Push(c);\n            }\n            else if (c == '>')\
    \ {\n                if (!bracketStack.Any())\n                    return false;\n\
    \                if (bracketStack.Peek() != '<')\n                    return false;\n\
    \                bracketStack.Pop();\n            }\n            else {\n    \
    \            bracketStack.Push(c);\n            }\n        }\n        return bracketStack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fcfc519cc2741238be61b6fc3fcc210>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fcfc519cc2741238be61b6fc3fcc210>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] opening = brackets.ToCharArray();\n\
    \        char[] closing = brackets.ToCharArray();\n        for (int i = 0; i <\
    \ opening.Length; i++) {\n            bool found = false;\n            for (int\
    \ j = 0; j < closing.Length; j++) {\n                if (opening[i] == closing[j])\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22e2baac8bbd4fc888b40a965cf52e81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22e2baac8bbd4fc888b40a965cf52e81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < brackets.Length; i++)\n            if (brackets[i]\
    \ != '<')\n                sb.Append(brackets[i]);\n            else\n       \
    \         sb.Append(brackets[++i]);\n        return sb.ToString() == \">\";\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84ce0d0ce7b94ea2b85088ac49aa1b1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84ce0d0ce7b94ea2b85088ac49aa1b1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return (brackets.Count(x => x\
    \ == '<') < brackets.Count(x => x == '>')) &&\n               (brackets.Count(x\
    \ => x == '<') > brackets.Count(x => x == '<'));\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7254bcf4820d4e2eaf0f75c7a718dcb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7254bcf4820d4e2eaf0f75c7a718dcb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<int> bracketsList = new List<int>();\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '<') {\n                bracketsList.Add(i);\n            }\n           \
    \ if (brackets[i] == '>') {\n                if (bracketsList.Count > 0) {\n \
    \                   bracketsList.RemoveAt(bracketsList.Count - 1);\n         \
    \       }\n            }\n        }\n        return bracketsList.Count == 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e13abb3b1b9408692e7cbac9088ab22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e13abb3b1b9408692e7cbac9088ab22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length != 2)\n  \
    \          return false;\n        var stack = new Stack<char>();\n        foreach\
    \ (var char in brackets) {\n            if (char == '>')\n                stack.Push(\"\
    >\");\n            else if (char == '<')\n                stack.Push(\"<\");\n\
    \            else if (char == '<')\n                stack.Pop();\n           \
    \ else { // char == '>'\n                if (stack.Count == 0)\n             \
    \       return false;\n                if (stack.Pop() != '<')\n             \
    \       return false;\n            }\n        }\n        if (stack.Count == 0)\n\
    \            return false;\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprjzt1lhe.cs(23,22): error CS1515: ''in'' expected

    /tmp/tmprjzt1lhe.cs(23,22): error CS0230: Type and identifier are both required
    in a foreach statement

    /tmp/tmprjzt1lhe.cs(23,22): error CS1525: Invalid expression term ''char''

    /tmp/tmprjzt1lhe.cs(23,27): error CS1026: ) expected

    /tmp/tmprjzt1lhe.cs(23,27): error CS1525: Invalid expression term ''in''

    /tmp/tmprjzt1lhe.cs(23,27): error CS1002: ; expected

    /tmp/tmprjzt1lhe.cs(23,27): error CS1513: } expected

    /tmp/tmprjzt1lhe.cs(23,38): error CS1002: ; expected

    /tmp/tmprjzt1lhe.cs(23,38): error CS1513: } expected

    /tmp/tmprjzt1lhe.cs(24,17): error CS1525: Invalid expression term ''char''

    /tmp/tmprjzt1lhe.cs(26,22): error CS1525: Invalid expression term ''char''

    /tmp/tmprjzt1lhe.cs(28,22): error CS1525: Invalid expression term ''char''

    '
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Use string's IndexOf to find\
    \ the index of a \"<\" character.\n        int openingBracketIndex = brackets.IndexOf(\"\
    <\");\n        if (openingBracketIndex != -1) {\n            // Use string's LastIndexOf\
    \ method to find the index of a \">\"\n            // character.\n           \
    \ int closingBracketIndex = brackets.LastIndexOf(\">\", openingBracketIndex);\n\
    \            if (closingBracketIndex != -1) {\n                // Make sure the\
    \ closing bracket is followed by a \">\"\n                bool rightAngleBracket\
    \ = brackets[closingBracketIndex + 1] == \">\";\n                if (!rightAngleBracket)\
    \ {\n                    // If the closing bracket is not followed by a \">\"\
    \ character,\n                    // then the string is not well-formed brackets.\n\
    \                    return false;\n                }\n                // Otherwise,\
    \ remove the closing bracket from our string and\n                // replace it\
    \ with the correct \">\".\n                brackets = brackets.Remove(closingBracketIndex,\
    \ 1);\n                brackets = brackets.Insert(closingBracketIndex + 1, \"\
    >\");\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_xdcwnjl.cs(28,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool ok = brackets.Count() ==\
    \ 2;\n        if (!ok) {\n            throw new ArgumentException(\"invalid brackets\"\
    );\n        }\n        var openingBrackets = new List<char>();\n        var closingBrackets\
    \ = new List<char>();\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                openingBrackets.Add(c);\n            } else if\
    \ (c == '>') {\n                closingBrackets.Add(c);\n            } else {\n\
    \                throw new ArgumentException(\"invalid brackets\");\n        \
    \    }\n        }\n        bool result = true;\n        if (openingBrackets.Count\
    \ != closingBrackets.Count) {\n            result = false;\n        } else {\n\
    \            for (int i = 0; i < openingBrackets.Count; i++) {\n             \
    \   if (openingBrackets[i] != closingBrackets[i]) {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c23a764458204ca387007726445dc8ea>:0 \n\nUnhandled Exception:\n\
    System.ArgumentException: invalid brackets\n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x00016] in <c23a764458204ca387007726445dc8ea>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00011] in <c23a764458204ca387007726445dc8ea>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: invalid brackets\n\
    \  at Problem.CorrectBracketing (System.String brackets) [0x00016] in <c23a764458204ca387007726445dc8ea>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <c23a764458204ca387007726445dc8ea>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var pairs = brackets.Split(new\
    \ string[] { \"<\", \">\" }, StringSplitOptions.None).ToList();\n\n        bool\
    \ isCorrect = true;\n\n        foreach (var pair in pairs) {\n            if (pair.Length\
    \ != 2)\n                isCorrect = false;\n            else {\n            \
    \    if (!pair.Contains(pair[0]))\n                    isCorrect = false;\n  \
    \              if (!pair.Contains(pair[1]))\n                    isCorrect = false;\n\
    \            }\n        }\n\n        return isCorrect;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33bfa9cd9fea4058bb322fce2ad11804>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33bfa9cd9fea4058bb322fce2ad11804>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        foreach (char open in brackets)\
    \ {\n            int close = brackets.IndexOf(open, 1);\n            if (close\
    \ < 0) {\n                return false;\n            }\n            if (close\
    \ > open) {\n                return false;\n            }\n        }\n       \
    \ return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <473794a78f8e4a73881c9ad3f89ed18b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <473794a78f8e4a73881c9ad3f89ed18b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || !brackets.Any())\
    \ return false;\n        Stack<char> stack = new Stack<char>();\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                if (stack.Count\
    \ == 0) return false;\n                if (stack.Peek() != '<') return false;\n\
    \                stack.Pop();\n            }\n            else if (c == '>') {\n\
    \                if (stack.Count == 0) return false;\n                if (stack.Peek()\
    \ != '>') return false;\n                stack.Pop();\n            }\n       \
    \     else if (c == '<') {\n                if (stack.Count > 0) return false;\n\
    \                stack.Push(c);\n            }\n            else {\n         \
    \       stack.Pop();\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49ab46bf2b504a1b9f103a8715bdb503>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49ab46bf2b504a1b9f103a8715bdb503>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var isBracketsCorrect = true;\n\
    \        // find out how may brackets we are looking at by checking the length\n\
    \        for (int i = 0; brackets.Length > i; i++) {\n            if (brackets.Substring(i,\
    \ 1) != brackets.Substring(i + 1, 1)) {\n                isBracketsCorrect = false;\n\
    \                break;\n            }\n        }\n        return isBracketsCorrect;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31b64b82499348668883f7f5b32c7862>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31b64b82499348668883f7f5b32c7862>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976937
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string leftBrackets = \"[\\\\\
    <\\\\>]\";\n        string rightBrackets = \"[\\\\<\\\\>]\";\n        string openingBrackets\
    \ = \"[\\\\<\\\\>]\";\n        string closingBrackets = \"[\\\\<\\\\>]\";\n  \
    \      StringBuilder sb = new StringBuilder();\n        bool bracketsAreValid\
    \ = true;\n        foreach (char ch in brackets) {\n            switch (ch) {\n\
    \                case '<':\n                    sb.Append(leftBrackets);\n   \
    \                 break;\n                case '>':\n                    sb.Append(rightBrackets);\n\
    \                    break;\n                case '[':\n                    sb.Append(openingBrackets);\n\
    \                    break;\n                case ']':\n                    sb.Append(closingBrackets);\n\
    \                    break;\n            }\n        }\n        string input =\
    \ sb.ToString();\n        bool isValid = true;\n        foreach (char ch in input)\
    \ {\n            switch (ch) {\n                case '<':\n                  \
    \  if (input.Contains(\"[\")) {\n                        isValid = false;\n  \
    \                  }\n                    break;\n                case '>':\n\
    \                    if (input.Contains(\"[\")) {\n                        isValid\
    \ = false;\n                    }\n                    break;\n              \
    \  case '[':\n                    if (input.Contains(\"[\")) {\n             \
    \           isValid = false;\n                    }\n                    break;\n\
    \                case ']':\n                    if (input.Contains(\"[\")) {\n\
    \                        isValid = false;\n                    }\n           \
    \         break;\n            }\n        }\n        return isValid;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91ef75193b154bb5821d022a542af01c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91ef75193b154bb5821d022a542af01c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Count(b => b ==\
    \ '<') != brackets.Count(b => b == '>');\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2a69d59993744b1935f9520f09e895c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2a69d59993744b1935f9520f09e895c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.All(ch => !brackets.Contains(ch\
    \ + \",\"));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9d317a8ec8c466f8d21ed35dbd59a64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9d317a8ec8c466f8d21ed35dbd59a64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Contains(\">\"))\n\
    \            return !brackets.Contains(\"<\");\n        if (brackets.Contains(\"\
    <\"))\n            return !brackets.Contains(\">\");\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8bf52478cc3d494b94c7f0e1da8a8268>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8bf52478cc3d494b94c7f0e1da8a8268>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool inBrackets = false;\n   \
    \     foreach (char c in brackets) {\n            if (c == '<') {\n          \
    \      if (!inBrackets) {\n                    inBrackets = true;\n          \
    \      }\n            } else {\n                if (inBrackets) {\n          \
    \          inBrackets = false;\n                }\n            }\n        }\n\
    \        return inBrackets;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e7a904816e6471bb97ed5dc9364d620>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e7a904816e6471bb97ed5dc9364d620>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBracket = brackets.IndexOf(\"\
    <\") + 1;\n        int closingBracket = brackets.IndexOf(\">\") - 1;\n       \
    \ while (openingBracket <= closingBracket) {\n            int openingBracketLength\
    \ = brackets.Substring(0, openingBracket).Length;\n            int closingBracketLength\
    \ = brackets.Substring(closingBracket + 1).Length;\n            if (openingBracketLength\
    \ != closingBracketLength) {\n                return false;\n            }\n \
    \           openingBracket++;\n            closingBracket--;\n        }\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <053511af41454be596cb62887b217acc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <053511af41454be596cb62887b217acc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool isValid = true;\n       \
    \ List<int> counts = new List<int>();\n        int openCount = 0;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\
    \ {\n                counts.Add(1);\n                openCount++;\n          \
    \  } else if (brackets[i] == '>') {\n                counts.Add(-1);\n       \
    \     } else {\n                if (brackets[i] == '(') {\n                  \
    \  openCount--;\n                }\n            }\n        }\n        if (openCount\
    \ != 0) {\n            isValid = false;\n        }\n        if (counts.Any(x =>\
    \ x == 0)) {\n            isValid = false;\n        }\n        return isValid;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9865f62f0a64e489ff227701698e721>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9865f62f0a64e489ff227701698e721>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ == 0) return false;\n\n        // Use a stack to keep track of opened brackets.\n\
    \        Stack<char> open = new Stack<char>();\n\n        // If brackets[0] is\
    \ not a opening bracket,\n        // then brackets does not have the correct format.\n\
    \        // The correct format must be\n        // \"<\" or \">\".\n        //\
    \ If brackets[0] is \"(\" then brackets.Length > 1 must be true.\n        // If\
    \ brackets[0] is \")\" then brackets.Length > 1 must be false.\n        // If\
    \ brackets[0] is not \"(\" or \"[\"\n        // then brackets.Length > 1 must\
    \ be false.\n        // If brackets[0] is not \")\" or \"]\" then brackets.Length\
    \ > 1 must be true.\n        if (brackets[0] != '<' && brackets[0] != '>') {\n\
    \            return false;\n        }\n\n        // If the first opening bracket\
    \ is not \"(\" or \")\"\n        // then brackets.Length must be zero.\n     \
    \   if (brackets.Length == 1) return false;\n\n        // If the first opening\
    \ bracket is \"(\",\n        // then brackets.Length > 1 must be true.\n     \
    \   if (brackets[0] == '(') {\n            return (brackets.Length > 1);\n   \
    \     }\n\n        // If the first opening bracket is \")\",\n        // then\
    \ brackets.Length > 1 must be false.\n        if (brackets[0] == ')') {\n    \
    \        return (brackets.Length > 1);\n        }\n\n        // If the first opening\
    \ bracket is not \"[\",\n        // then brackets.Length > 1 must be false.\n\
    \        if (brackets[0] == '[') {\n            return (brackets.Length > 1);\n\
    \        }\n\n        // If the first opening bracket is not \"]\",\n        //\
    \ then brackets.Length > 1 must be true.\n        if (brackets[0] == ']') {\n\
    \            return (brackets.Length > 1);\n        }\n\n        // The first\
    \ opening bracket must be either \"(\" or \"[\",\n        // so brackets.Length\
    \ > 1 must be false.\n        // If brackets.Length > 1, then brackets.Length\
    \ must be zero.\n        return (brackets.Length > 1);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e9935cc77984d74845f3371d57a2e3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e9935cc77984d74845f3371d57a2e3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = false;\n       \
    \ for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] ==\
    \ \"<\") {\n                if (brackets[i+1] == \"<\" || brackets[i+1] == \"\
    =\" || brackets[i+1] == \"<=\" || brackets[i+1] == \">\" || brackets[i+1] == \"\
    =\" || brackets[i+1] == \"=>\") {\n                    result = true;\n      \
    \          }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_103dgpx.cs(22,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp_103dgpx.cs(23,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp_103dgpx.cs(23,45): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp_103dgpx.cs(23,69): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp_103dgpx.cs(23,94): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp_103dgpx.cs(23,118): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp_103dgpx.cs(23,142): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976937
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string temp = brackets;\n    \
    \    temp += brackets.Substring(1, brackets.Length - 2);\n        bool result\
    \ = true;\n        foreach (char opening in new []{'<', '>'}) {\n            foreach\
    \ (char closing in new []{'>', '<'}) {\n                result = result && temp.IndexOf(opening,\
    \ StringComparison.OrdinalIgnoreCase) != -1 &&\n                    temp.IndexOf(closing,\
    \ StringComparison.OrdinalIgnoreCase) != -1;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82f3df9304f44bb6ae25a06b93a1d59b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82f3df9304f44bb6ae25a06b93a1d59b>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Length cannot be less than zero.\nParameter\
    \ name: length\n  at System.String.Substring (System.Int32 startIndex, System.Int32\
    \ length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing\
    \ (System.String brackets) [0x0000c] in <82f3df9304f44bb6ae25a06b93a1d59b>"
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBrackets = brackets.Count(c\
    \ => c == '<');\n        int closingBrackets = brackets.Count(c => c == '>');\n\
    \        return openingBrackets == closingBrackets;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bd3a69be5304a9280312cdd76299432>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bd3a69be5304a9280312cdd76299432>:0 \n"
  stdout: ''
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<string>();\n\
    \        foreach (var c in brackets) {\n            switch (c) {\n           \
    \     case \">\":\n                case \">>\":\n                    if (stack.Count\
    \ == 0) {\n                        return false;\n                    } else {\n\
    \                        stack.Pop();\n                    }\n               \
    \     break;\n                case \"<\":\n                case \"<<\":\n    \
    \                if (stack.Count == 0) {\n                        return false;\n\
    \                    } else {\n                        stack.Push(c);\n      \
    \              }\n                    break;\n                default:\n     \
    \               stack.Push(c);\n                    break;\n            }\n  \
    \      }\n        if (stack.Count == 0) {\n            return true;\n        }\
    \ else {\n            return false;\n        }\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp81jynxjs.cs(23,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp81jynxjs.cs(24,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp81jynxjs.cs(31,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp81jynxjs.cs(32,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmp81jynxjs.cs(36,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp81jynxjs.cs(40,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openBrackets = brackets.Count(c\
    \ => c == '<');\n        int closedBrackets = brackets.Count(c => c == '>');\n\
    \        return (closedBrackets == openBrackets);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb584a454e374a9382cfa26687b67ed5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb584a454e374a9382cfa26687b67ed5>:0 \n"
  stdout: ''
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return false;\n        int open = brackets.IndexOf('<');\n        if (open\
    \ < 0)\n            return false;\n        int close = brackets.IndexOf('>');\n\
    \        if (close < 0)\n            return false;\n        string middle = brackets.Substring(open\
    \ + 1, close - open - 1);\n        return middle == String.Empty;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <383a442193084bacb42a18a89584ba24>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Length cannot be less than zero.\nParameter\
    \ name: length\n  at System.String.Substring (System.Int32 startIndex, System.Int32\
    \ length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing\
    \ (System.String brackets) [0x0003e] in <383a442193084bacb42a18a89584ba24>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00054] in <383a442193084bacb42a18a89584ba24>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length\
    \ cannot be less than zero.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x0003e] in <383a442193084bacb42a18a89584ba24>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00054] in <383a442193084bacb42a18a89584ba24>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int openingBrackets = 0;\n   \
    \     string bracket = brackets;\n        while (bracket.Length > 0) {\n     \
    \       // increment opening brackets\n            if (bracket.ToUpper() == \"\
    <\") {\n                openingBrackets++;\n            }\n            // decrement\
    \ closing brackets\n            else if (bracket.ToUpper() == \">\") {\n     \
    \           openingBrackets--;\n            }\n            // if the string is\
    \ empty or only contains \"<\"\n            if (openingBrackets == 0) {\n    \
    \            return true;\n            }\n            // else decrement our openingBrackets\n\
    \            else {\n                bracket = bracket.Substring(0, bracket.Length-1);\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d7455e961e9413ca5c41dd067bb1329>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d7455e961e9413ca5c41dd067bb1329>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] arr = brackets.ToCharArray();\n\
    \        int openBracketCount = 0;\n        int closedBracketCount = 0;\n    \
    \    for (int i = 0; i < arr.Length; i++) {\n            if (arr[i] == '<') {\n\
    \                openBracketCount++;\n            }\n            if (arr[i] ==\
    \ '>') {\n                closedBracketCount++;\n            }\n        }\n  \
    \      if (closedBracketCount != openBracketCount) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fc57bed7e0149ee9cb40f414379eb6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fc57bed7e0149ee9cb40f414379eb6d>:0 \n"
  stdout: ''
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] != \"<\"\
    ) {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9jy6659f.cs(22,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return false;\n        char[] bracketChars = brackets.ToCharArray();\n\
    \        bool isBracket = false;\n        bool isOpenBracket = true;\n       \
    \ int brackCount = 0;\n        for (int i = 0; i < bracketChars.Length; i++) {\n\
    \            isBracket = isBracket || isOpenBracket;\n            if (bracketChars[i]\
    \ == '<')\n                brackCount++;\n            else\n                brackCount--;\n\
    \            if (brackCount == 0) {\n                isBracket = false;\n    \
    \            isOpenBracket = true;\n            }\n            else {\n      \
    \          isOpenBracket = isBracket;\n            }\n        }\n        return\
    \ isBracket;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <088b0ddcd76342e195e4a3f15a70c255>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <088b0ddcd76342e195e4a3f15a70c255>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] bracketsArray = brackets.Split('>');\n\
    \        List<int> openingBracketIndexes = new List<int>();\n        int currentOpeningBracketIndex\
    \ = 0;\n        int currentClosingBracketIndex = 0;\n        for (int i = 0; i\
    \ < bracketsArray.Length; i++) {\n            if (bracketsArray[i] == \"<\") {\n\
    \                openingBracketIndexes.Add(currentOpeningBracketIndex);\n    \
    \            currentOpeningBracketIndex++;\n            }\n            else if\
    \ (bracketsArray[i] == \">\") {\n                currentClosingBracketIndex++;\n\
    \            }\n            else if (bracketsArray[i] == \"<\") {\n          \
    \      currentOpeningBracketIndex++;\n            }\n        }\n        if (currentOpeningBracketIndex\
    \ != openingBracketIndexes.Count) {\n            return false;\n        }\n  \
    \      if (currentClosingBracketIndex != openingBracketIndexes.Count - 1) {\n\
    \            return false;\n        }\n        foreach (var index in openingBracketIndexes)\
    \ {\n            int closingBracketIndex = currentOpeningBracketIndex - 1;\n \
    \           if (closingBracketIndex < 0) return false;\n            if (bracketsArray[index]\
    \ == \">\") {\n                closingBracketIndex--;\n            }\n       \
    \     if (closingBracketIndex < 0) return false;\n            if (bracketsArray[closingBracketIndex]\
    \ != \">\") return false;\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3966f00b50994c9a96a4b0460ae30afb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3966f00b50994c9a96a4b0460ae30afb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string openingBrackets;\n    \
    \    string closingBrackets;\n        int openingBracketsCount;\n        int closingBracketsCount;\n\
    \        openingBrackets = \"\";\n        closingBrackets = \"\";\n        openingBracketsCount\
    \ = brackets.Count(f => f == '<');\n        closingBracketsCount = brackets.Count(f\
    \ => f == '>');\n        if (openingBracketsCount == closingBracketsCount) {\n\
    \            openingBrackets += brackets;\n            return true;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ceb5f82904b43df8b2f3ff7b42aa23c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ceb5f82904b43df8b2f3ff7b42aa23c>:0 \n"
  stdout: ''
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] bracketStrings = brackets.Split(new\
    \ char[] { '<', '>' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach\
    \ (string bracketString in bracketStrings) {\n            int bracketCount = bracketString.Count(c\
    \ => c == '<');\n            if (bracketCount != bracketString.Count(c => c ==\
    \ '>')) return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e19f08e5443a4f0f9026da458e2c0413>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e19f08e5443a4f0f9026da458e2c0413>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] openBrackets = brackets.ToCharArray();\n\
    \        int current = 0;\n        while (current < openBrackets.Length) {\n \
    \           if (openBrackets[current] == '<') {\n                if (current +\
    \ 1 == openBrackets.Length) {\n                    return true;\n            \
    \    }\n                if (openBrackets[++current] == '<') {\n              \
    \      if (current + 1 == openBrackets.Length) {\n                        return\
    \ true;\n                    }\n                    if (openBrackets[++current]\
    \ == '>') {\n                        if (current + 1 == openBrackets.Length) {\n\
    \                            return true;\n                        }\n       \
    \                 if (openBrackets[++current] == '>') {\n                    \
    \        return true;\n                        }\n                    }\n    \
    \            }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976943
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // This can be optimized into\
    \ a loop through the brackets.\n        // However, I wanted to avoid doing that.\n\
    \        bool ret = true;\n        // If brackets is empty, then we shouldn't\
    \ do anything.\n        if (brackets.Length == 0)\n            return ret;\n\n\
    \        // Set up the stack\n        // I used a stack instead of a queue. This\
    \ allows us the use of a stack and\n        // also avoids having to use an array\
    \ to hold open brackets.\n        Stack<char> stack = new Stack<char>();\n\n \
    \       // Loop through each character in brackets\n        for (int i = 0; i\
    \ < brackets.Length; i++) {\n            char c = brackets[i];\n\n           \
    \ // If we've found an opening bracket, push it on the stack.\n            //\
    \ If we've found a closing bracket, pop the stack and check if it's the\n    \
    \        // correct bracket.\n            if (c == '<') {\n                stack.Push(c);\n\
    \            } else {\n                if (stack.Count == 0)\n               \
    \     // We don't have a matching closing bracket when we started.\n         \
    \           ret = false;\n                else {\n                    char c =\
    \ stack.Pop();\n                    // If the last character in the stack is the\
    \ same, we've got the\n                    // correct bracket.\n             \
    \       if (c == c)\n                        ret = true;\n                }\n\
    \            }\n        }\n\n        // If we haven't found any brackets, we're\
    \ not on the right track.\n        return !ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkke5g977.cs(46,26): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkke5g977.cs(49,25): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Use a stack to keep track of\
    \ how many open brackets\n        // and how many close brackets are there.\n\
    \        // A stack is LIFO, so we pop the top item as we find an\n        //\
    \ opening bracket.\n        Stack<bool> stack = new Stack<bool>();\n        //\
    \ Create a dictionary to keep track of how many times a bracket\n        // is\
    \ seen.\n        Dictionary<char, int> seen = new Dictionary<char, int>();\n \
    \       // Populate the dictionary with the opening brackets.\n        foreach(var\
    \ c in brackets) {\n            if (seen.ContainsKey(c))\n                seen[c]++;\n\
    \            else\n                seen.Add(c, 1);\n        }\n\n        // Pop\
    \ the top item as we find an opening bracket.\n        while (stack.Count > 0)\
    \ {\n            char c = stack.Pop();\n            if (seen.ContainsKey(c)) {\n\
    \                int count = seen[c];\n                seen[c] = count - 1;\n\
    \            }\n            else {\n                return false;\n          \
    \  }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfl2jeol.cs(38,22): error CS0029: Cannot implicitly convert type ''bool''
    to ''char''

    '
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length != 1) {\n\
    \            return false;\n        }\n        var bracket = brackets[0];\n  \
    \      var isOpen = bracket == '<';\n        var isClose = bracket == '>';\n \
    \       var opens = brackets.Split('>').Select(x => x.Substring(0, 1));\n    \
    \    var closes = brackets.Split('<').Select(x => x.Substring(0, 1));\n      \
    \  var openCount = opens.Count(x => x == brack);\n        var closeCount = closes.Count(x\
    \ => x == brack);\n        var isCorrect = openCount == closeCount;\n        return\
    \ isCorrect;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbprwulcz.cs(28,47): error CS0103: The name ''brack'' does not exist in
    the current context

    /tmp/tmpbprwulcz.cs(29,49): error CS0103: The name ''brack'' does not exist in
    the current context

    '
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string input = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\").Replace(\"<<\", \"\").Replace(\">>\", \"\").Replace(\"\
    <<<\", \"\");\n        char[] charArray = input.ToCharArray();\n        for (int\
    \ i = 0; i < charArray.Length; i++) {\n            if (charArray[i] == '<') {\n\
    \                charArray[i] = '>';\n                input = new string(charArray);\n\
    \            }\n        }\n        // string input = brackets.Replace(\"<\", \"\
    \").Replace(\">\", \"\").Replace(\"<<\", \"\").Replace(\">>\", \"\").Replace(\"\
    <<<\", \"\");\n        // char[] charArray = input.ToCharArray();\n        //\
    \ for (int i = 0; i < charArray.Length; i++) {\n        //     if (charArray[i]\
    \ == '<') {\n        //         charArray[i] = '>';\n        //         input\
    \ = new string(charArray);\n        //     }\n        // }\n        return input\
    \ == brackets;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd93e234c5654b528ea62db5413bcde7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd93e234c5654b528ea62db5413bcde7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool bracketsCorrect = true;\n\
    \        for (int i = 0; i < brackets.Length; ++i) {\n            string bracket\
    \ = brackets[i];\n            if (bracket.Length > 1) {\n                if (bracket.StartsWith(\"\
    <\")) {\n                    string closingBracket = bracket.Substring(1, bracket.Length\
    \ - 1);\n                    if (brackets.IndexOf(closingBracket, i + 1) < 0)\
    \ {\n                        bracketsCorrect = false;\n                    }\n\
    \                }\n                if (bracket.Length > 2) {\n              \
    \      if (bracket.EndsWith(\">\")) {\n                        string closingBracket\
    \ = bracket.Substring(0, bracket.Length - 1);\n                        if (brackets.IndexOf(closingBracket,\
    \ i + 1) < 0) {\n                            bracketsCorrect = false;\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n        return bracketsCorrect;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq9sii8uw.cs(22,30): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Length == 0) {\n\
    \            return true;\n        }\n        char[] chars = brackets.ToCharArray();\n\
    \        Stack<string> stack = new Stack<string>();\n        bool ok = true;\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ '<') {\n                stack.Append(chars.Substring(i + 1, 1));\n         \
    \       i++;\n            } else {\n                string opening = string.Join(\"\
    \", stack.ToArray());\n                string closing = chars.Substring(i + 1,\
    \ 1);\n                if (opening == closing) {\n                    if (opening.Length\
    \ > 1) {\n                        ok = false;\n                    }\n       \
    \         } else {\n                    ok = false;\n                }\n     \
    \           stack.Pop();\n            }\n        }\n        return ok;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpblpovgx2.cs(28,36): error CS1061: ''char[]'' does not contain a definition
    for ''Substring'' and no accessible extension method ''Substring'' accepting a
    first argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpblpovgx2.cs(32,40): error CS1061: ''char[]'' does not contain a definition
    for ''Substring'' and no accessible extension method ''Substring'' accepting a
    first argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976938
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if(brackets == \"\") return false;\n\
    \        \n        int opened = 0;\n        int closed = 0;\n        string openings\
    \ = \"\";\n        string closings = \"\";\n        foreach(char c in brackets)\n\
    \        {\n            if(c ==\"<\")\n            {\n                if(opened\
    \ == 0)\n                {\n                    openings += c;\n             \
    \       opened++;\n                }\n                else\n                {\n\
    \                    closings += c;\n                    closed++;\n         \
    \       }\n            }\n            else if(c ==\">\")\n            {\n    \
    \            if(opened > 0)\n                {\n                    closings +=\
    \ c;\n                    closed++;\n                }\n                else\n\
    \                {\n                    openings += c;\n                    opened++;\n\
    \                }\n            }\n        }\n        if(openings != closings)\n\
    \        {\n            return false;\n        }\n        else\n        {\n  \
    \          return true;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn8tnslky.cs(28,16): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpn8tnslky.cs(41,21): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string str = brackets;\n     \
    \   string closingBracket = brackets.Replace(\"<\", \"\").Replace(\">\", \"\"\
    );\n        if (closingBracket == string.Empty) {\n            return true;\n\
    \        }\n        if (closingBracket == brackets) {\n            return false;\n\
    \        }\n        return CorrectBracketing(str.Replace(str, closingBracket));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0dca5e11a3744f1087a3692806dbacaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0dca5e11a3744f1087a3692806dbacaa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int length = brackets.Length;\n\
    \        // loop through the brackets string.\n        for (int i = 0; i < length;\
    \ i++) {\n            // if the character is not \"<\", ignore it.\n         \
    \   if (brackets[i] == '<') {\n                continue;\n            }\n    \
    \        // if the character is not \">\", ignore it.\n            if (brackets[i]\
    \ == '>') {\n                continue;\n            }\n            // otherwise,\
    \ return false because there are not enough closing brackets.\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91af3c5f93934a43a2058e5c57ae716b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91af3c5f93934a43a2058e5c57ae716b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Create a stack of opening brackets.\n\
    \        Stack stack = new Stack();\n        // Add the opening brackets to the\
    \ stack.\n        foreach (var bracket in brackets) {\n            if (bracket\
    \ == '<')\n                stack.Push('<');\n            else if (bracket == '>')\n\
    \                stack.Push('>');\n            else\n                throw new\
    \ ArgumentException(\"Only '<' and '>' are allowed.\");\n        }\n        //\
    \ Pop an opening bracket from the stack, and compare it to the opening bracket\n\
    \        // at the end of the string.\n        while (stack.Count > 0) {\n   \
    \         var current = stack.Pop();\n            if (current == '<') {\n    \
    \            // Found a matching closing bracket.\n                return true;\n\
    \            }\n        }\n        // No matching brackets found.\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2fwujjac.cs(21,9): error CS0305: Using the generic type ''Stack<T>'' requires
    1 type arguments

    /tmp/tmp2fwujjac.cs(21,27): error CS0305: Using the generic type ''Stack<T>''
    requires 1 type arguments

    /tmp/tmp2fwujjac.cs(33,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659976938
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        return brackets.Count(x => x ==\
    \ '<') < brackets.Count(x => x == '>');\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af0726974d644b9ea5f5ade22e43e978>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af0726974d644b9ea5f5ade22e43e978>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        List<char> openingBrackets = new\
    \ List<char>();\n        List<char> closingBrackets = new List<char>();\n\n  \
    \      // find all pairs of opening and closing brackets.\n        for (int i\
    \ = 0; i < brackets.Length; i++) {\n            char opening = brackets[i];\n\
    \            if (opening == '<') openingBrackets.Add(brackets[i]);\n         \
    \   if (opening == '>') closingBrackets.Add(brackets[i]);\n        }\n\n     \
    \   if (openingBrackets.Count != closingBrackets.Count) {\n            return\
    \ false;\n        }\n\n        // check that all opening brackets have corresponding\
    \ closing brackets.\n        for (int i = 0; i < openingBrackets.Count - 1; i++)\
    \ {\n            if (openingBrackets[i + 1] != closingBrackets[i]) {\n       \
    \         return false;\n            }\n        }\n\n        return true;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad2d7467829647b2bd5178cb43500d58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad2d7467829647b2bd5178cb43500d58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        int\
    \ openingBracketCount = brackets.Count(c => c == '<');\n        int closingBracketCount\
    \ = brackets.Count(c => c == '>');\n        if (openingBracketCount != closingBracketCount)\
    \ {\n            result = false;\n        }\n        for (int i = 0; i < brackets.Length;\
    \ i++) {\n            if (brackets[i] == '<') {\n                result &= !CheckIfCloseBracketCloses(i,\
    \ brackets);\n            }\n            if (brackets[i] == '>') {\n         \
    \       result &= CheckIfCloseBracketCloses(i + 1, brackets);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplr73tvzy.cs(28,28): error CS0103: The name ''CheckIfCloseBracketCloses''
    does not exist in the current context

    /tmp/tmplr73tvzy.cs(31,27): error CS0103: The name ''CheckIfCloseBracketCloses''
    does not exist in the current context

    '
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool ret = true;\n        if (brackets\
    \ == \"\") {\n            return ret;\n        }\n        // split brackets into\
    \ list\n        string[] splitBrackets = brackets.Split('>');\n        for (int\
    \ i = 0; i < splitBrackets.Length; i++) {\n            if (splitBrackets[i].Length\
    \ > 0) {\n                // split the string in half and see what happens\n \
    \               // when one side of the split string is empty.\n             \
    \   string[] leftSplit = splitBrackets[i].Split('<');\n                string[]\
    \ rightSplit = splitBrackets[i].Split('>');\n                for (int j = 0; j\
    \ < leftSplit.Length; j++) {\n                    if (leftSplit[j].Length == 0)\
    \ {\n                        ret = false;\n                    }\n           \
    \     }\n                for (int j = 0; j < rightSplit.Length; j++) {\n     \
    \               if (rightSplit[j].Length == 0) {\n                        ret\
    \ = false;\n                    }\n                }\n            }\n        }\n\
    \        return ret;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a352b83862b24141a7e03e067436abd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a352b83862b24141a7e03e067436abd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Contains(\"<\") &&\
    \ brackets.Contains(\">\")) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7847cb22d632484f8cdadc439559a5a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7847cb22d632484f8cdadc439559a5a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) return false;\n\
    \        Stack<char> stack = new Stack<char>();\n        foreach (char c in brackets)\
    \ {\n            if(c == '<') {\n                if (stack.Count == 0) return\
    \ false;\n                char prev = stack.Count > 0 ? stack.Pop() : c;\n   \
    \             if (prev != '<') return false;\n                stack.Push(c);\n\
    \            }\n            else if (c == '>') {\n                if (stack.Count\
    \ == 0) return false;\n                char next = stack.Pop();\n            \
    \    if (next != '>') return false;\n                stack.Push(c);\n        \
    \    }\n            else return false;\n        }\n        return stack.Count\
    \ == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23c8fdda5e114de69acf4634ed89fe59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23c8fdda5e114de69acf4634ed89fe59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                result\
    \ &= (brackets[brackets.IndexOf('<', brackets.IndexOf(c) + 1)] == '>');\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.CorrectBracketing (System.String brackets)\
    \ [0x00032] in <c0c8db1ffb1f48538c2cc8847543cd63>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <c0c8db1ffb1f48538c2cc8847543cd63>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.CorrectBracketing (System.String brackets) [0x00032]\
    \ in <c0c8db1ffb1f48538c2cc8847543cd63>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <c0c8db1ffb1f48538c2cc8847543cd63>:0 \n"
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool ok = false;\n        foreach\
    \ (char c in brackets) {\n            switch (c) {\n                case '<':\n\
    \                    if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n\
    \                        ok = true;\n                        break;\n        \
    \            }\n                    break;\n                case '>':\n      \
    \              if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n   \
    \                     ok = true;\n                        break;\n           \
    \         }\n                    break;\n            }\n        }\n        return\
    \ ok;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4d5706726bc4bc9a31c6158555ebfed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4d5706726bc4bc9a31c6158555ebfed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Use a stack to keep track of\
    \ opening and closing brackets.\n        Stack<char> stack = new Stack<char>();\n\
    \        // Create a char array from the string.\n        char[] charArray = brackets.ToCharArray();\n\
    \        // Count how many opening brackets are on the stack.\n        int stackOpeningCount\
    \ = 0;\n        // Iterate through the array, one char at a time.\n        foreach\
    \ (char c in charArray) {\n            // If the character is a opening bracket,\
    \ add it to the stack\n            // and increment the count.\n            if\
    \ (c == '<') {\n                stack.Push(c);\n                stackOpeningCount++;\n\
    \            }\n            // If the character is a closing bracket, \n     \
    \       // decrement the count of opening brackets on the stack\n            //\
    \ and if the count reaches 0, then \n            // the stack is empty. \n   \
    \         else if (c == '>') {\n                stackOpeningCount--;\n       \
    \         if (stackOpeningCount == 0) {\n                    return true;\n  \
    \              }\n            }\n        }\n        // If the stack count is not\
    \ zero, then the stack contains \n        // more opening brackets than closing\
    \ brackets.\n        return stackOpeningCount != 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) ==\
    \ (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n   \
    \ Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <909b4a73445b4cbabcc1c96911c24a80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <909b4a73445b4cbabcc1c96911c24a80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        char[] openingBrackets = brackets.ToCharArray();\n\
    \        char[] closingBrackets = new char[openingBrackets.Length];\n        int\
    \ index = 0;\n        for (int i = 0; i < openingBrackets.Length; ++i) {\n   \
    \         if (openingBrackets[i] == '<') {\n                if (closingBrackets[index]\
    \ == '>') {\n                    closingBrackets[index] = '<';\n             \
    \       ++index;\n                } else {\n                    return false;\n\
    \                }\n            } else {\n                closingBrackets[index]\
    \ = openingBrackets[i];\n                ++index;\n            }\n        }\n\
    \        for (int i = 0; i < closingBrackets.Length; ++i) {\n            if (closingBrackets[i]\
    \ != '<') {\n                return false;\n            }\n        }\n       \
    \ return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe200fd0d92414c8d3c2b9edb3b8340>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe200fd0d92414c8d3c2b9edb3b8340>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Regex regex = new Regex(@\"\\\
    ((?<opening>[^()]+)\\)(?<closing>[^()]+\\))\");\n        Match match = regex.Match(brackets);\n\
    \        if (match.Success && match.Groups[\"opening\"].Captures.Count == match.Groups[\"\
    closing\"].Captures.Count) {\n            Debug.Assert(match.Groups[\"opening\"\
    ].Captures.Count == match.Groups[\"closing\"].Captures.Count);\n            return\
    \ match.Groups[\"opening\"].Captures.All(x => match.Groups[\"closing\"].Captures.Contains(x));\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyfi_5xdj.cs(20,9): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpyfi_5xdj.cs(20,27): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpyfi_5xdj.cs(21,9): error CS0246: The type or namespace name ''Match''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string[] elements = brackets.Split(new\
    \ char[] { '>', '>', '<', '<', '>' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (string element in elements) {\n            if (element.Length\
    \ > 0) {\n                int count = 0;\n                bool isOpen = false;\n\
    \                foreach (char c in element) {\n                    if (c == '<')\
    \ isOpen = true;\n                    if (c == '>') isOpen = false;\n        \
    \            if (isOpen && !(c == '<' || c == '>')) count++;\n               \
    \ }\n                if (count != elements.length) return false;\n           \
    \ }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6yhios4z.cs(30,39): error CS1061: ''string[]'' does not contain a definition
    for ''length'' and no accessible extension method ''length'' accepting a first
    argument of type ''string[]'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var index = 0;\n        while\
    \ (brackets.Length > index) {\n            var open = brackets.Substring(index,\
    \ 1);\n            var close = brackets.Substring(index + 1, 1);\n           \
    \ if (open != close)\n                return false;\n            index += 2;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49f9985269564fe59860309cea641683>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49f9985269564fe59860309cea641683>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int i = 0;\n        bool result\
    \ = true;\n        while (brackets.IndexOf(\"<\", i) > -1 && brackets.IndexOf(\"\
    >\", i) > -1) {\n            i++;\n        }\n        // if the brackets string\
    \ is correctly opening and closing brackets, return true.\n        if (brackets.IndexOf(\"\
    <\", i) == brackets.IndexOf(\">\", i)) {\n            result = true;\n       \
    \ }\n        else {\n            result = false;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e376095fe1047ad93168aa6f9f75d8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e376095fe1047ad93168aa6f9f75d8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        bool ret = false;\n        for\
    \ (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i] == '<')\n\
    \                ret = !ret;\n        }\n        return ret;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c231fa00883540b6b1861042fa1f28fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c231fa00883540b6b1861042fa1f28fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = new List<char>();\n\
    \        var closingBrackets = new List<char>();\n\n        // Split brackets\
    \ on \"<<\" into opening brackets and closing brackets.\n        var openingBracketSplit\
    \ = brackets.Split(\"<<\");\n        for (int i = 0; i < openingBracketSplit.Length;\
    \ i++) {\n            openingBrackets.Add(openingBracketSplit[i]);\n        }\n\
    \        for (int i = 0; i < openingBrackets.Count; i++) {\n            // If\
    \ the opening bracket is the last in the opening bracket split.\n            if\
    \ (i == openingBrackets.Count - 1) {\n                for (int j = 0; j < openingBrackets.Count;\
    \ j++) {\n                    // If the closing bracket is the last in the closing\
    \ bracket split.\n                    if (j == openingBrackets.Count - 1) {\n\
    \                        // If the closing bracket matches the opening bracket.\n\
    \                        if (openingBrackets[j] == closingBrackets[j]) {\n   \
    \                         continue;\n                        } else {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    // If the closing bracket is not the last in the\
    \ closing bracket split.\n                    else if (j == openingBrackets.Count\
    \ - 2) {\n                        // If the opening bracket matches the closing\
    \ bracket.\n                        if (openingBrackets[j] == closingBrackets[j\
    \ + 1]) {\n                            continue;\n                        } else\
    \ {\n                            return false;\n                        }\n  \
    \                  }\n                    // If the closing bracket is not the\
    \ last in the closing bracket split.\n                    else if (j == openingBrackets.Count\
    \ - 3) {\n                        // If the closing bracket matches the opening\
    \ bracket.\n                        if (openingBrackets[j] == closingBrackets[j\
    \ + 2]) {\n                            continue;\n                        } else\
    \ {\n                            return false;\n                        }\n  \
    \                  }\n                    // If the closing bracket is not the\
    \ last in the closing bracket split.\n                    else if (j == openingBrackets.Count\
    \ - 4) {\n                        // If the closing bracket matches the opening\
    \ bracket.\n                        if (openingBrackets[j] == closingBrackets[j\
    \ + 3]) {\n                            continue;\n                        } else\
    \ {\n                            return false;\n                        }\n  \
    \                  }\n                }\n            }\n            // If the\
    \ opening bracket is not the last in the opening bracket split.\n            else\
    \ if (i == openingBrackets.Count - 1) {\n                for (int j = 0; j < openingBrackets.Count;\
    \ j++) {\n                    // If the closing bracket is the last in the closing\
    \ bracket split.\n                    if (j == openingBrackets.Count - 1) {\n\
    \                        // If the closing bracket matches the opening bracket.\n\
    \                        if (openingBrackets[j] == closingBrackets[j]) {\n   \
    \                         continue;\n                        } else {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    // If the closing bracket is not the last in the\
    \ closing bracket split.\n                    else if (j == openingBrackets.Count\
    \ - 2) {\n                        // If the opening bracket matches the closing\
    \ bracket.\n                        if (\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptk7bkm7c.cs(85,29): error CS1525: Invalid expression term ''}''

    /tmp/tmptk7bkm7c.cs(85,29): error CS1026: ) expected

    /tmp/tmptk7bkm7c.cs(85,29): error CS1002: ; expected

    /tmp/tmptk7bkm7c.cs(87,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmptk7bkm7c.cs(102,2): error CS1513: } expected

    '
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // Initialize a bool variable\
    \ for the check.\n        bool check = false;\n\n        // Initialize a list\
    \ to contain the number of opening brackets.\n        int openingBracketCount\
    \ = 0;\n\n        // Initialize the counter for each opening bracket.\n      \
    \  foreach (char c in brackets) {\n            if (c == '>') {\n             \
    \   openingBracketCount++;\n            }\n        }\n\n        // If the number\
    \ of opening brackets is greater than the number of\n        // closing brackets,\
    \ then your bracket pairing isn't correct.\n        check = (openingBracketCount\
    \ <= brackets.Count() - 1);\n\n        // Return whether or not the brackets are\
    \ correct.\n        return check;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d09d94b54c1a4dcc8fa5636516b57515>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d09d94b54c1a4dcc8fa5636516b57515>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // remove any leading or trailing\
    \ \"<\" and \">\"\n        string cleanBrackets = brackets.Trim(\"<>\");\n   \
    \     // replace any \"<\" with \"(\"\n        string cleanBracketsReplaced =\
    \ cleanBrackets.Replace(\"<\", \")(\");\n        // replace any \">\" with \"\
    (\"\n        string cleanBracketsReplaced2 = cleanBracketsReplaced.Replace(\"\
    >\", \"(\");\n        // remove any trailing \")\"\n        string cleanBracketsReplaced3\
    \ = cleanBracketsReplaced2.Trim(')');\n        // split by \")(\"\n        List<string>\
    \ brackets = cleanBracketsReplaced3.Split(')(');\n        int counter = 0;\n \
    \       // for every bracket, increment counter\n        foreach (string bracket\
    \ in brackets) {\n            counter++;\n        }\n        // return counter\
    \ matches the number of open brackets\n        return counter == brackets.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwqh0chaw.cs(29,62): error CS1012: Too many characters in character literal

    '
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> openingBrackets =\
    \ new Stack<char>();\n        for (int i = 0; i < brackets.Length; i++) {\n  \
    \          // If there is an opening bracket at the current position,\n      \
    \      // push its character onto the stack\n            if (brackets[i] == '<')\
    \ {\n                openingBrackets.Push(brackets[i]);\n            }\n     \
    \       // Otherwise check if the next position is a closing bracket\n       \
    \     // If so, then remove one from the stack and return true\n            else\
    \ if (brackets[i] == '>') {\n                char toRemove = openingBrackets.Pop();\n\
    \                // If the stack still contains characters, then\n           \
    \     // return false because there were unclosed brackets.\n                if\
    \ (openingBrackets.Count > 0) {\n                    return false;\n         \
    \       }\n                // If there are no more characters in the stack,\n\
    \                // then return true because all brackets are closed.\n      \
    \          return true;\n            }\n        }\n        // If there are no\
    \ characters in the stack, then there\n        // were no opening brackets, so\
    \ return false because there\n        // were unclosed brackets.\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6af69bdeaeff4a7499b15ce66e4c8189>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Stack empty.\n  at System.Collections.Generic.Stack`1[T].Pop\
    \ () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing\
    \ (System.String brackets) [0x0003d] in <6af69bdeaeff4a7499b15ce66e4c8189>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00054] in <6af69bdeaeff4a7499b15ce66e4c8189>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack\
    \ empty.\n  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x0003d] in <6af69bdeaeff4a7499b15ce66e4c8189>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00054] in <6af69bdeaeff4a7499b15ce66e4c8189>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets.Count() == 1) {\n\
    \            return (brackets[0] == '<' || brackets[0] == '>')\n        }\n  \
    \      var openingBrackets = new List<char>();\n        var closingBrackets =\
    \ new List<char>();\n\n        // Loop through the brackets. Keep track of opening\
    \ brackets\n        // and closing brackets.\n        for (var i = 1; i < brackets.Length;\
    \ i++) {\n            // Get the current character in the brackets.\n        \
    \    var current = brackets[i];\n\n            // If it's a \"<\" then push it\
    \ to the list of opening\n            // brackets.\n            if (current ==\
    \ '<') {\n                openingBrackets.Add(brackets[i]);\n            }\n \
    \           // If it's \">\" then pop off the opening bracket from\n         \
    \   // the list.\n            else if (current == '>') {\n                closingBrackets.Add(openingBrackets.Last());\n\
    \                openingBrackets.RemoveAt(openingBrackets.Count - 1);\n      \
    \      }\n        }\n        // If the opening brackets list is empty then the\
    \ brackets were\n        // not correctly balanced.\n        if (openingBrackets.Count\
    \ != 0) {\n            return false;\n        }\n        else {\n            //\
    \ If the opening brackets are properly balanced then the\n            // brackets\
    \ are all closed properly.\n            return closingBrackets.Count == 0;\n \
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9om56duj.cs(21,62): error CS1002: ; expected

    '
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        string input = string.Empty;\n\
    \        for (int i = 0; i < brackets.Length; i++) {\n            if (brackets[i]\
    \ == '<') {\n                if (i != brackets.Length - 1) {\n               \
    \     string open = brackets.Substring(0, i);\n                    string close\
    \ = brackets.Substring(i + 1, brackets.Length - i - 1);\n                    if\
    \ (CheckIfBracket(open, close)) {\n                        return true;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp46hace0h.cs(26,25): error CS0103: The name ''CheckIfBracket'' does not
    exist in the current context

    '
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var openingBrackets = brackets.Substring(1,\
    \ brackets.Length - 2);\n        var closingBrackets = brackets.Substring(0, 1);\n\
    \        if (openingBrackets.Count() != closingBrackets.Count())\n           \
    \ return false;\n        var stack = new Stack<char>(openingBrackets.ToCharArray());\n\
    \        var result = 0;\n        while (stack.Count > 0) {\n            var c\
    \ = stack.Pop();\n            if (c == '>')\n                result |= 1;\n  \
    \          if (c == '<')\n                result |= 2;\n            else\n   \
    \             result += 3;\n            if (result == 0)\n                return\
    \ false;\n        }\n        return result == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7d5fda0165de4fbd865517c5205e29bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7d5fda0165de4fbd865517c5205e29bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976940
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null) {\n    \
    \        throw new ArgumentNullException(\"brackets\");\n        }\n        int\
    \ count = 0;\n        foreach (char c in brackets) {\n            if (c == '<')\
    \ {\n                if (count > 0) {\n                    return false;\n   \
    \             }\n                count++;\n            }\n            else if\
    \ (c == '>') {\n                count--;\n            }\n        }\n        if\
    \ (count != 0) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <085671d5ed3547a08727647481b87117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <085671d5ed3547a08727647481b87117>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        int count = brackets.Count(c =>\
    \ c == '<');\n        foreach (char c in brackets) {\n            if ((c != '<')\
    \ || (c != '>')) {\n                return false;\n            }\n        }\n\
    \        if (count == brackets.Count(c => c == '>')) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19d7308185be425a901df4d054c3ba1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19d7308185be425a901df4d054c3ba1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976940
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // The inner loop is the one that\
    \ counts the opening and closing brackets\n        // for a particular character\
    \ of the string\n        foreach (char c in brackets) {\n            // The outer\
    \ loop is going to loop through the whole string and\n            // count the\
    \ opening and closing brackets for each character and\n            // also calculate\
    \ the sum of the brackets and subtract the\n            // count for the next\
    \ character in the string. Also, the\n            // sum is added to the total\
    \ sum.\n            int sum = 0;\n            for (int i = 0; i < brackets.Length;\
    \ i++) {\n                sum += 1;\n                if (c == brackets[i]) {\n\
    \                    if (sum < 1) {\n                        // Found closing\
    \ bracket without a matching opening bracket\n                        return false;\n\
    \                    }\n                    sum -= 1;\n                }\n   \
    \         }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54166b61030457781a0040d050c5e8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54166b61030457781a0040d050c5e8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976940
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var stack = new Stack<char>();\n\
    \        var chars = brackets.ToCharArray();\n\n        for (int i = 0; i < chars.Length;\
    \ i++)\n        {\n            char c = chars[i];\n\n            if (c == '<')\n\
    \            {\n                stack.Push(c);\n            }\n            else\
    \ if (c == '>')\n            {\n                if (!stack.IsEmpty)\n        \
    \        {\n                    char openingBracket = stack.Pop();\n\n       \
    \             char currentBracket = c;\n\n                    if (openingBracket\
    \ != currentBracket)\n                    {\n                        return false;\n\
    \                    }\n                }\n                else\n            \
    \    {\n                    return false;\n                }\n            }\n\
    \        }\n\n        return !stack.IsEmpty;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp23j4jzv4.cs(33,28): error CS1061: ''Stack<char>'' does not contain a definition
    for ''IsEmpty'' and no accessible extension method ''IsEmpty'' accepting a first
    argument of type ''Stack<char>'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp23j4jzv4.cs(51,23): error CS1061: ''Stack<char>'' does not contain a definition
    for ''IsEmpty'' and no accessible extension method ''IsEmpty'' accepting a first
    argument of type ''Stack<char>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        var opening = new List<string>();\n\
    \        var closing = new List<string>();\n        var bracket = brackets;\n\
    \        while (true) {\n            var bracketIndex = bracket.IndexOf(\"<\"\
    );\n            if (bracketIndex == -1) break;\n            var openingIndex =\
    \ bracket.IndexOf(\">\", bracketIndex + 1);\n            if (openingIndex == -1)\
    \ break;\n            var closingIndex = bracket.IndexOf(\"<\", openingIndex +\
    \ 1);\n            if (closingIndex == -1) break;\n            if (bracketIndex\
    \ > openingIndex) throw new Exception(\"Invalid bracket sequence: \" + bracket);\n\
    \            opening.Add(bracket.Substring(0, openingIndex));\n            closing.Add(bracket.Substring(openingIndex\
    \ + 1, closingIndex - openingIndex - 1));\n            bracket = bracket.Substring(closingIndex\
    \ + 1);\n        }\n        if (opening.Count == 0) return false;\n        var\
    \ lastOpening = opening.Last();\n        if (lastOpening.Length != closing.Count)\
    \ return false;\n        for (var i = 0; i <= lastOpening.Length; i++) {\n   \
    \         if (lastOpening[i] != closing[i]) return false;\n        }\n       \
    \ return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq11nvtz.cs(39,17): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659976939
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null)\n      \
    \      return false;\n        int n = brackets.Length;\n        for (int i = 0;\
    \ i <= n; i++) {\n            if (brackets[i] == '>')\n                for (int\
    \ j = i + 1; j <= n; j++) {\n                    if (brackets[j] == '<')\n   \
    \                     return true;\n                }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.CorrectBracketing (System.String brackets)\
    \ [0x00032] in <ba699ee572a745fea7054402fe998f64>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <ba699ee572a745fea7054402fe998f64>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.CorrectBracketing (System.String brackets) [0x00032]\
    \ in <ba699ee572a745fea7054402fe998f64>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <ba699ee572a745fea7054402fe998f64>:0 \n"
  stdout: ''
  timestamp: 1659976940
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Debug.Assert(brackets != null);\n\
    \        if (brackets.Length == 0)\n            return true;\n        string openingBracket\
    \ = brackets[0];\n        bool bracketsAreEqual = openingBracket == brackets.Substring(1,\
    \ openingBracket.Length - 1);\n        for (int index = 1; index < brackets.Length;\
    \ index++) {\n            string closingBracket = brackets.Substring(index, 1);\n\
    \            bracketsAreEqual = closingBracket == openingBracket;\n        }\n\
    \        return bracketsAreEqual;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpffmhlhul.cs(23,33): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659976939
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        Stack<char> stack = new Stack<char>();\n\
    \        char[] charArray = brackets.ToCharArray();\n        foreach (char c in\
    \ charArray) {\n            stack.Push(c);\n            if (c == '<') {\n    \
    \            if (stack.Count > 0) {\n                    char open = stack.Pop();\n\
    \                    if (open == '>') {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9ff54ddc4bc444aa120e251a7e7445e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9ff54ddc4bc444aa120e251a7e7445e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976940
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        // For each opening bracket i,\
    \ verify that\n        //  brackets[i] is equal to brackets[i-1],\n        //\
    \  brackets[i+1] is equal to brackets[i+2],\n        //  and brackets[i+3] is\
    \ equal to brackets[i].\n        string temp = brackets;\n        int len = temp.Length;\n\
    \        if (len < 4) {\n            return false;\n        }\n        string\
    \ first = temp.Substring(0, 1);\n        string last = temp.Substring(len - 1,\
    \ 1);\n        for (int i = 0; i < len; ++i) {\n            if (i != 0 && i !=\
    \ len - 2 &&\n                temp.Substring(i, 1) == temp.Substring(i + 1, 1)\
    \ &&\n                temp.Substring(i + 1, 1) == temp.Substring(i + 2, 1) &&\n\
    \                temp.Substring(i + 2, 1) == temp.Substring(i + 1, 1)) {\n   \
    \             return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
    <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
    \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) ==\
    \ (false));\n    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
    )) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <884d37011e2145a48cce53055d14d590>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index and length must refer to a location\
    \ within the string.\nParameter name: length\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x0004b] in <884d37011e2145a48cce53055d14d590>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00011] in <884d37011e2145a48cce53055d14d590>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CorrectBracketing (System.String\
    \ brackets) [0x0004b] in <884d37011e2145a48cce53055d14d590>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00011] in <884d37011e2145a48cce53055d14d590>:0 \n"
  stdout: ''
  timestamp: 1659976940
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"\
    <>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool\
    \ CorrectBracketing(string brackets) {\n        if (brackets == null || brackets.Length\
    \ == 0) {\n            return true;\n        }\n        bool result = true;\n\
    \        Stack<char> stack = new Stack<char>();\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                stack.Push(c);\n           \
    \ } else if (c == '>') {\n                char lastOpen = stack.Pop();\n     \
    \           if (lastOpen != '<') {\n                    result = false;\n    \
    \            }\n            } else if (stack.Count == 0) {\n                Debug.WriteLine(\"\
    invalid bracketing, stack is empty at:\" + c);\n                result = false;\n\
    \            } else {\n                char lastOpen = stack.Pop();\n        \
    \        char lastClose = stack.Pop();\n                if (lastOpen != c || lastClose\
    \ != c) {\n                    result = false;\n                }\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CorrectBracketing((\"<>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
    <<><>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>\"))\
    \ == (true));\n    Debug.Assert(CorrectBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    Debug.Assert(CorrectBracketing((\"<<<><>>>>\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<<<<\")) == (false));\n\
    \    Debug.Assert(CorrectBracketing((\">\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
    <<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>><<>\"\
    )) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\")) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Stack empty.\n\
    \  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00065] in <5b00b552681a4951b3598b108ae510cb>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00041] in <5b00b552681a4951b3598b108ae510cb>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Stack\
    \ empty.\n  at System.Collections.Generic.Stack`1[T].Pop () [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CorrectBracketing (System.String brackets) [0x00065] in <5b00b552681a4951b3598b108ae510cb>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00041] in <5b00b552681a4951b3598b108ae510cb>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976940
