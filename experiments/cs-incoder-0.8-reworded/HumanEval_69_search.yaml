name: HumanEval_69_search
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n    // zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n    // The frequency of an\
  \ integer is the number of times it appears in the list.\n    // If no such a value\
  \ exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,\
  \ (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>\
  \ Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,\
  \ (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new\
  \ List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n \
  \   // (-1L)\n    public static long Search(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
  \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
  \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
  \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
  \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
  \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
  \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
  \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
  \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
  \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
  \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
  \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
  \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,\
  \ (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,\
  \ (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))\
  \ == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==\
  \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
  \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
  \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
  \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
  \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
  \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
  \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n  \
  \  Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
  \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
  \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
  \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
  \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L,\
  \ (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L,\
  \ (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n\
  \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L, (long)6L,\
  \ (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L, (long)10L,\
  \ (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n\
  \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)3L,\
  \ (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L, (long)6L,\
  \ (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L, (long)7L,\
  \ (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L,\
  \ (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L,\
  \ (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L,\
  \ (long)10L, (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,\
  \ (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,\
  \ (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,\
  \ (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
completions: ["        long maxValue = 0;\n        int frequency = 0;\n\n        foreach\
    \ (var x in lst) {\n            if (x > 0) frequency++;\n            if (frequency\
    \ >= x.Value) {\n                maxValue = x;\n                break;\n     \
    \       }\n        }\n\n        return (maxValue == 0)?-1:maxValue;", "      \
    \  var lst1 = lst.ToList();\n        var r = lst1.OrderByDescending(x => x).FirstOrDefault();\n\
    \        if (r != null)\n            return r;\n        long ans = 0;\n      \
    \  foreach (var item in lst1)\n            if (item >= ans)\n                ans\
    \ = item;\n        return ans == 0 ? -1 : ans;", "        if (lst.Count == 0)\
    \ return -1;\n\n        var freqs = lst.GroupBy(n => n).Select(n => n.Count()).ToList();\n\
    \        var result = freqs.Where(n => n > 0 && freqs.Count(n => n == n) > 1).Max();\n\
    \n        return freqs.FirstOrDefault(n => n > 0 && freqs.Count(n => n == n) >\
    \ 1).Max();", "        if (lst.Count == 0) return -1;\n        long[] arr = lst.ToArray();\n\
    \        long maxVal = arr.Max();\n        long freq = arr.Count(x => x == maxVal);\n\
    \        if (arr[0] > 0 && freq > arr[0]) return maxVal;\n        if (arr[0] ==\
    \ 0 && freq == arr[0]) return maxVal;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            int val = arr[i];\n            long freq = arr.Count(x =>\
    \ x == val);\n            if (freq <= freq) continue;\n            if (val < 0)\
    \ return -1;\n            if (freq == arr[0]) return val;\n            if (val\
    \ > maxVal) return -1;\n        }\n        return maxVal;", '        return lst.Where(x
    => x > 0).Aggregate((a, b) => a > b ? a : b);', '        return Search(lst, 0L);',
  "        HashSet<long> hash = new HashSet<long>(lst);\n        long n = hash.Sort().Last();\n\
    \        long max = 0;\n        bool found = false;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (lst[i] == n) {\n                found =\
    \ true;\n                break;\n            }\n        }\n        if (found)\
    \ {\n            foreach (long val in hash)\n                max = Math.Max(max,\
    \ val);\n        }\n        if (!found)\n            return -1;\n        return\
    \ max;", "        var dict = new Dictionary<long, long>();\n        foreach (var\
    \ item in lst)\n        {\n            if (dict.ContainsKey(item))\n         \
    \   {\n                dict[item]++;\n            }\n            else\n      \
    \      {\n                dict[item] = 1;\n            }\n        }\n        foreach\
    \ (var item in dict)\n        {\n            if (item.Value > 0)\n           \
    \ {\n                return item.Key;\n            }\n        }\n        return\
    \ -1;", "        long res = -1;\n        HashSet<long> hs = new HashSet<long>();\n\
    \        foreach(long n in lst) {\n            if(hs.Contains(n)) continue;\n\
    \            hs.Add(n);\n            long count = lst.Count(n => n == n);\n  \
    \          if(count > hs.Count) {\n                res = n;\n            }\n \
    \       }\n        return res;", "        if (lst.Count == 0) {\n            return\
    \ -1;\n        }\n        HashSet<long> hset = new HashSet<long>();\n        int\
    \ cur = 0;\n        for (; cur < lst.Count; cur++) {\n            hset.Add(lst[cur]);\n\
    \        }\n\n        if (hset.Count == 1) {\n            return hset.First();\n\
    \        }\n        long curVal = lst[0];\n        long curFreq = lst[1];\n  \
    \      long bestVal = curVal;\n        long bestFreq = curFreq;\n\n        foreach\
    \ (long item in hset) {\n            if (item == curVal) {\n                curFreq++;\n\
    \            }\n            if (item > curVal && curFreq >= curVal) {\n      \
    \          bestVal = item;\n                bestFreq = curFreq;\n            }\n\
    \        }\n\n        if (bestVal > 0 && bestFreq >= bestVal) {\n            return\
    \ bestVal;\n        } else {\n            return -1;\n        }", "        var\
    \ minValue = lst[0];\n        var maxValue = lst[0];\n\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < minValue) {\n              \
    \  minValue = lst[i];\n            }\n            if (lst[i] > maxValue) {\n \
    \               maxValue = lst[i];\n            }\n        }\n        if (minValue\
    \ >= maxValue) {\n            return -1;\n        }\n\n        var newLst = new\
    \ List<long>(lst.Count);\n\n        for (int i = 0; i < lst.Count; i++) {\n  \
    \          if (lst[i] == minValue) {\n                newLst.Add((long)i);\n \
    \           }\n        }\n\n        var result = lst.Where((index, item) => newLst.Contains(item)).Max();\n\
    \n        return result;", "        if (lst.Count() != 0) {\n            long\
    \ largest = lst.Min();\n            int countOfLargest = lst.Count(x => x == largest);\n\
    \            if (countOfLargest > 0) \n                largest = lst.Max();\n\
    \            int countOfLargest2 = lst.Count(x => x > largest);\n            if\
    \ (countOfLargest > 0 && countOfLargest2 > countOfLargest) \n                return\
    \ -1;\n            else\n                return largest;\n        }\n        return\
    \ -1;", "        int n = lst.Count;\n        if (n < 2) return -1;\n        int\
    \ max = 0;\n        int i = 0;\n        while (max < n && lst.Count() > 0) {\n\
    \            int j = i;\n            if (max < lst[j]) {\n                max\
    \ = lst[j];\n                i = j;\n            }\n            int k = ++i;\n\
    \            if (k == n) break;\n            if (lst[k] < max) {\n           \
    \     max = lst[k];\n                i = k;\n            }\n        }\n      \
    \  return max == 0 ? -1 : max;", "        long ans = -1;\n        if (lst.Count\
    \ <= 1) return ans;\n        Dictionary<long, long> freq = new Dictionary<long,\
    \ long>();\n        foreach (long v in lst) {\n            freq[v] = freq[v] +\
    \ (long)1;\n            if (freq[v] >= v) ans = v;\n        }\n        return\
    \ ans;", "        long maxVal = lst.Max();\n        long maxCount = 0;\n     \
    \   foreach (long i in lst) {\n            if (i > maxVal) {\n               \
    \ break;\n            }\n            if (maxCount < i) maxCount = i;\n       \
    \ }\n        return maxVal == -1 ? 0 : maxCount;", "        long retVal = -1L;\n\
    \        List<long> freq = new List<long>();\n        foreach (long num in lst)\
    \ {\n            freq.Add(freq.Where(num => num == num).Count() + 1);\n      \
    \  }\n        if (freq.Count > 0) {\n            long max = freq.Max();\n    \
    \        foreach (long num in freq) {\n                if (num == max) {\n   \
    \                 retVal = num;\n                    break;\n                }\n\
    \            }\n        }\n        return retVal;", "        bool found = false;\n\
    \        long maxFreq = -1;\n        long maxValue = -1;\n\n        foreach (long\
    \ num in lst) {\n            if (num > 0) {\n                long freq = lst.Count(i\
    \ => i == num);\n                if (freq > maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxValue = num;\n                }\n          \
    \  }\n        }\n        if (maxValue != -1)\n            return maxValue;\n \
    \       else\n            return -1;", "        long maxVal = -1;\n        long\
    \ maxFreq = 0;\n        foreach (long i in lst) {\n            long f = lst.Where(i\
    \ => i > 0).Count();\n            if (f > maxFreq) {\n                maxFreq\
    \ = f;\n                maxVal = i;\n            }\n        }\n        return\
    \ maxVal;", "        long res = -1L;\n        var dict = new Dictionary<long,\
    \ int>();\n\n        // Sort the array so it is easier to find an element\n  \
    \      var sortedArr = lst.OrderByDescending(x => x);\n\n        // For each element\
    \ check if it is larger than the current maximum\n        for (int i = 0; i <\
    \ sortedArr.Count; i++) {\n            if (sortedArr[i] > res) {\n           \
    \     res = sortedArr[i];\n            }\n\n            // Check if current element\
    \ is bigger than the current maximum\n            if (sortedArr[i] > res && (!dict.ContainsKey(sortedArr[i])))\
    \ {\n                dict[sortedArr[i]] = (long)1;\n            }\n          \
    \  else {\n                // Add the current frequency to the current number\n\
    \                dict[sortedArr[i]] = (long)dict[sortedArr[i]] + 1;\n        \
    \    }\n        }\n\n        // Return the maximum of the dictionary\n       \
    \ return Math.Max(dict.Values.First(), res);", "        int maxIndex = 0;\n  \
    \      long maxVal = lst[0];\n        int maxFreq = lst[0];\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i] == lst[maxIndex]) {\n \
    \               maxFreq = maxFreq + 1;\n            } else {\n               \
    \ if (lst[i] > maxVal) {\n                    maxIndex = i;\n                \
    \    maxVal = lst[i];\n                    maxFreq = lst[i];\n               \
    \ }\n            }\n        }\n        return maxIndex >= 0 ? maxIndex : -1;",
  "        // O(n) where n is the number of elements in the list.\n        int maxCount\
    \ = lst.Count;\n        var res = lst.Aggregate(new { max = int.MinValue, result\
    \ = int.MinValue }, (acc, curr) => {\n            long curr = curr;\n        \
    \    return curr <= acc.max ? new { max = curr, result = acc } : new { max = acc.max,\
    \ result = new { max = acc.max, result = acc } };\n        }).result.Max(n =>\
    \ n.max);\n        return maxCount > lst.Count ? res : -1;", "        long retval\
    \ = -1;\n        if (lst.Count != 0)\n            foreach (long n in lst) {\n\
    \                retval = n;\n                if (n > 0)\n                   \
    \ break;\n            }\n        return retval;", "        if (lst.Count == 0)\
    \ return -1L;\n        var min = lst.Min();\n        var max = lst.Max();\n  \
    \      var sum = lst.Sum();\n        if (min <= 0L) return -1L;\n        if (sum\
    \ == 0L) return 0L;\n        var freq = lst.GroupBy(x => x).Count();\n       \
    \ var freqSum = freq.Where(x => x > 0).Sum();\n        if (freqSum > 0L && freqSum\
    \ == freq.Sum()) return min;\n        return -1;", "        var n = lst.Count;\n\
    \        var largest = -1;\n        var frequency = 0;\n        var sum = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            sum += lst[i];\n         \
    \   if (lst[i] != 0) frequency++;\n        }\n        if (sum > 0) {\n       \
    \     if (frequency == n) return sum;\n            frequency /= n;\n         \
    \   largest = SumOfFactors(sum, frequency);\n        }\n        return largest;",
  "        long maxGteZero = -1;\n        long maxFreq = 0;\n        foreach (long\
    \ item in lst) {\n            if (item > 0)\n            {\n                long\
    \ freq = CountOccurrences(lst, item);\n                if (freq >= maxFreq &&\
    \ freq >= item ) {\n                    maxFreq = freq;\n                    maxGteZero\
    \ = item;\n                }\n            }\n        }\n        return maxGteZero;",
  "        Debug.Assert(lst.Count > 0);\n        if (lst.Count == 1)\n           \
    \ return lst[0];\n        int minFreq = lst.Min();\n        int maxFreq = lst.Max();\n\
    \        long maxVal = minFreq;\n        long maxFreqIndex = lst.ToList().FindIndex((i)\
    \ => i == maxFreq);\n        List<long> freqList = lst.ToList().Skip(maxFreqIndex).TakeWhile((i)\
    \ => i > minFreq).ToList();\n        if (maxFreqIndex == 0)\n            return\
    \ -1;\n        long maxFreqVal = freqList[maxFreqIndex - 1];\n        long maxValIndex\
    \ = lst.ToList().FindIndex((i) => i == maxVal);\n        if ((maxFreqVal < maxVal\
    \ || maxFreqVal == maxVal) && maxValIndex == lst.Count - 1)\n            return\
    \ -1;\n        long maxValVal = freqList[maxValIndex - 1];\n        return (maxValVal\
    \ > maxFreqVal || maxValVal == maxFreqVal) ? maxVal : -1;", "        long maxValue\
    \ = -1;\n        long maxFreq = -1;\n        foreach (var item in lst) {\n   \
    \         var freq = lst.Count(x => x == item);\n            if (freq > maxFreq)\
    \ {\n                maxFreq = freq;\n                maxValue = item;\n     \
    \       }\n        }\n        return maxValue;", "        long max = 0;\n    \
    \    long sum = 0;\n        foreach (long value in lst) {\n            sum = sum\
    \ + value;\n            if (sum > 0) {\n                if (sum > max) {\n   \
    \                 max = sum;\n                }\n            }\n        }\n  \
    \      if (sum > 0) {\n            if (sum > max) {\n                max = sum;\n\
    \            }\n        }\n        return max;", "        // O(N) time and space\n\
    \        long maxfreq = lst[0];\n        long maxfreqval = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i > maxfreqval) maxfreqval = i;\n       \
    \     if (i > maxfreq) maxfreq = i;\n        }\n        if (maxfreq < 0) return\
    \ -1;\n        if (maxfreq >= maxfreqval) return maxfreqval;\n        // O(N)\
    \ time and space\n        List<long> used = new List<long>();\n        for (long\
    \ i = 0; i < lst.Count; i++) {\n            if (lst[i] > maxfreqval) continue;\n\
    \            if (lst[i] > maxfreq) {\n                maxfreq = lst[i];\n    \
    \            maxfreqval = lst[i];\n                used.Clear();\n           \
    \ }\n            if (lst[i] == maxfreqval) used.Add(lst[i]);\n        }\n    \
    \    return used.Count == 0 ? -1 : used.Max();", "        var maxFreq = lst\n\
    \            .Where(x => x > 0)\n            .OrderByDescending(x => x)\n    \
    \        .FirstOrDefault();\n\n        if (maxFreq != null && maxFreq >= lst[0])\n\
    \            return maxFreq;\n\n        return -1;", "        long result = -1L;\n\
    \        long min = -1L;\n        long max = -1L;\n        long temp = 0L;\n \
    \       for (long i : lst) {\n            min = i;\n            for (long j =\
    \ i + 1; j < lst.Count; j++) {\n                if (lst[j] == min) {\n       \
    \             temp = temp + 1;\n                }\n                else if (lst[j]\
    \ > min) {\n                    temp = temp;\n                }\n            }\n\
    \            max = Math.Max(max, temp);\n            temp = 0L;\n        }\n \
    \       return max;", "        var frequencies = lst.GroupBy(x => x).Where(g =>\
    \ g.Count() > 1).Select(g => new {\n            g.Key,\n            count = g.Count()\n\
    \        }).ToList();\n        var maxFrequency = frequencies.Select(g => g.count).Max();\n\
    \        var max = frequencies.First(g => g.count >= maxFrequency).Key;\n    \
    \    var freq = frequencies.First(g => g.count == maxFrequency).Key;\n       \
    \ Console.WriteLine(\"max: \" + max);\n        Console.WriteLine(\"freq: \" +\
    \ freq);\n        return max;", "        long ans = -1L;\n        if (lst?.Any()\
    \ == false) return -1;\n        Dictionary<long, int> dict = new Dictionary<long,\
    \ int>(lst.Count());\n        foreach (var i in lst) {\n            if (dict.ContainsKey(i))\
    \ {\n                dict[i] += 1;\n            }\n            else {\n      \
    \          dict.Add(i, 1);\n            }\n        }\n        foreach (var i in\
    \ dict) {\n            if (i.Value >= i.Key) continue;\n            ans = i.Key;\n\
    \            return ans;\n        }\n        return ans;", "        long ans =\
    \ -1L;\n        foreach(long n in lst) {\n            if(n == 0) {\n         \
    \       continue;\n            }\n            long tempAns = FindGreaterThanZero(n);\n\
    \            if(tempAns != -1) {\n                ans = Math.Max(ans, tempAns);\n\
    \            }\n        }\n        return ans;", "        if (lst.Count == 0)\
    \ return -1;\n        var lstHash = lst.ToLookup(x => x);\n        double maxSum\
    \ = 0;\n        int maxCount = 0;\n        foreach (var x in lstHash.Keys)\n \
    \       {\n            if (lstHash[x].Count() > maxCount)\n            {\n   \
    \             maxCount = lstHash[x].Count();\n                maxSum = x;\n  \
    \          }\n            else if (lstHash[x].Count() == maxCount)\n         \
    \   {\n                maxSum = (maxSum * maxCount) + x;\n            }\n    \
    \    }\n        return (long)Math.Ceiling(maxSum);", "        if (lst.Count ==\
    \ 0) {\n            return -1;\n        }\n        long maxValue = 1;\n      \
    \  long maxFreq = 1;\n        for (long i : lst) {\n            if (i > maxValue)\
    \ {\n                maxValue = i;\n                maxFreq = i;\n           \
    \ }\n            long freq = lst.Count(i => i == i);\n            if (freq > maxFreq)\
    \ {\n                maxValue = i;\n                maxFreq = freq;\n        \
    \    }\n        }\n        return maxValue;", "        if (lst.Count == 0) return\
    \ -1;\n        var max = 0;\n        foreach (var v in lst) {\n            if\
    \ (v > max) max = v;\n            var count = lst.Count(i => i == v);\n      \
    \      if (count >= v) break;\n        }\n        return max;", "        int cnt\
    \ = lst.Count;\n        if (lst.Count == 0)\n            return -1;\n        if\
    \ (lst.Count > 1) {\n            long[] bucket = new long[Int32.MaxValue];\n \
    \           long[] count = new long[Int32.MaxValue];\n            for (int i =\
    \ 0; i < lst.Count; i++) {\n                bucket[lst.ElementAt(i)] += 1;\n \
    \               count[lst.ElementAt(i)] += 1;\n            }\n            long\
    \ maxValue = Int32.MinValue;\n            long maxCount = 0;\n            int\
    \ idx = -1;\n            int c = lst.Count;\n            while (c > 0) {\n   \
    \             cnt--;\n                long curValue = lst.ElementAt(c) - 1;\n\
    \                int max = (int)Math.Floor((c - 0.5) / 2.0d);\n              \
    \  maxCount = (int)Math.Floor((c - 0.5) / 2d);\n                if (maxCount >\
    \ maxCount) {\n                    maxCount++;\n                }\n          \
    \      for (int i = 1; i <= max; i++) {\n                    count[i] += count[i\
    \ - 1];\n                    if (count[i] > maxCount) {\n                    \
    \    int min = (int)Math.Floor((c - 1 - 0.5) / 2.0d);\n                      \
    \  if (count[min] >= maxCount) {\n                            maxCount++;\n  \
    \                      }\n                        if (count[i] > maxCount) {\n\
    \                            maxCount++;\n                            idx = i;\n\
    \                            break;\n                        }\n             \
    \       }\n                }\n                for (int i = max; i >= 0; i--) {\n\
    \                    if (count[i] > maxCount) {\n                        maxCount++;\n\
    \                    }\n                }\n                maxValue = curValue\
    \ + maxValue;\n                c = cnt;\n            }\n            return maxValue;\n\
    \        }\n        return lst[0];", "        var freqs = lst.GroupBy(x=>x).ToList();\n\
    \        long max=0;\n        foreach (var freq in freqs) {\n            if (freq.Count()\
    \ > 0) {\n                long val = freq.Max();\n                if (val > 0)\
    \ {\n                    if (val >= freq.Min()) {\n                        max\
    \ = val;\n                    }\n                }\n            }\n        }\n\
    \        return max == 0 ? -1 : max;", "        int[] counter = new int[lst.Count];\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            counter[lst[i]]++;\n\
    \        }\n        int maxVal = -1;\n        int maxIndex = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (counter[i] > maxVal) {\n     \
    \           maxVal = counter[i];\n                maxIndex = i;\n            }\n\
    \        }\n        return maxIndex;", "        long ans = -1;\n        Dictionary<long,\
    \ long> freq = new Dictionary<long, long>();\n        lst.ForEach(i => {\n   \
    \         if (freq.ContainsKey(i)) freq[i] += 1;\n            else freq.Add(i,\
    \ 1);\n        });\n        foreach (KeyValuePair<long, long> pair in freq) {\n\
    \            if (pair.Value >= pair.Key) continue;\n            if (ans == -1\
    \ || pair.Value > ans) ans = pair.Value;\n        }\n        return ans;", " \
    \       long x = 0;\n        long max = -1;\n        var max = Enumerable.Range(0,\
    \ lst.Count - 1).\n            Where(i => lst[i] > 0).\n            GroupBy(i\
    \ => lst[i]).\n            OrderByDescending(g => g.Count()).\n            FirstOrDefault();\n\
    \        if (max != null) {\n            max = max.Key;\n            x = max;\n\
    \        }\n        foreach (var item in Enumerable.Range(0, lst.Count - 1).\n\
    \            Where(i => lst[i] > 0).\n            GroupBy(i => lst[i]).\n    \
    \        Where(g => g.Count() > max)) {\n            max = item.Key;\n       \
    \     x = max;\n        }\n        return x > 0 ? x : -1;", "        // Get frequencies\
    \ of each item\n        var frequencies = new Dictionary<long, long>(lst.Count);\n\
    \        lst.ForEach(item => frequencies[item] = (long) frequencies[item] + 1);\n\
    \        if (frequencies.Count == 0) {\n            return -1;\n        }\n\n\
    \        // Find the largest number with at least 1 appearance\n        var max\
    \ = frequencies.First().Key;\n        var maxCount = 0;\n        var minCount\
    \ = frequencies[0].Value;\n        foreach (var item in frequencies) {\n     \
    \       var currCount = item.Value;\n            if (currCount > maxCount) {\n\
    \                maxCount = currCount;\n                max = item.Key;\n    \
    \        } else if (currCount < minCount) {\n                minCount = currCount;\n\
    \            }\n        }\n        return max;", "        // Find the first element\n\
    \        long min = lst.Min();\n        // Find the first element larger than\
    \ min\n        long max = lst.Max();\n        long ans = min;\n        // Find\
    \ how many times min appears\n        foreach (long el in lst) {\n           \
    \ if (el > min) {\n                ans = Math.Max(ans, el);\n            }\n \
    \       }\n        // Find the first element larger than min\n        long count\
    \ = lst.Count(x => x > min);\n        if (count > 0) {\n            ans = Math.Max(ans,\
    \ min + (int)Math.Ceiling(count / (int)lst.Count));\n        }\n        return\
    \ ans;", "        long maxVal = -1;\n        long maxCount = 0;\n        List<long>\
    \ unique = new List<long>();\n        foreach (long value in lst) {\n        \
    \    if (!unique.Contains(value)) {\n                unique.Add(value);\n    \
    \            if (unique.Count() > maxCount) {\n                    maxCount =\
    \ unique.Count();\n                    maxVal = value;\n                }\n  \
    \          }\n        }\n        return maxVal;", "        if (lst.Count == 0)\
    \ return -1L;\n        int i = 0;\n        foreach (var v in lst) {\n        \
    \    if (v != i) return -1L;\n            i++;\n        }\n        foreach (var\
    \ v in lst) {\n            if (v > 0) return v;\n            i += v;\n       \
    \ }\n        return -1L;", "        long res = -1;\n        long cnt = 0;\n  \
    \      long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ max = i;\n            cnt += 1;\n        }\n        if (cnt > 0) {\n       \
    \     for (long i = 0; i < lst.length; i++) {\n                if (lst[i] > max)\
    \ {\n                    max = lst[i];\n                    res = i;\n       \
    \         }\n            }\n        }\n        return res;", "        long greatestFreq\
    \ = -1L;\n        long greatest = -1L;\n        Dictionary<long, long> freq =\
    \ new Dictionary<long, long>();\n        foreach (long i in lst)\n           \
    \ freq[i] = freq[i] + 1;\n        foreach (KeyValuePair<long, long> pair in freq)\n\
    \            if (pair.Value >= greatestFreq)\n            {\n                greatestFreq\
    \ = pair.Value;\n                greatest = pair.Key;\n            }\n       \
    \ return greatest;", "        long max = -1;\n        long maxFreq = 0;\n\n  \
    \      foreach (long item in lst) {\n            int count = lst.Count(i => i\
    \ == item);\n            if (count > maxFreq) {\n                max = item;\n\
    \                maxFreq = count;\n            }\n        }\n\n        if (max\
    \ == -1) return -1;\n\n        HashSet<long> hs = new HashSet<long>();\n     \
    \   hs.Add(max);\n        foreach (long item in lst) {\n            if (hs.Contains(item))\
    \ {\n                long freq = hs.Where(i => i == item).Count();\n         \
    \       if (freq > maxFreq) maxFreq = freq;\n            }\n            hs.Add(item);\n\
    \        }\n\n        return max;", "        var result = -1;\n        var frequency\
    \ = 0;\n        foreach (var item in lst) {\n            if (item > 0) {\n   \
    \             frequency += 1;\n                if (frequency >= item) {\n    \
    \                result = item;\n                    frequency = 1;\n        \
    \        }\n            }\n        }\n        return result;", "        if (lst.Count\
    \ == 0) return -1;\n        var minValue = lst[0];\n        foreach (var v in\
    \ lst)\n            if (v < minValue)\n                minValue = v;\n       \
    \ var maxValue = minValue;\n        var freq = 0;\n        foreach (var v in lst)\
    \ {\n            if (v > minValue) \n                freq++;\n        }\n    \
    \    if (freq >= minValue)\n            return minValue;\n        return -1;",
  "        long val = lst[0];\n        int freq = lst.Count(x => x == val);\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > val) break;\n\
    \            freq--;\n        }\n        if (freq > lst.Count(x => x > val)) return\
    \ -1;\n        return val;", "        long highestFreq = 0;\n        long highestIndex\
    \ = -1;\n        long currFreq = -1;\n        foreach (long i in lst) {\n    \
    \        currFreq = i;\n            if (currFreq >= highestFreq) {\n         \
    \       highestFreq = currFreq;\n                highestIndex = i;\n         \
    \   }\n        }\n        if (highestFreq == 0) return -1;\n        if (highestFreq\
    \ >= currFreq) highestIndex = highestIndex;\n        return highestIndex;", " \
    \       if (lst.Count > 0)\n            return lst.Aggregate(new Problem(), (l,\
    \ r) => Math.Max(l, r), (a, b) => Math.Max(a, b.Value));\n        return -1;",
  "        if (lst.Count < 1)\n            return -1;\n        long maxFreq = lst[0],\
    \ freq = 1;\n        for (int i = 1; i < lst.Count; i++) {\n            freq *=\
    \ lst[i];\n            if (freq > maxFreq) {\n                maxFreq = freq;\n\
    \            }\n        }\n        return maxFreq;", "        if (lst.Count ==\
    \ 0)\n            return -1;\n        // Count all the number that appear more\
    \ than once\n        int[] occur = lst.GroupBy(x => x).Where(x => x.Count() >\
    \ 1).Select(x => x.Key).ToArray();\n        long maxValue = -1;\n        foreach\
    \ (long n in lst) {\n            long val = lst.Where(x => x != n).Count();\n\
    \            if (val > occur.Length) {\n                maxValue = n;\n      \
    \          break;\n            }\n            if (val == occur.Length && val >\
    \ occur.Max()) {\n                maxValue = n;\n                break;\n    \
    \        }\n        }\n        return maxValue;", "        var result = -1;\n\
    \        foreach (var item in lst) {\n            var count = new int[item.ToString(CultureInfo.InvariantCulture).ToCharArray().Length];\n\
    \            foreach (var item in lst) {\n                ++count[item.ToString(CultureInfo.InvariantCulture).ToCharArray().Length];\n\
    \            }\n            for (int i = 0; i < count.Length; ++i) {\n       \
    \         if (count[i] >= item) {\n                    result = Math.Max(result,\
    \ item);\n                    break;\n                }\n            }\n     \
    \   }\n        return result;", "        if (lst.Count == 0) {\n            return\
    \ -1;\n        }\n        var ints = new Dictionary<long, int>();\n        foreach\
    \ (var v in lst) {\n            ints[v]++;\n        }\n        long retValue =\
    \ -1;\n        foreach (var v in ints) {\n            if (v.Value > retValue)\
    \ {\n                retValue = v.Key;\n            }\n        }\n        return\
    \ retValue;", "        var minIndex = lst.FindIndex(item => item <= 0);\n    \
    \    if (minIndex == -1 || lst.Count == 0) return -1;\n        var minValue =\
    \ lst[minIndex];\n        var minCount = 0;\n        foreach (var item in lst)\
    \ {\n            if (item == minValue && ++minCount > lst.Count - minIndex) return\
    \ -1;\n        }\n        return minValue;", "        long frequency = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < frequency)\
    \ {\n                frequency = lst[i];\n            } else {\n             \
    \   frequency--;\n            }\n        }\n        if (frequency >= lst[0]) {\n\
    \            return lst[0];\n        } else {\n            return -1;\n      \
    \  }", "        var maxVal = lst\n            .OrderByDescending(c=>c)\n     \
    \       .FirstOrDefault();\n\n        if (maxVal == null) return -1L;\n\n    \
    \    var maxCount = lst.Count(c=>c==maxVal);\n        if (maxCount < lst.Count())\
    \ maxCount = lst.Count();\n\n        if (maxCount == lst.Count()) return maxVal;\n\
    \n        if (maxCount > lst.Count()) return -1L;\n\n        return maxVal;",
  "        if (lst.Count == 0) {\n            return -1;\n        }\n        long\
    \ curr = lst[0];\n        int count = 0;\n        foreach (long v in lst) {\n\
    \            if (v < curr) {\n                count++;\n            }\n      \
    \      curr = v;\n        }\n        if (count > lst.Count)\n            return\
    \ -1;\n        return curr;", "        if (lst.Count == 0) return -1;\n\n    \
    \    Dictionary<long, int> lstCount = new Dictionary<long, int>();\n        foreach(var\
    \ item in lst) {\n            lstCount.Add(item, lstCount.ContainsKey(item) ?\
    \ lstCount[item]++ : 1);\n        }\n\n        long maxValue = long.MinValue;\n\
    \        long maxValue = lstCount.Values.Min();\n        var maxValue = lstCount.Values.Max();\n\
    \        foreach (var item in lstCount.Values) {\n            if (item >= maxValue)\
    \ {\n                return -1;\n            }\n        }\n        return maxValue;",
  "        var r = new Dictionary<long, int>();\n        lst.ForEach(x => { if (r.ContainsKey(x))\
    \ r[x]++; else r.Add(x, 1); });\n        foreach (var x in r.Where(x => x.Value\
    \ >= x.Key).OrderByDescending(x => x.Value).ThenBy(x => x.Key))\n            if\
    \ (r.ContainsKey(x.Value) && r.Remove(x.Value) == 0) return x.Key;\n        return\
    \ -1;", "        long maxVal = -1;\n        int maxCount = 0;\n        foreach\
    \ (long n in lst) {\n            int cnt = lst.Count(x => x == n);\n         \
    \   if (cnt > maxCount) {\n                maxCount = cnt;\n                maxVal\
    \ = n;\n            }\n        }\n        return maxVal;", "        if (lst.Count\
    \ == 0) return -1;\n        var count = lst.GroupBy(x => x).ToDictionary(x =>\
    \ x.Key, y => y.Count());\n        if (count.Keys.Count == 0) return -1;\n   \
    \     var max = count.Values.Max();\n        return count.Where(x => x > max).Select(x\
    \ => x.Key).FirstOrDefault();", "        long result = 0;\n        foreach (long\
    \ number in lst) {\n            if (number > 0) {\n                result = Math.Max(result,\
    \ number);\n                result += (number - 1) * 1000;\n            }\n  \
    \      }\n        return result;", "        if (lst.Count <= 0) return -1L;\n\
    \        var max = 0L;\n        int index = lst.FindIndex(x => x > 0);\n     \
    \   List<long> temp = lst\n            .Where((x, index) => x > 0 && index > 0)\n\
    \            .GroupBy(x => x)\n            .Where(g => g.Count() > 1)\n      \
    \      .Select(g => g.Key)\n            .OrderBy(x => x)\n            .ToList();\n\
    \        if (temp.Count > 0 && temp[0] > 0) max = temp[0];\n        for (int i\
    \ = 0; i < lst.Count; i++) {\n            if (lst[i] > 0 && lst[i] <= max) {\n\
    \                int cnt = 0;\n                if (index < i) cnt = index - i;\n\
    \                else if (index == i) cnt = 0;\n                max = lst[i] +\
    \ cnt;\n            }\n        }\n        return max;", "        int maxVal =\
    \ 0;\n        long maxFreq = 0;\n        foreach (long value in lst) {\n     \
    \       int freq = lst.Count(x => x == value);\n            if (freq > maxFreq)\
    \ {\n                maxFreq = freq;\n                maxVal = value;\n      \
    \      }\n        }\n        if (maxVal != 0) {\n            return maxVal;\n\
    \        }\n        return -1;", "        int count = lst.Count;\n        long\
    \ max = lst[0];\n        int maxCount = 0;\n        long min = 0;\n        foreach\
    \ (long i in lst) {\n            if (i >= min) {\n                if (count -\
    \ 1 > maxCount) {\n                    maxCount = count - 1;\n               \
    \     max = i;\n                }\n            } else {\n                min =\
    \ i;\n            }\n            count--;\n        }\n        if (maxCount >=\
    \ count) {\n            return max;\n        }\n        return -1;", "       \
    \ Array.Sort(lst);\n        HashSet<long> hs = new HashSet<long>();\n        int\
    \ i = 0;\n        for (i = 1; i < lst.Count; i++) {\n            hs.Add(lst[i]);\n\
    \        }\n        for (int j = 0; j < lst.Count; j++) {\n            long res\
    \ = -1L;\n            bool ok = false;\n            if (hs.Contains(lst[j])) {\n\
    \                if (lst[j] == lst[i - 1]) {\n                    res = lst[j];\n\
    \                    ok = true;\n                } else {\n                  \
    \  long l = 0;\n                    long r = hs.Count;\n                    while\
    \ (l < r) {\n                        int m = (l + r) / 2;\n                  \
    \      if (lst[j] > lst[m]) {\n                            r = m;\n          \
    \              } else {\n                            l = m;\n                \
    \        }\n                    }\n                    res = lst[j];\n       \
    \             ok = true;\n                }\n            }\n            if (ok)\
    \ {\n                if (lst.Count - j < i) return res;\n                i = lst.Count\
    \ - j;\n            }\n        }\n        return -1L;", "        long res = -1;\n\
    \        if (lst.Count > 0) {\n            int max = 0;\n            long max\
    \ = lst.Max();\n            foreach (var item in lst) {\n                int count\
    \ = lst.Count(c => c == item);\n                if (count >= max) {\n        \
    \            max = count;\n                    res = item;\n                }\n\
    \            }\n        }\n        return res;", "        var freq = lst.ToDictionary(a\
    \ => a, b => 1L);\n        foreach (var x in lst) {\n            if (freq.ContainsKey(x))\n\
    \                freq[x]++;\n        }\n        if (freq.Any(a => a.Value >= freq.Value))\n\
    \            return freq.Aggregate((a, b) => a > b ? a : b);\n        return -1L;",
  "        bool flag = false;\n        long max = 0;\n        long frequency = lst[0];\n\
    \        for (long i = 0; i < lst.Count; ++i) {\n            if (lst[i] > 0 &&\
    \ lst[i] == frequency) {\n                flag = true;\n                max =\
    \ lst[i];\n                frequency = lst[i];\n            }\n        }\n\n \
    \       if (!flag) {\n            return -1;\n        }\n        return max;",
  "        var lookup = lst.ToLookup(i => i);\n        foreach (var pair in lookup)\
    \ {\n            long count = pair.Count;\n            if (count >= 2 && (long)pair.Key\
    \ > 0)\n                return (long)pair.Key;\n        }\n        return -1;",
  "        int i = lst.Count - 1, j = 0;\n        int max = 0;\n        long f = 0;\n\
    \        while (i >= 0 && j < lst.Count) {\n            long s = lst[i];\n   \
    \         if (j == 0 || s == 0) \n                return -1L;\n            if\
    \ (s > 0) \n                f += s; \n            else if (s < 0)\n          \
    \      f -= s; \n            max = Math.Max(max, f);\n            i--;\n     \
    \       j++;\n        }\n        return max;", "        HashSet<long> set = new\
    \ HashSet<long>();\n        int counter = 0;\n        foreach (long i in lst)\
    \ {\n            if (set.Contains(i)) {\n                counter++;\n        \
    \    }\n            set.Add(i);\n        }\n        if (counter == 0) {\n    \
    \        return -1;\n        }\n        long result = 0;\n        for (int i =\
    \ 0; i < lst.Count(); i++) {\n            if (set.Contains(lst[i])) {\n      \
    \          result++;\n                if (result > counter) {\n              \
    \      break;\n                }\n            }\n        }\n        return result;",
  "        long max = 0;\n        long freq = 0;\n        foreach (long n in lst)\
    \ {\n            freq++;\n            if (n > max) {\n                max = n;\n\
    \            }\n        }\n        if (freq > 0) {\n            return max;\n\
    \        }\n        return -1;", "        if (lst==null)\n            return -1;\n\
    \        var freq = new Dictionary<long, long>();\n        foreach (var item in\
    \ lst) {\n            var freqItem = freq[item];\n            if (freqItem ==\
    \ null)\n                freq[item] = 1;\n            else {\n               \
    \ freq[item] = freqItem+1;\n            }\n        }\n\n        var res = new\
    \ SortedDictionary<long, long>();\n        foreach (var pair in freq.OrderBy(kvp\
    \ => kvp.Value).ThenBy(kvp => kvp.Key)) {\n            if (pair.Value > 0)\n \
    \               res.Add(pair.Key, pair.Value);\n        }\n        if (res.ContainsKey(0))\n\
    \            return 0;\n        return res.First().Value;", "        var max =\
    \ -1;\n        var max = lst[0];\n        var frequency = new List<long>();\n\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            var frequency = new\
    \ List<long>();\n            var item = lst[i];\n            int count = 0;\n\
    \            foreach (var item in frequency)\n                count += 1;\n  \
    \          if (count > max) {\n                max = count;\n                max\
    \ = item;\n            }\n            frequency.Add(item);\n        }\n\n    \
    \    if (max > 0) {\n            foreach (var item in frequency)\n           \
    \     if (item > max)\n                    max = item;\n        }\n        return\
    \ max;", "        long max = -1;\n        long cur = -1;\n        foreach (var\
    \ x in lst) {\n            if (x == 0) {\n                max = -1;\n        \
    \        break;\n            }\n            if (max < 0) {\n                max\
    \ = x;\n                cur = x;\n            }\n            else {\n        \
    \        if (cur < x && x >= max) {\n                    max = x;\n          \
    \          cur = x;\n                }\n            }\n        }\n        return\
    \ cur >= 0 ? cur : -1;", "        List<long> result = new List<long>();\n    \
    \    int[] sum = new int[256];\n        int num = 1;\n        foreach (long k\
    \ in lst) {\n            int tmp = sum[k];\n            sum[k] = (num * (num -\
    \ 1) + k) * num / 2;\n            int tmp = sum[k];\n            sum += new int[num];\n\
    \            num++;\n            if (tmp > 0) {\n                result.Add(k);\n\
    \            }\n        }\n        if (result.Count == 0) {\n            return\
    \ -1;\n        }\n        result.Sort();\n        foreach (int i in sum) {\n \
    \           if (result.Contains(i)) {\n                return i;\n           \
    \ }\n        }\n        return -1;", "        // We first find the frequencies\
    \ of each integer\n        var frequencies = lst.GroupBy(x => x).ToDictionary(x\
    \ => x.Key, x => x.Count());\n        // We then loop through the frequencies\
    \ and find the one that is bigger then the frequency of the integer\n        var\
    \ res = -1;\n        foreach (var item in frequencies) {\n            if (item.Value\
    \ >= item.Key) {\n                res = item.Key;\n                break;\n  \
    \          }\n        }\n        return res;", "        var result = (from value\
    \ in lst.Distinct()\n                     where lst.Where(w => w == value).Count()\
    \ > 1\n                     select new { value, count = lst.Where(w => w == value).Count()\
    \ }).OrderByDescending(o => o.count).FirstOrDefault();\n\n        if (result ==\
    \ null)\n            return -1;\n        return result.value;", "        var max\
    \ = lst.Max(l => l);\n        var freq = lst.Distinct().Count(l => l == max);\n\
    \        return lst.FindAll(i => i > max).Count() > freq ? -1 : max;", "     \
    \   if (lst.Count == 0) return -1;\n        long max = -1;\n        List<long>\
    \ ints = new List<long>();\n        ints.Add(lst[0]);\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            long freq = ints.Max();\n            int\
    \ index = ints.FindIndex(x => x > freq);\n            if (index >= 0) {\n    \
    \            if (freq >= lst[i]) {\n                    max = freq;\n        \
    \            ints.RemoveAt(index);\n                } else {\n               \
    \     ints.Insert(index, lst[i]);\n                }\n            }\n        }\n\
    \        return max;", "        SortedDictionary<long, int> dict = new SortedDictionary<long,\
    \ int>();\n        lst.ForEach(item => { dict[item]++; });\n\n        long result\
    \ = -1;\n        foreach (var pair in dict) {\n            if (pair.Value >= pair.Key)\
    \ {\n                result = Math.Max(result, pair.Value);\n            }\n \
    \       }\n        return result;", "        var d = lst.OrderByDescending();\n\
    \        var g = d.FirstOrDefault(x => x.HasValue) ?? d.FirstOrDefault();\n  \
    \      if (g != null)\n            return g.Value;\n        else\n           \
    \ return -1;", "        long max = -1;\n        long count = 0;\n        long\
    \ highestFreq = 0;\n        foreach (long i in lst) {\n            count += 1;\n\
    \            if (count > highestFreq) {\n                highestFreq = count;\n\
    \                max = i;\n            }\n        }\n        if (highestFreq >\
    \ 0) {\n            max = -1;\n            int highestIndex = 0;\n           \
    \ foreach (long i in lst) {\n                if (i == max) {\n               \
    \     highestIndex = highestIndex + 1;\n                }\n            }\n   \
    \         if (highestIndex == highestFreq) {\n                max = -1;\n    \
    \        }\n        }\n        return max;", '        return lst.Max(n => n.GetValueOrDefault(1L));',
  "        long result = -1;\n        HashSet<long> frequency = new HashSet<long>();\n\
    \        if (lst.Count == 0 || lst.Count == 1) {\n            return result;\n\
    \        }\n\n        foreach (long number in lst) {\n            if (frequency\
    \ == null || number.Equals(0)) {\n                return result;\n           \
    \ }\n\n            if (number.Equals(0)) {\n                result = number;\n\
    \            } else {\n                long value = number - 1;\n            \
    \    if (frequency.Contains(value)) {\n                    frequency.Add(value);\n\
    \                } else {\n                    frequency.Add(1);\n           \
    \         result = number;\n                }\n            }\n        }\n\n  \
    \      return result;", "        long maxInt = -1L;\n        long max = -1;\n\
    \        long maxCount = -1L;\n        foreach (long i in lst) {\n           \
    \ if (i > maxInt) {\n                maxInt = i;\n                maxCount = 1;\n\
    \            } else if (i == maxInt && maxCount < 1) {\n                maxCount\
    \ = 1;\n            } else if (i == maxInt && maxCount > 1) {\n              \
    \  maxCount++;\n            }\n            if (maxCount >= max) {\n          \
    \      max = maxCount;\n            }\n        }\n        return maxInt;", " \
    \       SortedList<long, int> freq = new SortedList<long, int>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            freq.Add(lst[i], 0);\n      \
    \  }\n        int maxVal = 0;\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            int curVal = lst[i];\n            int curFreq = freq[curVal];\n \
    \           while (curFreq > 0) {\n                if (curFreq == maxVal) {\n\
    \                    return curVal;\n                }\n                maxVal++;\n\
    \                curVal++;\n                curFreq = freq[curVal];\n        \
    \    }\n        }\n        return -1;", "        long max = 0;\n        List<long>\
    \ lst2 = new List<long>();\n        Dictionary<long, long> dic = new Dictionary<long,\
    \ long>();\n\n        foreach (long i in lst) {\n            if (dic.ContainsKey(i))\
    \ {\n                dic[i] += 1; \n            } else {\n                dic.Add(i,\
    \ 1); \n            }\n\n            if (dic.ContainsKey(i) && dic[i] >= lst[i])\
    \ {\n                dic[i] = lst[i]; \n            }\n        }\n\n        foreach\
    \ (KeyValuePair<long, long> i in dic)\n            if (i.Value > max) { max =\
    \ i.Value; }\n\n        return max;", "        var d = lst.ToLookup(i => i);\n\
    \        return d.Select(g => g.Key).Max() > 0 ? d.Where(g => g.Key > 0).First().Key\
    \ : -1;", "        long value = -1;\n        foreach(long i in lst) {\n      \
    \      if (value > 0) return value;\n            if (i > 0) value += i;\n    \
    \    }\n        return value;", "        var res = -1;\n        if (lst.Count\
    \ > 0) {\n            var max = lst.Max();\n            int cnt = lst.Count(x\
    \ => x > max);\n            if (cnt > 0) {\n                long curr = max =\
    \ 0, freq = 1;\n                for (int i = 1; i < lst.Count; ++i) {\n      \
    \              if (lst[i] == max) {\n                        ++freq;\n       \
    \             } else {\n                        curr += (long)Math.Floor(freq);\n\
    \                        max = lst[i];\n                        freq = cnt;\n\
    \                    }\n                }\n                curr = Math.Ceiling(curr);\n\
    \                if (curr == max) {\n                    res = max;\n        \
    \        } else if (curr + 1 == max) {\n                    res = curr + 1;\n\
    \                }\n            }\n        }\n        return res;", "        long\
    \ max = 0;\n        var frequencyMap = new Dictionary<long, int>();\n        foreach\
    \ (var n in lst) {\n            int f;\n            if (!frequencyMap.TryGetValue(n,\
    \ out f))\n                frequencyMap.Add(n, f = 1L);\n            else\n  \
    \              f++;\n            if (f > max) {\n                max = f;\n  \
    \          }\n        }\n        if (max < 0L)\n            return -1L;\n    \
    \    long maxFreq = 0L;\n        foreach (var pair in frequencyMap) {\n      \
    \      if (pair.Value == max) {\n                return pair.Key;\n          \
    \  }\n            if (pair.Value > max) {\n                maxFreq = pair.Value;\n\
    \            }\n        }\n        return -1L;", "        var max = 0;\n     \
    \   var result = -1;\n        var freqs = new Dictionary<long, int>();\n     \
    \   foreach (var item in lst) {\n            freqs.Add(item, 0);\n        }\n\
    \        foreach (var item in freqs) {\n            freqs[item.Key] += 1;\n  \
    \          if (freqs[item.Key] > max) {\n                max = freqs[item.Key];\n\
    \                result = item.Key;\n            }\n        }\n        return\
    \ result;", "        // Sort the list first\n        lst.Sort();\n        // Sorted\
    \ list - Greatest integer greater than zero \n        var maxValueGreaterThanZero\
    \ = lst.FirstOrDefault(n => n > 0);\n        // Greatest integer that exist\n\
    \        var maxExistValue = lst.FirstOrDefault(n => n > maxValueGreaterThanZero);\n\
    \        // Frequency of the maxExistValue\n        var maxExistValueFreq = lst.Count(n\
    \ => n == maxExistValue);\n        // If the maxExistValue does not exist, return\
    \ -1\n        if (maxExistValueFreq == 0) return -1;\n        // If there is a\
    \ maxValueGreaterThanZero which does not exist in the list, return -1\n      \
    \  if (maxValueGreaterThanZero == 0 && maxExistValue == maxValueGreaterThanZero)\
    \ return -1;\n        // If the maxExistValue does not exist, return -1\n    \
    \    if (maxValueGreaterThanZero > 0) return maxExistValue;\n        // If there\
    \ is a maxValueGreaterThanZero which does not exist in the list, return -1\n \
    \       if (maxExistValue > 0) return maxValueGreaterThanZero;\n        // If\
    \ no such value exists, return -1\n        return -1;", "        long res = -1;\n\
    \        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach\
    \ (long i in lst) {\n            dict.Add(i, 0);\n        }\n        foreach (KeyValuePair<long,\
    \ int> k in dict) {\n            if (k.Value > 1) {\n                if (k.Value\
    \ >= res) {\n                    res = k.Key;\n                }\n           \
    \ }\n        }\n        return res;", "        var result = -1;\n        var hash\
    \ = new Dictionary<long, int>();\n        var max = lst.Max();\n        if (hash[max]\
    \ == null) {\n            hash[max] = 1;\n        } else {\n            hash[max]\
    \ = hash[max] + 1;\n        }\n        lst.ForEach((num) => {\n            if\
    \ (hash[num] == null) {\n                hash[num] = 1;\n            } else {\n\
    \                hash[num] = hash[num] + 1;\n            }\n            if (hash[num]\
    \ >= 1) {\n                result = num;\n            }\n        });\n       \
    \ return result;", "        var max = 0;\n        var freq = new Dictionary<long,\
    \ int>();\n        foreach (var item in lst) {\n            freq[item] = freq.ContainsKey(item)\
    \ ? freq[item] + 1 : 1;\n            if (freq[item] > max)\n                max\
    \ = freq[item];\n        }\n\n        if (max >= 0)\n            return max;\n\
    \n        return -1;", "        if (lst.Count == 0) return -1;\n        if (lst.Count\
    \ == 1) return lst[0];\n        if (lst.Count == 2) return SearchTwo(lst, lst[0],\
    \ lst[1]);\n        int mid = 0;\n        long max = 0;\n        long freq = lst[0];\n\
    \        for (int i = 0; i < lst.Count; ++i) {\n            freq += lst[i];\n\
    \            if (freq > max) {\n                max = freq;\n                mid\
    \ = i;\n            }\n        }\n        if (freq > max) {\n            max =\
    \ freq;\n            mid = mid;\n        }\n        if (mid == lst.Count - 1)\
    \ {\n            max = -1;\n        }\n        return SearchTwo(lst, lst[mid],\
    \ max);", "        Dictionary<long, int> hash = new Dictionary<long, int>();\n\
    \        foreach(var num in lst)\n            if (hash.ContainsKey(num))\n   \
    \             hash[num]++;\n            else\n                hash[num] = 1;\n\
    \        List<long> candidates = new List<long>();\n        foreach(var num in\
    \ hash) {\n            if (hash[num] > 0 && num >= 0) {\n                candidates.Add(num);\n\
    \                hash[num] -= 1;\n            }\n        }\n        if (candidates.Count\
    \ == 0) {\n            return -1;\n        }\n        return candidates[candidates.Count\
    \ - 1];", "        long maxG = 0;\n        long g = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            g = lst.ElementAt(i);\n            int f\
    \ = 0;\n            for (int j = 0; j < lst.Count; j++) {\n                if\
    \ (lst.ElementAt(j) == g) {\n                    f += 1;\n                }\n\
    \            }\n            if (f > maxG) {\n                maxG = g;\n     \
    \       }\n        }\n        return maxG;", "        if (lst.Count == 0) return\
    \ -1;\n        var lst1 = lst.GroupBy(x => x).OrderByDescending(x => x.Count()).ToList();\n\
    \        if (lst1.Count <= 1) return lst1.First().Key;\n        long lv = lst1.First().Key;\n\
    \        long sum = 0;\n        foreach (var x in lst1) {\n            if (x.Key\
    \ < lv) {\n                sum += x.Count();\n                if (sum >= x.Count())\
    \ return -1;\n            } else {\n                sum -= x.Count();\n      \
    \      }\n        }\n        return lv;", "        var freq = lst.GroupBy(x =>\
    \ x).Select(x => x.Count()).ToList();\n        long? max = null;\n        long\
    \ i = 0;\n        foreach (var item in freq) {\n            if (item.Count > i.Value)\
    \ {\n                max = item.Key;\n                i = item.Count;\n      \
    \      }\n        }\n        if (max.HasValue) {\n            long maxCount =\
    \ 0;\n            foreach (var item in freq.Where(x => x.Count > maxCount)) {\n\
    \                if (item.Count > maxCount) {\n                    maxCount =\
    \ item.Count;\n                    max = item.Key;\n                }\n      \
    \      }\n            return max;\n        }\n        return -1;", "        long\
    \ max = lst.Max();\n        long value = lst.Count(i => i < max);\n        return\
    \ value == lst.Count ? -1 : value;", "        if (lst.Count == 0)\n          \
    \  return -1;\n        long max = lst.Max();\n        long res = -1;\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] > 0 && !(lst[i]%max))\
    \ {\n                long cur = lst[i]/max;\n                if (res == -1)\n\
    \                    res = cur;\n                else if (cur > res)\n       \
    \             res = cur;\n            }\n        }\n        return res;", "  \
    \      var sorted = lst.OrderBy(x => x);\n        return sorted.Aggregate((i,\
    \ j) => { \n            long max = (j > i) ? j : i;\n            if (max == 0)\
    \ return -1;\n            if (max == i) return max;\n            var count = 0;\n\
    \            for (long x = i; x != max; x = sorted.ElementAtOrDefault(x - 1))\n\
    \                count++;\n            return count;\n        });", "        long\
    \ maxVal = lst.Max();\n        if (maxVal < 0) {\n            return -1;\n   \
    \     }\n        var freqs = new Dictionary<long, int>();\n        for (int i\
    \ = 0; i < lst.Count; i++) {\n            if (freqs.ContainsKey(lst[i])) {\n \
    \               freqs[lst[i]]++;\n            } else {\n                freqs.Add(lst[i],\
    \ 1);\n            }\n        }\n\n        var vals = freqs.Where(x => x.Value\
    \ >= maxVal).Select(x => x.Key);\n        return vals.DefaultIfEmpty(-1).First();",
  "        // Sort the list first.\n        Sort(lst);\n        // Now, count how\
    \ many times the value is greater than zero.\n        int count = 0;\n       \
    \ foreach (long x in lst) {\n            if (x > 0) count++;\n        }\n    \
    \    // Now, check if the given value is greater than zero.\n        if (count\
    \ > 0) {\n            long max = lst[0];\n            for (int i = 0; i < lst.Count;\
    \ i++) {\n                if (lst[i] > max) max = lst[i];\n            }\n   \
    \         // Now, check if there is a value greater than zero that has the same\
    \ frequency\n            count = lst.Count(x => x > 0);\n            if (count\
    \ > 0 && count <= max) return max;\n        }\n        return -1;", "        //\
    \ sort the array and get the first element (the first number greater than 0)\n\
    \        long max = 0L;\n        long lastItem = 0L;\n        foreach (long number\
    \ in lst) {\n            if (number > 0L) {\n                max = Math.Max(lastItem\
    \ + 1, number);\n                lastItem = number;\n            }\n        }\n\
    \        if (lastItem == 0) return -1L;\n        long result = lst[lst.Count -\
    \ 1];\n        // find frequency of numbers\n        int[] arr = (int[])lst.ToArray();\n\
    \        Array.Sort(arr);\n        // if max frequency is equal to the max number\
    \ return -1\n        if (arr[0] < result) return -1L;\n        // else\n     \
    \   return result;", "        long ans = -1L;\n        int[] counts = new int[lst.Count];\n\
    \        for (long i = 0; i < lst.Count; i++) {\n            counts[(int)lst[i]]++;\n\
    \        }\n\n        int[] freq = Enumerable.Range(0, lst.Count).ToArray();\n\
    \        int max = -1;\n        for (int i = 0; i < freq.Length; i++) {\n    \
    \        if (freq[i] > max) {\n                max = freq[i];\n              \
    \  ans = lst[(int) i];\n            }\n        }\n        return ans;", "    \
    \    List<long> lstCopy = new List<long>(lst);\n        foreach (long i in lstCopy)\
    \ {\n            int count = 0;\n            foreach (long j in lstCopy) {\n \
    \               if (i == j) {\n                    count++;\n                }\n\
    \            }\n            if (count >= i) {\n                return i;\n   \
    \         }\n        }\n        return -1;", "        // find the first number\
    \ > 0\n        int i = 1;\n        long max = -1;\n        foreach (var x in lst)\
    \ {\n            if (x > 0) break;\n            i++;\n        }\n        if (i\
    \ == 1) return -1;\n\n        // check the frequency of every number in lst, if\
    \ it >= the current number, return max\n        long cur = 0;\n        var lst2\
    \ = lst.ToArray();\n        for (int j = 0; j < lst2.Length; j++) {\n        \
    \    if (lst2[j] > 0) {\n                cur++;\n            }\n            if\
    \ (cur >= lst2[j]) {\n                max = Math.Max(max, lst2[j]);\n        \
    \        cur = 0;\n            }\n        }\n        return max;", "        long[]\
    \ arr = lst.ToArray();\n        int length = arr.Length;\n        long[] sorted\
    \ = new long[length];\n\n        int i = 0, j = 0;\n        while (i < length)\
    \ {\n            sorted[i] = arr[i];\n            i++;\n        }\n\n        Array.Sort(sorted);\n\
    \n        int max = -1, maxCount = 0;\n        for (j = 0; j < length; j++) {\n\
    \            if (arr[j] == sorted[max]) {\n                maxCount++;\n     \
    \           if (maxCount >= max) max = j;\n            }\n        }\n        if\
    \ (max == -1) return -1L;\n        return arr[max];", "        if (lst.Count ==\
    \ 0)\n            return -1;\n\n        int best;\n\n        int max = lst.Max();\n\
    \        int min = lst.Min();\n        int freq = lst.GroupBy(x => x).Where(g\
    \ => g.Count() > 1).Count();\n\n        best = -1;\n        for (int i = min;\
    \ i <= max; i++) {\n            if (freq >= i && lst.Contains(i)) {\n        \
    \        best = i;\n                freq--;\n            }\n        }\n\n    \
    \    return best;", "        long freq = 0;\n        long max = -1;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            freq += lst[i];\n           \
    \ if (freq > max) {\n                max = freq;\n            }\n        }\n \
    \       return max;", "        var groups = lst\n            .GroupBy(x => x)\n\
    \            .Where(g => g.Count() > 1)\n            .ToList();\n        \n  \
    \      var max = groups.Max();\n        var maxCounts = groups.Where(g => g.Count()\
    \ == max);\n        \n        if (maxCounts.Any())\n            return maxCounts.Min();\n\
    \        else\n            return -1;", "        long minValue = lst[0];\n   \
    \     long maxValue = lst[0];\n        int freq = 0;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            long currentValue = lst[i];\n           \
    \ if (currentValue >= 0) {\n                if ((currentValue == maxValue) &&\
    \ (freq > currentValue)) {\n                    maxValue = currentValue;\n   \
    \             } else if (currentValue == minValue) {\n                    minValue\
    \ = currentValue;\n                    freq++;\n                } else {\n   \
    \                 if ((currentValue == maxValue) && (freq >= currentValue)) {\n\
    \                        maxValue = currentValue;\n                    } else\
    \ {\n                        minValue = currentValue;\n                      \
    \  freq++;\n                    }\n                }\n            }\n        }\n\
    \n        if ((maxValue < 0) && (freq > 0)) {\n            return -1;\n      \
    \  } else {\n            return maxValue;\n        }", "        long result =\
    \ -1;\n        bool used = new bool[1000000];\n        foreach (long l in lst)\
    \ {\n            if (used[l])\n                continue;\n            used[l]\
    \ = true;\n            if (l != 0) {\n                long max = 0;\n        \
    \        bool maxFound = false;\n                for (int i = 0; i < l; i++) {\n\
    \                    if (maxFound || used[i - 1])\n                        continue;\n\
    \                    long cur = i + 1;\n                    if (used[cur]) {\n\
    \                        continue;\n                    }\n                  \
    \  if (maxFound || cur > l) continue;\n                    if (cur > max) {\n\
    \                        max = cur;\n                        maxFound = true;\n\
    \                    }\n                }\n                used[max] = true;\n\
    \                if (max == l) {\n                    if (result < 0) result =\
    \ l;\n                }\n            }\n        }\n        return result;", " \
    \       int[] freq = new int[32];\n        long max = 0;\n        foreach (long\
    \ l in lst) {\n            freq[(int)l]++;\n            if (freq[(int)l] > max)\
    \ {\n                max = freq[(int)l];\n            }\n        }\n        if\
    \ (max > 0) {\n            return max;\n        }\n        return -1;", "    \
    \    if (lst==null || lst.Count == 0) {\n            return -1;\n        }\n \
    \       var maxIntWithMaxFreq = lst\n            .Aggregate((x, y) => (x < y)\
    \ ? (long?)y : (long?)x);\n        var maxFreq = maxIntWithMaxFreq.Value\n   \
    \         ?? (uint)lst.Count - 1;\n        var maxInt = maxIntWithMaxFreq.Value\n\
    \            ?? (long)lst.Count - 1;\n        if (maxFreq >= maxInt) {\n     \
    \       return maxInt;\n        }\n        return -1;", "        long frequency\
    \ = lst.GroupBy(c => c).Sum(g => g.Count());\n        long maxFreq = lst.GroupBy(c\
    \ => c).Max(g => g.Count());\n        long max = lst.Max();\n        return lst.Where(c\
    \ => frequency >= c && frequency > maxFreq && c > max).FirstOrDefault() ?? -1;",
  "        if (lst.Count > 0)\n        {\n            Dictionary<long, int> dict =\
    \ new Dictionary<long, int>();\n            foreach (var val in lst)\n       \
    \     {\n                if (dict.ContainsKey(val) == false)\n               \
    \ {\n                    dict.Add(val, 1);\n                }\n              \
    \  else\n                {\n                    dict[val]++;\n               \
    \ }\n            }\n            long max = 0;\n            foreach (var item in\
    \ dict)\n            {\n                if (item.Value >= item.Key && item.Value\
    \ > max)\n                {\n                    max = item.Value;\n         \
    \       }\n            }\n            return max > 0 ? max : -1;\n        }\n\
    \        else\n        {\n            return -1;\n        }", "        long res\
    \ = -1;\n        HashSet<long> freq = new HashSet<long>();\n        foreach (var\
    \ v in lst)\n            freq.Add(v);\n        foreach (var v in freq)\n     \
    \       foreach (var w in freq) {\n                if (v > w && v != w && !freq.Contains(w))\n\
    \                    res = Math.Max(res, v);\n            }\n        return res;",
  "        long max = lst.Max();\n        long num = 0;\n        long count = 0;\n\
    \        foreach (var i in lst)\n        {\n            if (i == max) {\n    \
    \            count++;\n                num = i;\n            }\n        }\n  \
    \      if (count == lst.Count && num > 0)\n            return num;\n        return\
    \ -1L;", "        if (lst.Count == 0) {\n            return -1L;\n        }\n\
    \        var max = lst.Max();\n        var freq = lst.Where(n => n > max).ToList();\n\
    \        return lst.Where(n => n > max).FirstOrDefault(n => n >= freq.First()).Value;",
  "        if (lst==null)\n            return -1;\n\n        // We are interested\
    \ only in integers with positive frequency.\n        List<long> positive = new\
    \ List<long>();\n        foreach (long i in lst)\n            if (i>0)\n     \
    \           positive.Add(i);\n\n        if (positive.Count>0)\n            return\
    \ PositiveFrequency(positive);\n        return -1;", "        long maxVal = lst.Max();\n\
    \        long freq = lst.GroupBy(x => x).Where(x => x.Count() > 1).Count();\n\n\
    \        return (freq > maxVal) ? -1 : maxVal;", "        if (lst.Count == 0)\
    \ return -1;\n        long freq = lst[0];\n        var lst2 = lst.ToList();\n\
    \        foreach (long i in lst2) freq = (freq * lst2.Count()) / i;\n        return\
    \ freq;", "        HashSet<long> hashSet = new HashSet<long>();\n        double\
    \ maxValue = lst[0];\n        long maxCount = lst[0];\n        foreach (long value\
    \ in lst) {\n            if (hashSet.Add(value)) {\n                maxValue =\
    \ Math.Max(value, maxValue);\n                maxCount = hashSet.Count;\n    \
    \        }\n        }\n\n        if (maxCount > hashSet.Count) {\n           \
    \ return -1;\n        } else if (maxCount < hashSet.Count) {\n            return\
    \ maxValue;\n        }\n        return maxValue;", "        long max = 0;\n  \
    \      int count = 0;\n\n        foreach (var num in lst) {\n            if (num\
    \ > max) {\n                max = num;\n                count = 1;\n         \
    \   } else if (num == max) {\n                count++;\n            }\n      \
    \  }\n\n        return count == 0 ? -1 : max;", "        if (lst.Count <= 0) return\
    \ -1;\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n \
    \       long largest = -1;\n        long freq = 0;\n        foreach (long x in\
    \ lst) {\n            freq += 1;\n            if (freq > freq * x) {\n       \
    \         largest = x;\n                freq = freq - freq * x;\n            }\n\
    \            else\n                dict[freq * x] = x;\n        }\n        return\
    \ largest > 0 ? dict[largest] : -1;", "        HashSet<long> set = new HashSet<long>();\n\
    \        long result = 0;\n        long max = lst.Max();\n        foreach (var\
    \ item in lst) {\n            if (set.Contains(item)) {\n                var diff\
    \ = item - max;\n                set.Remove(item);\n                if (diff >=\
    \ 0) {\n                    result += diff;\n                }\n            }\
    \ else {\n                set.Add(item);\n            }\n        }\n        return\
    \ result;", "        // Your code here.\n        int max = 1;\n        foreach\
    \ (int i in lst) {\n            if (i > max) {\n                max = i;\n   \
    \         }\n        }\n        if (max >= 0) {\n            List<int> frequencies\
    \ = new List<int>();\n            foreach (int i in lst) {\n                frequencies.Add(i);\n\
    \            }\n            foreach (int i in frequencies) {\n               \
    \ if (i >= max) {\n                    if (frequencies.Contains(i)) {\n      \
    \                  frequencies.Remove(i);\n                    } else {\n    \
    \                    max = i;\n                        frequencies.Add(max);\n\
    \                    }\n                }\n            }\n            if (frequencies.Count\
    \ > 0) {\n                return max;\n            }\n        }\n        return\
    \ -1;", "        long maxFreq = -1;\n        long maxFreqIndex = -1;\n       \
    \ long maxFreqValue = lst[0];\n        long maxValue = lst[0];\n        long nextValue\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            long curValue\
    \ = lst[i];\n            if (curValue == nextValue) {\n                nextValue++;\n\
    \                continue;\n            }\n            long curFreq = lst.Count(x\
    \ => x == curValue);\n            if (curFreq > maxFreq) {\n                maxFreq\
    \ = curFreq;\n                maxFreqValue = curValue;\n                maxFreqIndex\
    \ = i;\n            }\n            if (curValue > maxValue) {\n              \
    \  maxValue = curValue;\n                maxFreqIndex = i;\n            }\n  \
    \          \n            nextValue = curValue;\n        }\n        return maxFreqIndex;",
  "        long max = 0;\n        int n = lst.Count;\n        bool found = false;\n\
    \n        foreach(var i in lst) {\n            found = i == n;\n            if\
    \ (found)\n                break;\n\n            if(i == 0)\n                max\
    \ = i;\n            else \n                max = Math.Max(max, i - 1);\n     \
    \   }\n\n        if(found)\n            return max;\n\n        foreach(var i in\
    \ lst) {\n            found = i == n;\n            if(!found)\n              \
    \  max = Math.Max(max, i);\n        }\n\n        return max;", "        long maxVal\
    \ = long.MinValue;\n        long currVal = -1;\n\n        foreach(long i in lst)\n\
    \        {\n            long freq = lst.Where(x => x == i).Count();\n        \
    \    if(freq > 0)\n            {\n                currVal = i;\n             \
    \   maxVal = i;\n            }\n            else\n            {\n            \
    \    if(currVal != -1)\n                    break;\n            }\n        }\n\
    \n        return maxVal;", "        long maxValue = lst[0];\n        long currValue\
    \ = lst[0];\n        int frequency = 0;\n        foreach (var v in lst) {\n  \
    \          currValue = v;\n            if (currValue == 0) {\n               \
    \ return -1;\n            }\n            frequency++;\n            if (currValue\
    \ > maxValue) {\n                maxValue = currValue;\n            }\n      \
    \  }\n        return maxValue;", "        if (lst.Any())\n        {\n        \
    \    Dictionary<long, long> dic = new Dictionary<long, long>();\n            foreach\
    \ (var i in lst)\n            {\n                if (!dic.ContainsKey(i)) dic.Add(i,\
    \ 0);\n                else dic[i]++;\n            }\n            long max = 0;\n\
    \            foreach (var i in dic)\n            {\n                if (dic[i]\
    \ >= i)\n                {\n                    if (dic[i] > max) max = dic[i];\n\
    \                }\n            }\n            return max;\n        }\n      \
    \  return -1;", "        if (lst == null || lst.Count == 0) return -1L;\n    \
    \    long result = -1;\n        Dictionary<long, long> dict = new Dictionary<long,\
    \ long>();\n        for (long i = 0; i < lst.Count; i++) {\n            if (dict.ContainsKey(lst[i]))\
    \ dict[lst[i]]++;\n            else dict[lst[i]] = 1;\n        }\n        foreach\
    \ (KeyValuePair<long, long> entry in dict) {\n            if (result.CompareTo(entry.Key)\
    \ < 0) {\n                result = entry.Key;\n            }\n            if (entry.Value\
    \ >= lst.Count) return -1L;\n        }\n        return result;", "        long\
    \ max = -1L;\n        int freq = 0;\n        foreach (long l in lst) {\n     \
    \       freq++;\n            if (l > max) {\n                max = l;\n      \
    \      }\n        }\n        if (freq >= 1L) {\n            return max;\n    \
    \    }\n        long res = -1L;\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            if (lst[i] > max) {\n                res = lst[i];\n            }\n\
    \        }\n        return res;", "        int maxIdx = 0;\n        int maxFreq\
    \ = 0;\n\n        // We need only frequencies and we can get them from O(1).\n\
    \        // So lets try sorting our list first.\n        // But first we need\
    \ to remember indexes of those frequencies\n        // which can not be greater\
    \ than maximum frequency (we will search them later).\n        // To be precise\
    \ we can say that frequency of frequency == -1.\n        Dictionary<long, int>\
    \ freqs = new Dictionary<long, int>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            freqs[lst[i]] = freqs.ContainsKey(lst[i]) ? freqs[lst[i]]\
    \ + 1 : 1;\n            if (freqs[lst[i]] > maxFreq) {\n                maxFreq\
    \ = freqs[lst[i]];\n                maxIdx = i;\n            }\n        }\n\n\
    \        // Since we know that frequencies are in descending order we can stop\
    \ search if we find one with freq > maxFreq.\n        int idx = 0;\n        while\
    \ (idx < lst.Count && !freqs.ContainsKey(lst[idx])) idx++;\n        return idx\
    \ < lst.Count ? lst[idx] : -1;", "        // Use a SortedDictionary to store the\
    \ frequencies of numbers in the list\n        SortedDictionary<long, long> freq\
    \ = new SortedDictionary<long, long>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            freq[lst[i]] = freq[lst[i]] + (i != lst.Count - 1 ? 1 :\
    \ 0);\n        }\n        // If the frequency of a number greater than zero is\
    \ greater than or equal to the number itself\n        // Return the number itself\n\
    \        if (freq.Values.FirstOrDefault() >= lst.Count)\n            return lst.Max();\n\
    \        \n        // Use LINQ to find all frequencies greater than or equal to\
    \ each number\n        List<long> greaterThan = new List<long>(lst.Count);\n \
    \       foreach (KeyValuePair<long, long> entry in freq) {\n            if (entry.Value\
    \ >= lst.Count)\n                greaterThan.Add(entry.Key);\n        }\n    \
    \    if (greaterThan.Count <= 1)\n            return lst.Max();\n        \n  \
    \      // Use the first number in the list of frequencies greater than or equal\
    \ to the number itself\n        // as the greatest frequency number\n        long\
    \ greatest = greaterThan.First();\n        \n        // If all the numbers in\
    \ the list are greater than or equal to this number, return it\n        if (lst.Count\
    \ <= greatest)\n            return lst.Max();\n        \n        // Use LINQ to\
    \ find all the frequencies greater than or equal to this number\n        List<long>\
    \ greaterThanGreatest = new List<long>(lst.Count);\n        foreach (KeyValuePair<long,\
    \ long> entry in freq) {\n            if (entry.Value >= greatest)\n         \
    \       greaterThanGreatest.Add(entry.Key);\n        }\n        if (greaterThanGreatest.Count\
    \ <= 1)\n            return lst.Max();\n        \n        // Use the first number\
    \ in the list of frequencies greater than or equal to this number\n        //\
    \ as the greatest frequency number\n        greatest = greaterThanGreatest.First();\n\
    \        \n        // Find all frequencies greater than or equal to this number\n\
    \        List<long> greaterThanGreatestGreater = new List<long>(lst.Count);\n\
    \        foreach (KeyValuePair<long, long> entry in freq) {\n            if (entry.Value\
    \ >= greatest && entry.Value <= lst.Count)\n                greaterThanGreatestGreater.Add(entry.Key);\n\
    \        }\n        if (greaterThanGreatestGreater.Count <= 1)\n            return\
    \ lst.Max();\n        \n        // Use the first number in the list of frequencies\
    \ greater than or equal to this number\n        // and the first number in the\
    \ list of frequencies greater than or equal to this number\n        // as the\
    \ greatest frequency number\n        long greatestGreatest = greater", "     \
    \   int[] counters = new int[10000];\n        int index = -1;\n        foreach\
    \ (long number in lst) {\n            index++;\n            counters[index]++;\n\
    \            if (counters[index] > 1)\n                return number;\n      \
    \  }\n        return -1;", "        long max = 0;\n        int count = lst.Count;\n\
    \        foreach (long item in lst) {\n            if (count > 1) {\n        \
    \        if (item < lst[count - 1])\n                    max = Math.Max(max, item);\n\
    \            }\n            else\n                max = Math.Max(max, item);\n\
    \            count--;\n        }\n        return max;", "        long[] vals =\
    \ lst.ToArray();\n        long maxVal = vals[0];\n        long maxFreq = vals[0];\n\
    \        for (int i = 1; i < vals.Length; i++) {\n            long thisFreq =\
    \ vals[i];\n            if (thisFreq > maxFreq) {\n                maxFreq = thisFreq;\n\
    \                maxVal = vals[i];\n            } else if (thisFreq == maxFreq\
    \ && vals[i] > maxVal) {\n                maxFreq = thisFreq;\n              \
    \  maxVal = vals[i];\n            }\n        }\n        if (maxFreq > 0) {\n \
    \           return maxVal;\n        } else {\n            return -1;\n       \
    \ }", "        Dictionary<long, long> dict = new Dictionary<long, long>();\n \
    \       foreach (long i in lst) {\n            if (dict.ContainsKey(i)) {\n  \
    \              dict[dict[i]]++;\n            } else {\n                dict[i]\
    \ = 1;\n            }\n        }\n        foreach (KeyValuePair<long, long> k\
    \ in dict) {\n            if (k.Value > 0 && k.Value >= k.Key) {\n           \
    \     return k.Key;\n            }\n        }\n        return -1;", "        if\
    \ (lst.Count == 0) return -1;\n        if (lst.Count == 1) return lst[0];\n  \
    \      int count = 1;\n        long maxfreq = lst[0], maxval = lst[0];\n     \
    \   foreach (long i in lst) {\n            if (++count > maxfreq) {\n        \
    \        maxfreq = count;\n                maxval = i;\n            }\n      \
    \  }\n        if (maxfreq > maxval.Frequency) return -1;\n        return maxval;",
  "        long result = -1;\n        foreach (long n in lst) {\n            if (n\
    \ == 0) continue;\n            long[] counts = Enumerable.Range(0, n).Select(i\
    \ => new { val, freq = lst.Count(j => j == n) }).ToArray();\n            if (counts.Select(c\
    \ => c.freq).Max() >= n.Val) {\n                result = n;\n                break;\n\
    \            }\n        }\n        return result;", "        long max = 0, freq\
    \ = -1, val = 0, minVal = int.MaxValue, minFreq = -1;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (lst[i] > 0 && lst[i] >= val) {\n    \
    \            freq = lst[i];\n                val = lst[i];\n            }\n  \
    \          if (val > 0) {\n                if (freq == 0) continue;\n        \
    \        if (lst[i] < minVal) {\n                    minVal = lst[i];\n      \
    \              minFreq = freq;\n                }\n                if (freq >=\
    \ minFreq) {\n                    max = val;\n                    freq = minFreq;\n\
    \                }\n            }\n        }\n        return max;", "        int\
    \ maxCount = 0;\n        long maxValue = -1;\n        foreach (var num in lst)\
    \ {\n            int frequency = lst.Count(x => x == num);\n            if (frequency\
    \ > maxCount) {\n                maxCount = frequency;\n                maxValue\
    \ = num;\n            }\n        }\n        return maxValue;", "        // find\
    \ max from list\n        long max = 0L;\n        long sum = 0L;\n        foreach\
    \ (long item in lst) {\n            if (item > max) {\n                max = item;\n\
    \            }\n            sum += item;\n        }\n        if (sum != max) {\n\
    \            Console.WriteLine(\"Invalid input\");\n            return -1;\n \
    \       }\n        // find max freq\n        int maxFreq = -1;\n        long maxFreqItem\
    \ = 0L;\n        foreach (long item in lst) {\n            long freq = lst[item];\n\
    \            if (freq > maxFreq) {\n                maxFreq = freq;\n        \
    \        maxFreqItem = item;\n            }\n        }\n        return maxFreqItem;",
  "        if (lst.Count == 0) return -1;\n        long ret = long.MinValue;\n   \
    \     long retFrequency = -1;\n        long currFrequency = 1;\n        foreach\
    \ (long num in lst) {\n            currFrequency = currFrequency + 1;\n      \
    \      if (currFrequency > retFrequency) {\n                retFrequency = currFrequency;\n\
    \                ret = num;\n            }\n        }\n        return ret;", " \
    \       long result = -1;\n        long freq = 0;\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            freq += lst[i];\n            if (freq > result)\
    \ {\n                result = freq;\n            }\n        }\n        return\
    \ result;", "        var max = lst\n            .GroupBy(x => x)\n           \
    \ .ToLookup(g => g.Key)\n            .FirstOrDefault(g => g.Count() > 1);\n  \
    \      if (max != null)\n            return max.Where(x => lst\n             \
    \   .GroupBy(x => x)\n                .Select(g => g.Where(y => y == x).Count())\n\
    \                .Where(x => x > 0).First()\n                .Max());\n      \
    \  return -1;", "        long mostFrequent = lst.Max();\n        foreach (var\
    \ i in lst) {\n            if (i > mostFrequent) {\n                break;\n \
    \           }\n            if (lst.Count(x => x == i) >= i) { //Count is O(n)\
    \ time complexity\n                mostFrequent = i;\n            }\n        }\n\
    \        if (mostFrequent == 0) {\n            return -1;\n        }\n       \
    \ return mostFrequent;", "        int[] arr = lst.ToArray();\n        int maxValue\
    \ = -1;\n        int maxCount = 0;\n\n        // We iterate through the list,\
    \ and for each item we look for the maximum\n        foreach (int num in arr)\
    \ {\n            int count = arr.Where(i => i == num).Count();\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxValue\
    \ = num;\n            }\n        }\n        if (maxCount > arr.Count() * 0.5f)\
    \ {\n            return maxValue;\n        } else {\n            return -1L;\n\
    \        }", "        long ans = -1;\n        long highest = 0;\n        foreach\
    \ (long n in lst) {\n            if (n > highest) {\n                highest =\
    \ n;\n            }\n            if (n >= ans) {\n                ans = n;\n \
    \           }\n        }\n        return ans;", "        // Sort the list, then\
    \ loop from 0 to N\n        var list = lst.OrderByDescending(p => p).ToList();\n\
    \        long freq = 0;\n        long maxVal = 0;\n        for (int i = 0; i <\
    \ list.Count; i++) {\n            freq++;\n            if (list[i] < 0) return\
    \ -1;\n            if (list[i] != list[i + 1]) maxVal = list[i];\n        }\n\
    \        if (freq > 0) {\n            long sum = 0;\n            foreach (var\
    \ value in list)\n                sum += value;\n            double average =\
    \ sum / freq;\n            long maxVal = Convert.ToInt64(Math.Round(average, MidpointRounding.AwayFromZero));\n\
    \            return maxVal;\n        }\n        return -1;", "        long ans\
    \ = 0;\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n  \
    \      foreach (var n in lst) {\n            int count = 0;\n            if (dict.TryGetValue(n,\
    \ out count)) {\n                count++;\n                dict[n] = count;\n\
    \                if (count >= n)\n                    ans = n;\n            }\n\
    \            else {\n                dict.Add(n, 1);\n                if (n >\
    \ 0) {\n                    if (n >= ans)\n                        ans = n;\n\
    \                }\n            }\n        }\n        return ans == 0L ? -1L :\
    \ ans;", "        if (lst.Count == 0)\n            return -1;\n        // Find\
    \ the maximum number that occurs more than once.\n        long maxVal = -1;\n\
    \        long maxCount = 0;\n        long val = lst[0];\n        int count = 0;\n\
    \        foreach (long val in lst) {\n            if (val == val)\n          \
    \      count++;\n            else if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxVal = val;\n            }\n            count =\
    \ 0;\n        }\n        // If no such value exist, return -1.\n        if (maxCount\
    \ == 0)\n            return -1;\n        // Otherwise, find the number whose frequency\
    \ is at least as big as maxCount.\n        List<long> lst2 = lst.Where(x => x\
    \ % maxVal == 0).ToList();\n        long val2 = lst2[0];\n        int count2 =\
    \ 0;\n        foreach (long val2 in lst2) {\n            if (val2 == val2) {\n\
    \                count2++;\n            } else if (count2 > maxCount) {\n    \
    \            maxCount = count2;\n                maxVal = val2;\n            }\n\
    \            count2 = 0;\n        }\n        return maxVal;", "        if (lst.Count\
    \ == 0) {\n            return -1;\n        }\n        long max = lst.Min();\n\
    \        int count = 0;\n        foreach (var item in lst) {\n            if (item\
    \ == max) {\n                count++;\n            }\n            if (count >=\
    \ item) max = item;\n        }\n        return max;", "        if (lst.Count ==\
    \ 0)\n            return -1;\n        var freq = new Dictionary<long, long>();\n\
    \        var maxV = lst[0];\n        var maxFreq = lst[0];\n        foreach (var\
    \ v in lst) {\n            if (freq.TryGetValue(v, out var freqVal)) {\n     \
    \           freq[freqVal] = freqVal == maxF ? freqVal + 1 : freqVal;\n       \
    \     }\n            else {\n                freq[v] = 1;\n            }\n   \
    \         var freqVal = freq[v];\n            if (freqVal > maxFreq) {\n     \
    \           maxFreq = freqVal;\n                maxV = v;\n            }\n   \
    \     }\n        return maxV;", "        // Get greatest frequency and largest\
    \ number\n        var maxFreq = 0L;\n        var maxNum = -1L;\n        foreach\
    \ (var num in lst) {\n            long freq = lst.Where(n => n == num).Count();\n\
    \            if (freq > maxFreq) {\n                maxFreq = freq;\n        \
    \        maxNum = num;\n            }\n        }\n        // If no such a value\
    \ exist return -1\n        return maxNum != -1L ? maxNum : -1L;", "        //\
    \ get first value\n        var value = lst.First();\n        int valueFound =\
    \ 0;\n        int maxValue = 0;\n        // find first occurrence of this value\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            // check if current\
    \ value is greater than or equal to current value\n            if (valueFound\
    \ == 0) {\n                if (lst[i] >= value) {\n                    valueFound\
    \ = i;\n                }\n            } else {\n                if (lst[i] >=\
    \ value) {\n                    maxValue = i;\n                    break;\n  \
    \              }\n            }\n        }\n        // return greatest int value\
    \ greater than zero and greater than or equal to value itself\n        return\
    \ (maxValue == 0) ? -1 : maxValue;", "        if (lst.Count == 0)\n          \
    \  return -1;\n        long max = 0;\n        foreach (long i in lst)\n      \
    \      if (i > 0)\n                max += i;\n        long maxFreq = lst.Where(x\
    \ => x > 0).Count();\n        if (maxFreq >= max)\n            return -1;\n  \
    \      return max;", '        return lst.TakeWhile(x => x > 0).Max((x, y) => x
    - y);', "        long maxval = -1;\n        long freq = 1;\n        long temp\
    \ = 0;\n        foreach(long a in lst) {\n            temp += a;\n           \
    \ freq += 1;\n        }\n        if(temp > 0) {\n            freq /= temp;\n \
    \           maxval = Math.Max(maxval, freq);\n        }\n        return maxval;",
  "        long maxVal = -1;\n        long maxFreq = -1;\n        HashSet<long> set\
    \ = new HashSet<long>();\n        foreach (long l in lst) {\n            set.Add(l);\n\
    \        }\n        foreach (long i in set) {\n            long freq = set.Count(i\
    \ => i == i);\n            if (freq > maxFreq) {\n                maxFreq = freq;\n\
    \                maxVal = i;\n            }\n        }\n        return maxVal;",
  "        long freq = lst.Count;\n        foreach (var item in lst) {\n         \
    \   if (lst.Contains(item)) {\n                if (freq == item.GetHashCode())\
    \ return item;\n                freq = freq - item.GetHashCode();\n          \
    \  }\n        }\n        return -1;", "        long largest = lst.Max();\n   \
    \     long freq = lst.Where(i => i > largest).ToList().Count();\n        return\
    \ freq > lst.Count() ? -1 : largest;", "        // TODO: fill in the blanks\n\
    \        var largestNumber = lst.OrderByDescending(x => x).First();\n        var\
    \ frequency = lst.Count(x => x == largestNumber);\n        if (lst.Count(x =>\
    \ x == largestNumber) > frequency) {\n            throw new ArgumentException(\"\
    Invalid Input\");\n        }\n        return lst.First();", "        if (lst.Count\
    \ <= 0) return -1;\n        var listMax = lst.Max();\n        var min = lst.Min();\n\
    \        var max = (long)Math.Sqrt(listMax);\n        var minIndex = (long)Math.Sqrt(Math.Abs(listMax\
    \ - min));\n        var frequency = 0;\n        var ans = (long)-1;\n        foreach\
    \ (var item in lst) {\n            if (item == listMax) {\n                if\
    \ (frequency < ans) {\n                    ans = frequency;\n                }\n\
    \            }\n            frequency += 1;\n            if (frequency >= ans\
    \ && item >= min && item <= max) {\n                ans = item;\n            }\n\
    \        }\n        return ans;", "        int[] count = new int[1000000];\n \
    \       foreach (long num in lst) {\n            count[num - 1]++;\n        }\n\
    \n        long ans = -1;\n        long max = 0;\n        for (int i = count.Length\
    \ - 1; i >= 0; i--) {\n            if (max == -1) {\n                ans = i;\n\
    \                max = count[i];\n            } else if (count[i] >= max) {\n\
    \                ans = i;\n                max = count[i];\n            }\n  \
    \      }\n\n        if (ans != -1) {\n            return ans;\n        }\n\n \
    \       return -1;", "        long max = lst[0];\n        int count = 0;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > max) {\n\
    \                max = lst[i];\n                count = 1;\n            } else\
    \ if (lst[i] == max) {\n                count++;\n            }\n        }\n \
    \       if (count >= lst.Count) {\n            return max;\n        } else {\n\
    \            return -1;\n        }", "        if (lst.Count == 0) {\n        \
    \    return -1;\n        }\n        if (lst.Count == 1) {\n            return\
    \ lst[0];\n        }\n        Dictionary<long, int> dict = new Dictionary<long,\
    \ int>();\n        long ret = 0;\n        foreach (long n in lst) {\n        \
    \    dict.Add(n, 1);\n        }\n        long max = 0;\n        foreach (KeyValuePair<long,\
    \ int> kvp in dict) {\n            if (max < kvp.Key) {\n                max =\
    \ kvp.Key;\n                ret = kvp.Value;\n            }\n        }\n     \
    \   return ret;", "        var dictionary = new Dictionary<long, int>();\n   \
    \     for (int i = 0; i < lst.Count; i++) {\n            if (dictionary.ContainsKey(lst[i])\
    \ == false) {\n                dictionary.Add(lst[i], 1);\n            } else\
    \ {\n                int num;\n                dictionary.TryGetValue(lst[i],\
    \ out num);\n                dictionary[lst[i]] = num + 1;\n            }\n  \
    \      }\n        long max = 0;\n        int maxKey = 0;\n        foreach (var\
    \ entry in dictionary) {\n            if (entry.Value >= entry.Key) {\n      \
    \          max = Math.Max(max, entry.Key);\n                maxKey = entry.Value;\n\
    \            }\n        }\n        return maxKey > 0 ? maxKey : -1;", "      \
    \  long max = -1;\n        long freq = 0;\n        foreach (long i in lst) {\n\
    \            freq += i;\n            max = Math.Max(i, max);\n            freq--;\n\
    \        }\n        return max;", "        long result = -1;\n        long freq\
    \ = 0;\n        foreach (long x in lst) {\n            if (x > 0 && freq == 0)\n\
    \                result = x;\n            else\n                freq++;\n    \
    \    }\n        if (result > 0 && freq > result)\n            return -1;\n   \
    \     else\n            return result;", "        if (lst == null || lst.Count\
    \ <= 0) {\n            return -1;\n        }\n        long max = 0;\n        long\
    \ count = 0;\n        foreach (var item in lst) {\n            if (item == 0)\
    \ {\n                return -1;\n            }\n            if (item > max) {\n\
    \                max = item;\n                count = 1;\n            }\n    \
    \        else if (item == max) {\n                count++;\n            }\n  \
    \      }\n        if (count <= 1) {\n            return -1;\n        }\n     \
    \   return max;", "        if (lst.Count < 1)\n            return -1;\n      \
    \  long maxFreq = 0;\n        long maxNum = 0;\n        foreach (long num in lst)\n\
    \            if (num > 0)\n                maxNum = num;\n            else\n \
    \               maxFreq += num;\n        if (maxFreq <= maxNum) {\n          \
    \  long m = maxFreq - maxNum;\n            int i = 0;\n            foreach (long\
    \ num in lst)\n                if (num == 0)\n                    lst[i] = maxNum;\n\
    \                else\n                    lst[i] += num;\n                i++;\n\
    \            while (i <= lst.Count && lst[i] < maxNum)\n                i++;\n\
    \            if (i <= lst.Count && lst[i] == maxNum)\n                return maxNum;\n\
    \        }\n        return -1;", "        long maxFreq = -1;\n        long maxNum\
    \ = -1;\n        var dict = new Dictionary<long, long>();\n        for (int i\
    \ = 0; i < lst.Count; i++) {\n            long freq = lst.Count(v => v == lst[i]);\n\
    \            long num = lst[i];\n            if (freq < maxFreq) {\n         \
    \       continue;\n            }\n            if (freq < num) {\n            \
    \    continue;\n            }\n            int cmp = freq.CompareTo(num);\n  \
    \          if (cmp < 0) {\n                continue;\n            }\n        \
    \    if (cmp > 0) {\n                continue;\n            }\n            long\
    \ key = freq;\n            if (dict.TryGetValue(key, out long existKey)) {\n \
    \               if (existKey > maxFreq) {\n                    continue;\n   \
    \             }\n                if (existKey > num) {\n                    continue;\n\
    \                }\n                if (existKey != num) {\n                 \
    \   continue;\n                }\n            } else {\n                dict.Add(key,\
    \ num);\n            }\n            if (maxFreq < freq) {\n                maxFreq\
    \ = freq;\n                maxNum = num;\n            }\n        }\n        return\
    \ maxNum;", "        Debug.Assert(lst.Count > 0);\n        int i = 0;\n      \
    \  var c = new List<long>();\n        foreach (var item in lst) {\n          \
    \  if (item < lst[i]) {\n                i--;\n                continue;\n   \
    \         }\n            if (item.Equals(lst[i]))\n                continue;\n\
    \            i++;\n            c.Add(item);\n        }\n        if (c.Count >\
    \ 0)\n            return Search(lst, i, c);\n        return -1;", "        long\
    \ result = -1;\n        long max = lst.Max();\n        long curr = max;\n    \
    \    List<int> counts = new List<int>(lst);\n        counts.Sort();\n        if\
    \ (counts.Count > 0) // check if lst is sorted\n        {\n            for (int\
    \ i = 0; i < counts.Count; i++)\n            {\n                if (counts[i]\
    \ < counts[i + 1]) // check if any previous number appears more than once\n  \
    \              {\n                    curr = counts[i] - 1;\n                \
    \    break;\n                }\n            }\n            bool found = true;\n\
    \            long freq = 0;\n            while (found)\n            {\n      \
    \          found = false;\n                for (int i = 0; i < counts.Count; i++)\n\
    \                {\n                    if (counts[i] == counts[i - 1] + 1)\n\
    \                    {\n                        found = true;\n              \
    \          freq++;\n                        break;\n                    }\n  \
    \              }\n                if (found)\n                {\n            \
    \        if (freq >= curr)\n                    {\n                        result\
    \ = curr;\n                        break;\n                    }\n           \
    \         curr--;\n                }\n            }\n        }\n        return\
    \ result;", "        int cnt = lst.Count;\n        int maxIndex = 0;\n       \
    \ long maxVal = lst[0];\n        for (int i = 1; i < cnt; i++) {\n           \
    \ int val = lst[i];\n            if (val > 0) {\n                if (val > maxVal)\
    \ {\n                    maxIndex = i;\n                    maxVal = val;\n  \
    \              }\n            }\n        }\n        if (maxIndex == 0) return\
    \ -1;\n        return maxVal;", "        var hash = lst.GroupBy(x => x).Where(g\
    \ => g.Count() > 1).Select(x => new { Value = x.Key, Count = x.Count() }).ToDictionary(x\
    \ => x.Value, x => x.Count);\n        if (hash.TryGetValue(lst.FirstOrDefault(),\
    \ out var freq))\n        {\n            if (freq >= lst.Count())\n          \
    \      return -1;\n            return freq;\n        }\n        return -1;", " \
    \       var dict = new Dictionary<long, int>();\n        foreach (var i in lst)\n\
    \            if (dict.ContainsKey(i) && dict[i] < 0)\n                dict[i]\
    \ = 1;\n            else\n                dict[i] = 0;\n\n        var result =\
    \ -1;\n        foreach (var k in dict.Keys)\n            if (k > result)\n   \
    \             result = k;\n\n        return result;", "        long result = -1;\n\
    \        if (lst[0] > 0) {\n            long freq = 0;\n            foreach(long\
    \ i in lst) {\n                if (freq < i) freq = i;\n            }\n      \
    \      if (freq >= lst[0]) {\n                result = lst[0];\n            }\n\
    \        }\n        return result;", "        var max = 0;\n        long freq\
    \ = 0;\n        foreach (var v in lst) {\n            freq += 1;\n           \
    \ if (freq > max) {\n                max = freq;\n            }\n        }\n \
    \       if (freq > max) {\n            return -1;\n        }\n        return max;",
  "        if (lst.Count < 1) return -1L;\n        long maxFrequency = -1L;\n    \
    \    long maxValue = 1L;\n        long currentFrequency = 1L;\n        int i =\
    \ 0;\n        foreach (long value in lst) {\n            if (currentFrequency\
    \ < value) {\n                currentFrequency = value;\n                maxFrequency\
    \ = currentFrequency;\n                maxValue = value;\n            } else {\n\
    \                currentFrequency = value;\n                if (currentFrequency\
    \ > maxFrequency) maxFrequency = currentFrequency;\n                if (currentFrequency\
    \ > maxValue) {\n                    maxFrequency = currentFrequency;\n      \
    \              maxValue = value;\n                }\n            }\n         \
    \   i++;\n        }\n        if (maxFrequency == -1L) return -1L;\n        return\
    \ maxValue;", "        long largestFreq = -1L;\n        long currFreq = -1;\n\
    \        foreach (var item in lst) {\n            currFreq++;\n            if\
    \ (currFreq > largestFreq) {\n                largestFreq = currFreq;\n      \
    \      }\n            if (currFreq >= item) {\n                currFreq--;\n \
    \           }\n        }\n        return largestFreq == -1 ? -1L : largestFreq;",
  "        long n = lst.Count(x => x > 0);\n        long i = 1;\n        while (n\
    \ < i) {\n            i = 2;\n            n = lst.Count(x => x >= i);\n      \
    \  }\n        if (n == i) \n            return -1;\n        int j = 0;\n     \
    \   int k = 1;\n        int l = lst.Count();\n        int[] cnt = new int[(int)l];\n\
    \        int[] arrFreq = new int[l];\n        while (k <= l) {\n            for\
    \ (int a = 0; a < cnt[k]; a++)\n                j++;\n            if (j >= cnt[k])\n\
    \                j = 0;\n            cnt[k]++;\n            arrFreq[k] = j;\n\
    \            k++;\n        }\n        int m = 1;\n        long ans = -1;\n   \
    \     for (int a = 0; a < l; a++) {\n            if (arrFreq[a] > m && arrFreq[a]\
    \ >= i) {\n                m = arrFreq[a];\n                ans = a;\n       \
    \     }\n        }\n        return ans;", "        long[] arr = lst.ToArray();\n\
    \        if (arr.Length == 0) {\n            return -1;\n        }\n        long\
    \ maxCount = arr[0];\n        long maxVal = arr[0];\n        for (int i = 1; i\
    \ < arr.Length; i++) {\n            long count = arr[i];\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxVal = arr[i];\n\
    \            }\n            if (maxCount > arr[i]) {\n                return -1;\n\
    \            }\n        }\n        return maxVal;", "        // TODO: Complete\
    \ this method\n        var result = lst.Select((value, index) => new {value, index}).Max(x\
    \ => x.value);\n        if (lst.IndexOf(result) > -1) {\n            var count\
    \ = lst.Count(i => i == result);\n            return lst.IndexOf(result) == lst.Count\
    \ ? -1 : lst.IndexOf(result) > lst.Count ? count : -1;\n        }\n        return\
    \ -1;", "        long freq = -1, maxVal = -1;\n        long minVal = 10000000;\n\
    \        long temp;\n        for (int i = 0; i < lst.Count; i++) {\n         \
    \   if (lst[i] > 0 && freq == 0) {\n                freq = lst[i];\n         \
    \   }\n            if (lst[i] < minVal) {\n                minVal = lst[i];\n\
    \            }\n            if (lst[i] > maxVal) {\n                maxVal = lst[i];\n\
    \            }\n            if (lst[i] == 0) {\n                temp = (long)freq;\n\
    \                freq = lst[i];\n                if (freq > temp) {\n        \
    \            temp = freq;\n                }\n            }\n        }\n     \
    \   if (freq == -1) {\n            return -1;\n        }\n        return maxVal\
    \ - minVal + freq;", "        long max = 0;\n        int freq = 0;\n\n       \
    \ foreach (var i in lst) {\n            if (i > 0) freq++;\n            max =\
    \ Math.Max(i, freq > freq ? freq : max);\n        }\n\n        return max > 0\
    \ ? max : -1;"]
stop_tokens:
- "\n    }\n"
