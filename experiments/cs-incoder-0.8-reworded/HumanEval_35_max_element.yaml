name: HumanEval_35_max_element
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    // >>>\
  \ MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L,\
  \ (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n\
  \    // (123L)\n    public static long MaxElement(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxElement((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(MaxElement((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L,\
  \ (long)9L, (long)0L, (long)124L, (long)1L, (long)-10L}))) == (124L));\n    }\n\n\
  }\n"
completions: ["        if (l.Count == 0)\n            return 0;\n        long ret\
    \ = l[0];\n        for (int i = 1; i < l.Count; i++)\n            ret = Math.Max(ret,\
    \ l[i]);\n        return ret;", "        if (l.Count <= 0) {\n            return\
    \ 0;\n        }\n        long maxElement = l.FirstOrDefault();\n        foreach\
    \ (var item in l) {\n            if (item > maxElement) {\n                maxElement\
    \ = item;\n            }\n        }\n        return maxElement;", "        long\
    \ max = 0;\n        long curr = 1;\n        foreach (long x in l) {\n        \
    \    if (x > max)\n                max = x;\n            curr *= x;\n        }\n\
    \        return max;", "        l.Sort();\n        long m = 0L;\n        foreach\
    \ (long i in l)\n            foreach (long j in l)\n                if (i != j\
    \ && i > m)\n                    m = i;\n        return m;", "        long result\
    \ = 1L;\n        foreach (long num in l) {\n            if (result > num) {\n\
    \                result = num;\n            }\n        }\n        return result;",
  "        long max = l.Max();\n        if (max < 0)\n            return max;\n  \
    \      foreach (var n in l)\n            if (n >= max)\n                max =\
    \ n;\n        return max;", "        long[] arr = l.ToArray();\n        long max\
    \ = arr[0];\n        for (int i = 1; i < arr.Length; i++) {\n            if (arr[i]\
    \ > max) {\n                max = arr[i];\n            }\n        }\n        return\
    \ max;", "        if (l.Count == 0) {\n            throw new Exception(\"Cannot\
    \ find max. element of an empty list!\");\n        }\n        var max = l.Max();\n\
    \        if (max < l.Min()) {\n            max = l.Min();\n        }\n       \
    \ return max;", "        long m = l.First();\n        foreach (long n in l)\n\
    \            m = Math.Max(n, m);\n        return m;", "        var result = l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] > result) {\n\
    \                result = l[i];\n            }\n        }\n        return result;",
  "        long max = l.GetEnumerator().Max();\n        Debug.Assert(max != 0L);\n\
    \        return max;", "        if (l.Count == 0)\n            return 0;\n   \
    \     long maxValue = l[0];\n        for (int i = 1; i < l.Count; ++i) {\n   \
    \         if (l[i] > maxValue)\n                maxValue = l[i];\n        }\n\
    \        return maxValue;", "        long maxElement = Long.MinValue;\n\n    \
    \    foreach (long i in l) {\n            if (maxElement < i) maxElement = i;\n\
    \        }\n        return maxElement;", "        // Sort descending by comparing\
    \ each value to each subsequent value.\n        long maxValue = long.MaxValue;\n\
    \        for (int i = 0; i < l.Count - 1; ++i) {\n            if (l[i] > maxValue)\
    \ {\n                maxValue = l[i];\n            }\n        }\n        return\
    \ maxValue;", "        if (l.Count == 0) return 0L;\n        var v = l.OrderByDescending(x\
    \ => x).First();\n        return v;", "        long max = l[0], idx = 1;\n   \
    \     for (long i = 2; i < l.Count; i++)\n            if (l[i] > max) max = l[i],\
    \ idx = i;\n        return (max == l[idx] ? idx : -1);", "        var r = new\
    \ Random();\n        var n = l.Count;\n        var max = l.First();\n        long\
    \ maxElem = max;\n        foreach (var element in l.Skip(1))\n            if (element\
    \ > maxElem)\n                maxElem = element;\n        return maxElem;", '        return
    l.Max();', "        var max = l.First();\n        foreach (var i in l.Skip(1))\
    \ {\n            if (i < max)\n                max = i;\n        }\n        return\
    \ max;", "        if (l.Count < 1) throw new ArgumentException(\"Must have at\
    \ least one element.\");\n        long result = long.MinValue;\n        foreach\
    \ (long i in l) {\n            if (i > result) result = i;\n        }\n      \
    \  return result;", "        var max = l.Max();\n        var l = l.FindIndex((i)\
    \ => i != max);\n        if (l < 0) return max;\n        return MaxElement(l,\
    \ l.FindIndex((i) => i > max));", "        // Using LINQ\n        //return l.Max();\n\
    \        // Using a loop\n        long max = long.MinValue;\n        foreach (long\
    \ i in l) {\n            if (i > max)\n                max = i;\n        }\n \
    \       return max;", "        long max = 0;\n        foreach (var i in l) {\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        return max;", "        long maxVal = long.MinValue;\n        foreach\
    \ (long x in l)\n        {\n            if (x > maxVal)\n            {\n     \
    \           maxVal = x;\n            }\n        }\n        return maxVal;", '        return
    l.OrderByDescending(x => x).First();', "        if (l.Count == 0) throw new Exception(\"\
    No elements\");\n        return l.Max();", "        long max = l.First();\n  \
    \      foreach (long val in l)\n            if (val > max)\n                max\
    \ = val;\n        return max;", "        long maxValue = long.MinValue;\n    \
    \    foreach (long element in l) {\n            if (maxValue < element)\n    \
    \            maxValue = element;\n        }\n        return maxValue;", "    \
    \    long retVal = 0L;\n        long curr = l.Max();\n        foreach (long n\
    \ in l) {\n            if (n > curr) {\n                curr = n;\n          \
    \      retVal = curr;\n            }\n        }\n        return retVal;", "  \
    \      long result = l.First();\n        foreach (var element in l.Skip(1)) {\n\
    \            if (element > result)\n                result = element;\n      \
    \  }\n        return result;", "        if (l.Count == 0) {\n            return\
    \ 0;\n        }\n\n        // Use a binary search\n        long max = l.Min();\n\
    \        for (int i = 0; i < l.Count; ++i) {\n            long mid = (long)(l.Count\
    \ * 0.5);\n            if (l.ElementAt(i) > max) {\n                max = l.ElementAt(i);\n\
    \            }\n            else if (l.ElementAt(i) < mid) {\n               \
    \ max = mid;\n            }\n        }\n        return max;", "        if (l ==\
    \ null) return 0L;\n        var max = l.Take(l.Count - 1).Max();\n        if (l.Count\
    \ > 1) max = Math.Max(max, l.ElementAtOrDefault(l.Count - 1));\n        return\
    \ max;", "        long[] arr = l.ToArray();\n        Array.Sort(arr);\n      \
    \  long maxValue = arr[0];\n        int i = 1;\n        while (i < arr.Length\
    \ && arr[i] != maxValue) {\n            maxValue = arr[i];\n            ++i;\n\
    \        }\n        return maxValue;", '        return l.Aggregate((a, b) => a
    > b ? a : b);', "        long max_val = l[0];\n        bool first_element = true;\n\
    \        foreach (long i in l) {\n            if (first_element) {\n         \
    \       first_element = false;\n            } else {\n                if (i >\
    \ max_val)\n                    max_val = i;\n            }\n        }\n     \
    \   return max_val;", '        return l.Max();', "        if (l.Count < 1) throw\
    \ new ArgumentException(\"Input list is empty\");\n        var max = l.First();\n\
    \        for (var i = 1; i < l.Count; i++)\n            if (l[i] > max) max =\
    \ l[i];\n        return max;", "        long maxElem = l.Last();\n        for\
    \ (int i = l.Count - 1; i >= 0; i--)\n            if (l[i] > maxElem)\n      \
    \          maxElem = l[i];\n        return maxElem;", "        long max = long.MinValue;\n\
    \        foreach (long i in l) {\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        return max;", "        long max\
    \ = 0L;\n        for (int i = 0; i < l.Count; i++) {\n            max = Math.Max(max,\
    \ l[i]);\n        }\n        return max;", "        Debug.Assert(l != null, \"\
    Null list.\");\n        Debug.Assert(l.Count > 0, \"Zero element list.\");\n \
    \       Debug.Assert(l.Count == 1 || l.Count == l.Capacity, \"List is not of length\
    \ 1 or its length.\");\n        Debug.Assert(l.Count == 1, \"Only one element\
    \ in list to compare max with\");\n        return l.OrderByDescending(x => x).First();",
  "        if (l.Count == 0)\n            return 0;\n        long max = l.First();\n\
    \        foreach (long n in l.Skip(1))\n            if (n > max)\n           \
    \     max = n;\n        return max;", "        if (l.Count == 0) return 0L;\n\
    \        long maxValue = l.Min();\n        foreach (long i in l)\n           \
    \ if (i > maxValue)\n                maxValue = i;\n        return maxValue;",
  "        if (l.Count == 0) return 0L;\n        long max = l.First();\n        foreach\
    \ (long el in l)\n            if (el > max)\n                max = el;\n     \
    \   return max;", "        var x = l.Max();\n        l.Remove(x);\n        return\
    \ l.Max();", "        var s = l.Sum();\n        var m = l.Max();\n        var\
    \ a = l.Count / 2;\n        bool okay = s > m && ((s > l[a]) || (m == 0));\n \
    \       Debug.Assert(okay);\n        return okay ? m : Math.Min(s, Math.Max(l,\
    \ 0L));", "        long result = long.MinValue;\n        foreach (long number\
    \ in l) {\n            if (number > result) {\n                result = number;\n\
    \            }\n        }\n        return result;", "        if (l.Count == 0)\
    \ {\n            return 0;\n        }\n        long maxValue = l[0];\n       \
    \ for (int i = 1; i < l.Count; i++) {\n            if (l[i] > maxValue) {\n  \
    \              maxValue = l[i];\n            }\n        }\n        return maxValue;",
  "        Debug.Assert(l != null);\n\n        if (l.Count == 0) return 0L;\n\n  \
    \      long max = l.First();\n        long min = l.First();\n        for (int\
    \ i = 1; i < l.Count; i++)\n        {\n            max = Math.Max(max, l[i]);\n\
    \            min = Math.Min(min, l[i]);\n        }\n        return Math.Max(max,\
    \ min);", "        if (l.Count == 0)\n            throw new ArgumentException();\n\
    \        return l.OrderByDescending(x => x).First();", "        long max = 0L;\n\
    \        foreach (var i in l) {\n            if (max < i)\n                max\
    \ = i;\n        }\n        return max;", "        long max = l.First();\n    \
    \    foreach (long val in l) {\n            if (val > max) max = val;\n      \
    \  }\n        return max;", "        long max = l[0];\n        long max2 = l[0];\n\
    \        foreach (var item in l) {\n            if (item > max) {\n          \
    \      max = item;\n            }\n            if (item > max2) {\n          \
    \      max2 = item;\n            }\n        }\n        return max;", "       \
    \ return l.Aggregate(new { Max = long.MinValue }, (a, i) => Math.Max(a.Max, i))\n\
    \                .Max;", "        long max = long.MinValue;\n        foreach (long\
    \ l in l) {\n            if (max < l)\n                max = l;\n        }\n \
    \       return max;", "        var maxElement = l.OrderByDescending(i => i).FirstOrDefault();\n\
    \        if (maxElement == null) return 0L;\n        return maxElement;", "  \
    \      long max = l.GetMax();\n        if (max == long.MinValue) return long.MinValue;\n\
    \        for (int i = 0; i < l.Count; i++) {\n            if (l[i] > max) max\
    \ = l[i];\n        }\n        return max;", "        long max = (long)0;\n   \
    \     foreach (var i in l) {\n            if (i > max) max = i;\n        }\n \
    \       return max;", "        long max = l.FirstOrDefault();\n        foreach\
    \ (var e in l.Skip(1)) {\n            if (e > max)\n                max = e;\n\
    \        }\n        return max;", "        var m = long.MaxValue;\n        foreach\
    \ (long e in l) {\n            m = Math.Max(m, e);\n        }\n        return\
    \ m;", '        return l.Aggregate(0, (x, y) => x.CompareTo(y) > 0 ? x : y);',
  "        long max = 0;\n        bool neg = false;\n        long cur;\n        foreach\
    \ (long x in l)\n        {\n            neg = (x < 0L);\n            cur = neg\
    \ ? -x : x;\n            if (max < cur)\n                max = cur;\n        }\n\
    \        if (neg)\n            max = -max;\n        return max;", "        if\
    \ (l.Count == 0)\n            throw new Exception(\"No element to find\");\n \
    \       long max = l[0];\n        long max2 = max;\n        long tempMax = max;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            tempMax = Math.Max(tempMax,\
    \ max);\n            max = Math.Max(max, max2);\n            max2 = tempMax;\n\
    \            max = Math.Max(max, max);\n            Console.WriteLine(tempMax\
    \ + \" \" + max);\n        }\n        return max;", "        // If the list is\
    \ empty or the list is null, return null.\n        if (l == null || l.Count ==\
    \ 0) return 0;\n\n        // Create a long and count the maximum.\n        long\
    \ max = 0L;\n        for (int i = 0; i < l.Count; i++) {\n            if (max\
    \ < l[i]) max = l[i];\n        }\n\n        return max;", "        var list =\
    \ l.AsEnumerable();\n        list.Sort();\n        var max = list[0];\n      \
    \  for (int i = 1; i < list.Count; i++) {\n            if (list[i] > max) {\n\
    \                max = list[i];\n            }\n        }\n        return max;",
  "        long maxValue = long.MinValue;\n        foreach (long i in l) {\n     \
    \       maxValue = Math.Max(i, maxValue);\n        }\n        return maxValue;",
  "        long res = long.MinValue;\n        foreach (long v in l) {\n          \
    \  res = Math.Max(res, v);\n        }\n        return res;", "        if (l ==\
    \ null) return 0L;\n        long max = 0L;\n        foreach (var item in l) {\n\
    \            if (item > max) max = item;\n        }\n        return max;", " \
    \       var m = Int64.MaxValue;\n        foreach (var x in l) {\n            m\
    \ = Math.Max(x, m);\n        }\n        return m;", "        if (l.Count > 0)\n\
    \            return l.OrderByDescending(x => x).First();\n        else\n     \
    \       return 0;", "        if (l.Count == 0) {\n            return 0;\n    \
    \    }\n        var m = 0;\n        var minValue = l[0];\n        var maxValue\
    \ = l[0];\n        foreach (var i in l) {\n            if (i == minValue) {\n\
    \                m = i;\n            } else if (i > minValue && i < maxValue)\
    \ {\n                m = i;\n                minValue = minValue;\n          \
    \  }\n        }\n        return m;", "        long maxValue = long.MinValue;\n\
    \        foreach (long num in l)\n        {\n            if (num > maxValue)\n\
    \            {\n                maxValue = num;\n            }\n        }\n  \
    \      return maxValue;", "        if (l.Count <= 0) return 0;\n        long m\
    \ = long.MaxValue;\n        foreach (var v in l) {\n            m = Math.Max(m,\
    \ v);\n        }\n        return m;", "        if (l.Count == 0) {\n         \
    \   return 0;\n        }\n        long max = l.First();\n        foreach (long\
    \ x in l) {\n            if (x > max)\n                max = x;\n        }\n \
    \       return max;", "        var n = l.Count;\n        long[] d = l.ToArray();\n\
    \        Array.Sort(d);\n        if (n <= 1) return d[0];\n        long max =\
    \ d[0];\n        long tempMax = d[0];\n        for (int i = 1; i < n; i++) {\n\
    \            if (d[i] > tempMax) {\n                tempMax = d[i];\n        \
    \    }\n        }\n        max = Math.Max(tempMax, max);\n        return max;",
  "        if (l == null) throw new ArgumentNullException(nameof(l));\n        long\
    \ max = l.Max();\n        int n = l.Count;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (l[i] > max) max = l[i];\n        }\n        return max;",
  "        long max = l[0];\n        foreach (long x in l) {\n            if (x >\
    \ max) max = x;\n        }\n        return max;", "        var x = new List<long>()\
    \ { };\n        foreach (var x in l)\n        {\n            x = x.CompareTo(MaxElement(x));\n\
    \            if (x > 0)\n            {\n                break;\n            }\n\
    \        }\n        return l.ElementAt(l.Count - 1);", "        long max = l.Max();\n\
    \        return max;", "        long max = l[0];\n        foreach (var x in l.Skip(1))\n\
    \            if (x > max)\n                max = x;\n        return max;", " \
    \       if (l.Count < 2)\n            return l[0];\n        long m = l[0];\n \
    \       foreach (long e in l)\n            if (e > m)\n                m = e;\n\
    \        return m;", '        return l.Sum(x => Math.Abs(x)) > 0 ? Math.Max(l.Max())
    : 0L;', "        if (l.Count == 0) {\n            throw new ArgumentException(\"\
    List is empty\");\n        }\n        return l.OrderByDescending(i => i).First();",
  "        long res = 0;\n        foreach (long v in l) {\n            bool ok = false;\n\
    \            foreach (long v2 in l) {\n                if (v != v2) {\n      \
    \              long diff = v - v2;\n                    if (diff > Long.MaxValue)\
    \ {\n                        ok = false;\n                        break;\n   \
    \                 }\n                    if (diff < Long.MinValue) {\n       \
    \                 ok = true;\n                        break;\n               \
    \     }\n                }\n            }\n            if (ok) {\n           \
    \     res = Math.Max(res, v);\n            }\n        }\n        return res;",
  "        long max = l.First();\n        for (int i = 0; i < l.Count - 1; i++)\n\
    \            if (l[i] > max)\n                max = l[i];\n        return max;",
  "        long max = 0;\n        foreach (long x in l)\n        {\n            if\
    \ (max < x)\n                max = x;\n        }\n        return max;", "    \
    \    if (l.Count == 0)\n            return 0;\n        long max = l[0];\n    \
    \    for (int i = 1; i < l.Count; i++)\n            if (l[i] > max)\n        \
    \        max = l[i];\n        return max;", "        if (l.Count == 0) throw new\
    \ InvalidOperationException(\"List is empty\");\n        long max = l.First();\n\
    \        foreach (long a in l)\n            if (a > max) max = a;\n        return\
    \ max;", '        return l.Max();', '        return l.Aggregate((x,y) => x.CompareTo(y)
    == 1 ? x : y);', "        var max = l.First();\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            if (max == l[i]) {\n                continue;\n        \
    \    }\n            max = l[i];\n        }\n        return max;", "        if\
    \ (l.Count == 0) return 0;\n\n        long maxValue = l[0];\n\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > maxValue) {\n           \
    \     maxValue = l[i];\n            }\n        }\n\n        return maxValue;",
  "        long result = Long.MinValue;\n        foreach (long l in l) {\n       \
    \     if (l > result) {\n                result = l;\n            }\n        }\n\
    \        return result;", "        if (l == null || l.Count <= 0) {\n        \
    \    return 0;\n        }\n\n        var m = l.Max();\n        long maxIndex =\
    \ 0;\n        int minIndex = 0;\n\n        while (true) {\n            var cur\
    \ = l.ElementAt(maxIndex);\n            var next = l.ElementAt(minIndex);\n\n\
    \            if (cur < next) {\n                maxIndex++;\n                if\
    \ (maxIndex == l.Count) {\n                    maxIndex--;\n                 \
    \   break;\n                }\n            } else {\n                minIndex++;\n\
    \                if (minIndex == l.Count) {\n                    minIndex--;\n\
    \                    break;\n                }\n            }\n        }\n\n \
    \       return m;", "        var m = l.Max();\n        long ret = m;\n       \
    \ foreach (long x in l) {\n            if (x < m)\n                ret = x;\n\
    \        }\n        return ret;", "        if (l.Count == 0)\n            return\
    \ 0;\n        long[] v = new long[l.Count];\n        long x = 0;\n        for\
    \ (int i = 0; i < l.Count; ++i)\n            v[i] = l[i];\n        for (int i\
    \ = l.Count - 1; i >= 0; --i)\n            x = v[i] > x ? v[i] : x;\n        return\
    \ x;", "        var max = l.ElementAt(0);\n        foreach (var item in l) {\n\
    \            if (item > max) {\n                max = item;\n            }\n \
    \       }\n        return max;", "        long max = long.MinValue;\n        foreach\
    \ (long num in l) if (num > max) max = num;\n        return max;", "        //\
    \ Sort list\n        Array.Sort(l);\n        // Find the largest element\n   \
    \     var max = l.First();\n        for (int i = 1; i < l.Count; i++) {\n    \
    \        if (max == l[i]) {\n                continue;\n            }\n      \
    \      max = l[i];\n        }\n        return max;", '        return l.Max();',
  "        long largest = -9223372036854775808; // 2^63 - 1\n\n        // Iterate\
    \ through all items in the list.\n        foreach (long item in l) {\n       \
    \     // If the current item is larger than the largest item, update the largest\
    \ item.\n            if (item > largest) {\n                largest = item;\n\
    \            }\n        }\n\n        // Return the largest value.\n        return\
    \ largest;", '        return l.Aggregate((x, y) => Math.Max(x, y));', "      \
    \  long max = l.First();\n        foreach (long n in l.Skip(1)) {\n          \
    \  if (n > max) {\n                max = n;\n            }\n        }\n      \
    \  return max;", "        var res = 0;\n        foreach (var elem in l) {\n  \
    \          if (elem > res) res = elem;\n        }\n        return res;", "   \
    \     long max = l.FirstOrDefault();\n        foreach (long i in l) if (i > max)\
    \ max = i;\n        return max;", "        long max = l.FirstOrDefault();\n  \
    \      foreach (long value in l) {\n            if (value > max)\n           \
    \     max = value;\n        }\n        return max;", '        return l.Max();',
  "        long max = l.ElementAt(l.Count - 1);\n        foreach (long item in l)\
    \ {\n            if (item > max) {\n                max = item;\n            }\n\
    \        }\n        return max;", "        long maxValue = long.MinValue;\n  \
    \      foreach (long element in l)\n            if (element > maxValue)\n    \
    \            maxValue = element;\n        return maxValue;", "        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l[0] != 0);\n        Debug.Assert(l[l.Count - 1]\
    \ != 0);\n        var max = l[0];\n        for (var i = 1; i < l.Count; i++) {\n\
    \            if (l[i] > max) max = l[i];\n        }\n        return max;", " \
    \       long max = 0;\n        for (int i = 0; i < l.Count; ++i) {\n         \
    \   max = Math.Max(max, l[i]);\n        }\n        return max;", "        if (l\
    \ == null) {\n            throw new ArgumentNullException(\"l\");\n        }\n\
    \        long max = 0;\n        foreach (long element in l) {\n            if\
    \ (element > max) {\n                max = element;\n            }\n        }\n\
    \        return max;", '        return l.Max();', "        long max = 0;\n   \
    \     if (l.Count > 0)\n            max = l[0];\n        foreach (long i in l)\n\
    \            if (i > max)\n                max = i;\n        return max;", '        return
    l.Aggregate((a, b) => Math.Max(a, b));', "        long max = 0;\n        long\
    \ min = 0;\n        if (l.Count == 0) {\n            return -1;\n        }\n\n\
    \        long minVal = l[0];\n\n        foreach (long x in l) {\n            if\
    \ (x < minVal) {\n                min = x;\n                minVal = x;\n    \
    \        }\n            else {\n                if (x > max) {\n             \
    \       max = x;\n                }\n            }\n        }\n        Debug.Assert(min\
    \ < max);\n        return max;", "        if (l.Count == 0) return 0;\n      \
    \  long max = l[0];\n        bool first = true;\n        foreach (long v in l)\
    \ {\n            if (first) {\n                first = false;\n            }\n\
    \            else {\n                if (max < v) {\n                    max =\
    \ v;\n                }\n            }\n        }\n        return max;", "   \
    \     long m = Int64.MinValue;\n        foreach (var x in l) {\n            if\
    \ (x > m) m = x;\n        }\n        return m;", "        long m = long.MinValue;\n\
    \        foreach (var i in l) {\n            m = Math.Max(i, m);\n        }\n\
    \        return m;", "        if (l.Count == 0) return 0L;\n        long max =\
    \ 0L;\n        long max2 = -System.Int32.MaxValue;\n        foreach (long i in\
    \ l) {\n            long tmp = 0L;\n            if (max < i) { tmp = i; }\n  \
    \          else if (max2 > i) { tmp = i; }\n            else { tmp = max; }\n\
    \            max = tmp;\n            max2 = i;\n        }\n        return max;",
  "        // Sort list descending.\n        l.Sort((x, y) => y > x);\n        long\
    \ min = l[0], max = l[0], maxElement = l[0];\n        foreach (long i in l) {\n\
    \            if (i > max) {\n                max = i;\n                maxElement\
    \ = i;\n            }\n            if (i < min) {\n                min = i;\n\
    \            }\n        }\n        return (maxElement > min) ? maxElement : min;",
  "        long res = 0;\n        foreach (long i in l) {\n            if (i > res)\n\
    \                res = i;\n        }\n        return res;", "        if (l.Count\
    \ == 0) return 0;\n        return l.Max();", '        return l.OrderByDescending(i
    => i).First();', "        long[] a = l.ToArray();\n        long max = a[0];\n\
    \        for(int i = 1; i < a.Length; i++) {\n            if(a[i] > max) {\n \
    \               max = a[i];\n            }\n        }\n        return max;", " \
    \       long max = 0;\n        foreach(var i in l) {\n            max = Math.Max(max,\
    \ i);\n        }\n        return max;", "        long max = l.Max();\n       \
    \ return max;", "        long max = l.First();\n        for (int i = l.Count -\
    \ 1; i >= 0; i--) {\n            if (max < l[i])\n                max = l[i];\n\
    \        }\n        return max;", "        long maxElem = long.MinValue;\n   \
    \     foreach (long item in l) {\n            if (item > maxElem)\n          \
    \      maxElem = item;\n        }\n        return maxElem;", "        long maxVal\
    \ = -(long)Int32.MaxValue;\n        foreach (long num in l)\n            if (num\
    \ > maxVal)\n                maxVal = num;\n        return maxVal;", "       \
    \ double maxValue = double.PositiveInfinity;\n        long maxValueIndex = -1;\n\
    \        long curElement = -1;\n        foreach(var num in l) {\n            if\
    \ (num > maxValue) {\n                maxValue = num;\n                maxValueIndex\
    \ = curElement;\n            }\n            curElement = num;\n        }\n   \
    \     return maxValue;", "        if (l.Count > 0)\n            return l[0];\n\
    \n        long largest = long.MaxValue;\n        foreach (long i in l)\n     \
    \       if (i > largest)\n                largest = i;\n\n        return largest;",
  "        long max = 0;\n        foreach (long x in l) {\n            if (x > max)\n\
    \                max = x;\n        }\n        return max;", "        if (l ==\
    \ null) return 0L;\n        if (l.Count == 0) return 0L;\n\n        long max =\
    \ 0L;\n        long maxElem = l.First();\n        foreach (long x in l.Skip(1))\
    \ {\n            if (x > max) {\n                max = x;\n                maxElem\
    \ = x;\n            }\n        }\n        return max;", "        long max = l.OrderByDescending(m\
    \ => m).First();\n        foreach (var element in l) {\n            if (element\
    \ > max) max = element;\n        }\n        return max;", "        if (l.Count\
    \ == 0)\n            return 0;\n        var lt = l.Max();\n        if (lt.Equals(l.First()))\
    \ {\n            l.Remove(lt.ToString());\n            return MaxElement(l);\n\
    \        }\n        return lt;", '        return l.Max();', "        if (l ==\
    \ null) return 0L;\n        long max = l[0];\n        foreach (var e in l)\n \
    \           if (e > max) max = e;\n        return max;", "        var m = new\
    \ long[1];\n        l.ForEach(l => { if (l > m[0]) m[0] = l; });\n        return\
    \ m[0];", "        if (l.Count == 0) return 0L;\n        long result = l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] > result) result\
    \ = l[i];\n        }\n        return result;", "        if (l.Count == 0) return\
    \ 0;\n        long maxElement = l[0];\n        long previousElement = l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] > previousElement)\
    \ {\n                maxElement = previousElement;\n            } else {\n   \
    \             previousElement = maxElement;\n            }\n        }\n      \
    \  return maxElement;", "        if (l.Count <= 0) return 0;\n        long max\
    \ = l.Max();\n        foreach (long n in l) {\n            if (n > max) return\
    \ n;\n        }\n        return max;", "        Debug.Assert(l != null);\n   \
    \     Debug.Assert(l.Count > 0);\n\n        if (l.Count == 0) return 0L;\n\n \
    \       long max = 0L;\n        long lastElement = l.First();\n\n        foreach\
    \ (long elem in l)\n            if (elem > max) max = elem;\n\n        if (max\
    \ > lastElement) max = lastElement;\n\n        return max;", "        var max\
    \ = l.Max();\n        // This code is valid for positive numbers and longs\n \
    \       if (l.Count > 0 && max < l[0])\n            return l[0];\n        return\
    \ max;", "        var max = long.MinValue;\n        foreach (var item in l) {\n\
    \            if (item > max) {\n                max = item;\n            }\n \
    \       }\n        return max;", "        long max = l.Max();\n        return\
    \ max;", "        long max = long.MinValue;\n        foreach (long e in l)\n \
    \           if (max < e) max = e;\n        return max;", "        long max = 0L;\n\
    \        foreach (var item in l) {\n            max = Math.Max(max, item);\n \
    \       }\n        return max;", "        long result = long.MinValue;\n     \
    \   foreach (long n in l) {\n            if (n < result) result = n;\n       \
    \ }\n        return result;", "        long max = 0L;\n        foreach (long i\
    \ in l)\n            if (i > max)\n                max = i;\n        return max;",
  "        long max = long.MinValue;\n        foreach (long x in l) {\n          \
    \  max = Math.Max(max, x);\n        }\n        return max;", "        var max\
    \ = l.First();\n        foreach (var el in l) {\n            if (el > max)\n \
    \               max = el;\n        }\n        return max;", "        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= int.MaxValue);\n        Debug.Assert(l.All(x\
    \ => x >= 0));\n        Debug.Assert(l.All(x => x < int.MaxValue));\n\n      \
    \  long maxVal = l.First();\n        long maxIdx = 1;\n\n        foreach (var\
    \ v in l) {\n            if (maxIdx <= int.MaxValue/2) {\n                if (maxIdx\
    \ >= v) {\n                    maxVal = v;\n                    maxIdx = 1;\n\
    \                } else if (maxIdx <= v) {\n                    maxIdx += 1;\n\
    \                }\n            } else {\n                if (maxIdx >= v) {\n\
    \                    maxVal = v;\n                    maxIdx = 1;\n          \
    \      }\n            }\n        }\n        return maxVal;", "        long max\
    \ = l[0];\n        long tempMax = max;\n        foreach (var el in l)\n      \
    \  {\n            if (el > max) max = el;\n            if (tempMax < el) tempMax\
    \ = el;\n        }\n        if (tempMax != max) throw new Exception(\"Error MaxElement\"\
    );\n        return max;", "        long max = l[0];\n        for (int i = 1; i\
    \ < l.Count; i++) {\n            if (l[i] > max) {\n                max = l[i];\n\
    \            }\n        }\n        return max;", "        if (l.Count == 0) return\
    \ 0L;\n        long max = l[0], max = max*1000000000L;\n        for (int i = 0;\
    \ i < l.Count; i++) {\n            max = Math.Max(max, l[i]);\n        }\n   \
    \     return max;", "        long max = long.MinValue;\n        for (int i = 0;\
    \ i < l.Count; i++) {\n            if (max < l[i]) {\n                max = l[i];\n\
    \            }\n        }\n        return max;", "        if (l.Count == 0) {\n\
    \            throw new ArgumentException(\"List is empty.\");\n        }\n   \
    \     long maxElement = l[0];\n        long curElement = l[0];\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > curElement) {\n         \
    \       curElement = l[i];\n            }\n            maxElement = (curElement\
    \ > maxElement) ? curElement : maxElement;\n        }\n        return maxElement;",
  "        if (l.Count == 0) return 0L;\n        var max = l.First();\n        long\
    \ i = 1;\n        foreach (var item in l.Skip(1)) {\n            if (item > max)\
    \ {\n                max = item;\n            }\n        }\n        return max;",
  "        l.Sort();\n        long maxval = l[0];\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > maxval) {\n                maxval = l[i];\n \
    \           }\n        }\n        return maxval;", "        long ret = 0;\n  \
    \      if (l.Count > 0) {\n            ret = l.Aggregate((a, b) => a > b ? a :\
    \ b);\n        }\n        return ret;", "        // Use linq to find the maximum\
    \ in the list.\n        long max = l.Max();\n        return max;", '        return
    l.Max();', "        long maxValue = 0L;\n        foreach (long val in l) {\n \
    \           if (maxValue < val)\n                maxValue = val;\n        }\n\
    \        return maxValue;", "        if (l.Count == 0) {\n            throw new\
    \ InvalidOperationException(\"Collection was empty\");\n        }\n        long\
    \ maxValue = l[0];\n        foreach (long value in l)\n            if (value >\
    \ maxValue) {\n                maxValue = value;\n            }\n        return\
    \ maxValue;", "        if (l == null)\n            return 0L;\n        long[]\
    \ v = new long[l.Count];\n        for (int i = 0; i < l.Count; i++) {\n      \
    \      v[i] = l[i];\n        }\n        Array.Sort(v);\n        return v[0];",
  "        long maxValue = long.MinValue;\n        foreach (long value in l)\n   \
    \         if (value > maxValue)\n                maxValue = value;\n        return\
    \ maxValue;", "        long maxVal = l.Count;\n        long currentMax = l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] > currentMax)\
    \ {\n                currentMax = l[i];\n            }\n        }\n        return\
    \ currentMax;", "        long maxElement = long.MinValue;\n        foreach (var\
    \ element in l) {\n            if (maxElement < element)\n                maxElement\
    \ = element;\n        }\n        return maxElement;", "        long res = 0;\n\
    \        foreach (long n in l)\n            res = Math.Max(n, res);\n        return\
    \ res;", "        long maxVal = l[0];\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] > maxVal) {\n                maxVal = l[i];\n      \
    \      }\n        }\n        return maxVal;", "        if (l.Count == 0) return\
    \ 0L;\n\n        // Find maximum element from all elements of the list.\n    \
    \    long maxVal = l[0];\n        for (int i = 0; i < l.Count; i++)\n        \
    \    if (l[i] > maxVal)\n                maxVal = l[i];\n\n        return maxVal;",
  "        if (l.Count == 0) {\n            throw new InvalidOperationException(\"\
    List must have at least one element.\");\n        }\n\n        BigInteger bigInteger\
    \ = BigInteger.Zero;\n        BigInteger largestValue = BigInteger.Zero;\n\n \
    \       foreach(long x in l) {\n            if (BigInteger.Zero.CompareTo(bigInteger)\
    \ > 0) {\n                bigInteger = BigInteger.Zero;\n                largestValue\
    \ = BigInteger.Zero;\n            }\n\n            if (BigInteger.Zero.CompareTo(x)\
    \ > 0) {\n                bigInteger = BigInteger.Zero;\n                largestValue\
    \ = BigInteger.Zero;\n            }\n\n            if (BigInteger.Zero.CompareTo(bigInteger)\
    \ > 0) {\n                bigInteger = BigInteger.Zero;\n                largestValue\
    \ = BigInteger.Zero;\n            }\n\n            if (bigInteger.CompareTo(x)\
    \ > 0) {\n                bigInteger = bigInteger.Add(x);\n                largestValue\
    \ = x;\n            }\n        }\n        return largestValue;", "        Debug.Assert(l\
    \ != null);\n        if (l.Count <= 1) return l[0];\n        long res = l[0];\n\
    \        for(int i = 1; i < l.Count; i++) {\n            if (l[i] > res) res =\
    \ l[i];\n        }\n        return res;", "        long result = Int64.MinValue;\n\
    \        foreach (var i in l) {\n            if (i > result) {\n             \
    \   result = i;\n            }\n        }\n        return result;", '        return
    l.OrderByDescending(x => x).First();', "        long retval = default(long);\n\
    \        for (int i = 0; i < l.Count; i++) {\n            if (retval <= l[i])\
    \ {\n                retval = l[i];\n            }\n        }\n        return\
    \ retval;", "        var max = l.Min();\n        for (int i = 0; i < l.Count;\
    \ ++i) {\n            if (l[i] > max) max = l[i];\n        }\n        return max;",
  "        if (l.Count == 0)\n            return 0;\n        long maxValue = 0;\n\
    \        foreach (long val in l) {\n            if (maxValue < val)\n        \
    \        maxValue = val;\n        }\n        return maxValue;", "        long\
    \ max = 0;\n        foreach (long i in l)\n            max = Math.Max(i, max);\n\
    \        return max;", "        var x = l.Min();\n        var y = l.Max();\n \
    \       if (y == x) {\n            return y;\n        }\n        ulong maxLong\
    \ = ulong.MinValue;\n        for (int i = 0; i <= 1000; i++) {\n            var\
    \ p = (ulong)(i * x / y);\n            if (p > maxLong) {\n                maxLong\
    \ = p;\n            }\n        }\n        return maxLong;", "        long max\
    \ = l[0];\n        foreach (long item in l.Skip(1)) {\n            if (item >\
    \ max) {\n                max = item;\n            }\n        }\n        return\
    \ max;", "        long maxLong = l[0];\n        foreach (long x in l) {\n    \
    \        if (x > maxLong) maxLong = x;\n        }\n        return maxLong;", " \
    \       if (l.Count == 0)\n            throw new ArgumentException(\"List is empty.\"\
    , \"l\");\n        if (l.Count == 1)\n            return l[0];\n        long max\
    \ = l.Min();\n        for (int i = 0; i < l.Count - 1; i++) {\n            max\
    \ = Math.Max(max, l[i]);\n        }\n        return max;", "        long max =\
    \ long.MinValue;\n        foreach (var item in l) {\n            if (item > max)\
    \ {\n                max = item;\n            }\n        }\n        return max;",
  "        long max = l[0];\n        foreach (long value in l)\n            if (value\
    \ > max)\n                max = value;\n        return max;", "        long max\
    \ = l.First();\n        foreach (long i in l.Skip(1)) {\n            if (i > max)\
    \ max = i;\n        }\n        return max;", "        long maxElement = l[0];\n\
    \        foreach (long element in l)\n        {\n            if (element > maxElement)\n\
    \                maxElement = element;\n        }\n        return maxElement;",
  "        double sum = 0;\n        long max = 0, max_index = 0;\n        for (long\
    \ i = 0; i < l.Count; i++) {\n            sum += l[i];\n            if (sum >\
    \ max) {\n                max = sum;\n                max_index = i;\n       \
    \     }\n        }\n        return max_index > 0 ? l[max_index] : -l[0];", " \
    \       long max = l[0], l = 0, m = 0;\n        foreach (var e in l)\n       \
    \ {\n            l += e;\n            max = Math.Max(max, l);\n        }\n   \
    \     return max;", "        var max = l.Max();\n        var result = l.First(i\
    \ => i == max);\n        return result;", "        if (l.Count == 0) {\n     \
    \       throw new ArgumentException(\"Empty list\", \"l\");\n        }\n\n   \
    \     long max = l.First();\n        foreach (long n in l.Skip(1))\n         \
    \   if (n > max)\n                max = n;\n\n        return max;", "        long\
    \ max = l.Count != 0 ? l.Max() : 0;\n        bool isNegative = false;\n      \
    \  if (max == 0) isNegative = true;\n        bool isPositive = max >= 0;\n   \
    \     bool isNegativeNegative = max > 0 && max < 0;\n        bool isNegativePositive\
    \ = max > 0 && max >= 0;\n        bool isZero = max > 0 && max < 0;\n        bool\
    \ isNegativeZero = max < 0 && max >= 0;\n        bool isPositiveZero = max > 0\
    \ && max < 0;\n        bool isPositiveNegativeZero = max > 0 && max < 0 && max\
    \ >= 0;\n        bool isPositiveZeroOrNegativeZero = max > 0 && max < 0 && max\
    \ == 0;\n        bool isNegativeZeroOrPositiveZero = max < 0 && max > 0 && max\
    \ == 0;\n\n        bool isNotEqualToZero = max != 0;\n        bool isNotEqualToNegativeZero\
    \ = max != 0 && max < 0;\n        bool isNotEqualToPositiveZero = max != 0 &&\
    \ max > 0;\n        bool isNotEqualToNegativePositiveZero = max != 0 && max <\
    \ 0 && max >= 0;\n        bool isNotEqualToPositiveNegativeZero = max != 0 &&\
    \ max < 0 && max < 0 && max >= 0;\n\n        // Check if list is all zero\n  \
    \      if (l.Count == 0) return 0L;\n\n        // Check if all elements are positive\
    \ or all negative\n        if (l.Count == 1) { return max; }\n        if (l.Count\
    \ == 2) { return isPositive ? max : -max; }\n        if (l.Count == 3) { return\
    \ isPositive ? max : isNegative ? -max : -max; }\n\n        // Check if all elements\
    \ are equal or positive\n        if (l.Count == 4) { return isPositive ? max :\
    \ isNegative ? -max : isNegative ? -max : isPositive ? max : max; }\n        if\
    \ (l.Count == 5) { return isPositive ? max : isNegative ? isNegative ? -max :\
    \ isPositive ? max : isNegative ? max : isNegative ? -max : max; }\n        if\
    \ (l.Count == 6) { return isPositive ? max : isNegative ? isNegative ? max : isPositive\
    \ ? max : isPositive ? max : isNegative ? max : isNegative ? -max : max; }\n \
    \       if (l.Count == 7) { return isPositive ? max : isNegative ? isNegative\
    \ ? max : isPositive ? max : isPositive ? max : isNegative ? max : isNegative\
    \ ? -max : max; }\n        if (l.Count == 8) { return isPositive ? max : isNegative\
    \ ? isNegative ? max : isPositive ? ", "        if (l.Count == 0)\n          \
    \  return 0L;\n        long max = 0L;\n        long min = 0L;\n        long cur\
    \ = l.First();\n        foreach (long val in l)\n        {\n            if ((val\
    \ < min) || (val > max))\n            {\n                max = val;\n        \
    \        min = val;\n            }\n            else if (val == cur)\n       \
    \     {\n                if (val > max)\n                    max = val;\n    \
    \            if (val < min)\n                    min = val;\n            }\n \
    \           else\n                cur = val;\n        }\n        return (max +\
    \ min) / 2L;", "        long max = l.ElementAt(0);\n        for (long i = 1; i\
    \ < l.Count; i++) {\n            if (l.ElementAt(i) > max)\n                max\
    \ = l.ElementAt(i);\n        }\n        return max;", "        var max = l.First();\n\
    \        foreach (var i in l)\n            if (i < max)\n                max =\
    \ i;\n        return max;", "        Debug.Assert(l != null);\n        return\
    \ l.Aggregate((a, b) => a > b ? a : b);", "        if (l.Count == 0) throw new\
    \ ArgumentException(\"List cannot be empty\");\n        long max = l.First();\n\
    \        foreach (long i in l) {\n            if (i > max) max = i;\n        }\n\
    \        return max;", "        var max = l.FirstOrDefault();\n        for (int\
    \ i = 0; i < l.Count; i++)\n            if (max == null) break;\n            else\
    \ if (l[i] > max) max = l[i];\n        return max;", "        long[] a = new long[l.Count];\n\
    \        l.CopyTo(a, 0);\n        return Math.Max(a);"]
stop_tokens:
- "\n    }\n"
