name: HumanEval_15_string_sequence
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n  \
  \  // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static string\
  \ StringSequence(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringSequence((0L)).Equals((\"\
  0\")));\n    Debug.Assert(StringSequence((3L)).Equals((\"0 1 2 3\")));\n    Debug.Assert(StringSequence((10L)).Equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ["        var sequence = new List<string>();\n        for (long i = 0;\
    \ i < n; i++) {\n            sequence.Add(Convert.ToString(i));\n        }\n \
    \       return string.Join(\" \", sequence.ToArray());", "        var result =\
    \ new StringBuilder();\n        long i = 0;\n        for (; i < n; i++) {\n  \
    \          result.Append(i);\n        }\n        return result.ToString();", " \
    \       var r = new StringBuilder();\n        \n        while (n>0) {\n      \
    \      r.Append(n % 10);\n            n /= 10;\n        }\n        return r.ToString();",
  "        string result = \"\";\n        for(int i = 0; i < ((int)n); i++) {\n  \
    \          result += n.ToString() + \" \";\n        }\n        return result;",
  "        char[] buf = new char[n];\n        long k = n;\n        for(int i = 0;\
    \ i < n; ++i) {\n            buf[i] = '0';\n            if(k % 100L == 0L) {\n\
    \                buf[i] += ' ';\n            }\n            k /= 100L;\n     \
    \   }\n        string s = \"\";\n        foreach(char c in buf) {\n          \
    \  s += c;\n        }\n        return s;", "        if (n < 0 || n > long.MaxValue)\
    \ return \"(error \" + n + \")\";\n        StringBuilder result = new StringBuilder();\n\
    \        long current = 0;\n        while (true) {\n            if (n == current)\
    \ result.Append(current);\n            else if (current == 0 || n == current)\
    \ result.Append(\" \");\n            else\n                result.Append((string)current\
    \ + \" \");\n            current++;\n            if (current == long.MaxValue)\
    \ break;\n        }\n        return result.ToString().TrimEnd();", "        var\
    \ str = new StringBuilder();\n        long counter = 0;\n        while (counter\
    \ < n) {\n            str.Append((counter % 5 + 1).ToString());\n            str.Append(\"\
    \ \");\n            counter++;\n        }\n        if (str.Length > 0)\n     \
    \       str.Remove(str.Length - 1, 1);\n        return str.ToString();", "   \
    \     long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum +=\
    \ i;\n        }\n        string result = new String();\n        long remaining\
    \ = n;\n        while (true) {\n            string tmp = LongToString(sum);\n\
    \            while (tmp.Length < remaining.ToString().Length) {\n            \
    \    tmp += \" \";\n            }\n            result += tmp;\n            sum\
    \ += remaining;\n            if (sum == BigInteger.One) {\n                break;\n\
    \            }\n            string tmp = LongToString(sum);\n            while\
    \ (tmp.Length < remaining.ToString().Length) {\n                tmp += \" \";\n\
    \            }\n            result += tmp;\n            remaining -= sum;\n  \
    \      }\n        return result;", "        if (n < 1) {\n            return \"\
    0\";\n        }\n\n        long step = (long) Math.Sqrt(n) + 1;\n        string[]\
    \ buffer = new string[step];\n\n        int index = 0;\n        for (int i = 0;\
    \ i <= n; ++i) {\n            buffer[index++] = String.Format(\"{0:000}\", i);\n\
    \        }\n\n        return String.Join(\" \", buffer);", "        string s =\
    \ n.ToString();\n        List<int> res = new List<int>();\n        for (int i\
    \ = 0; i < s.Length; i++) {\n            res.Add(Convert.ToInt32(s.Substring(i)));\n\
    \        }\n        return string.Join(\" \", res.ToArray());", "        int[]\
    \ nums = { n };\n        return string.Join(\" \", nums.Select(n => n.ToString()).ToArray());",
  '        return String.Join(" ", Enumerable.Range(0, n).Select(i => Convert.ToString(i)));',
  "        string s = \"\";\n        if (n < 0 || n > 4294967295L) throw new ArgumentOutOfRangeException(\"\
    n\");\n        for (int i = 0; i < n; i++) {\n            s += (\" \" + i);\n\
    \        }\n        return s;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            sb.Append((i + 1).ToString(CultureInfo.InvariantCulture));\n\
    \        }\n        return sb.ToString();", "        if (n == 0L) return \"0\"\
    ;\n        if (n <= 0L) return \"0\";\n        var digits = \"0 1 2 3 4 5 6 7\
    \ 8 9\".Split();\n        var result = new StringBuilder();\n        var counter\
    \ = 0;\n        var maxDigits = digits.Length;\n        while (n >= maxDigits)\
    \ {\n            result.Append(digits[n % maxDigits]);\n            n /= maxDigits;\n\
    \        }\n        result.Append(digits[n % maxDigits]);\n        return result.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        for (long i = 0; i < n;\
    \ ++i) sb.Append((long)i);\n        return sb.ToString();", "        var s = new\
    \ StringBuilder();\n        for (long i = 0; i <= n; i++) {\n            s.Append(Convert.ToString(i));\n\
    \        }\n        return s.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append((int)i);\n   \
    \     }\n        return sb.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        if (n < 0) throw new ArgumentOutOfRangeException(\"n\");\n        if\
    \ (n == 0) sb.Append(\"0\");\n        else {\n            for (int i = 0; i <=\
    \ n; i++) {\n                sb.Append(Convert.ToString(i, 2).PadLeft(32, '0'));\n\
    \            }\n        }\n        return sb.ToString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.Append(i);\n        }\n        return sb.ToString();", "        var result\
    \ = \"\";\n        for (long i = 0; i <= n; i++) {\n            result = String.Concat(result,\
    \ i.ToString(CultureInfo.InvariantCulture));\n        }\n        return result;",
  "        string s = \"\";\n        long last = 0;\n        while (n > 1) {\n   \
    \         long next = last + 1;\n            long mult = 1;\n            if (next\
    \ < n) mult = n - next;\n            s += (last++).ToString() + \" \" + (next\
    \ + 1).ToString() + \" \" + (next + mult).ToString() + \"\\n\";\n            n\
    \ -= next;\n        }\n        if (n > 0) s += last.ToString() + \"\\n\";\n  \
    \      return s;", "        List<string> result = new List<string>();\n      \
    \  while (n > 0) {\n            result.Add(n.ToString());\n            n -= n;\n\
    \        }\n        return string.Join(\" \", result.Reverse());", "        char[]\
    \ buf = new char[64];\n        string s = \"\";\n        ulong i = 1;\n      \
    \  while (n > i) {\n            buf[--i] = Convert.ToChar(i + '0');\n        \
    \    i *= 10;\n        }\n        while (i >= 1) {\n            buf[--i] = Convert.ToChar(i\
    \ + '0');\n            i *= 10;\n        }\n        ulong j = n;\n        while\
    \ (j != 0) {\n            if (j % 10 == 0) {\n                j += i - 1;\n  \
    \              s += \" \" + Convert.ToString(j);\n            } else {\n     \
    \           s += Convert.ToString(j % 10);\n            }\n            j = (j\
    \ / 10L) - 1;\n        }\n        return s;", "        StringBuilder sb = new\
    \ StringBuilder();\n        for (long i = 0; i <= n; i++) {\n            sb.Append(i);\n\
    \            sb.Append(' ');\n        }\n        return sb.ToString().Substring(1);",
  "        string s = \"\";\n        for (int i = 0; i < n; i++)\n        {\n    \
    \        s += i;\n        }\n        return s;", "        // Your code goes here\n\
    \        List<long> lst = new List<long>();\n        while(n>0)\n        {\n \
    \           lst.Add(n%10);\n            n=n/10;\n        }\n        var sb = new\
    \ StringBuilder();\n        sb.Append(\"0\");\n        for(int i=0;i<lst.Count;i++)\n\
    \        {\n            sb.Append(lst.ElementAt(i));\n        }\n        return\
    \ sb.ToString();", "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        }\n        var sb = new StringBuilder();\n        for (int i =\
    \ 0; i <= n; i++) {\n            sb.Append((long)i);\n            sb.Append(\"\
    \ \");\n        }\n        return sb.ToString();", "        if (n == 0) {\n  \
    \          return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.Append('0');\n        while (n > 0) {\n            sb.Append(n % 10);\n\
    \            n = n / 10;\n        }\n        sb.Append(StringSequence(n).Last());\n\
    \        return sb.ToString();", "        int[] numbers = new int[1000];\n   \
    \     Array.Sort(numbers, (a, b) => a - b);\n        string result = \"\";\n \
    \       for (int i = 1; i < numbers.Length; i++) {\n            result += \" \"\
    \ + numbers[i];\n            if (i >= n)\n                break;\n        }\n\
    \        return result;", "        List<string> result = new List<string>();\n\
    \        for (long i = 0; i < n; i++) {\n            long k = i;\n           \
    \ while (k != 0)\n            {\n                result.Add(k.ToString());\n \
    \               k /= 10;\n            }\n        }\n        return string.Join(\"\
    \ \", result);", "        var s = new StringBuilder();\n        for (int i = 0;\
    \ i <= n; i++) {\n            s.AppendFormat(\"{0} \", i);\n        }\n      \
    \  return s.ToString();", "        if (n == 0L) {\n            return \"0\";\n\
    \        }\n        return String.Join(\" \", Enumerable.Range(0, n).Select(i\
    \ => i.ToString()));", "        var result = new StringBuilder();\n        while\
    \ (n > 0) {\n            result.Append(n % 10);\n            n /= 10;\n      \
    \  }\n        return result.ToString();", "        char[] chars = new char[(int)n];\n\
    \        for (int i=0; i<chars.Length; i++) {\n            chars[i] = (char)('a'\
    \ + i);\n        }\n        string s = new string((chars), (chars).Length);\n\
    \        return s;", "        var result = new List<string>();\n        for (long\
    \ i = 1; i <= n; i++)\n            result.Add(i.ToString());\n        return string.Join(\"\
    \ \", result.ToArray());", "        string s = \"\";\n        for (int i = 0;\
    \ i < n; i++)\n            s += i + \" \";\n        s = s.Trim();\n        return\
    \ s;", "        char[] space = new char[100];\n        StringBuilder sb = new\
    \ StringBuilder();\n        int i = 0;\n        do {\n            if (i >= n)\n\
    \                sb.Append(\"0 \");\n            else\n                sb.Append((long)i\
    \ + \" \");\n            i++;\n            char ch = ' ';\n            do {\n\
    \                ch = Convert.ToChar(Convert.ToInt32(Math.Floor(Math.Log10(i +\
    \ 0.5L)), 2));\n            } while (space[ch - ' '] >= 0);\n            space[ch\
    \ - ' '] = 1;\n        } while (space[ch - ' '] >= 0);\n        sb.Append(\"0\"\
    );\n        return sb.ToString();", "        string result = \"\";\n        do\
    \ {\n            result += n.ToString();\n            n = n.Next();\n        }\
    \ while (n != 0L);\n        if (result == \"\") {\n            result = \"0\"\
    ;\n        }\n        return result;", "        var sb = new StringBuilder();\n\
    \        var i = 0;\n        for (; i < n; ++i) {\n            sb.Append(i + 1).Append(\"\
    \ \");\n        }\n        return sb.ToString();", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (long i = 0; i < n; i++)\n            sb.Append(Convert.ToString(i,\
    \ 10));\n        return sb.ToString();", "        string result = \"\";\n    \
    \    while (n != 0)\n        {\n            result = (n % 10) + result;\n    \
    \        n = n / 10;\n        }\n        return result;", "        string s =\
    \ string.Empty;\n        for (int i = 0; i < n; i++)\n            s += i;\n  \
    \      return s;", "        if (n == 0L) return \"0\";\n        if (n < 0L) throw\
    \ new ArgumentOutOfRangeException(\"n\");\n        string s = \"\";\n        while\
    \ (n > 0L) {\n            s = String.Format(\"{0} \", n % 10) + s;\n         \
    \   n /= 10;\n        }\n        switch (s.Length) {\n            case 1: {\n\
    \                // Remove trailing \"0\"\n                s = s.Substring(0,\
    \ s.Length - 1);\n                s = String.Format(\"{0} {1}\", s, 1);\n    \
    \            break;\n            }\n            case 2: {\n                //\
    \ Remove trailing \"0\" and \"1\"\n                s = s.Substring(0, s.Length\
    \ - 2);\n                break;\n            }\n            default: // Remove\
    \ trailing \"0\" and \"1\"\n                s = s.Substring(0, s.Length - 2);\n\
    \                s = s.Substring(0, s.Length - 1);\n                break;\n \
    \       }\n        string result = String.Empty;\n        foreach (char c in s)\
    \ {\n            if (char.IsDigit(c)) result += c;\n        }\n        return\
    \ result;", "        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (long x in Enumerable.Range(0, n)) {\n            sb.Append(x);\n          \
    \  sb.Append(\" \");\n        }\n        return sb.ToString(0, sb.Length - 1);",
  "        StringBuilder s = new StringBuilder(n);\n        long i = 0;\n        while\
    \ (true) {\n            if (i < (long)s.Length)\n                s.Append(\" \"\
    );\n            s.Append(++i);\n            if (i >= n)\n                break;\n\
    \        }\n        return s.ToString();", "        char[] buf = new char[32];\n\
    \        int pos = 0;\n        while (true) {\n            int cnt = BitConverter.ToInt32(BitConverter.GetBytes(n),\
    \ 0);\n            for (int i = 0; i < cnt; i++) {\n                buf[pos++]\
    \ = '0';\n            }\n            if (pos + cnt > buf.Length)\n           \
    \     throw new ArgumentOutOfRangeException(\"n\");\n            if (n == 0)\n\
    \                return new string(buf, 0, pos);\n            else\n         \
    \       n = n / 10;\n        }", "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        if (n == 0)\n            return \"0\";\n        if (n == 1L)\n\
    \            return \"1\";\n        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 1L; i <= n; ++i)\n            sb.Append(StringSequence(i));\n\
    \        sb.Append(StringSequence((n + 1L)));\n        return sb.ToString();",
  '        return String.Join(" ", Enumerable.Range(0, n).Select(i => (long) i).Select(i
    => i.ToString()).ToArray());', "        var s = Enumerable.Range(0, n).Select(i\
    \ => i.ToString()).Aggregate((s, i) => s + \" \" + i);\n        return s;", " \
    \       string result = \"\";\n        long current = n;\n        while (current\
    \ > 0) {\n            result += (current % 10).ToString();\n            current\
    \ /= 10;\n        }\n        if (n == 0) return result;\n        return result\
    \ + \" \" + StringSequence(--n);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++)\n            sb.Append(i);\n        return\
    \ sb.ToString();", "        var result = new StringBuilder();\n        for(var\
    \ i = 0; i <= n; i++) {\n            result.Append((int)i);\n        }\n     \
    \   return result.ToString();", "        long[] result = new long[n];\n      \
    \  int i = 0;\n        for (long ni = n; ni > 0; ni = ni / 10) {\n           \
    \ result[i++] = ni;\n        }\n        return String.Join(\" \", result.Take(result.Length\
    \ - 1));", "        var res = new StringBuilder();\n        long i = 0;\n    \
    \    while (i < n) {\n            res.Append((i++).ToString());\n        }\n \
    \       return res.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; ++i) {\n            sb.Append(i);\n        \
    \    sb.Append(' ').Append(Convert.ToString(i, 16)).Append(' ');\n        }\n\
    \        return sb.ToString();", "        var buffer = new StringBuilder();\n\
    \        long lastValue = 0;\n        while (true) {\n            lastValue +=\
    \ n;\n            if (lastValue < 1)\n                break;\n            buffer.Append((lastValue\
    \ % 10).ToString());\n            n /= 10;\n        }\n        return buffer.ToString();",
  '        return String.Join(" ", Enumerable.Range(0, (int)n).Select(i => i.ToString()));',
  "        string s = \"\";\n        for (int i = 0; i < n; i++) {\n            s\
    \ = s + \" \" + (i + 1).ToString();\n        }\n        return s;", "        var\
    \ s = \"\";\n        foreach (byte b in BitConverter.GetBytes(n)) {\n        \
    \    s += b.ToString();\n        }\n        return s;", "        if (n == 0L)\
    \ return(\"0\");\n        var list = Enumerable.Range(0, n).Select(i => (long)\
    \ i).ToList();\n        var s = string.Join(\" \", list.Select(i => i.ToString()));\n\
    \        return s;", "        var list = new List<string>();\n        while (n\
    \ > 0) {\n            list.Add(n.ToString());\n            n -= 1;\n        }\n\
    \        return list.Aggregate((x, y) => x + \" \" + y);", "        StringBuilder\
    \ ret = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n        \
    \    ret.Push(Convert.ToString(i));\n        }\n        return ret.Push('\\0').ToString();",
  "        var seq = new StringBuilder(string.Empty);\n        for (int i = 0; i <\
    \ n; i++) {\n            seq.Append((i == 0 ? \"0\" : (i + 1).ToString()));\n\
    \        }\n        return seq.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 1L; i <= n; i++) {\n            sb.Append(i.ToString()\
    \ + \" \");\n        }\n        return sb.ToString();", "        var result =\
    \ \"\";\n        for (var i = n; i > 0; i--) {\n            result += \" \" +\
    \ i;\n        }\n        return result;", "        if (n == 0L)\n            return\
    \ String.Empty;\n        StringBuilder s = new StringBuilder();\n        for (long\
    \ i = 0; i < n; ++i) {\n            s.Append((n % 10L) + \"\");\n            n\
    \ /= 10L;\n        }\n        return s.ToString();", "        string s = \"\"\
    ;\n        for (int i = 0; n > 0; i++) {\n            s = s.PadLeft(i).Append(n.ToString());\n\
    \            n -= (long)i;\n        }\n        return s;", "        long i = 0;\n\
    \        string s = \"\";\n        while (n > 0) {\n            s = s + \" \"\
    \ + Convert.ToString(n % 10);\n            n = n / 10;\n        }\n        return\
    \ (i == 0) ? \"\" : s.TrimStart() + Convert.ToString(i);", "        List<string>\
    \ lst = new List<string>();\n        for (long i = 1; i <= n; i++) {\n       \
    \     lst.Add(i.ToString());\n        }\n        return string.Join(\" \", lst.ToArray());",
  "        var result = new StringBuilder();\n        for (long i = n; i <= n; i++)\
    \ {\n            result.Append(i);\n        }\n        return result.ToString();",
  "        if (n == 0L) {\n            return \"0\";\n        }\n        return String.Join(\"\
    \ \", Enumerable.Range(0, n).Select(i => Convert.ToString(i)));", "        if\
    \ (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\", \"must be\
    \ non-negative\");\n        char[] buffer = new char[26];\n        buffer[0] =\
    \ '\\0';\n        for (int i = 9; i >= 0; --i) {\n            buffer[i] = (char)('A'\
    \ + i - 1);\n        }\n        long remaining = n;\n        long index = 0;\n\
    \        while (remaining > 0) {\n            buffer[index++] = remaining%10 +\
    \ '0';\n            remaining = remaining / 10;\n        }\n        return new\
    \ string(buffer);", "        StringBuilder sb = new StringBuilder();\n       \
    \ for (int i = 0; i < n; ++i) {\n            sb.Append((int)n);\n            sb.Append(\"\
    \ \");\n        }\n        return sb.ToString().Trim();", "        char[] buffer\
    \ = new char[32];\n        long[] numbers = new long[n];\n        for (long i\
    \ = 0; i < n; ++i) {\n            numbers[i] = i;\n            NumberToString(numbers,\
    \ buffer, 0);\n        }\n        return String.Join(\" \", buffer);", "     \
    \   StringBuilder sb = new StringBuilder();\n        for (long i = 0; i < n; i++)\
    \ {\n            sb.Append(\" \" + (i + 1).ToString());\n        }\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder();\n        for (var i\
    \ = 0; i < n; i++)\n            sb.Append((i + 1).ToString());\n        return\
    \ sb.ToString();", "        var result = new StringBuilder();\n        for (var\
    \ i = 0; i <= n; i++) {\n            result.Append(i % 10 == 0 ? i : \" \" + i);\n\
    \        }\n        return result.ToString();", "        long i = 1;\n       \
    \ StringBuilder sb = new StringBuilder();\n        while (i <= n) {\n        \
    \    sb.Append(i);\n            sb.Append(\" \");\n            i++;\n        }\n\
    \        return sb.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < n; i++) {\n            sb.Append((i).ToString());\n\
    \        }\n        return sb.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = n; i > 0L; i--)\n            sb.Append(i);\n        sb.Append(\"\
    0 \");\n        return sb.ToString();", "        long step = (long)Math.Sqrt(n);\n\
    \        long first = 0; long current = first;\n        long last = step;\n  \
    \      while (current != last) {\n            Debug.Assert(current < last);\n\
    \            yield return current;\n            current = current + step;\n  \
    \      }", "        if (n == 0L) throw new ArgumentOutOfRangeException(\"n\");\n\
    \        StringBuilder builder = new StringBuilder();\n        while (n > 0) {\n\
    \            builder.Append((n % 10L).ToString());\n            n /= 10L;\n  \
    \      }\n        if (builder.Length > 0) {\n            builder.Append((n % 10L).ToString());\n\
    \        }\n        return builder.ToString();", "        string result = \"\"\
    ;\n        for (int i = 0; i < n; i++) {\n            result += i.ToString();\n\
    \            result += \" \";\n        }\n        return result;", "        var\
    \ sb = new StringBuilder();\n        for (int i = 0; i < n; i++)\n           \
    \ sb.Append((n - i).ToString());\n        return sb.ToString();", "        Debug.Assert(n\
    \ >= 0);\n        Debug.Assert(n <= 4294967295);\n        string result = \"\"\
    ;\n        long[] values = new long[16];\n        byte[] buffer = new byte[16];\n\
    \        // Use a counter variable that wraps around; this way we avoid the problem\
    \ of\n        // wrapping around in a loop where we would want to rewind it.\n\
    \        long counter = n;\n        while (counter > 0) {\n            buffer[15\
    \ - counter] = counter % 10;\n            counter /= 10;\n        }\n        Array.Sort(values);\n\
    \        for (int i = 0; i < 16; i++) {\n            result += buffer[i].ToString();\n\
    \        }\n        return result;", "        var buffer = new char[32];\n   \
    \     int length = BitConverter.GetBytes(n).Length;\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < length; i++)\n         \
    \   sb.Append((char)buffer[i]);\n        return sb.ToString();", "        string\
    \ s = \"\";\n        while (n > 0) {\n            s = s + \" \" + n%10;\n    \
    \        n /= 10;\n        }\n        return s.Trim();", "        if (n < 0) {\n\
    \            throw new ArgumentOutOfRangeException(\"n\");\n        }\n      \
    \  var list = new List<long>();\n        for (long i = 0; i <= n; ++i) {\n   \
    \         list.Add(i);\n        }\n        return list.Select(i => string.Format(\"\
    {0}\", i)).Aggregate((c, s) => c + \" \" + s);", "        var ints = new int[n];\n\
    \        for (var i = 0; i < n; i++) {\n            ints[i] = i;\n        }\n\
    \        return string.Join(\" \", ints);", "        char[] array = new char[(int)\
    \ (n + 1)];\n        int n = n % array.length;\n        char start = '0';\n  \
    \      if (n > 0) {\n            for (int i = 0; i < n; i++) {\n             \
    \   array[array.length - i - 1] = ' ';\n            }\n            array[array.length\
    \ - 1] = ' ';\n        }\n        string result = new string((object[]) array);\n\
    \        return result;", '        return string.Join(" ", Enumerable.Range(0,
    n).Select(i => i.ToString()));', "        var s = \"\";\n        while (n > 0)\
    \ {\n            s = \" \" + n;\n            n = n / 10;\n        }\n        Debug.Assert(s\
    \ == \"0\");\n        return s;", "        char[] buf = new char[64];\n      \
    \  long total = 0, start = 0;\n        long end = n;\n        while (start < end)\
    \ {\n            buf[total++] = '0';\n            long rem = (end - start) * 10L\
    \ % 10;\n            buf[total++] = rem < 10 ? '0' : 'A' + rem - 10;\n       \
    \     start += 10L;\n            end -= 10L;\n        }\n        if (total > 63)\
    \ {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n  \
    \      return new string(buf, 0, total);", "        string result = string.Empty;\n\
    \        for(int i = 0; i <= n; i++) {\n            result += \" \" + i;\n   \
    \     }\n        return result;", "        List<string> result = new List<string>();\n\
    \        while (n-- > 0) {\n            result.Add(n.ToString());\n        }\n\
    \        return string.Join(\" \", result.ToArray());", "        StringBuilder\
    \ s = new StringBuilder();\n        while (n > 0)\n        {\n            s.Append((n\
    \ % 10).ToString());\n            n = n / 10;\n        }\n        if (s.Length\
    \ > 0)\n            s.Append(' ');\n        else\n            s.Append('0');\n\
    \        return s.ToString();", "        string result = new StringBuilder();\n\
    \        while (n > 0) {\n            result.Append(n % 10).Append(\" \");\n \
    \           n /= 10;\n        }\n        while (result.Length > 0) {\n       \
    \     result.Remove(result.Length - 1, 1);\n        }\n        if (result.Length\
    \ > 0) {\n            result = result.Remove(result.Length - 1);\n        }\n\
    \        return result.ToString();", "        var stringBuilder = new StringBuilder();\n\
    \        while (n != 0)\n        {\n            stringBuilder.Append((n % 10)\
    \ + \"\");\n            n /= 10;\n        }\n        stringBuilder.Append(\"\"\
    );\n        return stringBuilder.ToString();", "        var builder = new StringBuilder();\n\
    \        for (int i = 0; n > 0; i++)\n        {\n            if (builder.Length\
    \ > 0)\n                builder.Append(\" \");\n            builder.Append((n%10).ToString());\n\
    \            n = n/10;\n        }\n        if (n < 10)\n            builder.Append((n%10).ToString());\n\
    \        return builder.ToString();", "        if (n <= 0L) return \"\";\n   \
    \     var s = \"\";\n        for (var i = 0; i < (int)n; i++) {\n            s\
    \ += i.ToString();\n        }\n        return s;", "        char[] digits = new\
    \ char[Convert.ToInt32((1 + n) / 10)];\n        Array.Sort(digits, 0, digits.Length,\
    \ new DigitComparer());\n        StringBuilder sb = new StringBuilder();\n   \
    \     foreach (char c in digits) {\n            sb.Append(c);\n        }\n   \
    \     return sb.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            sb.Append((long)i);\n    \
    \        sb.Append(\" \");\n        }\n        return sb.ToString();", "     \
    \   // Write your C# code here.\n        var strs = new List<string>();\n    \
    \    long n = n-1;\n        for(long i=0;i<n;i++) {\n            strs.Add(i +\
    \ \"\");\n        }\n        strs.Add(n + \"\");\n        return String.Join(\"\
    \ \", strs);", "        var numbers = Enumerable.Range(0, n).Select(i => (long)i\
    \ + 1).Select(i => (long)i);\n        return string.Join(\" \", numbers);", " \
    \       var strs = new List<string>();\n        for (int i = 0; i < n; i++) {\n\
    \            strs.Add(i.ToString());\n        }\n        return string.Join(\"\
    \ \", strs);", "        if (n < 1L) return \"0\";\n        StringBuilder s = new\
    \ StringBuilder();\n        while (n > 0) {\n            s.Append(n % 10);\n \
    \           n /= 10;\n        }\n        return s.ToString();", "        if (n\
    \ == 0) {\n            return \"0\";\n        }\n\n        long next = 2;\n  \
    \      string s = \"\";\n        for (long i = n; i > 0; i /= next) {\n      \
    \      s += \" \" + next.ToString();\n            next++;\n        }\n       \
    \ return s;", "        if (n == 0L)\n            return \"0\";\n\n        StringBuilder\
    \ sb = new StringBuilder(2);\n        long previous = n;\n        long current\
    \ = previous;\n\n        while (true) {\n            sb.Append(previous);\n\n\
    \            if (current == previous)\n                return sb.ToString();\n\
    \n            previous = current;\n            current = (current + 1L) % (long.MaxValue\
    \ - 1L);\n        }", "        var sb = new StringBuilder(n.ToString());\n   \
    \     for (var i = 1; i < n; i++) sb.Append(' ', i);\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        var range = Enumerable.Range(0,\
    \ n);\n        foreach (var i in range) {\n            sb.Append((long)i);\n \
    \           sb.Append(\" \");\n        }\n        return sb.ToString();", "  \
    \      string s = \"\";\n        while(n > 0) {\n            s = s.PadRight(10);\n\
    \            s = s.PadRight(5);\n            s = s.Substring(0, 5) + \" \" + n;\n\
    \            n -= 5;\n        }\n        return s.Substring(1);", "        if\
    \ (n == 0L)\n            return \"0\";\n        return String.Join(\" \", Enumerable.Range(0,\
    \ (int)Math.Ceiling(Math.Log10(n))).Select(x => n.ToString(\"D\" + x.ToString())));",
  '        return String.Join(" ", Enumerable.Range(0, n).Select(i => i.ToString()));',
  "        char[] buffer = new char[32];\n        StringBuilder sb = new StringBuilder();\n\
    \        long i = n;\n        while (i > 0) {\n            int k = i / 10;\n \
    \           int j = i % 10;\n            buffer[32 - k] = '0' + j;\n         \
    \   while (k >= 0) {\n                k = k % 32;\n                buffer[k] =\
    \ '0';\n            }\n            sb.Append(System.Text.Encoding.ASCII.GetString(buffer));\n\
    \            buffer = new char[32];\n            i--;\n        }\n        return\
    \ sb.ToString();", "        if (n < 0) throw new ArgumentOutOfRangeException();\n\
    \        string s = \"\";\n        while (n > 0) {\n            s = s + \" \"\
    \ + n;\n            n = n - 1;\n        }\n        return s;", "        var s\
    \ = \"\";\n        while (n > 0) {\n            s = n.ToString() + \" \"+ s;\n\
    \            n -= (int)n;\n        }\n        if (s.Length > 0) {\n          \
    \  s = s.Substring(0, s.Length-1);\n        }\n        return s;", "        List<long>\
    \ result = new List<long>();\n        for (int i = 1; i <= n; ++i) {\n       \
    \     result.Add(i);\n        }\n        return string.Join(\" \", result.ToArray());",
  "        string s = \"\";\n        for (long i = 0; i <= n; i++) {\n           \
    \ s += \" \" + i;\n        }\n        return s;", "        if (n == 0L) {\n  \
    \          return \"0\";\n        }\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            long value = i;\n        \
    \    int digit;\n            while (value != 0) {\n                digit = (int)(value\
    \ % 10);\n                result.Append((char)(digit + '0'));\n              \
    \  value /= 10;\n            }\n        }\n        return result.ToString();",
  "        string res = \"\";\n        for (long i = 0; i <= n; i++)\n           \
    \ res += (i > 0 ? \" \" : \"\") + i;\n        return res;", "        if (n ==\
    \ 0L)\n            return \"0\";\n        if (n == 1L)\n            return \"\"\
    \ + 0L;\n        if (n == 2L)\n            return \"0 1\";\n        if (n == 3L)\n\
    \            return \"0 1 2\";\n        if (n == 4L)\n            return \"0 1\
    \ 2 3\";\n        if (n == 5L)\n            return \"0 1 2 3 4\";\n        if\
    \ (n == 6L)\n            return \"0 1 2 3 4 5\";\n        if (n == 7L)\n     \
    \       return \"0 1 2 3 4 5 6\";\n        if (n == 8L)\n            return \"\
    0 1 2 3 4 5 6 7\";\n        if (n == 9L)\n            return \"0 1 2 3 4 5 6 7\
    \ 8\";\n        if (n == 10L)\n            return \"0 1 2 3 4 5 6 7 8 9\";\n \
    \       if (n == 11L)\n            return \"0 1 2 3 4 5 6 7 8 9 10\";\n      \
    \  if (n == 12L)\n            return \"0 1 2 3 4 5 6 7 8 9 10 11\";\n        if\
    \ (n == 13L)\n            return \"0 1 2 3 4 5 6 7 8 9 10 11 12\";\n        if\
    \ (n == 14L)\n            return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\";\n      \
    \  if (n == 15L)\n            return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\";\n\
    \        if (n == 16L)\n            return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15\";\n        if (n == 17L)\n            return \"0 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16\";\n        if (n == 18L)\n            return \"0 1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17\";\n        if (n == 19L)\n            return\
    \ \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\";\n        if (n == 20L)\n\
    \            return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\";\n \
    \       if (n == 2L)\n            return \"\" + n + \"1\";\n        if (n == 100L)\n\
    \            return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\
    \ 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\
    \ 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74\
    \ 75 76 77 ", "        if (n == 0L) return \"0\";\n        if (n == 1L) return\
    \ \"1\";\n        return StringSequence(n - 1) + \" \" + StringSequence(n - 2);",
  "        string result = \"\";\n        while (n > 0) {\n            result += n.ToString();\n\
    \            n -= n % (long)int.MaxValue;\n        }\n        return result;",
  "        if (n == 0L) \n            return \"0\";\n\n        var r = new Stack<long>();\n\
    \        for (int i = 0; i < 32; ++i)\n            r.Push((ulong)n);\n\n     \
    \   var sb = new StringBuilder();\n        while (n > 0L) {\n            sb.Append(n\
    \ % 10L);\n            n /= 10L;\n            if (n > 0L) \n                sb.Append(\"\
    \ \");\n        }\n        return sb.ToString();", "        if (n == 0L) {\n \
    \           return \"0\";\n        }\n        var sb = new StringBuilder();\n\
    \        sb.Append(\"0 \");\n        var i = 0;\n        while (i < n) {\n   \
    \         sb.Append(Convert.ToString(i, 16).PadLeft(4, '0'));\n            i++;\n\
    \        }\n        sb.Append(\" \");\n        return sb.ToString();", "     \
    \   var nums = Enumerable.Range(0, (int)n).Select(n => (long)n).ToArray();\n \
    \       return String.Join(\" \", nums.Select(n => n.ToString()).ToArray());",
  '        return string.Join(" ", Enumerable.Range(0, n).Select(i => i.ToString()));',
  '        return StringSequence(0, n, new List<string>());', "        if (n == 0L)\n\
    \            return \"0\";\n        var result = new StringBuilder();\n      \
    \  for (int i = 0; i < n; i++) {\n            result.Append(\" \" + (i+1L));\n\
    \        }\n        return result.ToString();", "        string s = \"\";\n  \
    \      for(long i = 0; i < n; ++i) {\n            s += (i > 0 ? \" \" : \"\")\
    \ + i;\n        }\n        return s;", '        return String.Join(" ", Enumerable.Range(0,
    (int)n).Select(i => (long)i).ToArray());', "        long s = n;\n        var sb\
    \ = new StringBuilder();\n        while (s-- > 0) {\n            sb.Append((char)('a'\
    \ + ((int)Math.Floor(s / 26))));\n        }\n        sb.Append((char)('z' - s));\n\
    \        return sb.ToString();", "        var list = Enumerable.Range(0, n).Select(x\
    \ => x.ToString()).ToList();\n        return string.Join(\" \", list);", "   \
    \     // The return value will be a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i <= n; i++) {\n            if (sb.Length > 0)\n    \
    \            sb.Append(' ');\n            sb.Append(i);\n        }\n        return\
    \ sb.ToString();", "        StringBuilder result = new StringBuilder();\n    \
    \    for (int i = 0; i < n; ++i) {\n            result.Append(i);\n        }\n\
    \        return result.ToString();", '        return string.Join(" ", Enumerable.Range(0,
    n).Select(i => i.ToString()));', "        var s = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            s.Add(i);\n        }\n        return\
    \ s.Aggregate((acc, s) => acc + \" \" + s);", "        List<byte> bytes = new\
    \ List<byte>(1024);\n        byte[] buffer = new byte[8];\n        ulong current\
    \ = 0;\n        ulong last = 0;\n        while (n > 0) {\n            current\
    \ = n;\n            n = n >> 8;\n            bytes.Add(last);\n            last\
    \ = 0;\n            while (current > 0) {\n                buffer[0] = (byte)(current\
    \ % 256);\n                current = current >> 8;\n                bytes.Add(buffer[0]);\n\
    \            }\n        }\n        StringBuilder builder = new StringBuilder();\n\
    \        for (ulong i = 0; i < bytes.Count; i++) {\n            builder.Append(bytes[i].ToString(\"\
    X2\"));\n        }\n        return builder.ToString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        while (n >= 0) {\n            sb.Append(n);\n\
    \            sb.Append(\" \");\n            n = n - 1;\n        }\n        sb.Append(\"\
    0\");\n        return sb.ToString();", "        var buffer = new StringBuilder();\n\
    \        while (n > 0) {\n            buffer.Append((n % 10).ToString());\n  \
    \          n /= 10;\n        }\n        var result = buffer.ToString();\n    \
    \    if (result.Length == 1)\n            result = \"0\" + result;\n        return\
    \ result;", '        return StringSequence(n, "");', "        var result = new\
    \ StringBuilder();\n        for (var i = 0; n > 0; i++) {\n            result.Append((int)n);\n\
    \            n /= 10;\n        }\n        return result.ToString();", '        return
    string.Join(" ", Enumerable.Range(0, n).Select(i => i.ToString()));', "      \
    \  List<char> ret = new List<char>();\n        foreach (var n in Enumerable.Range(0,\
    \ n))\n        {\n            ret.Add((char) n);\n        }\n        return string.Join(\"\
    \ \", ret);", "        string result = \"\";\n        for (long i = 0; i <= n;\
    \ ++i) {\n            result += i;\n            if (i < n) result += \" \";\n\
    \        }\n        return result;", "        char[] buf = new char[16 * 1024];\n\
    \        string result = \"\";\n        long last = n;\n        while (n > 0)\
    \ {\n            buf[15 - (n & 0x7)] = '0';\n            n = n >> 7;\n       \
    \ }\n        for(int i=buf.Length-1;i>=0;i--)\n            result += buf[i];\n\
    \        return result;", "        var results = new StringBuilder();\n      \
    \  for (var i = 0; i < n; i++) {\n            results.Append(i);\n        }\n\
    \        return results.ToString();", "        var seq = new List<long>(n > 0\
    \ ? 1 : (long) -1);\n        while (n-- > 0)\n            seq.Add(n++);\n    \
    \    return string.Join(\" \", seq.ToArray());", "        StringBuilder sb = new\
    \ StringBuilder();\n        string s = string.Empty;\n        long i = n;\n  \
    \      do {\n            s = Convert.ToString(i).PadRight(10);\n            sb.Append(s);\n\
    \            i = i - 1;\n        } while (i>0);\n        return sb.ToString();",
  "        string result = \"\";\n        for (int i = 0; i < n; i++) {\n        \
    \    result += i + \" \";\n        }\n        return result;", "        var result\
    \ = new StringBuilder();\n        Enumerable.Range(0, n).ToList().ForEach(x =>\
    \ result.Append(x.ToString()));\n        return result.ToString();", "       \
    \ var result = \"\";\n        do {\n            result += n.ToString();\n    \
    \        n--;\n        } while (n != 0);\n        return result;", "        string\
    \ s = \"\";\n        for (long i = 0; i < n; ++i) {\n            s += ((long)i);\n\
    \        }\n        return s;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            sb.Append((i % 10).ToString());\n\
    \            sb.Append(\" \");\n        }\n        return sb.ToString();", " \
    \       var sb = new StringBuilder();\n        for (long i = 0; i < n; i++) {\n\
    \            sb.Append((char)('a' + i));\n        }\n        return sb.ToString();",
  "        char[] buffer = new char[64];\n        char[] digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    .ToCharArray();\n        BigInteger b = BigInteger.ValueOf(n);\n        BigInteger\
    \ one = BigInteger.One;\n        BigInteger two = BigInteger.Two;\n        BigInteger\
    \ next = two;\n        for (int i = 0; i < buffer.Length; i++) {\n           \
    \ buffer[i] = digits[(next.ToBitArray() >> i) & 1];\n            next = next.Multiply(two);\n\
    \        }\n        string s = String.Join(\" \", buffer);\n        if (s.Length\
    \ > 20)\n            throw new Exception(\"Can't generate long sequence of numbers\
    \ longer than 20 characters.\");\n        return s;", "        List<byte> data\
    \ = new List<byte>();\n        while (n > 0)\n            data.Add(Convert.ToByte(n));\n\
    \        return String.Join(\" \", data.Select((x, i) => Convert.ToString(x, 2).PadLeft(8,\
    \ '0').PadRight(8, '0') + i.ToString().PadLeft(2, '0')).ToArray());", "      \
    \  string result = \"\";\n        for (int i = 0; i <= n; i++) {\n           \
    \ if (i == n) {\n                result += \" \" + i;\n            } else {\n\
    \                result += \" \" + i;\n            }\n        }\n        return\
    \ result;", "        var result = new StringBuilder();\n        string str;\n\
    \        for (int i = 1; i <= n; i++)\n            str = String.Format(\"{0} \"\
    , i);\n        result.Append(str);\n        return result.ToString();", "    \
    \    string s = \"\";\n        for (long i = 0; i < n; ++i) {\n            s +=\
    \ ((i > 0) ? \" \" : \"\") + i;\n        }\n        return s;", "        var sb\
    \ = new StringBuilder();\n        long x = n;\n        do {\n            sb.Append(x);\n\
    \            x++;\n        } while (x * x <= n);\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        long counter = 0;\n  \
    \      while (n-- != 0) {\n            counter++;\n            sb.Append(counter);\n\
    \        }\n        return sb.ToString();", "        char[] buffer = new char[(int)Math.Floor(Math.Log10(n))\
    \ + 1];\n        int pos = 0;\n        while (n) {\n            buffer[pos] =\
    \ n % 10 + '0';\n            n /= 10;\n            ++pos;\n        }\n       \
    \ if (buffer.Length <= 0)\n            buffer.Length = 1;\n        return new\
    \ string(buffer).Trim();", "        var buffer = new StringBuilder();\n      \
    \  var digits = new BigInteger(n.ToString());\n        var currentDigit = 1;\n\
    \        foreach (var digit in digits) {\n            if (digit == 0) {\n    \
    \            continue;\n            }\n            if (digit.Equals(0)) {\n  \
    \              buffer.Append('0');\n            } else {\n                if (digit\
    \ < currentDigit) {\n                    buffer.Append(currentDigit.ToString());\n\
    \                }\n                buffer.Append(digit.ToString());\n       \
    \     }\n            currentDigit++;\n        }\n        return buffer.ToString();",
  "        string s = \"\";\n        for(long i = 0; i < n; i++) {\n            s\
    \ = s + \" \" + i;\n        }\n        return s.Trim();", "        if (n == 0L)\n\
    \            return \"0\";\n\n        if (n <= 10L) {\n            return ((string)((new\
    \ string((n >> 6), (n >> 6) - \"0\", \"0\")))).TrimEnd('0');\n        }\n\n  \
    \      // We need space to handle numbers > 10 digits\n        long temp = n;\n\
    \        string ret = \"\";\n        long temp2 = 1;\n        bool done = false;\n\
    \        do {\n            string s = temp.ToString();\n            if (s.Length\
    \ > 10)\n                s = s.Substring(0, 10);\n            string t = ((string)((new\
    \ string((n >> 6), (n >> 6) - \"0\", \"0\")))).TrimEnd('0');\n            if (t.Length\
    \ > 10)\n                t = t.Substring(0, 10);\n            done |= s == t;\n\
    \            if (done)\n                break;\n            temp = temp2;\n  \
    \          temp2 = temp * 10;\n        } while (temp != temp2);\n        while\
    \ (temp2 != temp) {\n            if (temp > temp2) {\n                temp = temp2;\n\
    \            }\n            temp2 /= 10;\n        }\n\n        int k = 0;\n  \
    \      string s = \"\";\n        while (temp != 0L) {\n            s += temp.ToString();\n\
    \            temp /= 10;\n            if (++k > 9)\n                s = \"\";\n\
    \        }\n        if (s.Length > 0)\n            s = \"0 \" + s;\n        return\
    \ s;", "        string s = \"\";\n        for (int i = 0; i < n; i++) {\n    \
    \        s += i;\n        }\n        return s;", "        List<long> list = new\
    \ List<long>();\n        while (n != 0) {\n            list.Add(n % 10);\n   \
    \         n /= 10;\n        }\n        return list.Aggregate(\"\", (current, val)\
    \ => current + ((val == 0) ? \"0\" : val.ToString()) + \" \") + string.Join(\"\
    \ \", list.Take(list.Count - 1));", "        var charArray = new char[100];\n\
    \        var buffer = new StringBuilder();\n        for (long i = n; i > 0; i\
    \ /= 10) {\n            charArray[(int)(i/10)] = (char)('0' + i % 10);\n     \
    \   }\n        buffer.Append(charArray[(int)n]);\n        return buffer.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        for(long i = 0; i <= n;\
    \ ++i)\n            sb.Append(i);\n        return sb.ToString();", "        StringBuilder\
    \ ret = new StringBuilder();\n        for (long i = 0; i < n; ++i)\n         \
    \   ret.Append(i);\n        return ret.ToString();", '        return String.Join("
    ", Enumerable.Range(0, n).Select(i => i.ToString()));', '        return string.Join("
    ", Enumerable.Range(0, (int)n).Select(x => x.ToString()));', "        StringBuilder\
    \ b = new StringBuilder();\n        for(int i=0;i<n;i++) {\n            b.Append(i+1).Append(\"\
    \ \");\n        }\n        return b.ToString();", "        var results = new List<string>();\n\
    \        for (var i = 0; i <= n; i++) {\n            results.Add(string.Format(\"\
    {0}\", i));\n        }\n        return string.Join(\" \", results);", "      \
    \  string s = n.ToString();\n        while (s.Length < 20) {\n            s =\
    \ \" \" + s;\n        }\n        return s;", "        var sb = new StringBuilder();\n\
    \        var s = 1;\n        for (long i = 0; i < n; i++) {\n            sb.Append(s.ToString());\n\
    \            s = s * 10;\n        }\n        return sb.ToString();", "       \
    \ Debug.Assert(n > 0L);\n        var r = new StringBuilder();\n        r.Append(\"\
    0\");\n        while (n-- > 0) {\n            r.Append(\" \" + (n / 10));\n  \
    \      }\n        return r.ToString();", "        var digits = Enumerable.Range(0,\
    \ n - 1).Select(i => Convert.ToString(n, i)).ToArray();\n        return string.Join(\"\
    \ \", digits.Skip(1));", "        long total = 0;\n        StringBuilder res =\
    \ new StringBuilder();\n        while (n-- != 0)\n            total += n;\n  \
    \      string s = string.Join(\" \", Enumerable.Range(0, total).Select(x => x.ToString()));\n\
    \        res.Append(s);\n        return res.ToString();", "        const string\
    \ digits = \"0123456789\";\n        var buffer = new StringBuilder();\n      \
    \  for (int index = 0; index <= n; index++)\n            buffer.Append(digits[(int)(n\
    \ % (long)Math.Pow(10, digits.Length))]);\n        return buffer.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        Enumerable.Range(0, n).ToList().ForEach(i\
    \ => sb.Append(i));\n        return sb.ToString();", "        string s = \"\"\
    ;\n        while (n > 0) {\n            s = ((n % 10) + s).Trim() + \" \" + (n\
    \ % 10).ToString();\n            n /= 10;\n        }\n        return s;", "  \
    \      var s = \"\";\n        for (int i = 0; i < n; i++) {\n            s +=\
    \ i;\n            s += \" \";\n        }\n        return s;", "        List<int>\
    \ numbers = new List<int>();\n        for (long i = 0; i < n; ++i)\n         \
    \   numbers.Add(i);\n        numbers.Reverse();\n        return string.Join(\"\
    \ \", numbers.Select(n => n.ToString()).ToArray());", '        return String.Join("
    ", Enumerable.Range(0, n).Select(i => i.ToString()));', "        long x = 0;\n\
    \        string res = \"\";\n        while (n > 0) {\n            res += x.ToString();\n\
    \            if (n % 2 == 0) x += 1;\n            n = (long) n / 2;\n        }\n\
    \        if (res == \"\")\n            res = \"0\";\n        return res;", " \
    \       char[] chars = new char[(int) n];\n        int pos = 0;\n        while\
    \ (pos < n) {\n            int remainder = (int) (n - pos);\n            while\
    \ (true) {\n                chars[pos] = remainder == 0L ? '0' : remainder % 10L\
    \ + '0';\n                remainder = remainder / 10L;\n                if (remainder\
    \ == 0L)\n                    break;\n            }\n            ++pos;\n    \
    \    }\n        return new string(chars);", "        string s = string.Empty;\n\
    \        while (n-- > 0) {\n            s += \" \" + n;\n        }\n        return\
    \ s;", '        return Enumerable.Range(0, n).Select(x => x.ToString()).Join("
    ");', '        return String.Join(" ", Enumerable.Range(0, (int)n).Select(x =>
    (long)x).ToArray());', "        long step = (1L << 32) / n;\n        StringBuilder\
    \ buf = new StringBuilder();\n        long i = n;\n        do {\n            buf.Append(String.Format(\"\
    {0}\", i));\n            i += step;\n        } while (i-- > 0);\n        return\
    \ buf.ToString();", "        var sb = new StringBuilder();\n        var i = 0;\n\
    \        while (i < n) {\n            sb.Append(i % 10 + (i < 10 ? \" \" : \"\"\
    ));\n            i++;\n        }\n        return sb.ToString();", "        string\
    \ s = \"\";\n        while (n-- > 0) {\n            s = s + n.ToString();\n  \
    \      }\n        return s;", "        return string.Join(\" \", Enumerable.Range(0,\
    \ n)\n            .Select(i => string.Format(\"{0}\", i)));", "        StringBuilder\
    \ s = new StringBuilder();\n        for(long i=n; i<=n; i++) {\n            s.Append(i).Append(\"\
    \ \");\n        }\n        return s.ToString();", "        var result = new StringBuilder();\n\
    \        for (var i = 0; i < n; i++) {\n            result.Append(i + 1);\n  \
    \          result.Append(\" \");\n        }\n        result.AppendLine();\n  \
    \      return result.ToString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i <= n; i++) {\n            sb.Append(i).Append(' ');\n\
    \        }\n        return sb.ToString();", "        string result = \"\";\n \
    \       for (int i = 0; i < n; i++) {\n            result += \" \" + i;\n    \
    \    }\n        return result;"]
stop_tokens:
- "\n    }\n"
