name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> FixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> FixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> FixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> FixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static string FixSpaces(string\
  \ text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        // Use a regular expression to replace all spaces with underscores.\n\
    \        // Use a counter to keep track of consecutive spaces.\n        // For\
    \ each match, increment the counter by one.\n        // If the counter is greater\
    \ than 2, replace all consecutive \n        // spaces with \"-\".\n        //\
    \ Return this new string.\n        return Regex.Replace(text, @\"\\s+\", \"_\"\
    , RegexOptions.Compiled).Replace(\"_ -\", \"_\");", "        // Remove the space\
    \ from the start and end of the string\n        text = text.Replace(\" \", \"\
    _\");\n        // Remove the space if there are consecutive spaces\n        text\
    \ = text.Replace(\" \", \"_\");\n        return text;", "        if (text.IndexOfAny(new\
    \ char[] {' ', '\\t'}) < 0) {\n            return text;\n        }\n        var\
    \ words = text.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (var word in words) {\n            if (word.IndexOfAny(new char[]\
    \ {' ', '\\t'}) > 0) {\n                text = text.Replace(word, word.Replace('\
    \ ', '_'));\n            }\n        }\n        return text;", "        string\
    \ fixedText = text.Replace(\" \", \"_\");\n        if (fixedText.IndexOf(\"  \"\
    ) > -1)\n        {\n            fixedText = fixedText.Replace(\"  \", \"_\");\n\
    \        }\n        return fixedText;", "        return text\n            .Replace(\"\
    \ \", \"-\")\n            .Replace(\"  \", \"_\")\n            .Replace(\" \"\
    , \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"\
    _\")\n            .Replace(\" \", \"_\")\n            .Replace(\"  \", \"_\")\n\
    \            .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n   \
    \         .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n      \
    \      .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n         \
    \   .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"_\")\n           \
    \ .Replace(\" \", \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\"\
    \ \", \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\"  \"\
    , \"_\")\n            .Replace(\" \", \"_\")\n            .Replace(\"  \", \"\
    _\")\n            .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n\
    \            .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"_\")\n  \
    \          .Replace(\" \", \"_\")\n            .Replace(\"  \", \"_\")\n     \
    \       .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n        \
    \    .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"_\")\n          \
    \  .Replace(\" \", \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\"\
    \  \", \"_\")\n            .Replace(\" \", \"_\")\n            .Replace(\"  \"\
    , \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\" \", \"\
    _\")\n            .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"_\"\
    )\n            .Replace(\" \", \"_\")\n            .Replace(\"  \", \"_\")\n \
    \           .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n    \
    \        .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"_\")\n      \
    \      .Replace(\" \", \"_\")\n            .Replace(\"  \", \"_\")\n         \
    \   .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n            .Replace(\"\
    \  \", \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\" \"\
    , \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"\
    _\")\n            .Replace(\" \", \"_\")\n            .Replace(\"  \", \"_\")\n\
    \            .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n   \
    \         .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"_\")\n     \
    \       .Replace(\" \", \"_\")\n            .Replace(\"  \", \"_\")\n        \
    \    .Replace(\"  \", \"_\")\n            .Replace(\" \", \"_\")\n           \
    \ .Replace(\"  \", \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\"\
    \ \", \"_\")\n            .Replace(\"  \", \"_\")\n            .Replace(\"  \"\
    , \"_\")\n            .Replace(\" \", \"_\")\n            .Replace(\"  \", \"",
  "        // Split string into a list of words\n        var words = text.Split('\
    \ ');\n\n        // If there are no words, return original text\n        if (words.Count()\
    \ == 0) return text;\n\n        // Build a regex pattern to match a word followed\
    \ by spaces\n        var pattern = String.Join(\"\\\\s*\", words.Select(w => w.Replace(\"\
    \ \", \"\\\\s*\")));\n\n        // Regex pattern to match word followed by 3 spaces\n\
    \        var pattern2 = String.Join(\"\\\\s+\", words.Select(w => w.Replace(\"\
    \ \", \"\\\\s+\")));\n\n        // Use regex pattern to fix all spaces in words\n\
    \        var fixedText = Regex.Replace(text, pattern, \" \");\n\n        // Use\
    \ regex pattern to fix all consecutive spaces in words\n        var fixedText2\
    \ = Regex.Replace(text, pattern2, \"_\");\n\n        // Check if original text\
    \ is still valid\n        if (fixedText != text) {\n            // Return original\
    \ text\n            return text;\n        }\n\n        // Check if fixedText2\
    \ is still valid\n        if (fixedText2 != text) {\n            // Return original\
    \ text\n            return text;\n        }\n\n        return fixedText2;", " \
    \       char[] charArray = text.ToCharArray();\n        int i = 0;\n        while\
    \ (i < charArray.Length) {\n            if (charArray[i] == ' ')\n           \
    \     charArray[i] = '_';\n            i++;\n        }\n        for (int j = 0;\
    \ j < charArray.Length; j++) {\n            if (charArray[j] == ' ')\n       \
    \         charArray[j] = '-';\n        }\n        return new string(charArray);",
  "        var sb = new StringBuilder();\n        var spaces = new List<char> { '\
    \ ' };\n        var consecutiveSpaces = new List<char> { ' ', '\\t' };\n     \
    \   foreach (var c in text) {\n            if (spaces.Contains(c)) {\n       \
    \         sb.Append('_');\n                spaces.RemoveAt(spaces.Count - 1);\n\
    \            }\n            else {\n                if (consecutiveSpaces.Contains(c))\
    \ {\n                    sb.Append('-');\n                    consecutiveSpaces.RemoveAt(consecutiveSpaces.Count\
    \ - 1);\n                }\n                sb.Append(c);\n            }\n   \
    \     }\n        return sb.ToString();", "        string fixed = text.Replace(\"\
    \ \", \"_\");\n        fixed = fixed.Replace(\" \", \"-\");\n        fixed = fixed.Replace(\"\
    \ -\", \"-\");\n        return fixed;", "        char[] charArray = text.ToCharArray();\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ == ' ') {\n                if (i == 0)\n                    charArray[i] = '_';\n\
    \                else if (i == charArray.Length - 1)\n                    charArray[i\
    \ - 1] = '-';\n                else\n                    charArray[i - 1] = '_';\n\
    \            }\n        }\n        return new string(charArray);", "        string\
    \ result = \"\";\n        for (int i = 0; i < text.Length; i++) {\n          \
    \  if (text[i] == ' ') {\n                result += text.Substring(0, i) + '_';\n\
    \                text = text.Substring(i + 1);\n                i--;\n       \
    \     }\n        }\n        if (result.Length > 2 &&\n            (result.Substring(0,\
    \ 1) == \"_\") &&\n            (result.Substring(1, 2) == \"_\")) {\n        \
    \    int index = result.IndexOf('_');\n            result += \"_\";\n        \
    \    while (index != -1) {\n                result += result.Substring(index +\
    \ 1, 2);\n                index++;\n            }\n        }\n        return result;",
  "        if (text == null || text.Trim() == \"\")\n            return \"\";\n  \
    \      return text\n            .Replace(\" \", \"_\")\n            .Replace(\"\
    \ -\", \"-\")\n            .TrimEnd('_') + text.TrimStart('_');", "        if\
    \ (text == null)\n            return string.Empty;\n\n        // Split on all\
    \ whitespace\n        var words = text.Split(' ');\n\n        // Replace all spaces\
    \ with an underscore\n        foreach (var word in words) {\n            word\
    \ = word\n                    .Replace(\" \", \"_\")\n                    .Replace(\"\
    -\", \"_\");\n        }\n\n        // Join back on all whitespace\n        return\
    \ string.Join(\" \", words);", "        if (string.IsNullOrEmpty(text))\n    \
    \        return text;\n        if (text.Contains(\"  \"))\n        {\n       \
    \     string s = text;\n            text = s.Replace(\" \", \"_\");\n        \
    \    if (s.IndexOf(\"  \", StringComparison.InvariantCultureIgnoreCase) >= 2)\n\
    \            {\n                string newText;\n                for (int i =\
    \ s.IndexOf(\"  \", StringComparison.InvariantCultureIgnoreCase); i < s.Length;\
    \ i++)\n                {\n                    newText = s.Substring(0, i) + \"\
    -\" + s.Substring(i + 1, s.Length - i);\n                    text = newText;\n\
    \                }\n            }\n        }\n        return text;", '        return
    Regex.Replace(text, @"\s{2}", "_");', "        // Replace multiple spaces with\
    \ underscore\n        // >>> FixSpaces((\" Example\"))\n        // (\"Example\"\
    )\n        text = text.Replace(\" \", \"_\");\n        if (text.Contains(\"  \"\
    ))\n            text = text.Replace(\"  \", \"_\");\n        return text;", " \
    \       if (text == null) return null;\n        return Regex.Replace(text, \"\
    [ ]{2,}\", \"-\");", "        // Trim spaces at beginning and end of string\n\
    \        text = text.Trim();\n        // If string is empty, just return it \n\
    \        // >>> FixSpaces(\"\")\n        // (\"\")\n        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        // Replace all spaces with underscores\n  \
    \      text = text.Replace(\" \", \"_\");\n        // Return modified string \n\
    \        // >>> FixSpaces(\" Example 1\")\n        // (\"Example_1\")\n      \
    \  return text;", "        string result = text;\n        // If there are no spaces,\
    \ return the string\n        if (!string.IsNullOrEmpty(result)) {\n          \
    \  result = Regex.Replace(text, @\"\\s{2,}\", \" \");\n            // If there\
    \ are consecutive spaces, replace them with a single - \n            if (result.Contains(\"\
    \ \"))\n                result = result.Replace(\" \", \"-\");\n        }\n  \
    \      return result;", "        int spaceCount = 0;\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < text.Length; i++) {\n  \
    \          if (text[i] == ' ') {\n                spaceCount++;\n            }\n\
    \            if (spaceCount > 1) {\n                spaceCount = 1;\n        \
    \        sb.Append('-');\n            }\n            else {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        string ret\
    \ = text.Replace(\" \", \"_\");\n        if (ret.Length > 2 && !ret.Contains(\"\
    \  \")) {\n            return ret.Replace(\"  \", \"_\");\n        }\n       \
    \ return ret;", "        if (text.Length > 0) {\n            if (text.Contains(\"\
    \ \")) {\n                string s = \"\";\n                bool in = false;\n\
    \                for (int i = 0; i < text.Length; i++) {\n                   \
    \ if (text[i] == ' ') {\n                        if (!in) {\n                \
    \            s = s + text[i];\n                            in = true;\n      \
    \                  }\n                    } else {\n                        if\
    \ (in) {\n                            s = s + text[i] + text[i];\n           \
    \                 in = false;\n                        }\n                   \
    \ }\n                }\n                if (s.Length > 2) {\n                \
    \    string newText = \"\";\n                    for (int i = 0; i < s.Length;\
    \ i++) {\n                        newText = newText + s.Substring(0, i) + \"_\"\
    \ + s.Substring(i + 1);\n                    }\n                    s = newText;\n\
    \                }\n                return s;\n            }\n        }\n    \
    \    return text;", "        if (text.Length > 1) {\n            char[] chArray\
    \ = text.ToCharArray();\n            foreach (char ch in chArray) {\n        \
    \        if (ch == ' ') {\n                    chArray[chArray.IndexOf(ch)] =\
    \ '_';\n                }\n            }\n            return new string(chArray);\n\
    \        } else {\n            return text;\n        }", '        return string.Join("",
    text.Split().Select(a => a.Replace(" ", "_")).ToArray());', "        var sb =\
    \ new StringBuilder(text);\n        var wasSpace = true;\n        for (int i =\
    \ 0; i < sb.Length; i++) {\n            if (wasSpace) {\n                if (sb[i]\
    \ == ' ') {\n                    wasSpace = false;\n                }\n      \
    \          else {\n                    sb[i] = '_';\n                    wasSpace\
    \ = true;\n                }\n            }\n            else {\n            \
    \    sb[i] = '_';\n                wasSpace = true;\n            }\n        }\n\
    \        if (sb.Length > 2 && sb[sb.Length - 1] == ' ' && sb[sb.Length - 2] ==\
    \ ' ') {\n            sb[sb.Length - 1] = '-';\n        }\n        return sb.ToString();",
  "        var sb = new StringBuilder();\n        foreach (var c in text) {\n    \
    \        if (c == ' ') {\n                if (sb.Length > 0) {\n             \
    \       sb.Append('_');\n                }\n            } else {\n           \
    \     if (sb.Length > 0) {\n                    sb.Append(c);\n              \
    \  }\n            }\n        }\n        return sb.ToString();", "        // Remove\
    \ the leading and trailing spaces \n        text = text.Trim();\n        // If\
    \ the text doesn't have any spaces, return the text \n        if (text.Length\
    \ == 0) return text;\n        // Loop through each character in the text \n  \
    \      for (int i = 0; i < text.Length; i++) {\n            // If the character\
    \ is a space \n            if (text[i] == ' ') {\n                // Replace all\
    \ spaces with underscores \n                text = text.Replace(\" \", \"_\");\n\
    \            }\n        }\n        // Return text \n        return text;", " \
    \       Regex regex = new Regex(@\"(?<=(^|\\s)\\s)|(?<=(^|\\s)$)\");\n       \
    \ return regex.Replace(text, \" \").Replace(\" \", \"-\");", "        if (text\
    \ == null) throw new ArgumentNullException(\"text\");\n        if (text.Length\
    \ == 0) throw new ArgumentException(\"text cannot be empty\");\n\n        var\
    \ sb = new StringBuilder();\n        var prevSpace = false;\n        for (var\
    \ i = 0; i < text.Length; i++) {\n            var c = text[i];\n            if\
    \ (c == ' ') {\n                if (prevSpace) {\n                    sb.Append('-');\n\
    \                } else {\n                    sb.Append('_');\n             \
    \       prevSpace = true;\n                }\n            } else if (c != ' ')\
    \ {\n                sb.Append(c);\n                prevSpace = false;\n     \
    \       }\n        }\n\n        return sb.ToString();", "        if (String.IsNullOrEmpty(text))\n\
    \            return \"\";\n\n        char[] spaces = { '.' };\n        return\
    \ text.Replace(\" \", \"_\").Replace(\". .\", \"_\").Replace(\". .\", \"_\").Replace(\"\
    . .\", \"_\").Replace(\". .\", \"_\").Replace(\".\", spaces.ToString());", " \
    \       Regex reg = new Regex(@\"\\s\");\n        string fixedText = reg.Replace(text,\
    \ \" \");\n        if (fixedText.Length > 2) {\n            fixedText = fixedText.Replace(\"\
    \ \", string.Empty);\n            fixedText = fixedText.Replace(\" \", \"-\");\n\
    \        }\n        return fixedText;", "        // Replace all spaces with underscores\n\
    \        return text.Replace(\" \", \"_\");", "        // The string we are returning.\n\
    \        string returnValue = text;\n        // Iterate over each character in\
    \ the string.\n        for (int i = 0; i < returnValue.Length; i++) {\n      \
    \      // If the character is a space, add '_' to it.\n            if (returnValue[i]\
    \ == ' ') {\n                returnValue[i] = '_';\n            }\n          \
    \  // If the character is a space and we're counting consecutive spaces, \n  \
    \          // then replace with a hyphen and subtract 1 from the count.\n    \
    \        else if (returnValue[i] == ' ' && returnValue.IndexOf(' ') != i - 1)\
    \ {\n                returnValue[i] = '-';\n                returnValue.Replace('-',\
    \ null, i - 1);\n            }\n        }\n        return returnValue;", "   \
    \     if (string.IsNullOrEmpty(text)) return text;\n        return Regex.Replace(text,\
    \ @\"\\s+\", \"_\");", "        int start = 0;\n        int end = text.Length;\n\
    \        while (start < end) {\n            if (text[start] == ' ')\n        \
    \        start++;\n            else\n                break;\n        }\n     \
    \   while (end > start) {\n            if (text[end-1] == ' ')\n             \
    \   end--;\n            else\n                break;\n        }\n        while\
    \ (start < end) {\n            if (text[start] == ' ' && text[start+1] == ' ')\n\
    \                text = text.Remove(start, 1);\n            else\n           \
    \     break;\n            start++;\n        }\n        while (end > start) {\n\
    \            if (text[end-1] == ' ' && text[end-2] == ' ')\n                text\
    \ = text.Remove(end, 1);\n            else\n                break;\n         \
    \   end--;\n        }\n        while (start < end) {\n            if (text[start]\
    \ == ' ')\n                start++;\n            else\n                break;\n\
    \        }\n        while (end > start) {\n            if (text[end-1] == ' ')\n\
    \                end--;\n            else\n                break;\n        }\n\
    \        while (start < end) {\n            if (text[start] == ' ' && text[start+1]\
    \ == ' ')\n                text = text.Replace(\" \", \"-\");\n            else\n\
    \                break;\n            start++;\n        }\n        while (end >\
    \ start) {\n            if (text[end-1] == ' ' && text[end-2] == ' ')\n      \
    \          text = text.Replace(\" \", \"-\");\n            else\n            \
    \    break;\n            end--;\n        }\n        return text;", "        int\
    \ spaceIndex = 0;\n        StringBuilder builder = new StringBuilder(text.Length);\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                builder.Append('_');\n                spaceIndex = 0;\n\
    \            } else {\n                if (spaceIndex >= 2) {\n              \
    \      builder.Append(' - ');\n                    spaceIndex = 0;\n         \
    \       } else {\n                    builder.Append(text[i]);\n             \
    \       spaceIndex++;\n                }\n            }\n        }\n        return\
    \ builder.ToString();", "        var builder = new StringBuilder();\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                builder.Append('_');\n\
    \            } else {\n                builder.Append(c);\n            }\n   \
    \     }\n        return builder.ToString();", "        return text.Replace(\"\
    \ \", \"_\")\n            .Replace(\" \", \"_\")\n            .Replace(\" \",\
    \ \"-\");", "        var splitText = text.Split(' ');\n        var result = splitText.Aggregate((x,\
    \ y) => x.Replace(' ', '_').Replace('-', y != splitText[splitText.Length - 1].ToString()\
    \ ? '-' : y.ToString()));\n        return result;", "        var arr = text.Split('\
    \ ');\n        var n = new StringBuilder();\n\n        foreach (string s in arr)\
    \ {\n            n.Append(s.Replace(\" \", \"_\").Replace(\" \", \"-\"));\n  \
    \      }\n        return n.ToString();", '        return Regex.Replace(Regex.Replace(Regex.Replace(text,
    @"\s+", " "), "  +", " "), "  ", " ");', "        string fixed = text.Replace(\"\
    \ \", \"_\");\n\n        // If there are more than 2 consecutive spaces\n    \
    \    if (fixed.IndexOf(\" \", StringComparison.Ordinal) != fixed.LastIndexOf(\"\
    \ \", StringComparison.Ordinal)) {\n            fixed =\n                fixed.Substring(0,\
    \ fixed.LastIndexOf(\" \")) + \"-\" +\n                fixed.Substring(fixed.LastIndexOf(\"\
    \ \", StringComparison.Ordinal));\n        }\n\n        return fixed;", "    \
    \    text = Regex.Replace(text, @\"\\s+\", \" \");\n        if (text.Length >\
    \ 2 && text.Contains(\" \") == true) {\n            text = text.Replace(\" \"\
    , \"-\");\n        }\n        return text;", "        var sb = new StringBuilder();\n\
    \        string spaceChar = \"_\";\n        if (string.IsNullOrEmpty(text))\n\
    \            return \"\";\n        if (text.Contains(\"  \"))\n            spaceChar\
    \ = \"-\";\n        for (int i = 0; i < text.Length; i++) {\n            if (char.IsWhiteSpace(text[i]))\n\
    \                sb.Append(spaceChar);\n            else\n                sb.Append(text[i]);\n\
    \        }\n        return sb.ToString();", "        return Regex.Replace(Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace(\n\
    \            Regex.Replace(\n            Regex.Replace(\n            Regex.Replace",
  "        int spacesFound = 0;\n        int consecutiveSpacesFound = 0;\n       \
    \ StringBuilder sb = new StringBuilder();\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                spacesFound++;\n               \
    \ if (spacesFound > 2) {\n                    sb.Append('-');\n              \
    \      consecutiveSpacesFound++;\n                }\n                sb.Append(c);\n\
    \            } else {\n                if (consecutiveSpacesFound == 0) {\n  \
    \                  sb.Append(c);\n                }\n                sb.Append(c);\n\
    \                consecutiveSpacesFound = 0;\n            }\n        }\n     \
    \   return sb.ToString();", "        // Convert the string to an array of chars\
    \ \n        string[] chars = text.ToCharArray();\n        \n        // Loop through\
    \ the array of chars \n        for (int i = 0; i < chars.Length; i++) {\n    \
    \        // If the char is a space, \n            // then replace it with _\n\
    \            if (chars[i] == ' ') {\n                // Replace the spaces with\
    \ -\n                chars[i] = '-';\n                // If the number of consecutive\
    \ spaces is greater than 2\n                // then replace all consecutive spaces\
    \ with a single - \n                if (i > 0 && chars[i - 1] == ' ') {\n    \
    \                chars[i] = '-';\n                }\n            }\n        }\n\
    \        \n        // Create a new string from the chars array \n        return\
    \ new string(chars);", "        if (string.IsNullOrEmpty(text))\n            return\
    \ string.Empty;\n        StringBuilder sb = new StringBuilder();\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        bool space = true;\n        for (int i =\
    \ 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n            \
    \    if (!space) {\n                    sb.Append('_');\n                } else\
    \ {\n                    space = false;\n                }\n            } else\
    \ {\n                if (space) {\n                    space = false;\n      \
    \          } else {\n                    sb.Append(text[i]);\n               \
    \ }\n            }\n        }\n        return sb.ToString();", "        string\
    \ fixedText = text.Replace(\" \", \"_\");\n        if (fixedText.IndexOf(\"  \"\
    ) > 0) {\n            fixedText = fixedText.Replace(\"  \", \"_\");\n        }\n\
    \        return fixedText;", "        char[] space = { ' ', '_' };\n        int\
    \ i = -1;\n        var result = new StringBuilder();\n        foreach (char c\
    \ in text) {\n            i += 1;\n            if (c == ' ') {\n             \
    \   if (i >= 2) {\n                    while (i <= text.Length - 2) {\n      \
    \                  result.Append(space[0]);\n                        i += 1;\n\
    \                    }\n                } else {\n                    result.Append(c);\n\
    \                }\n            } else {\n                result.Append(c);\n\
    \            }\n        }\n        return result.ToString();", '        return
    Regex.Replace(text, @"\s+", "_", RegexOptions.Multiline);', "        if (text\
    \ == null) {\n            throw new ArgumentNullException(\"text\");\n       \
    \ }\n        string result = \"\";\n        bool isFirst = true;\n        foreach\
    \ (char c in text) {\n            if (isFirst) {\n                result += c;\n\
    \            }\n            else {\n                switch (c) {\n           \
    \         case ' ':\n                        result += \"_\";\n              \
    \          break;\n                    case '\\t':\n                        result\
    \ += \"-\";\n                        break;\n                    case '\\n':\n\
    \                        result += \"_\";\n                        break;\n  \
    \                  default:\n                        result += c;\n          \
    \              break;\n                }\n            }\n            isFirst =\
    \ false;\n        }\n        return result;", "        string fixedString = text.Replace(\"\
    \ \", \"_\");\n        char[] chars = fixedString.ToCharArray();\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == ' ' && i ==\
    \ 0) {\n                chars[i] = '_';\n            } else if (chars[i] == '\
    \ ' && i != 0) {\n                chars[i] = '-';\n            }\n        }\n\
    \        return new string(chars);", "        StringBuilder buffer = new StringBuilder(text.Length);\n\
    \        int counter = 0;\n        foreach (char c in text) {\n            if\
    \ (c == 32) {\n                buffer.Append('_');\n            } else if (c ==\
    \ 39) {\n                buffer.Append('-');\n            } else if (c == 9) {\n\
    \                buffer.Append('_');\n            }\n            buffer.Append(c);\n\
    \            ++counter;\n        }\n        if (counter > 1) {\n            buffer.Replace(\"\
    \ \", \"_\", 0, buffer.Length);\n        }\n        return buffer.ToString();",
  "        Debug.Assert(text != null);\n        Debug.Assert(text.Length > 0);\n \
    \       StringBuilder sb = new StringBuilder(text.Length);\n        bool inSpaces\
    \ = false;\n        int index = 0;\n        foreach (char c in text) {\n     \
    \       if (c == ' ') {\n                inSpaces = true;\n                sb.Append('_');\n\
    \            } else if (c == '\\'') {\n                sb.Append('\\'');\n   \
    \         } else if (c == '\"') {\n                sb.Append('\"');\n        \
    \    } else if (inSpaces) {\n                sb.Append('-');\n            }\n\
    \            sb.Append(c);\n            inSpaces = false;\n        }\n       \
    \ return sb.ToString();", "        string result = \"\";\n        foreach (var\
    \ c in text) {\n            switch (c) {\n                case \" \":\n      \
    \              result += \"_\";\n                    break;\n                case\
    \ \" \":\n                    result += \"-\";\n                    break;\n \
    \               default:\n                    result += c;\n                 \
    \   break;\n            }\n        }\n        return result.Replace(\"_\", \"\
    -\");", "        var text = text.Replace(\" \", \"-\");\n\n        if (text.Contains(\"\
    \ \") && text.Contains(\" \")) {\n            int firstSpace = text.IndexOf(\"\
    \ \");\n            int secondSpace = text.IndexOf(\" \", firstSpace + 1);\n \
    \           string result = \"\";\n            for (int i = 0; i <= secondSpace\
    \ - firstSpace; i++) {\n                result += \"-\";\n            }\n\n  \
    \          text = text.Substring(0, firstSpace) + result + text.Substring(secondSpace);\n\
    \        }\n\n        return text;", '        return Regex.Replace(text, @"\s+",
    " ");', "        // Your code here\n        var result = string.Empty;\n     \
    \   if (text == null) return result;\n        var index = -1;\n        char[]\
    \ spaces = new char[] { ' ', ',', '.', ':', '-', ' ' };\n        int index2 =\
    \ 0;\n        int spaceCount = 0;\n        while (index != -1) {\n           \
    \ index = text.IndexOf(spaces, index2, StringComparison.Ordinal);\n          \
    \  if (index != -1) {\n                result += text.Substring(index2, index\
    \ - index2);\n                index2 = index - 1;\n                spaceCount\
    \ = 1;\n            }\n            else if (index2 == -1 && spaceCount == 1) {\n\
    \                result = result + text.Substring(index2, text.Length - index2);\n\
    \            }\n            else {\n                result += text.Substring(index2,\
    \ index2 - index) + string.Empty;\n                index2 = index - 1;\n     \
    \           spaceCount++;\n            }\n        }\n        if (index2 == -1\
    \ && text.Length > 0) {\n            result += text.Substring(index2, text.Length\
    \ - index2);\n        }\n        return result;", "        // return text == null\
    \ ? string.Empty : text;\n        return Regex.Replace(text, @\"\\s+\", \" \"\
    ).Trim();", "        var sb = new StringBuilder();\n        foreach (var c in\
    \ text) {\n            if (c == ' ') {\n                sb.Append('_');\n    \
    \        } else {\n                sb.Append(c);\n            }\n        }\n \
    \       return sb.ToString();", "        StringBuilder builder = new StringBuilder();\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     builder.Append(\"_\");\n            } else {\n                builder.Append(c);\n\
    \            }\n        }\n        if (builder.Length > 2) {\n            builder.Insert(2,\
    \ '-');\n        }\n        return builder.ToString();", "        string res =\
    \ \"\";\n        bool isConsecutiveSpace = false;\n        for (int i = 0; i <\
    \ text.Length; i++) {\n            char c = text[i];\n            switch (c) {\n\
    \            case ' ':\n                if (i == text.Length - 1) {\n        \
    \            isConsecutiveSpace = true;\n                    break;\n        \
    \        }\n                i++;\n                c = text[i];\n             \
    \   switch (c) {\n                case ' ':\n                    if (isConsecutiveSpace)\
    \ {\n                        res = res + c;\n                    } else {\n  \
    \                      isConsecutiveSpace = true;\n                    }\n   \
    \                 break;\n                default:\n                    res =\
    \ res + c;\n                    isConsecutiveSpace = false;\n                \
    \    break;\n                }\n                break;\n            default:\n\
    \                res = res + c;\n                break;\n            }\n     \
    \   }\n        return res;", "        var sb = new StringBuilder();\n        foreach\
    \ (char c in text) {\n            if (char.IsWhiteSpace(c)) {\n              \
    \  if (sb.Length > 0) {\n                    sb.Append(' ');\n               \
    \ }\n                sb.Append('_');\n            } else {\n                sb.Append(c);\n\
    \            }\n        }\n        return sb.ToString();", "        return text.Replace(\"\
    \ \", \"_\")\n                   .Replace(\"  \", \"_\")\n                   .Replace(\"\
    \  \", \"_\");", "        if (text == null || text.Length <= 1) return text;\n\
    \n        StringBuilder sb = new StringBuilder();\n        bool isSpace = false,\
    \ inString = false;\n\n        foreach (char c in text) {\n            if (char.IsWhiteSpace(c))\
    \ {\n                if (!isSpace) isSpace = true;\n                else {\n \
    \                   if (inString && isSpace) sb.Append(\"-\");\n             \
    \       isSpace = false;\n                    inString = false;\n            \
    \    }\n            }\n            else {\n                if (inString && isSpace)\
    \ sb.Append(\"-\");\n                inString = true;\n                isSpace\
    \ = false;\n            }\n\n            sb.Append(c);\n        }\n\n        if\
    \ (inString && isSpace) sb.Append(\"-\");\n        return sb.ToString();", " \
    \       // Your code here\n        string fixed = text;\n        fixed (char*\
    \ psz = fixed)\n        {\n            for (int i = 0; i < fixed.Length; i++)\
    \ {\n                if (fixed[i] == ' ') {\n                    fixed[i] = '_';\n\
    \                }\n                else if (i + 2 < fixed.Length && fixed[i]\
    \ == ' ' && fixed[i + 1] == ' ' && fixed[i + 2] == ' ') {\n                  \
    \  fixed[i] = '-';\n                }\n            }\n        }\n        return\
    \ fixed;", "        if (string.IsNullOrEmpty(text))\n            return \"\";\n\
    \        text = text.Replace(\" \", \"_\");\n        if (text.Count(x => x ==\
    \ \" \") >= 2)\n            text = text.Replace(\" \", \"-\");\n        return\
    \ text;", '        return Regex.Replace(Regex.Replace(text, @"\s+", " "), @"\s+",
    "-");', "        text = Regex.Replace(text, \" \", \"_\");\n        text = Regex.Replace(text,\
    \ @\"(?<=\\s)\\s\", \"_\");\n        return text;", "        string fixedString\
    \ = text.Replace(\" \", \"_\").Replace(\" \", \"-\");\n        return fixedString.Substring(0,\
    \ fixedString.Length > 2 ? fixedString.Length - 2 : string.Length);", '        return
    Regex.Replace(text, "( *) ", " ");', "        if (text == null) return null;\n\
    \        StringBuilder sb = new StringBuilder();\n        bool inSpace = false;\n\
    \        foreach (char c in text) {\n            if (inSpace) {\n            \
    \    if (c == 32) {\n                    inSpace = false;\n                } else\
    \ {\n                    sb.Append('_');\n                    inSpace = false;\n\
    \                }\n            } else {\n                if (c == ' ') {\n  \
    \                  inSpace = true;\n                } else {\n               \
    \     sb.Append(c);\n                }\n            }\n        }\n        return\
    \ sb.ToString();", '        return Regex.Replace(text, @"\s+", "_");', "     \
    \   if (text == null) return null;\n        text = text.Replace(' ', '_');\n \
    \       if (text.Count() >2) {\n            while (text.Contains(\" \"))\n   \
    \             text = text.Replace(\" \", \"-\");\n        }\n        return text;",
  "        if (String.IsNullOrEmpty(text)) {\n            return text;\n        }\n\
    \        var words = text.Split(' ');\n        StringBuilder sb = new StringBuilder();\n\
    \        foreach (var word in words) {\n            if (word.Length > 2) {\n \
    \               sb.Append('-');\n                sb.Append(word);\n          \
    \  }\n            else {\n                sb.Append(word);\n            }\n  \
    \          sb.Append(' ');\n        }\n        return sb.ToString();", "     \
    \   string result = \"\";\n        foreach (var c in text) {\n            if (c\
    \ == ' ') {\n                result += '_';\n            }\n            else {\n\
    \                result += c;\n            }\n        }\n        if (result.IndexOf('_')\
    \ > 0) {\n            result = result.Replace(' ', '_');\n        }\n        return\
    \ result;", '        return text.Replace(" ", "_").Replace(" ", "-");', "    \
    \    var regex = new Regex(@\" \", RegexOptions.IgnoreCase);\n        return regex.Replace(text,\
    \ @\"_\");", "        if (text == null) {\n            return \"\";\n        }\n\
    \        if (string.IsNullOrEmpty(text)) {\n            return \"\";\n       \
    \ }\n        // Replace all spaces with underscores\n        text = Regex.Replace(text,\
    \ \" \", \"_\");\n        // Remove spaces in strings longer than 2 spaces\n \
    \       text = Regex.Replace(text, @\"\\s{2,}\", \"-\");\n        return text;",
  "        if (string.IsNullOrEmpty(text))\n            return string.Empty;\n\n \
    \       var sb = new StringBuilder();\n        foreach (char c in text)\n    \
    \    {\n            switch (c)\n            {\n                case ' ':\n   \
    \                 sb.Append(\"_\");\n                    break;\n            \
    \    default:\n                    sb.Append(c);\n                    break;\n\
    \            }\n        }\n        return sb.ToString();", "        string result;\n\
    \        result = \"\";\n        if (text.Trim().Length > 0)\n        {\n    \
    \        text = text.Trim();\n            int i = 0;\n            int j = 0;\n\
    \            int l = text.Length;\n            while (i < l)\n            {\n\
    \                if (text[i] == ' ')\n                {\n                    i++;\n\
    \                }\n                else\n                {\n                \
    \    if (text[i] == ' ')\n                    {\n                        if (j\
    \ == 0)\n                        {\n                            result += text[i];\n\
    \                        }\n                        else\n                   \
    \     {\n                            result += '_';\n                        }\n\
    \                        j = 0;\n                    }\n                    else\n\
    \                    {\n                        result += text[i];\n         \
    \               j++;\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        string result = text;\n        string\
    \ replacement = \" \";\n        string last = \"\";\n        for (int i = 0; i\
    \ < text.Length; i++)\n        {\n            if (replacement == last)\n     \
    \           replacement = replacement[0];\n            else\n                last\
    \ = replacement;\n            if (text[i] == ' ')\n            {\n           \
    \     result = result.Replace(text[i], replacement);\n                replacement\
    \ = replacement[0];\n            }\n        }\n        if (replacement != last)\n\
    \            result = result.Replace(last, replacement);\n        return result;",
  "        StringBuilder builder = new StringBuilder();\n        if (text == null\
    \ || text.Trim() == \"\") {\n            builder.Append(text);\n            return\
    \ builder.ToString();\n        }\n\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            if (char.IsWhiteSpace(text[i])) {\n                builder.Append('_');\n\
    \                builder.Append(text[i]);\n            }\n        }\n        return\
    \ builder.ToString();", "        if (String.IsNullOrEmpty(text))\n           \
    \ return text;\n        return Regex.Replace(text, \" \", \"_\");", "        string\
    \ res = text;\n        res = res.Replace(\" \", \"_\");\n        if (res.IndexOf(\"\
    \  \", StringComparison.Ordinal) >= 0)\n            res.Replace(\"  \", \"-\"\
    );\n        return res;", "        int spaceCount = 0;\n        StringBuilder\
    \ result = new StringBuilder(text.Length);\n        foreach (char c in text) {\n\
    \            if (char.IsWhiteSpace(c)) {\n                result.Append('_');\n\
    \                spaceCount++;\n            } else {\n                result.Append(c);\n\
    \            }\n        }\n        while (spaceCount > 2) {\n            result.Replace('\
    \ ', '_');\n            spaceCount--;\n        }\n        return result.ToString();",
  "        text = text.Replace(\" \", \"_\");\n        var spaces = new List<int>();\n\
    \        var last = -1;\n        foreach (char c in text) {\n            if (c\
    \ == ' ') {\n                if (last == -1) last = -1;\n                else\
    \ spaces.Add(last);\n            } else if (last != -1 && last != c) {\n     \
    \           last = c;\n                spaces.Add(last);\n            }\n    \
    \    }\n        if (spaces.Count > 2) spaces.RemoveRange(1, spaces.Count - 1);\n\
    \        for (int i = spaces.Count - 1; i >= 0; i--) {\n            string s =\
    \ \"\";\n            for (int j = spaces.Count - 1; j > i; j--) s += \"-\";\n\
    \            text = text.Replace(\" \" + s, \" \" + j);\n        }\n        return\
    \ text;", "        // Replace all spaces with underscores \n        text = text.Replace(\"\
    \ \", \"_\");\n\n        // Replace consecutive spaces with \"-\" \n        //\
    \ >>> FixSpaces(\"-Example-\")\n        // (\"Example\")\n        if (text.Length\
    \ > 1) {\n            string lastSpace = text.Substring(text.Length - 2);\n  \
    \          text = text.Replace(lastSpace, \"-\");\n        }\n\n        return\
    \ text;", "        // TODO: use regular expressions\n        return text.Replace(\"\
    \ \", \"_\");", "        string result = text;\n        int position = 0;\n\n\
    \        while (position != -1) {\n            position = result.IndexOf(\" \"\
    , position);\n            if (position != -1) {\n                string sub =\
    \ result.Substring(position + 1, result.Length - position - 1);\n            \
    \    result += sub;\n                position++;\n            } else {\n     \
    \           string sub = result.Substring(position, 1);\n                result\
    \ += sub;\n                position++;\n            }\n        }\n        return\
    \ result;", "        if (text == null)\n            throw new ArgumentNullException(\"\
    text\");\n\n        // Convert the string to an array of chars\n        char[]\
    \ chars = text.ToCharArray();\n\n        // Replace all spaces with underscores\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ ' ') {\n                chars[i] = '_';\n            }\n        }\n\n      \
    \  // If there are more than 2 spaces, \n        // then replace all 2 or more\
    \ consecutive spaces with -\n        if (chars.GroupBy(c=>c).Any(g => g.Count()\
    \ > 2)) {\n            string output = string.Empty;\n            int lastSpaceIndex\
    \ = 0;\n            bool firstTime = true;\n            foreach (char c in chars)\
    \ {\n                if (c == ' ') {\n                    if (firstTime) {\n \
    \                       output += '-';\n                        firstTime = false;\n\
    \                    }\n                } else {\n                    output +=\
    \ chars[lastSpaceIndex] + c;\n                    lastSpaceIndex++;\n        \
    \        }\n            }\n            return output;\n        } else {\n    \
    \        return new string(chars);\n        }", "        // Replace all spaces\
    \ with underscores \n        // >>> text.replace(\"_\", \" \");\n        string\
    \ t = text;\n        if (text.Contains(\" \")) {\n            t = text.Replace(\"\
    \ \", \"_\");\n        }\n        // Fix consecutive spaces \n        // >>> text.Replace(\"\
    \ \", \"-\");\n        if (!String.IsNullOrEmpty(t)) {\n            if (t.Contains(\"\
    \ \")) {\n                int lastSpaceIndex = t.LastIndexOf(\" \");\n       \
    \         t = t.Replace(\" \", \"-\");\n                if (lastSpaceIndex < t.LastIndexOf(\"\
    \ \")) {\n                    t = t.Insert(lastSpaceIndex + 1, \"-\");\n     \
    \           }\n            }\n        }\n        return t;", "        if (text.Contains(\"\
    \  \")) {\n            string s = text.Replace(\"  \", \"_\");\n            return\
    \ s;\n        }\n        else {\n            return text;\n        }", "     \
    \   if (string.IsNullOrEmpty(text))\n        {\n            return text;\n   \
    \     }\n        string fixed = text;\n        fixed (char* fixedText = new char[text.Length])\n\
    \        {\n            fixed (char* fixedSpaces = new char[text.Length * 2 +\
    \ 1])\n            {\n                fixedText = fixed (char* )text.ToCharArray();\n\
    \                fixedSpaces = fixed (char*)spaces.ToCharArray();\n          \
    \      bool first = true;\n                for (int i = 0; i < text.Length; i++)\n\
    \                {\n                    if (text[i] == ' ')\n                \
    \    {\n                        if (first)\n                        {\n      \
    \                      fixedText[i] = '-';\n                        }\n      \
    \                  else\n                        {\n                         \
    \   fixedText[i] = '_';\n                        }\n                        first\
    \ = false;\n                    }\n                }\n                fixedText\
    \ = fixed (char*)fixedText.ToCharArray();\n                fixedSpaces = fixed\
    \ (char*)fixedSpaces.ToCharArray();\n                if (fixed (char* )text.ToCharArray().Skip(text.Length\
    \ - 1).Take(text.Length - 1).ToArray()[0] == ' ')\n                {\n       \
    \             fixedSpaces[text.Length] = '-';\n                }\n           \
    \     fixedText = fixed (char*)fixedText.ToCharArray();\n                fixedSpaces\
    \ = fixed (char*)fixedSpaces.ToCharArray();\n                fixed = fixedText.ToString();\n\
    \            }\n        }\n        return fixed;", "        if (string.IsNullOrWhiteSpace(text))\n\
    \            return text;\n        var words = text.Split(new char[] { '_', '-'\
    \ }, StringSplitOptions.RemoveEmptyEntries);\n        var newText = string.Join(\"\
    \", words.Take(words.Count() + 1));\n        return newText.Trim();", "      \
    \  string fixedText = text;\n\n        string fixedTextPart1 = fixedText.Substring(0,\
    \ fixedText.IndexOf(' ')).Replace(\" \", \"_\");\n        string fixedTextPart2\
    \ = fixedText.Substring(fixedText.IndexOf(' ') + 1).Replace(\" \", \"_\");\n\n\
    \        if (!string.IsNullOrEmpty(fixedTextPart1) && !string.IsNullOrEmpty(fixedTextPart2))\
    \ {\n            fixedText = fixedTextPart1.Substring(0, fixedTextPart1.Length\
    \ - 1) + fixedTextPart2.Substring(0, fixedTextPart2.Length - 1);\n        }\n\n\
    \        if (fixedText.Length > 1) {\n            fixedText = fixedText.Replace(\"\
    \ \", \"-\");\n        }\n        return fixedText;", "        int spaces = text.Count(s\
    \ => s == ' ');\n        if (spaces > 2) {\n            return text.Replace(\"\
    \ \", \"-\");\n        }\n        return text;", "        int consecutiveSpaces\
    \ = 0;\n        int i = 0;\n        StringBuilder sb = new StringBuilder();\n\
    \        while (i + 1 < text.Length) {\n            if (text[i] == '\\'') {\n\
    \                i++;\n            }\n            else if (text[i] == ' ' && text[i\
    \ + 1] == ' ') {\n                i++;\n                i++;\n            }\n\
    \            else if (text[i] == ' ') {\n                consecutiveSpaces++;\n\
    \            }\n            else {\n                if (consecutiveSpaces > 1)\
    \ {\n                    sb.Append('_');\n                    consecutiveSpaces\
    \ = 0;\n                }\n                sb.Append(text[i]);\n             \
    \   i++;\n            }\n        }\n        return sb.ToString();", "        string\
    \ result = \"\";\n        string temp = \"\";\n        int count = 1;\n      \
    \  for (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n\
    \                count++;\n                if (count == 2) {\n               \
    \     result += text[i];\n                }\n            } else if (count > 2)\
    \ {\n                result += temp + text[i];\n                count = 1;\n \
    \           } else {\n                temp = text[i];\n            }\n       \
    \ }\n        return result;", "        //return text.Replace(\" \", \"_\");\n\
    \        int index = 0;\n        int lastSpace = 0;\n        bool firstSpace =\
    \ true;\n        StringBuilder sb = new StringBuilder();\n        while ((index\
    \ = text.IndexOf(\" \", index)) != -1) {\n            if (firstSpace) {\n    \
    \            sb.Append(text.Substring(0, index));\n                lastSpace =\
    \ index;\n                firstSpace = false;\n                continue;\n   \
    \         }\n            if (index == lastSpace) {\n                sb.Append(text.Substring(0,\
    \ index) + text.Substring(lastSpace + 1, index - lastSpace));\n              \
    \  lastSpace = index;\n                firstSpace = true;\n                continue;\n\
    \            }\n            if (index - lastSpace > 2) {\n                sb.Append(text.Substring(0,\
    \ lastSpace));\n                sb.Append(\"-\");\n                sb.Append(text.Substring(lastSpace\
    \ + 1, index - lastSpace));\n                lastSpace = index;\n            \
    \    firstSpace = true;\n                continue;\n            }\n          \
    \  sb.Append(text.Substring(0, lastSpace));\n            sb.Append(text.Substring(lastSpace\
    \ + 1, index - lastSpace));\n            lastSpace = index;\n            firstSpace\
    \ = true;\n        }\n        return sb.ToString();", "        // Make sure the\
    \ string has at least 2 characters\n        if (text.Length < 2)\n           \
    \ return \"\";\n\n        // Replace all spaces with underscores\n        text\
    \ = text.Replace(\" \", \"_\");\n\n        // Keep track of how many spaces there\
    \ were in the string\n        int spacesCount = 0;\n\n        // Replace all spaces\
    \ with -\n        while (!string.IsNullOrEmpty(text)) {\n            char currentChar\
    \ = text.ElementAtOrDefault(text.Length - 1);\n            if (currentChar ==\
    \ ' ')\n                spacesCount++;\n            else\n                spacesCount\
    \ = 0;\n\n            if (spacesCount > 1)\n                text = text.Replace(\"\
    \ \", \"-\");\n        }\n\n        return text;", "        Debug.Assert(text\
    \ != null);\n        if (text.Contains(\" \")) {\n            char[] array = text.ToCharArray();\n\
    \            for (int i = 0; i < array.Length; i++) {\n                array[i]\
    \ = char.IsWhiteSpace(array[i]) ? '_' : array[i];\n            }\n           \
    \ return new string(array);\n        }\n        return text;", "        int spaceCount\
    \ = text.Count(c => c == ' ');\n        if (spaceCount < 2) {\n            return\
    \ text;\n        }\n        // Create a list to store our results\n        var\
    \ result = new List<string>();\n        int previousSpace = 0;\n        bool replace\
    \ = false;\n        for (int i = 0; i < text.Length; ++i) {\n            char\
    \ c = text[i];\n            if (c == ' ') {\n                result.Add(new string('_',\
    \ previousSpace));\n                result.Add(new string('_', spaceCount - previousSpace));\n\
    \                previousSpace = spaceCount;\n                replace = false;\n\
    \            } else if (c == ' ' && i == text.Length - 1) {\n                result.Add(new\
    \ string('_', spaceCount - previousSpace));\n            } else {\n          \
    \      result.Add(c);\n                replace = true;\n            }\n      \
    \  }\n        // If we have more than 2 spaces, replace all consecutive spaces\
    \ with -\n        if (replace) {\n            for (int i = 1; i < result.Count\
    \ - 1; ++i) {\n                result[i] = result[i].Replace(\" \", \"-\");\n\
    \            }\n        }\n        return new string(result.ToArray());", "  \
    \      text = text.Replace(\" \", \"_\");\n        text = text.Replace(\"  \"\
    , \"_\");\n        text = text.Replace(\" \", \"_\");\n        return text;",
  "        text = text.Replace(\" \", \"_\");\n        if (text.Count() > 2) {\n \
    \           string[] split = text.Split(' ');\n            char[] charArray =\
    \ new char[split.Length];\n            int count = 0;\n            int start =\
    \ 0;\n            int end = 0;\n            foreach (string s in split) {\n  \
    \              if (s.Count() > 1) {\n                    start = end;\n      \
    \              end = start + s.Count() - 1;\n                }\n             \
    \   charArray[count] = s[start];\n                count += 1;\n            }\n\
    \            string result = new string(charArray);\n            result = result.Replace(\"\
    _\", \"-\");\n            return result;\n        }\n        return text;", " \
    \       string result = text;\n        char[] chars = result.ToCharArray();\n\
    \        chars.Replace(\" \", \"_\");\n        return result.Trim().Replace(\"\
    _\", \"-\");", '        return Regex.Replace(text, @"\s{2,}", "_");', "      \
    \  // The regular expression below says to replace all spaces\n        // followed\
    \ by two or more spaces with one underscore\n        text = Regex.Replace(text,\
    \ @\"\\s+(?=\\s)\", \"_\");\n\n        // Replace all consecutive spaces with\
    \ one -\n        text = Regex.Replace(text, @\"\\s{2,}\", \"-\");\n\n        return\
    \ text;", '        return text.Replace(" ", "_").Replace(" ", "-");', '        return
    text.Replace(" ", "_").Replace("  ", "_");', "        var result = new StringBuilder();\n\
    \        var replaced = text.Replace(\" \", \"_\");\n        if (replaced.Length\
    \ > 2) {\n            int i = 0;\n            for (i = 0; i < replaced.Length\
    \ - 2; i++) {\n                if (replaced[i] == ' ') {\n                   \
    \ result.Append(\"-\");\n                }\n                else {\n         \
    \           result.Append(replaced[i]);\n                }\n            }\n  \
    \      }\n        else {\n            result.Append(replaced);\n        }\n  \
    \      return result.ToString();", "        var sb = new StringBuilder();\n  \
    \      foreach (char c in text.ToCharArray()) {\n            if ((c != ' ') ||\
    \ (sb.Length == 0)) {\n                sb.Append(c);\n            } else {\n \
    \               if (c == ' ' && sb.Length == 1) {\n                    sb.Append('_');\n\
    \                } else if (c == '-' && sb.Length > 1) {\n                   \
    \ sb.Remove(sb.Length - 1, 1);\n                }\n            }\n        }\n\
    \        return sb.ToString();", "        StringBuilder result = new StringBuilder();\n\
    \        int lastSpace = 0;\n        bool found = false;\n        for (int i =\
    \ 0; i < text.Length; ++i) {\n            if (text[i] == ' ') {\n            \
    \    if (found == false) {\n                    result.Append(\"_\");\n      \
    \              found = true;\n                }\n                else {\n    \
    \                result.Append(text.Substring(lastSpace, i));\n              \
    \      found = true;\n                }\n                lastSpace = i + 1;\n\
    \            }\n            else {\n                found = false;\n         \
    \   }\n        }\n        if (found == true) {\n            result.Append(text.Substring(lastSpace));\n\
    \        }\n        return result.ToString();", "        var sb = new StringBuilder();\n\
    \        foreach (var t in text.Trim().Split(' '))\n        {\n            if\
    \ (t.Length > 0)\n            {\n                if (sb.Length == 0)\n       \
    \             sb.Append(t);\n                else if (t.IndexOf(' ') != sb.LastIndexOf('\
    \ '))\n                    sb.Append(t.Replace(' ', '_'));\n                else\n\
    \                    sb.Append(t.Replace(' ', '_'));\n            }\n        }\n\
    \        return sb.ToString();", "        // Return original text if there are\
    \ no spaces\n        if (text.Replace(\" \", \"\").Length == 0) return text;\n\
    \        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // Split the input text into an array of strings, \n  \
    \      // each of which is a word in the text\n        string[] words = text.Split(\"\
    \ \");\n        // Iterate through each word and determine how \n        // many\
    \ spaces there are\n        int i = 0;\n        foreach (string word in words)\
    \ {\n            i++;\n            if (i == 2) word = word.Replace(\" \", \"-\"\
    );\n        }\n        // Join our words back together into a new string\n   \
    \     return string.Join(\" \", words);", "        StringBuilder sb = new StringBuilder();\n\
    \        char[] spaces = new char[] { ' ' };\n        bool isSingleSpace = false;\n\
    \        foreach (char c in text) {\n            if (isSingleSpace || spaces.Contains(c))\
    \ {\n                isSingleSpace = false;\n                if (sb.Length > 0)\
    \ {\n                    sb.Append(' ');\n                }\n                sb.Append(c);\n\
    \            } else {\n                isSingleSpace = true;\n               \
    \ sb.Append(\"-\");\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        string s = text;\n        int i = 1;\n\
    \        bool first = true;\n        while (i < s.Length) {\n            if (first)\
    \ {\n                first = false;\n            }\n            else if (s[i]\
    \ == ' ' && s[i + 1] == ' ') {\n                s = s.Replace(\" \", \"_\");\n\
    \                i += 2;\n            }\n            else {\n                s\
    \ = s.Replace(\" \", \"-\");\n                i += 1;\n            }\n       \
    \ }\n        return s;", "        // Write your code here.\n        return text;",
  "        string result = text;\n        bool isSpace = false;\n        int spaceCount\
    \ = 0;\n        for(int i = 0; i < text.Length; i++) {\n            if(text[i]\
    \ == ' ')\n            {\n                isSpace = true;\n            }\n   \
    \         else\n            {\n                if(isSpace)\n                {\n\
    \                    spaceCount++;\n                }\n                else\n\
    \                {\n                    if(spaceCount > 2)\n                 \
    \   {\n                        spaceCount = 0;\n                        result\
    \ = result.Replace(\" \", \"-\");\n                    }\n                }\n\
    \                isSpace = false;\n            }\n        }\n        return result;",
  "        var result = \"\";\n        var previousChar = '\\0';\n        var spaceCount\
    \ = 0;\n        foreach (var c in text) {\n            if (c == ' ') {\n     \
    \           spaceCount++;\n            }\n            else if (c == ' ' && spaceCount\
    \ > 1) {\n                result = result + \"_\";\n                spaceCount\
    \ = 0;\n            }\n            else if (c == ' ' && spaceCount == 1) {\n \
    \               result = result + \"_\";\n                spaceCount = 0;\n  \
    \          }\n            else {\n                result = result + c;\n     \
    \       }\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", " ");', "        if (text == null || text.Length < 1)\n            return\
    \ text;\n        if (text.Contains(\"  \"))\n            text = text.Replace(\"\
    \  \", \"_\");\n        var spaces = new List<string>();\n        var isConsecutiveSpace\
    \ = true;\n        var sb = new StringBuilder();\n        var sb2 = new StringBuilder();\n\
    \        var lastChar = ' ';\n        for (int i = 0; i < text.Length; i++) {\n\
    \            var ch = text[i];\n            if (ch == ' ') {\n               \
    \ spaces.Add(text.Substring(lastChar, i));\n                isConsecutiveSpace\
    \ = true;\n                lastChar = i + 1;\n            } else if (ch != ' '\
    \ && isConsecutiveSpace) {\n                isConsecutiveSpace = false;\n    \
    \            sb2.Append('_');\n            }\n            sb2.Append(ch);\n  \
    \      }\n        sb.Append(sb2.ToString());\n        for (int i = sb2.Length;\
    \ i < text.Length; i++) {\n            spaces.Add(text.Substring(lastChar, i));\n\
    \            isConsecutiveSpace = true;\n            lastChar = i + 1;\n     \
    \       sb2.Append('_');\n        }\n        sb.Append(sb2.ToString());\n    \
    \    sb = new StringBuilder();\n        for (int i = 0; i < spaces.Count; i++)\n\
    \            sb.Append(spaces[i]);\n        return sb.ToString();", "        var\
    \ result = text.Replace(' ', '_');\n        if (result.IndexOf(' ') > 2) {\n \
    \           result = result.Replace(' ', '_');\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder();\n        Regex rgx = new Regex(@\"\
    [\" + Environment.NewLine + \"]+\");\n        foreach (Match m in rgx.Matches(text))\
    \ {\n            sb.Append(text).Replace(m.Value, \" \").Replace(\" \", \"_\"\
    );\n        }\n        return sb.ToString();", "        if (text == null) return\
    \ null;\n        // Get length of input string\n        int length = text.Length;\n\
    \        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If string has more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with \"-\"\n        if (text.Count(f =>\
    \ f == ' ') > 1) {\n            // Get the first space and last space\n      \
    \      string firstSpace = text.Substring(0, text.IndexOf(\" \"));\n         \
    \   string lastSpace = text.Substring(text.LastIndexOf(\" \") + 1);\n        \
    \    // If last space is followed by a character other than\n            // a\
    \ space, remove the last space and replace the \n            // current space\
    \ with \"-\"\n            if (lastSpace != \" \") {\n                text = text.Substring(0,\
    \ text.LastIndexOf(\" \")) + lastSpace + \"-\";\n            } else {\n      \
    \          text = text.Substring(0, text.LastIndexOf(\" \"));\n            }\n\
    \        }\n        return text;", "        string fixedText = text.Replace(\"\
    \ \", \"_\");\n        string lastString = fixedText;\n        if (fixedText.LastIndexOf(\"\
    \ \") > fixedText.IndexOf(\" \")) {\n            lastString = fixedText.Substring(fixedText.LastIndexOf(\"\
    \ \"), fixedText.IndexOf(\" \"));\n        }\n        fixedText = fixedText.Replace(\"\
    \ \", \"-\");\n        return fixedText + lastString;", "        if (text.Contains(\"\
    \  \"))\n            text = text.Replace(\"  \", \"_\");\n        if (text.Contains(\"\
    \ \"))\n        {\n            text = text.Replace(\" \", \"-\");\n        }\n\
    \        return text;", "        text = Regex.Replace(text, @\"\\s+\", \"_\");\n\
    \        while (text.Contains(\" \")) {\n            text = text.Replace(\" \"\
    , \"-\");\n        }\n        return text;", "        if (text == null) return\
    \ null;\n        return Regex.Replace(Regex.Replace(Regex.Replace(text, @\"\\\
    s+\", \" \"), @\"\\s{2,}\", \" -\"), @\"\\s\", \"-\");", '        return Regex.Replace(text,
    @"\s{1,}", @"_");', "        text = text.Replace(\" \", \"_\");\n        text\
    \ = text.Replace(\" -\", \"-\");\n        text = text.Replace(\"- \", \"-\");\n\
    \        text = text.Replace(\" -\", \"-\");\n        text = text.Replace(\" -\"\
    , \"-\");\n        text = text.Replace(\" -\", \"-\");\n        text = text.Replace(\"\
    \ -\", \"-\");\n        return text;", "        return text\n            .Replace(\"\
    \ \", \"_\")\n            .Replace(\" \", string.Empty)\n            .Replace(\"\
    \ \", \"-\");", "        if (string.IsNullOrEmpty(text))\n            return string.Empty;\n\
    \        var builder = new StringBuilder();\n        var buffer = new StringBuilder(text);\n\
    \        for (int i = 0; i < buffer.Length; i++) {\n            if (char.IsWhiteSpace(buffer[i]))\
    \ {\n                if (i == 0)\n                    builder.Append(' ');\n \
    \               else if (i == buffer.Length - 1)\n                    builder.Append('_');\n\
    \                else\n                    builder.Append('_');\n            }\
    \ else if (char.IsWhiteSpace(buffer[i + 1])) {\n                builder.Append('-');\n\
    \                i++;\n            } else {\n                builder.Append(buffer[i]);\n\
    \            }\n        }\n        return builder.ToString();", "        // Convert\
    \ the string into a character array and count the spaces\n        var charArray\
    \ = text.ToCharArray();\n        int spaceCount = charArray.Count(c => c == '\
    \ ');\n        // If the number of spaces is more than 2 then replace all consecutive\
    \ spaces with -\n        if (spaceCount > 2) {\n            for (int i = 0; i\
    \ < charArray.Length; i++) {\n                if (charArray[i] == ' ' && charArray[i\
    \ + 1] == ' ') {\n                    charArray[i] = '_';\n                  \
    \  charArray.RemoveAt(i);\n                }\n            }\n        }\n     \
    \   // Convert it back to a string and return it\n        return new string(charArray);",
  '        return text.Replace(" ", "_").Replace(" ", "-");', "        return string.Join(\"\
    \", text.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(x\
    \ => x == \" \" ? \"_\" : x));", "        string result = \"\";\n        string[]\
    \ words = text.Split(' ');\n        for (int i = 0; i < words.Length; i++) {\n\
    \            string word = words[i];\n            int j = i + 1;\n           \
    \ while (j < words.Length && words[j] == \" \")\n                j++;\n      \
    \      string newWord = word.Replace(\" \", \"_\");\n            if (newWord.Length\
    \ > 2 && j == words.Length - 1) {\n                string prevWord = words[j -\
    \ 1];\n                while (prevWord.Length > 1 && prevWord.Equals(newWord))\
    \ {\n                    newWord = newWord.Replace(prevWord, \"-\");\n       \
    \             prevWord = prevWord.Substring(0, prevWord.Length - 1);\n       \
    \         }\n            }\n            result += newWord + \" \";\n        }\n\
    \        return result.TrimEnd();", "        char[] arr = text.ToCharArray();\n\
    \        bool spaceFound = false;\n        StringBuilder sb = new StringBuilder();\n\
    \n        for (int i = 0; i < arr.Length; i++) {\n            if (arr[i] == '\
    \ ') {\n                if (!spaceFound) {\n                    spaceFound = true;\n\
    \                    sb.Append('_');\n                }\n                else\
    \ {\n                    spaceFound = false;\n                    sb.Append(arr[i]);\n\
    \                }\n            }\n            else if (arr[i] == ' ' && spaceFound)\
    \ {\n                sb.Append('_');\n                spaceFound = false;\n  \
    \          }\n            else {\n                sb.Append(arr[i]);\n       \
    \         spaceFound = false;\n            }\n        }\n\n        return sb.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        foreach (char c in text.ToCharArray())\
    \ {\n            if (c == ' ') {\n                sb.Append('_');\n          \
    \  }\n            else if (sb != null && sb.Length > 1 && c == ' ' && sb.Substring(sb.Length\
    \ - 1) == ' ') {\n                sb.Append('-');\n            }\n           \
    \ else {\n                sb.Append(c);\n            }\n        }\n        return\
    \ sb.ToString();", "        if (text == null || text.Trim().Length == 0)\n   \
    \         return text;\n\n        StringBuilder builder = new StringBuilder(text.Trim());\n\
    \        if (text.Contains(\" \") && text.Count(c => c == ' ') > 1) {\n      \
    \      char[] chars = new char[text.Length];\n            int lastSpace = -1;\n\
    \            for (int i = 0; i < text.Length; i++) {\n                char c =\
    \ text[i];\n                if (c == ' ' && lastSpace == -1) {\n             \
    \       lastSpace = i;\n                } else if (c == ' ' && lastSpace != -1)\
    \ {\n                    chars[lastSpace] = chars[i];\n                    lastSpace\
    \ = -1;\n                } else {\n                    lastSpace = -1;\n     \
    \           }\n            }\n\n            builder.Replace(\" \", \"_\");\n \
    \           builder.Insert(0, new string(chars));\n        }\n\n        return\
    \ builder.ToString();", "        string result = \"\";\n        for (int i = 0;\
    \ i < text.Length; i++) {\n            if (Char.IsWhiteSpace(text[i])) {\n   \
    \             result += text[i].ToString().Replace(' ', '_');\n            } else\
    \ {\n                result += text[i];\n            }\n        }\n        return\
    \ result;", '        return Regex.Replace(text, @" {2,}", new MatchEvaluator(FixConsecutiveSpaces));',
  "        const char space = ' ';\n        return text.Replace(\" \", space).Replace(\"\
    \  \", space);", "        // Get text into an array of chars\n        char[] textArray\
    \ = text.ToCharArray();\n\n        // Remove spaces from each char & store in\
    \ a new array\n        char[] fixedArray = new char[textArray.Length];\n     \
    \   for (int i = 0; i < textArray.Length; i++) {\n            if (textArray[i]\
    \ != ' ') fixedArray[i] = textArray[i];\n        }\n\n        // Check how many\
    \ spaces we have\n        int spaceCount = 0;\n        for (int i = 0; i < fixedArray.Length;\
    \ i++) {\n            if (fixedArray[i] == ' ') spaceCount++;\n        }\n\n \
    \       // If we have more than 2 spaces, we need to replace them\n        //\
    \ with dashes\n        if (spaceCount > 2) {\n            for (int i = 0; i <\
    \ fixedArray.Length; i++) {\n                if (fixedArray[i] == ' ') {\n   \
    \                 if (spaceCount == 2) {\n                        fixedArray[i]\
    \ = '_';\n                    }\n                    spaceCount--;\n         \
    \       }\n            }\n        }\n        return new string(fixedArray);",
  "        // TODO: Implement\n        return text;", '        return text.Replace("
    ", "_").Replace(" ", "-");', "        // Replace spaces with underscores\n   \
    \     var result = Regex.Replace(text, \"\\\\s\", \" \");\n        \n        //\
    \ If result has more than 2 consecutive spaces, replace \n        // all consecutive\
    \ spaces with - \n        if (result.Contains(\" \"))\n        {\n           \
    \ int count = Regex.Matches(result, \"\\\\s\").Count;\n            if (count >\
    \ 2)\n                result = Regex.Replace(result, \" +\", \"_\");\n       \
    \ }\n        \n        return result;", "        // Get the length of the string\
    \ text\n        int len = text.Length;\n        // Initialize a string builder\
    \ to store fixed spaces \n        StringBuilder sb = new StringBuilder(len);\n\
    \        // Iterate through each character of the string\n        for (int i =\
    \ 0; i < len; i++) {\n            // Check if the character is a space\n     \
    \       if (text.CharAt(i) == ' ') {\n                // If it is a space, add\
    \ an underscore\n                sb.Append('_');\n            }\n            //\
    \ If it is a character other than space, \n            // add the character itself\
    \ to stringbuilder\n            else {\n                sb.Append(text.CharAt(i));\n\
    \            }\n        }\n        return sb.ToString();", "        // Replacing\
    \ spaces with underscores\n        text = text.Replace(\" \", \"_\");\n      \
    \  // Check if text has more than 2 consecutive spaces\n        bool hasSpace\
    \ = false;\n        int i = 0;\n        while (i + 1 < text.Length) {\n      \
    \      if (text[i] == \" \" && text[i + 1] == \" \")\n            {\n        \
    \        hasSpace = true;\n            }\n            i += 1;\n        }\n   \
    \     if (hasSpace)\n        {\n            // Replacing consecutive spaces with\
    \ hyphens\n            string replaceString = text[i];\n            while (i <\
    \ text.Length)\n            {\n                if (text[i] == \" \")\n       \
    \         {\n                    replaceString += \"-\";\n                }\n\
    \                i += 1;\n            }\n            text = replaceString;\n \
    \       }\n        return text;", "        var newText = string.Empty;\n     \
    \   foreach (char c in text) {\n            if (c == ' ') {\n                newText\
    \ += \"_\";\n            } else if (c == ' ')\n                newText += \"-\"\
    ;\n            else\n                newText += c;\n        }\n        return\
    \ newText;", "        string result = string.Empty;\n        foreach (char item\
    \ in text) {\n            if (item == ' ') {\n                if (result != string.Empty)\
    \ {\n                    result += '_';\n                }\n            } else\
    \ {\n                result += item;\n            }\n        }\n        if (result.Length\
    \ > 2 && result.Contains(\" \") && result.Contains(\" \")) {\n            string[]\
    \ words = result.Split(' ');\n            StringBuilder newResult = new StringBuilder();\n\
    \            bool first = true;\n            bool consecutive = false;\n     \
    \       foreach (string word in words) {\n                if (word == \" \") {\n\
    \                    consecutive = false;\n                    newResult.Append(\"\
    -\");\n                } else {\n                    newResult.Append(word);\n\
    \                    consecutive = true;\n                }\n                if\
    \ (!first) {\n                    if (consecutive) {\n                       \
    \ newResult.Append(\" \");\n                    } else {\n                   \
    \     newResult.Append(\" \");\n                    }\n                }\n   \
    \             first = false;\n            }\n            result = newResult.ToString();\n\
    \        }\n        return result;", "        if (text == null) return null;\n\
    \        var words = text.Split(' ');\n        var newWords = new List<string>();\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (words.Length\
    \ - i > 2) words.RemoveAt(i);\n            if (words.Contains(\"  \")) words.Remove(words.IndexOf(\"\
    \  \"));\n            newWords.Add(string.Join(\"-\", words));\n        }\n  \
    \      return string.Join(\" \", newWords);", "        if (text.Contains(\" \"\
    )) {\n            return text.Replace(\" \", \"_\");\n        }\n        if (text.Length\
    \ > 2 && !text.Contains(\" \")) {\n            int startIndex = 0;\n         \
    \   int endIndex = text.Length;\n            string temp = \"\";\n           \
    \ while (startIndex != endIndex) {\n                if (text[startIndex] == \"\
    \ \") {\n                    if (text[startIndex + 1] == \" \") {\n          \
    \              temp += \"-\";\n                        startIndex++;\n       \
    \                 endIndex++;\n                    }\n                    else\
    \ {\n                        temp += \"_\";\n                        startIndex++;\n\
    \                    }\n                }\n                else {\n          \
    \          temp += text[startIndex];\n                    startIndex++;\n    \
    \            }\n            }\n            return temp;\n        }\n        return\
    \ text;", "        string fixedText = text.Replace(\" \", \"_\");\n        fixedText\
    \ = fixedText.Replace(\" -\", \"-\");\n        if (fixedText.Length > 2) fixedText\
    \ = fixedText.Replace(\" -\", \"-\");\n        return fixedText;", "        //\
    \ The space is always the last character in the string\n        // so we find\
    \ the position of the last space and replace\n        // all spaces with _\n \
    \       string fixed = text.Replace(\" \", \"_\");\n        int index = fixed.LastIndexOf('\
    \ ');\n        if (index >= 0) {\n            fixed = fixed.Replace(\"  \", string.Empty);\n\
    \        }\n        return fixed; ", "        StringBuilder sb = new StringBuilder();\n\
    \        foreach (char c in text)\n        {\n            if (c == ' ')\n    \
    \        {\n                sb.Append(\"_\");\n            }\n            else\n\
    \            {\n                sb.Append(c);\n            }\n        }\n    \
    \    return sb.ToString();", "        if (String.IsNullOrEmpty(text))\n      \
    \      return \"\";\n        int spaceCount = 0;\n        while (text.Contains(\"\
    \ \")) {\n            text = text.Replace(\" \", \"_\");\n            spaceCount++;\n\
    \        }\n        if (spaceCount > 2)\n        {\n            text = text.Replace(\"\
    \  \", string.Empty);\n            int index = text.IndexOf(\" \");\n        \
    \    while (index != -1)\n            {\n                text = text.Replace(\"\
    \ \", \"-\");\n                index = text.IndexOf(\" \", index + 1);\n     \
    \       }\n        }\n        return text;", "        if (String.IsNullOrEmpty(text))\n\
    \        {\n            return String.Empty;\n        }\n        char[] buffer\
    \ = new char[text.Length];\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i < text.Length; i++)\n        {\n            if (Char.IsWhiteSpace(text[i]))\n\
    \            {\n                buffer[i] = '_';\n            }\n            else\n\
    \            {\n                buffer[i] = text[i];\n            }\n        \
    \    if (i > 0 && buffer[i] == '_')\n            {\n                buffer[i]\
    \ = ' ';\n            }\n        }\n        builder.Append(buffer);\n        if\
    \ (builder.Length > 3)\n        {\n            builder = new StringBuilder(builder.ToString().Replace(\"\
    \  \", \"-\"));\n        }\n        return builder.ToString();", "        if (text.Contains(\"\
    \ \")) {\n            int count = 0;\n            int lastPos = 0;\n         \
    \   foreach (char c in text) {\n                if (c == ' ') count++;\n     \
    \           if (count == 2) lastPos = text.IndexOf(c, lastPos);\n            }\n\
    \            int pos = text.IndexOf(' ', lastPos);\n            if (pos > 0 &&\
    \ pos + 1 < text.Length && text[pos+1] == ' ')\n                text = text.Remove(pos,\
    \ 1);\n            if (count > 2)\n                text = text.Replace(\" \",\
    \ \"-\");\n        }\n        return text;", "        Regex regex = new Regex(@\"\
    \\s+\");\n        string result = regex.Replace(text, string.Empty);\n\n     \
    \   if (result.Contains(\" \"))\n            result = result.Replace(\" \", \"\
    -\");\n        return result;", '        return Regex.Replace(text, " ", "_",
    RegexOptions.IgnoreCase).Trim().Replace(" -", "_");', '        return Regex.Replace(text,
    @"\s+", " ");', "        if (text == null) {\n            throw new ArgumentNullException(\"\
    text\");\n        }\n        if (text.Length == 0)\n            return text;\n\
    \        var builder = new StringBuilder(text.Length);\n        var nextIndex\
    \ = 0;\n        while ((nextIndex = text.IndexOf(\" \", nextIndex + 1)) >= 0)\
    \ {\n            builder.Append(text.Substring(0, nextIndex));\n            builder.Append(\"\
    _\");\n            builder.Append(text.Substring(nextIndex + 1, text.Length -\
    \ nextIndex - 1));\n            nextIndex++;\n        }\n        return builder.ToString();",
  "        if (text == \"\" || text == \"_\" || text == \"-\" || text == \"---\")\
    \ {\n            return \"\";\n        }\n        text = text.Replace(\" \", \"\
    _\");\n        if (text.IndexOf(\"-\") != -1) {\n            int start = text.IndexOf(\"\
    -\") + 1;\n            while (text.IndexOf(\"-\") == start) {\n              \
    \  text = text.Replace(\"-\", \"_\");\n            }\n        }\n        if (text.IndexOf(\"\
    _\") != -1) {\n            while (text.IndexOf(\"_\") != -1) {\n             \
    \   text = text.Replace(\"_\", \"-\");\n            }\n        }\n        return\
    \ text;", "        if (String.IsNullOrEmpty(text)) return \"\";\n        Regex\
    \ r = new Regex(@\"\\s{2,}\");\n        string result = r.Replace(text, \" \"\
    );\n        while (result.Contains(\" \")) {\n            int index = result.IndexOf('\
    \ ');\n            string previous = result.Substring(0, index);\n           \
    \ string next = result.Substring(index+1);\n            result = previous + next.Replace(\"\
    \ \", \"_\");\n        }\n        return result;", "        StringBuilder result\
    \ = new StringBuilder(text);\n\n        // Replace spaces with underscores\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result.Append(\"_\");\n            }\n        }\n        return result.ToString();",
  "        return text\n            .Replace(\" \", \"_\")\n            .Replace(\"\
    \ \", string.Empty)\n            .Replace(\"  \", string.Empty)\n            .Replace(\"\
    \  \", string.Empty)\n            .Replace(\"  \", string.Empty)\n           \
    \ .Replace(\" \", \"_\");", "        var s = text.Trim();\n        return s.Replace(\"\
    \ \", \"_\").Replace(\" -\", \"-\").Trim();", '        return text.Replace(" ",
    "_").Replace(" ", "-");', "        if (text.Contains(' ') && !text.Contains('\
    \ ')) {\n            Console.WriteLine(\"Replace with underscores\");\n      \
    \      return text.Replace(' ', '_');\n        }\n        if (text.Contains('\
    \ ') && text.Contains(' ')) {\n            Console.WriteLine(\"Replace with hyphen\"\
    );\n            return text.Replace(' ', '-');\n        }\n        return text;",
  "        Regex regex = new Regex(\" \");\n        text = regex.Replace(text, \"\
    _\");\n        if (text.Count() == 1) return text;\n        var arr = new List<string>();\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == \"\
    \ \") {\n                arr.Add(text.Substring(0, i));\n                text\
    \ = text.Substring(i + 1);\n            }\n        }\n        text = regex.Replace(text,\
    \ \"_\");\n        if (text.Count() == 1) return text;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            arr[i] = regex.Replace(arr[i], \"_\");\n\
    \            if (arr[i].Count() > 1) arr[i] = regex.Replace(arr[i], \"-\");\n\
    \        }\n        return string.Join(\"\", arr);", "        StringBuilder result\
    \ = new StringBuilder();\n        string input = text.Replace(\" \", \"_\");\n\
    \        foreach (char character in input) {\n            if (character.Equals('\
    \ ') && result.Length > 0) {\n                result.Append(\"-\");\n        \
    \    } else { \n                result.Append(character);\n            }\n   \
    \     }\n        return result.ToString();", "        // The output - replace\
    \ all spaces with underscores, \n        // if there are more than 2 consecutive\
    \ spaces \n        // in the string, replace the spaces with - \n        // and\
    \ return the result.\n        var result = text.Replace(\" \", \"_\");\n     \
    \   if (result.Replace(\"  \", \"_\").Length > 2) {\n            result += \"\
    -\";\n        }\n        return result;", "        // Replace all spaces with\
    \ underscores\n        string spaceUnderscore = text.Replace(\" \", \"_\");\n\n\
    \        // If a text has more than 2 consecutive spaces\n        // then replace\
    \ all consecutive spaces with -\n        // >>> FixSpaces((\"Example 2\"))\n \
    \       // (\"Example_2\")\n        // >>> FixSpaces((\" Example 2 \"))\n    \
    \    // (\" Example2 \")\n        // >>> FixSpaces((\" Example 2 .\"))\n     \
    \   // (\" Example2 .\")\n        if (spaceUnderscore.IndexOf(\"_\") > spaceUnderscore.IndexOf(\"\
    -\"))\n        {\n            // Split text by underscores\n            string[]\
    \ parts = spaceUnderscore.Split('_');\n\n            // If text has more than\
    \ 2 parts, join it with underscores\n            // and replace the rest with\
    \ - \n            // >>> FixSpaces((\" Example 2 .\"))\n            // (\" Example2-.-\"\
    )\n            string newString = string.Join(\"-\", parts);\n\n            //\
    \ Return the text without spaces\n            return newString.Replace(\" \",\
    \ \"\");\n        }\n        else\n        {\n            // Return the text without\
    \ spaces\n            return spaceUnderscore.Replace(\" \", \"\");\n        }",
  "        int i = 0;\n        while (i < text.Length) {\n            if (text[i]\
    \ == ' ') {\n                i++;\n                if (i == text.Length || text[i]\
    \ == ' ') {\n                    text = text.Remove(i, 1);\n                }\
    \ else {\n                    text = text.Insert(i, \"_\");\n                \
    \    i++;\n                }\n            }\n            i++;\n        }\n   \
    \     return text;", "        return Regex.Replace(\n            text, \n    \
    \        \" \", \n            \"_\", \n            RegexOptions.None, \n     \
    \       MatchEvaluator );", "        var result = text;\n        if (string.IsNullOrEmpty(result))\n\
    \            return result;\n\n        result = result.Replace(\" \", \"_\");\n\
    \        if (result.Contains(\"  \"))\n            result = result.Replace(\"\
    \  \", \"-\");\n\n        return result;", "        string result = text;\n  \
    \      StringBuilder sb = new StringBuilder(text);\n        \n        // Find\
    \ how many spaces there are in the original string\n        int count = sb.Count(f\
    \ => f == ' ');\n        \n        // For each space, replace it with an underscore\n\
    \        for (int i = 0; i < count; i++) {\n            sb.Replace(\" \", \"_\"\
    );\n        }\n        \n        // For each string, if there are more than 2\
    \ consecutive spaces, then replace them with -\n        count = sb.Count(f =>\
    \ f == ' ');\n        for (int i = 0; i < count; i++) {\n            if (i + 1\
    \ < count && sb.Substring(i + 1, 1) != ' ') {\n                sb.Replace(\" \"\
    , \"-\");\n            }\n        }\n        \n        // return the fixed string\n\
    \        return sb.ToString();", "        string result = \"\";\n        if (text\
    \ == \"\") {\n            return result;\n        }\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < text.Length; i++) {\n  \
    \          if (char.IsWhiteSpace(text[i])) {\n                if (i < text.Length\
    \ - 1) {\n                    if (text[i + 1] == ' ') {\n                    \
    \    sb.Append('_');\n                        i++;\n                    }\n  \
    \              }\n            } else {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        result = sb.ToString();\n        return result;",
  "        // Use StringBuilder to increase performance.\n        StringBuilder sb\
    \ = new StringBuilder();\n        foreach(char c in text) {\n            if(char.IsWhiteSpace(c))\
    \ {\n                sb.Append('_');\n            }\n            else {\n    \
    \            sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  '        return text;', "        var spaceCount = new List<int>();\n\n        foreach\
    \ (var character in text.Where(c => char.IsWhiteSpace(c))) {\n            spaceCount.Add((text.IndexOf(character)\
    \ + 1).ToInt32() - 1);\n        }\n\n        if (spaceCount.Count > 1) {\n   \
    \         var resultString = string.Join(\n                \"-\",\n          \
    \      text.Skip(spaceCount.Count - 1).Select(t => t)\n            );\n\n    \
    \        foreach (var character in resultString) {\n                text = text.Replace(character,\
    \ \"_\");\n            }\n        }\n\n        return text;", "        if (String.IsNullOrEmpty(text))\
    \ {\n            return text;\n        }\n\n        var sb = new StringBuilder();\n\
    \        var lastSpaceFound = -1;\n        var lastCharFound = '\\0';\n      \
    \  for (int i = 0; i < text.Length; i++) {\n            var c = text[i];\n   \
    \         int spaceFound = text.IndexOf(' ', i);\n            if (spaceFound !=\
    \ -1) {\n                if (lastCharFound != ' ') {\n                    if (lastCharFound\
    \ == '\\0') {\n                        lastSpaceFound = spaceFound;\n        \
    \            } else {\n                        int lastCharInSpace = text.IndexOf(lastCharFound,\
    \ spaceFound + 1);\n                        while (lastCharInSpace != -1 &&\n\
    \                               text.IndexOf(\" \", lastCharInSpace) != -1) {\n\
    \                            lastCharFound = text.Substring(lastCharInSpace);\n\
    \                            lastCharInSpace = text.IndexOf(lastCharFound, lastCharInSpace\
    \ + 1);\n                        }\n                        lastSpaceFound = lastCharInSpace;\n\
    \                    }\n                }\n                sb.Append('-');\n \
    \               lastCharFound = ' ';\n            } else {\n                sb.Append(c);\n\
    \                lastCharFound = c;\n            }\n        }\n        if (lastCharFound\
    \ == '\\0') {\n            lastSpaceFound = -1;\n        }\n        return sb.ToString().TrimEnd('-');",
  "        if (text == null)\n            throw new ArgumentNullException(\"text\"\
    );\n\n        text = text.Replace(\" \", \"_\");\n        return text.Replace(\"\
    \ \" + text, \"\");", "        var sb = new StringBuilder();\n        int pos\
    \ = 0;\n        while ((pos = text.IndexOf(\" \", pos)) >= 0) {\n            sb.Append(text.Substring(pos,\
    \ 1).Replace(\" \", \"_\"));\n            sb.Append(text.Substring(pos + 1).Replace(\"\
    \ \", \"_\"));\n            pos = pos + 1;\n        }\n        sb.Append(text.Substring(pos));\n\
    \        return sb.ToString();", "        // Only need to check for a single space.\n\
    \        // If there's a second space, all subsequent spaces are replaced with\
    \ a '-'.\n        if (text.Contains(\" \"))\n        {\n            var words\
    \ = text.Split(' ');\n            if (words.Length > 1)\n            {\n     \
    \           for (int i = 1; i < words.Length; i++)\n                {\n      \
    \              // Replace all subsequent spaces with '-'.\n                  \
    \  words[i] = words[i].Replace(\" \", \"_\");\n                }\n           \
    \ }\n        }\n        return text;", "        string result = text.Replace(\"\
    \ \", \"_\");\n        if (result.Count() > 2) {\n            return result.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", '        return text.Replace("
    ", "_").Replace("  ", "_");', "        string result = text;\n        if (text.Contains(\"\
    \  \"))\n        {\n            result = result.Replace(\"  \", \"_\");\n    \
    \    }\n        if (text.Contains(\" \"))\n        {\n            result = result.Replace(\"\
    \ \", \"-\");\n        }\n        if (text.Contains(string.Join(\" \", text.Split(new\
    \ char[] { '-' }))) && text.Contains(\" \"))\n        {\n            result =\
    \ result.Replace(\" \", \"-\");\n        }\n        return result;", "       \
    \ // Get all the spaces and put them in an array called spaces.\n        string[]\
    \ spaces = text.Split(' ');\n        List<int> spaceIndexes = new List<int>();\n\
    \        int lastSpaceIndex = -1;\n        foreach (string space in spaces) {\n\
    \            lastSpaceIndex = spaceIndexes.Count;\n            spaceIndexes.Add(spaceIndexes.Count\
    \ + 1);\n        }\n        spaceIndexes[lastSpaceIndex] = 0;\n\n        // Find\
    \ the indexes of spaces in the string text\n        List<int> indexes = new List<int>();\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ')\n                indexes.Add(i);\n        }\n        indexes.Sort();\n\n\
    \        // Get all the spaces indexes that have more than 2 spaces, \n      \
    \  // and replace it with \"-\"\n        int index = 0;\n        for (int i =\
    \ 0; i < spaceIndexes.Count; i++) {\n            if (spaceIndexes[i] > 2)\n  \
    \          {\n                for (int j = index; j < spaceIndexes[i]; j++)\n\
    \                {\n                    text[indexes[i]] = ' ';\n            \
    \    }\n                indexes.RemoveAt(i);\n            }\n            index++;\n\
    \        }\n\n        // Join all the remaining indexes and spaces with underscores\n\
    \        // >>> FixSpaces((\"Example\"))\n        // (\"Example\")\n        for\
    \ (int i = 0; i < indexes.Count; i++)\n        {\n            string newText =\
    \ text.Substring(indexes[i], 1);\n            string newText = newText.Replace('\
    \ ', '_');\n            text = text.Substring(0, indexes[i]) + newText;\n    \
    \    }\n        return text;", "        // Convert the string to an array of chars\n\
    \        char[] charArray = text.ToCharArray();\n        // Replace all spaces\
    \ with underscores \n        charArray = charArray.Select(c => c == ' ' ? '_'\
    \ : c).ToArray();\n        // If the string has more than 2 consecutive spaces,\n\
    \        // then replace all consecutive spaces with -\n        int consecutiveSpaces\
    \ = 0;\n        foreach (char c in charArray) {\n            if (c == ' ') {\n\
    \                consecutiveSpaces++;\n            }\n            if (consecutiveSpaces\
    \ >= 2) {\n                charArray[consecutiveSpaces - 2] = '-';\n         \
    \       consecutiveSpaces = 0;\n            }\n        }\n        // Convert back\
    \ to a string\n        return new string(charArray);", "        if (string.IsNullOrEmpty(text))\
    \ return text;\n        int index = -1;\n        int count = 0;\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            char c = text[i];\n            if\
    \ (c == '_') {\n                if (count == 0) {\n                    index =\
    \ i;\n                    count = 1;\n                } else {\n             \
    \       count++;\n                }\n            } else if (c == ' ') {\n    \
    \            if (count == 2) {\n                    index++;\n               \
    \     count = 1;\n                } else {\n                    count++;\n   \
    \             }\n            } else if (count == 2) {\n                index++;\n\
    \                count = 1;\n            }\n        }\n        if (count == 2)\
    \ {\n            text = text.Substring(0, index) + \"-\" + text.Substring(index\
    \ + 1);\n        }\n        return text;", "        if (string.IsNullOrWhiteSpace(text))\n\
    \            return \"\";\n\n        text = text.Replace(\" \", \"_\");\n\n  \
    \      var count = 0;\n        var newtext = \"\";\n\n        for (var i = 0;\
    \ i < text.Length; i++) {\n            if (text[i] == \" \" && count < 2) {\n\
    \                count++;\n                newtext += \"-\";\n            }\n\
    \            else\n                newtext += text[i];\n        }\n\n        return\
    \ newtext;", "        string fixedText = text;\n        int i = 0;\n        char\
    \ c;\n        while ((c = fixedText.charAt(i)) != ' ') {\n            fixedText\
    \ = fixedText.Remove(i, 1);\n        }\n        i = fixedText.Length - 1;\n  \
    \      while ((c = fixedText.charAt(i)) != ' ') {\n            fixedText = fixedText.Insert(i,\
    \ '_');\n            i++;\n        }\n        fixedText = fixedText.Replace(\"\
    \ \", \"\");\n        return fixedText;", "        var result = \"\";\n      \
    \  char[] cArray = text.ToCharArray();\n        bool isSpace = true;\n       \
    \ foreach (char c in cArray) {\n            if (isSpace) {\n                isSpace\
    \ = false;\n                result += c;\n            } else {\n             \
    \   result += \" \";\n                isSpace = true;\n            }\n       \
    \ }\n        string result = result.Trim();\n        if (result.Contains(\" \"\
    )) \n            return result.Replace(\" \", \"-\");\n        else return result;",
  "        string res = text;\n        bool changed = false;\n        string temp\
    \ = null;\n        foreach (char c in text.ToCharArray()) {\n            if (c\
    \ == ' ') {\n                if (changed == true) {\n                    temp\
    \ += \"-\";\n                    changed = false;\n                }\n       \
    \         else {\n                    temp += \"_\";\n                    changed\
    \ = true;\n                }\n            }\n            else {\n            \
    \    if (changed == true) {\n                    temp += \"-\";\n            \
    \        changed = false;\n                }\n                else {\n       \
    \             temp += \"_\";\n                    changed = true;\n          \
    \      }\n            }\n        }\n        if (temp != text) {\n            res\
    \ = temp;\n        }\n        return res;", '        return Regex.Replace(text,
    "(^| )(.*?)(\s+)(.*?)($| )", "$1$2$3$4$5");', "        var sb = new StringBuilder();\n\
    \        foreach (char c in text) {\n            string replaceWith = c;\n   \
    \         bool isConsecutive = false;\n            while (c != ' ' && c != '_')\
    \ {\n                c = text[++i];\n                isConsecutive = false;\n\
    \                if (c == '_') {\n                    isConsecutive = true;\n\
    \                }\n            }\n            if (c == '_') {\n             \
    \   replaceWith = '-';\n            }\n            if (isConsecutive) {\n    \
    \            replaceWith = '-';\n            }\n            sb.Append(replaceWith);\n\
    \        }\n        return sb.ToString();", "        return Regex.Replace(\n \
    \           text, \n            \"(^|\\s)(\\s)+(\\S)($|\\s)\", \n            \"\
    $1$2-$3$4\");"]
stop_tokens:
- "\n    }\n"
