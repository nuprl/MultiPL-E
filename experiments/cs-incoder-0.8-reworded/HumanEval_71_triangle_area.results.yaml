language: cs
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long s = (a + b + c) / 2;\n        long
    area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        float triangleArea
    = (float)area;\n        if (triangleArea >= (long)Math.Sqrt(3)) {\n            triangleArea
    = triangleArea / 3;\n        }\n        return triangleArea;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfac23ve0.cs(21,21): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        //get the sum of any two sides\n
    \       long sum = a + b;\n        if (sum > c) {\n            //the sum is greater
    then the third side\n            sum = sum - c;\n        }\n        float area;\n
    \       //area calculation is based on this formula:\n        area = (float)Math.Sqrt(Math.Pow(sum,
    2.0f) / 2f);\n        return area;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <123cc11d6a944af98bdc96cf4005b35a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <123cc11d6a944af98bdc96cf4005b35a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        bool isValidTriangle;\n        if
    (a+b > c && b+c > a && a+c > b) {\n            isValidTriangle = true;\n        }
    else {\n            isValidTriangle = false;\n        }\n        return isValidTriangle
    ? Math.Round(Convert.ToDecimal(a*b*c)/Convert.ToDecimal(a+b+c), 2) : float.NaN;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpheomd8x8.cs(26,16): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''decimal'' and
    ''float''

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float s = 0.0f;\n        if (a
    + b > c) {\n            s = (a * b) / (a + b + c);\n            s = Math.Round(s,
    2);\n        } else {\n            s = -1;\n        }\n        return s;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvtu3ns2n.cs(23,17): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c && b + c > a &&
    a + c > b) {\n            return (float) Math.Sqrt(\n                (a + b +
    c) * (a + c - b) * (b - c - a));\n        } else {\n            return -1.0f;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <714a803e64414ceebe13d7ad73144c0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <714a803e64414ceebe13d7ad73144c0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = TriangleArea(a, b,
    c);\n        if (area != -1L) return Math.Round(area, 2);\n        return -1L;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2hgqoicf.cs(21,33): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        //int c = (int) Math.Sqrt(Math.Pow(b,
    2) + Math.Pow(c, 2));\n        long ab = a - b;\n        long ac = c - a;\n        long
    ba = b - b;\n        long bc = b - c;\n        long cb = c - b;\n        if (ab
    > ac) {\n            long acb = ac - bc;\n            long b = a + b;\n            long
    c = b + c;\n            long abc = ab + bc;\n            long abbc = abb + cb;\n
    \           long bbb = b - b;\n            long cc = c + c;\n            if (acb
    >= bbb + cc) {\n                long abbc = abb - cb;\n                return
    ((abbc / 2.0f) + (cb / 2.0f)) * Math.Sqrt(abbc / 4.0f);\n            }\n        }\n
    \       if (ab < ac) {\n            long acb = ac - bc;\n            long b =
    a + b;\n            long c = b + c;\n            long abc = ab + bc;\n            long
    abbc = abb + cb;\n            long bbb = b - b;\n            long cc = c + c;\n
    \           if (acb < bbb + cc) {\n                long abbc = abb - cb;\n                return
    ((abbc / 2.0f) + (cb / 2.0f)) * Math.Sqrt(abbc / 4.0f);\n            }\n        }\n
    \       if (ab == ac) {\n            long acb = ac - bc;\n            long b =
    a + b;\n            long c = b + c;\n            long abc = ab + bc;\n            long
    abbc = abb + cb;\n            long bbb = b - b;\n            long cc = c + c;\n
    \           return ((abbc / 2.0f) + (cb / 2.0f)) * Math.Sqrt(abbc / 4.0f);\n        }\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfxh6ecbj.cs(28,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpfxh6ecbj.cs(29,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpfxh6ecbj.cs(31,25): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpfxh6ecbj.cs(35,22): error CS0136: A local or parameter named ''abbc''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfxh6ecbj.cs(35,29): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpfxh6ecbj.cs(36,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpfxh6ecbj.cs(41,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpfxh6ecbj.cs(42,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpfxh6ecbj.cs(44,25): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpfxh6ecbj.cs(48,22): error CS0136: A local or parameter named ''abbc''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfxh6ecbj.cs(48,29): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpfxh6ecbj.cs(49,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpfxh6ecbj.cs(54,18): error CS0136: A local or parameter named ''b'' cannot
    be declar'
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double s = (a + b + c) / 2.0;\n
    \       return s * (s - a) * (s - b) * (s - c);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg2tdr1zn.cs(21,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long s = a + b + c;\n        float
    x = s * s * (s * (s - a) * (s - b) * (s - c));\n        float y = (float) Math.Sqrt((x
    * x) + (a * b) + (c * c));\n        return Math.Round(y*100.0)/100.0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg_k9e42v.cs(23,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long ab, ac, sum;\n        ab
    = b + c;\n        ac = a * 2;\n        sum = (long)Math.Sqrt(Math.Pow(ac, 2) +
    Math.Pow(ab, 2));\n        return (float)(sum / 2.0);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1265fc75998649698c77b45e7d133c02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1265fc75998649698c77b45e7d133c02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long p = a + b + c;\n        if
    (p <= 1) return -1;\n        float area;\n        double areaDouble = p.Area /
    2;\n        area = Math.Round(areaDouble, 2);\n        return area;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjet84fr3.cs(23,31): error CS1061: ''long'' does not contain a definition
    for ''Area'' and no accessible extension method ''Area'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpjet84fr3.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double side1 = Convert.ToDouble(a);\n
    \       double side2 = Convert.ToDouble(b);\n        double side3 = Convert.ToDouble(c);\n
    \       long sum = side1 + side2 + side3;\n        long max = Math.Max(side1,
    Math.Max(side2, side3));\n        long min = Math.Min(side1, Math.Min(side2, side3));\n\n
    \       if (sum == side1 && sum == side2 && sum == side3) {\n            return
    (0.0f);\n        } else if (sum == side1 && sum != side2 && sum != side3) {\n
    \           return (0.0f);\n        } else if (sum == side1 && sum == side2 &&
    sum != side3) {\n            return (0.0f);\n        } else if (sum == side1 &&
    sum != side2 && sum == side3) {\n            return (0.0f);\n        } else if
    (sum == side1 && sum == side2 && sum == side3) {\n            return (0.0f);\n
    \       } else if (sum != side1 && sum != side2 && sum != side3) {\n            return
    (0.0f);\n        } else if (sum != side1 && sum == side2 && sum != side3) {\n
    \           return (0.0f);\n        } else if (sum != side1 && sum == side2 &&
    sum == side3) {\n            return (0.0f);\n        } else if (sum != side1 &&
    sum != side2 && sum == side3) {\n            return (0.0f);\n        } else if
    (sum != side1 && sum != side2 && sum != side3) {\n            return (0.0f);\n
    \       } else if (sum != side1 && sum == side2 && sum != side3) {\n            return
    (0.0f);\n        } else if (sum != side1 && sum != side2 && sum == side3) {\n
    \           return (0.0f);\n        } else if (sum != side1 && sum == side2 &&
    sum != side3) {\n            return (0.0f);\n        } else if (sum != side1 &&
    sum != side2 && sum != side3) {\n            return (0.0f);\n        } else if
    (sum == side1 && sum == side2 && sum != side3) {\n            return (0.0f);\n
    \       } else if (sum == side1 && sum != side2 && sum == side3) {\n            return
    (0.0f);\n        } else if (sum == side1 && sum == side2 && sum != side3) {\n
    \           return (0.0f);\n        } else if (sum == side1 && sum != side2 &&
    sum == side3) {\n            return (0.0f);\n        } else if (sum == side1 &&
    sum != side2 && sum != side3) {\n            return (0.0f);\n        } else if
    (sum == side1 && sum == side2 && sum == side3) {\n            return (0.0f);\n
    \       } else if (sum == side1 && sum != side2 && sum != side3) {\n            return
    (0.0f);\n        } else if (sum == side1 && sum == side2 && sum == side3) {\n
    \           return (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplizr9nhp.cs(70,21): error CS1525: Invalid expression term ''}''

    /tmp/tmplizr9nhp.cs(70,21): error CS1026: ) expected

    /tmp/tmplizr9nhp.cs(70,21): error CS1002: ; expected

    /tmp/tmplizr9nhp.cs(72,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmplizr9nhp.cs(84,2): error CS1513: } expected

    '
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var bc = b * c;\n        var ab
    = a * b;\n\n        if (bc <= ab) {\n            return 0;\n        }\n        if
    (a < b) {\n            return -1;\n        }\n\n        long abc = ab + bc;\n
    \       if (abc > bc) {\n            return -1;\n        }\n        return (b
    - a + bc + ab) / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d49794287e6644a3ac652111143d37b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d49794287e6644a3ac652111143d37b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Acos(Math.Sqrt(Math.Pow(b
    + c - a, 2) / (2 * a)));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp84i1kuqf.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = (float)a;\n        area
    = area + b + c + ((long)(a * b * c));\n        area = area / 2;\n        return
    area;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b83e476bfb304b1c9f18d4384e1063cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b83e476bfb304b1c9f18d4384e1063cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a * a + b * b > c * c)\n            return
    -1;\n        return (a * b * c) / Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuy3pv1oq.cs(22,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0;\n        if ((a
    + b > c) || (b + c > a) || (c + a > b)) {\n            return (float)-1;\n        }\n
    \       float s = (a + b + c) / 2;\n        float area = (a * b * c) / Math.Sqrt((2
    * s) * (s - a) * (s - b) * (s - c));\n        area = Math.Round(area, 2);\n        return
    area;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdh45005m.cs(25,15): error CS0128: A local variable or function named ''area''
    is already defined in this scope

    /tmp/tmpdh45005m.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdh45005m.cs(26,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float h = (float)Math.Sqrt(a *
    a + b * b + c * c) / 3;\n        if (h > 0)\n            return (float)Math.Round(h,
    2);\n        else\n            return (float)-1L;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51f549d8fc8d4f5785f198567d64a685>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51f549d8fc8d4f5785f198567d64a685>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float answer = (float)Math.Sqrt(a
    * b + c * c);\n        // TODO: round answer down to two decimal points\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab611d57adc04de6b618e259a86de3e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab611d57adc04de6b618e259a86de3e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a > 0);\n        Debug.Assert(b
    > 0);\n        Debug.Assert(c > 0);\n        Debug.Assert(a <= b);\n        Debug.Assert(a
    <= c);\n        Debug.Assert(b <= c);\n        return (a * b) / Math.Sqrt(Math.Pow(a,
    2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp91jv5c2o.cs(26,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double s = (a*a + b*b - c*c)/2.0;\n
    \       return Math.Round(s * 100.0 / Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2)),
    2); \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwr9df8_2.cs(21,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float d = b - a;\n        float
    e = c - b;\n        float f = 2.0f * d / e;\n        return Math.Sqrt(f * f *
    f + 1.0f);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjpdpyba9.cs(23,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double side1 = Math.Sqrt(Math.Pow(a,
    2) + Math.Pow(b, 2));\n        double side2 = Math.Sqrt(Math.Pow(c, 2) - Math.Pow(side1,
    2));\n        double side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) - Math.Pow(c,
    2));\n        double area = (side1 * side2 * side3) / 2;\n        if (Math.Abs(area)
    < 1.0e-10) {\n            area = -1.0f;\n        }\n        return Math.Round(area,
    2, MidpointRounding.AwayFromZero);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj3vjudaj.cs(27,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // Solve the equation\n        return
    ((a + b + c) / 2L) * Math.Sqrt(Math.Pow(a + b + c, 2L) / 4L);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkkpng_dh.cs(21,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977245
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // TODO: Write your code here.\n
    \       long sum = 0;\n        sum += a;\n        sum += b;\n        sum += c;\n
    \       if (sum > a * a + b * b + c * c) {\n            float area = Math.Sqrt(Math.Pow(a
    / 2, 2) + Math.Pow(b / 2, 2) + Math.Pow(c / 2, 2));\n            if (area > 0.0f)
    {\n                return area;\n            } else {\n                return
    -1L;\n            }\n        } else {\n            return -1L;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5hois3gl.cs(26,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0f;\n        if ((a
    + b > c) && (a + c > b) && (b + c > a)) {\n            area = .5f * Math.Sqrt(Math.Pow((a
    + b - c), 2L) + Math.Pow((a - b + c), 2L) + Math.Pow((b - a + c), 2L));\n            area
    = Math.Round(area, 2L);\n        }\n        return area;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp243je51u.cs(22,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp243je51u.cs(23,31): error CS1503: Argument 1: cannot convert from ''float''
    to ''decimal''

    /tmp/tmp243je51u.cs(23,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var d = (a + b + c) / 2;\n        if
    (a > b + c) {\n            a -= d;\n            c += d;\n        }\n        if
    (b > a + c) {\n            b -= d;\n            c += d;\n        }\n        return
    Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2) - Math.Pow(d, 2));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpznjxhd0e.cs(29,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) {\n            return
    (float)System.Math.Sqrt((float)(a * a + b * b + c * c - a * b * c) / (float)(Math.Pow(a,
    b) + Math.Pow(b, 2) + Math.Pow(c, 2)));\n        }\n        return -1.0f;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <366b0f710e37422ab09acb601ab6c7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <366b0f710e37422ab09acb601ab6c7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sum = a+b+c;\n        if
    (sum < a) return (float)a;\n        if (sum < b) return (float)b;\n        if
    (sum < c) return (float)c;\n        return (float)((float)sum-a)*((float)sum-b)*((float)sum-c);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7f5c3c1899d465a947805ece38f171c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b7f5c3c1899d465a947805ece38f171c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a < b && b < c);\n
    \       long d = 0;\n        if (c == 0) return 0F;\n        if (a > b) d = b
    - c;\n        else d = c - a;\n        long e = (a + b + d) / 2;\n        if (d
    >= e - a + b) {\n            if (d > b) return 0F;\n            float result =
    ((float)(a / 2)) * ((float)(e / 2) - b);\n            return Math.Round(result,
    2, MidpointRounding.AwayFromZero);\n        }\n        float f = (a / 2) * ((e
    / 2) - b) * ((e / 2) - b) / a;\n        return Math.Round(f, 2, MidpointRounding.AwayFromZero);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpww7idlks.cs(29,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpww7idlks.cs(32,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double s = (a+b+c)/2;\n        double
    area = Math.Sqrt(s * (s-a) * (s-b) * (s-c));\n        if (Math.Abs(a-c) <= Math.Abs(a-b))
    {\n            return (float)Math.Round(area,2);\n        }\n        return -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68abb32a48974f418dd1406052cd0da0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68abb32a48974f418dd1406052cd0da0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0;\n        float
    total = (a + b + c) / 2;\n        while (a > b) {\n            a -= total;\n            b
    += total;\n            total += total;\n        }\n        if (b > c) {\n            b
    -= total;\n            c += total;\n            total += total;\n        }\n        if
    ((a + b) > c) {\n            while (a > b) {\n                a -= total;\n                b
    += total;\n                total += total;\n            }\n        }\n        area
    = total * (b - a);\n        return Math.Round(area, 2, MidpointRounding.AwayFromZero);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp40k5jvld.cs(23,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp40k5jvld.cs(24,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp40k5jvld.cs(28,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp40k5jvld.cs(29,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp40k5jvld.cs(34,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp40k5jvld.cs(35,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp40k5jvld.cs(40,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Sqrt(Math.Pow(a, 2)
    + Math.Pow(b, 2) + Math.Pow(c, 2)) * .5;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprihv62oz.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = (b * b) - (4 * a
    * c);\n        if (area > 0)\n            area = Math.Sqrt(area);\n        if
    ((a * a + b * b) > c)\n            return -1;\n        return area;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbeoz_zks.cs(22,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long ab = a + b;\n        long
    ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n        return
    abc == ab ? ab : -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8a070c431b24811a99e28cec63d71fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8a070c431b24811a99e28cec63d71fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a < b, \"a should
    be less than b\");\n        Debug.Assert(a < c, \"a should be less than c\");\n
    \       Debug.Assert(b < c, \"b should be less than c\");\n        return Math.Sqrt(Math.Pow((a
    + b + c), 2) / (3 * (a + b)));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8rrsv2up.cs(23,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area, temp;\n        bool
    valid, valid2;\n        valid = a > 0 && b > 0 && c > 0;\n        valid2 = b >
    a && c > b;\n        if (valid) {\n            area = (a * a + b * b + c * c -
    a * b - c * a + b * c - a * c) / (2 * (float)Math.Sqrt(float.MaxValue));\n            if
    (area >= (float)(-b * c - a * b))\n                area = Math.Round(Convert.ToSingle(area,
    System.Globalization.CultureInfo.InvariantCulture), 2);\n            else {\n
    \               temp = float.MaxValue;\n                area = -1;\n            }\n
    \       } else {\n            area = -1;\n        }\n        return area;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvso9qf2l.cs(27,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvso9qf2l.cs(20,21): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        //  Your code goes here\n        if
    (a + b > c) {\n            return Math.Sqrt(Math.Pow(c + b - a * b, 2)) / 2;\n
    \       }\n        if (b + c > a) {\n            return Math.Sqrt(Math.Pow(a +
    b - c * a, 2)) / 2;\n        }\n        if (c * c > a * b) {\n            return
    -1;\n        }\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiz4jfiex.cs(22,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpiz4jfiex.cs(25,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return ((float)(a * b)) / Math.Sqrt((float)(a
    * a + b * b + c * c));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzc38i901.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float sum = (a + b + c) / 2.0f;\n
    \       if (Math.Abs(a - b) > Math.Abs(a - c)) {\n            return (float)Math.Sqrt(sum
    * (sum - a * b) / c);\n        } else {\n            return (float)Math.Sqrt(sum
    * (sum - a - c) / b);\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a83536e28136499898969513a47d7317>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a83536e28136499898969513a47d7317>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a > c && b > c) {\n            return
    (float)(Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2)) - Math.Pow(a, 2));\n        }\n
    \       if (a == 0 || b == 0 || c == 0)\n            return -1;\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11a2b32b04084e48b8b75f8f8fe45de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11a2b32b04084e48b8b75f8f8fe45de9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sum = a + b + c;\n        long
    maxsum = sum;\n        if (c > b) maxsum = maxsum - c;\n        if (a > b) maxsum
    = maxsum - a;\n        return Math.Round((float)maxsum / 3f, 2);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsjq52q7o.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a >= b && b >= c && c >= a
    + b)\n            return (float)Math.Sqrt(a * b * c);\n        else\n            return
    -1F;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4da051a4ef6146248d234eab1f018898>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4da051a4ef6146248d234eab1f018898>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Abs(Math.Sqrt(Math.Pow(a,
    2) + Math.Pow(b, 2) + Math.Pow(c, 2)) \n                        - Math.Pow(a,
    2) * Math.Pow(b, 2) * Math.Pow(c, 2)) / 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ilxpxmz.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = -1;\n        bool
    valid = true;\n        while (b > c) {\n            if (b < c) {\n                c
    = b - (long)Math.Sqrt(b * b - (double)(a * a - c * c));\n            }\n            else
    {\n                b = b - (long)Math.Sqrt(b * b - (double)(a * a - b * b));\n
    \           }\n            valid = valid && (b > 0);\n            area = Math.Abs(area)
    + (float)(b) * Math.Sqrt(b * b - (double)(a * a - b * b));\n        }\n        return
    valid\n            ? (float)Math.Sqrt(area / a)\n            : -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_6rmbxhd.cs(30,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long abc = a + b + c;\n        return
    abc * abc > c ? (float)abc / 2f : -1f;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c909a828905485698ec91b5cb2be080>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7c909a828905485698ec91b5cb2be080>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float sum = a + b + c;\n        return
    Math.Abs(sum) / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b20f402fae14d94971da1125b3a4efd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b20f402fae14d94971da1125b3a4efd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long a2 = (a * a);\n        long
    b2 = (b * b); \n        long c2 = (c * c);\n        long d = Math.Sqrt(a2 + b2
    + c2);\n        long e = Math.Sqrt(a2 + b2);\n        long f = Math.Sqrt(c2 +
    a2);\n        long g = Math.Sqrt(b2 + c2);\n        long h = (a + b + c) / 2;\n
    \       long x = ((b2 - c2 - a2) / h) / 2;\n        long y = ((f2 - e2 - f2) /
    h) / 2;\n        long z = ((a2 - f2 - a2) / h) / 2;\n        float area = (float)(a
    * x + b * y + c * z) / 2;\n        if (Math.Abs(area - Math.Sqrt(area + Math.Sqrt(area
    + area))) > 0.0000001f)\n            return area;\n        else\n            return
    -1.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0zing9oq.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0zing9oq.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0zing9oq.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0zing9oq.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0zing9oq.cs(29,20): error CS0103: The name ''f2'' does not exist in the
    current context

    /tmp/tmp0zing9oq.cs(29,25): error CS0103: The name ''e2'' does not exist in the
    current context

    /tmp/tmp0zing9oq.cs(29,30): error CS0103: The name ''f2'' does not exist in the
    current context

    /tmp/tmp0zing9oq.cs(30,25): error CS0103: The name ''f2'' does not exist in the
    current context

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // Initialize result to -1\n        float
    result=-1f;\n        // Initialize sums to 0\n        long sumA=0L;\n        long
    sumB=0L;\n        long sumC=0L;\n        // If all three sides are valid, the
    triangle is valid\n        if (a>0L&&b>0L&&c>0L) {\n            // Sum all sides\n
    \           sumA=a+b+c;\n            // Sum two sides\n            sumB=a+b+a;\n
    \           // Sum three sides\n            sumC=a+a+b;\n            // Check
    if sum of two sides is greater \n            // than the sum of three sides\n
    \           if (sumA>sumB&&sumB>sumC) {\n                // Check if sum of two
    sides is greater than the third side\n                // which is sum of two sides\n
    \               if (sumA>sumB) {\n                    // Sum three sides\n                    sumC=a+a+b;\n
    \                   // Check if sum of two sides is greater \n                    //
    than the third side\n                    if (sumA>sumC) {\n                        //
    Calculate area (square root of sum of two sides)\n                        result=Math.Sqrt(sumA/2);\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprwl2h5to.cs(46,32): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a != 0);\n        Debug.Assert(b
    != 0);\n        Debug.Assert(c != 0);\n        Debug.Assert(c > 0);\n        Debug.Assert(b
    > a);\n        Debug.Assert(b > a);\n        Debug.Assert(a > 0);\n        Debug.Assert(b
    > 0);\n        Debug.Assert(c > 0);\n        Debug.Assert(c < b);\n        Debug.Assert(b
    < a);\n        Debug.Assert(c < a);\n\n        // Now we know a, b and c are all
    greater than 0, we can do the math\n        long area;\n        Debug.Assert(c
    >= (a + b));\n        Debug.Assert(b >= (a + c));\n        Debug.Assert(a >= (b
    + c));\n        Debug.Assert(b >= (a + c));\n        Debug.Assert(a >= (b + c));\n
    \       Debug.Assert(c >= (a + b));\n        Debug.Assert(c >= (b + a));\n        Debug.Assert(c
    >= (a + a));\n        Debug.Assert(c >= (b + b));\n        Debug.Assert(c >= (a
    + b));\n        area = (b * b) - ((a * c) - (a * b)) / 2;\n        // Now the
    area is positive if we found a triangle, and negative otherwise.\n        return
    area > 0 ? Math.Round(area, 2) : -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_j3_9bs.cs(47,32): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal, int)'' and ''Math.Round(double, int)''

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = ((b * b) - (4 * a
    * c));\n        return Math.Abs(area) < 0.00001F ? -1F : Math.Round(area, 2);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpah7j83p7.cs(21,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Sqrt(Math.Pow((a +
    b), 2) + Math.Pow((c + b), 2));\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdd1zrg1n.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return a < b ? a + b + c : b +
    a + c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9325a110344489685b6178d2854d351>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9325a110344489685b6178d2854d351>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sumA = a + b;\n        long
    sumB = a + c;\n        long sumC = c + b;\n        if ((sumA > sumB) || (sumB
    > sumC)) {\n            return -1.0f;\n        }\n        return (float)(Math.Sqrt(sumA
    * sumB - sumC * sumC));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be5297402c6948bab5dfe6fb47bba32a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be5297402c6948bab5dfe6fb47bba32a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double sumOfTwoSides = a + b;\n
    \       double sumOfThreeSides = a + b + c;\n        if (sumOfTwoSides >= sumOfThreeSides)\n
    \           return MathF.Round((sumOfTwoSides * b) / 6);\n        return -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsnibmzug.cs(23,32): error CS1503: Argument 1: cannot convert from ''double''
    to ''float''

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long d = b - a;\n        long
    e = c - b;\n        if (d > 0 && e > 0) {\n            long f = (d + e) / 2;\n
    \           long g = (b - f) * 0.5f;\n            long h = (c - g) * 0.5f;\n            long
    k = Math.Sqrt(f * f + g * g + h * h);\n            return (float)(k / 2);\n        }\n
    \       if (d < 0 && e < 0) {\n            long g = -d;\n            long h =
    (c + g) * 0.5f;\n            long f = (b - h) * 0.5f;\n            long k = Math.Sqrt(f
    * f + h * h + g * g);\n            return (float)(k / 2);\n        }\n        if
    (d == 0 && e > 0) {\n            long h = d;\n            long f = (c + h) * 0.5f;\n
    \           long g = (b - f) * 0.5f;\n            long k = Math.Sqrt(f * f + g
    * g + h * h);\n            return (float)(k / 2);\n        }\n        if (d ==
    0 && e < 0) {\n            long f = -d;\n            long g = (c + f) * 0.5f;\n
    \           long h = (b - g) * 0.5f;\n            long k = Math.Sqrt(f * f + g
    * g + h * h);\n            return (float)(k / 2);\n        }\n        if (e ==
    0) {\n            return (float)(Math.Sqrt((double)d / (double)a));\n        }\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeieynvm0.cs(24,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(25,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(31,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(32,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(33,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(38,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(39,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(40,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(45,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(46,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpeieynvm0.cs(47,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0.0;\n        if
    ((a + b > c) && (c > b)) {\n            float a1 = (a + b - c) / 2.0;\n            float
    b1 = (b + c - a) / 2.0;\n            float c1 = c - a - b;\n            if (a1
    > b1) {\n                float temp = a1;\n                a1 = b1;\n                b1
    = temp;\n            }\n            if (a1 > c1) {\n                float temp
    = a1;\n                a1 = c1;\n                c1 = temp;\n            }\n            area
    = a1 * b1 * c1;\n            area = Math.Round(area, 2);\n        }\n        else
    {\n            area = -1;\n        }\n        return area;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1j83z3cf.cs(20,22): error CS0664: Literal of type double cannot be implicitly
    converted to type ''float''; use an ''F'' suffix to create a literal of this type

    /tmp/tmp1j83z3cf.cs(22,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1j83z3cf.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1j83z3cf.cs(36,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float a = float.Parse(a.ToString());\n
    \       float b = float.Parse(b.ToString());\n        float c = float.Parse(c.ToString());\n
    \       float s = a + b + c;\n        if (s > 0) {\n            if (a >= b) {\n
    \               return c;\n            } else if (b >= c) {\n                return
    a;\n            } else {\n                return b;\n            }\n        }
    else {\n            if (a >= b) {\n                return a;\n            } else
    if (b >= c) {\n                return b;\n            } else {\n                return
    c;\n            }\n        }\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3w4xcy0.cs(20,15): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmps3w4xcy0.cs(21,15): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmps3w4xcy0.cs(22,15): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmps3w4xcy0.cs(20,31): error CS0165: Use of unassigned local variable ''a''

    /tmp/tmps3w4xcy0.cs(21,31): error CS0165: Use of unassigned local variable ''b''

    /tmp/tmps3w4xcy0.cs(22,31): error CS0165: Use of unassigned local variable ''c''

    '
  timestamp: 1659977246
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a < b, \"a must be
    less than b\");\n        Debug.Assert(b < c, \"b must be less than c\");\n        long
    a1 = (long)(Math.Sqrt(Math.Pow(a, 2L) + Math.Pow(b, 2L) + Math.Pow(c, 2L)));\n
    \       if (a1 < b) Debug.Assert(a < b, \"a must be less than b\");\n        if
    (a1 < c) Debug.Assert(a < c, \"a must be less than c\");\n        if (a1 > c)
    Debug.Assert(a > c, \"a must be greater than c\");\n        return a1 / 2L;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: a must be greater than c\n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition, System.String
    message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition, System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at Problem.TriangleArea (System.Int64 a, System.Int64 b, System.Int64 c) [0x00000]
    in <10a8616476a04612b4671ac7916af1ee>:0 \n  at Problem.Main (System.String[] args)
    [0x00000] in <10a8616476a04612b4671ac7916af1ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10a8616476a04612b4671ac7916af1ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac36"
  stdout: ''
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return a > c ? b * b : (a + b)
    * (a - c) * (b + c);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <291e7e10fc954cc3be7eb52ee7d889b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <291e7e10fc954cc3be7eb52ee7d889b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // The sum of the two sides is
    greater than the third side because they \n        // are parallel sides of the
    triangle. \n        if ((a + b > c) && (a + c > b) && (b + c > a)) {\n            //
    The area of the triangle is equal to the hypotenuse times the\n            //
    area of the sides times their respective areas multiplied by \n            //
    the correct sign. \n            float areal = (float)Math.Sqrt(a * a + b * b +
    c * c);\n            return areal * sign / 2f;\n        }\n        return -1f;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp939mz3n4.cs(27,28): error CS0103: The name ''sign'' does not exist in
    the current context

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0.0f;\n        long
    s1 = a + b, b1 = b + c, c1 = c + b;\n        if ((s1 + c1) > a) { // If s1 + c1
    > a then they form an invalid triangle.\n            return -1.0f;\n        }\n
    \       long sq1 = s1 * s1;\n        long sq2 = b1 * b1;\n        long sq3 = c1
    * c1;\n        if ((sq3 + sq2) < (sq1 + sq2)) { // If sq3 + sq2 < (sq1 + sq2)
    then they form an invalid triangle.\n            return -1.0f;\n        }\n        float
    d = (float)Math.Sqrt(sq3 - sq2);\n        area = (float)(s1 * b2 - b1 * c2);\n
    \       if ((float)(Math.Abs(area)) > 10) {\n            return -1.0f;\n        }\n
    \       area = area / d;\n        return Math.Round(area, 2);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplndxwrta.cs(32,29): error CS0103: The name ''b2'' does not exist in the
    current context

    /tmp/tmplndxwrta.cs(32,39): error CS0103: The name ''c2'' does not exist in the
    current context

    /tmp/tmplndxwrta.cs(37,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long a, b, c, d;\n        if (a
    + b > c) {\n            d = a - c;\n            c = b - d;\n            b = a
    - c;\n            a = b - d;\n        }\n        return (b * b - 4 * a * c) /
    2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2xwxt2l_.cs(20,14): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp2xwxt2l_.cs(20,17): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp2xwxt2l_.cs(20,20): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp2xwxt2l_.cs(21,13): error CS0165: Use of unassigned local variable ''a''

    /tmp/tmp2xwxt2l_.cs(21,17): error CS0165: Use of unassigned local variable ''b''

    /tmp/tmp2xwxt2l_.cs(21,21): error CS0165: Use of unassigned local variable ''c''

    '
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float side1 = (float)Math.Sqrt((float)(a
    + b + c));\n        float side2 = (float)Math.Sqrt((float)(a + b - c));\n        float
    side3 = (float)Math.Sqrt((float)(a - b + c));\n        if (side1 >= side2 && side1
    >= side3)\n            return side1 / 2;\n        if (side2 >= side1 && side2
    >= side3)\n            return side2 / 2;\n        if (side3 >= side1 && side3
    >= side2)\n            return side3 / 2;\n        return -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11741d52d90647beac956519c13fdc60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11741d52d90647beac956519c13fdc60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Sqrt(Math.Pow(a, 2)
    + Math.Pow(b, 2) + Math.Pow(c, 2)) / 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kf3abga.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a+b > c) {\n            int
    temp = a + b;\n            a = b;\n            b = temp;\n        }\n        if
    (a+c > b) {\n            int temp = a + c;\n            a = c;\n            c
    = temp;\n        }\n        if (b+c > a) {\n            int temp = b + c;\n            b
    = c;\n            c = temp;\n        }\n        float area = (a * a + b * b +
    c * c) / 2f;\n        if (area < 0)\n        {\n            area = -1;\n        }\n
    \       return area;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbzzhcb_j.cs(21,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbzzhcb_j.cs(26,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbzzhcb_j.cs(31,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var s = a + b + c;\n        long
    d = b - a;\n        long e = c - b;\n        if (d == 0) return 0f;\n        long
    f = System.Math.Sqrt(s * (s - d) * (s - e));\n        return (float)f;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcx3lazqx.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double area = 0.0;\n\n        if
    ((a + b > c) && (a + c > b)) {\n            double l = (a + b) / (a + c + b);\n
    \           area = Math.PI * (long) Math.Pow((double) l, (1.0 / 3.0));\n        }
    else {\n            area = -1;\n        }\n        return Convert.ToSingle(area);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b7909bbb9ef48af8aa05963063107c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2b7909bbb9ef48af8aa05963063107c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // Convert all lengths to floats\n
    \       float side1 = (float)a;\n        float side2 = (float)b;\n        float
    side3 = (float)c;\n\n        // Check if any of them is negative (bad triangle)\n
    \       if (side1 < 0)\n            return (float)-1.0;\n\n        if (side2 <
    0)\n            return (float)-1.0;\n\n        if (side3 < 0)\n            return
    (float)-1.0;\n\n        // Sum of three sides\n        float sum = (side1 + side2
    + side3) / 2f;\n        // Check if sum of two sides is bigger\n        if (sum
    > side2)\n            // If bigger, it's not a triangle\n            return (float)-1.0;\n\n
    \       // Sum of two sides\n        float area1 = (side1 * side1 + side2 * side2
    + side3 * side3) / 2f;\n        // Check if sum of two sides is bigger\n        if
    (area1 > side3)\n            // If bigger, it's not a triangle\n            return
    (float)-1.0;\n\n        // Sum of three sides\n        float area2 = (side1 *
    side2 + side2 * side3 + side3 * side3) / 2f;\n        // Check if sum of two sides
    is bigger\n        if (area2 > side1)\n            // If bigger, it's not a triangle\n
    \           return (float)-1.0;\n\n        // Sum of three sides\n        float
    area3 = (side1 * side3 + side2 * side3 + side3 * side3) / 2f;\n        // Check
    if sum of two sides is bigger\n        if (area3 > side2)\n            // If bigger,
    it's not a triangle\n            return (float)-1.0;\n\n        // Triangle is
    valid\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e4d100b5e074eb68656bdc6cd16e538>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e4d100b5e074eb68656bdc6cd16e538>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if ((a + b > c) && (a + c > b)
    && (b + c > a)) {\n            double d = (a + b + c) / 2;\n            double
    area = Math.Sqrt(d * d - a * b - c * a);\n            return (float) Math.Round(area,
    2);\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f4d8efd728a40e79cfe9397687db38d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f4d8efd728a40e79cfe9397687db38d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0.0;\n        long
    triangleArea = 0.0;\n        if(a>0 && b>0 && c>0){\n            triangleArea
    = ((a+b+c)/2);\n            area = Math.Round(triangleArea,2);\n            if(area>0)
    return area;\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_bdbw85.cs(20,22): error CS0664: Literal of type double cannot be implicitly
    converted to type ''float''; use an ''F'' suffix to create a literal of this type

    /tmp/tmpb_bdbw85.cs(21,29): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpb_bdbw85.cs(24,25): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal, int)'' and ''Math.Round(double, int)''

    '
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var sum = a + b + c;\n        if
    (Math.Abs(sum - c) >= Math.Abs(sum - b)) {\n            if (Math.Abs(sum - a)
    >= Math.Abs(sum - c)) {\n                return (float)Math.Sqrt(a * a + b * b
    + c * c);\n            }\n            else {\n                return (float)Math.Sqrt(c
    * c + a * a);\n            }\n        }\n        else {\n            return (float)Math.Sqrt(b
    * b + c * c);\n        }\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <484512737f3f45a5826627fba88e705a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <484512737f3f45a5826627fba88e705a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long d = (a + b + c) * .5f;\n
    \       long e = a + b - c;\n        long f = b - a;\n        long g = (a + b)
    * .5f;\n        long h = (b + c) * .5f;\n        float area, perimeter;\n        float
    sum = (d + e + f) * .5f;\n        bool valid = d == sum || g == sum || h == sum;\n
    \       if (valid) {\n            area = (float)d;\n            perimeter = (float)(a
    + b + c);\n        }\n        else\n        {\n            area = (float)(-1);\n
    \           perimeter = (float)((a + b + c) * .5f);\n        }\n        return
    area == -1 ? -1 : area;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1_svlj_z.cs(20,18): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1_svlj_z.cs(23,18): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1_svlj_z.cs(24,18): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float sum = b + c;\n        float
    average = sum / 2.0f;\n        float difference = a - average;\n        float
    absDifference = Math.Abs(difference);\n        float squareDifference = absDifference
    * absDifference;\n        float result = squareDifference / (2.0f * a*c);\n        return
    Math.Round(result, 2, MidpointRounding.AwayFromZero);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmgiqmbfu.cs(26,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // If the sum of the three sides
    is greater than the third side, \n        // the area is 0\n        if ((a + b
    + c) > 3L) {\n            return 0.0f;\n        }\n\n        // If the sum of
    the three sides is equal to the third side, \n        // the area is 0\n        if
    (a == b) { \n            return 0.0f;\n        }\n\n        // If the sum of the
    three sides is less than the third side, \n        // the area is 0\n        if
    (a < c) {\n            return 0.0f;\n        }\n\n        // If the sum of the
    two sides is greater than the third side, \n        // the area is 0\n        if
    ((a + b) > c) {\n            return 0.0f;\n        }\n\n        // The area is
    equal to the product of the two diagonals\n        return 0.5f * a * b;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75bedec0ceb04f899e8738bb27004f48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75bedec0ceb04f899e8738bb27004f48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float a1 = (float)(Math.Sqrt(Math.Pow((double)a,
    2.0)));\n        float b1 = (float)(Math.Sqrt(Math.Pow((double)b, 2.0)));\n        float
    c1 = (float)(Math.Sqrt(Math.Pow((double)c, 2.0)));\n        float a = Math.Abs(a1
    - b1 - c1);\n        float b = Math.Abs(b1 - a1 - c1);\n        float c = Math.Abs(c1
    - b1 - a1);\n        float s = 0.5f * (a + b + c);\n        if ((a + b + c) ==
    2.0f) {\n            return (s);\n        }\n        if ((a + b + c) < 2.0f) {\n
    \           float t = a * b;\n            return (b * Math.Sqrt(Math.Pow(t, 2.0)
    + Math.Pow(a, 2.0) + Math.Pow(c, 2.0)));\n        }\n        else {\n            return
    (float)Math.Sqrt(Math.Pow(2.0f - s, 2.0) + Math.Pow(a, 2.0) + Math.Pow(b, 2.0)
    + Math.Pow(c, 2.0f));\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdki4100x.cs(20,55): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpdki4100x.cs(21,55): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmpdki4100x.cs(22,55): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmpdki4100x.cs(23,15): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpdki4100x.cs(24,15): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpdki4100x.cs(25,15): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpdki4100x.cs(32,21): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a == 0 || b == 0 || c == 0
    || a + b > c || a + c > b || b + c > a) {\n            return -1;\n        }\n
    \       return (a * a + b * b + c * c - a * b - a * c + b * c - c * a + a * b
    * c + a * b * a - a * c * b + b * c * a - c * a * b - a * c * c - b * b * c);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8237d04806a84a6dbf23afb8ee950640>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8237d04806a84a6dbf23afb8ee950640>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Sqrt(a * b * c - (b
    * b) * c - (b * b) * c);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9_3jbran.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long s = a + b + c;\n        if
    (a < b && a < c || b < a && b < c || c < a && c < b) {\n            return 0.0f;\n
    \       }\n        return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp91h39s4g.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if ((a + b) > c) {\n            return
    -1;\n        }\n\n        float side1 = (a + b) / 2;\n        float side2 = (float)
    Math.Sqrt(c * c - (a * a - b * b));\n        float side3 = ((float) Math.Sqrt(c
    * c - (a * a - b * b)) - (int) Math.Sqrt(side1 * side1)) / (int) Math.Sqrt(side1
    * side1);\n\n        return (float) Math.Round(side1 * side2 * side3, 2);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef4b5420eb1e4837925e730fcb969c93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef4b5420eb1e4837925e730fcb969c93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a+b>c) {\n            return
    -1;\n        }\n        return (a+b+c-b*b)/2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11335f32c8344a688a687180ddd184c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11335f32c8344a688a687180ddd184c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if ((b - a) < 0 || (c - a) < 0)
    {\n            return -1L;\n        }\n        if ((a + b) > c || (b + c) > a
    || (c + a) > b) {\n            return -1L;\n        }\n        double area = (b
    * b) - (4 * a * c);\n        if (area < 0) {\n            return -1L;\n        }\n
    \       return Math.Round(Math.Sqrt(area), 2L);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4rhdxeb2.cs(30,27): error CS1503: Argument 1: cannot convert from ''double''
    to ''decimal''

    /tmp/tmp4rhdxeb2.cs(30,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var a = Math.Sqrt(a * b * c);\n
    \       var b = Math.Sqrt(a * c);\n        return a < b ? Math.Round(a, 2) : -1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg4vsj_u9.cs(20,13): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpg4vsj_u9.cs(20,27): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpg4vsj_u9.cs(20,31): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmpg4vsj_u9.cs(21,13): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpg4vsj_u9.cs(22,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg4vsj_u9.cs(20,27): error CS0165: Use of unassigned local variable ''a''

    '
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) return float.NaN;\n
    \       if (b + c > a) return float.NaN;\n        return ((a * b) * (c - b) *
    (a + b));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab5f8fd0d8d740ea894b6a114dfa8b6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab5f8fd0d8d740ea894b6a114dfa8b6c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sum = a;\n        sum +=
    b > c ? b : c;\n        sum += c > b ? c : b;\n        sum = sum / 2;\n        if
    (sum > 0) {\n            return (float)(Math.Sqrt(Math.Pow(sum, 2.0) + 1.0f) *
    100.0f);\n        }\n        return (float)-1;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08e3304a15dc4338aca5f2d328917fe1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08e3304a15dc4338aca5f2d328917fe1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (Math.Abs(a + b + c - b * c
    - a * c) < 0.0001) return float.NaN;\n        return float.Parse(Math.Sqrt(Math.Pow(a,
    2) + (Math.Pow(b, 2) * c) + (Math.Pow(c, 2) * (a - b)) * (a - b) * (a - b) \n
    \           * (a + b) - Math.Pow(a, 2) * Math.Pow(b, 2) * Math.Pow(c, 2) * Math.Pow(a
    + b, 2)).ToString(\"0.00\", CultureInfo.InvariantCulture)) * 0.5f;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kj6pbth.cs(22,113): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Acos((b * b) - (4
    * a * c));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_xi_qahz.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return TriangleArea(a, b, c, false);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwl6z9k_7.cs(20,16): error CS1501: No overload for method ''TriangleArea''
    takes 4 arguments

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0;\n        // See
    if sides are valid\n        if (a + b > c) {\n            area = (float)((int)(a
    * b) + (int)(b * c) - (int)(a * c)) / 2;\n            area = Math.Round(area,
    2);\n            area = Math.Round(area, 2);\n            return area;\n        }\n
    \       // No sides are valid\n        else if (a + c > b) {\n            area
    = (float)((int)(b * c) - (int)(b * a)) / (int)(a * b);\n            area = Math.Round(area,
    2);\n            area = Math.Round(area, 2);\n            return area;\n        }\n
    \       // Two sides are valid\n        else {\n            area = (float)(a *
    b) / 2;\n            area = Math.Round(area, 2);\n            area = Math.Round(area,
    2);\n            return area;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg5swtx78.cs(24,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg5swtx78.cs(25,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg5swtx78.cs(31,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg5swtx78.cs(32,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg5swtx78.cs(38,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpg5swtx78.cs(39,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double d = (a + b + c) / 2;\n
    \       long e = Convert.ToInt64(Math.Sqrt(Math.Pow(d, 2) / 4));\n        long
    f = Convert.ToInt64(Math.Sqrt(Math.Pow(d, 3) / 8));\n        long g = Convert.ToInt64(Math.Sqrt(Math.Pow(d,
    4) / 16));\n        long h = Convert.ToInt64(Math.Sqrt(Math.Pow(d, 5) / 32));\n
    \       return Convert.ToDouble(Math.Round((e * f * g * h) / 100, 2));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpav5ftrqt.cs(25,38): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal, int)'' and ''Math.Round(double, int)''

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0;\n        long
    a1 = a + b + c;\n        long a2 = Math.Max(a1, b);\n        long b1 = Math.Max(b,
    c);\n        long c1 = Math.Max(c, a1);\n        float a2 = a1 / a2;\n        float
    b1 = b1 / b1;\n        float c1 = c1 / c1;\n        // if c > a then a is greater
    than b\n        if (c1 > a) { \n            area = -1L;\n        } else {\n            //
    otherwise, we can use Euclid's algorithm\n            float delta = b * b - 4
    * a1 * c;\n            if (delta < 0) {\n                area = -1L;\n            }
    else {\n                float x1 = (-b + Math.Sqrt(delta)) / (2 * a);\n                float
    x2 = (-b - Math.Sqrt(delta)) / (2 * a);\n                float y1 = (-b + Math.Sqrt(delta))
    / (2 * a);\n                float y2 = (-b - Math.Sqrt(delta)) / (2 * a);\n                float
    x3 = x1;\n                float x4 = x2;\n                float y3 = y1;\n                float
    y4 = y2;\n                area = ((x1 * y2 - y1 * x2) * (x3 - x4) + (x1 * y4 -
    y1 * x4) * (x3 - x2)) * 0.5f;\n            }\n        }\n        return Math.Round(Math.Abs(area),
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpli3twxqr.cs(25,15): error CS0128: A local variable or function named ''a2''
    is already defined in this scope

    /tmp/tmpli3twxqr.cs(26,15): error CS0128: A local variable or function named ''b1''
    is already defined in this scope

    /tmp/tmpli3twxqr.cs(27,15): error CS0128: A local variable or function named ''c1''
    is already defined in this scope

    /tmp/tmpli3twxqr.cs(37,28): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpli3twxqr.cs(38,28): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpli3twxqr.cs(39,28): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpli3twxqr.cs(40,28): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpli3twxqr.cs(48,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float d = (float)(a * a + b *
    b - c * c);\n        if (d >= 0) {\n            d = Math.Sqrt(d);\n            return
    float.Parse(Math.Round((a / d) * 100, 2)) + \n                float.Parse(Math.Round((b
    / d) * 100, 2)) + \n                float.Parse(Math.Round((c / d) * 100, 2));\n
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmya72iac.cs(22,17): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmya72iac.cs(23,32): error CS1503: Argument 1: cannot convert from ''double''
    to ''string''

    /tmp/tmpmya72iac.cs(24,29): error CS1503: Argument 1: cannot convert from ''double''
    to ''string''

    /tmp/tmpmya72iac.cs(25,29): error CS1503: Argument 1: cannot convert from ''double''
    to ''string''

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Sqrt(Math.Pow((a +
    b), 2) - (Math.Pow(a, 2) * Math.Pow(b, 2)));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpahooh_n6.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long total = a * b + c;\n        if
    (total < 0)\n            return -1f;\n        if (a * b < c)\n            return
    0;\n        return Math.Sqrt(total) * Math.Sqrt(0.5f);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd6fodtmt.cs(25,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) {\n            return
    -1;\n        }\n        var s = a * b;\n        var u = ((long)Math.Sqrt(a * b));\n
    \       var v = ((long)Math.Sqrt(a * u));\n        var w = ((long)Math.Sqrt(a
    * v));\n        if (a + b + c != s) {\n            return -1;\n        }\n        return
    Math.Acos(b / w) * 180 / Math.PI;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuibk_ba7.cs(30,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977247
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area;\n        bool valid
    = IsValidTriangle(a, b, c);\n        area = IsValidTriangle(a, b, c) ? valid ?
    a / b : -1.0f : -1.0f;\n        return Math.Round(area, 2);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq12z949w.cs(21,22): error CS0103: The name ''IsValidTriangle'' does not
    exist in the current context

    /tmp/tmpq12z949w.cs(22,16): error CS0103: The name ''IsValidTriangle'' does not
    exist in the current context

    /tmp/tmpq12z949w.cs(23,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sum = a+b+c;\n        if
    (sum < 0 || a > c || b > c || a > b)\n            return -1.0F;\n\n        long
    area = a / (float)(b - a);\n        return Convert.ToSingle(area);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1zy54lw8.cs(24,21): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var b2 = b * b;\n        var c2
    = c * c;\n        var a2 = a * a;\n        var s = (float)Math.Sqrt(b2 * (a2 -
    c2));\n        var area = (float)(a * b) * Math.Sqrt(a2 * (a2 - b2) + c2 * c2
    - b2 * b2);\n        return Math.Round(area, 2);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkkoid9qr.cs(25,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // return -1 if any two sides
    are equal\n        if (a + b == c) return (float)-1;\n        // solve the equation
    for a + b + c = d\n        float d = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n
    \       // solve for c from d = b\n        float c = b / d;\n        // return
    area of triangle if sides are all greater than 3\n        if (a > b > c)\n            return
    (a / Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2)));\n        // otherwise return
    the area of triangle\n        return (float)(Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,
    c)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyfg44jei.cs(21,22): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmpyfg44jei.cs(23,19): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyfg44jei.cs(25,15): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpyfg44jei.cs(27,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''bool'' and ''float''

    /tmp/tmpyfg44jei.cs(28,21): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0f;\n        // Use
    a variable to keep track of the sum of any two sides\n        long sum = (long)Math.Sqrt(a
    * a + b * b);\n        // Use an if statement to check if the sum of the two sides
    is greater\n        // than the third side\n        if (sum > c) {\n            //
    Use Math.Round() to round the float value to 2 decimal points\n            area
    = Math.Round((b * b - a * c) / Math.Sqrt(b * b), 2); \n        } else {\n            area
    = -1;\n        }\n        return area;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmkmwgoet.cs(27,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if ((a + b > c) && (a + c > b)
    && (b + c > a)) {\n            return (((float)(a * (b - c)) + (b * (c - a)) +
    (c * (a - b)) * (1.0 / 3.0)) / 2.0);\n        } else {\n            return -1.0f;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_1lsftl.cs(21,21): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // Check whether all three sides
    are valid triangle sides\n        if (a+b > c) {\n            return -1;\n        }\n
    \       if (b+c > a) {\n            return -1;\n        }\n        if (b+c > c)
    {\n            return -1;\n        }\n\n        // Calculate the area of a triangle\n
    \       float s = (float)(a*b)*(c-a)-(float)(a*c)*(b-c)+(float)(b*c)*(a-c);\n
    \       // Round the result to 2 decimal places\n        return (float)Math.Round((float)s/(2*a),
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74ee0c6c056a4bf59611b2abe417c63d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74ee0c6c056a4bf59611b2abe417c63d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a > 0);\n        Debug.Assert(b
    > 0);\n        Debug.Assert(c > 0);\n        return (a + b > c) ? Math.Sqrt(Math.Pow(a
    / 2, 2) + Math.Pow(b / 2, 2)) : -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0yot9tr6.cs(23,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float result;\n        if ((a
    >= 0L) && (b >= 0L) && (c >= 0L)) {\n            long sum = a + b + c;\n            if
    ((sum % 2) == 0) {\n                sum = sum / 2;\n                result = Math.Sqrt(sum)
    * 2;\n            }\n            else {\n                result = -1;\n            }\n
    \       }\n        else {\n            result = -1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcjo0ghy.cs(25,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long x = (a + b + c) / 2;\n        long
    y = (a + b - c) / 2;\n        long z = (b + c - a) / 2;\n        if (Math.Abs(a)
    > Math.Abs(b) && Math.Abs(a) > Math.Abs(c)) {\n            if (Math.Abs(a) > Math.Abs(c))
    {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - a,
    y - b, z - c));\n            }\n            else if (Math.Abs(b) > Math.Abs(c))
    {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - a,
    y - c, z - b));\n            }\n            else {\n                return (Math.Pow((a
    + b + c) / 2, 0.5) * TriangleArea(x - b, y - a, z - c));\n            }\n        }\n
    \       else if (Math.Abs(a) > Math.Abs(b)) {\n            if (Math.Abs(b) > Math.Abs(c))
    {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - b,
    y - c, z - a));\n            }\n            else if (Math.Abs(b) > Math.Abs(c))
    {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - c,
    y - a, z - b));\n            }\n            else {\n                return (Math.Pow((a
    + b + c) / 2, 0.5) * TriangleArea(x - c, y - b, z - a));\n            }\n        }\n
    \       else if (Math.Abs(b) > Math.Abs(c)) {\n            if (Math.Abs(b) > Math.Abs(c))
    {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - a,
    y - c, z - a));\n            }\n            else if (Math.Abs(c) > Math.Abs(a))
    {\n                return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x - b,
    y - a, z - a));\n            }\n            else {\n                return (Math.Pow((a
    + b + c) / 2, 0.5) * TriangleArea(x - c, y - b, z - c));\n            }\n        }\n
    \       else {\n            return (Math.Pow((a + b + c) / 2, 0.5) * TriangleArea(x
    - c, y - a, z - b));\n        }\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1t3d8kxt.cs(25,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(28,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(31,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(36,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(39,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(42,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(47,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(50,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(53,25): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1t3d8kxt.cs(57,21): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return a > b ? ( Math.Sqrt(a *
    b) + Math.Sqrt(a * c + b * b))\n            : b > c ? ( Math.Sqrt(a * b + b *
    c + a * c))\n            : c > a ? ( Math.Sqrt(a * b + c * a + b * b))\n            :
    (-1.0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr4spvv04.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sum = a + b + c;\n        if
    (sum < a) {\n            return -1;\n        }\n        if (sum > c) {\n            return
    -1;\n        }\n        if (a == b == c) {\n            return 0;\n        }\n
    \       if (a < b) \n            return -1;\n        if (a > c)\n            return
    -1;\n        return Math.Sqrt(Math.Pow((b - a), 2) + Math.Pow((c - a), 2));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk4sgo21r.cs(27,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''bool'' and ''long''

    /tmp/tmpk4sgo21r.cs(34,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long d = a + b + c;\n        return
    (float)Math.Sqrt(Math.Pow(d / 2, 2));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3edcd503881e4e5d87c262d8ba9c88ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3edcd503881e4e5d87c262d8ba9c88ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a <= 0 || b <= 0 || c <= 0)
    {\n            throw new ArgumentOutOfRangeException();\n        }\n        long
    s = a + b + c;\n        if (Math.Abs(s) <= 1) {\n            throw new ArgumentException(\"The
    triangle cannot be formed with three sides of length less or equal than 1\");\n
    \       }\n        if ((a < b) && (a < c)) {\n            return 0;\n        }\n
    \       if ((b < c) && (b < a)) {\n            return 0;\n        }\n        if
    (a > b) {\n            return 0;\n        }\n        return 0.5 * (b + c);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqd0math3.cs(36,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return a < b ? TriangleArea(a,
    b, c) + TriangleArea(b, a, c) : b < c ? TriangleArea(a, b, c) + TriangleArea(b,
    c, a) : TriangleArea(a, b, c) - TriangleArea(b, a, c);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977254
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0.0f;\n        if
    (a >= b + c) {\n            area = Math.Sqrt(a * a + b * b + c * c);\n        }\n
    \       if (a == 0 || b == 0 || c == 0) {\n            area = -1;\n        }\n
    \       return Math.Round(area, 2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9lh0chj1.cs(22,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9lh0chj1.cs(27,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a == b && b == c || a == c
    && b == c)\n            return 0;\n        float s = (float)Math.Sqrt(Math.Pow(a,
    2) + Math.Pow(b, 2));\n        return Convert.ToDecimal(a * b * s) / s;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwo7nva3z.cs(23,16): error CS0019: Operator ''/'' cannot be applied to
    operands of type ''decimal'' and ''float''

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a >= 0L);\n        Debug.Assert(b
    >= 0L);\n        Debug.Assert(c >= 0L);\n\n        Debug.Assert(b > a);\n        Debug.Assert(c
    > b);\n\n        var dMin = Math.Min(a, b);\n        var dMax = Math.Max(a, b);\n\n
    \       if ((dMin * dMin) > dMax * dMax)\n        {\n            return -1L;\n
    \       }\n\n        return Math.Sqrt(Math.Pow(dMin - c, 2L) + Math.Pow(dMax -
    b, 2L) + Math.Pow(dMax - a, 2L));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa3zr36vv.cs(35,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long a1 = b + c - a;\n        long
    a2 = c + b - a;\n        long a3 = a + c - b;\n        long b1 = a - b - c;\n
    \       long b2 = a + b - c;\n        long b3 = a - c - b;\n        if (a1 ==
    a2 && b1 == b2 && c == a3) {\n            return (float) (a1 + b1) / 2;\n        }\n
    \       else if (a1 == a2 && b1 == b3 || a1 == a3 && b1 == b2 && c == a3) {\n
    \           return (float) (a1 + b1) / 2;\n        }\n        else if (a2 == a3
    && b2 == b3 || a2 == a1 && b2 == b3 || a2 == a3 && b2 == b1) {\n            return
    (float) (a2 + b2) / 2;\n        }\n        else if (a3 == a1 && b3 == b1 || a3
    == a2 && b3 == b1 || a3 == a1 && b3 == b2) {\n            return (float) (a3 +
    b3) / 2;\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b3dabc0cc614a87be13467f17eae002>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b3dabc0cc614a87be13467f17eae002>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float triArea = 0.0;\n        if
    ((a + b > c) || (b + c > a) || (a + c > b)) {\n            throw new Exception(\"Invalid
    triangle\");\n        }\n        triArea = a * a + b * b + c * c - (a * a + b
    * b + c * c) / 2;\n        if (triArea < 0)\n            return -1.0;\n        else\n
    \           return Math.Round(triArea, 2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5vih_2b1.cs(20,25): error CS0664: Literal of type double cannot be implicitly
    converted to type ''float''; use an ''F'' suffix to create a literal of this type

    /tmp/tmp5vih_2b1.cs(26,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5vih_2b1.cs(28,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area;\n        if (a + b
    > c) {\n            area = ((float)(a + b + c) / 2.0f) * Math.Sqrt(Math.Pow((a
    + b), 2) / 4);\n            if (area > 0)\n                area = Math.Round(area,
    2);\n            else\n                area = -1;\n        } else {\n            area
    = ((a + b + c) / 2.0f) * Math.Sqrt(Math.Pow((a + b + c), 2) / 4);\n            if
    (area > 0)\n                area = Math.Round(area, 2);\n            else\n                area
    = -1;\n        }\n        return area;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7w3kn0aa.cs(22,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7w3kn0aa.cs(24,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7w3kn0aa.cs(28,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7w3kn0aa.cs(30,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c)\n            throw
    new ArgumentException(\"Error\");\n        double area = 0.0;\n        // Use
    Sqrt function\n        // https://msdn.microsoft.com/en-us/library/system.math.sqrt(v=vs.110).aspx\n
    \       // The Sqrt function computes the square root of a number.\n        area
    = (a * a - b * b + c * c) / (2.0 * Math.Sqrt(b * b + c * c));\n        return
    Math.Round(area, 2, MidpointRounding.AwayFromZero);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphks8whj6.cs(27,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return (float)Math.Sqrt(Math.Pow((double)(a+b),
    2.0D) + Math.Pow((double)(a+c), 2.0D) + Math.Pow((double)(b+c), 2.0D));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cba1a8821e845e6903b471d00aa601a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cba1a8821e845e6903b471d00aa601a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float triangleArea = (float)(-1L);\n
    \       if (a > b) {\n            triangleArea += (a - (b * (float)(Math.Sqrt(b
    * b - 4 * a * c)))) / 2.0f;\n        } else if (a > c) {\n            triangleArea
    += (c - b * (float)(Math.Sqrt(b * b - 4 * a * c)))/ 2.0f;\n        } else if (b
    > c) {\n            triangleArea += (c - a - (b * (float)(Math.Sqrt(b * b - 4
    * a * c)))/ 2.0f);\n        }\n        return Math.Round(triangleArea, 2);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw6rtmz8o.cs(28,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        bool valid = a + b > c;\n        float
    area;\n        if (valid) {\n            area = 0.5f*(a*b*c);\n        } else
    {\n            area = -1;\n        }\n        return Math.Round(area, 2);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpey6wyf7w.cs(27,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Sqrt(Math.Pow(a, 2)
    + Math.Pow(b, 2) + Math.Pow(c, 2)) / 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kf3abga.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977246
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long a1 = a - 1;\n        long
    b1 = b - 1;\n        long c1 = c - 1;\n\n        long ab = a1 * b1;\n        long
    ac = a1 * c1;\n        long bc = b1 * c1;\n\n        long abc = ab + ac + bc;\n
    \       long abcp = Math.Sqrt(abc + 1);\n\n        long abcp1 = abcp - abcp;\n\n
    \       float result;\n\n        if (abcp1 < 0) {\n            result = -1;\n
    \       } else {\n            result = (float)(abcp1 * 0.5f);\n        }\n\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp0th1o6f.cs(29,21): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if ((a + b > c) || (a + c > b)
    || (b + c > a)) {\n            return -1.0F;\n        }\n        return (a + (b
    - c) * ((a + b) * (b + c)) + (c - a) * ((b - a) * (c - b))) / 2.0F;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98baabb1fa7a40209036fb3841d5f0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98baabb1fa7a40209036fb3841d5f0e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        //return 0.0;\n        // http://stackoverflow.com/questions/5346519/c-sharp-triangular-equations-in-linear-equations\n
    \       double angle = Math.Atan2(Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2)),\n
    \               Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2)));\n        double area
    = Math.Sqrt(Math.Pow(a, 2) * Math.Pow(b, 2) * Math.Pow(Math.Sin(angle), 2));\n
    \       // Round the result to two decimal places\n        return Math.Round(area,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptbu4pmmm.cs(26,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var p = a + b + c;\n        double
    area = Math.Sqrt(p * (p - a) * (p - b) * (p - c));\n        return (area > 0.0)
    ? Math.Round(area, 2, MidpointRounding.ToEven) : -1.0f;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6_b5yujh.cs(22,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area;\n        float s =
    a + b + c;\n        if (s > 0) {\n            float u1 = a / s;\n            float
    u2 = b / s;\n            float u3 = c / s;\n            area = (u1 * u2 * u3);\n
    \       } else {\n            area = -1;\n        }\n        area += (float)(Math.Sqrt(Math.Pow((a
    + b), 2) + Math.Pow((a + c), 2) + Math.Pow((b + c), 2)));\n        area = Math.Round(area,
    2, MidpointRounding.AwayFromZero);\n        area += (float)(Math.Sqrt(Math.Pow((a
    + b), 2) + Math.Pow((a + c), 2) + Math.Pow((b + c), 2)));\n        return area;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoi6bwg68.cs(31,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return a >= b\n               &&
    (c >= a + b || (c >= b + a || (c >= a + b)));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmpe6pbri.cs(20,16): error CS0029: Cannot implicitly convert type ''bool''
    to ''float''

    '
  timestamp: 1659977248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // Three sides make a valid triangle
    when the sum of any two sides is greater\n        // than the third side.\n        if
    ((a + b >= c) && (a + c >= b) && (b + c >= a)) {\n            // The area of a
    triangle is half the length of the hypotenuse.\n            return (float) (c
    * c / 2L);\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b03d2bc8ad694ad68873f4123c86380a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b03d2bc8ad694ad68873f4123c86380a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long side3 = a + b + c;\n        if
    (a <= 0 || b <= 0 || c <= 0) {\n            throw new ArgumentException(\"a, b,
    c must not be negative\");\n        }\n        if (a == 0 && b == 0 && c == 0)\n
    \           return 0;\n        if (side3 <= 0)\n            return -1;\n        if
    (side3 > Math.Min(a, b, c))\n            return -1;\n        long side2 = a +
    (b * 2) + (c * 2);\n        float ret = (float)Math.Sqrt(side3);\n        float
    side1 = Math.Abs(a - (b * 2) - (c * 2));\n        float side2 = Math.Abs(b - (c
    * 2) - (a * 2));\n        if (side1 == 0 && side2 == 0)\n            return 0;\n
    \       if (side1 == 0 || side2 == 0)\n            return -1;\n        if (side1
    > side2)\n            return -1;\n        if (side1 < side2)\n            return
    -1;\n        return ret;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5qv8f1hu.cs(28,26): error CS1501: No overload for method ''Min'' takes
    3 arguments

    /tmp/tmp5qv8f1hu.cs(33,15): error CS0128: A local variable or function named ''side2''
    is already defined in this scope

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c)\n        {\n            return
    -1L;\n        }\n        if (a + c > b)\n        {\n            return -1L;\n
    \       }\n        if (b + c > a)\n        {\n            return -1L;\n        }\n
    \       float s = (a + b + c) / 2;\n        long sab = s*(s-a)*(s-b)*(s-c);\n
    \       long sac = s*(s-a)*(s-c)*(s-b);\n        long sba = s*(s-b)*(s-a)*(s-c);\n
    \       long sabc = s*(s-a)*(s-b)*(s-c)*(s-a);\n        long sabcd = s*(s-a)*(s-b)*(s-c)*(s-d)*(s-a)*s*(s-b)*s*(s-c);\n
    \       long sabcdd = s*(s-a)*(s-b)*(s-c)*(s-d)*(s-a)*s*(s-b)*s*(s-c)*s*(s-d);\n
    \       if (sab - sba*sab + sac - sab*sac + sabc - sabcd*sab + sabcdd - sab*sabc
    == 0)\n        {\n            return (float)Math.Sqrt(sab*(sab+sac)/2);\n        }\n
    \       return -1L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdmjf5zir.cs(33,20): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdmjf5zir.cs(34,20): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdmjf5zir.cs(35,20): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdmjf5zir.cs(36,21): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdmjf5zir.cs(37,45): error CS0103: The name ''d'' does not exist in the
    current context

    /tmp/tmpdmjf5zir.cs(38,46): error CS0103: The name ''d'' does not exist in the
    current context

    /tmp/tmpdmjf5zir.cs(38,76): error CS0103: The name ''d'' does not exist in the
    current context

    '
  timestamp: 1659977248
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0.0;\n        if
    (a >= b && a >= c) {\n            area = (float)(Math.Sqrt(a * b * c / 4));\n
    \       }\n        else if (b >= c && b >= a) {\n            area = (float)(Math.Sqrt(b
    * b * c / 4));\n        }\n        else {\n            area = (float)(Math.Sqrt(a
    * b * c / 4));\n        }\n        return Math.Round(area, 2);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp71tr49hu.cs(20,22): error CS0664: Literal of type double cannot be implicitly
    converted to type ''float''; use an ''F'' suffix to create a literal of this type

    /tmp/tmp71tr49hu.cs(30,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977248
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        bool isValid = false;\n        if
    (a + b > c) {\n            isValid = true;\n        } else {\n            if (a
    + c > b) {\n                isValid = true;\n            }\n        }\n        if
    (isValid) {\n            long s = a + b + c;\n            float result = (float)Math.Sqrt(s
    * (s - a) * (s - b) * (s - c) / 2d);\n            return result;\n        }\n
    \       return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4d7141c285f425fa3704b350dd59cc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4d7141c285f425fa3704b350dd59cc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sum = a + b + c;\n        if
    (sum > 3L)\n            return -1L;\n        double area = Math.Sqrt(Math.Pow(a
    + b + c, 2) / (2 * sum));\n        long rounded = (int) Math.Round(area, 2);\n
    \       return (float) rounded;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <995313716e3343e1959e3b2653017275>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <995313716e3343e1959e3b2653017275>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return a == 0 || b == 0 || c ==
    0 ? 0 :\n            Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4wuu9cye.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0;\n        // Triangle
    sides with two sides greater than the third side\n        if (a + b > c) {\n            area
    = (b * b) - (4 * a * c);\n            // Round the area to two decimal points
    if it is valid\n            if (area >= 0) {\n                area = Math.Round(area,
    2);\n            }\n        }\n        // Triangle sides with two sides equal
    to the third side\n        else if (a + c > b) {\n            area = (a * c) -
    (4 * b * a);\n            // Round the area to two decimal points if it is valid\n
    \           if (area >= 0) {\n                area = Math.Round(area, 2);\n            }\n
    \       }\n        // Triangle sides with two sides less than the third side\n
    \       else if (b + c > a) {\n            area = (b * b) - (4 * a * a);\n            //
    Round the area to two decimal points if it is valid\n            if (area >= 0)
    {\n                area = Math.Round(area, 2);\n            }\n        }\n        //
    None of the sides makes a valid triangle\n        else {\n            return -1;\n
    \       }\n        return area;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbmysvb7t.cs(26,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbmysvb7t.cs(34,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbmysvb7t.cs(42,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) {\n            return
    -1;\n        }\n        return (a + b - c) / 2;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ee6485155e2445d817e5851c030bff2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ee6485155e2445d817e5851c030bff2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return System.Math.Sqrt(Math.Pow(a
    + b, 2L) + Math.Pow(c + b, 2L) - 2 * Math.Pow(a + c, 2L + b));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmo6jv5uo.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (Math.Abs(a - b) > Math.Abs(a
    - c) && Math.Abs(b - c) > Math.Abs(a - b)) {\n            float s = a + b + c;\n
    \           return (float)(Math.Sqrt(s * (s - a) * (s - b) * (s - c)));\n        }\n
    \       return -1.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34ad6202606e4ee7904050135009301a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34ad6202606e4ee7904050135009301a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var area = a * b / (a + b + c);\n
    \       double roundedArea;\n\n        Math.Round(area, out roundedArea);\n        Math.Round(roundedArea,
    out roundedArea);\n\n        return roundedArea;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp322so62v.cs(23,30): error CS1615: Argument 2 may not be passed with the
    ''out'' keyword

    /tmp/tmp322so62v.cs(24,20): error CS1503: Argument 1: cannot convert from ''double''
    to ''decimal''

    /tmp/tmp322so62v.cs(24,37): error CS1615: Argument 2 may not be passed with the
    ''out'' keyword

    /tmp/tmp322so62v.cs(26,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float result = -1L;\n        if
    ((a + b > c) || (b + c > a) || (a + c > b)) {\n            result = -1;\n        }\n
    \       else {\n            long sum = (a + b + c) / 2;\n            if (sum ==
    a) {\n                float xSide = (float)(a + b) / 2;\n                float
    ySide = (float)(b + c) / 2;\n                float zSide = (float)(a + c) / 2;\n
    \               result = xSide * ySide * zSide;\n            }\n            else
    if (sum == b) {\n                float xSide = (float)(a + b) / 2;\n                float
    ySide = (float)(b + c) / 2;\n                float zSide = (float)(a + c) / 2;\n
    \               result = xSide * ySide * zSide;\n            }\n            else
    if (sum == c) {\n                float xSide = (float)(a + b) / 2;\n                float
    ySide = (float)(b + c) / 2;\n                float zSide = (float)(a + c) / 2;\n
    \               result = xSide * ySide * zSide;\n            }\n            else
    {\n                result = -1;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3e53ca23c32040b1940968788e29a4f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3e53ca23c32040b1940968788e29a4f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // Only one number will be negative\n
    \       double d = Math.Abs(Math.Sqrt(Math.Pow(a, 2.0) + Math.Pow(b, 2.0) + Math.Pow(c,
    2.0)));\n\n        if (a > b + c) {\n            // If any two sides is greater
    than the third then there must be a valid triangle \n            // so return
    area rounded up to two decimal points\n            return (d > 0.0f) ? Math.Round((d
    / a), 2) / 2.0 : -1.0f;\n        } else if (b > c + a) {\n            return -1.0f;\n
    \       } else if (c > a + b) {\n            return -1.0f;\n        }\n        return
    0.0f;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmh95nyy0.cs(26,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long length = a + b + c;\n        if
    (length < 3L) {\n            return -1.0F;\n        }\n        return Math.Sqrt(Math.Pow(a
    + b + c - 2L, 2.0F)) / 2L;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1hv8aipq.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return Math.Sqrt(Math.Pow(a, 2)
    + Math.Pow(b, 2) + Math.Pow(c, 2));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5nv6bu6.cs(20,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) {\n            throw
    new ArgumentException(\"Invalid triangle sides!\");\n        }\n        float
    aTriangleArea = a * 0.5f;\n        float bTriangleArea = b * 0.5f;\n        float
    cTriangleArea = c * 0.5f;\n        return ((aTriangleArea + bTriangleArea) * 0.5f)
    + ((aTriangleArea + cTriangleArea) * 0.5f) + ((bTriangleArea + cTriangleArea)
    * 0.5f);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid triangle sides!\n
    \ at Problem.TriangleArea (System.Int64 a, System.Int64 b, System.Int64 c) [0x0000c]
    in <bda6250a0ae740d08c57338654ea2920>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bda6250a0ae740d08c57338654ea2920>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: Invalid triangle sides!\n  at Problem.TriangleArea (System.Int64
    a, System.Int64 b, System.Int64 c) [0x0000c] in <bda6250a0ae740d08c57338654ea2920>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <bda6250a0ae740d08c57338654ea2920>:0
    \n"
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a < b, \"The first
    edge is greater than the second one\");\n        Debug.Assert(b < c, \"The second
    edge is greater than the third one\");\n        Debug.Assert(c > a + b, \"The
    third edge is greater than the sum of the first two\");\n        Debug.Assert(c
    > a + b, \"The third edge is greater than the sum of the first two\");\n\n        float
    area;\n\n        if ((a < c) && (b < c)) {\n            area = (a * a + b * b)
    * 0.5f;\n        } else {\n            area = (c / 2) * Math.Abs(Math.Sqrt(Math.Pow(c
    / 2, 2.0f) - Math.Pow(a / 2, 2.0f) - Math.Pow(b / 2, 2.0f)));\n        }\n        return
    Math.Round(area, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rv5jxyu.cs(30,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5rv5jxyu.cs(32,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long abc = a + b + c;\n        if
    (Math.Abs(abc) > Math.Max(a, Math.Max(b, c)) == 1) {\n            return float.MaxValue;\n
    \       }\n        if (Math.Abs(abc) > Math.Max(Math.Max(a, b), Math.Max(b, c))
    == 1) {\n            return float.MaxValue;\n        }\n        if (Math.Abs(abc)
    > Math.Max(Math.Max(a, c), Math.Max(c, a)) == 1) {\n            return float.MaxValue;\n
    \       }\n        return abc * 0.5F;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2nkm6k8i.cs(21,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''bool'' and ''int''

    /tmp/tmp2nkm6k8i.cs(24,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''bool'' and ''int''

    /tmp/tmp2nkm6k8i.cs(27,13): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''bool'' and ''int''

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) {\n            throw
    new Exception(\"A + B must be greater than C\");\n        }\n        return (a
    * c + b * c) / (a + b);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Exception: A + B must be greater than C\n
    \ at Problem.TriangleArea (System.Int64 a, System.Int64 b, System.Int64 c) [0x0000c]
    in <d2c3396a2d3b403fbbbbeb70a24ef076>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d2c3396a2d3b403fbbbbeb70a24ef076>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.Exception: A + B must be greater than C\n  at Problem.TriangleArea (System.Int64
    a, System.Int64 b, System.Int64 c) [0x0000c] in <d2c3396a2d3b403fbbbbeb70a24ef076>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d2c3396a2d3b403fbbbbeb70a24ef076>:0
    \n"
  stdout: ''
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = a;\n        if (
    b > a && b > c ) {\n            area = (float)(((b + c)/2)*(a-c)/2);\n        }\n
    \       if ( c > a && c > b ) {\n            area = (a*b)/2;\n        }\n        return
    area;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb47a1d73e93436caec736f34f5e656f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb47a1d73e93436caec736f34f5e656f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) {\n            return
    0;\n        }\n        long h = b * b - 4 * a * c;\n        if (h < 0) {\n            return
    0;\n        }\n        double area = Math.Sqrt(h);\n        if (Math.Round(area,
    2) == area) {\n            return Convert.ToSingle(area);\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00dba0e7fb1646cd98f0851b23dbb536>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00dba0e7fb1646cd98f0851b23dbb536>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) return float.NegativeInfinity;\n
    \       if (b + c > a) return float.NegativeInfinity;\n        if (a + c > b)
    return float.NegativeInfinity;\n        float area = (a * b) / c;\n        return
    Math.Round(area, 2, MidpointRounding.AwayFromZero);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx7yd153h.cs(24,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if ((b - a) > 0) {\n            if
    ((c - b) > 0) {\n                return (a * b) / c;\n            }\n            else
    {\n                return (float)Math.Sqrt(Math.Pow((b - a), 2) + (Math.Pow((c
    - b), 2)));\n            }\n        }\n        return -1f;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8597b71b22fc4f2ca963cabb6e36b6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8597b71b22fc4f2ca963cabb6e36b6c1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return (a * b + c) / 2;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82fe2e8e09d247a6a09aa2bc01739ee5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82fe2e8e09d247a6a09aa2bc01739ee5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float sum = b * a + c * b;\n        if
    (sum > c) {\n            float area = Math.Sqrt(Math.Pow(b - a, 2) + Math.Pow(c
    - b, 2)) * 0.5;\n            if (area > 0.5f) \n                return area;\n
    \           else return -1;\n        }\n        return -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz3ausm54.cs(22,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sum = a + b + c;\n        if
    (sum >= long.MaxValue / 2L) {\n            return -1.0L;\n        }\n        return
    Math.Sqrt(a * b * c / sum);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsuu7uenz.cs(22,24): error CS1002: ; expected

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a+b > c && b+c > a && c+a
    > b) {\n            long d = (a+b+c) / 2;\n            return (double)Math.Sqrt(Math.Pow((a+b+c)/2,2)-Math.Pow(d,2));\n
    \       } else {\n            return -1;\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplemlbdo2.cs(22,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float aSqrt = Math.Sqrt(a), bSqrt
    = Math.Sqrt(b), cSqrt = Math.Sqrt(c), d = Math.Sqrt(aSqrt * bSqrt - aSqrt);\n
    \       return d > c ? float.NaN : (float)Math.Sqrt(aSqrt * bSqrt) / d;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5e5t99t8.cs(20,23): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5e5t99t8.cs(20,45): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5e5t99t8.cs(20,67): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5e5t99t8.cs(20,85): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        return (a * b * c) / 3;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5428f5da98fe43c6a67c9930e34cf262>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5428f5da98fe43c6a67c9930e34cf262>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = 0;\n        long
    s = a + b + c;\n        Debug.Assert(s > 0);\n        Debug.Assert(a >= b);\n
    \       Debug.Assert(c >= b);\n        Debug.Assert(a >= c);\n        if (a +
    b + c == 2 * s) {\n            area = (float)Math.Sqrt(s * (s - a) * (s - b) *
    (s - c));\n        }\n        else {\n            Debug.Assert(a == b == c);\n
    \           area = (float)-1;\n        }\n        return Math.Round(area, 2);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0qsk9tl7.cs(30,26): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''bool'' and ''long''

    /tmp/tmp0qsk9tl7.cs(33,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = -1;\n\n        //
    Three sides make a valid triangle when the sum of any two sides is greater \n
    \       // than the third side.\n        if ((a + b) > c) {\n            if ((a
    + c) > b) {\n                area = (b * b) - (a * c);\n            }\n        }\n
    \       return area;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4dae74ea1b9643739615080197bf2508>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4dae74ea1b9643739615080197bf2508>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        bool isGood = (a+b > c);\n        bool
    isGood2 = (b+c > a);\n        bool isGood3 = (c+a > b);\n        if (isGood &&
    isGood2 && isGood3) {\n            return (float)(Math.Sqrt(a * b * c / ((a+b)
    * (b+c) * (c+a))));\n        } else if (isGood3 && !isGood2 && !isGood) {\n            return
    (float)(Math.Sqrt(a * b * c / ((b+c) * (c+a))));\n        } else if (!isGood3
    && !isGood2 && !isGood) {\n            return (float)(Math.Sqrt(a * b * c / ((a+b)
    * (c+a))));\n        } else if (!isGood && isGood2 && !isGood3) {\n            return
    (float)(Math.Sqrt(a * b * c / ((a+b) * (b+a))));\n        } else if (!isGood &&
    !isGood2 && isGood3) {\n            return (float)(Math.Sqrt(a * b * c / ((a+c)
    * (b+a))));\n        }\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8356b2e8ed8f4826a56fff9b949ae814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8356b2e8ed8f4826a56fff9b949ae814>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if ((a + b + c) < 0) return -1f;\n
    \       var side1 = (long)(Math.Sqrt(a * a + b * b + c * c));\n        var side2
    = (long)(Math.Sqrt(a * b - a * c + b * c));\n        var side3 = (long)(Math.Sqrt(a
    * b * b - a * c * c + c * c));\n        var area = side1 * side2 * side3;\n        if
    (side1 + side2 > side3) area = -area;\n        return Math.Round(area, 2, MidpointRounding.AwayFromZero);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsczpdjja.cs(26,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal, int, MidpointRounding)'' and ''Math.Round(double,
    int, MidpointRounding)''

    '
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long x = a + b + c;\n        return
    float.Parse(x.ToString());\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20eb25a1bf454e6d9c47fedb8f4395ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20eb25a1bf454e6d9c47fedb8f4395ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float sum = Math.Sqrt(Math.Pow((float)b,
    (float)2) + Math.Pow((float)c, (float)2));\n        return sum > Math.Sqrt(Math.Pow((float)a,
    (float)2)) ? sum : -1f;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp87eue1q7.cs(20,21): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if ((b + c) > a) \n            return
    -1;\n        else \n            return (float)(Math.Sqrt(Math.Pow(Math.Abs(b -
    a), 2) + Math.Pow(Math.Abs(c - b), 2)));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ba580da95dc45869c0b96c9aeeb2340>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ba580da95dc45869c0b96c9aeeb2340>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long triangleSum = a + b + c;\n
    \       if (triangleSum > (float)Math.Pow(b, 2)) {\n            return -1;\n        }\n
    \       return a / (float) (b * c);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbc4791b9400454bbd8427b9e92f72e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbc4791b9400454bbd8427b9e92f72e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = (float)(a * (b -
    c));\n        Debug.Assert(b > c && a + b > c);\n        return Math.Round(area,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqevjvrbg.cs(22,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // Calculate the sum of any two
    sides.\n        long s = a + b;\n        if (s == c) {\n            return 0;\n
    \       }\n        if (s > c) {\n            s = c;\n        }\n        if (a
    > b) {\n            long t = a;\n            a = b;\n            b = t;\n        }\n
    \       // Calculate the area by finding the area of a triangle formed\n        //
    by the three sides.\n        long h = (s - c) / 2;\n        long area = 0.5f *
    h * h;\n        // Return the rounded area, or -1 if the three sides make a triangle\n
    \       // that doesn't form a valid triangle.\n        return Math.Round(Math.Abs(area),
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvplze0bs.cs(36,21): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvplze0bs.cs(39,21): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Round(decimal, int)'' and ''Math.Round(double, int)''

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long sA = a - b;\n        long
    sB = b - c;\n        long sC = c - a;\n        if (sA * sB < sC * sA)\n        {\n
    \           long t = a;\n            a = b;\n            b = c;\n            c
    = t;\n        }\n        float s = (a * b * c) / 2.0f;\n        return Math.Round(s,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw5egfap.cs(31,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c || b + c > a ||
    a + c > b) throw new Exception(\"not a triangle\");\n        return (a * b + c)
    / (2 * Math.Sqrt((Math.Pow(a, b) + Math.Pow(c, 2)));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_abmbwn.cs(21,79): error CS1026: ) expected

    '
  timestamp: 1659977249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float A = (float)(a*a + b*b +
    c*c);\n        float B = (a*b + b*c + c*a);\n        float C = (a*c + b*a + c*b);\n
    \       float area;\n        if (A > 0 && B > 0 && C > 0) {\n            float
    s = (float)Math.Sqrt(A*A + B*B + C*C);\n            area = s / 2.0;\n        }
    else {\n            area = -1;\n        }\n        return Math.Round(area, 2,
    MidpointRounding.AwayFromZero);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxdulht3c.cs(26,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxdulht3c.cs(30,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double area = (a * b) * c;\n        double
    ab = b * a / 2;\n        double bc = b * c / 2;\n        return Math.Round(area
    * Math.Sqrt(ab * bc));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplz__91vp.cs(23,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area;\n        bool isTriangle;\n
    \       if ((a+b) > c || (b+c) > a || (c+a) > b) {\n            isTriangle = false;\n
    \       } else {\n            isTriangle = true;\n        }\n        if (isTriangle)
    {\n            area = (float)((a*b - b*c) / 2.0F);\n        } else {\n            area
    = -1;\n        }\n        return Math.Round(area, 2);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) ==
    (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfchhzhbh.cs(32,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float result;\n        // If the
    sum of any two sides is greater than the third side\n        if (a + b > c) \n
    \       {\n            // Get all the multiples of b less than or equal to c\n
    \           IEnumerable<long> multiples = Enumerable.Range(0, (int) Math.Sqrt(c)).Where(i
    => (int) Math.Pow(b, i) <= c).ToArray();\n            // Get the sum of all the
    multiples less than or equal to c\n            int sumOfMultiples = multiples.Sum();\n
    \           // Calculate the area of the triangle\n            result = ((float)
    (a * b)) / sumOfMultiples;\n        }\n        // If the sum of the two sides
    is greater than the third side\n        else\n        {\n            // Get the
    sum of all the multiples of b less than or equal to c\n            int sumOfMultiples
    = Enumerable.Range(0, (int) Math.Sqrt(c)).Where(i => (int) Math.Pow(b, i) <= c).Sum();\n
    \           // Calculate the area of the triangle\n            result = ((float)
    (a * b)) / sumOfMultiples;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxwqfxlj2.cs(25,43): error CS0029: Cannot implicitly convert type ''int[]''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpxwqfxlj2.cs(27,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float triangleArea = (a * b) /
    2.0f;\n\n        // Three sides make a valid triangle when the sum of any two
    sides is\n        // greater than the third side\n        if (a + b > c) {\n            triangleArea
    = -1f;\n        }\n\n        return triangleArea;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f78bc97c4a2e4cf59e1e0eb3393e9d37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f78bc97c4a2e4cf59e1e0eb3393e9d37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = -1;\n        float
    abc = Math.Abs((a + b + c) / 2.0f);\n        if (a < b + c && b < a + c && c <
    a + b) {\n            float area2 = (float)(a * b * c);\n            float area3
    = (float)(a * c * b);\n            float area1 = (float)(b * c * a);\n            if
    (area != -1) {\n                if (area == area3 && area2 == area1) area = -1;\n
    \               if (area == area3 && area == area2) area = -1;\n            }\n
    \           else {\n                area = Math.Sqrt(area3 + area2);\n            }\n
    \       }\n        return area;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwuit965_.cs(31,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var d = (float)a / (float)b;\n
    \       var e = (float)c / (float)b;\n        var g = (float)c / (float)a;\n        var
    h = (float)b / (float)a;\n        if (d < 0 || e < 0 || g < 0 || h < 0) {\n            return
    -1;\n        }\n\n        var sum = d;\n        sum += e;\n        sum += g;\n
    \       sum += h;\n        return Math.Round(sum * 4.0, 2, MidpointRounding.AwayFromZero);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_93bwo51.cs(32,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float A = 0.0;\n        float
    B = 0.0;\n        float C = 0.0;\n        if (a > b) { A = b * b; }\n        \n
    \       if (a > c) { A = c * c; }\n        \n        if (b > c) { A = b * b; }\n
    \       \n        if (c > a) { A = c * c; }\n        \n        if (c > b) { A
    = c * c; }\n        \n        if (c > a) { A = c * c; }\n        \n        if
    (b > a) { A = b * b; }\n        \n        if (a > b) { A = b * b; }\n        \n
    \       if (a > c) { A = c * c; }\n        \n        if (b > c) { A = b * b; }\n
    \       \n        if (c > a) { A = c * c; }\n        \n        if (c > b) { A
    = c * c; }\n        \n        if (c > a) { A = c * c; }\n        \n        if
    (b > a) { A = b * b; }\n        \n        if (a > b) { A = b * b; }\n        \n
    \       if (a > c) { A = c * c; }\n        \n        if (b > c) { A = b * b; }\n
    \       \n        if (c > a) { A = c * c; }\n        \n        if (c > b) { A
    = c * c; }\n        \n        if (c > a) { A = c * c; }\n        \n        if
    (b > a) { A = b * b; }\n        \n        if (a > b) { A = b * b; }\n        \n
    \       if (a > c) { A = c * c; }\n        \n        if (b > c) { A = b * b; }\n
    \       \n        if (c > a) { A = c * c; }\n        \n        if (c > b) { A
    = c * c; }\n        \n        if (c > a) { A = c * c; }\n        \n        if
    (b > a) { A = b * b; }\n        \n        if (a > b) { A = b * b; }\n        \n
    \       if (a > c) { A = c * c; }\n        \n        if (b > c) { A = b * b; }\n
    \       \n        if (c > a) { A = c * c; }\n        \n        if (c > b) { A
    = c * c; }\n        \n        if (c > a) { A = c * c; }\n        \n        if
    (b > a) { A = b * b; }\n        \n        if (a > b) { A = b * b; }\n        \n
    \       if (a > c) { A = c * c; }\n        \n        if (b > c) { A = b * b; }\n
    \       \n        if (c > a) { A = c * c; }\n        \n        if (c > b\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8oko7pzc.cs(101,18): error CS1026: ) expected

    /tmp/tmp8oko7pzc.cs(101,18): error CS1525: Invalid expression term ''}''

    /tmp/tmp8oko7pzc.cs(101,18): error CS1002: ; expected

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = -1;\n        long
    s0 = a + b;\n        long s1 = b + c;\n        long s2 = a + c;\n        if ((s0
    * s1) > s2) {\n            area = (s0 - s2) * (s1 + s2) / 2.0;\n        } else
    {\n            area = (s0 - s1) * (s2 + s1) / 2.0;\n        }\n        return
    Math.Round(area, 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo4jnd7sh.cs(25,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpo4jnd7sh.cs(27,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpo4jnd7sh.cs(29,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (Math.Abs(a + b - c) > 0.0001f)
    {\n            float s = (a + b + c) / 2f;\n            float area = (s * (s -
    a) * (s - b) * (s - c)) / (4.0f * Math.Pow(a, 3));\n            return Math.Round(Math.Abs(area),
    2);\n        }\n        return -1.0f;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_rcbkaea.cs(22,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_rcbkaea.cs(23,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a >= 0 && a <= 100,
    \"a\");\n        Debug.Assert(b >= 0 && b <= 100, \"b\");\n        Debug.Assert(c
    >= 0 && c <= 100, \"c\");\n        float a2 = b * b;\n        float b2 = a2 *
    c;\n        float c2 = a2 * b;\n        float s = (a + b + c) * 0.5;\n        float
    area = (float)Math.Sqrt(s * (s - a2) * (s - b2) * (s - c2));\n        // We want
    a round number, not an integer.\n        return Math.Round(area, 2);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5v4vy8u2.cs(26,19): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5v4vy8u2.cs(29,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = -1F;\n        if
    ((a + b > c) || (b + c > a) || (c + a > b)) {\n            area = -1F;\n        }\n
    \       else {\n            area = (a * b * c) / ((Math.Pow(a, 2) * Math.Pow(b,
    2)) - (Math.Pow(c, 2)));\n        }\n        return Math.Round(area, 2); // Round
    the area to 2 decimal places\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkwawdv2j.cs(25,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkwawdv2j.cs(27,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float area = -1;\n        // Only
    works if all three sides are valid\n        if(a<=b && b<=c) \n        {\n            //
    Area is equal to the product of the 3 sides divided by the length of\n            //
    the side.\n            area = a*b * c / Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,
    2));\n            // If the area is greater than the triangle area, then the triangle
    is invalid.\n            if(area>TriangleArea(a, b, c)) return -1;\n        }\n
    \       // If one of the sides is greater than the others, then the triangle is
    invalid.\n        else if(a>b) \n        {\n            area = -1;\n        }\n
    \       else if(b>c) \n        {\n            area = -1;\n        }\n        //
    If the area is still less than the triangle area, then the triangle is invalid.\n
    \       else if(area<TriangleArea(a, b, c)) return -1;\n        return area;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa6d7pe0h.cs(26,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float h = (float)(a * b * c) /
    ((float)(a * a + b * b + c * c));\n        if (h > 1f || h < -1f) return -1f;\n
    \       return Math.Round(h, 2);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwbd2nem.cs(22,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var d = b - a; \n        var e
    = c - a; \n        if (Math.Sqrt(Math.Pow(d, 2) + Math.Pow(e, 2)) > a) { \n            return
    -1L;\n        }\n        var h = Math.Sqrt(Math.Pow(d, 2) + Math.Pow(e, 2));\n
    \       var i = Math.Sqrt(a * a + b * b + c * c); \n        return i / h;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvg6zcn8n.cs(27,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long ab = a + b;\n        long
    ac = a + c;\n        if (ab > ac) {\n            return (b + c) / 2;\n        }
    else if (ab < ac) {\n            return -1;\n        }\n        long bc = b +
    c;\n        return (a + b + c) / 2;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2fa071d4b16d4c91ab58660b53786fcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2fa071d4b16d4c91ab58660b53786fcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float a2 = a * a;\n        float
    b2 = b * b;\n        float c2 = c * c;\n        float ac = b2 * c - a2 * b;\n
    \       if (ac < 0) return -1;\n        float sqrtac = Math.Sqrt(ac);\n        float
    ba2 = b2 * b;\n        float bc2 = c2 * c;\n        float ca2 = a2 * c;\n        float
    result = ba2 * bc2 - ca2 * b2;\n        result = result / sqrtac;\n        if
    (result < 0)\n            return -1;\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvns_7wcl.cs(25,24): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double area = 0.0f;\n\n        if
    (a + b > c) {\n            area = b * 0.5f;\n        } else if (a + c > b) {\n
    \           area = c * 0.5f;\n        } else if (b + c > a) {\n            area
    = a * 0.5f;\n        } else {\n            return -1L;\n        }\n        return
    Convert.ToDecimal(area).Round(2, MidpointRounding.AwayFromZero);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpptzolw3r.cs(31,16): error CS0176: Member ''decimal.Round(decimal, MidpointRounding)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        double a1 = Math.Abs(a/Math.Sqrt(b*b
    - a*a));\n        double a2 = Math.Abs(c/Math.Sqrt(b*b - a*a));\n        double
    b1 = Math.Abs(b/Math.Sqrt(b*b - a*a));\n        double b2 = Math.Abs(c/Math.Sqrt(b*b
    - a*a));\n        if (a1*b2 > a2*b1) return -1f;\n        return Math.Round((double)(a1*b1
    + a2*b2), 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplw_6nva2.cs(25,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long h = b - a;\n        long
    k = c - b;\n        long j = k - h;\n        if (j > 0) {\n            return
    (a + b + c) / 2.0f;\n        }\n        if (k > 0) {\n            return 0;\n
    \       }\n        if (h > 0) {\n            return (float)-1.0f;\n        }\n
    \       if (j > 0) {\n            return (float)-1.0f;\n        }\n        if
    (k > 0) {\n            return (float)-1.0f;\n        }\n        if (h > 0) {\n
    \           return (float)-1.0f;\n        }\n        return -1.0f;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47a7724c94c74fd3bc1edd2226ea92bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47a7724c94c74fd3bc1edd2226ea92bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        Debug.Assert(a > 0 && b > 0 &&
    c > 0, \"Invalid parameters. Values must be positive!\");\n\n        float result
    = (float)(a * b * c / 3) / 2;\n\n        // Return negative results if sides form
    a disconnected triangle.\n        return result < 0\n            ? result = result
    * -1\n            : result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <370309a14165491cb237995c33e86488>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <370309a14165491cb237995c33e86488>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977251
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        bool isRightAngle = Math.Abs(a
    - b) < Math.Abs(b - c);\n        bool isOdd = (a % 2 == 1) != (b % 2 == 1);\n
    \       bool isEven = (a % 2 == 0) == (b % 2 == 0);\n        bool isPerpendicular
    = (Math.Abs(b - a) < Math.Abs(c - a));\n        long perpendicular = a * c + b
    * d;\n        long angleA = Math.Abs(perpendicular - c);\n        long angleB
    = Math.Abs(perpendicular - d);\n        long angleC = Math.Abs(perpendicular -
    b);\n        long angleD = angle - a;\n        if (angleD > angleC) {\n            isRightAngle
    = false;\n        }\n        if (isRightAngle) {\n            return 2 * Math.Acos((b
    * b + c * c - a * a) / (2 * b * c));\n        }\n        if (isEven) {\n            long
    d = b * b - 4 * a * c;\n            if (d < 0) {\n                return (float)double.NaN;\n
    \           }\n            d = Math.Sqrt(d);\n            return (float)(-b +
    Math.Sqrt(Math.Sqrt(b * b + a * a - 4 * d * d) - 4 * c * c)) / 2 * d;\n        }\n
    \       if (isPerpendicular) {\n            long d = a * a - b * b - c * c;\n
    \           if (d < 0) {\n                return (float)double.NaN;\n            }\n
    \           d = Math.Sqrt(d);\n            long a = Math.Sqrt(a * a);\n            long
    b = Math.Sqrt(b * b);\n            long c = Math.Sqrt(c * c);\n            return
    (float)(b * b - 4 * a * c) / 2 * d;\n        }\n        return (float)double.NaN;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3gd4476.cs(24,42): error CS0103: The name ''d'' does not exist in the
    current context

    /tmp/tmpe3gd4476.cs(26,48): error CS0103: The name ''d'' does not exist in the
    current context

    /tmp/tmpe3gd4476.cs(28,23): error CS0103: The name ''angle'' does not exist in
    the current context

    /tmp/tmpe3gd4476.cs(33,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe3gd4476.cs(40,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe3gd4476.cs(44,22): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpe3gd4476.cs(44,26): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpe3gd4476.cs(44,30): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmpe3gd4476.cs(44,34): error CS0841: Cannot use local variable ''b'' before
    it is declared

    /tmp/tmpe3gd4476.cs(44,38): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmpe3gd4476.cs(44,42): error CS0841: Cannot use local variable ''c'' before
    it is declared

    /tmp/tmpe3gd4476.cs(48,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe3gd4476.cs(49,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpe3gd4476.cs(49,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe3gd4476.cs(50,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpe3gd4476.cs(50,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An'
  timestamp: 1659977250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float sum = (a + b + c) / 2.0f;\n
    \       return sum * sum;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2c2a251d527422b9e5b96677d473162>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2c2a251d527422b9e5b96677d473162>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977251
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a < b && a < c || b < c &&
    b < a || c < a && c < b) {\n            return -1;\n        }\n        var a =
    Math.Sqrt(a * a + b * b + c * c);\n        long d = b * b - 4 * a * c;\n        if
    (d >= 0) {\n            return (float)Math.Sqrt(d / 2) / Math.Sqrt(2 * a);\n        }
    else {\n            return -1;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuwvjpfgk.cs(20,13): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpuwvjpfgk.cs(20,22): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpuwvjpfgk.cs(20,44): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpuwvjpfgk.cs(20,53): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpuwvjpfgk.cs(23,13): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpuwvjpfgk.cs(23,27): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpuwvjpfgk.cs(23,31): error CS0841: Cannot use local variable ''a'' before
    it is declared

    /tmp/tmpuwvjpfgk.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpuwvjpfgk.cs(26,20): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977250
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var x = Math.Sqrt(a * a + b *
    b - c * c);\n        if (x >= long.MinValue) {\n            return Math.Round(x,
    2f, MidpointRounding.ToEven);\n        }\n        return -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L))
    == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg6de2oyv.cs(22,31): error CS1503: Argument 1: cannot convert from ''double''
    to ''decimal''

    /tmp/tmpg6de2oyv.cs(22,34): error CS1503: Argument 2: cannot convert from ''float''
    to ''int''

    '
  timestamp: 1659977250
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        if (a + b > c) {\n            return
    Math.Abs(b * b - 4 * a * c);\n        } else {\n            return -1.0F;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51ea81a3534441418b20108d7f31ce09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51ea81a3534441418b20108d7f31ce09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        long a1 = a + b;\n        long
    a2 = a - b;\n        long a3 = a - c;\n\n        long b1 = b + c;\n        long
    b2 = b - c;\n        long b3 = b - a;\n\n        long c1 = c + a;\n        long
    c2 = c - a;\n        long c3 = c - b;\n\n        bool validTriangle = (b1 > a2
    && a1 > a3) && (b2 > a1 && b2 > a3) && (b3 > a1 && b3 > a2);\n        if (validTriangle
    && c1 > a2 && a1 > c3 && a3 > c2) {\n            return a1 * a2 / c2;\n        }\n\n
    \       bool validTriangle2 = (b1 > a3 && a1 > a2 && a3 > c2) && (b2 > a1 && b2
    > a3 && a3 > b2);\n        if (validTriangle2 && c1 > a2 && a1 > c3 && a3 > c2)
    {\n            return a1 * a3 / c2;\n        }\n\n        bool validTriangle3
    = (b1 > a3 && a1 > a2 && a3 > b2) && (b2 > a1 && b2 > a3 && a3 > b1);\n        if
    (validTriangle3 && c1 > a2 && a1 > c3 && a3 > c2) {\n            return a1 * a3
    / c2;\n        }\n\n        return -1;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4f4b51c20a54e8b84147b80c46fb75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4f4b51c20a54e8b84147b80c46fb75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        // TODO: Your code here\n        if
    (a >= b && b >= c) {\n            return a * b * c / 2;\n        }\n        return
    -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ee0d1fca0c344db84fc2e07f65db084>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ee0d1fca0c344db84fc2e07f65db084>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float sum = 0;\n        if (a
    * a + b * b > c * c) \n            return -1;\n        if (a * a + c * c > b *
    b) \n            return -1;\n        sum += (float)(Math.Sqrt(Math.Pow(a, 2) +
    (b * b) - (a * c)));\n        return sum / 2.0f;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L),
    (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n
    \   Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L),
    (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) ==
    (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db4907dc83234b4883eb5ceb1c9043ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db4907dc83234b4883eb5ceb1c9043ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977251
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        float result = 0.0f;\n        float
    side1 = (float)Math.Sqrt(a * a + b * b + c * c);\n        float side2 = (float)Math.Sqrt(a
    * b + b * c + c * a);\n        if (side1 > side2) {\n            result = side1
    / side2;\n        }\n        else {\n            result = side2 / side1;\n        }\n
    \       if (result > 0.0f) {\n            result = Math.Round(result, 2);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TriangleArea((3L), (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (10L)) == (float)-1L);\n    Debug.Assert(TriangleArea((4L), (8L), (5L))
    == (8.18f));\n    Debug.Assert(TriangleArea((2L), (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L),
    (2L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((10L), (5L), (7L))
    == (16.25f));\n    Debug.Assert(TriangleArea((2L), (6L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((1L), (1L), (1L)) == (0.43f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (10L)) == (float)-1L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm4uinttv.cs(30,22): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977251
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return the
    area of\n    // the triangle rounded to 2 decimal points if the three sides form
    a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid
    triangle when the sum of any two sides is greater \n    // than the third side.\n
    \   // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    //
    >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float
    TriangleArea(long a, long b, long c) {\n        var areacircle = TriangleArea(a,
    b, c);\n        double triarea = Math.Round(areacircle, 2);\n        return float.Parse(triarea);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((3L),
    (4L), (5L)) == (6.0f));\n    Debug.Assert(TriangleArea((1L), (2L), (10L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((4L), (8L), (5L)) == (8.18f));\n    Debug.Assert(TriangleArea((2L),
    (2L), (2L)) == (1.73f));\n    Debug.Assert(TriangleArea((1L), (2L), (3L)) == (float)-1L);\n
    \   Debug.Assert(TriangleArea((10L), (5L), (7L)) == (16.25f));\n    Debug.Assert(TriangleArea((2L),
    (6L), (3L)) == (float)-1L);\n    Debug.Assert(TriangleArea((1L), (1L), (1L)) ==
    (0.43f));\n    Debug.Assert(TriangleArea((2L), (2L), (10L)) == (float)-1L);\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzto_x4yj.cs(22,28): error CS1503: Argument 1: cannot convert from ''double''
    to ''string''

    '
  timestamp: 1659977251
