name: HumanEval_60_sum_to_n
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    //\
  \ >>> SumToN((30L))\n    // (465L)\n    // >>> SumToN((100L))\n    // (5050L)\n\
  \    // >>> SumToN((5L))\n    // (15L)\n    // >>> SumToN((10L))\n    // (55L)\n\
  \    // >>> SumToN((1L))\n    // (1L)\n    public static long SumToN(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumToN((1L))\
  \ == (1L));\n    Debug.Assert(SumToN((6L)) == (21L));\n    Debug.Assert(SumToN((11L))\
  \ == (66L));\n    Debug.Assert(SumToN((30L)) == (465L));\n    Debug.Assert(SumToN((100L))\
  \ == (5050L));\n    }\n\n}\n"
completions: ["        if (n <= 0)\n            return 0;\n        if (n == 1)\n \
    \           return 1;\n        var sum = 1;\n        for (var i = 1; i < n; i++)\
    \ {\n            sum = sum * i;\n        }\n        return sum;", "        if\
    \ (n == 1L)\n            return 1L;\n        long total = 1L;\n        for (long\
    \ i = 1L; i <= n; ++i)\n            total += i;\n        return total;", "   \
    \     var sum = 0;\n        for (var i = 1; i <= n; i++) {\n            sum +=\
    \ i;\n        }\n        return sum;", "        var r = new long[1];\n       \
    \ r.SetValue(n);\n        long sum = 0;\n        long limit = long.MaxValue;\n\
    \        for (long i = 1; i < limit; i += 1) {\n            sum += i;\n      \
    \  }\n        if (sum < n) {\n            sum -= sum % n;\n        }\n       \
    \ r.SetValue(sum);\n        return r.Value;", "        long sum = 0;\n       \
    \ long limit = n;\n        while (limit > 0) {\n            sum += limit % 2 ==\
    \ 0 ? limit / 2 : (limit / 2) + 1;\n            limit /= 2;\n        }\n     \
    \   return sum;", "        long sum = 0;\n        for(long i = 1; i <= n; i++)\
    \ {\n            sum += i;\n        }\n        return sum;", "        long sum\
    \ = Enumerable.Range(1, n).Sum();\n        return sum;", "        long sum = 0;\n\
    \        for (long i = 1; i <= n; i++) sum += i;\n        return sum;", "    \
    \    var result = 1;\n        while (n > 0) {\n            result *= n--;\n  \
    \      }\n        return result;", "        if (n < 1) throw new ArgumentOutOfRangeException(\"\
    n\");\n        long sum = 0;\n        for (long i = 1; i <= n; ++i) sum += i;\n\
    \        return sum;", "        long sum = 0;\n        for (long i = 1; i <= n;\
    \ i++) {\n            sum += i;\n        }\n        return sum;", "        var\
    \ result = 1L;\n        for(var i = 1; i < n; i++)\n            result *= i;\n\
    \        return result;", "        if (n == 0)\n            return 0;\n      \
    \  if (n > long.MaxValue) throw new ArgumentOutOfRangeException(\"n\");\n    \
    \    if (n < 0) throw new ArgumentOutOfRangeException(\"n\");\n        long sum\
    \ = 0;\n        while (n > 1) {\n            sum = sum + n % 10;\n           \
    \ n = n / 10;\n        }\n        if (n == 1) return sum;\n        long tmp =\
    \ n % 10;\n        return sum + tmp * SumToN(n / 10);", "        if (n < 1 ||\
    \ n > 100000000) {\n            throw new ArgumentOutOfRangeException(\"n\");\n\
    \        }\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n \
    \           sum = sum + i;\n        }\n        return sum;", "        if (n ==\
    \ 1) return 1;\n        return n*(n+1)/2;", '        return Enumerable.Range(1,
    n).Sum();', "        var sum = 0;\n        for (long i = 1; i <= n; i++) {\n \
    \           sum += i;\n        }\n        return sum;", "        long sum = 0;\n\
    \        for (long i = 1; i <= n; i++) {\n            sum = sum + i;\n       \
    \ }\n        return sum;", "        long product = 1;\n        long sum = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            product *= i;\n          \
    \  sum += product;\n        }\n        return sum;", "        var remainder =\
    \ (long)Math.Pow(2.0, n);\n        var result = 0;\n        do {\n           \
    \ result += (remainder%2) == 0 ? remainder%2 : remainder%2 + 1;\n            remainder\
    \ = (remainder >> 1) + (remainder >> 2) + \n                (remainder >> 3) +\
    \ remainder >> 4;\n        } while (remainder != 0);\n        return result;",
  '        return Enumerable.Range(1, n).Sum();', "        var sum = 0;\n        while\
    \ (n > 0) {\n            sum += n--;\n        }\n        return sum;", "     \
    \   if (n == 0)\n            return 1L;\n        else\n            return ((n\
    \ * SumToN(n - 1L) + 1L) / 2L);", "        if (n == 1L) {\n            return\
    \ 1L;\n        }\n        long sum = 0;\n        while (true) {\n            sum\
    \ = sum + n;\n            n -= n % 2L;\n            if (n == 0L) {\n         \
    \       return sum;\n            }\n        }", "        if (n == 0)\n       \
    \     return 1;\n        if (n % 2 == 0)\n            return n * SumToN(n - 1);\n\
    \        else\n            return n * SumToN(n / 2) + SumToN(n - 1);", "     \
    \   Stopwatch s = Stopwatch.StartNew();\n        long result = 1;\n        for\
    \ (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        long\
    \ t1 = s.ElapsedMilliseconds;\n        Stopwatch s2 = Stopwatch.StartNew();\n\
    \        result = 1;\n        for (long i = 2; i <= n; i++) {\n            result\
    \ *= i;\n        }\n        long t2 = s2.ElapsedMilliseconds;\n        long t3\
    \ = t2 - t1;\n        Console.WriteLine(\"{0} {1}\", t2, t3);\n        return\
    \ result;", "        long sum = 0;\n        long[] numbers = Enumerable.Range(0,\
    \ n).ToArray();\n        foreach (long i in numbers) {\n            sum += i;\n\
    \        }\n        return sum;", "        if (n == 0)\n            return 0;\n\
    \        var sum = SumToN(n - 1);\n        long remainder = n % 2 == 0 ? 1 : 2;\n\
    \        return sum + n * remainder;", "        long sum = 1;\n        while (n\
    \ > sum) sum += n;\n        return sum;", "        long sum = 1;\n        for\
    \ (long i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return\
    \ sum;", "        Debug.WriteLine(\"Sum upto \" + n);\n        long sum = 0;\n\
    \        for (long i = 2; i <= n; ++i) {\n            sum += i;\n        }\n \
    \       return sum;", "        long sum = 0;\n        long temp;\n        if (n\
    \ == 1) return 1;\n        for (int i = 1; i <= n; i++) {\n            temp =\
    \ (long) (i * (i + (i - 1)) / 2);\n            if (temp > sum) sum = temp;\n \
    \       }\n        return sum;", "        if (n <= 0)\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        if (n == 1)\n            return 1;\n        long sum = 2 * SumToN(n\
    \ - 1) + 1;\n        if (n % 2 == 0) {\n            sum += SumToN(n / 2);\n  \
    \      }\n        return sum;", "        long sum = 0;\n        for (int i = 1;\
    \ i <= n; i++) {\n            sum += i;\n        }\n        return sum;", "  \
    \      var sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum +=\
    \ i;\n        }\n        return sum;", "        long sum = 1;\n        for (long\
    \ i = 1; i <= n; i++) {\n            sum *= i;\n        }\n        return sum;",
  "        // This is our first attempt at an implementation...\n        if (n <=\
    \ 0) {\n            return n;\n        }\n        long result = 1;\n        for\
    \ (long i = n; i > 0; i /= 2) {\n            result += i;\n        }\n       \
    \ // Now we try the slightly less efficient algorithm.\n        if (result < n)\
    \ {\n            return result;\n        }\n        result = 1;\n        for (long\
    \ i = n; i > 0; i /= 2) {\n            result *= (i - 1);\n        }\n       \
    \ return result;", "        long sum = 0;\n        for(long i = n; i > 0; i--)\n\
    \            sum += i;\n        return sum;", "        long sum = 0;\n       \
    \ while (n > 1) {\n            sum += n % 10;\n            n = n / 10;\n     \
    \   }\n        return sum;", "        var ans = new List<long>();\n        for\
    \ (long i = 1; i <= n; i++)\n            ans.Add(i);\n        return ans.Sum();",
  "        if (n == 0) return 1;\n        else return n*SumToN(n - 1);", "       \
    \ long result = 0;\n        long start = 1;\n        long end = n;\n        double\
    \ current = 0.0;\n        double average = 0.0;\n        while (start < end) {\n\
    \            long mid = (start + end) / 2;\n            current += (end - start)\
    \ * Math.Pow((double)mid, 0.5);\n            start = mid + 1;\n            end\
    \ = mid;\n            average = current / n;\n            result = (long)Math.Round(average);\n\
    \        }\n        return result;", "        // Declare our local variables.\n\
    \        long sum = 0;\n        int digit = 0;\n        // For each digit from\
    \ 1 to n.\n        while (n > 0) {\n            // If the last digit was zero.\n\
    \            if (n % 10 == 0) {\n                // Add it to the sum.\n     \
    \           sum += digit;\n                // Zero out the digit.\n          \
    \      digit = 0;\n            }\n            // Otherwise, add the digit to the\
    \ sum.\n            else {\n                sum += (n % 10) + digit;\n       \
    \         // Increment the digit value.\n                digit++;\n          \
    \  }\n            // Move to the next digit.\n            n /= 10;\n        }\n\
    \        // Add the final digit to the sum.\n        sum += digit;\n        //\
    \ Return the sum.\n        return sum;", "        long sum = 0;\n        while\
    \ (n > 1) {\n            sum += n;\n            n--;\n        }\n        return\
    \ sum;", "        // write your code in C# 7.0 string concatenation style\n  \
    \      // string result = string.Concat(Enumerable\n        // .Range(1, n)\n\
    \        // .Select(x => Convert.ToString(x, 16))\n        // .Select(x => $\"\
    0x{x}\"))\n        string result = string.Concat(Enumerable.Range(1, n)\n    \
    \        .Select(x => Convert.ToString(x, 16))\n            .Aggregate((x, y)\
    \ => x + y));\n        BigInteger i = new BigInteger(result);\n        return\
    \ i.ToString();", "        BigInteger big = new BigInteger(n.ToString());\n  \
    \      decimal sum = decimal.Zero;\n        BigInteger remain = big;\n       \
    \ while (remain != 0) {\n            sum += (remain % 10);\n            remain\
    \ /= 10;\n        }\n        return sum.ToLong();", "        long sum = 0;\n \
    \       for (long i = 1; i <= n; i++)\n            sum += i;\n        return sum;",
  '        return Enumerable.Range(1, n).Sum();', "        long sum = 0;\n       \
    \ for (long i = 1; i <= n; i++) sum += i;\n        return sum;", "        long\
    \ sum = 1;\n        for (long i = 1; i < n; ++i) {\n            sum = sum * i;\n\
    \        }\n        return sum;", "        long product = 1;\n        for (long\
    \ i = 1; i <= n; i++) {\n            product *= i;\n        }\n        return\
    \ product;", "        var result = 1;\n        while (n-- > 0) {\n           \
    \ result *= (n + 1);\n        }\n        return result;", "        long sum =\
    \ 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n\
    \        return sum;", "        // sum is the running sum of the numbers.\n  \
    \      long sum = 0;\n        // n is the number we're adding to.\n        while\
    \ (n > 0) {\n            // Add the next number to the sum.\n            sum +=\
    \ n;\n            // Remove the next number from the sum.\n            n -= 1;\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (long i\
    \ = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;",
  "        if (n == 0) return 0;\n        var res = 1;\n        while (n > 0) {\n\
    \            res *= n;\n            n--;\n        }\n        return res;", " \
    \       if (n == 0) return 1;\n        if (n < 0) throw new ArgumentOutOfRangeException(\"\
    n\");\n        long result = 0;\n        while (n > 0) {\n            result +=\
    \ (n % 10);\n            n /= 10;\n        }\n        return result;", "     \
    \   if (n <= 1) return n;\n        var sum = 0L;\n        long[] arr = new long[n];\n\
    \        for (int i = 0; i < n; ++i) {\n            arr[i] = i;\n            sum\
    \ += i;\n        }\n        long result = sum;\n        long curr = SumToN(n -\
    \ 1);\n        while (result > curr) {\n            result -= curr;\n        \
    \    curr = SumToN(n - 1);\n        }\n        return result;", "        long\
    \ s = 1;\n        while (n != 0) {\n            s += n % 10;\n            n =\
    \ n / 10;\n        }\n        return s;", "        // your code goes here\n  \
    \      long s = n;\n        while (n > 0) {\n            s -= n % 10;\n      \
    \      n = n / 10;\n        }\n        return s;", "        if (n<1)\n       \
    \     throw new ArgumentOutOfRangeException(\"n\");\n        if (n==1)\n     \
    \       return 1L;\n        // Compute n! and factorial of n!.\n        var nf\
    \ = n * n;\n        var nfac = factorial(n);\n        var sum = fmul(nf, nfac);\n\
    \        return sum;", "        long res = 1;\n        for (long i = n; i > 0;\
    \ i /= 2) {\n            if (i % 2 == 1) {\n                res *= i;\n      \
    \      }\n        }\n        return res;", "        long num = 0;\n        long\
    \ max_num = n; // set max num\n        long num2 = n; // set num2\n        while\
    \ (max_num > 1) {\n            num2 = max_num;\n            max_num *= max_num;\
    \ // set num2 to max_num\n            num += num2; // set num to num2 + num\n\
    \        }\n        return num;", "        if (n == 1L) return n;\n        if\
    \ (n % 2 == 1L) return SumToN(n / 2L) + SumToN(n - 1L);\n        return SumToN(n\
    \ / 2L) * 3 + SumToN(n - 1L);", "        long sum = 0;\n        for (long i =\
    \ 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;", " \
    \       long sum = 0;\n        for (long i = 1; i <= n; i++)\n            sum\
    \ += i;\n        return sum;", "        long sum = 0;\n        for (int i = 1;\
    \ i <= n; i++) {\n            sum += i;\n        }\n        return sum;", "  \
    \      long sum = 0;\n        for (int i = 0; i < n; i++) sum += i;\n        return\
    \ sum;", "        if (n <= 1) return 1;\n        var sum = SumToN(n - 1);\n  \
    \      return n * sum;", "        using (SecureRandom r = new SecureRandom())\
    \ {\n            byte[] buffer = new byte[sizeof(n)];\n            r.NextBytes(buffer);\n\
    \            BigInteger bigInt = new BigInteger(buffer);\n            return bigInt.ToString().Replace(\"\
    n\", \"\");\n        }", "        long sum = 0;\n        for (long i = 2; i <=\
    \ n; i++) {\n            sum += i;\n        }\n        return sum;", "       \
    \ long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += i;\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (long i\
    \ = 1; i < n; i++) {\n            sum = sum + i;\n        }\n        return sum;",
  "        long s = 0;\n        while (n-- > 0)\n            s += n;\n        return\
    \ s;", "        // Write your logic here\n        long sum = 0;\n        for (int\
    \ i = 1; i <= n; i++)\n            sum += i;\n        return sum;", "        long\
    \ x = 1, sum = 0;\n        while (x != 0) {\n            sum += x;\n         \
    \   x /= 10;\n        }\n        return sum * n;", "        Debug.Assert(n > 0);\n\
    \        long result = 1;\n        do {\n            result *= n;\n          \
    \  --n;\n        } while (n > 0);\n        return result;", "        long sum\
    \ = 0;\n        for (int i = 0; i < n; i++)\n            sum += i;\n        return\
    \ sum;", "        long sum = 0;\n        for (long i = 1; i <= n; ++i) {\n   \
    \         sum += i;\n        }\n        return sum;", '        return Enumerable.Range(1,
    n).Sum(i => (long)Math.Pow(n, i));', "        long sum = 0;\n        for (long\
    \ i = 2; i <= n; i++) \n            sum += i;\n        return sum;", "       \
    \ long sum = 0;\n        foreach (long i in Enumerable.Range(1, n)) {\n      \
    \      sum += i;\n        }\n        return sum;", "        long s = 0;\n    \
    \    for (long i = 1; i <= n; i++)\n            s += i;\n        return s;", " \
    \       var sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum\
    \ += i;\n        }\n        return sum;", "        var sum = n;\n        for (int\
    \ i = 1; i < n; i++) {\n            sum += i;\n        }\n        return sum;",
  "        Debug.Assert(n >= 1);\n        if (n == 1) {\n            return 1;\n \
    \       }\n        var d = n - 1;\n        var p = (long)Math.Pow(10, d);\n  \
    \      var q = n * (n + 1) / 2;\n        var r = n;\n        var s = 1;\n    \
    \    while (d > 1) {\n            r = r - q + s * ((s * q + r) / p) % 10;\n  \
    \          d = d / 10;\n            s = s * 10;\n        }\n        return r;",
  '        return n * (n + 1) / 2;', "        if (n < 1) throw new ArgumentOutOfRangeException(\"\
    n\");\n        // n is odd. \n        var sum = SumToN(n - 1);\n        // n is\
    \ even. \n        if (n % 2 == 0) return sum + sum;\n        // n is even. \n\
    \        else return sum + sum + n;", "        long sum = 1;\n        for (int\
    \ i = 0; i < n; i++) {\n            sum = sum * (i + 1);\n        }\n        return\
    \ sum;", "        long i = n;\n        while (i > 1) {\n            i -= 1;\n\
    \        }\n        return 1;", "        long sum = 0;\n        while (n > 0)\
    \ {\n            sum += (n%2 == 0) ? n : 3*n+1;\n            n = (long) (n / 2);\n\
    \        }\n        return sum;", "        Debug.Assert(n >= 1L);\n        long\
    \ sum = 0;\n        long counter = 1L;\n        while (counter < n) {\n      \
    \      sum += counter;\n            counter *= 10L;\n        }\n        return\
    \ sum;", "        long res = 1;\n        for (long i = 1; i <= n; ++i) {\n   \
    \         res *= i;\n        }\n        return res;", "        long sum = 0;\n\
    \        long i;\n        for (i = 1; i < n; i++)\n            sum += i;\n   \
    \     return sum;", "        long sum = 0;\n        long temp = n;\n        while\
    \ (temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n     \
    \   }\n        return sum;", "        long sum = 0;\n        for (long i = 1;\
    \ i <= n; i++)\n            sum += i;\n        return sum;", "        long sum\
    \ = 0;\n        for (int i = 1; i <= n; i++)\n            sum += i;\n        return\
    \ sum;", '        return sum_to_n(n, 1);', "        if (n == 0)\n            return\
    \ 1L;\n        if (n < 0)\n            return -1L;\n        long[] numbers = new\
    \ long[n];\n        numbers[0] = 1;\n        if (n == 1)\n            return numbers[0];\n\
    \        for (int i = 1; i < n; i++)\n            numbers[i] = numbers[i - 1]\
    \ + i;\n        return numbers[n];", '        return Enumerable.Range(1, n).Sum();',
  "        long sum = 0;\n        while (n > 0) {\n            sum += n;\n       \
    \     n /= 2;\n        }\n        return sum;", "        long result = 1;\n  \
    \      while (n > 1) {\n            result += n /= 2;\n        }\n        return\
    \ result;", "        long ans = 0;\n        long x = 1;\n        for (; ; ) {\n\
    \            ans += x;\n            x <<= 1;\n            if (x == n) break;\n\
    \        }\n        return ans;", "        long sum = 0;\n        while (n > 0)\
    \ {\n            sum += n % 10;\n            n /= 10;\n        }\n        return\
    \ sum;", "        long result = 0;\n        for (long i = 1; i < n; i++) {\n \
    \           result += i;\n        }\n        return result;", "        long total\
    \ = 0;\n        long m = n / 2;\n        while (m != 0) {\n            total +=\
    \ m;\n            m -= m / 10;\n        }\n        return total + n;", "     \
    \   long res = 0;\n        long total;\n        long cur;\n        while (n >\
    \ 1) {\n            cur = (long) (n / 2);\n            total += cur;\n       \
    \     n -= cur;\n        }\n        total += 1;\n        if (n == 0) {\n     \
    \       return total;\n        }\n        if (n == 1) {\n            return 1;\n\
    \        }\n        while ((n > 0) && (total % 2 == 0)) {\n            total /=\
    \ 2;\n            n -= 1;\n        }\n        return total;", "        if (n<=1L)\
    \ return 1L;\n        long sum=0L;\n        for(long i=2L; i<=n; i++) {\n    \
    \        sum = sum + i;\n        }\n        return sum;", '        return Enumerable.Range(1,
    n).Sum();', "        if (n < 10) return 1;\n        return n * SumToN(n - 1);",
  "        long sum = 0;\n        double fraction = 1.0 / (double)n;\n        for\
    \ (long i = 1; i <= n; i++) {\n            sum += (long)(fraction * (i + 1));\n\
    \        }\n        return sum;", "        if (n == 0) {\n            return 1;\n\
    \        }\n        long i = 1;\n        long ret = 0;\n        while (true) {\n\
    \            ret = ret + i;\n            i = i + 1;\n            if (i > n) {\n\
    \                i = i - n;\n                break;\n            }\n        }\n\
    \        return ret;", "        double sum = 0;\n        for (long i = 1; i <=\
    \ n; i++)\n            sum += i;\n        return Convert.ToInt64(sum);", '        return
    Enumerable.Range(1, n).Sum(i => i);', "        if (n <= 0) throw new ArgumentOutOfRangeException();\n\
    \        long sum = 0;\n        for (int i = 1; i <= n; ++i) {\n            sum\
    \ += i;\n        }\n        return sum;", "        if (n == 1L) {\n          \
    \  return 1L;\n        } else {\n            long sum = 0L;\n            while\
    \ (n > 0L) {\n                sum += n--;\n            }\n            return sum;\n\
    \        }", "        if (n == 1)\n            return 1L;\n        return n +\
    \ SumToN(n - 1);", "        long s = 0;\n        for (long i = 1; i <= n; i++)\n\
    \            s = s + i;\n        return s;", "        if (n == 0)\n          \
    \  return 0;\n        if (n == 1)\n            return 1;\n        return n + SumToN(n\
    \ - 1);", "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n  \
    \          sum += i;\n        }\n        return sum;", "        long sum = 0;\n\
    \        for (long i = 1; i <= n; i++) {\n            sum += i;\n        }\n \
    \       return sum;", "        Debug.Assert(n >= 1);\n        long sum = 0;\n\
    \        while (n-- != 0) {\n            sum += n;\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n   \
    \         sum += i;\n        }\n        return sum;", "        using (var rng\
    \ = new RNGCryptoServiceProvider())\n            return Enumerable.Range(1, n).Sum(x\
    \ => rng.Next());", "        var sum = 0;\n        while(true) {\n           \
    \ sum += n;\n            n /= 10;\n            if (n == 0)\n                break;\n\
    \        }\n        return sum;", "        // Write your logic here\n        var\
    \ result = 1L;\n        long maxSum = n;\n        while (maxSum > 0) {\n     \
    \       if (n % 2 == 0) {\n                result += maxSum;\n            }\n\
    \            maxSum -= n % 2 == 0 ? maxSum / 2 : maxSum * 3 / 2;\n           \
    \ n /= 2;\n        }\n        return result;", "        Debug.Assert(n > 0);\n\
    \        var sum = Enumerable.Range(1, n)\n            .Sum(x => x);\n       \
    \ return sum;", "        var sum = Enumerable.Range(1, n).Sum();\n        return\
    \ sum;", "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n   \
    \         sum += i;\n        }\n        return sum;", "        var result = 1;\n\
    \        while (true) {\n            result += n % 2 == 0 ? 1 : 2;\n         \
    \   n = n / 2;\n        }", "        long sum = 0;\n        // We need to keep\
    \ track of the last number we summed.\n        // If we're the final number then\
    \ we need to add 1.\n        // We do this by having the function remember the\
    \ last\n        // number we summed and add 1 to it if the current number\n  \
    \      // is not the final number we summed.\n        long last_number = n;\n\n\
    \        // We use the last_number variable for the sum.\n        // last_number\
    \ starts out as n and we add 1 to it as we sum.\n        while (n > 0) {\n   \
    \         sum += last_number;\n            last_number += 1;\n            n -=\
    \ 1;\n        }\n\n        // We want to return the sum of the numbers 1 to n.\n\
    \        return sum;", "        long sum = 0;\n        while (n > 0) {\n     \
    \       sum += n--;\n        }\n        return sum;", "        long sum = n;\n\
    \        for (long i = 2; i < n; i++) {\n            sum *= i;\n        }\n  \
    \      return sum;", "        if (n < 1)\n            return 0;\n        if (n\
    \ == 1)\n            return 1;\n        long sum = 0;\n        for (long i = 1;\
    \ i <= n; i++)\n            sum += i;\n        return sum;", "        Debug.Assert(n\
    \ > 0);\n        Debug.Assert(n < 1000);\n        long res = 0;\n        for(int\
    \ i = 1; i < n; i++) {\n            res += i;\n        }\n        return res;",
  "        // We want to use n / n to get a number, but we need to\n        // use\
    \ n * (n + 1) to get a remainder.\n        // We use a trick where we can get\
    \ the same result by\n        // taking n % n, and multiplying that by n + 1 without\n\
    \        // a remainder.\n        long remainder = n % n;\n        long result\
    \ = n;\n        // Do the loop until we get to the remainder of the division.\n\
    \        do {\n            result += n;\n            remainder = n % n;\n    \
    \    } while (remainder != 0);\n        return result;", "        long s = 1;\n\
    \        long d = n - 1;\n        long t = n - 1;\n        while (n > 1) {\n \
    \           d = d / 10;\n            s *= d;\n            t++;\n            n--;\n\
    \        }\n        return s;", "        BigInteger sum = new BigInteger(0);\n\
    \        List<BigInteger> numbers = new List<BigInteger>();\n        for (int\
    \ i = 1; i <= n; i++) {\n            numbers.Add(new BigInteger(i.ToString()));\n\
    \        }\n        for (int i = 0; i < numbers.Count; i++) {\n            sum\
    \ += numbers[i];\n        }\n        return sum.ToString();", "        long total\
    \ = 0;\n        long counter = 1;\n\n        while (n > 0) {\n            total\
    \ += counter;\n            counter += 1;\n            n -= 1;\n        }\n\n \
    \       return total;", "        long sum = 0;\n        for (long i = n; i-- >\
    \ 0;) sum += i;\n        return sum;", "        long result = 1;\n        while\
    \ (n > 0) {\n            result *= n;\n            n--;\n        }\n        return\
    \ result;", "        long sum = 0;\n        for (long i = 1; i <= n; i++)\n  \
    \          sum += i;\n        return sum;", "        if (n == 0) {\n         \
    \   return 0;\n        }\n        return n * (n - 1) / 2;", "        var sum =\
    \ new BigInteger();\n        for (int i = 1; i < (long)n; i++) {\n           \
    \ sum += i;\n        }\n        return sum;", "        long sum = 0;\n       \
    \ for (long i = 1; i <= n; i++)\n            sum += i;\n        return sum;",
  "        Debug.Assert(n >= 1);\n        long sum = 0;\n        for (long i = 1;\
    \ i < n; i++)\n            sum += i;\n        return sum;", "        ulong sum\
    \ = 1;\n        for (long i = 1; i >= n; i--) {\n            sum = sum * i;\n\
    \        }\n        return (sum);", "        if (n == 0)\n            return 1L;\n\
    \        var a = SumToN(n - 1);\n        return (n * a) + n;", "        double\
    \ x = 1.0 + n;\n        double sum = 0;\n        while (x > 0) {\n           \
    \ sum += (int)Math.Floor(x);\n            x -= (int)Math.Floor(x);\n        }\n\
    \        return sum;", "        var d = new Diagnostics.Stopwatch();\n       \
    \ d.Start();\n        var x = 0;\n        for (int i = 0; i < 1000; i++) {\n \
    \           x += i;\n        }\n        Console.WriteLine(d);\n        d.Stop();\n\
    \        Console.WriteLine(\"SumToN:{0}\", x);\n        return x;", "        long\
    \ sum = 0;\n        while (n > 0) {\n            sum += n / 10;\n            n\
    \ = n % 10;\n        }\n        return sum;", "        ulong i = (ulong)n;\n \
    \       ulong sum = (ulong)0;\n        while (i != 0) {\n            sum += i;\n\
    \            i /= 10;\n        }\n        return sum;", "        long sum = 0;\n\
    \        for(long i = 1; i <= n; ++i)\n            sum += i;\n        return sum;",
  "        long sum = 0;\n        long remainder = 1;\n        long limit = (long)\
    \ n;\n        for (int i = 1; i <= limit; i++) {\n            sum += (long)remainder;\n\
    \            remainder = sum % n;\n        }\n        return sum;", "        BigInteger\
    \ sum = BigInteger.Zero;\n        Debug.Assert(n > 0);\n        for (int i = 1;\
    \ i <= n; i++) {\n            sum += BigInteger.ValueOf(i);\n        }\n     \
    \   return sum.ToLong();", "        long sum = 0;\n        for (long i = 1; i\
    \ <= n; i++) {\n            sum += i;\n        }\n        return sum;", '        return
    Enumerable.Range(1, n).Sum(x => (long)x * x);', "        long sum = 0;\n     \
    \   for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n       \
    \ return sum;", "        if (n == 1L) return 1L;\n        long total = 0;\n  \
    \      for (long i = 1; i < n; ++i) {\n            total += i;\n        }\n  \
    \      return total;", "        var sum = new BigInteger();\n        for (var\
    \ i = 1; i <= n; i++) {\n            sum.Add(i);\n        }\n        return sum.ToString();",
  "        if (n == 0) { return 0; }\n        long sum = 0;\n        while (n > 0)\
    \ {\n            sum += n;\n            n = n / 10;\n        }\n        return\
    \ sum;", '        return Enumerable.Range(1, n).Sum();', "        long ret = 0;\n\
    \        for (int i = 1; i <= n; i++) {\n            ret += i;\n        }\n  \
    \      return ret;", "        // Your code here\n        int num = (int) n;\n\
    \        int sum = 0;\n        int count = 0;\n        for(int i = 1;i < num;i++)\
    \ {\n            if (i % 3 == 0) {\n                sum += i;\n            }\n\
    \            if (i % 5 == 0) {\n                sum += i;\n            }\n   \
    \         count++;\n        }\n        if (count == 6) {\n            sum += num;\n\
    \        }\n        sum += num;\n        return sum;", "        Debug.Assert(n\
    \ >= 1);\n        Debug.Assert(n <= 100);\n\n        // Sum from 1 to n\n    \
    \    long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum +=\
    \ i;\n        }\n\n        // Sum from 1 to n+1 using binary search\n        long\
    \ sum1 = SumToNBinarySearch(n);\n\n        // Sum from 1 to n using binary search\n\
    \        long sum2 = SumToNBinarySearch(n + 1);\n\n        // Sum from 1 to n+1\
    \ using binary search\n        long sum3 = SumToNBinarySearch(n + 1);\n\n    \
    \    // Sum from 1 to n using binary search\n        long sum4 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum5 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum6 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum7 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum8 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum9 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum10 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum11 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum12 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum13 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum14 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum15 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum16 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum17 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum18 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum19 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum20 = SumToNBinarySearch(n);\n\
    \n        // Sum from 1 to n using binary search\n        long sum21 = ", "  \
    \      // The first step of algorithm is to calculate the prime factorization\
    \ of n.\n        bool isPrime;\n        long a = 2, b = n;\n        List<long>\
    \ p = new List<long>();\n        while (a <= b) {\n            if (b >= a && (b\
    \ = a + (b % a)) != a) \n                isPrime = false;\n            else {\n\
    \                isPrime = true;\n                for (int i = 2; i * i <= b;\
    \ i++)\n                    if (b > a && (b % i == 0)) {\n                   \
    \     isPrime = false;\n                        break;\n                    }\n\
    \                if (isPrime) p.Add(a);\n                a = b + 1;\n        \
    \    }\n        }\n        // The second step of algorithm is to calculate the\
    \ GCD of prime factors.\n        long res = 1;\n        foreach (long i in p)\
    \ {\n            res = (res * i) / GCD(i);\n        }\n        return res;", " \
    \       long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n \
    \           n /= 10;\n        }\n        return sum;", "        long sum = 1;\n\
    \        long limit = n;\n        do {\n            sum += limit;\n          \
    \  limit--;\n        } while (limit > 0);\n        return sum;", "        ulong\
    \ sum = 0;\n        while (n-- > 0) {\n            sum += 1;\n        }\n    \
    \    return sum;", "        long sum = 0;\n        for (long i = 1; i <= n; ++i)\
    \ {\n            sum += i;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        long max = (long) Math.Floor(n);\n        for (long i = 1; i <=\
    \ max; i++) {\n            sum += i;\n        }\n        return sum;", "     \
    \   Debug.Assert(n >= 1);\n        long result = 1;\n        while (n > 1) {\n\
    \            result += (n % 2 == 0) ? result : result * 3;\n            n = n\
    \ / 2;\n        }\n        return result;", "        BigInteger sum = new BigInteger(1,\
    \ 10);\n        for (long i = 1; i <= n; i++) {\n            sum = sum.Add(BigInteger.ValueOf(i));\n\
    \        }\n        return sum.ToLong();", "        long sum = 0;\n        while\
    \ (n > 0) {\n            sum = sum + n;\n            n = n - 1;\n        }\n \
    \       return sum;", '        return Enumerable.Range(1, n).Sum();', "      \
    \  if (n == 0 || n == 1)\n            return n;\n        return n + SumToN(n -\
    \ 1);", "        if (n == 0)\n            return 0;\n        if (n == 1L)\n  \
    \          return 1;\n        long x = SumToN(n - 1L);\n        long y = x;\n\
    \        for (long i = 3; i <= n; i *= 3L)\n            y += x / i;\n        return\
    \ x * y;", '        return Enumerable.Range(1, n).Sum();', "        long res =\
    \ 0;\n        long limit = (long)(n - 1);\n        for (long i = 1; i < limit;\
    \ i++) {\n            res += i;\n        }\n        Console.WriteLine(\"{0}L =\
    \ {1}\", n, res);\n        return res;", "        var t = Enumerable.Range(1,\
    \ n).Sum();\n        return (t + t % n) % n;", "        long sum = 1;\n      \
    \  for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return\
    \ sum;", "        var x = Enumerable.Range(0, n).Select(i => (long)i);\n     \
    \   var z = new HashSet<long>();\n        z.Add(x);\n        var sum = x.Aggregate((x,\
    \ y) => y + x);\n        if (z.Contains(sum))\n            return sum;\n     \
    \   z.Add(sum);\n        return sum;", "        long result = 0;\n        long\
    \ current = 1;\n        for(long i = 1; i < n; i++) {\n            result += current;\n\
    \            current *= 2;\n        }\n        return result;", "        long\
    \ sum = 0;\n        for (long i = 1; i <=n; i++){\n            sum = sum + i;\n\
    \        }\n        return sum;", "        using (BigInteger n0 = BigInteger.Zero)\
    \ {\n            using (BigInteger n1 = BigInteger.One) {\n                using\
    \ (BigInteger n2 = BigInteger.Two) {\n                    using (BigInteger n3\
    \ = BigInteger.Five) {\n                        using (BigInteger n4 = BigInteger.Ten)\
    \ {\n                            using (BigInteger n5 = BigInteger.Eight) {\n\
    \                                using (BigInteger n6 = BigInteger.Twelve) {\n\
    \                                    using (BigInteger n7 = BigInteger.ThirtyFive)\
    \ {\n                                        using (BigInteger n8 = BigInteger.SixtyFive)\
    \ {\n                                            using (BigInteger n9 = BigInteger.Hundred)\
    \ {\n                                                using (BigInteger n10 = BigInteger.Fifty)\
    \ {\n                                                    using (BigInteger n11\
    \ = BigInteger.Eighty) {\n                                                   \
    \     using (BigInteger n12 = BigInteger.Twenty) {\n                         \
    \                                   using (BigInteger n13 = BigInteger.Thirty)\
    \ {\n                                                                using (BigInteger\
    \ n14 = BigInteger.Fourty) {\n                                               \
    \                     using (BigInteger n15 = BigInteger.Fifty) {\n          \
    \                                                              using (BigInteger\
    \ n16 = BigInteger.Sixty) {\n                                                \
    \                            using (BigInteger n17 = BigInteger.Seventy) {\n \
    \                                                                            \
    \   using (BigInteger n18 = BigInteger.Eighty) {\n                           \
    \                                                         using (BigInteger n19\
    \ = BigInteger.Ninety) {\n                                                   \
    \                                     using (BigInteger n20 = BigInteger.Twenty)\
    \ {\n                                                                        \
    \                    using (BigInteger n21 = BigInteger.Thirty) {\n          \
    \                                                                            \
    \          using (BigInteger n22 = BigInteger.Fourty) {\n                    \
    \                                                                            \
    \    using (BigInteger n23 = BigInteger.Fifty) {\n                           \
    \                                                                            \
    \ using (BigInteger n24 = BigInteger.Sixty) {\n                              \
    \                                                                            \
    \  using (BigInteger n25 = BigInteger.Seventy) {\n                           \
    \                                                                            \
    \         using (BigInteger n26 = BigInteger.Eighty) {\n                     \
    \                                                                            \
    \                   using (BigInteger n27 = BigInteger.Ninety) {\n           \
    \                                                                            \
    \                                 using (BigInteger n28 = BigInteger.Twenty) {\n\
    \                                                                            \
    \                                                using (BigInteger n29 = BigInteger.Thirty)\
    \ {\n                                                                        \
    \                                                        using (BigInteger n30\
    \ = BigInteger.Fourty) {\n                                                   \
    \                                                                            \
    \     using (BigInteger n31 = BigInteger.Fifty) {\n                          \
    \                                                                            \
    \                                  using (BigInteger n32 = BigInteger.Sixty) {\n\
    \                                                                            \
    \                                                                using (BigInteger\
    \ n33 = BigInteger.Seventy) {\n                                              \
    \                                                                            \
    \                      using (BigInteger n34 = BigInteger.E", "        long sum\
    \ = n;\n        for (int i = 1; i <= n; i++) {\n            sum -= i;\n      \
    \  }\n        return sum;", "        var sum = 0;\n        for (long i = 1; i\
    \ <= n; i++)\n            sum += i;\n        return sum;", "        long result\
    \ = 1;\n        for (long i = 2; i <= n; i++) {\n            result *= i;\n  \
    \          result %= n;\n        }\n        return result;", "        long s =\
    \ 1;\n        for (long i = 1; i <n; i++) {\n            s += i;\n        }\n\
    \        return s;", '        return n < 0L ? 0L : n > 0L ? SumToN(n + 1) : (long)n;',
  "        if (n == 0) {\n            return 1;\n        }\n        long result =\
    \ 1;\n        for (long i = 1; i < n; i++) {\n            result *= i;\n     \
    \   }\n        return result;", "        Debug.Assert(n >= 1);\n        long product\
    \ = 1;\n        for (long i = 1; i <= n; i++)\n            product *= i;\n   \
    \     return product;", "        BigInteger sum = BigInteger.Zero;\n        for(int\
    \ i = 1; i <= n; i++) {\n            sum += BigInteger.ValueOf(i);\n        }\n\
    \        return sum.ToLong();", "        if (n<1)\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n\n        long sum = 0;\n        while (n > 0) {\n            sum += n--;\n\
    \        }\n        return sum;", "        Debug.WriteLine(\"SumToN(\" + n + \"\
    )\");\n        long sum = 1;\n        for (long i = 1; i <= n; i++) {\n      \
    \      sum += i;\n        }\n        Debug.WriteLine(\"Sum(\" + n + \") \" + sum);\n\
    \        return sum;", "        // Write your solution here.\n        long[] primes\
    \ = new long[100];\n        long[] sum = new long[100];\n        int sumCounter\
    \ = 0;\n        int num = 0;\n        long sumPPrimes = 0;\n        long sumNPrimes\
    \ = 0;\n        long sumN = 0;\n        long sumNPrimes = 0;\n        for (int\
    \ i = 0; i < 100; i++) {\n            primes[i] = 1;\n            sum[i] = 1;\n\
    \            sumPPrimes = primes[i];\n            sumNPrimes = primes[i];\n  \
    \          sumNPrimes += primes[i];\n            sumN += primes[i];\n        }\n\
    \        for (int i = 1; i < n; i++) {\n            for (int k = 0; k < 100; k++)\
    \ {\n                primes[k] = 1;\n            }\n            for (int j = 0;\
    \ j < primes.Length; j++) {\n                primes[j] += i;\n            }\n\
    \            for (int j = 0; j < primes.Length; j++) {\n                sum[j]\
    \ += i;\n            }\n            for (int j = 0; j < primes.Length; j++) {\n\
    \                if (sum[j] == n) {\n                    num++;\n            \
    \    }\n            }\n        }\n        if (num > 0) {\n            Console.WriteLine(\"\
    SumToN(\" + n + \") = \" + sumNPrimes);\n        }\n        return sumNPrimes;",
  "        long sum = 0;\n        for (long i = 1; i <= n; ++i)\n            sum +=\
    \ i;\n        return sum;", "        long result = 0;\n        for (long i = 1;\
    \ i < n; i++) {\n            result += i;\n        }\n        return result;",
  "        // Write your answer here\n        if (n == 0) return 1;\n        return\
    \ n + SumToN(n - 1);", "        // sum and subsum are temporary variables used\
    \ to compute the sum and subsum\n        long sum = 0, subsum = 0;\n        for\
    \ (int i = 1; i <= n; i++) {\n            subsum += i;\n            sum += subsum;\n\
    \        }\n        return sum;"]
stop_tokens:
- "\n    }\n"
