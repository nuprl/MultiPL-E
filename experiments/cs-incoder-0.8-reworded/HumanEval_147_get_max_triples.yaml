name: HumanEval_147_get_max_triples
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a positive integer n. You have to create an integer\
  \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
  \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a\
  \ where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
  \ :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a\
  \ = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static\
  \ long GetMaxTriples(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))\
  \ == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))\
  \ == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
completions: ["        long result = 1;\n        for (int i = 1; i <= n; i++) {\n\
    \            for (int j = i + 1; j <= n; j++) {\n                for (int k =\
    \ j + 1; k <= n; k++) {\n                    long sum = i * i * i + j * j + k\
    \ * k;\n                    if (sum % 3 == 0) {\n                        result\
    \ += (sum - 3) % 3;\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        List<long> arr = new List<long>()\
    \ { 1 };\n        long max = 1;\n        long maxVal = 1;\n        for (int i\
    \ = 1; i < n; i++) {\n            long add = i * i - i + 1;\n            if (add\
    \ > maxVal) {\n                max = add;\n                maxVal = add;\n   \
    \         }\n            arr.Add(add);\n        }\n        long res = 0;\n   \
    \     long[] t = new long[arr.Count];\n        Array.Copy(arr.ToArray(), t, arr.Count);\n\
    \        int x = 0;\n        foreach (long i in t) //counting number of triples\n\
    \        {\n            x++;\n        }\n        for (x = 0; x < arr.Count; x++)\
    \ {\n            for (x = 0; x < arr.Count; x++) {\n                for (int x\
    \ = 0; x < arr.Count; x++) {\n                    long sum = arr[x] * arr[x] *\
    \ arr[x];\n                    if (sum == maxVal) {\n                        res\
    \ = 1;\n                        break;\n                    }\n              \
    \  }\n            }\n        }\n        return res;", "        if (n == 0)\n \
    \           return 0;\n        var a = Enumerable.Range(0, n).Select(i => i *\
    \ i - i + 1).ToArray();\n        int n = a.Length;\n        long triples = 0;\n\
    \        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n;\
    \ ++j) {\n                for (int k = j + 1; k < n; ++k) {\n                \
    \    long sum = a[i] + a[j] + a[k];\n                    if (sum % 3 == 0)\n \
    \                       ++triples;\n                }\n            }\n       \
    \ }\n        return triples;", "        var a = new List<long>();\n        for\
    \ (int i = 1; i < n; i++) {\n            a.Add(i * i - i + 1);\n        }\n  \
    \      var result = new long[a.Count];\n        for (int i = 0; i < a.Count -\
    \ 1; i++) {\n            var j = i + 1;\n            var k = i + 2;\n        \
    \    while (j < a.Count && k < a[j]) {\n                result[i] = Math.Min(result[i],\
    \ result[j]);\n                result[j] = Math.Min(result[j], result[k]);\n \
    \               result[k] = Math.Min(result[k], result[i]);\n                j++;\n\
    \                k++;\n            }\n        }\n        return result.Max();",
  "        var result = new List<int>();\n        var i = 0;\n        while(i != n)\
    \ {\n            if(i++ == 0)\n                result.Add(1);\n            else\n\
    \                result.Add(a[i] = (i * i) - i + 1);\n        }\n        return\
    \ result.FindIndex(a => ((int)a) % 3 == 0) < 0 ? 0 : result.FindIndex(a => ((int)a)\
    \ % 3 == 0).ToString().ToLong();", "        // Create a list to store each possible\
    \ value of each index\n        int[] a = new int[n];\n\n        // Initialize\
    \ every value of a to 0\n        Array.Sort(a, (x, y) => x < y? -1 : 1);\n\n \
    \       // Iterate from 1 to n\n        for (int i = 1; i < n; i++) {\n      \
    \      // For each index, take a[i], and add that value to every possible combination\
    \ of a[0..i-1]\n            for (int j = 0; j < i; j++) {\n                for\
    \ (int k = 0; k < i; k++) {\n                    a[i] += a[j] * a[k];\n      \
    \          }\n            }\n        }\n\n        // Count the number of triples\
    \ that equal 0\n        return a.Where((v, i, a) => v == 0L).Count();", "    \
    \    // Write your code here\n        List<long> a = new List<long>(n);\n    \
    \    for (int i = 1; i <= n; i++) {\n            for (int j = i; j <= n; j++)\
    \ {\n                for (int k = i; k <= n; k++) {\n                    if (i\
    \ != j && j != k) {\n                        if((i+1)*(j+1)+(k+1)*(k)==n*3) {\n\
    \                            a.Add(i*i-i+1);\n                        }\n    \
    \                }\n                }\n            }\n        }\n        long\
    \ count = a.Count(item => (item*item-item+item)==n);\n        return count;",
  "        long a = new long[n];\n        for (int i = 0; i<n; i++) {\n          \
    \  a[i] = i * i - i + 1;\n        }\n        var q = Enumerable.Range(0, n).Where(i\
    \ => i<=n).SelectMany(i=> Enumerable.Range(0, n).Where(j => j<=n).SelectMany(j=>\
    \ Enumerable.Range(0, n).Where(k=>k<=n).Select(k=>a[i]+a[j]+a[k]==3 && i<j<k).Where(t\
    \ => t)).Where(t => t)).Count();\n        return q;", "        int[] a = new int[n];\n\
    \        // Initialize a[i] using formula\n        for (int i = 1; i < a.Length;\
    \ i++) {\n            a[i] = i * i - i + 1;\n        }\n        int nT = 3; //\
    \ Max number of triples\n        long sum = 0;\n        // Compute all triples\n\
    \        for (int i = 0; i < a.Length - 1; i++) {\n            for (int j = i\
    \ + 1; j < a.Length; j++) {\n                for (int k = j + 1; k < a.Length;\
    \ k++) {\n                    long aT = a[i] + a[j] + a[k];\n                \
    \    // Verify that aT is a multiple of 3\n                    if (aT % 3 == 0)\
    \ {\n                        nT--;\n                        sum += aT;\n     \
    \               }\n                }\n            }\n        }\n        // Return\
    \ number of triples <= nT\n        return sum;", "        long[] a = { 1, 2, 3,\
    \ 7, 13 };\n        long max = a[0];\n        long max = a[0];\n        for (int\
    \ i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n          \
    \      for (int k = 0; k < n; k++) {\n                    if (i == j && i == k\
    \ && j == k) {\n                        continue;\n                    }\n   \
    \                 long? sum = (long)(a[i] * a[j] * a[k]) + (long)a[i] * a[j] +\
    \ a[k];\n                    if (sum == max) {\n                        max =\
    \ sum;\n                        continue;\n                    }\n           \
    \         if (sum > max) {\n                        max = sum;\n             \
    \       }\n                }\n            }\n        }\n        return max;",
  "        long[] a = new long[n];\n        for (long i = 0; i < n; i++) {\n     \
    \       a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n          \
    \      for (int k = j; k < n; k++) {\n                    if (i + j + k > 2 &&\
    \ a[i + j] + a[j + k] + a[k + (n - i - 1)] == 3 && a[i + j] + a[j + k] + a[k +\
    \ i] == 3)\n                    {\n                        max++;\n          \
    \          }\n                }\n            }\n        }\n        return max;",
  "        long a = new long[n]; \n        a[0] = n; \n        for (int i = 1; i <\
    \ n; ++i) {\n            a[i] = a[i] + a[i] - i;\n        }\n        long count\
    \ = 0;\n        for (int i = 0; i < a.Length - 1; ++i) {\n            for (int\
    \ j = i + 1; j < a.Length; ++j) {\n                for (int k = j + 1; k < a.Length;\
    \ ++k) {\n                    if (a[k] + a[j] + a[i] == 3) {\n               \
    \         count += 1;\n                    }\n                }\n            }\n\
    \        }\n        return count;", "        long a = new long[n];\n        long\
    \ b = new long[n];\n\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n\n        for (int i = 0; i < n - 1; i++) {\n \
    \           for (int j = i + 1; j < n; j++) {\n                b[i] = a[j];\n\
    \                b[j] = a[i];\n                b[j] = a[j];\n            }\n\n\
    \            for (int j = 0; j < n; j++) {\n                b[i] = a[j];\n   \
    \             b[j] = a[i];\n                b[j] = a[j];\n                for\
    \ (int k = 0; k < n; k++) {\n                    b[i] = a[j];\n              \
    \      b[j] = a[i];\n                    b[j] = a[j];\n                }\n   \
    \         }\n\n        }\n\n        return b.Sum();", "        var res = new List<long>();\n\
    \        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <=\
    \ n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n            \
    \        if (Math.Abs(i * i - j * j - k) % 3 == 0) {\n                       \
    \ res.Add(i * i + j * j + k);\n                    }\n                }\n    \
    \        }\n        }\n        return res.Count;", "        long totalTriples\
    \ = 0;\n        int k = 0;\n        for (int i = 1; i <= n; i++) {\n         \
    \   int j = 1;\n            while (j < i) {\n                j++;\n          \
    \      if (i == j) continue;\n                int k = j;\n                while\
    \ ((k + j) < i && (k + j) != j) {\n                    k++;\n                \
    \    if (k == i) continue;\n                    int m = i + k + 1;\n         \
    \           if (m == 3 * j) totalTriples++;\n                }\n            }\n\
    \        }\n        return totalTriples;", "        HashSet<long> hs = new HashSet<long>();\n\
    \        for (long i = 2; i <= n; i++) {\n            if (hs.Add(i * i - i + 1))\
    \ {\n                long count = 0;\n                for (int j = 1; j <= i;\
    \ j++) {\n                    if (hs.Add(i * j + i + 1)) {\n                 \
    \       long k = 0;\n                        while (k != j && k != i) {\n    \
    \                        k++;\n                        }\n                   \
    \     if (k == j) {\n                            count++;\n                  \
    \      }\n                    }\n                }\n                if (count\
    \ == 1) {\n                    return 1;\n                }\n            }\n \
    \       }\n        return 0;", "        long sum = 0;\n        for (int i = 1;\
    \ i <= n; i++) {\n            long a = i * i - i + 1;\n            long tripleSum\
    \ = 0;\n            for (int j = 1; j <= i; j++) {\n                long b = j\
    \ * j - j + 1;\n                long c = i * i + j;\n                tripleSum\
    \ = tripleSum + (a * b + c) % 3;\n            }\n            if (tripleSum ==\
    \ 0)\n                sum++;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        var a = new List<long>();\n        // add first triple from index\
    \ 0 to length-1\n        for (int i = 0; i < n; i++) {\n            a.Add(i);\n\
    \            sum += a[i];\n        }\n        // add rest of triple from index\
    \ 0 to length-2\n        for (int i = 0; i < n - 1; i++) {\n            a.Add(i\
    \ * i - i + 1);\n            sum += a[i];\n        }\n        return sum;", " \
    \       long max = 0;\n        int count = 0;\n        long[] a = new long[n];\n\
    \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n \
    \       }\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 0;\
    \ j < i; j++) {\n                for (int k = 0; k < j; k++) {\n             \
    \       //Console.WriteLine(\"a[{0}], a[{1}], a[{2}] = \", i, j, k);\n       \
    \             //Console.WriteLine(\"a[{0}] + a[{1}] + a[{2}] = \", a[i], a[j],\
    \ a[k]);\n                    //Console.WriteLine(\"a[{0}] + a[{1}] + a[{2}] =\
    \ \", a[i], a[j], a[k]);\n                    if (a[j] + a[k] < a[i]) {\n    \
    \                    //Console.WriteLine(\"a[{0}] + a[{1}] + a[{2}] < a[{3}] =\
    \ \", a[j], a[k], a[i], a[j], a[k]);\n                        count++;\n     \
    \                   //Console.WriteLine(\"Count {0}\", count);\n             \
    \       }\n                    if (a[j] + a[k] > a[i]) {\n                   \
    \     //Console.WriteLine(\"a[{0}] + a[{1}] + a[{2}] > a[{3}] = \", a[j], a[k],\
    \ a[i], a[j], a[k]);\n                        count++;\n                     \
    \   //Console.WriteLine(\"Count {0}\", count);\n                    }\n      \
    \              if (a[j] + a[k] == a[i]) {\n                        count++;\n\
    \                        //Console.WriteLine(\"Count {0}\", count);\n        \
    \            }\n                    if (a[j] + a[k] != a[i]) {\n             \
    \           count++;\n                        //Console.WriteLine(\"Count {0}\"\
    , count);\n                    }\n                }\n            }\n        }\n\
    \n        return count;", "        var a = new List<long>();\n        for (int\
    \ i = 1; i <= n; i++)\n            a.Add(i * i - i + 1);\n        return GetMaxTriples(n,\
    \ a);", "        long a = new long[(int)n];\n        for (int i = 1; i <= n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        Array.Sort(a);\n  \
    \      long result = 0;\n        for (int i = 1; i < n; i++) {\n            for\
    \ (int j = 1; j < n; j++) {\n                if (a[i] > a[j]) {\n            \
    \        result = Math.Min(result, a[i] - a[j] + 1);\n                }\n    \
    \        }\n        }\n        return result;", "        long sum = 0;\n     \
    \   List<long> a = new List<long>();\n        for(int i = 1; i <= n; i++){\n \
    \           sum += i;\n            a.Add(i*i - i + 1);\n        }\n        //\
    \ sort the list by ascending order\n        Array.Sort(a);\n        \n       \
    \ // traverse the sorted list\n        for(int i = 0; i < a.Count; i++){\n   \
    \         if(a[i] >= 3) // if the current value is greater than or equal to 3,\
    \ then add it to the sum\n                sum += a[i];\n        }\n        //\
    \ return the sum\n        return sum;", "        long[] a = new long[n];\n   \
    \     long m = 1;\n        long l = 0;\n        long s = 0;\n        for(int i\
    \ = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n            if(i % 2\
    \ == 0) {\n                m += 1;\n                if(a[i] % 3 == 0)\n      \
    \              s += 1;\n            } else {\n                l += 1;\n      \
    \          if(l % 3 == 0)\n                    s += 1;\n            }\n      \
    \  }\n        return (l+m+s);", "        if (n == 0) {\n            return 0;\n\
    \        }\n        long max = 1L;\n        long cur = n;\n        long sum =\
    \ 0L;\n        long[] a = new long[n];\n        for (int i = 1; i < n; i++) {\n\
    \            a[i - 1] = cur;\n            sum += cur;\n            cur = sum;\n\
    \        }\n        int maxIndex = 0;\n        long maxSum = a[maxIndex];\n  \
    \      int minIndex = 0;\n        long minSum = a[minIndex];\n        for (int\
    \ i = 0; i < n - 1; i++) {\n            long nextSum = sum + a[i];\n         \
    \   if (nextSum > maxSum) {\n                maxSum = nextSum;\n             \
    \   maxIndex = i;\n            }\n            if (nextSum < minSum) {\n      \
    \          minSum = nextSum;\n                minIndex = i;\n            }\n \
    \       }\n        if (maxSum == 1) {\n            return 0;\n        }\n    \
    \    long nextSum = sum + a[n - 1];\n        if (nextSum > maxSum) {\n       \
    \     maxSum = nextSum;\n            maxIndex = n - 1;\n        }\n        if\
    \ (nextSum < minSum) {\n            minSum = nextSum;\n            minIndex =\
    \ n - 1;\n        }\n        long curSum = a[n - 1];\n        for (int i = 1;\
    \ i < n; i++) {\n            if (a[i - 1] > maxSum) {\n                maxSum\
    \ = curSum;\n                maxIndex = i;\n            }\n            if (a[i\
    \ - 1] < minSum) {\n                minSum = curSum;\n                minIndex\
    \ = i;\n            }\n            curSum = a[i];\n        }\n        return maxIndex\
    \ + 1;", "        List<long> a = new List<long>();\n        List<long> result\
    \ = new List<long>();\n        for(int i = 1; i <= n; i++){\n            a.Add(i\
    \ * i - i + 1);\n        }\n        for(int i = 1; i <= n; i++){\n           \
    \ for(int j = i + 1; j <= n; j++){\n                long sum = 0;\n          \
    \      for(int k = 0; k <= i - j; k++){\n                    sum += a[k];\n  \
    \              }\n                if(sum % 3 == 0){\n                    result.Add(a[i]);\n\
    \                    result.Add(a[j]);\n                    result.Add(a[k]);\n\
    \                }\n            }\n        }\n        return (result.Count ==\
    \ 0)? -1 : result.Count;", "        var a = new List<long>();\n        var temp1\
    \ = new List<long>();\n        var temp2 = new List<long>();\n        // add all\
    \ positve integers to temp1\n        for (int i = 0; i < n; i++) {\n         \
    \   temp1.Add(i);\n        }\n        // find maximum of temp1\n        temp1.Sort();\n\
    \        var maximum = temp1.Last();\n        // add 1 to the maximum positve\
    \ integer in temp1\n        temp1.Remove(maximum);\n        temp1.Add(maximum\
    \ + 1);\n        // add all positve integers to temp2\n        for (int i = 0;\
    \ i < n; i++) {\n            temp2.Add(i);\n        }\n        // find minimum\
    \ of temp2\n        temp2.Sort();\n        var minimum = temp2.First();\n    \
    \    // add 1 to the minimum positve integer in temp2\n        temp2.Remove(minimum);\n\
    \        temp2.Add(minimum - 1);\n        for (int i = 0; i < n; i++) {\n    \
    \        if (temp1.Contains(i) && temp2.Contains(i)) {\n                a.Add(i);\n\
    \            }\n        }\n        if (n < a.Count && n > a.Count / 2) {\n   \
    \         long result = 0;\n            foreach (var i in a) {\n             \
    \   if (temp1.Contains(i)) {\n                    result += temp1.Contains(i)\
    \ ? temp1.Contains(i) : temp2.Contains(i) ? temp2.Contains(i) : 1;\n         \
    \       }\n                if (temp2.Contains(i)) {\n                    result\
    \ += temp2.Contains(i) ? temp2.Contains(i) : temp1.Contains(i) ? temp1.Contains(i)\
    \ : 1;\n                }\n            }\n            return result;\n       \
    \ }\n        return 0;", "        List<long> a = new List<long>();\n        long\
    \ x = 0;\n        long y = 0;\n        long z = 0;\n        long max = 0;\n  \
    \      for (int i = 0; i < n; i++) {\n            x = x * i - i + 1;\n       \
    \     y = y * i - i + 1;\n            z = z * i - i + 1;\n            if (x %\
    \ 3 == 0 && y % 3 == 0 && z % 3 == 0) {\n                a.Add(i);\n         \
    \       if (x > max) {\n                    max = x;\n                }\n    \
    \            if (y > max) {\n                    max = y;\n                }\n\
    \                if (z > max) {\n                    max = z;\n              \
    \  }\n            }\n        }\n        return a.Count;", "        long[] a =\
    \ { 1, 1, 1 };\n        long c = 1;\n        long result = 0;\n        for (long\
    \ i = 0; i < n; i++) {\n            long t = a[i] + a[j] + a[k];\n           \
    \ if (t % 3 == 0) {\n                result += 1;\n            }\n           \
    \ if (t < 3) {\n                a = c;\n                c += a[i];\n         \
    \       a[i] = 1;\n                c += a[j];\n                a[j] = 1;\n   \
    \             c += a[k];\n                a[k] = 1;\n            } else {\n  \
    \              c += 1;\n            }\n        }\n        return result;", " \
    \       long[] a = new long[n];\n        long sum = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            sum += a[i] + a[i] - i;\n            a[i] = a[i]\
    \ * a[i] - i;\n        }\n        long k = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (k == 0 || a[k] != a[i] + a[k]) {\n                k++;\n\
    \                a[k] = a[i];\n            }\n        }\n        return sum;",
  "        long maxTriplets = (n * n * n) / 3;\n        long count = 0;\n        for\
    \ (int i = 1; i <= n; i++) {\n            for (int j = i; j <= n; j++) {\n   \
    \             for (int k = i; k <= n; k++) {\n                    if (i == j &&\
    \ j == k && k > i) {\n                        continue;\n                    }\n\
    \                    if (i * i * i + j * j * j + k * k * k == maxTriplets) {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return count;", "        long n = Math.Abs(n);\n\
    \        List<long> a = new List<long>();\n        long s = 0;\n        long t\
    \ = 0;\n        int d = n;\n        while (d-- > 0)\n            s = s + 1;\n\
    \        a.Add((long)s);\n        d = n;\n        while (d-- > 0)\n          \
    \  t = t + 1;\n        a.Add((long)t);\n        long k = 0;\n        long sum\
    \ = 0;\n        long tSum = 0;\n        long eSum = 0;\n        long sumA = 0;\n\
    \        foreach (long i in a) {\n            sum = sum + i;\n        }\n    \
    \    sumA = sum;\n        k = 0;\n        for (int i = 0; i < a.Count; i++) {\n\
    \            k = k + 1;\n            tSum = 0;\n            for (int j = i + 1;\
    \ j < a.Count; j++) {\n                tSum = tSum + a[j];\n            }\n  \
    \          sum = sum - a[i];\n            eSum = eSum + tSum;\n            sumA\
    \ = sumA + a[i];\n        }\n        int m = (int)Math.Floor(sumA / 3);\n    \
    \    long minA = 0;\n        for (int i = 1; i < a.Count; i++) {\n           \
    \ long s = a[i];\n            minA = minA + (int)Math.Floor(s);\n        }\n \
    \       long maxA = 0;\n        for (int i = 1; i < a.Count; i++) {\n        \
    \    long s = a[i];\n            maxA = maxA + (int)Math.Floor(s * 3);\n     \
    \   }\n        long minTriples = 0;\n        for (int i = 0; i < a.Count; i++)\
    \ {\n            if (a[i] < 3)\n                continue;\n            if (a[i]\
    \ <= (sumA - minA * 3 - k * 3)) {\n                continue;\n            }\n\
    \            long s = a[i];\n            long sSum = sum - a[i];\n           \
    \ long t = sumA + a[i];\n            long tSum = sumA + a[i];\n            long\
    \ minA = sumA + a[i];\n            for (int j = i + 1; j < a.Count; j++) {\n \
    \               long e = a[j];\n                long sumA = sumA + a[j];\n   \
    \             long sumB = sumA + e;\n                long minB = sumA - e;\n \
    \               if (t >= sumB) {\n                    t = sumB;\n            \
    \        k = j;\n                }\n                else {\n                 \
    \   sumA = sumB;\n                }\n            }\n            long t = sumA\
    \ + a[i];\n            if (t > minTriples) {\n                minTriples = t;\n\
    \            }\n        }\n        long maxTriples = 0;\n        for (int i =\
    \ 0; i < a.Count; i++) {\n            if (a[i] <= minA)\n                continue;\n\
    \            if (a[i] <= maxA) {\n                continue;\n            }\n \
    \           long s = a[i];\n            long sSum = sum - a[i];", "        List<long>\
    \ a = new List<long>();\n        long max = 0;\n        for(long i = 1L; i <=\
    \ n; i++) {\n            for(long j = i; j < n; j += i) {\n                for(long\
    \ k = j; k < n; k += j) {\n                    if(IsMod3(a[i] + a[j] + a[k]))\
    \ {\n                        long sum = i + j + k;\n                        if(sum\
    \ > max) {\n                            max = sum;\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long result = 0;\n        List<long> a = new List<long>();\n\
    \        long temp = 0;\n        for(int i = 0; i <= n; i++){\n            temp\
    \ = i * i - i + 1;\n            a.Add(temp);\n        }\n        for(int i = 0;\
    \ i < a.Count; i++){\n            for(int j = 0; j < a.Count; j++){\n        \
    \        if(j > i){\n                    for(int k = 0; k < a.Count; k++){\n \
    \                       if(((a[i] + a[j] + a[k]) % 3) == 0){\n               \
    \             result++;\n                        }\n                    }\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ long result = 0;\n        long[] a = new long[n];\n        a[0] = 1;\n     \
    \   for (int i = 1; i < n; ++i) {\n            a[i] = a[i-1] * 2 - 1 + 1;\n  \
    \      }\n        for (int i = 1; i < n; ++i) {\n            int j = i;\n    \
    \        while (j < n) {\n                j += i;\n            }\n           \
    \ int k = i;\n            while (k > 0) {\n                k--;\n            }\n\
    \            if (a[i] < 3 && a[j] < 3 && a[k] < 3) {\n                result++;\n\
    \            }\n        }\n        return result;", "        long a[] = new long[n];\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n            sum += a[i];\n        }\n        Array.Sort(a);\n\
    \        long temp = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    temp = ((a[i] * a[j] * a[k]) % 3) - sum;\n          \
    \          if (temp == 0) temp++;\n                    if (temp == 0) temp++;\n\
    \                    if (temp == 0) temp++;\n                    Debug.WriteLine(\"\
    ({0}, {1}, {2})\", a[i], a[j], a[k]);\n                    sum += temp;\n    \
    \            }\n            }\n        }\n        return sum;", "        long\
    \ sum = (n*(n+1))/2;\n        List<long> a = new List<long>();\n        for (int\
    \ i = 1; i < n; i++)\n        {\n            for (int j = 1; j < n; j++)\n   \
    \         {\n                for (int k = 1; k < n; k++)\n                {\n\
    \                    if ((i*i + j*j + k*k) == sum)\n                    {\n  \
    \                      a.Add(i*j + i*k + k*j);\n                    }\n      \
    \          }\n            }\n        }\n        if (Math.Sqrt(a.Count()) < 1)\n\
    \        {\n            return 1L;\n        }\n        else\n        {\n     \
    \       long max = 0;\n            int index = 0;\n            for (int i = 1;\
    \ i < a.Count(); i++)\n            {\n                for (int j = 1; j < a.Count();\
    \ j++)\n                {\n                    for (int k = 1; k < a.Count();\
    \ k++)\n                    {\n                        if (a[i] < a[j] && a[j]\
    \ < a[k])\n                        {\n                            max = Math.Max(max,\
    \ a[index]);\n                        }\n                    }\n             \
    \   }\n            }\n            return max;\n        }", "        long[] a =\
    \ new long[n];\n        long triple = 0;\n        long tripleMax = 0;\n      \
    \  long maxVal = 0;\n\n        for (int i = 1; i <= n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n            triple += a[i];\n\n            if (triple > tripleMax)\
    \ {\n                tripleMax = triple;\n                maxVal = i;\n      \
    \      }\n        }\n\n        return maxVal;", "        long maxVal = n;\n  \
    \      int[] a = new int[n];\n        Array.Sort(a);\n        long cnt = 0;\n\
    \        for (int i = 0; i < n; ++i) {\n            int j = (i + 1) % n;\n   \
    \         int k = (i + 2) % n;\n            if ((i * i * i) + a[j] + a[k] == 0)\
    \ {\n                cnt++;\n            }\n        }\n        return maxVal *\
    \ maxVal * maxVal - cnt * cnt * cnt;", "        var a = new List<long>();\n  \
    \      var c = 0;\n        long a1 = 1;\n        long a2 = 1;\n        long a3\
    \ = 1;\n        long a21 = 1;\n        long a31 = 1;\n        long a23 = 1;\n\
    \        long a32 = 1;\n        long a31 = 1;\n        long a32 = 1;\n       \
    \ long a33 = 1;\n        long a32 = 1;\n        long a33 = 1;\n        while (n\
    \ > 0) {\n            c += 2;\n            a += a1;\n            a1 = a2 + a3;\n\
    \            a2 = a2 + a3;\n            a3 = a3 + a3;\n            n -= 2;\n \
    \       }\n        while (a.Count > 0) {\n            var last = a.Last();\n \
    \           if (last % 3 == 0) {\n                c += 1;\n            }\n   \
    \         a -= last;\n            while (a % 3 == 0) {\n                c += 1;\n\
    \                a /= 3;\n            }\n        }\n        return c;", "    \
    \    long a = Enumerable.Range(1, n).Select(i => (i * i - i + 1)).ToArray();\n\
    \        Debug.Assert(a.Length == n);\n        Debug.Assert(a[0] % 3 == 0);\n\
    \        Debug.Assert(a[n-1] % 3 == 0);\n        int max = a[0];\n        for\
    \ (int i = 1; i < n-1; i++) {\n            long sum = 0;\n            for (int\
    \ j = i; j < n; j++)\n                sum += a[j];\n            if (sum < max)\n\
    \                max = sum;\n        }\n        return max;", "        long maxTriples\
    \ = 0;\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            a[i] = i * i - i + 1;\n        }\n        int j = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            long sum = a[j] + a[i];\n           \
    \ if (sum == 3) {\n                maxTriples++;\n            }\n            j++;\n\
    \        }\n        return maxTriples;", "        long a[] = new long[n];\n\n\
    \        ulong p = 0;\n\n        for (int i = 1; i <= n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n        }\n\n        var list = new List<long>();\n      \
    \  var maxIndex = 0;\n        ulong maxValue = 0;\n\n        for (int i = 0; i\
    \ < n; i++) {\n            var currentIndex = 0;\n\n            while (currentIndex\
    \ < list.Count && a[currentIndex] < a[i]) {\n                currentIndex++;\n\
    \            }\n\n            if (currentIndex >= list.Count) {\n            \
    \    var value = a[i];\n                if (value > maxValue) {\n            \
    \        maxValue = value;\n                    maxIndex = i;\n              \
    \  }\n            }\n\n            list.Add(a[i]);\n        }\n\n        var count\
    \ = 0;\n        var max = 0;\n        var currentIndex = 0;\n        while (currentIndex\
    \ < list.Count) {\n            var value = list[currentIndex];\n            if\
    \ (value > max) {\n                max = value;\n                maxIndex = currentIndex;\n\
    \            }\n\n            currentIndex++;\n        }\n\n        ulong maxValue2\
    \ = maxValue - 1;\n        var list2 = new List<long>();\n        var currentIndex2\
    \ = 0;\n        while (currentIndex2 < list.Count) {\n            if (list[currentIndex2]\
    \ >= maxValue2) {\n                var value2 = list[currentIndex2];\n       \
    \         if (value2 <= maxValue2) {\n                    list2.Add(value2);\n\
    \                }\n            }\n\n            currentIndex2++;\n        }\n\
    \n        long ans = 0;\n        int index = 0;\n        while (index < list2.Count)\
    \ {\n            if (list2[index] % 3 == 0) {\n                ans += list2[index]\
    \ / 3;\n            }\n            index++;\n        }\n\n        return ans;",
  "        HashSet<long> set = new HashSet<long>();\n        List<long> list = new\
    \ List<long>();\n        for (int i = 1; i <= n; i++) {\n            list.Add(i);\n\
    \            long sum = 0;\n            for (int j = 0; j < list.Count; j++) {\n\
    \                sum += list[j];\n                if (sum % 3 != 0) {\n      \
    \              set.Add(sum);\n                }\n            }\n        }\n  \
    \      return set.Count > 0 ? set.Count - 1 : 0;", "        ulong a = new ulong[n];\n\
    \        ulong cnt = 0;\n        ulong x = 0;\n\n        for (int i = 1; i <=\
    \ n; i++) {\n            a[i] = i * i - i + 1;\n            x = x + a[i] * a[i];\n\
    \            if (x % 3 == 0) {\n                cnt++;\n            }\n      \
    \  }\n        return cnt;", "        long[] a = new long[n];\n        int counter\
    \ = 0;\n        bool isDivisible = false;\n        for (int i = 0; i < n; i++)\
    \ {\n            isDivisible = false;\n            for (int j = i + 1; j < n;\
    \ j++) {\n                isDivisible = true;\n                for (int k = j\
    \ + 1; k < n; k++) {\n                    if (a[i] < a[j] && a[j] < a[k]) {\n\
    \                        isDivisible = false;\n                        break;\n\
    \                    }\n                }\n                if (isDivisible) {\n\
    \                    counter++;\n                }\n            }\n          \
    \  a[i] = a[i] - i + 1;\n        }\n        return counter;", "        int[] a\
    \ = new int[n];\n        long sum = 0;\n        long tripleSum = 0;\n        int\
    \ triplesCount = 0;\n\n        foreach (int i in a) {\n            sum = (i *\
    \ i - i + 1) * 3;\n            if (sum > triplesCount) {\n                triplesCount\
    \ = sum;\n            }\n            a.Add(i * i - i + 1);\n        }\n      \
    \  return triplesCount;", "        long max = 1;\n        for (int i = 1; i <\
    \ n; i++) {\n            long a1 = i * i - i + 1;\n            long a2 = a1 +\
    \ 1;\n            long a3 = a2 + 1;\n            if (Math.Pow(a1, 3) + Math.Pow(a2,\
    \ 3) + Math.Pow(a3, 3) == (3 * Math.Pow(i, 3))) \n                max = Math.Max(max,\
    \ a1 + a2 + a3);\n        }\n        return max;", "        // your code goes\
    \ here\n        var list = new List<long>();\n        var result = new long[n\
    \ - 1];\n        long k = 3;\n        for (int i = 1; i < n; i++) {\n        \
    \    list[i] = i * i - i + 1;\n            long sum = 0;\n            for (int\
    \ j = i; j < n; j++) {\n                sum += list[j];\n            }\n     \
    \       if (sum % 3 == 0) {\n                result[i - 1] = list[i];\n      \
    \      }\n            if (sum > k) {\n                k = sum;\n            }\n\
    \        }\n        return result.Where(x => x > 0).Count();", "        long[]\
    \ a = Enumerable.Range(1, n).ToArray();\n        Array.Sort(a);\n        int n\
    \ = a.Length;\n        for (int i = 0; i < n; i++) {\n            long cur = a[i];\n\
    \            for (int j = i + 1; j < n; j++) {\n                long next = a[j];\n\
    \                for (int k = j + 1; k < n; k++) {\n                    long next2\
    \ = a[k];\n                    while (cur + next + next2 >= 3) {\n           \
    \             next++;\n                        next2++;\n                    }\n\
    \                    if (next2 == next) continue;\n                    if (next2\
    \ > next) swap(next2, next);\n                    if (cur + next + next2 == 3)\
    \ return 1 + i;\n                }\n            }\n        }\n        return 0;",
  "        HashSet<long> set = new HashSet<long>();\n        long total = 0;\n   \
    \     long max = 0;\n        long[] a = new long[n];\n        for (int i = 0;\
    \ i < a.Length; i++) {\n            a[i] = i * i - i + 1;\n            total +=\
    \ a[i];\n        }\n        max = total;\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            for (int j = 0; j < a.Length; j++) {\n                if\
    \ (i != j) {\n                    if (a[i] < a[j]) {\n                       \
    \ set.add(a[i] + a[j]);\n                    }\n                }\n          \
    \  }\n        }\n        if (set.Count > 0) {\n            long sum = 0;\n   \
    \         foreach (long n in set) {\n                sum += n;\n            }\n\
    \            if (sum == max) {\n                return set.Count;\n          \
    \  }\n        }\n        return 0;", "        long a = n * (n + 1) / 2;\n    \
    \    long[] b = new long[n];\n        for (int i = 0; i < n; i++) {\n        \
    \    b[i] = i * i - i + 1;\n        }\n        // the only valid triplet is  (a[i],\
    \ a[j], a[k])\n        return GetTriples(a, b, a, b, 0, a.Length - 1);", "   \
    \     long[] a = Enumerable.Range(1, n).Select(x => (x * x) + (x + 1)).ToArray();\n\
    \        Array.Sort(a);\n        int count = 1;\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            for (int j = i + 1; j < a.Length; j++) {\n             \
    \   for (int k = j + 1; k < a.Length; k++) {\n                    int result =\
    \ (a[i] + a[j] + a[k]) % 3;\n                    if (result == 0) count++;\n \
    \               }\n            }\n        }\n        return count;", "       \
    \ var a = new long[(int)n];\n\n        for (int i = 0; i < (int)n; i++)\n    \
    \        a[i] = (i * i - i + 1);\n\n        return GetMaxTriples(a);", "     \
    \   long a = new long[(int) n];\n        for (int i = 0; i < a.Length; i++) {\n\
    \            a[i] = i * i - i + 1;\n        }\n        var q = new Queue<Tuple<long,\
    \ long, long>>();\n        q.Enqueue(new Tuple<long, long, long>(0, 1, n));\n\
    \        while (q.Count > 0) {\n            var a = q.Dequeue();\n           \
    \ int n = a.Item2;\n            for (int i = 1, j = n + 1; i <= n; i++) {\n  \
    \              for (int k = 1, m = a[i] - a[j] + 1; k <= m; k++) {\n         \
    \           if (a[i] > a[j]) {\n                        q.Enqueue(new Tuple<long,\
    \ long, long>(a[i], a[j], k));\n                    }\n                    if\
    \ (a[i] < a[j]) {\n                        q.Enqueue(new Tuple<long, long, long>(a[i],\
    \ a[j], k));\n                    }\n                    if (a[i] < a[j]) {\n\
    \                        q.Enqueue(new Tuple<long, long, long>(a[i], a[j], k));\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ q.Count;", "        long m = 1;\n        for (int i = 1; i <= n; i++) {\n  \
    \          for (int j = i; j <= n; j++) {\n                long sum = 0;\n   \
    \             for (int k = 0; k <= i; k++) {\n                    sum += k;\n\
    \                }\n                if (sum == m) {\n                    return\
    \ 1;\n                }\n                else {\n                    m = (sum\
    \ + m) % 3;\n                }\n            }\n        }\n        return 0;",
  "        long a = Enumerable.Range(1, n).ToList();\n        bool isInt = true;\n\
    \        for (long i = 0; i < a.Count; i++) {\n            int iInt = (int)a[i];\n\
    \            for (int j = iInt; j < a.Count; j++) {\n                int jInt\
    \ = (int)a[j];\n                for (int k = jInt; k < a.Count; k++) {\n     \
    \               int kInt = (int)a[k];\n                    if (((iInt + jInt)\
    \ + kInt) % 3 == 0) {\n                        isInt = false;\n              \
    \          break;\n                    }\n                }\n                if\
    \ (isInt) {\n                    break;\n                }\n            }\n  \
    \          if (isInt) {\n                break;\n            }\n        }\n  \
    \      return a.Count;", "        if (n == 0) return 0;\n        if (n == 1) return\
    \ 1;\n        if (n == 2) return 2;\n        long a = new long[n];\n        Array.Sort(a);\n\
    \        long max1 = a.Take(n - 1).Max();\n        long max2 = a.Take(n - 2).Max();\n\
    \        if (max1 == 0) max1 = 1;\n        if (max2 == 0) max2 = 1;\n        long\
    \ k = 0;\n        long count1 = 0;\n        long count2 = 0;\n        long c =\
    \ 1;\n        for (int i = 1; i < n; i++) {\n            if (c == 3) {\n     \
    \           k = i;\n                break;\n            }\n            count1++;\n\
    \            c *= i;\n        }\n        for (int i = 1; i < n; i++) {\n     \
    \       if (c == 3) {\n                k = i;\n                break;\n      \
    \      }\n            count2++;\n            c *= i;\n        }\n        return\
    \ count1 + count2 + ((count1 + count2) + k) / 3;", "        if (n == 0) {\n  \
    \          return 0;\n        }\n\n        long[] a = new long[n];\n        int\
    \ j = 0;\n        Array.Sort(a);\n        for (int i = 1; i <= n; i++) {\n   \
    \         a[i] = i * i - i + 1;\n        }\n\n        int k = n - 1;\n       \
    \ long result = 0;\n\n        while (k > 0) {\n            if (a[k] < 0 && a[k\
    \ - 1] < 0) {\n                k--;\n            }\n            else if (a[k]\
    \ > 0 && a[k - 1] >= 0) {\n                k--;\n            }\n            else\
    \ {\n                long temp = a[k];\n                a[k] = a[k - 1];\n   \
    \             a[k - 1] = temp;\n            }\n\n            foreach (long k in\
    \ a) {\n                if (k > 0) {\n                    long temp = a[k];\n\
    \                    a[k] = a[k - 1];\n                    a[k - 1] = temp;\n\
    \                }\n            }\n\n            foreach (long k in a) {\n   \
    \             result += Math.Abs(k);\n            }\n        }\n\n        return\
    \ result;", "        long max = 0;\n        long[] a = new long[n];\n        for(long\
    \ i=0;i<n;i++){\n            a[i] = i*i - i+1;\n        }\n        for(int i=0;i<n-1;i++){\n\
    \            for(int j=i+1;j<n;j++){\n                for(int k=0;k<n;k++){\n\
    \                    if(a[i] + a[j] + a[k] == 3 && i< j && j< k){\n          \
    \              max++;\n                    }\n                }\n            }\n\
    \        }\n        return max;", "        List<long> a = new List<long>();\n\
    \        for (int i = 0; i < n; i++) {\n            a.Add(i * i - i + 1);\n  \
    \      }\n        // Find the smallest a that is divisible by 3.\n        long\
    \ remainder = a.Aggregate((x, y) => x % 3 == 0 ? x : y);\n        long result\
    \ = 0;\n        foreach (var value in a) {\n            for (int i = 2; i <= value\
    \ / 2; i++) {\n                if (value % i == 0 && value % i == 0) {\n     \
    \               result += 1;\n                    break;\n                }\n\
    \            }\n        }\n        return result * (long) Math.Pow(3, a.Count\
    \ - 1);", "        long[] a = new long[n];\n        for (int i = 1; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (IsMultipleOf3(a[i], a[j], a[k]))\
    \ {\n                        yield return i + j + k;\n                    }\n\
    \                }\n            }\n        }", "        List<long> a = new List<long>();\n\
    \        for(int i = 1; i < n; i++)\n            a.Add(i * i - i + 1);\n     \
    \   Array.Sort(a);\n        long sum = 0;\n        for(int i = 0; i < a.Count\
    \ - 1; i++) {\n            int j = (int)a[i];\n            sum += j;\n       \
    \     for(int k = i + 1; k < a.Count; k++)\n                sum += a[k];\n   \
    \         if(sum == 3)\n                return 1;\n            sum = 0;\n    \
    \    }\n        return 0;", "        long[] arr = new long[n];\n        arr[0]\
    \ = 1;\n        arr[1] = 2;\n        for (int i = 2; i <= n; i++) {\n        \
    \    arr[i] = arr[i - 1] * i - i + 1;\n        }\n\n        long[] min = new long[n];\n\
    \        int minIndex = 0;\n        Array.Sort(arr);\n\n        int last = 0;\n\
    \        long total = 0;\n        for (int i = 2; i < arr.Length; i++) {\n   \
    \         if (arr[i] == arr[last] - 1) {\n                last++;\n          \
    \      arr[last] = arr[last] * last - last;\n            } else {\n          \
    \      total += arr[last] - arr[last];\n                last = i;\n          \
    \  }\n\n            min[minIndex++] = arr[last] - 1;\n        }\n\n        return\
    \ total;", "        long[] a = new long[n];\n        for (int i = 1; i <= n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        int k = 0;\n      \
    \  for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int z = j + 1; z < n; z++) {\n                    if\
    \ ((int)a[i] - (int)a[j] - (int)a[z] % 3 == 0) {\n                        k++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ k;", "        if (n == 0L)\n            return 0L;\n        long[] result =\
    \ new long[(int)Math.Ceiling(n/2)];\n        long[] a = new long[(int)Math.Ceiling(n/2)];\n\
    \        for (int i = 1L; i <= n; i++) {\n            for (int j = 0; j < (int)Math.Floor(i/2);\
    \ j++) {\n                for (int k = 0; k < (int)Math.Ceiling(i/2); k++) {\n\
    \                    a[j] = a[j] - i;\n                    a[k] = (long)Math.Ceiling((double)a[k]\
    \ / (double)(i*i));\n                    result[j+k] = Math.Max(a[j], Math.Max(a[k],\
    \ a[j+k]));\n                }\n            }\n        }\n        long sum = 0L;\n\
    \        bool isSum = false, isMultipleOfThree = false;\n        foreach (long\
    \ x in result)\n        {\n            if (x==3)\n            {\n            \
    \    isSum = true;\n                sum += x;\n            }\n            else\
    \ if ((x & 3) == 3)\n            {\n                isMultipleOfThree = true;\n\
    \            }\n        }\n        if (isSum)\n        {\n            return sum;\n\
    \        }\n        if (isMultipleOfThree)\n        {\n            return 1L;\n\
    \        }\n        return 0L;", "        ArrayList a = new ArrayList(n);\n  \
    \      for (int i = 1; i < n; i++) {\n            a.Add(i * i - i + 1);\n    \
    \    }\n        var result = a.Select(item => (long)Math.Pow(item, 3) - item).Sum();\n\
    \        return result;", "        long[] a = new long[n];\n        for (int i\
    \ = 1; i <= n; i++) {\n            for (int j = 1; j <= i; j++) {\n          \
    \      for (int k = 1; k <= j; k++) {\n                    if (k == i || k ==\
    \ j || k == i)\n                        continue;\n                    if (a[k\
    \ - 1] == a[j - 1] + a[i])\n                        return a[k - 1] == a[j - 1]\
    \ + a[i];\n                }\n            }\n        }\n        return 0;", " \
    \       long[] a = new long[n];\n        int[] count = new int[n];\n        //\
    \ Initialize the array a with values 1, 3, 7, 13, 21\n        for (int i = 0;\
    \ i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        // Count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k\n        // and\
    \ a[i] + a[j] + a[k] is a multiple of 3.\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        count[i]++;\n                        count[j]++;\n\
    \                        count[k]++;\n                        break;\n       \
    \             }\n                }\n            }\n        }\n        return count.Max();",
  "        long a = new long[n];\n        Array.Sort(a);\n        long sum = 0;\n\
    \        long count = 0;\n        long sum2;\n        for (int i = 0; i < n; i++)\
    \ {\n            sum = a[i];\n            sum2 = a[i] + a[i + 1] + a[i << 1];\n\
    \            if (sum % 3 == 0 && sum2 % 3 == 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = 0; j < n; j++) {\n                if (j < i) continue;\n               \
    \ for (int k = 0; k < n; k++) {\n                    if (k < j) continue;\n  \
    \                  long triple = 0;\n                    for (int i1 = 0; i1 <\
    \ n; i1++)\n                        for (int j1 = 0; j1 < n; j1++)\n         \
    \                   for (int k1 = 0; k1 < n; k1++)\n                         \
    \       if (i1 < j1 && j1 < k1) \n                                    triple +=\
    \ a[i1] * a[j1] * a[k1];\n                    if (triple == 3 * a[i])\n      \
    \                  count++;\n                }\n            }\n        }\n   \
    \     return count;", "        long[] a = new long[n + 1];\n        a[0] = 1;\n\
    \        a[1] = 1;\n        long sum = 0;\n        for (int i = 1; i <= n; i++)\
    \ {\n            a[i] = a[i-1] * a[i-1] - a[i-1] + i;\n            sum += a[i];\n\
    \        }\n        return (sum % 3L == 0);", "        long count = 1;\n     \
    \   long max = 1;\n        for (int i = 1; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    long triple = i * i * i + j * j + k * k;\n              \
    \      long test = Math.Pow(triple, 3);\n                    if (test == max)\
    \ {\n                        max++;\n                    }\n                }\n\
    \            }\n        }\n        return count;", "        // The answer is positive.\n\
    \        long maxTriplets = (long)0;\n        long[] a = new long[n];\n      \
    \  \n        for (int i = 0; i < a.Length; i++) {\n            // The a[i] = i\
    \ * i - i + 1.\n            a[i] = i * i - i + 1;\n        }\n        \n     \
    \   foreach (var triple in GetTriples(n)) {\n            long sum = 0;\n     \
    \       for (int i = 0; i < triple; i++) {\n                sum += a[i];\n   \
    \         }\n            if (sum % 3 == 0) {\n                maxTriplets++;\n\
    \            }\n        }\n        \n        return maxTriplets;", "        var\
    \ a = new List<long>();\n        var total = 0;\n        var first = 1;\n    \
    \    for(long i = 1; i < n; i++) {\n            a.Add(first * first - first +\
    \ 1);\n            total += a.Last();\n            first = i;\n        }\n   \
    \     foreach(var item in a) {\n            if(item % 3 == 0) {\n            \
    \    a.Remove(item);\n                total -= item;\n            }\n        }\n\
    \        return total;", "        var result = new List<long>();\n        long\
    \ max = 0;\n        long num = 0;\n        for(int i=1; i<=n; i++){\n        \
    \    if(i%3==0){\n                num+=i;\n                num*=2;\n         \
    \   }\n            if(num>=3 && num%3==0){\n                result.Add(num);\n\
    \                num = 0;\n            }\n        }\n        if (result.Count\
    \ > 0){\n            result.Sort();\n            max = result[0];\n          \
    \  foreach (var r in result.Skip(1)){\n                if(r>=max)\n          \
    \          max = r;\n            }\n        }\n        return max;", "       \
    \ long[] a = new long[n];\n\n        // fill the array a\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ max = 0;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j\
    \ = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] == 3 && a != null)\n             \
    \       {\n                        if (max < i)\n                        {\n \
    \                           max = i;\n                        }\n            \
    \            if (max < j)\n                        {\n                       \
    \     max = j;\n                        }\n                        if (max < k)\n\
    \                        {\n                            max = k;\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n        if (max == 0)\n        {\n            return 0;\n        }\n\
    \        return max;", "        long max = 0;\n        long a = new long[n];\n\
    \        for (int i = 1; i <= n; i++) {\n            a[i - 1] = (i * i - i + 1);\n\
    \            max = Math.Max(max, a[i]);\n        }\n        long res = 0;\n  \
    \      for (int i = 1; i < n; i++) {\n            for (int j = 1; j < i; j++)\
    \ {\n                for (int k = i + 1; k <= n; k++) {\n                    res\
    \ = Math.Min(res, a[i] + (a[j] + a[k]) % 3);\n                }\n            }\n\
    \        }\n        return res;", "        var a = new int[n];\n        for (int\
    \ i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n       \
    \ Array.Sort(a);\n\n        // Count the triples (a[i], a[j], a[k]) of a where\
    \ i < j < k and a[i] + a[j] + a[k] is \n        // a multiple of 3\n        var\
    \ triples = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j\
    \ = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    var temp = a[i] + a[j] + a[k];\n                    if (temp\
    \ % 3 == 0)\n                        triples++;\n                }\n         \
    \   }\n        }\n        return triples;", "        if (n < 2)\n            return\
    \ 0;\n        long[] arr = new long[n];\n        Array.Sort(arr);\n        long\
    \ max = 0;\n        long sum = 0;\n        long tripleSum = 0;\n        foreach\
    \ (long i in arr) {\n            if (i < 0 || i > n - 1) {\n                return\
    \ 0;\n            }\n            sum += i;\n            if (i % 3 == 0) {\n  \
    \              tripleSum = i;\n            }\n            else if (i % 3 == 1)\
    \ {\n                max = Math.Max(max, tripleSum);\n                tripleSum\
    \ = 0;\n            }\n        }\n        return max + 1;", "        long a[n];\n\
    \        Array.Sort(a);\n        int max = 0;\n        long ans = 0;\n       \
    \ for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n\
    \                for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ < a[j] || a[i] < a[k] || a[j] < a[k]) {\n                        ans += 1;\n\
    \                    }\n                }\n            }\n            if (a[i]\
    \ % 3 == 0) {\n                ans += 1;\n            }\n        }\n        if\
    \ (ans < max)\n            max = ans;\n        return max;", "        var a =\
    \ new int[n];\n        for (var i = 1; i < n; i++) {\n            for (var j =\
    \ 0; j < i; j++) {\n                for (var k = 0; k < j; k++) {\n          \
    \          if (a[i] == a[j] + a[k]) {\n                        return i + 1 +\
    \ j + k + 1;\n                    }\n                }\n            }\n      \
    \  }\n        return 0;", "        var r = new List<long> { 1, 1, 1 };\n     \
    \   while (true) {\n            bool valid = true;\n            foreach (var i\
    \ in r.Select(x => x * x - x + 1).Take(n)) {\n                if (!i.Satisfy(x\
    \ => x <= 0)) {\n                    valid = false;\n                    break;\n\
    \                }\n            }\n            if (!valid) return r.Count;\n \
    \           r.Add(r.Sum());\n        }", "        long[] a = new long[n + 1];\n\
    \        long cnt = 0;\n        for (int i = 1; i < n + 1; i++) {\n          \
    \  for (int j = i; j < n + 1; j++) {\n                for (int k = j; k < n +\
    \ 1; k++) {\n                    a[i] = i * i - i + 1;\n                    a[j]\
    \ = i * i - j + 1;\n                    a[k] = i * i - k + 1;\n              \
    \      cnt++;\n                    if (Math.Abs(a[i] - a[j] - a[k]) % 3 == 0)\n\
    \                        return cnt;\n                }\n            }\n     \
    \   }\n        return -1;", "        List<long> a = new List<long>();\n      \
    \  for (int i = 0; i < n; i++)\n            a.Add(i * i * i + 1);\n        long\
    \ m = 0;\n        int count = 0;\n        for (int i = 0; i < n - 1; i++) {\n\
    \            long s = a[i];\n            for (int j = i + 1; j < n; j++) {\n \
    \               long t = a[j];\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (s + t + k == m) {\n                        count++;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            m += s;\n        }\n        return (long)count;", " \
    \       long[] a = new long[n];\n        // fill up the list by filling the array\
    \ a\n        // each index corresponds to a valid triple\n        // if the number\
    \ is divisible by 3 then its a triple\n        for (int i = 0; i < a.Length; i++)\n\
    \        {\n            a[i] = i * i - i + 1;\n        }\n        long count =\
    \ 0;\n        // go through each valid triple\n        for (int i = 0; i < a.Length;\
    \ i++)\n        {\n            for (int j = 0; j < a.Length; j++)\n          \
    \  {\n                if (j > i)\n                {\n                    // see\
    \ if we can find a valid triple\n                    for (int k = 0; k < a.Length;\
    \ k++)\n                    {\n                        // if we can, then we need\
    \ to check if a[i], a[j], a[k] is a multiple of 3\n                        if\
    \ (a[i] + a[j] + a[k] == 3 && a[i] != a[j] && a[j] != a[k] && a[i] != a[k] &&\
    \ i != j && i != k && j != k)\n                        {\n                   \
    \         // increment the count of valid triples by 1\n                     \
    \       count++;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n        // return the total count\n     \
    \   return count;", "        long a = new long[n]; \n        long count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++)\
    \ {\n                for (int k = j+1; k < n; k++) {\n                    long\
    \ res = a[i] + a[j] + a[k];\n                    if (res >= 3 && res != -3)\n\
    \                        count++;\n                }\n            }\n        }\n\
    \        return count;", "        Debug.Assert(n > 0);\n        long a = Enumerable.Range(1,\
    \ n).ToList();\n        Debug.Assert(a.Count >= n);\n        int maxSum = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            int max = FindMax(a, i);\n\
    \            if (max > maxSum) {\n                maxSum = max;\n            }\n\
    \            int j = i + 1;\n            while (j < n && FindMax(a, j) == max)\
    \ {\n                j++;\n            }\n            int k = n - 1;\n       \
    \     while (k > i && FindMax(a, k) == max) {\n                k--;\n        \
    \    }\n            if (j < k) {\n                maxSum++;\n                for\
    \ (int m = j; m < k; m++) {\n                    maxSum = Add(maxSum, a[m]);\n\
    \                }\n            }\n        }\n        return maxSum;", "     \
    \   List<long> a = new List<long>();\n        for (int i = 1; i <= n; i++) a.Add(i\
    \ * i - i + 1);\n\n        long max = 0;\n        long triples = 0;\n        int\
    \ n = a.Count;\n        long[] aArr = a.ToArray();\n        for (int i = 0; i\
    \ < n; i++) {\n            int j = i;\n            for (int k = i; k < n; k++)\
    \ j++;\n            long[] subarr = new long[] { aArr[i], aArr[j], aArr[k] };\n\
    \            long subMax = Math.Max(subarr[0], Math.Max(subarr[1], subarr[2]));\n\
    \            if (subMax > max) max = subMax;\n        }\n        \n        \n\
    \        return triples;", "        List<long> a = new List<long>(n);\n      \
    \  for (int i = 0; i < n; i++) a.Add(i * i - i + 1);\n        int count = 0;\n\
    \        for(int i = 0; i< a.Count; i++)\n            for (int j = i+1; j< a.Count;\
    \ j++)\n                for (int k = j+1; k< a.Count; k++)\n                 \
    \   if (a[i] < a[j] && a[i] < a[k])\n                        count++;\n      \
    \  return count;", "        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= n; j++) {\n   \
    \             for (int k = 0; k <= n; k++) {\n                    result.Add(i\
    \ * i * i - j * j * j + k * k * k);\n                }\n            }\n      \
    \  }\n        return result.Sum(x => x % 3 == 0L ? 1L : 0L);", "        // use\
    \ linq\n        long count = n.Where(x => x < 0).Count();\n        long num =\
    \ 0;\n        long sum = 0;\n        foreach (int i in n.Where(x => x < 0).Take(count))\
    \ {\n            sum += i * i - i + 1;\n            if (sum % 3 == 0) {\n    \
    \            num++;\n            }\n        }\n        return num;", "       \
    \ List<long> a = GetTriples(n);\n        long aSum = GetSum(a);\n        return\
    \ GetMax(aSum);", "        long a[] = new long[n];\n        Array.Sort(a);\n \
    \       long max = 0;\n        long t = 0;\n        long x = 0;\n        long\
    \ y = n;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n    \
    \    for (; x != n; x = y) {\n            i = x;\n            if (a[i] < 0)\n\
    \                i = -i;\n            k = y;\n            while (y != 0) {\n \
    \               j = y;\n                while (k != 0) {\n                   \
    \ t = a[i];\n                    a[i] = a[j];\n                    a[j] = t;\n\
    \                    k--;\n                }\n                j++;\n         \
    \       k++;\n                y = j;\n            }\n            max++;\n    \
    \    }\n        return max;", "        long sum = 0;\n        long sum1 = 0L;\n\
    \        long sum2 = 0L;\n        long sum3 = 0L;\n\n        List<long> a = new\
    \ List<long>(n);\n\n        long total = 0;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (i % 2 != 0) {\n                a.Add(i * i - i + 1);\n  \
    \              sum += a[i] * a[i];\n                total += a[i] * a[i];\n  \
    \              sum1 += a[i];\n            }\n        }\n\n        sum2 = sum1;\n\
    \        sum3 = sum2;\n        total *= 2;\n\n        if (sum == total) {\n  \
    \          sum3 += sum3;\n            sum3 += sum3;\n            sum3 += sum3;\n\
    \        }\n\n        a.Sort();\n        foreach (long b in a)\n            sum\
    \ += b;\n        sum *= 2;\n        if (sum3 == total)\n            sum += sum3;\n\
    \        return sum;", "        long a[] = new long[n];\n        long total =\
    \ 0;\n        long n = n;\n        long k = n;\n\n        for(int i = 1; i <=\
    \ n; i++) {\n            a[i] = i * i - i + 1;\n            total = total + a[i]\
    \ * a[i] + a[i] * a[i] * 3;\n        }\n\n        return total;", "        List<long>\
    \ a = new List<long>(n);\n        a.Sort();\n        var max = 0;\n        long\
    \ c = 0, d = 1, e = 1;\n        for (int i = 2; i <= n; i++) {\n            c\
    \ += a[i];\n            d = Math.Max(d, a[i + a.Count - 1]);\n            e++;\n\
    \            for (int j = (i + a.Count - 1); j <= n; j++) {\n                c\
    \ -= a[j];\n                d = Math.Max(d, a[i + j]);\n                e++;\n\
    \                if (c != 0) {\n                    break;\n                }\n\
    \            }\n            if (c != 0) {\n                max = Math.Max(max,\
    \ e);\n            }\n        }\n        return max;", "        int[] a = new\
    \ int[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i * i - i +\
    \ 1;\n        long tripleCount = 0;\n        bool isTriple = false;\n        long\
    \ maxValue = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j\
    \ = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] > a[j] && a[j] > a[k]) {\n                     \
    \   isTriple = true;\n                        int temp = 0;\n                \
    \        if (isTriple) {\n                            temp = i;\n            \
    \                i = j;\n                            j = k;\n                \
    \            k = temp;\n                        }\n                        if\
    \ (maxValue < a[i + k + j]) {\n                            tripleCount += 1;\n\
    \                            maxValue += a[i + k + j];\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \      return tripleCount;", "        ArrayList a = new ArrayList(n);\n      \
    \  a.AddRange(new ArrayList(n));\n        a.Add(1);\n\n        long[] x = new\
    \ long[n];\n\n        int count = 0;\n        for (int i = 0; i < a.Count - 1;\
    \ i++) {\n            x[i] = a[i + 1] - a[i] + 1;\n            for (int j = i\
    \ + 1; j < a.Count; j++) {\n                if (x[j] - x[i] >= 2) {\n        \
    \            for (int k = j + 1; k < a.Count; k++) {\n                       \
    \ if (x[k] - x[j] - x[i] >= 2) {\n                            count++;\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        return count;", "        // O(n^2) time solution\n       \
    \ if (n < 3) {\n            return n;\n        }\n        int[] a = new int[n];\n\
    \        long ret = 0;\n        long curSum = 0;\n        for (int i = 1; i <\
    \ n; i++) {\n            int cur = a[i];\n            for (int j = 1; j < i; j++)\
    \ {\n                cur += a[j];\n            }\n            if (cur > 3) {\n\
    \                curSum = cur;\n            } else {\n                for (int\
    \ k = 1; k < j; k++) {\n                    curSum += a[k];\n                }\n\
    \                if (curSum > 3) {\n                    curSum = cur;\n      \
    \          } else {\n                    ret += cur;\n                }\n    \
    \        }\n        }\n        return ret;", "        long[] a = new long[n];\n\
    \        // fill array a \n        for (int i = 0; i < n; i++)\n            a[i]\
    \ = i * i - i + 1;\n        // count triples\n        int count = 0;\n       \
    \ for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n\
    \                for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ == a[j] + a[k])\n                        count++;\n                }\n     \
    \       }\n        }\n        // return count\n        return count;", "     \
    \   var list = new long[n];\n        for (int i = 0; i < n; i++) {\n         \
    \   list[i] = i * i - i + 1;\n        }\n\n        var triples = new long[n];\n\
    \        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < i; j++)\
    \ {\n                for (int k = 1; k < j; k++) {\n                    var count\
    \ = Math.Min(Math.Max(list[i] - list[j] + list[k], 0), 3);\n                 \
    \   triples[i * j + k] = count;\n                }\n            }\n        }\n\
    \n        var result = 0;\n        foreach (var item in triples) {\n         \
    \   result += item;\n        }\n\n        return result;", "        List<long>\
    \ a = GetTriples(n);\n        long totalTriples = 0;\n        bool foundNonTriple\
    \ = false;\n        for (int i = 0; i < a.Count; i++) {\n            long num\
    \ = a[i];\n            if (num >= 3 && (num - 1) % 3 == 0) {\n               \
    \ totalTriples++;\n                for (int j = i + 1; j < a.Count; j++) {\n \
    \                   long num2 = a[j];\n                    if (num2 >= 3 && (num2\
    \ - 1) % 3 == 0) {\n                        totalTriples++;\n                \
    \        for (int k = j + 1; k < a.Count; k++) {\n                           \
    \ long num3 = a[k];\n                            if (num3 >= 3 && (num3 - 1) %\
    \ 3 == 0) {\n                                totalTriples++;\n               \
    \             }\n                        }\n                    }\n          \
    \      }\n            }\n        }\n        return totalTriples;", "        Debug.Assert(n\
    \ >= 0);\n        long a = new long[n];\n        for (int i = 1; i <= n; i++)\
    \ {\n            a[i - 1] = a[i - 2] * i - i + 1;\n        }\n        long triples\
    \ = 0;\n        long triple = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        triple = 0;\n            for (int j = 1; j <= i; j++) {\n           \
    \     for (int k = 1; k <= j; k++) {\n                    if (a[i + j] == (a[j]\
    \ + a[k]) * 3) {\n                        triple++;\n                    }\n \
    \               }\n            }\n            if (triple > triples) {\n      \
    \          triples = triple;\n                triple = i;\n            }\n   \
    \     }\n        return triples;", "        long a[] = new long[n];\n        long\
    \ sum = 1;\n        long triple;\n        for (long i = 1; i < n; i++) {\n   \
    \         sum += a[i] = a[i] - a[i] + sum;\n        }\n        sum -= 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            triple = a[i];\n           \
    \ for (long j = 1; j < i; j++) {\n                triple -= a[j];\n          \
    \      if (triple == 0) {\n                    return i + 1;\n               \
    \ }\n                triple += a[i];\n            }\n        }\n        return\
    \ 0;", "        long a[] = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            a[i] = i * i - i + 1;\n        }\n        long sum = 0;\n       \
    \ for (int i = 0; i < n; i++) {\n            sum += a[i] + a[j] + a[k];\n    \
    \    }\n        return sum % 3 == 0 ? 1 : 0;", "        var a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n\n        // Sort the array in ascending order \n        Array.Sort(a);\n\
    \n        // Find triples in the array \n        var count = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          if (IsPrime(a[i]) && a[j] % 3 == 0) {\n                    for (int\
    \ k = j + 1; k < n; k++) {\n                        if (IsPrime(a[j]) && a[k]\
    \ % 3 == 0) {\n                            if (a[i] == a[j] + a[k]) {\n      \
    \                          count++;\n                            }\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n\n        return count;", "        long[] arr = new long[n];\n    \
    \    for(int i=0;i<n;i++){\n            arr[i] = i*i-1;\n        }\n        return\
    \ GetMaxTriples(arr);", "        long[] result = new long[n];\n        long triple\
    \ = 0;\n        long tripleCount = 0;\n        long[] a = new long[n];\n     \
    \   for (int i = 1; i < n; i++) {\n            result[i] = i * i - i + 1;\n  \
    \          a[i] = i * i - i + 1;\n        }\n        for (int j = 1; j < n; j++)\
    \ {\n            for (int k = 1; k < n; k++) {\n                if (j > k) {\n\
    \                    triple = a[i] + a[j] + a[k];\n                    if (triple\
    \ == 3 || (triple == 2 && a[j] > a[k])) {\n                        tripleCount++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ tripleCount;", "        long a = new long[n];\n        a[0] = 1;\n        for\
    \ (int i = 1; i < n; i++) {\n            a[i] = a[i] + a[i - 1];\n        }\n\
    \        long result = 0;\n        for (int i = 0; i <= n; i++) {\n          \
    \  for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= n; k++)\
    \ {\n                    if (i + j + k == a[i + j] && i + j + k == a[i + j + k])\
    \ {\n                        result += Math.Max(Math.Max(a[i], a[j]), a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        var a = new List<long>();\n        a.AddRange(Enumerable.Range(0,\
    \ n).Select(x => (x * x - x + 1)));\n        var retVal = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n          \
    \      for (int k = 0; k < n; k++) {\n                    if (i != j && i != k\
    \ && j != k) {\n                        if (a[i] + a[j] + a[k] == 3)\n       \
    \                     retVal++;\n                    }\n                }\n  \
    \          }\n        }\n        return retVal;", "        ulong a = GetRandom(n,\
    \ GetRandom(n, GetRandom(n)));\n        return (long)GetMaxTriple(a);", "    \
    \    long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n        \
    \    a[i] = i * i - i + 1;\n        }\n        return GetMaxTriples(a, n);", " \
    \       long min = 0;\n        long max = n-1;\n        long x = 0;\n        List<long>\
    \ a = new List<long>();\n\n        while (min <= max) {\n            x = (long)((long)Math.Sqrt(2*min));\n\
    \            x.ToString();\n            a.Add(x);\n            min = min+1;\n\
    \        }\n\n        return a.FindAll(x=>x==3).Count();", "        int[] a =\
    \ new int[n];\n        \n        ulong total = 1;\n        for (int i = 0; i <\
    \ n; i++) {\n            long tmp = i * i - i + 1;\n            a[i] = (int)(tmp);\n\
    \            total += tmp;\n        }\n        \n        // Sort the list \n \
    \       Array.Sort(a);\n        \n        int max = 0;\n        long triples =\
    \ 0;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j\
    \ = i; j < n; j++) {\n                for (int k = j; k < n; k++) {\n        \
    \            if (a[i] < a[j]) {\n                        if (a[i] < a[k]) {\n\
    \                            if (a[j] < a[k]) {\n                            \
    \    if (a[i] - a[j] + a[k] == total) {\n                                    max++;\n\
    \                                    triples += a[i] - a[j] + a[k];\n        \
    \                        }\n                            }\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        long res = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            res++;\n            a[i] =\
    \ i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n         \
    \   for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    long sum = 0;\n                    for (int x\
    \ = 0; x < n; x++)\n                        sum += a[x];\n                   \
    \ if (sum % 3 == 0)\n                        res ++;\n                }\n    \
    \        }\n        }\n        return res;", "        int[] a = new int[n];\n\
    \        Array.Sort(a);\n        int sum = 0;\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            if (i < a.Length - 1) {\n                sum += a[i] + a[i\
    \ + 1];\n            } else {\n                sum += a[i];\n            }\n \
    \       }\n        while (sum % 3 != 0) {\n            sum = sum / 3;\n      \
    \  }\n        return a.Length;", "        long[] a = new long[n];\n        long\
    \ count = 0;\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i\
    \ - i + 1;\n        }\n        // for (int i = 0; i < n; i++) {\n        //  \
    \   for (int j = i + 1; j < n; j++) {\n        //         for (int k = j + 1;\
    \ k < n; k++) {\n        //             long sum = i * a[i] + a[j] * a[j] + a[k]\
    \ * a[k];\n        //             if (sum == 0) continue; // No triple\n     \
    \   //             if (sum % 3 == 0) {\n        //                 count += 1;\n\
    \        //                 // Console.WriteLine(\"{0}\\t{1}\\t{2}\", a[i], a[j],\
    \ a[k]);\n        //             }\n        //         }\n        //     }\n \
    \       // }\n        Array.Sort(a);\n        foreach (long k in a) {\n      \
    \      long sum = k * a[k];\n            if (sum == 0) continue; // No triple\n\
    \            if (sum % 3 == 0) {\n                count += 1;\n              \
    \  // Console.WriteLine(\"{0}\", k);\n            }\n        }\n        return\
    \ count;", "        var ans = 0;\n        var a = new List<long>();\n        for\
    \ (var i = 1; i <= n; i++) {\n            a.Add(i * i - i + 1);\n        }\n\n\
    \        for (int i = 0; i < a.Count - 1; i++) {\n            int j = (i + 1)\
    \ % a.Count;\n            int k = ((i + j) % a.Count);\n            ans = Math.Max(ans,\
    \ a[i] - a[j] - a[k]);\n        }\n        return ans;", "        long a[] = new\
    \ long[n];\n        long sum = 0;\n        long max = 0;\n        long i = 0;\n\
    \        long j = 0;\n        long k = 0;\n        for(int i = 0; i < a.Length;\
    \ i++) {\n            a[i] = i*i - i + 1;\n            sum += a[i];\n        }\n\
    \        for(; i < n; i++) {\n            max = Math.Max(max, a[i]);\n       \
    \ }\n        long counter = 0;\n        i = 1;\n        j = 1;\n        k = 1;\n\
    \        while(i < n && j < n && k<n) {\n            if(max % 3 == 0) {\n    \
    \            counter++;\n            }\n            max = max / 3;\n         \
    \   i++;\n            j++;\n            k++;\n        }\n        return counter;",
  "        var a = new List<long>();\n        foreach (var i in Enumerable.Range(1,\
    \ n)) {\n            var j = (int)Math.Sqrt(2 * i - 1);\n            var k = i\
    \ - (j / 2);\n            if (j % 2 != 0) k++;\n            a.Add(i * i - i +\
    \ 1);\n            a.Add(j * j - j + 1);\n            a.Add(k * k - k + 1);\n\
    \        }\n        int triples = 0;\n        foreach (var pair in a) {\n    \
    \        triples++;\n            foreach (var pair2 in a) {\n                if\
    \ (pair != pair2 && (pair + pair2) % 3 == 0) {\n                    triples++;\n\
    \                }\n            }\n        }\n        return triples;", "    \
    \    long ret = 0;\n        long[] a = new long[n];\n        for (int i = 0; i\
    \ < n; i++)\n            a[i] = i * i - i + 1;\n        for (int i = 0; i < n\
    \ - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ == 3 * 3 * 3) {\n                        ret += 1;\n                    }\n\
    \                }\n            }\n        }\n        return ret;", "        long\
    \ a = Enumerable.Range(0, n).SelectMany(i => new[] {i, -i, i+1}).ToArray();\n\
    \        long b = Enumerable.Range(0, n).Sum(i => i * i - i + 1);\n        long\
    \ s = Enumerable.Range(0, n).Sum(i => i * i * i);\n        return b.Equals(s)\
    \ ? Enumerable.Range(0, n).Count(i => a[i] % 3 == 0) : 0;", "        long[] a\
    \ = new long[n];\n        long sum = 0;\n        bool flag = false;\n        for(long\
    \ i = 1; i < a.Length; i++) {\n            long num = i * i - i + 1;\n       \
    \     if (i % 2 == 0) {\n                flag = true;\n            }\n       \
    \     if(num % 3 != 0) {\n                if(sum == 0) {\n                   \
    \ sum = i;\n                } else {\n                    flag = false;\n    \
    \            }\n            } else {\n                if(sum > 0) {\n        \
    \            flag = false;\n                } else {\n                    sum\
    \ = i;\n                }\n            }\n            if(flag) {\n           \
    \     if(i * i > sum) {\n                    a[sum - i] = num;\n             \
    \   }\n                sum += i;\n            }\n        }\n        return a.Count(l\
    \ => l % 3 == 0);", "        long max = n * n - 3 * n + 1;\n        long sum =\
    \ 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i * i - i + 1;\n\
    \            sum *= i;\n        }\n        return sum > max ? max : sum;", " \
    \       var arr= new List<long> { 1, 1, 1 };\n        for (int i = 0; i < n; i++)\
    \ {\n            arr[i]= i * i - i + 1;\n        }\n        long x = 0;\n    \
    \    foreach (var item in arr) {\n            x= Math.Max(x, item);\n        }\n\
    \        return x;", "        long[] a = new long[n];\n        long result = 0;\n\
    \        long max = 0;\n        long min = 0;\n\n        Console.WriteLine(\"\
    {0}\", n); \n\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i\
    \ - i + 1;\n            max = Math.Max(max, a[i]);\n            min = Math.Min(min,\
    \ a[i]);\n            Console.WriteLine(\"{0}\", a[i]);\n        }\n\n       \
    \ for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n \
    \               if (i < j) {\n                    for (int k = 0; k < n; k++)\
    \ {\n                        if (i != k) {\n                            if (a[i]\
    \ < a[j]) {\n                                if (a[i] > a[k]) {\n            \
    \                        result ++;\n                                }\n     \
    \                           if (a[j] > a[k]) {\n                             \
    \       result ++;\n                                }\n                      \
    \          if (a[i] > a[k]) {\n                                    result ++;\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        Console.WriteLine(\"{0}\", result);\n\n        return result;",
  "        long[] arr = new long[n];\n        Array.Sort(arr);\n        long max =\
    \ arr[0];\n        long ans = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        long left = max;\n            long right = max;\n            for (int\
    \ j = 0; j < i; j++) {\n                left += arr[j];\n            }\n     \
    \       right = arr[i];\n            for (int j = i + 1; j < n; j++) {\n     \
    \           right += arr[j];\n            }\n            if (left > right) {\n\
    \                max = left;\n                ans = i;\n            } else {\n\
    \                max = right;\n                ans = n;\n            }\n     \
    \   }\n        return ans;", "        int[] a = new int[n];\n        long ret\
    \ = 0;\n        for (int i = 0; i < n; ++i) {\n            a[i] = i * i - i +\
    \ 1;\n        }\n        List<int> ans = new List<int>();\n        for (int i\
    \ = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n        \
    \        for (int k = j + 1; k < n; ++k) {\n                    int sum = 0;\n\
    \                    for (int l = 0; l < n; ++l) {\n                        sum\
    \ = sum + a[l];\n                    }\n                    if (sum % 3 == 0)\
    \ {\n                        ans.Add(sum);\n                    }\n          \
    \      }\n            }\n        }\n        foreach (int sum in ans) {\n     \
    \       if (sum > ret) {\n                ret = sum;\n            }\n        }\n\
    \        return ret;", "        List<long> a = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++)\n        {\n            a.Add(i * i - i + 1);\n   \
    \     }\n        var result = GetMax(a);\n        return result.Count();", " \
    \       long result = 0;\n        int[] arr = new int[n];\n        for(int i =\
    \ 0; i < n; i++) {\n            arr[i] = i * i - i + 1;\n        }\n        for\
    \ (int i = 0; i < arr.Length; i++) {\n            for (int j = i+1; j < arr.Length;\
    \ j++) {\n                for (int k = j+1; k < arr.Length; k++) {\n         \
    \           if(arr[i] + arr[j] + arr[k] % 3 == 0) {\n                        result++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        int[] a = new int[n];\n        bool flag = false;\n     \
    \   long temp = 0;\n        long res = 0;\n        for (int i = 1; i <= n; i++)\
    \ {\n            for (int j = i; j <= n; j++) {\n                for (int k =\
    \ j; k <= n; k++) {\n                    if (i == j && j == k) {\n           \
    \             flag = true;\n                        continue;\n              \
    \      }\n                    temp = i * i * i + j * j + k * k;\n            \
    \        if (temp % 3 == 0) {\n                        flag = true;\n        \
    \            }\n                }\n            }\n            if (flag) {\n  \
    \              res++;\n                flag = false;\n            }\n        }\n\
    \        return res;", "        long a = 1;\n        for (int i = 1; i < n; i++)\
    \ {\n            a = a * i - i + 1;\n        }\n        List<long> triples = new\
    \ List<long>();\n        for (int i = 1; i <= n; i++) {\n            long j =\
    \ (i * i - i + 1);\n            long k = (j * j - j + 1);\n            if ((i\
    \ % 3 == 0 && j % 3 == 0 && k % 3 == 0)\n                    || (i % 3 == 0 &&\
    \ j % 3 == 0 && k / 3 != 0)\n                    || (i % 3 == 1 && j % 3 == 1\
    \ && k % 3 == 1)) {\n                triples.Add(i);\n                triples.Add(j);\n\
    \                triples.Add(k);\n            }\n        }\n        long count\
    \ = 0;\n        if (triples.Count > 0) {\n            count = triples.Count;\n\
    \        }\n        return count;", "        long[] a = new long[n];\n       \
    \ ulong max = 0;\n        int count = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n            if (a[i] % 3 == 0) {\n   \
    \             max = a[i]; // found a triple\n                count = 1;\n    \
    \        }\n            if (a[i] % 3 == 0) {\n                for (int j = i +\
    \ 1; j < n; j++) {\n                    if (j >= count && a[j] % 3 == 0) {\n \
    \                       int k = j - count + 1;\n                        max =\
    \ Math.Max(max, a[j] + a[k]); // found a triple\n                        count\
    \ = count + 1;\n                    }\n                }\n            }\n    \
    \    }\n        Console.WriteLine(\"max {0}\", max);\n        return count;",
  "        long numTriples   = 0;\n        long[] a = new long[n];\n\n        for\
    \ (int i = 1; i <= n; i++)\n        {\n            a[i] = i * i - i + 1;\n   \
    \     }\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int\
    \ j = 1; j <= n; j++)\n            {\n                for (int k = 1; k <= n;\
    \ k++)\n                {\n                    if (a[i] + a[j] + a[k] == 3)\n\
    \                    {\n                        numTriples += 1;\n           \
    \         }\n                }\n            }\n        }\n\n        return numTriples;",
  "        long a[] = new long[n];\n\n        for (long i = 0; i < n; i++) a[i] =\
    \ i * i - i + 1;\n\n        long result = 0;\n        long sum = 0;\n\n      \
    \  for (long i = 0; i < n; i++) {\n            for (long j = i + 1; j < n; j++)\
    \ {\n                for (long k = j + 1; k < n; k++) {\n                    long\
    \ x = 0;\n\n                    x = a[i] + a[j] + a[k];\n                    if\
    \ (x * x % 3 == 0) result++;\n                    sum = sum + x;\n           \
    \     }\n            }\n        }\n\n        return result + sum;", "        long\
    \ a[] = new long[n];\n        Array.Sort(a);\n        int count = 0;\n       \
    \ long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n\
    \            if (sum % 3 == 0) {\n                count++;\n                sum\
    \ = 0;\n            }\n        }\n        return (long)count;", "        ulong\
    \ sum = 0;\n        long max = n;\n        int count = 0;\n        ulong divisor\
    \ = 1;\n        long result = 0;\n        for (int i = 1; i <= n; i++)\n     \
    \   {\n            divisor = (ulong) Math.Pow(i, 2);\n            sum = sum +\
    \ divisor;\n            if (sum > max)\n            {\n                max = sum;\n\
    \                result = i;\n            }\n            sum -= divisor;\n   \
    \     }\n        return result;", "        long sum = 0;\n        for (long i\
    \ = 1; i < n; i++) {\n            for (long j = i; j < n; j++) {\n           \
    \     for (long k = 0; k < i; k++) {\n                    sum += i + j + k;\n\
    \                    if (sum > n * 3L) {\n                        break;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ sum;", "        // Complete the function\n        long a = Enumerable.Range(1,\
    \ n).Select(x => x * x - x + 1).ToArray();\n        var max = 0;\n        for\
    \ (int i = 0; i < a.Length; i++)\n            for (int j = i + 1; j < a.Length;\
    \ j++)\n                for (int k = j + 1; k < a.Length; k++) {\n           \
    \         if (a[i] + a[j] + a[k] == 3*a[i]) {\n                        if (max\
    \ < a[i] + a[j] + a[k])\n                            max = a[i] + a[j] + a[k];\n\
    \                    }\n                }\n        return max;", "        int[]\
    \ a = new int[n];\n        int[] c = new int[n];\n        Array.Sort(a);\n   \
    \     Array.Sort(c);\n        long ret = 0;\n        long max = 0;\n        long\
    \ min = 0;\n        long max2 = -1;\n        long min2 = -1;\n        foreach\
    \ (int i in a) {\n            if (max < i) max = i;\n            if (min2 > i)\
    \ min2 = i;\n        }\n        foreach (int i in c) {\n            if (max2 <\
    \ i) max2 = i;\n            if (min2 > i) min2 = i;\n        }\n        for (int\
    \ i = 0; i < n; i++) {\n            int j = (int)(i % 2 == 0 ? i / 2 : (i * i\
    \ - i + 1) / 3);\n            if (a[i] != a[j]) {\n                ret = ret +\
    \ 1;\n                if (a[i] > a[j]) {\n                    if (a[i] > max)\
    \ {\n                        max = a[i];\n                        max2 = i;\n\
    \                    }\n                    if (a[i] < min) {\n              \
    \          min = a[i];\n                        min2 = i;\n                  \
    \  }\n                    if (a[j] > max2) {\n                        max2 = a[j];\n\
    \                        max2 = j;\n                    }\n                  \
    \  if (a[j] < min2) {\n                        min2 = a[j];\n                \
    \        min2 = j;\n                    }\n                }\n               \
    \ else if (a[i] < a[j]) {\n                    if (a[j] > max) {\n           \
    \             max = a[j];\n                        max2 = j;\n               \
    \     }\n                    if (a[j] < min) {\n                        min =\
    \ a[j];\n                        min2 = j;\n                    }\n          \
    \          if (a[i] > max2) {\n                        max2 = a[i];\n        \
    \                max2 = i;\n                    }\n                    if (a[i]\
    \ < min2) {\n                        min2 = a[i];\n                        min2\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       return ret;", "        long[] a = Enumerable.Range(1, n).ToArray();\n\
    \        long[] b = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        b[i] = a[i] - a[i] - a[i] + 1;\n        }\n        Array.Sort(b);\n \
    \       long max = 0;\n        long max1 = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = 0; j < n; j++) {\n                if (i ==\
    \ j) continue;\n                if (b[i] == a[j]) {\n                    for (int\
    \ k = 0; k < n; k++) {\n                        if (k == i || k == j || k == k)\
    \ continue;\n                        if ((b[i] == a[k]) && (b[j] == a[k]) && (b[k]\
    \ == a[k])) {\n                            max = Math.Max(max, a[i]);\n      \
    \                      max1 = Math.Max(max1, a[i]);\n                        \
    \    max1 = Math.Max(max1, a[j]);\n                            max1 = Math.Max(max1,\
    \ a[k]);\n                            max1 = Math.Max(max1, a[k]);\n         \
    \                   max1 = Math.Max(max1, a[k]);\n                           \
    \ max1 = Math.Max(max1, a[k]);\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return max;", "   \
    \     long[] arr = new long[n];\n        for (int i = 1; i <= n; i++) {\n    \
    \        arr[i] = i * i - i + 1;\n        }\n        List<long> res = new List<long>();\n\
    \        long ans = 0;\n        for (int i = 1; i <= n; i++) {\n            bool\
    \ found = false;\n            for (int j = i + 1; j <= n; j++) {\n           \
    \     if (Math.Abs(arr[i] - arr[j]) < Math.Pow(10, 7)) {\n                   \
    \ ans = Math.Max(ans, arr[i] + arr[j] + arr[j] - 3);\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (found)\n                break;\n        }\n        return ans;",
  "        long ans = 0;\n        long[] a = new long[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            a[i] = i * i - i + 1;\n            if (a[i] % 3 ==\
    \ 0) {\n                ans++;\n            }\n        }\n        return ans;",
  "        long[] a = new long[n];\n        long sum = 0;\n        long x = 0;\n \
    \       for (int i = 0; i < a.Length; i++)\n            a[i] = i;\n\n        for\
    \ (int i = 0; i < a.Length; i++)\n            sum += a[i];\n        x = sum %\
    \ 3;\n\n        for (int i = 0; i < a.Length; i++) {\n            for (int j =\
    \ i+1; j < a.Length; j++) {\n                for (int k = j+1; k < a.Length; k++)\
    \ {\n                    if (a[i] < x && a[j] < x && a[k] < x)\n             \
    \           sum = sum + a[i] + a[j] + a[k];\n                }\n            }\n\
    \        }\n\n        return sum;", "        int[] arr = new int[n];\n       \
    \ for (int i = 0; i < n; ++i) {\n            arr[i] = i * i - i + 1;\n       \
    \ }\n        var tripples = arr\n            .GroupBy(i => i)\n            .Where(g\
    \ => g.Count() == 3)\n            .Select(g => g.Select(i => new { i, k = g.Key}).ToArray())\n\
    \            .ToArray();\n        return tripples\n            .Where(g => g.Sum(x\
    \ => x.i) < 3)\n            .Select(g => g.Sum(x => x.i))\n            .Aggregate((x,\
    \ y) => x + y) * 3;", "        ArrayList a = new ArrayList(n);\n        for (int\
    \ i = 0; i < n; i++){\n            a[i] = i * i - i + 1;\n        }\n        ArrayList\
    \ b = a.ConvertAll<long>(delegate (long x) {\n            return x * x - x + 1;\n\
    \        });\n        ArrayList c = new ArrayList();\n        ArrayList d = new\
    \ ArrayList();\n        ArrayList e = new ArrayList();\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for\
    \ (int k = 0; k < n; k++) {\n                    if (i < j < k) {\n          \
    \              c.Add(a[i] + a[j] + a[k]);\n                    }\n           \
    \         else if (i < k && j < k) {\n                        d.Add(a[i] + a[k]\
    \ + a[j]);\n                    }\n                    else if (i < j && k < j){\n\
    \                        e.Add(a[i] + a[j] + a[k]);\n                    }\n \
    \               }\n            }\n        }\n        long ans = 0;\n        foreach\
    \ (var item in c) {\n            ans += item;\n        }\n        return ans;",
  "        // Initializing the list of triples using the formula described above\n\
    \        long res = 0;\n        List<long> a = new List<long>();\n        for\
    \ (long i = 1; i <= n; i++)\n            a.Add(i * i - i + 1);\n        long curr\
    \ = 1;\n        for (long i = 0; i < a.Count; i++)\n        {\n            long\
    \ j = i + 1;\n            long k = i + 2;\n            long aSum = a[i] + a[j]\
    \ + a[k];\n            if (aSum == curr)\n            {\n                if (curr\
    \ < 3)\n                    res++;\n                curr = aSum;\n           \
    \ }\n        }\n        return res;", "        List<long> arr = new List<long>();\n\
    \        for (int i = 1; i < n; i++) {\n            arr.Add(i * i - i + 1);\n\
    \        }\n        return GetMaxTriples(arr);", "        List<long> a = new List<long>();\n\
    \        long aSum = 0;\n        long last = 0;\n        for (int i = 1; i <=\
    \ n; i++) {\n            aSum += a[i];\n            if (aSum > 0) {\n        \
    \        if (last == 0) {\n                    last = aSum;\n                }\n\
    \                else {\n                    long temp = aSum - last;\n      \
    \              if (temp % 3 == 0) {\n                        a.Add(temp);\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ a.Count;", "        long res = 0;\n        long[] a = new long[n];\n       \
    \ for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++)\
    \ {\n                if (j != i) {\n                    if (a[j] == a[i] && a[j]\
    \ + a[i] == 3 * a[i]) {\n                        res++;\n                    }\n\
    \                }\n            }\n        }\n        return res;", "        int[]\
    \ a = new int[n];\n        long ret = 0;\n\n        Array.Sort(a);\n        foreach(var\
    \ x in a) {\n            if(x == 0)\n                continue;\n            for(var\
    \ i = 1; i < n; i++) {\n                if(x == i)\n                    continue;\n\
    \                for(var j = i; j < n; j++) {\n                    if(x == j)\n\
    \                        continue;\n                    var k = (j - i + 1);\n\
    \                    if(x * x + k == i * i - j + 1) {\n                      \
    \  ret = ret + 3;\n                        break;\n                    }\n   \
    \             }\n            }\n        }\n\n        return ret;", "        long[]\
    \ array = new long[n + 1];\n        for (int i = 0; i <= n; i++) {\n         \
    \   array[i] = i * i - i + 1;\n        }\n        var count = new Dictionary<long,\
    \ long>();\n        for (int i = 1; i <= n; i++) {\n            int j = i;\n \
    \           while (j > 0) {\n                if (j % 3 == 0) {\n             \
    \       count.Add((i * i + j), 1);\n                    j--;\n               \
    \ } else if (j % 3 == 1) {\n                    count.Add((i * i - j + i), 1);\n\
    \                    j--;\n                } else if (j % 3 == 2) {\n        \
    \            count.Add((i * i + j - i), 1);\n                    j--;\n      \
    \          }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long key in count.Keys) {\n            if (count.ContainsKey(key))\
    \ {\n                result.Add(key);\n            }\n        }\n        var sum\
    \ = 0;\n        foreach (long key in result) {\n            sum += count;\n  \
    \      }\n        return sum;", "        long result = 0;\n        long a[] =\
    \ new long[n];\n        for (long i = 0; i < n; i++) {\n            a[i] = i *\
    \ i - i + 1;\n            result += a.Where(item => item < 3 * Math.Sqrt(item)).Count();\n\
    \        }\n        return result;", "        long a = new long[n];\n        for\
    \ (int i = 0; i < n; i++) {\n            long s = i * i - i + 1;\n           \
    \ long l = i + 1;\n            long r = n - 1;\n            a[l] = s;\n      \
    \      a[r] = s - 1;\n        }\n        long k = 0;\n        int max = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            long s = a[i];\n          \
    \  for (int j = i + 1; j < n; j++) {\n                long l = a[j];\n       \
    \         long r = a[k];\n                long s = s + l + r;\n              \
    \  if (s > max) {\n                    max = s;\n                }\n         \
    \       long ss = (s * s) - 2 * s;\n                if (ss == 0) continue;\n \
    \               bool isTriple = false;\n                for (int k = 0; k < n\
    \ && !isTriple; k++) {\n                    long t = a[k];\n                 \
    \   if (ss == t) {\n                        isTriple = true;\n               \
    \     }\n                }\n                if (isTriple) {\n                \
    \    k++;\n                }\n            }\n        }\n        return max;",
  "        long[] a = new long[n];\n        Array.Sort(a);\n        int nTriples =\
    \ 0;\n        for (int i = 0; i < a.Length; i++) {\n            for (int j = i\
    \ + 1; j < a.Length; j++) {\n                if (a[i] == a[j]) {\n           \
    \         nTriples++;\n                }\n            }\n        }\n        return\
    \ nTriples;", "        int[] a = new int[n];\n        for (int i = 1; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        int[] b = new int[n];\n        int\
    \ max = a[0];\n        for (int i = 1; i < n; i++) {\n            for (int j =\
    \ 1; j < n; j++) {\n                int k = i - j;\n                if (b[i -\
    \ 1] == 0 && b[j - 1] == 0 && b[k - 1] == 0)\n                    max = Math.Max(max,\
    \ a[i]);\n                else {\n                    for (int k = 0; k < n; k++)\n\
    \                        b[k] = (b[k] > 0) ? b[k] : (a[i] - a[j] - a[k]) % 3;\n\
    \                    max = Math.Max(max, b[i]);\n                }\n         \
    \   }\n        }\n        return max;", "        List<long> arr = new List<long>(n);\n\
    \        for (int i = 0; i < n; i++) {\n            arr.Add(i * i - i + 1);\n\
    \        }\n        long ans = GetMaxSum(arr);\n        return ans;", "      \
    \  long maxTriplet = 0;\n        long[] a = new long[n];\n        long triple\
    \ = 0;\n        ulong prime = Convert.ToUInt64(\"3\");\n        ulong bigger =\
    \ prime > n ? prime : n;\n        ulong lastBigger = 0;\n        bool isPrime\
    \ = true;\n        for(ulong i = 1; i < n; i++) {\n            isPrime = true;\n\
    \            for(ulong j = 1; j <= Math.Sqrt(n); j++) {\n                if(a[j]\
    \ < bigger) {\n                    a[j] = bigger;\n                }\n       \
    \         if(Math.Abs(a[j] - bigger) <= 1) {\n                    if(a[j] > lastBigger)\
    \ {\n                        lastBigger = a[j];\n                    }\n     \
    \               for(ulong k = j; k < n; k++) {\n                        if((i\
    \ * i + a[k] == a[j] * a[k])) {\n                            isPrime = false;\n\
    \                            break;\n                        }\n             \
    \       }\n                }\n                else {\n                    isPrime\
    \ = true;\n                }\n            }\n            if(isPrime) {\n     \
    \           for(ulong j = 1; j <= n; j++) {\n                    if(a[j] < bigger)\
    \ {\n                        a[j] = bigger;\n                    }\n         \
    \           if(Math.Abs(a[j] - bigger) <= 1) {\n                        if(a[j]\
    \ > lastBigger) {\n                            lastBigger = a[j];\n          \
    \              }\n                        for(ulong k = j; k < n; k++) {\n   \
    \                         if((i * i + a[k] == a[j] * a[k])) {\n              \
    \                  triple++;\n                            }\n                \
    \        }\n                    }\n                }\n                if(triple\
    \ > maxTriplet) {\n                    maxTriplet = triple;\n                }\n\
    \            }\n            triple = 0;\n        }\n        return maxTriplet;",
  "        int[] a = new int[n];\n        long res = 0;\n\n        for(int i = 1;\
    \ i < n; i++)\n            a[i] = i * i - i + 1;\n\n        for(int i = 1; i <\
    \ n; i++) {\n            for(int j = 1; j < n; j++) {\n                for(int\
    \ k = 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] == 3 * i) {\n\
    \                        res += 1;\n                        break;\n         \
    \           }\n                }\n            }\n        }\n        return res;",
  "        long sumOfAllTriples = 0;\n        int[] nums = Enumerable.Range(1, n).ToArray();\n\
    \        long[] a = new long[nums.Length];\n        int index = 1;\n        for\
    \ (int i = 1; i <= n; i++) {\n            while (index <= nums.Length) {\n   \
    \             a[index] = i * i - i + 1;\n                index++;\n          \
    \  }\n        }\n        for (int i = 1; i <= nums.Length; i++) {\n          \
    \  sumOfAllTriples += a[i - 1];\n        }\n        return sumOfAllTriples;",
  "        long a[n + 1] = new long[n + 1];\n\n        for (int i = 1; i <= n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        int result = 0;\n \
    \       for (int i = 1; i < n + 1; i++) {\n            long sum = 0;\n       \
    \     long temp = a[i];\n            for (int j = 0; j < n; j++) {\n         \
    \       long temp2 = a[j];\n                sum += temp;\n                sum\
    \ += temp2;\n            }\n            int res = (sum & 3) == 0;\n          \
    \  if (res)\n                result++;\n        }\n        return result;", " \
    \       List<long> a = new List<long>();\n        for (long i = 1; i <= n; i++)\n\
    \            a.Add(i * i - i + 1);\n        long max = (long) Math.Sqrt(n);\n\
    \        long ans = 0, i = 0, j = 0, k = 0;\n        while ((i < a.Count) && (j\
    \ < a.Count) && (k < a.Count)) {\n            if (a[i] < a[j] && a[i] < a[k] &&\
    \ a[j] < a[k]) {\n                if (a[i] % 3 == 0 && a[j] % 3 == 0 && a[k] %\
    \ 3 == 0)\n                    ans += 1;\n            }\n            i++;\n  \
    \          j++;\n            k++;\n        }\n        return ans;", "        var\
    \ a = Enumerable.Range(1, n).Select(x => (x * x - x + 1)).ToArray();\n       \
    \ long tripleCount = 0;\n        long s = a[0] + a[1] + a[2]; // since a[0]+a[1]+a[2]\
    \ can be any positive integer s\n        for (int i = 1; i < a.Length; i++) {\n\
    \            tripleCount += 1;\n            for (int j = i + 1; j < a.Length;\
    \ j++) {\n                if (i % 2 == 0) {\n                    s += a[j];\n\
    \                }\n                else {\n                    s += a[i] - (a[j]\
    \ * j / 2);\n                }\n            }\n            if (s % 3 == 0) {\n\
    \                return tripleCount;\n            }\n            s = a[0] + a[1]\
    \ + a[2];\n        }\n        return -1;", "        long counter = 0;\n      \
    \  long temp = 0;\n        long start = 0;\n        long end = 0;\n        while\
    \ (start <= n) {\n            end = start + 3;\n            counter = 0;\n   \
    \         while (start <= end && end <= n) {\n                temp = start*start-end*end+end*end-start*start+start*start;\n\
    \                if (temp%3 == 0) {\n                    counter++;\n        \
    \        }\n                start++;\n                end++;\n            }\n\
    \            if (counter > 0 && counter < 3) {\n                return counter;\n\
    \            }\n            start++;\n        }\n        return 0;", "       \
    \ long a[n];\n        long sum = 0;\n\n        for (int i = 0; i < n; i++) {\n\
    \            a[i] = i * i - i + 1;\n            sum += a[i];\n        }\n\n  \
    \      long maxSum = -(long.MaxValue);\n\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n\
    \                    for (int k = 0; k < n; k++) {\n                        long\
    \ tmp = a[i] + a[j] + a[k];\n\n                        if (tmp > maxSum) {\n \
    \                           maxSum = tmp;\n                        }\n       \
    \             }\n                }\n            }\n        }\n\n        return\
    \ sum;", "        var res = new List<long>();\n        for (int i = 1; i <= n;\
    \ i++) {\n            var cur = i * i - i + 1;\n            var cur2 = cur * cur\
    \ - cur + 1;\n            if (cur2 % 3 == 0) {\n                res.Add(cur);\n\
    \            }\n        }\n        return res.Count;", "        long[] a = new\
    \ long[n];\n        long sum = 0;\n        for (int i = 0; i < a.Length; i++)\
    \ {\n            a[i] = i * i - i + 1;\n            sum = sum + a[i];\n      \
    \  }\n        long max = 1;\n        for (int i = 0; i < a.Length; i++) {\n  \
    \          for (int j = 0; j < a.Length; j++) {\n                for (int k =\
    \ 0; k < a.Length; k++) {\n                    if (a[i] < a[j] && a[j] < a[k]\
    \ && a[i] + a[j] + a[k] == sum)\n                        return max;\n       \
    \             else\n                        max++;\n                }\n      \
    \      }\n        }\n        return max;", "        long[] arr = new long[n];\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum\
    \ += i;\n            arr[i] = sum;\n        }\n        int counter = 0;\n    \
    \    foreach (var item in arr) {\n            for (int j = 0; j < item.GetHashCode();\
    \ j++) {\n                for (int k = 0; k < item.GetHashCode(); k++) {\n   \
    \                 counter++;\n                }\n            }\n        }\n  \
    \      return counter;", "        long a[] = new long[n];\n        Array.Sort(a);\n\
    \        var max = (long)Math.Pow(3,(int)Math.Sqrt(3));\n        var max3 = new\
    \ List<long>();\n        long n3;\n        for (var i = 1; i < n; i++) {\n   \
    \         for (var j = 0; j < i; j++) {\n                for (var k = 0; k < j;\
    \ k++) {\n                    if (Math.Abs(a[i] - a[j] - a[k]) > max) {\n    \
    \                    n3 = a[i] - a[j] - a[k];\n                        if (n3\
    \ > max3[0]) {\n                            max3.Clear();\n                  \
    \          max3.Add(n3);\n                        } else {\n                 \
    \           if (n3 > max3[0]) {\n                                max3.Clear();\n\
    \                                max3.Add(n3);\n                             \
    \   break;\n                            }\n                        }\n       \
    \             }\n                }\n            }\n        }\n        return max3.Count;",
  "        long a[] = new long[n + 1];\n        long m = 0;\n        for (int i =\
    \ 1; i < a.Length; i++) {\n            a[i] = a[i-1] * a[i-1] - i + 1;\n     \
    \       if (a[i] > m) {\n                m = a[i];\n            }\n        }\n\
    \        long c = 0;\n        for (int i = 1; i < a.Length; i++) {\n         \
    \   c += a[i] > m;\n        }\n        return c;", "        long[] a = new long[n];\n\
    \        long tripleSum = 0;\n        long i = 0;\n        // Fill the array with\
    \ values from 1 to n and each element multiplied by itself\n        for (int j\
    \ = 0; j < n; j++) {\n            a[j] = j * j + i + 1;\n            tripleSum\
    \ = tripleSum + a[j];\n        }\n        // Iterate through all a[i] where i\
    \ < n\n        for (i = 1; i <= n; i++) {\n            long tripleSum2 = 0;\n\
    \            long j = 1;\n            while (j < i) {\n                tripleSum2\
    \ = tripleSum + a[j] * a[j];\n                j++;\n            }\n          \
    \  long k = i - 1;\n            while (k >= 1) {\n                tripleSum2 =\
    \ tripleSum2 + a[k] * a[k];\n                k--;\n            }\n           \
    \ if (tripleSum2 % 3 == 0) {\n                return i;\n            }\n     \
    \   }\n        long result = 0;\n        return result;", "        var result\
    \ = new List<long>();\n        var a = new long[n];\n        for (int i = 1; i\
    \ < n; ++i) {\n            a[i - 1] = (i * i - i + 1);\n        }\n        var\
    \ counter = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j\
    \ = 0; j < n; ++j) {\n                if (i > j && i < j) {\n                \
    \    for (int k = i; k < j; ++k) {\n                        if (a[k] * a[k] -\
    \ a[k] - a[i] == a[k] * a[k] * 3 && a[k] > i) {\n                            counter++;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        result.Add(counter);\n        GC.Collect(GC.MaxGeneration,\
    \ GCCollectionMode.Forced);\n        GC.WaitForPendingFinalizers();\n        GC.Collect(GC.MaxGeneration,\
    \ GCCollectionMode.Forced);\n        return result.Max();", "        // initialize\
    \ an array of size n\n        long[] a = Enumerable.Range(1, n).ToArray();\n\n\
    \        // create an array to hold the results\n        long[] result = new long[n];\n\
    \n        // loop through all possible combinations, \n        // but only consider\
    \ valid ones (0 < i, i < n)\n        for (int i = 0; i < n; i++) {\n         \
    \   for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    // check if the i-th and j-th elements are valid\n\
    \                    if (!(a[i] < i || j < k || k < i || a[j] < j || k < j)) {\n\
    \                        // if it is not valid, break the loop\n             \
    \           break;\n                    }\n                    // add up the triple\
    \ \n                    result[i] += a[i];\n                    result[j] += a[j];\n\
    \                    result[k] += a[k];\n                }\n            }\n  \
    \      }\n\n        // return the result\n        return result.Where(r => r ==\
    \ 3 * r.Max()).Count();", "        Debug.Assert(n > 1);\n        long tripleCount\
    \ = 0;\n        for (int i = 1; i <= n; i++) {\n            long currentValue\
    \ = i * i - i + 1;\n            long currentSum = currentValue + 1;\n        \
    \    for (int j = i + 1; j <= n; j++) {\n                long currentSum += j;\n\
    \                if (currentSum > 9 && currentSum > currentValue) {\n        \
    \            tripleCount++;\n                }\n            }\n        }\n   \
    \     return tripleCount;", "        long a = n * (n * n - n) + 1;\n        long\
    \ a1 = (long)Math.Ceiling(a);\n        long a2 = a - a1;\n        long count =\
    \ 0;\n        List<long> L = new List<long>();\n        for (int i = 1; i <= n1;\
    \ i++) {\n            long temp = a1 / i;\n            for (int j = 1; j <= n2;\
    \ j++) {\n                long temp1 = a2 / j;\n                for (int k = 1;\
    \ k <= n3; k++) {\n                    long temp2 = a2 / k;\n                \
    \    int result = temp1 * temp1 + temp2 * temp2 + temp1;\n                   \
    \ result = result % 3;\n                    if (result == 0) {\n             \
    \           L.Add(i);\n                        L.Add(j);\n                   \
    \     L.Add(k);\n                    }\n                    count++;\n       \
    \         }\n            }\n        }\n        long res = Math.Max(L.Count);\n\
    \        return res;", "        List<long> a = Enumerable.Range(1, n).ToList();\n\
    \        Stopwatch sw = new Stopwatch();\n        sw.Start();\n        long count\
    \ = 0;\n        long result = 0;\n        for (int i = 0; i < a.Count - 1; i++)\
    \ {\n            for (int j = i + 1; j < a.Count; j++) {\n                for\
    \ (int k = j + 1; k < a.Count; k++) {\n                    long tripleSum = a[i]\
    \ + a[j] + a[k];\n                    if (tripleSum % 3 == 0) {\n            \
    \            count++;\n                    }\n                }\n            }\n\
    \        }\n        result = count;\n        sw.Stop();\n        Console.WriteLine(count);\n\
    \        Console.WriteLine(\"Elapsed: {0}ms\", sw.ElapsedMilliseconds);\n    \
    \    return result;", "        var arr = new List<long>(n);\n        long max\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            arr[i] = i * i - i\
    \ + 1;\n            max = Math.Max(max, arr[i]);\n        }\n        var max =\
    \ arr.Max();\n        return Enumerable.Range(0, n).Count(n => arr[n] == max);",
  "        long a = new long[n];\n        Array.Sort(a);\n        int index = 1;\n\
    \        long triple;\n        do {\n            long sum = 0;\n            triple\
    \ = a[index];\n            for (int i = index; i < a.Length; i++) {\n        \
    \        long tmp = a[i];\n                sum += tmp + tmp + tmp;\n         \
    \   }\n            sum *= 3;\n            if (sum >= triple)\n               \
    \ return 1;\n            index++;\n        } while (index != a.Length);\n    \
    \    return 0;", "        long a[] = new long[n];\n        int[] used = new int[n];\n\
    \        long[] count = new long[n];\n        long ans = 0;\n        BitArray\
    \ mask = new BitArray(128);\n\n        long start = System.DateTime.Now.Ticks;\n\
    \        int cnt = 1;\n        for (long i = 0; i < n; i++) {\n            a[i]\
    \ = i * i - i + 1;\n            if (used[i] == 0) {\n                if (a[i]\
    \ % 3 == 0) {\n                    count[i] += 1;\n                }\n       \
    \         else {\n                    cnt++;\n                    if (!mask.Set(i\
    \ / 32)) {\n                        count[i] = 1;\n                    }\n   \
    \                 else {\n                        count[i] = 0;\n            \
    \        }\n                }\n                used[i] = 1;\n            }\n \
    \       }\n        for (int i = 0; i < n; i++) {\n            if (used[i]) {\n\
    \                long tmp = a[i];\n                for (int j = i; j < n; j++)\
    \ {\n                    tmp -= (3 * a[j]);\n                    if (tmp % 3 ==\
    \ 0) {\n                        count[j] += 1;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        long\
    \ end = System.DateTime.Now.Ticks;\n        long time = end - start;\n       \
    \ Console.WriteLine(time + \":\" + \"GetMaxTriples:\" + cnt);\n        return\
    \ cnt / 3;", "        long a = new long[n];\n        \n        List<long> validTriples\
    \ = new List<long>();\n        int count = 0;\n\n        for (int i = 0; i < n;\
    \ i++) {\n            long x = i * i - i + 1;\n            if (x < 0) {\n    \
    \            return 0;\n            }\n\n            for (int j = 0; j < n; j++)\
    \ {\n                long y = j * j - j + 1;\n                if (y < 0) {\n \
    \                   continue;\n                }\n\n                for (int k\
    \ = 0; k < n; k++) {\n                    long z = k * k - z + 1;\n          \
    \          if (z < 0) {\n                        continue;\n                 \
    \   }\n\n                    long sum = x + y + z;\n                    if (sum\
    \ % 3 == 0) {\n                        count++;\n                        if (sum\
    \ > 0) {\n                            validTriples.Add(sum);\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n\n        if (count > 0) {\n            return validTriples.Max();\n    \
    \    }\n        else {\n            return 0;\n        }", "        // Your code\
    \ here\n        long a[] = new long[n];\n        long sum = 0;\n        long max\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <\
    \ n; j++) {\n                if (j < i && sum == a[j] + a[i] && (sum % 3) == 0)\
    \ {\n                    for (int k = 0; k < n; k++) {\n                     \
    \   a[k] = a[k] - a[j];\n                        if (a[k] > max)\n           \
    \                 max = a[k];\n                    }\n                }\n    \
    \            a[j] = a[j] - a[i];\n                sum++;\n            }\n    \
    \    }\n        return max;", "        long[] a = new long[n + 1];\n        for\
    \ (int i = 1; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n  \
    \      int max = 0;\n        int k = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = i + 1; j < n; j++) {\n                for (int k = 0;\
    \ k < n; k++) {\n                    int sum = a[i] + a[j] + a[k];\n         \
    \           if (sum % 3 == 0) {\n                        max++;\n            \
    \        }\n                }\n            }\n        }\n        return max;",
  "        if (n == 0)\n            return 0;\n        var list = new List<long>();\n\
    \        var max = 0;\n        for (int i = 1; i <= n; i++) {\n            list.Add(i);\n\
    \            max += i;\n        }\n        var a = new long[max];\n        for\
    \ (int i = 1; i <= max; i++) {\n            a[i - 1] = (i * i - 1 + 1);\n    \
    \    }\n        var count = 0;\n        var result = Enumerable.Range(1, n).Where((i)\
    \ => list[i] < list[i + 1] && list[i] < list[i + 2]).Count();\n        for (int\
    \ i = 1; i <= max; i++) {\n            if (a[i - 1] == a[i] + a[i + 1] + a[i +\
    \ 2]) {\n                count++;\n            }\n        }\n        return count;",
  "        long triple = 0;\n        long triples = 0;\n        long j = 0;\n    \
    \    long k = 0;\n        for (int i = 0; i < n; i++) {\n            k = i * (i\
    \ * (i + 1));\n            if (i != j) {\n                for (; j <= k; j++)\
    \ {\n                    for (; k <= j; k++) {\n                        if (j\
    \ != k) {\n                            for (; k <= j; k++) {\n               \
    \                 if (k > j) {\n                                    triple +=\
    \ 1;\n                                }\n                                if (k\
    \ == j) {\n                                    if (i != k) {\n               \
    \                         triple += 2;\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \          if (triple > triples) {\n                triples = triple;\n      \
    \      }\n            if (i > j) {\n                triple = 0;\n            \
    \    j++;\n            }\n        }\n        return triples;", "        long[]\
    \ a = new long[n];\n        long max = 0;\n        \n        //initialize array\n\
    \        for (int i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n \
    \       }\n\n        //search\n        for (int i = 0; i < n; i++) {\n       \
    \     for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++)\
    \ {\n                    if (a[i] < a[j] && a[i] < a[k]) {\n                 \
    \       max++;\n                    }\n                }\n            }\n    \
    \    }\n\n        return max;", "        var result = new List<long>();\n    \
    \    var primes = new List<long>();\n        for(int i = 2; i <= n; i++)\n   \
    \     {\n            primes.Add(i);\n        }\n        long a = new long[n];\n\
    \        long count = 0;\n        foreach (var p in primes)\n        {\n     \
    \       int start = (int)(p / 3);\n            int end = (int)(p / 3 + (p % 3\
    \ == 0));\n            int index = (int)(a[start] - a[end]);\n            if(a[start]\
    \ + a[end] + index > 0)\n            {\n                result.Add(index);\n \
    \           }\n        }\n        return result.Count;", "        if (n < 0) throw\
    \ new ArgumentOutOfRangeException(\"n\", \"n is not a positive number.\");\n \
    \       long a[] = new long[n];\n        long total = 0;\n        for (int i =\
    \ 1; i <= n; i++) {\n            long m = i * i - i + 1;\n            if (m %\
    \ 3 == 0) total += 3;\n            a[i - 1] = i;\n        }\n        if (total\
    \ < 2) return 1;\n        return total;", "        long[] a = new long[n];\n \
    \       long count = 0;\n        for (int i = 0; i < n; i++)\n            a[i]\
    \ = i * i - i + 1;\n        for (int i = 1; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] == (3 * i) * (3 * j) * (3 * k)) {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        a[0] = 1;\n        long res = 0;\n        for (int i = 1; i < a.Length;\
    \ i++) {\n            long temp = 0;\n            for (int j = i-1; j >= 0; j--)\
    \ {\n                temp += a[j];\n            }\n            a[temp] = temp\
    \ + i;\n            if (temp % 3 == 0) res++;\n        }\n        return res;",
  "        long a = new long[(int)n];\n        a[0] = 0;\n        a[1] = 1;\n    \
    \    long sum = 0;\n        for(int i = 2; i <= n; i++){\n            sum += a[i]\
    \ * a[i - 1];\n            a[(int)i / 2]++;\n        }\n        long count = 0;\n\
    \        for(int i = 1; i < n; i++){\n            sum += a[i] * a[i - 1];\n  \
    \          if((int)sum % 3 == 0)\n                count++;\n        }\n      \
    \  return count;", "        long sum = 0;\n        long[] arr = new long[n];\n\
    \        long a = 3, count = 0;\n        for (int i = 1; i <= n; i++) {\n    \
    \        arr[i-1] = i*i-i+1;\n        }\n        for (int i = 1; i <= n; i++)\
    \ {\n            for (int j = 1; j <= n; j++) {\n                for (int k =\
    \ 1; k <= n; k++) {\n                    if (arr[i-1]+arr[j-1]+arr[k] == a) {\n\
    \                        count++;\n                        sum+=2;\n         \
    \           }\n                }\n            }\n        }\n        return sum;",
  "        long a = new long[n + 1];\n        long sum = 0;\n        for (int i =\
    \ 1; i <= n; i++) {\n            sum += i * i - i + 1;\n            a[i - 1] =\
    \ sum;\n        }\n        long max = 0;\n        for (int i = 1; i <= n; i++)\
    \ {\n            long sum = 0;\n            for (int j = i + 1; j <= n; j++) {\n\
    \                sum += a[j - i];\n            }\n            if (sum % 3 == 0)\
    \ {\n                max = i;\n                break;\n            }\n       \
    \ }\n        return max;", "        long a = new long[n];\n\n        var result\
    \ = new long[a.Length];\n\n        for (int i = 0; i < a.Length; i++) {\n    \
    \        long temp = a[i];\n\n            a[i] = temp * temp - temp + 1;\n   \
    \     }\n\n        for (int i = 0; i < a.Length; i++) {\n            for (int\
    \ j = 0; j < a.Length; j++) {\n                for (int k = 0; k < a.Length; k++)\
    \ {\n                    if (i < j < k) {\n                        if ((i != j)\
    \ && (i != k) && (j != k)) {\n                            if (a[i] >= a[j] &&\
    \ a[i] >= a[k]) {\n                                result[i * a.Length + j * a.Length\
    \ + k] += 1;\n                                a[i] = a[j] = a[k] = 0;\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n        }\n\n        return result.Sum();",
  "        long sum = 0;\n        long[] a = Enumerable.Range(1, n).Select(i => i\
    \ * i - i + 1).ToArray();\n        foreach (var triple in a) {\n            sum\
    \ += triple;\n        }\n        return sum;", "        long count = 0, max =\
    \ 1;\n        List<long> a = new List<long>();\n        for(int i = 1; i < n;\
    \ i++) {\n            int n1 = i * i - i + 1;\n            int n2 = i;\n     \
    \       int n3 = i + 1;\n            a.Add(n1);\n            a.Add(n2);\n    \
    \        a.Add(n3);\n        }\n        long sum = 0;\n        for(int i = 0;\
    \ i < a.Count - 1; i++) {\n            long n1 = a[i], n2 = a[i + 1];\n      \
    \      long n3 = a[i + 2];\n            long res = n1 * n1 - n2 + n3;\n      \
    \      if((res % 3) != 0) {\n                count++;\n            }\n       \
    \     sum += res;\n        }\n        if(count == 0)\n            return max;\n\
    \        return sum;", "        List<long> list = new List<long>() { 1 };\n  \
    \      if (n < 3) return 0;\n        if (n % 3 == 0) return 3;\n        int counter\
    \ = 1;\n        for (int i = 1; i < n; i++) {\n            long temp1 = list.Last();\n\
    \            long temp2 = temp1 * temp1 - temp1 + 1;\n            list.Add(temp2);\n\
    \            if (temp2 * temp2 - temp1 + 1 == 3) counter++;\n        }\n     \
    \   return counter;", "        long a[] = new long[n];\n        long sum = 0;\n\
    \        bool isCheck = false;\n        for (int i = 1; i <= n; i++) {\n     \
    \       sum += i;\n            isCheck = true;\n            for (int j = 1; j\
    \ <= i; j++) {\n                for (int k = 1; k <= j; k++) {\n             \
    \       long product = a[i] * a[j] * a[k];\n                    if (product %\
    \ 3 == 0) {\n                        isCheck = false;\n                      \
    \  break;\n                    }\n                }\n                if (isCheck)\n\
    \                    break;\n            }\n            if (isCheck)\n       \
    \         a[i - 1] = sum;\n        }\n        return a[n - 1];", "        long[]\
    \ a = new long[n];\n        long max = (long)0;\n        for (int i = 0; i < n;\
    \ i++) {\n            a[i] = i * i - i + 1;\n            if (max == a[i]) {\n\
    \                max = a[i];\n            }\n        }\n        return GetMax(a,\
    \ n);", "        long a[n];\n        int count = 0;\n        long n3 = n*3;\n\
    \        long n2 = n*2;\n        long n1 = n*1;\n        for(int i = 1; i < n;\
    \ i++) {\n            a[i] = i*i - i + 1;\n        }\n        for(int i = 1; i\
    \ < n; i++) {\n            for(int j = 1; j < n; j++) {\n                for(int\
    \ k = 1; k < n; k++) {\n                    if(i+j+k == 3 && a[i] > a[j] && a[j]\
    \ > a[k]) {\n                        count++;\n                    }\n       \
    \         }\n            }\n        }\n        return (long)((double)count / n3);",
  "        long sum = 0;\n        var a = new long[n];\n        for(int i = 1; i <=\
    \ n; i++) {\n            a[i] = i * i - i + 1;\n            if(i + 1 < n) {\n\
    \                if(a[i] % 3 == 0 && a[i+1] % 3 == 0 && a[i+2] % 3 == 0) {\n \
    \                   sum += i;\n                    i += 1;\n                }\n\
    \            }\n        }\n        return sum;"]
stop_tokens:
- "\n    }\n"
