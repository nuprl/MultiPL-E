name: HumanEval_44_change_base
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Change numerical base of input number x to base.\n    // return\
  \ string representation after the conversion.\n    // base numbers are less than\
  \ 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L),\
  \ (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n\
  \    public static string ChangeBase(long x, long numBase) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L),\
  \ (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\"\
  )));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L),\
  \ (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"\
  1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L),\
  \ (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\"\
  )));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L),\
  \ (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\"\
  )));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        bool isNegative\
    \ = false;\n        if (x < 0) {\n            isNegative = true;\n           \
    \ x = -x;\n        }\n        long d = (long)Math.Pow(numBase, (int)Math.Log10(Math.Abs(x)));\n\
    \        long r = x;\n        while (d != 0) {\n            long m = d / numBase;\n\
    \            sb.Append(r / numBase);\n            r = m % numBase;\n         \
    \   d = m / numBase;\n        }\n        if (isNegative)\n            sb.Append(\"\
    -\");\n        return sb.ToString();", "        string s = \"\";\n        while\
    \ (x > numBase) {\n            long t = x;\n            x = numBase % x;\n   \
    \         numBase = t;\n        }\n        while (x > 0) {\n            s = s\
    \ + x.ToString();\n            x = x / numBase;\n        }\n        return s;",
  "        string result = x.ToString();\n        string tmp = result;\n        long\
    \ factor = 1;\n        while (tmp.Length > 0) {\n            long n = long.Parse(tmp.Substring(0,\
    \ tmp.Length - 1));\n            if (numBase >= n) {\n                factor *=\
    \ numBase;\n                result += tmp.Substring(0, tmp.Length - 1);\n    \
    \        }\n            tmp = tmp.Substring(tmp.Length - 1);\n        }\n    \
    \    factor *= numBase;\n        while (result[result.Length - 1] != '0') {\n\
    \            result += factor.ToString();\n            factor /= numBase;\n  \
    \      }\n        return result;", "        string result = \"\";\n        long\
    \ number = x;\n\n        while (number > 0) {\n            long digit = number\
    \ % numBase;\n            if (digit == 0) \n                result = digit.ToString();\n\
    \            else\n                result = digit + result;\n            number\
    \ /= numBase;\n        }\n        return result;", "        string res = \"\"\
    ;\n        int remainder;\n        long temp;\n        while (x > 0) {\n     \
    \       temp = x % numBase;\n            res += Convert.ToString(temp);\n    \
    \        x = x / numBase;\n        }\n        reverseString(res);\n        return\
    \ res;", "        if (x >= numBase * 10) throw new ArgumentException(\"Value must\
    \ be less than \" + numBase * 10);\n        x = x / numBase;\n        string result\
    \ = \"\";\n        while (x > 0) {\n            result += x % 10;\n          \
    \  x = x / 10;\n        }\n        return result;", "        // TODO: Complete\
    \ this function\n        long m = x;\n        long n = numBase;\n        long\
    \ result = 1;\n        string ret = \"\";\n        while (m > n) {\n         \
    \   result = result * n;\n            m = m / n;\n        }\n        ret = (m\
    \ % n) + result;\n        return ret;", "        string num;\n        string base;\n\
    \        num = Convert.ToString(x, numBase);\n        base = Convert.ToString(numBase,\
    \ 10);\n        StringBuilder output = new StringBuilder();\n        for (int\
    \ i = 0; i < num.Length; i++) {\n            if (num.Length - i >= base.Length)\
    \ {\n                output.Append(base.Substring(0, base.Length - num.Length));\n\
    \                break;\n            }\n            output.Append(base.Substring(0,\
    \ base.Length - num.Length));\n        }\n        long finalNum = Convert.ToInt64(output.ToString(),\
    \ 10);\n        return finalNum.ToString();", "        long numDigits = x.ToString().Length;\n\
    \        string result = x.ToString();\n        while (numDigits >= numBase) {\n\
    \            long r = Long.Parse(result, numBase);\n            if (numDigits\
    \ > numBase + 1) {\n                result += (Convert.ToChar(Convert.ToInt32(Math.Floor((numDigits\
    \ - numBase) / 2)) + 65).ToString());\n            }\n            else {\n   \
    \             result += (Convert.ToChar(Convert.ToInt32(Math.Floor((numDigits\
    \ - numBase) / 2)) + 97).ToString());\n            }\n            numDigits--;\n\
    \        }\n        if (numDigits > numBase) {\n            result += ((Convert.ToChar(Convert.ToInt32(Math.Floor((numDigits\
    \ - numBase) / 2)) + 65).ToString()));\n        }\n        return result;", " \
    \       // Convert the number into a decimal representation using base\n     \
    \   // numBase (2 to 16).\n        var number = Decimal.ToDecimal(x) / numBase;\n\
    \        // Convert the decimal representation into a string using a specified\
    \ base\n        // Change base from 2 to 10 (decimal).\n        var strNumber\
    \ = number.ToString(\"10\");\n        // Return string representation in base\
    \ numBase.\n        return strNumber;", "        BigInteger b = new BigInteger(x.ToString());\n\
    \        BigInteger b2 = b.Pow(numBase);\n        string y = b2.ToString();\n\
    \        return y;", "        BigInteger num = new BigInteger(x.ToString(), numBase);\n\
    \        return Convert.ToString(num);", "        long temp = x;\n        string\
    \ s = \"\";\n        while (numBase != 0) {\n            long remainder = temp\
    \ % numBase;\n            temp /= numBase;\n            s += remainder.ToString();\n\
    \            numBase--;\n        }\n        return s;", "        var result =\
    \ x.ToString();\n        result = result.PadLeft(numBase.ToString().Length, '0');\n\
    \        result = result.Substring(numBase.ToString().Length - result.Length);\n\
    \        return result;", "        if (numBase > 10) {\n            throw new\
    \ ArgumentException(\"Base number should not be larger than 10.\");\n        }\n\
    \n        long xDigits = Convert.ToInt64(Math.Pow(numBase, (long)Math.Log10(x)));\n\
    \        long result = x / (long)Math.Pow(numBase, x);\n        long remainder\
    \ = x % (long)Math.Pow(numBase, x);\n\n        return result.ToString().PadLeft(xDigits,\
    \ '0') + (remainder > 0 ? \"1\" : \"\");", "        int numDigits;\n        string\
    \ newBase = numBase.ToString();\n        long value = x;\n        if (numBase\
    \ == 1)\n            return value.ToString();\n\n        numDigits = Convert.ToInt32(Math.Log10(value));\n\
    \        if (numDigits == 0)\n            throw new ArgumentException(\"Base cannot\
    \ be zero\");\n        else if (numDigits > numBase.Length)\n            throw\
    \ new ArgumentException(\"Base cannot be larger than the value\");\n\n       \
    \ for (int i = numDigits - 1; i >= 0; i--)\n            newBase = \"0\" + newBase;\n\
    \n        string res = \"\";\n        for (int i = 0; i < numDigits; i++)\n  \
    \          res = res + newBase[(int)Math.Truncate(Math.Log10(value))];\n\n   \
    \     return res;", "        long n = numBase;\n        string ans = \"\";\n \
    \       while (x != 0) {\n            ans = ans + x.ToString();\n            x\
    \ /= numBase;\n        }\n        return ans;", "        string result = \"\"\
    ;\n        if (numBase < 2) {\n            throw new ArgumentException(\"Base\
    \ must be less than 10\");\n        }\n        BigInteger n = new BigInteger(Convert.ToString(numBase));\n\
    \        BigInteger xx = new BigInteger(Convert.ToString(x));\n        int bitLen\
    \ = x.ToString().Length;\n        int quotient = 1;\n        BigInteger quotientX\
    \ = new BigInteger(\"\");\n        BigInteger quotientY = BigInteger.One;\n  \
    \      BigInteger quotientZ = BigInteger.Zero;\n        while (null != quotientX)\
    \ {\n            quotientY = quotientZ;\n            quotientY = quotientY.Divide(xx);\n\
    \            quotientY = quotientY.Multiply(quotientY);\n            quotientY\
    \ = quotientY.Divide(x);\n            quotientY = quotientY.Multiply(quotientY);\n\
    \            quotientZ = quotientZ.Add(quotientY);\n            quotientZ = quotientZ.Divide(x);\n\
    \            quotientX = quotientX.Multiply(quotientZ);\n            bitLen--;\n\
    \        }\n        result = quotientZ.ToString();\n        while (bitLen > 0)\
    \ {\n            result += \"0\";\n        }\n        return result;", "     \
    \   long n = 0;\n        while (x > 0) {\n            n += x / numBase;\n    \
    \        x = x % numBase;\n        }\n        long rem = 0;\n        while (n\
    \ > 1) {\n            rem = n % numBase;\n            n = n / numBase;\n     \
    \       Console.WriteLine(rem);\n        }\n        return n.ToString();", " \
    \       var numString = x.ToString();\n        numString = numString.PadLeft(numBase.ToString().Length,\
    \ '0');\n        var numArray = numString.Select(x => Convert.ToInt64(x - '0'));\n\
    \        var result = numArray.Aggregate((x, y) => x * numBase + y);\n       \
    \ return numString.Substring(result.ToString().Length);", "        long result\
    \ = 0;\n        for (int i = 0; i < x.ToString().Length; i++) {\n            if\
    \ (x.ToString()[i] == numBase.ToString()[i])\n                result += numBase.ToString().Length\
    \ - i;\n            else\n                result -= x.ToString()[i].CompareTo(numBase.ToString()[i])\
    \ * Math.Pow(numBase.ToString().Length - 1, x.ToString().Length - 1 - i);\n  \
    \      }\n        return x.ToString().PadLeft(result, '0');", "        string\
    \ result = \"\";\n        BigInteger bi = new BigInteger(Convert.ToString(x));\n\
    \        BigInteger newbi = bi.Pow(numBase);\n        string str = Convert.ToString(newbi);\n\
    \        return str;", "        if (numBase == 0) return \"0\";\n        if (numBase\
    \ < 2 || numBase > 10)\n            throw new ArgumentOutOfRangeException(\"numBase\"\
    );\n        long xBase = Convert.ToInt64(Math.Pow(numBase, x)); // return x raised\
    \ to the numBase power\n        return xBase.ToString();", "        long n = x;\n\
    \        long d = numBase - 1;\n        while ((n /= numBase) != 0) d -= n % numBase;\n\
    \        return Convert.ToString(d, numBase);", "        string result = \"0\"\
    ;\n        long temp = Convert.ToInt64(x);\n        while (temp > 0) {\n     \
    \       result += (char)(((temp % numBase) + 64) % 64);\n            temp /= numBase;\n\
    \        }\n        return result;", "        string s = x.ToString();\n     \
    \   string r = \"\";\n        long n = long.Parse(s);\n        long newN = 0;\n\
    \        for (int i = 0; i < s.Length; ++i) {\n            newN = (newN * numBase)\
    \ + n;\n            n = newN % numBase;\n            r += s.Substring(i, 1);\n\
    \        }\n        return r;", "        // Convert the number to a string before\
    \ applying the desired base.\n        string numberAsString = x.ToString();\n\
    \        // The conversion will add leading zeros if a base\n        // of 10\
    \ or less.\n        if (numBase < 10)\n            numberAsString = numberAsString.PadLeft(numBase,\
    \ '0');\n        // Convert the string back to a number with the desired base.\n\
    \        return NumberToString(Convert.ToInt32(numberAsString, numBase));", " \
    \       long[] bnumBase = new long[numBase];\n        for (int i = 0; i < numBase;\
    \ i++) {\n            bnumBase[i] = (long)(numBase * (double)i);\n        }\n\
    \        string r = \"\";\n        long xx = x;\n        while (true) {\n    \
    \        int rn = bnumBase[(int)(xx % numBase)];\n            long rem = xx %\
    \ numBase;\n            xx = rem;\n            r += (long)rn;\n            if\
    \ (xx < 0) break;\n        }\n        return r.ToString();", "        // Pre-condition:\
    \ 0 < x < 2^numBase\n\n        // Create an array of size numBase, which stores\
    \ the digits in reverse order.\n        long[] digits = new long[numBase];\n \
    \       while (x >= 10) {\n            digits[numBase - 1] = x % 10;\n       \
    \     x = x / 10;\n        }\n        digits[numBase - 1] = x;\n\n        // Create\
    \ string from digits array in reverse order.\n        string str = \"\";\n   \
    \     for (int i = numBase - 1; i >= 0; i--) {\n            str += digits[i] +\
    \ \" \";\n        }\n\n        // Return string representation after the conversion.\n\
    \        return str;", "        string s = x.ToString();\n        if (s.Length\
    \ > 0 && char.IsDigit(s[0])) {\n            if (numBase == 10L) {\n          \
    \      char[] newChars = new char[s.Length];\n                for (int i = 0;\
    \ i < s.Length; i++) {\n                    newChars[i] = s[i];\n            \
    \    }\n                newChars[s.Length - 1] = s[0];\n                return\
    \ new string(newChars);\n            }\n        }\n        string result = \"\"\
    ;\n        long digit = 0;\n        long digitCount = 0;\n        bool hasDigit\
    \ = false;\n        for (int i = 0; i < s.Length; i++) {\n            char c =\
    \ s[i];\n            if (char.IsDigit(c)) {\n                digitCount += 1;\n\
    \                if (digit != 0) {\n                    if (digitCount % numBase\
    \ == 0) {\n                        result += new String((char) (digit % numBase),\
    \ 1);\n                    }\n                }\n                hasDigit = true;\n\
    \                digit = Convert.ToInt64(s);\n                digitCount = 0;\n\
    \            } else if (char.IsLetterOrDigit(c)) {\n                char last\
    \ = result[result.Length - 1];\n                if (char.IsLetterOrDigit(last))\
    \ {\n                    if (char.IsLetterOrDigit(c)) {\n                    \
    \    hasDigit = true;\n                    } else {\n                        hasDigit\
    \ = false;\n                    }\n                } else {\n                \
    \    hasDigit = false;\n                }\n                result += new String((char)\
    \ c, 1);\n            } else {\n                hasDigit = false;\n          \
    \  }\n        }\n        if (hasDigit) {\n            if (digitCount % numBase\
    \ == 0) {\n                result += new String((char) (digit % numBase), 1);\n\
    \            }\n        }\n        return result;", "        var result = (int)Math.Floor(Math.Log(x,\
    \ numBase) + 1);\n        var result2 = result.ToString();\n        var result3\
    \ = result2.PadLeft(numBase.ToString().Length, '0');\n        var result4 = Convert.ToString(x,\
    \ numBase);\n        return result4 + result3;", "        long convert = x;\n\
    \        int remainder = Convert.ToInt32(x / numBase);\n        string s = \"\"\
    ;\n        if (numBase == 1) {\n            s = \"0\" + x.ToString();\n      \
    \  }\n        else {\n            while (numBase != 1) {\n                convert\
    \ = convert / numBase;\n                if (numBase != 10) {\n               \
    \     s += \"0\" + convert.ToString();\n                }\n                else\
    \ {\n                    s += convert.ToString();\n                }\n       \
    \         numBase = numBase * 10;\n            }\n            if (remainder !=\
    \ 0) {\n                s += \"0\" + remainder.ToString();\n            }\n  \
    \          else {\n                s += remainder.ToString();\n            }\n\
    \        }\n        return s;", "        string result = Convert.ToString(x %\
    \ numBase, numBase);\n        long modx = x % numBase;\n        if ((x - modx)\
    \ != 0) {\n            result += (Convert.ToString(modx, numBase));\n        }\n\
    \        return result;", "        string numString = x.ToString();\n        int\
    \ numLength = numString.Length;\n        double numDouble = Convert.ToDouble(numString);\n\
    \        double numBaseDouble = Convert.ToDouble(numBase.ToString());\n      \
    \  double result = 0;\n        long resultInt = 0;\n        for (int i = 0; i\
    \ < numLength; i++) {\n            result += (numDouble / numBaseDouble);\n  \
    \          numDouble -= result * numBaseDouble;\n        }\n        resultInt\
    \ = Convert.ToInt64(Math.Truncate(result)) + 1;\n        return resultInt.ToString();",
  "        Debug.Assert(numBase < 10);\n        StringBuilder sb = new StringBuilder();\n\
    \        char digitBase = '0';\n        while (x != 0) {\n            int div\
    \ = numBase / x;\n            int mod = numBase % x;\n            sb.Append(digitBase);\n\
    \            sb.Append(div);\n            sb.Append(mod);\n            digitBase\
    \ = (char)(((int)digitBase) + 1);\n            x = x / numBase;\n        }\n \
    \       return sb.ToString();", "        string result = \"\";\n        // The\
    \ output string will be of form: \n        // (\"1001\") - The number will end\
    \ in '1' if the number is in base three.\n        // (\"1110\") - The number will\
    \ end in '10' if the number is in base two.\n        // (\"0101\") - The number\
    \ will end in '10' if the number is in base two.\n        // (\"0110\") - The\
    \ number will end in '100' if the number is in base three.\n        // (\"0011\"\
    ) - The number will end in '1000' if the number is in base five.\n        // The\
    \ number will be converted to a string of base numBase.\n        if (numBase <\
    \ 1) {\n            Console.WriteLine(\"Base number must be less than 10.\");\n\
    \            return result;\n        }\n        int length = x.ToString().Length;\n\
    \        if (length != 0) {\n            int remainder;\n            if (numBase\
    \ == 3) {\n                // Base 3 is represented with 3 digits \n         \
    \       // if the number is of length 1.\n                remainder = length %\
    \ 3;\n            }\n            else if (numBase == 2) {\n                //\
    \ Base 2 is represented with 2 digits.\n                remainder = length % 2;\n\
    \            }\n            else if (numBase == 5) {\n                // Base\
    \ 5 is represented with 5 digits.\n                remainder = length % 5;\n \
    \           }\n            else {\n                // If base is not represented,\
    \ we convert it to binary and\n                // take the string representation.\n\
    \                long bits = Convert.ToInt64(x.ToString(), 2);\n             \
    \   bool isOddBit = bits % 2 == 1;\n                for (int i = 31; i >= 0; i--)\
    \ {\n                    bits = (bits << 1) + ((isOddBit ? 1 : 0) * (i - 1));\n\
    \                    if (bits > Math.Pow(10, i)) {\n                        break;\n\
    \                    }\n                    if (i % numBase == 0) {\n        \
    \                result = result + Convert.ToString(bits, numBase);\n        \
    \                break;\n                    }\n                }\n          \
    \      return result;\n            }\n        }\n        else {\n            Console.WriteLine(\"\
    No number given for conversion.\");\n            return result;\n        }\n \
    \       if (remainder == 0) {\n            Console.WriteLine(\"Number represented\
    \ in base \" + numBase + \", is of length 1.\");\n            return result;\n\
    \        }\n        if (numBase == 3) {\n            // Base 3 is represented\
    \ with 3 digits, so we add one and convert it.\n            result = result +\
    \ Convert.ToString(Convert.ToInt32(result.Substring(1)) + 1, 3);\n        }\n\
    \        else if (numBase == 2) {\n            // Base 2 is represented with 2\
    \ digits, so we add one and convert it.\n            result = result + Convert.ToString(Convert.ToInt32(result.Substring(1))\
    \ + 1, ", "        string result = \"0\";\n        while (numBase > 0) {\n   \
    \         long quotient = x / numBase;\n            long remainder = x % numBase;\n\
    \            result = (numBase * remainder) + result;\n            x /= numBase;\n\
    \            numBase--;\n        }\n        return result;", "        var bases\
    \ = new List<long> { 2, 10, 8 };\n        for (int i = 0; i < bases.Count; i++)\
    \ {\n            long n = 0;\n            do {\n                n = (n << numBase)\
    \ + x++;\n            } while (n > 0);\n            if (n == 0) return x.ToString();\n\
    \            long quotient = n / bases[i];\n            long remainder = n % bases[i];\n\
    \            x = quotient;\n            if (i == bases.Count - 1) {\n        \
    \        return remainder.ToString();\n            }\n        }\n        return\
    \ \"ERROR\";", "        int digits = 1;\n        while (x > 0) {\n           \
    \ digits++;\n            x /= 10;\n        }\n        List<int> digits_array =\
    \ digitsArray.ConvertAll(d => Convert.ToInt32(d));\n        BigInteger temp =\
    \ BigInteger.Pow(numBase, digits_array);\n        temp = temp.Multiply(x);\n \
    \       string str = temp.ToString();\n        return str.Substring(0, str.Length\
    \ - 1);", "        string baseStr;\n        string outStr;\n        baseStr =\
    \ \"0\";\n        decimal outNum;\n        bool negative = false;\n        if\
    \ ((x > 0L) && (x < Math.Pow(numBase, numBase.ToString().Length))) {\n       \
    \     outNum = Convert.ToDecimal(x);\n            negative = false;\n        }\n\
    \        else {\n            outNum = Convert.ToDecimal(Math.Pow(numBase, numBase.ToString().Length)\
    \ - x);\n            negative = true;\n        }\n        outStr = \"\";\n   \
    \     while (outNum > 0) {\n            outStr = (char) (outNum % numBase) + outStr;\n\
    \            outNum = Math.Floor(outNum / numBase);\n        }\n        if (negative)\n\
    \            return \"-\" + outStr;\n        else\n            return outStr;",
  "        // Initialize result string.\n        string result = string.Empty;\n\n\
    \        // Get integer value of input number x base numBase.\n        long integerValue\
    \ = (long)Math.DivRem(x, numBase, out long remainder);\n\n        // If remainder\
    \ is zero, result is empty string.\n        if (remainder == 0) {\n          \
    \  result = \"\";\n        }\n        else {\n            // Get integer value\
    \ of numBase in base numBase.\n            long numBaseValue = (long)Math.DivRem(numBase,\
    \ remainder, out long remainder);\n\n            // If remainder is zero, result\
    \ is empty string.\n            if (remainder == 0) {\n                result\
    \ = \"\";\n            }\n            // Else result is integer value of remainder\
    \ in base numBase.\n            else {\n                // Get remainder integer\
    \ value in base numBase.\n                long remainderValue = (long)Math.DivRem(remainder,\
    \ remainder, out long remainder);\n\n                // Convert to decimal with\
    \ precision of one decimal digit.\n                long decimalValue = remainderValue;\n\
    \n                // If remainderValue is greater than zero, then result is integer\
    \ value of decimalValue in base numBase.\n                if (remainderValue >\
    \ 0) {\n                    decimalValue *= numBaseValue;\n                }\n\
    \n                // Convert decimal to string.\n                result = (decimalValue\
    \ == 0 ? \"\" : decimalValue.ToString(CultureInfo.InvariantCulture)); // Use InvariantCulture\
    \ to avoid scientific notation.\n            }\n        }\n\n        // Return\
    \ result.\n        return result;", "        string result = \"\";\n        string\
    \ str = x.ToString();\n        char[] charArray = str.ToCharArray();\n       \
    \ BigInteger bi = new BigInteger(charArray);\n        BigInteger temp = new BigInteger(numBase);\n\
    \        bi = bi.Multiply(temp);\n        temp = temp.ToString(10);\n        result\
    \ = bi.ToString(10);\n        return result;", "        string result = \"\";\n\
    \        if (numBase == 1) {\n            while (x > 0) {\n                result\
    \ = x % numBase + result;\n                x = x / numBase;\n            }\n \
    \       } else if (numBase == 2) {\n            while (x > 0) {\n            \
    \    result = x / numBase + result;\n                x = x % numBase;\n      \
    \      }\n        } else if (numBase == 10) {\n            while (x > 0) {\n \
    \               result = Convert.ToString(x / numBase, 2) + result;\n        \
    \        x = x % numBase;\n            }\n        } else if (numBase == 16) {\n\
    \            while (x > 0) {\n                result = Convert.ToString(x / numBase,\
    \ 4) + result;\n                x = x % numBase;\n            }\n        }\n \
    \       if (result == \"\") {\n            result = Convert.ToString(x, numBase);\n\
    \        }\n        return result;", "        string xStr = x.ToString();\n  \
    \      string numBaseStr = numBase.ToString();\n        int numBaseInt = Convert.ToInt32(numBaseStr);\n\
    \        long result = 0;\n        int xLength = Convert.ToInt32(xStr.Length);\n\
    \        string resultStr = \"\";\n        for(int i = 0; i < xLength; i++) {\n\
    \            string xDigit = xStr.Substring(i, 1);\n            long xDigitInt\
    \ = Convert.ToInt32(xDigit);\n            long baseVal = Convert.ToInt64(numBaseStr);\n\
    \            long nextVal = xDigitInt % baseVal;\n            result = nextVal;\n\
    \            xDigit = Convert.ToString(result);\n            resultStr += xDigit;\n\
    \        }\n        return resultStr;", "        decimal y = new decimal(numBase);\n\
    \        return Convert.ToString(y, numBase);", "        string result = x.ToString();\n\
    \        long remainder;\n        while (true) {\n            remainder = x %\
    \ numBase;\n            if (remainder == 0)\n                break;\n        \
    \    x /= numBase;\n            result += (x.ToString());\n        }\n       \
    \ return result;", "        // Convert input number to string.\n        String\
    \ s = x.ToString();\n        // Convert string to array of individual characters\n\
    \        char[] c = s.ToCharArray();\n        // Convert number to array of digits\
    \ in specified base\n        byte[] b = BigInteger.Parse(s, System.Globalization.NumberStyles.HexNumber).ToByteArray();\n\
    \        byte[] digits = new byte[numBase];\n        for (int i = 0; i < numBase;\
    \ i++)\n            digits[i] = b[i / numBase];\n        // Change base digits\
    \ in place\n        for (int i = 0; i < numBase; i++)\n            c[i / numBase]\
    \ = digits[i % numBase];\n        // Convert array of characters to string\n \
    \       return new string(c);", "        var b = new BigInteger(numBase);\n  \
    \      var x = new BigInteger(x);\n        var r = x.ToString();\n        while\
    \ (b.Length > r.Length) {\n            r = r.PadLeft(b.Length, '0');\n       \
    \ }\n        while (b.Length < r.Length) {\n            r = b.ToString().PadRight(r.Length,\
    \ '0');\n        }\n        return r;", "        var res = ConvertToString(BigInteger.Pow(numBase,\
    \ BigInteger.DivRem(BigInteger.Mod(x, numBase), numBase)), numBase);\n       \
    \ return res;", "        StringBuilder sb = new StringBuilder();\n        BigInteger\
    \ num = BigInteger.Parse((long)x);\n        BigInteger numOfDigits = num.ToBigInteger();\n\
    \        BigInteger numOfBase = numOfDigits.ToBigInteger();\n        while (numOfBase\
    \ != numOfDigits) {\n            numOfDigits = numOfDigits.Multiply((numOfBase).Pow(numBase));\n\
    \            sb.Append(numOfDigits.ToString());\n        }\n        return sb.ToString();",
  "        int length = System.Math.Ceiling(numBase.ToString().Length);\n        BigInteger\
    \ result = new BigInteger(numBase);\n        while (result.ToString().Length >\
    \ length)\n            result = result.Divide(numBase);\n        return x.ToString(numBase.ToString());",
  "        long rem = x % numBase;\n        long r = x - (rem/numBase);\n        r\
    \ = r*numBase;\n        return Convert.ToString(rem) + \".\" + Convert.ToString(r);",
  "        long num = Convert.ToInt64(x);\n        long remainder = num % numBase;\n\
    \        return (num - remainder).ToString();", "        string result = string.Empty;\n\
    \        string s = string.Empty;\n        while (numBase > 0)\n        {\n  \
    \          s = Convert.ToString(numBase % 10);\n            result += s;\n   \
    \         numBase = numBase / 10;\n        }\n        while (numBase > 0)\n  \
    \      {\n            result += \"0\";\n            numBase = numBase / 10;\n\
    \        }\n        if (x < 0)\n            result += ((long)\"-\");\n       \
    \ return result;", "        var newBase = numBase;\n        var digits = Math.Abs(numBase);\n\
    \        string baseString;\n        do {\n            baseString = numBase.ToString();\n\
    \            numBase *= numBase;\n        } while (numBase > newBase);\n     \
    \   long newNumber = 1;\n        string newString = baseString;\n        foreach\
    \ (char c in baseString) {\n            newString = (char) (newNumber * newBase)\
    \ + c;\n            newNumber /= newBase;\n        }\n        return newString;",
  "        string result = Convert.ToString(x, numBase);\n        int pos = Convert.ToInt32(result,\
    \ numBase);\n        int remain = x - pos;\n        return (remain).ToString();",
  "        long temp = x;\n        if (numBase == 1) {\n            return x.ToString();\n\
    \        }\n\n        // Convert the number to string using specified numerical\
    \ base numBase.\n        // Convert each character of the string to it's corresponding\
    \ digit number.\n        // Calculate the power of base numBase for each digit\
    \ of the converted string.\n        // Calculate the sum of the power of base\
    \ numBase for each digit of the converted string.\n        // Calculate the product\
    \ of the power of base numBase for each digit of the converted string.\n     \
    \   // Re-Convert the sum to the input number x using specified numerical base\
    \ numBase.\n        string strX = x.ToString();\n        List<int> intList = new\
    \ List<int>();\n        foreach (char c in strX) {\n            intList.Add((int)c);\n\
    \        }\n        List<long> powerList = new List<long>();\n        long power\
    \ = 0;\n        for (int i = 0; i < intList.Count; i++) {\n            power =\
    \ power + (intList[i] * (long)Math.Pow(numBase, (double)intList.Count - 1 - i));\n\
    \        }\n        powerList.Add(power);\n        powerList.Sort();\n       \
    \ string output = \"\";\n        double tmpSum = 0;\n        for (int i = 0; i\
    \ < powerList.Count - 1; i++) {\n            tmpSum = tmpSum + powerList[i];\n\
    \        }\n        output = x.ToString();\n        for (int i = 1; i < intList.Count;\
    \ i++) {\n            output = output.Substring(0, i - 1) + String.Format(\"{0}{1}\"\
    , (int)(Math.Floor(tmpSum / powerList[i])),\n                        (int)(tmpSum\
    \ - (Math.Floor(tmpSum / powerList[i]) * powerList[i])));\n        }\n       \
    \ output = output.Substring(0, output.Length - 1);\n        return output;", " \
    \       string retVal = x.ToString();\n        StringBuilder sb = new StringBuilder();\n\
    \        long base = 1;\n        while (base * numBase <= x) {\n            base\
    \ += 1;\n        }\n        while (x >= base) {\n            long quotient = x\
    \ / base;\n            x -= quotient * base;\n            sb.Append(quotient.ToString());\n\
    \        }\n        return sb.ToString();", "        if (numBase < 10) {\n   \
    \         throw new ArgumentOutOfRangeException(\n                \"numBase\"\
    , \"Base must be greater than 10, but is \" + numBase);\n        }\n        string\
    \ s = x.ToString();\n        while (s.Length > numBase.Length) {\n           \
    \ int newLen = numBase.Length;\n            while (newLen <= s.Length) {\n   \
    \             newLen *= 2;\n            }\n            string tmp = new string(s.Substring(0,\
    \ newLen), numBase);\n            s = tmp;\n        }\n        string ret = \"\
    \";\n        char ch;\n        while ((ch = s[0]) != '0') {\n            ret +=\
    \ ch;\n            s = s.Substring(1);\n        }\n        return s + new string(numBase);",
  "        BigInteger bx = new BigInteger(x.ToString());\n        BigInteger bnumBase\
    \ = new BigInteger(numBase.ToString());\n\n        BigInteger n = new BigInteger(\"\
    1\");\n\n        for (int i = bx.ToString().Length; i >= 0; i--) {\n         \
    \   n = n.Multiply(numBase);\n            if (n % numBase != 0) {\n          \
    \      n.Add(bnumBase);\n            }\n            n = n.Divide(bnumBase);\n\
    \            String s = n.ToString();\n\n            if (String.IsNullOrEmpty(s))\
    \ {\n                s = \"0\";\n            }\n            while (s.Length <\
    \ numBase) {\n                s = String.Concat(s, \"0\");\n            }\n  \
    \          x = x.Substring(0, x.Length - 1) + s;\n        }\n        return x;",
  "        string result = \"\";\n        while (numBase > 0) {\n            long\
    \ y = numBase / x;\n            x = numBase;\n            numBase = y;\n     \
    \       result += Convert.ToString(numBase, 16);\n        }\n        return result;",
  "        string result = \"\";\n        while (x >= numBase) {\n            long\
    \ oldNum = x;\n            long newNum = oldNum / numBase;\n            x = oldNum\
    \ % numBase;\n            string oldBase = Convert.ToString(oldNum);\n       \
    \     string newBase = Convert.ToString(newNum);\n            if (oldBase.Length\
    \ != newBase.Length) {\n                throw new ArgumentException(\"Base number\
    \ not of same length.\");\n            }\n            string newString = string.Empty;\n\
    \            foreach (char c in oldBase) {\n                newString += Convert.ToString(c\
    \ - newBase[oldBase.IndexOf(c)]);\n            }\n            result += newString;\n\
    \        }\n        string oldBase = Convert.ToString(x);\n        string newBase\
    \ = Convert.ToString(numBase);\n        string newString = string.Empty;\n   \
    \     foreach (char c in oldBase) {\n            newString += Convert.ToString(c\
    \ + newBase[oldBase.IndexOf(c)]);\n        }\n        result += newString;\n \
    \       return result;", "        var base = new StringBuilder();\n        while\
    \ (x > numBase) {\n            base.Append((int)x % numBase);\n            x =\
    \ x / numBase;\n        }\n        base.Append((int)x);\n        return base.ToString();",
  "        string numString = \"\" + x;\n        string digits = \"\";\n        int\
    \ intDigits = 0;\n        for (int i = numString.Length - 1; i >= 0; i--) {\n\
    \            if (Char.IsDigit(numString[i])) {\n                intDigits++;\n\
    \            }\n        }\n        // base of numString has changed, return number\
    \ in new base.\n        // if numString is greater than numBase, return \"0\"\
    .\n        if (intDigits != numString.Length) {\n            return \"0\";\n \
    \       }\n        long power = 1;\n        for (int i = numString.Length - 1;\
    \ i >= 0; i--) {\n            if (numString[i] != '0') {\n                power\
    \ *= numBase;\n            }\n        }\n        long result = 1;\n        while\
    \ (power > 0) {\n            if ((int)(power / numBase) > 0) {\n             \
    \   result *= numBase;\n            }\n            power /= numBase;\n       \
    \ }\n        result = result * x;\n        long sum = 0;\n        bool lastDigit\
    \ = false;\n        for (int i = numString.Length - 1; i >= 0; i--) {\n      \
    \      if (numString[i] != '0') {\n                if (lastDigit == false) {\n\
    \                    sum += (long)numString[i];\n                    lastDigit\
    \ = true;\n                } else {\n                    sum *= numBase;\n   \
    \             }\n            }\n        }\n        return \"\" + sum;", "    \
    \    string r = \"\";\n        while (x>0) {\n            long rem = x % numBase;\n\
    \            r = (char) ('0' + rem) + r;\n            x = x / numBase;\n     \
    \   }\n        return r;", "        long digit = x;\n        long factor = 1;\n\
    \        double y = x;\n        double quotient = 0;\n        string result =\
    \ \"\";\n\n        // get remainder after division by numBase.\n        while\
    \ (y > 0) {\n            quotient = y / numBase;\n            digit = quotient\
    \ % numBase;\n            y = quotient;\n            result += digit.ToString();\n\
    \            factor *= numBase;\n        }\n\n        while (x > 0) {\n      \
    \      quotient = x / numBase;\n            digit = quotient % numBase;\n    \
    \        x = quotient;\n            result += digit.ToString();\n            factor\
    \ *= numBase;\n        }\n\n        // reverse result.\n        result = result.Reverse().ToArray();\n\
    \n        // return string representation of result.\n        return result.Reverse().ToString()\
    \ + x.ToString();", "        long result = 0;\n        if (numBase < 2L) {\n \
    \           throw new ArgumentException(\"Base must be 2 or more.\");\n      \
    \  }\n        if (numBase < 10L) {\n            if (numBase == 2L) {\n       \
    \         result = (long)Math.Pow(numBase, x);\n            } else {\n       \
    \         result = x;\n            }\n            string digit = result.ToString();\n\
    \            if (numBase == 10L) {\n                digit += digit.Substring(0,\
    \ 1);\n            }\n            return digit;\n        }\n        // Convert\
    \ the input x to decimal digits of numBase\n        List<long> digits = new List<long>();\n\
    \        bool isNegative = x < 0;\n        long m = x;\n        while (numBase\
    \ > 0L) {\n            m = m / numBase;\n            digits.Add(m);\n        \
    \    numBase--;\n        }\n        // Get exponent of numBase\n        long e\
    \ = numBase;\n        while (e > 0L) {\n            m = m * numBase;\n       \
    \     e--;\n        }\n        if (numBase == 1L) {\n            // Change base\
    \ from 10 to 2\n            if (numBase == 10L) {\n                return ((isNegative)\
    \ ? \"-\" : \"\") + x.ToString();\n            }\n            // Change base from\
    \ 2 to 10\n            return ((isNegative) ? \"-\" : \"\") + x.ToString().PadLeft(numBase,\
    \ '0');\n        }\n        // Change base from 10 to numBase\n        string\
    \ s = \"\";\n        if (isNegative) {\n            s = x.ToString().PadLeft(numBase,\
    \ '0');\n        } else {\n            s = x.ToString().PadLeft(numBase, '0');\n\
    \        }\n        string digit = s.Substring(0, numBase);\n        foreach (long\
    \ d in digits) {\n            if (d < 10) {\n                digit = digit + d.ToString();\n\
    \            } else {\n                digit += (long)(Math.Pow(numBase, d));\n\
    \            }\n        }\n        // Add exponent to digit\n        if (e > 0L)\
    \ {\n            digit += e.ToString();\n        }\n        // Add the leading\
    \ zeros if necessary\n        while (digit.Length < numBase) {\n            digit\
    \ = \"0\" + digit;\n        }\n        // Convert digit to string\n        if\
    \ (numBase == 10L) {\n            // Change base from 10 to numBase\n        \
    \    return ((isNegative) ? \"-\" : \"\") + digit;\n        }\n        // Change\
    \ base from numBase to 10\n        return ((isNegative) ? \"-\" : \"\") + digit.Substring(0,\
    \ numBase);", "        BigInteger inputNum = new BigInteger(x.ToString(), numBase);\n\
    \        BigInteger result = inputNum.ToString(numBase);\n        return result;",
  "        long y = x;\n        long base = numBase;\n        if (base < 10) {\n \
    \           while (base > 10) {\n                y /= base;\n                base\
    \ /= 10;\n            }\n            while (base < 10) {\n                y *=\
    \ base;\n                base *= 10;\n            }\n            return x.ToString();\n\
    \        }\n        // Handle zero\n        if (y == 0) {\n            return\
    \ \"0\";\n        }\n        // Handle negative numbers\n        if (x < 0) {\n\
    \            while (y < 0 && base > 10) {\n                y *= base;\n      \
    \          base *= 10;\n            }\n            // Handle large numbers\n \
    \           if (base > numBase) {\n                while (y > 0 && base < numBase)\
    \ {\n                    y /= base;\n                    base *= 10;\n       \
    \         }\n            }\n        }\n        // Convert into string\n      \
    \  if (base > 1) {\n            int digits = 1;\n            while (base > numBase)\
    \ {\n                digits += 1;\n                y /= base;\n              \
    \  base *= 10;\n            }\n            // Convert to base string\n       \
    \     string str = Convert.ToString(y, digits);\n            // Remove leading\
    \ zeros\n            for (int i = 0; i < str.Length; i++) {\n                if\
    \ (str[i] == 0) {\n                    str = str.Substring(i + 1);\n         \
    \           break;\n                }\n            }\n            return str;\n\
    \        }\n        // Convert to base string\n        string str = Convert.ToString(y,\
    \ numBase);\n        // Remove leading zeros\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str[i] == 0) {\n                str = str.Substring(i\
    \ + 1);\n                break;\n            }\n        }\n        return str;",
  "        string strRet = \"\";\n        long temp = (long)Math.Pow(numBase, (long)x);\n\
    \        strRet = temp.ToString();\n        long ret = (long)Math.Pow(numBase,\
    \ temp);\n        strRet += (ret).ToString();\n        return strRet;", "    \
    \    string strRep = string.Empty;\n        string strBase = Convert.ToString(numBase);\n\
    \        long numRep = long.Parse(strBase);\n        // Change base of the numeral\
    \ to base of the base.\n        strRep = new string(Convert.ToChar(numRep).ToString().ToCharArray().Reverse().ToArray());\n\
    \        // Convert the numeral to its corresponding base.\n        numRep *=\
    \ strRep.Length;\n        // Change base of numeral to base  of base.\n      \
    \  for (int i = strRep.Length; i > 0; i--) {\n            strRep = strRep.Substring(0,\
    \ i) + strRep.Substring(i).ToString() + strRep.Substring(0, i - 1);\n        }\n\
    \        // Reverse strRep.\n        strRep = strRep.Reverse().ToArray().Select(c\
    \ => Convert.ToChar(c)).ToString();\n        // Add leading zero to strRep.\n\
    \        for (int i = 0; i < strRep.Length; i++) {\n            strRep = \"0\"\
    \ + strRep;\n        }\n        // Convert the numeral to the converted base.\n\
    \        strRep = Convert.ToString(Convert.ToInt32(strRep, numBase));\n      \
    \  // Reverse strRep.\n        strRep = strRep.Reverse().ToArray().Select(c =>\
    \ Convert.ToChar(c)).ToString();\n        // Add leading zero to strRep.\n   \
    \     for (int i = 0; i < strRep.Length; i++) {\n            strRep = \"0\" +\
    \ strRep;\n        }\n        strRep = strRep.Substring(1);\n        return strRep;",
  "        var n = new BigInteger(x.ToString());\n        n = n.ToString(numBase);\n\
    \        return n;", "        // Convert number to base to long.\n        // Use\
    \ BigInteger if the number is larger than long.\n        BigInteger num = new\
    \ BigInteger(x.ToString(), numBase);\n\n        // Multiply the number with base\
    \ to get the result in base 10.\n        BigInteger res = num.ToString(numBase);\n\
    \n        // Remove leading zeros.\n        while (string.IsNullOrEmpty(res))\n\
    \            res = res.TrimStart('0');\n\n        // Convert back to base from\
    \ string.\n        // Use System.Convert if the result is larger than long.\n\
    \        long newNum;\n        string output = res.ToString();\n        bool ok\
    \ = long.TryParse(output, out newNum);\n        if (!ok)\n            return output;\n\
    \n        // Convert back to base from string.\n        // Use System.Convert\
    \ if the result is larger than int.\n        int newInt;\n        output = res.ToString();\n\
    \        ok = int.TryParse(output, out newInt);\n        if (!ok)\n          \
    \  return output;\n\n        // Convert back to base from string.\n        //\
    \ Use System.Convert if the result is larger than short.\n        short newShort;\n\
    \        output = res.ToString();\n        ok = short.TryParse(output, out newShort);\n\
    \        if (!ok)\n            return output;\n\n        // Convert back to base\
    \ from string.\n        // Use System.Convert if the result is larger than byte.\n\
    \        byte newByte;\n        output = res.ToString();\n        ok = byte.TryParse(output,\
    \ out newByte);\n        if (!ok)\n            return output;\n\n        return\
    \ newNum.ToString();", "        long x0 = x;\n        string result = \"\";\n\
    \        while (x0 != 0) {\n            long remainder = x0 / numBase;\n     \
    \       int number = (int)remainder;\n            string str = (number < 10 ?\
    \ number.ToString() : string.Format(\"0{0}\", number));\n            result +=\
    \ str;\n            x0 = x0 - remainder * numBase;\n        }\n        return\
    \ x == 0 ? \"0\" : result;", "        // Convert base to binary.\n        var\
    \ binaryResult = Convert.ToString(x, 2).PadLeft(64, '0');\n\n        // Convert\
    \ number from base to other.\n        var result = binaryResult.ToString(numBase);\n\
    \n        // Convert back to original base.\n        return Convert.ToInt64(result,\
    \ 2).ToString();", "        string result = \"\";\n        while (numBase > 0)\
    \ {\n            long temp = numBase;\n            numBase = numBase / 10;\n \
    \           result += ((x / temp) % numBase).ToString();\n        }\n        return\
    \ result;", "        string result = \"\";\n        while (x > 0) {\n        \
    \    long n = x;\n            x = x % numBase;\n            if (n >= 10)\n   \
    \             result += \"0\" + n.ToString();\n            else\n            \
    \    result += n.ToString();\n        }\n        if (result == \"\")\n       \
    \     result = \"0\";\n        return result;", "        var x = BitConverter.ToInt64(BitConverter.GetBytes(x),\
    \ 0);\n        var x = x / numBase;\n        return BitConverter.ToString(BitConverter.GetBytes(x),\
    \ 2).Replace(\"-\", \"\");", "        var sb = new StringBuilder();\n        x\
    \ /= numBase;\n        do {\n            sb.Append(x);\n            x /= numBase;\n\
    \        } while (x != 0);\n        return sb.ToString();", "        BigInteger\
    \ bi = new BigInteger(x.ToString());\n        BigInteger bi2 = bi.Pow(numBase);\n\
    \        return bi2.ToString();", "        var baseDigits = new int[numBase];\n\
    \        var result = \"\";\n        while (x>0) {\n            var digit = x\
    \ % numBase;\n            x = x / numBase;\n            baseDigits[digit]++;\n\
    \        }\n        for (int digit = 0; digit < numBase; digit++) {\n        \
    \    result += baseDigits[digit].ToString();\n        }\n        return result;",
  "        var n = Convert.ToString(numBase).PadLeft(10, '0');\n        string res\
    \ = x.ToString();\n        int a = long.Parse(res, NumberStyles.AllowLeadingSign\
    \ | NumberStyles.AllowLeadingSign);\n        int b = int.Parse(n);\n        return\
    \ Convert.ToString(a * b).PadLeft(10, '0');", "        string result = \"\";\n\
    \        while (x > 0) {\n            int digit = (int) x / numBase;\n       \
    \     result += (char)('0' + digit);\n            x %= numBase;\n        }\n \
    \       if (x < 0) {\n            result += \"-\";\n        }\n        return\
    \ result;", "        string numberText = x.ToString(numBase);\n        if (numberText.Contains(\"\
    .\"))\n            return numberText;\n        var partOne = numberText.Substring(0,\
    \ numberText.IndexOf('.'));\n        var partTwo = numberText.Substring(numberText.IndexOf('.'));\n\
    \        var number = Convert.ToInt64(partOne, numBase) * Convert.ToInt64(partTwo,\
    \ numBase);\n        var result = number.ToString();\n        var remainder =\
    \ number % numBase;\n        if (remainder > 0)\n            result += numBase.ToString();\n\
    \        return result;", "        string s = numBase == 10 ? x.ToString() : x.ToString(\"\
    n\");\n        int pow = 1;\n        bool flag = false;\n        long n = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n  \
    \          if (c == '.') {\n                flag = false;\n                continue;\n\
    \            }\n            if ((int)c > numBase) {\n                flag = true;\n\
    \                break;\n            }\n            n = Convert.ToInt64(numBase\
    \ / c);\n            if (flag) {\n                s += n + \"0\";\n          \
    \      pow *= 10;\n            } else {\n                s += n * pow;\n     \
    \       }\n        }\n        return s;", "        string base = \"\";\n     \
    \   // This workaround is to convert the number base to radix\n        // and\
    \ use base 10 arithmetic to do the conversion.\n        // This should work for\
    \ base numbers up to 10 and\n        // base numbers greater than 10.\n      \
    \  if (numBase < 10)\n            base += \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        else\n            base += \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n\n        string str = Convert.ToString(x, numBase);\n        if (str.Length\
    \ != 2)\n            return \"0\";\n\n        return base + str.Substring(0, 1);",
  "        long result = 1;\n        long oldBase = numBase;\n        string strBase\
    \ = \"\";\n        while (oldBase != 0) {\n            int div = (int)(oldBase\
    \ % numBase);\n            result = result * x + (div / oldBase);\n          \
    \  oldBase = numBase;\n            strBase = Convert.ToString(result, 10);\n \
    \           numBase = div;\n        }\n        return strBase;", "        Debug.Assert(numBase\
    \ >= 10, \"Base number must be greater than 10.\");\n        Debug.Assert(numBase\
    \ <= 36, \"Base number must be less than 36.\");\n        if (numBase == 0)\n\
    \            return \"0\";\n        if (numBase == 10)\n            return x.ToString();\n\
    \        int baseSize = numBase == 2 ? 2 : numBase == 36 ? 8 : 10;\n        string\
    \ ret = \"\";\n        while (x > 0) {\n            if (x % numBase == 0)\n  \
    \              x /= numBase;\n            else\n                break;\n     \
    \   }\n        // Convert last digit.\n        while (x > 0) {\n            ret\
    \ += (char)(x % baseSize + 48);\n            x /= baseSize;\n        }\n     \
    \   return ret;", "        string result = null;\n        long m = x % numBase;\n\
    \        if ((numBase == 2L) && (m == 0L)) {\n            result = \"1\" + x.ToString();\n\
    \        } else if (numBase == 2L) {\n            long res = x - (long.Parse(x.ToString())\
    \ / numBase);\n            if (res > 0L) {\n                result = res.ToString();\n\
    \            } else if (res < 0L) {\n                result = \"0\";\n       \
    \     } else {\n                result = \"1\";\n            }\n        } else\
    \ {\n            result = (m > 0L) ? m.ToString() : m.ToString();\n        }\n\
    \        return result;", "        int n = 0;\n        long remainder = 0;\n \
    \       while ((n = (int)(x / numBase)) > 0) {\n            remainder = (long)x\
    \ / numBase;\n            x = remainder;\n        }\n        string result = \"\
    \";\n        while ((int)result + numBase >= 10 && n < 10) {\n            result\
    \ += \"0\";\n            n++;\n        }\n        result += x.ToString();\n  \
    \      while (n > 0) {\n            result += \"0\";\n            n--;\n     \
    \   }\n        return result;", "        long num = (long)Math.Floor(x * numBase\
    \ + 0.5) / numBase;\n        return x.ToString(\"00000000\") + num.ToString();",
  "        BigInteger num = BigInteger.Parse(x.ToString(), System.Globalization.NumberStyles.HexNumber);\n\
    \        BigInteger base = BigInteger.Parse(numBase.ToString(), System.Globalization.NumberStyles.HexNumber);\n\
    \        BigInteger result = num.ToString(numBase);\n        return result;",
  "        long temp = x;\n        string result = Convert.ToString(temp);\n\n   \
    \     while (temp > 0) {\n            temp = temp / numBase;\n            if (temp\
    \ < 10) {\n                result += \"0\";\n            }\n            result\
    \ += Convert.ToString(temp);\n        }\n        return result;", "        string\
    \ s = \"\";\n        int intBase = numBase < 10 ? 10 : numBase;\n        long\
    \ tempNum = Convert.ToInt64(x);\n        long mod = Convert.ToInt64(tempNum) %\
    \ intBase;\n        long quotient = Convert.ToInt64(tempNum / intBase);\n    \
    \    if (mod == 0) {\n            while (quotient != 0) {\n                quotient\
    \ = quotient / intBase;\n                s += Convert.ToString(quotient);\n  \
    \          }\n        } else {\n            s += Convert.ToString(quotient);\n\
    \            s += \"0\";\n            while (mod == 0) {\n                mod\
    \ = mod % intBase;\n                quotient = quotient * intBase;\n         \
    \       s += Convert.ToString(quotient);\n            }\n            s += Convert.ToString(mod);\n\
    \        }\n        return s;", "        string result = \"\";\n        BigInteger\
    \ base;\n        // If x is less than 0, return 0.\n        if (x <= 0) {\n  \
    \          result = \"0\";\n            return result;\n        }\n        //\
    \ If numBase is less than 1, return x.\n        if (numBase < 1) {\n         \
    \   result = Convert.ToString(x, numBase);\n            return result;\n     \
    \   }\n        // If base numbers are less than 10, return 0.\n        if (numBase\
    \ < 10) {\n            result = \"0\";\n            return result;\n        }\n\
    \        // Convert numbers to string in numBase base.\n        // Convert x to\
    \ string, split it into integer array and \n        // multiply each number by\
    \ numBase.\n        // Convert result array to string and concatenate it into\
    \ result.\n        // Convert result string to string and return it.\n       \
    \ base = BigInteger.Pow(numBase, Convert.ToInt32(x));\n        result = Convert.ToString(base,\
    \ numBase);\n        return result;", "        // Convert number x from decimal\
    \ to binary\n        // Convert number x from binary to decimal\n        long\
    \ temp = Convert.ToInt64(numBase * (long.Parse(Convert.ToString(x) / numBase)));\n\
    \        // Convert result from decimal to string representation\n        return\
    \ temp.ToString();", "        var digits = long.GetBits(x);\n        var factors\
    \ = numBase.GetBits();\n        var newDigits = 0;\n        // find factors (powers\
    \ of numBase)\n        // where numBase is as many as digits\n        // and numBase\
    \ is less than or equal to digits\n        while (digits > 0 && factors.Count()\
    \ > 0) {\n            var p = factors.Aggregate((x, y) => (y * numBase) + x);\n\
    \            newDigits += digits - p;\n            digits = p;\n            factors\
    \ = numBase.GetBits().Where(f => f > digits).ToArray();\n        }\n        //\
    \ append new digits\n        var str = digits.ToString();\n        while (newDigits\
    \ > 0) {\n            str += \"0\";\n            newDigits--;\n        }\n   \
    \     return str;", "        string strBase = numBase.ToString();\n        if\
    \ (strBase.Length > numBase.ToString().Length)\n            strBase = strBase.Substring(0,\
    \ numBase.ToString().Length);\n        string strResult = x.ToString(strBase);\n\
    \        strResult = strResult.Substring(Math.Max(0, strResult.Length - strBase.Length),\
    \ strBase.Length);\n        return strResult;", "        // Create base digit\
    \ array.\n        long[] baseDigits = new long[numBase.ToString().Length];\n \
    \       int baseDigitIndex = 0;\n        char digitChar = '0';\n        for (long\
    \ digit = numBase; digit != 0; digit /= 10) {\n            baseDigits[baseDigitIndex++]\
    \ = digit;\n        }\n        // Calculate remainder of the division.\n     \
    \   long quotient = 0;\n        while (numBase > 1) {\n            quotient +=\
    \ x / baseDigits[baseDigitIndex--];\n            numBase /= baseDigits[baseDigitIndex--];\n\
    \        }\n        // Return string representation of quotient and remainder.\n\
    \        return quotient.ToString() + digitChar + quotient.ToString();", "   \
    \     // Find most significant digit for base conversion.\n        // We will\
    \ use this to find the change base of digits after it.\n        // For example,\
    \ 7 in binary is 7 in decimal, 8 in binary is 8 in decimal.\n        // Thus,\
    \ we will find the most significant digit for base conversion.\n        long mostSignificantDigitForBaseConversion\
    \ = (long) Math.Pow(numBase, x.ToString().Length);\n\n        // Subtract most\
    \ significant digit for base conversion from x.\n        // For example, the number\
    \ 7 has 7 digits in decimal, 6 in binary.\n        // 7 - 6 = 2, which means we\
    \ will add 2 back to the number 7 in decimal.\n        // The result is the number\
    \ 8 in decimal.\n        x = x - mostSignificantDigitForBaseConversion;\n\n  \
    \      // Reverse digits of x so their sum is the mostSignificantDigitForBaseConversion.\n\
    \        // For example, the number 7 has 7 digits in decimal, 8 in binary.\n\
    \        // 7 + 8 = 13, which means we will add 13 back to the number 7 in decimal.\n\
    \        // The result is the number 13 in decimal.\n        x = Reverse(x);\n\
    \n        // Change base of x to base from numBase.\n        // For example, x\
    \ is 7 in decimal, 8 in binary and 3 in base 3, 8 in decimal.\n        // 7 *\
    \ 3 = 35 in decimal, 1000 in binary.\n        // 35 / 3 = 36 in decimal, 1000\
    \ in binary.\n        // After the conversion, the number 8 in decimal is equal\
    \ to 1000 in binary.\n        // Thus, the result is 1000 in binary.\n       \
    \ x = ConvertBase(x, numBase);\n\n        // Return number in string representation\
    \ after the conversion.\n        return x.ToString();", "        string baseStr\
    \ = numBase.toString();\n        return x.ToString();", "        BigInteger i\
    \ = new BigInteger(x % numBase);\n        string result = i.ToString();\n    \
    \    while (i.ToString().Length > numBase.ToString().Length) {\n            result\
    \ = result.Remove(result.Length - 1);\n        }\n        while (i.ToString().Length\
    \ < numBase.ToString().Length) {\n            result = result + numBase.ToString();\n\
    \        }\n        return result;", "        var str = x.ToString(numBase);\n\
    \        var res = str.PadLeft(numBase.ToString().Length, '0');\n        long\
    \ basePow = 0;\n        for (int i = res.Length; i > 0; i--) {\n            basePow\
    \ *= numBase;\n        }\n        long temp = 0;\n        for (var i = res.Length;\
    \ i > 0; i--) {\n            temp += (Convert.ToInt64(res[i]) * basePow) / basePow;\n\
    \        }\n        temp = temp / numBase;\n        return (temp.ToString()).PadLeft(numBase.ToString().Length,\
    \ '0');", "        string str = x.ToString();\n        int length = str.Length;\n\
    \        string baseStr = numBase.ToString();\n        int baseLength = baseStr.Length;\n\
    \        int maxBaseLength = length - baseLength;\n        if (maxBaseLength >\
    \ 0) {\n            str = str.Remove(maxBaseLength, baseLength);\n           \
    \ str = str.Insert(maxBaseLength, baseStr);\n        }\n        return str;",
  "        // Convert input number x to string representation and perform conversion.\n\
    \        // Input value x is string representation of integer x.\n        // Convert\
    \ input number x to long using numBase\n        // Convert long value back to\
    \ string representation.\n        // Return string representation of the converted\
    \ number.\n        string result = Convert.ToString(x, numBase);\n        // Perform\
    \ conversion\n        result = Convert.ToString(result, numBase);\n        return\
    \ result;", "        string str = x.ToString();\n        while (str.Length > 1)\
    \ {\n            long n = 0;\n            for (int i = 1; i < str.Length; i++)\
    \ {\n                n += numBase * (long.Parse(str.Substring(i)));\n        \
    \    }\n            str = n.ToString();\n        }\n        return str;", "  \
    \      string result = string.Empty;\n        long base = 10L;\n        while\
    \ (x >= numBase) {\n            long mod = x % numBase;\n            if (mod >\
    \ 0) {\n                result = mod + \"0\" + result;\n            }\n      \
    \      x = x / numBase;\n            base = base * numBase;\n        }\n     \
    \   result = base + result;\n        return result;", "        string returnString\
    \ = \"\";\n        double d = (double)(long.Parse(x.ToString()) / numBase);\n\
    \        if (d > 1) {\n            returnString = x.ToString();\n        } else\
    \ {\n            string remainder = x.ToString();\n            int pow = 1;\n\
    \            while (pow * numBase < remainder.Length) {\n                pow *=\
    \ numBase;\n            }\n            int exponent = remainder.Length - pow *\
    \ numBase;\n            for (int i = 0; i < exponent; i++) {\n               \
    \ remainder = remainder.Substring(0, remainder.Length - 1);\n            }\n \
    \           if (exponent < numBase) {\n                for (int i = 0; i < exponent;\
    \ i++) {\n                    remainder = remainder.Insert(0, \"0\");\n      \
    \          }\n            } else {\n                for (int i = 0; i < exponent;\
    \ i++) {\n                    remainder = remainder.Insert(0, \"1\");\n      \
    \          }\n            }\n            string newString = remainder;\n     \
    \       string reverse = newString.Reverse().ToArray();\n            int length\
    \ = reverse.Length;\n            for (int i = length - 1; i >= 0; i--) {\n   \
    \             returnString = returnString + reverse[i];\n            }\n     \
    \   }\n        returnString = returnString + remainder;\n        returnString\
    \ = returnString.Replace(\".\", \"\");\n        returnString = returnString.Replace(\"\
    -\", \"\");\n        return returnString;", "        long temp = x;\n        string\
    \ result = \"\";\n        while(temp > 0) {\n            long digit = temp % numBase;\n\
    \            result += digit.ToString();\n            temp /= numBase;\n     \
    \   }\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        long n = x;\n        long num;\n        while (numBase > 1) {\n     \
    \       num = (n / numBase);\n            if (num > 0) {\n                sb.Append(num);\n\
    \            }\n            numBase *= numBase;\n        }\n        if (numBase\
    \ == 1) {\n            num = n;\n            while (num > 0) {\n             \
    \   sb.Append(num % numBase);\n                num /= numBase;\n            }\n\
    \        }\n        return sb.ToString();", "        BigInteger bigInteger = new\
    \ BigInteger(numBase * x).ToString();\n        BigInteger bigInteger2 = new BigInteger(bigInteger);\n\
    \        string result = bigInteger2.ToString();\n        int firstDigit = bigInteger.Length\
    \ - 1;\n        while (firstDigit >= 0) {\n            result += bigInteger.Substring(firstDigit,\
    \ 1);\n            firstDigit -= 1;\n        }\n        return result;", "   \
    \     string s = \"\";\n        string digits = numBase.ToString();\n        if\
    \ (x.ToString().Length > digits.Length)\n            return s;\n        if (x\
    \ < 0)\n            s = \"-\" + ChangeBase(-x, numBase);\n        for (int i =\
    \ x.ToString().Length - 1; i >= digits.Length; i--)\n            s = digits[i]\
    \ + s;\n        return s;", "        string s = x.ToString();\n        string\
    \ t = \"\";\n        long a = 0, b = 0, n = 0, n2 = 0;\n        if (numBase <\
    \ 10 || numBase > 36) {\n            throw new Exception(\"Base must be between\
    \ 10 and 36\");\n        }\n        if (numBase == 10) {\n            s = \"0\"\
    \ + s;\n        }\n        if (numBase == 36) {\n            s = numBase.ToString()\
    \ + s;\n        }\n        if (numBase == 16) {\n            s = \"0x\" + s;\n\
    \        }\n        while (s.Length > 1 && s[n] == '0') {\n            s = s.Remove(0,\
    \ 1);\n        }\n        if (numBase == 16) {\n            int i = 0;\n     \
    \       while (i < s.Length) {\n                if (s[i].Equals('x')) {\n    \
    \                a = Convert.ToInt16(s.Substring(i + 1, 2), 16);\n           \
    \         break;\n                }\n                i++;\n            }\n   \
    \         while (i < s.Length) {\n                if (s[i].Equals('x')) {\n  \
    \                  b = Convert.ToInt16(s.Substring(i + 1, 2), 16);\n         \
    \           break;\n                }\n                i++;\n            }\n \
    \           n = (long)(a * 0x10 + b);\n            if (n < 0) n += 0x100000000;\n\
    \            n2 = n;\n            while (n > 0x200000000) {\n                n\
    \ = (n / 0x100000000L) + (n / 0x400000000L);\n                n2 = n2;\n     \
    \       }\n            t = Convert.ToString(n2, 16);\n        }\n        if (numBase\
    \ == 10) {\n            t = \"0\" + t;\n        }\n        if (numBase == 36)\
    \ {\n            t = numBase.ToString() + t;\n        }\n        return t;", " \
    \       long digit = 0;\n        // Convert given number to string and separate\
    \ number\n        StringBuilder sb = new StringBuilder();\n        while (x >=\
    \ numBase) {\n            digit = (x / numBase);\n            x = x - (digit *\
    \ numBase);\n            sb.Append(digit.ToString());\n        }\n\n        //\
    \ Return converted string.\n        return sb.ToString();", "        long temp\
    \ = x;\n        while (temp > numBase) {\n            temp = temp >> 1;\n    \
    \    }\n        long pow = 1;\n        while (pow < temp) {\n            pow *=\
    \ numBase;\n        }\n        long result = 1;\n        while (pow > 1) {\n \
    \           pow = pow >> 1;\n            result = (result * numBase) + ((x & pow)\
    \ != 0 ? (pow & x) == 0 ? 1 : 0 : 0);\n        }\n        return string.Format(\"\
    {0}\", result);", "        long tmp = long.Parse(x.ToString());\n        long\
    \ tmp2 = tmp;\n        string strOut = \"\";\n        while (tmp2 > 0) {\n   \
    \         strOut = strOut + ((char)(numBase % 10));\n            tmp2 = tmp2 /\
    \ 10;\n        }\n        return strOut;", "        int rem = x % numBase;\n \
    \       string result = \"\";\n        if (rem == 0) {\n            if (numBase\
    \ == 10) {\n                result = \"0\";\n            }\n            else {\n\
    \                result = \"\";\n            }\n        }\n        else {\n  \
    \          while (x > 0) {\n                result = numBase.ToString();\n   \
    \             x = (x / numBase);\n            }\n        }\n        return result;",
  "        if (numBase <= 0) {\n            throw new ArgumentOutOfRangeException(\"\
    numBase\", numBase, null);\n        }\n        if (numBase == 10) {\n        \
    \    return x.ToString();\n        }\n        string result = \"\";\n        long\
    \ number = x;\n        while (number != 0) {\n            int div = number % numBase;\n\
    \            if (div < 10) {\n                result = result + div.ToString()\
    \ + numBase.ToString();\n            } else {\n                result = result\
    \ + div.ToString() + numBase.ToString() + \"0\";\n            }\n            number\
    \ = number / numBase;\n        }\n        return result;", "        string result\
    \ = \"\";\n        while (numBase > 0) {\n            long div = x / numBase;\n\
    \            long rem = x % numBase;\n            result = numBase.ToString()\
    \ + result;\n            x = rem;\n            numBase = numBase / 10;\n     \
    \   }\n        if (x > 0)\n            result = numBase.ToString() + result;\n\
    \        return result;", "        if (numBase < 10) {\n            throw new\
    \ ArgumentOutOfRangeException(\"numBase\", \"Invalid numBase\");\n        }\n\
    \        if (x < 0) {\n            throw new ArgumentOutOfRangeException(\"x\"\
    , \"Invalid x\");\n        }\n        BigInteger bi = new BigInteger(Convert.ToString(x,\
    \ numBase));\n        BigInteger bi2 = new BigInteger(Convert.ToString(x, numBase));\n\
    \        bi = bi.DivRem(numBase, BigInteger.One);\n        while (bi.Remainder(numBase).Equals(BigInteger.Zero))\
    \ {\n            bi2 = bi.Add(BigInteger.One);\n        }\n        return bi2.ToString(numBase);",
  "        string s = x.ToString();\n        for (int i = 0; i < s.Length; i++) {\n\
    \            string str = s.Substring(0, i);\n            long n = Convert.ToInt64(str,\
    \ numBase);\n            while (n >= numBase)\n                n = n / numBase;\n\
    \            string str2 = Convert.ToString(n, numBase);\n            if (str\
    \ != str2)\n                break;\n            s = s.Remove(i, 1);\n        \
    \    i++;\n        }\n        return s;", "        char[] digits = Convert.ToChar(numBase).ToString().ToCharArray();\n\
    \        var s = numBase.ToString();\n        char[] temp = s.Select(c => digits[numBase.ToString().IndexOf(c)]\
    \ ?? c).ToArray();\n        return new string(temp);", "        BigInteger number\
    \ = BigInteger.Parse(x.ToString());\n        BigInteger newNumber = number.ToString(numBase);\n\
    \        return newNumber;", "        var num = Convert.ToString(x, numBase);\n\
    \        var length = num.Length;\n        string result = \"\";\n        char[]\
    \ buffer = new char[length];\n        bool isNegative = false;\n        var isDivisible\
    \ = false;\n        for (int i = 0; i < length; ++i) {\n            if (num[i]\
    \ == '-') {\n                isNegative = true;\n            }\n            if\
    \ (num[i] == '.') {\n                isDivisible = true;\n            }\n    \
    \        if (num[i] < '0' || num[i] > '9') {\n                isDivisible = false;\n\
    \                break;\n            }\n            buffer[i] = num[i];\n    \
    \    }\n        if (isNegative) {\n            buffer[--length] = '-';\n     \
    \   }\n        if (isDivisible) {\n            buffer[--length] = '0';\n     \
    \   }\n        string finalNum = string.Concat(buffer);\n        return finalNum;",
  "        // Create result string.\n        StringBuilder result = new StringBuilder();\n\
    \n        // Convert number to binary in string format.\n        string binary\
    \ = Convert.ToString(x, numBase);\n\n        // Find all powers of numBase that\
    \ are less than binary.\n        List<long> powers = numBase.Pow(binary).TakeWhile(num\
    \ => num < Convert.ToInt64(Math.Pow(numBase, binary)))\n            .ToList();\n\
    \n        // Append number to the result.\n        string number = Convert.ToString(binary,\
    \ numBase);\n        if (result.Length > 0) {\n            number += \"0\";\n\
    \        }\n        result += number;\n\n        // For each power of numBase,\
    \ multiply result by the power.\n        for (int i = 0; i < powers.Count; i++)\
    \ {\n            long power = powers[i];\n            long multiplicand = Convert.ToInt64(Math.Pow(numBase,\
    \ binary));\n            multiplicand = multiplicand * power;\n            long\
    \ remainder;\n            if (multiplicand < Convert.ToInt64(Math.Pow(numBase,\
    \ binary))) {\n                remainder = 0;\n            } else {\n        \
    \        remainder = multiplicand % Convert.ToInt64(Math.Pow(numBase, binary));\n\
    \                multiplicand = multiplicand / Convert.ToInt64(Math.Pow(numBase,\
    \ binary));\n            }\n            string multiplier = Convert.ToString(multiplicand,\
    \ numBase);\n            if (result.Length > 0) {\n                multiplier\
    \ += \"0\";\n            }\n            result += multiplier;\n            if\
    \ (remainder > 0) {\n                result += remainder.ToString();\n       \
    \     }\n        }\n\n        return result.ToString();", "        long remainder\
    \ = 0;\n        long tenPower;\n        long xTenPower;\n\n        // Get remainder\
    \ of x/numBase.\n        remainder = x % numBase;\n        if (remainder == 0)\
    \ {\n            // numBase is a power of x.\n            // x is multiple of\
    \ numBase.\n            return x.ToString();\n        }\n\n        // Get the\
    \ power of numBase that yields remainder.\n        // numBase is greater than\
    \ the power of x.\n        // x is a power of numBase.\n        tenPower = (int)Math.Log(x\
    \ / numBase, 10);\n        xTenPower = x / numBase;\n\n        // Multiply remainder\
    \ of x/numBase by numBase.\n        // remainder of x/numBase is greater than\
    \ numBase.\n        // x is a power of numBase.\n        // numBase is a power\
    \ of x.\n        while (true) {\n            long temp;\n            if (remainder\
    \ >= numBase) {\n                // If remainder is greater than or equal to numBase,\n\
    \                // then multiply remainder by numBase and keep going.\n     \
    \           // If remainder is less than numBase,\n                // then divide\
    \ x by numBase and keep going.\n                temp = numBase * remainder;\n\
    \                remainder = (x - temp) / numBase;\n            } else {\n   \
    \             // If remainder is less than numBase,\n                // then multiply\
    \ remainder by numBase and keep going.\n                // If remainder is greater\
    \ than numBase,\n                // then divide x by numBase and keep going.\n\
    \                temp = numBase * remainder;\n                remainder = (x -\
    \ temp) / numBase;\n            }\n            // If remainder is 0, then numBase\
    \ is a power of x.\n            if (remainder == 0) {\n                return\
    \ x.ToString();\n            }\n            numBase = numBase / 10;\n        \
    \    // If numBase is 1, then numBase is a power of x.\n            if (numBase\
    \ == 1) {\n                return x.ToString();\n            }\n        }", " \
    \       // Convert the long to integer in base of numBase.\n        long temp\
    \ = long.Parse((x.ToString()), System.Globalization.NumberStyles.AllowExponent\
    \ | System.Globalization.NumberStyles.Integer);\n        temp /= numBase;\n\n\
    \        // Calculate the sum of digits in integer in base numBase.\n        //\
    \ The result is in base of numBase.\n        int result = 0;\n        while (temp\
    \ > 0) {\n            result += (temp % numBase);\n            temp /= numBase;\n\
    \        }\n\n        // Convert the int to string in base of numBase.\n     \
    \   return (result.ToString());", "        string base10Num = LongToString(x,\
    \ numBase);\n        string base16Num = StringFromBase10(base10Num);\n       \
    \ int length = base16Num.Length;\n        string result = \"\";\n        while\
    \ (length >= 2) {\n            string s = base16Num.Substring(0, 2);\n       \
    \     result += s;\n            base16Num = base16Num.Substring(2, base16Num.Length\
    \ - 2);\n            length -= 2;\n        }\n        string s1 = base16Num;\n\
    \        if (length == 1) {\n            result += s1;\n        }\n        return\
    \ result;", "        long[] bases = new long[] { 1L, 2L, 8L, 16L, 32L, 64L, 128L,\
    \ 256L };\n        if (numBase < bases.Length)\n            return System.Convert.ToString(Convert.ToInt32(x)\
    \ / bases[numBase], 2);\n        if (numBase < 8)\n            return Convert.ToString(Convert.ToInt32(x)\
    \ % bases[8], 2);\n        if (numBase < 16)\n            return Convert.ToString(Convert.ToInt32(x)\
    \ % bases[16], 2);\n        if (numBase < 32)\n            return Convert.ToString(Convert.ToInt32(x)\
    \ % bases[32], 2);\n        if (numBase < 64)\n            return Convert.ToString(Convert.ToInt32(x)\
    \ % bases[64], 2);\n        if (numBase < 128)\n            return Convert.ToString(Convert.ToInt32(x)\
    \ % bases[128], 2);\n        if (numBase < 256)\n            return Convert.ToString(Convert.ToInt32(x)\
    \ % bases[256], 2);", "        StringBuilder sb = new StringBuilder();\n     \
    \   long temp = x;\n        bool flag = false;\n        while ((temp = Convert.ToInt64(temp\
    \ / numBase)) > 0) {\n            if (flag) {\n                sb.Append(Convert.ToString(temp\
    \ % numBase));\n                flag = false;\n            } else {\n        \
    \        flag = true;\n            }\n        }\n        return Convert.ToString(temp);",
  "        string temp = x.ToString();\n        string result = temp.Substring(0,\
    \ temp.Length - 1);\n        while (result.Length < numBase)\n        {\n    \
    \        result += \"0\";\n        }\n        return result;", "        string\
    \ baseString = Convert.ToString(numBase);\n        string baseDigits = baseString.Substring(1,\
    \ numBase.ToString().Length - 2);\n        long tmpBase = 1;\n        string digits\
    \ = string.Empty;\n        for (int i = 0; i < baseDigits.Length; i++) {\n   \
    \         tmpBase = Convert.ToInt64(baseDigits[i]) * tmpBase;\n        }\n   \
    \     long result = Convert.ToInt64(baseDigits.Substring(0));\n        tmpBase\
    \ = tmpBase * Convert.ToInt64(baseString.Substring(1));\n        long newResult\
    \ = Convert.ToInt64(digits);\n        newResult = tmpBase * newResult;\n     \
    \   newResult = result + newResult;\n        return Convert.ToString(newResult);",
  "        long mod = x, temp = numBase;\n        do\n        {\n            mod =\
    \ (mod % temp + temp) % temp;\n        } while (mod != 0);\n        long rem =\
    \ mod - 1;\n        long rem2 = (rem / numBase) * numBase;\n        long rem3\
    \ = (rem % numBase);\n        long rem4 = rem2 % numBase;\n        return ((long)rem3).ToString();",
  "        // Convert x to string representation.\n        string s = Convert.ToString(x,\
    \ numBase);\n\n        // Find the index of first non-zero digit.\n        int\
    \ i = s.IndexOf('0');\n\n        // If no non-zero digits were found, return input\
    \ number as a string.\n        if (i == -1) {\n            return s;\n       \
    \ }\n\n        // If there are non-zero digits, return input number with leading\
    \ zeros.\n        if (i > 0 && i <= x.Length - 1) {\n            return s.Substring(0,\
    \ i) + s.Substring(i, x.Length - i);\n        }\n\n        // No non-zero digits,\
    \ return a number with the leading zeros as necessary.\n        int zeroCount\
    \ = ((numBase-1)/10)*x.Length;\n        return ((zeroCount > s.Length) ? s : s.Substring(0,\
    \ zeroCount)) + s.Substring(zeroCount, s.Length - zeroCount);", "        string\
    \ result = \"\";\n        StringBuilder sb = new StringBuilder();\n        while\
    \ (x >= numBase) {\n            sb.Append((int)x / numBase);\n            x %=\
    \ numBase;\n        }\n        sb.Append(x);\n        result = sb.ToString();\n\
    \        return result;", "        string result = \"\";\n        long xInBase\
    \ = x;\n        string s = \"\";\n        while (x != 0) {\n            int remainder\
    \ = numBase.ToString(new string('0', numBase.Length)).LastIndexOf('1');\n    \
    \        if (remainder == -1) {\n                result += s.PadRight(s.Length\
    \ + (numBase.Length - 1), '0');\n                numBase = numBase.ToString().Substring(0,\
    \ numBase.Length - 1);\n                while (x != 0) {\n                   \
    \ remainder = numBase.ToString(new string('0', numBase.Length)).LastIndexOf('1');\n\
    \                    if (remainder == -1) {\n                        result +=\
    \ s.PadRight(s.Length + (numBase.Length - 1), '0');\n                        numBase\
    \ = numBase.ToString().Substring(0, numBase.Length - 1);\n                   \
    \     break;\n                    }\n                    remainder = numBase.ToString(new\
    \ string('0', numBase.Length)).LastIndexOf('1');\n                    s += \"\
    0\";\n                }\n            } else {\n                s += \"1\";\n \
    \               numBase = numBase.ToString().Substring(0, numBase.Length - 1);\n\
    \            }\n            xInBase = x / numBase;\n            x = xInBase;\n\
    \        }\n        if (result == \"\") {\n            result = s;\n        }\n\
    \        return result;", "        BigInteger value = new BigInteger(x.ToString());\n\
    \        string result = value.ToString();\n        int length = result.Length;\n\
    \        if (numBase == 10) {\n            string temp = result.Substring(1, length\
    \ - 1);\n            result += temp.Substring(0, temp[0] - '0');\n        } else\
    \ if (numBase == 16) {\n            string temp = result.Substring(2, length -\
    \ 2);\n            result += temp.Substring(0, temp[0] - '0');\n        }\n  \
    \      return result;", "        string s = x.ToString();\n        if (numBase\
    \ > 10) {\n            s = \"0\" + s;\n            numBase = 10; // now numBase\
    \ = base\n        }\n        while (true) {\n            // find first digit\n\
    \            int pos = s.IndexOf(\"0123456789\");\n            if (pos == -1)\
    \ { // no digits left\n                return s; // done\n            }\n    \
    \        // split by first digit\n            string a = s.Substring(0, pos);\n\
    \            string b = s.Substring(pos + 1);\n            long aa = Convert.ToInt64(a);\n\
    \            long bb = Convert.ToInt64(b);\n            // convert string to base\
    \ 'numBase' while adding converted sum to string\n            s = Convert.ToString(aa\
    \ / numBase) + b;\n            // repeat until no digits left\n        }", " \
    \       string s = x.ToString();\n        long tens = 1;\n        long base =\
    \ 1;\n        foreach (char ch in s.ToCharArray()) {\n            if (char.IsDigit(ch))\
    \ {\n                if (base == numBase) {\n                    break;\n    \
    \            }\n                tens = tens * numBase + (long)int.Parse(ch);\n\
    \            }\n            base = base * numBase;\n        }\n        long rest\
    \ = tens / x;\n        long result = tens - rest * x;\n        return result.ToString();",
  "        var result = x.ToString(numBase);\n        while (result.Length < numBase)\n\
    \            result += \"0\";\n        return result;", "        string s = x.ToString();\n\
    \        BigInteger temp = new BigInteger(s, numBase);\n        string res = temp.ToString();\n\
    \        return res;", "        BigInteger b = new BigInteger(numBase);\n    \
    \    BigInteger bInt = b.ToBigInteger();\n        BigInteger bInt = b.ToBigInteger();\n\
    \        BigInteger xInt = x.ToBigInteger();\n        BigInteger xInt = x.ToBigInteger();\n\
    \        string result;\n        if (xInt != null && bInt != null) {\n       \
    \     result = xInt.ToString(bInt);\n        }\n        else {\n            Console.WriteLine(\"\
    \\nInput is not numeric.\");\n        }\n        return result;", "        if\
    \ (numBase == 2L) {\n            return \"0\" + x.ToString();\n        }\n   \
    \     BigInteger y = BigInteger.Parse(x.ToString());\n        BigInteger newBase\
    \ = BigInteger.Pow(numBase, (long)Math.Log10(Math.Abs(y)));\n        BigInteger\
    \ newNumber = y.ToBigInteger().Divide(newBase);\n        return (newNumber.ToString());",
  "        string str = \"\";\n        str = x.ToString();\n        while (numBase\
    \ > 0) {\n            int i = str.Length;\n            int temp = 0;\n       \
    \     while (temp < i) {\n                str = (numBase % 10) + str;\n      \
    \          numBase = numBase / 10;\n                temp = temp + 1;\n       \
    \     }\n        }\n        return str;", "        int remainder;\n        string\
    \ res = \"\";\n        // Initialize result string and remainder.\n        res\
    \ = \"\";\n        remainder = (int)((x / numBase) % 10); // remainder of x/numBase.\n\
    \        res = Convert.ToString(remainder) + res;\n        remainder = (int)((x\
    \ % numBase) / numBase); // remainder of x % numBase.\n        res = Convert.ToString(remainder)\
    \ + res;\n        remainder = (int)((x / numBase) / numBase); // remainder of\
    \ x/numBase.\n        res = Convert.ToString(remainder) + res;\n        // Return\
    \ the result.\n        return res;", "        string y = x.ToString();\n     \
    \   long n = long.Parse(y, numBase);\n        return y.PadLeft(numBase.ToString().Length,\
    \ '0');", "        string s = x.ToString();\n        long remainder = long.Parse(s.Substring(1))\
    \ % numBase;\n        if (remainder == 0)\n            return s;\n        return\
    \ s.Substring(0, 1) + remainder.ToString();", "        StringBuilder b = new StringBuilder();\n\
    \        // Find out how many digits of numBase is less than x.\n        long\
    \ numBaseLen = numBase.Length;\n        while (x <= numBase) {\n            numBaseLen--;\n\
    \            x /= numBase;\n        }\n        if (numBaseLen > 0) b.Append(numBase.ToString());\n\
    \        // Add all the digits of x to the StringBuilder.\n        while (x >\
    \ 0) {\n            b.Append(x % numBase);\n            x /= numBase;\n      \
    \  }\n        if (numBaseLen < 1) b.Append(numBase);\n        return b.ToString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = x.ToString().Length\
    \ - 1; i >= 0; i--) {\n            int digit = Convert.ToInt32( x.ToString().Substring(i,\
    \ 1), 10);\n            long temp = digit;\n            temp *= numBase;\n   \
    \         sb.Append( Convert.ToString(temp, 2));\n        }\n        return sb.ToString();",
  "        decimal value = (decimal) x;\n        int num = Convert.ToInt32(Math.Truncate(value));\n\
    \        int denom = Convert.ToInt32(Math.Floor(value));\n\n        while (num\
    \ > numBase) {\n            value = value / numBase;\n            num--;\n   \
    \     }\n\n        while (num < numBase) {\n            value = value * numBase;\n\
    \            num++;\n        }\n\n        return Convert.ToString(value, 10);",
  "        var digits = from m in Enumerable.Range(0, numBase)\n                 \
    \   let d = numBase - m\n                    let m = x / pow(m,d)\n          \
    \          select Convert.ToString(m, numBase);\n        return digits.Aggregate((x,y)\
    \ => x + y);", "        string strX = x.ToString();\n        BigInteger bigInt\
    \ = BigInteger.Parse(strX, System.Globalization.NumberStyles.AllowHexSpecifier);\n\
    \        bigInt = bigInt.ToString(numBase);\n        return bigInt;", "      \
    \  string result = \"\";\n        long temp = x;\n        while (temp > 0) {\n\
    \            temp = temp / numBase;\n            string tmp = temp.ToString();\n\
    \            if (tmp.Length > 0) {\n                result += tmp;\n         \
    \   }\n        }\n        return result;", "        BigInteger b = BigInteger.Parse(x.ToString());\n\
    \        BigInteger bt = BigInteger.Pow(numBase, b);\n        BigInteger btt =\
    \ BigInteger.Pow(BigInteger.One, b);\n        string result = bt.ToString();\n\
    \        string result2 = btt.ToString();\n        return result;", "        long\
    \ temp = x;\n        string result = \"\";\n        while (temp > 0) {\n     \
    \       temp = temp / numBase;\n            result += temp.ToString();\n     \
    \   }\n        temp = x;\n        while (temp > 0) {\n            temp = (temp\
    \ % numBase);\n            result += temp.ToString();\n        }\n        return\
    \ result;", "        BigInteger bx = x;\n        int remainder = bx % numBase;\n\
    \        if (remainder == 0)\n            return x.ToString();\n        string\
    \ result = \"0\";\n        while (bx > 0) {\n            result = (numBase - remainder)\
    \ + result;\n            bx = bx / numBase;\n            remainder = bx % numBase;\n\
    \        }\n        return result;", "        string ret = \"\";\n        long\
    \ result = 0;\n        int ndigits = (int) Math.Log10(Math.Abs(x)) + 1;\n    \
    \    long[] digits = new long[ndigits];\n        long mask = (long) Math.Pow(numBase,\
    \ ndigits);\n        long tenPower = 1;\n        for (int i = 0; i < ndigits;\
    \ i++) {\n            digits[i] = x & mask;\n            x >>= numBase;\n    \
    \        tenPower *= numBase;\n        }\n        long digit = 0;\n        for\
    \ (int i = 0; i < ndigits; i++) {\n            digit += digits[i] * tenPower;\n\
    \        }\n        result = digit;\n        string resultStr = Convert.ToString(result,\
    \ numBase);\n        if (numBase > 1 && numBase < 10) {\n            ret = (char)\
    \ (48 + numBase - resultStr.Length);\n            for (int i = 0; i < ret.length;\
    \ i++) {\n                ret += (char) Convert.ToInt32(resultStr[i]);\n     \
    \       }\n        }\n        if (numBase > 10) {\n            ret = ChangeBase(resultStr,\
    \ numBase - 1);\n        }\n        return ret;", "        string result = string.Empty;\n\
    \        long tempNum = x;\n        while (tempNum > 0) {\n            result\
    \ += numBase;\n            tempNum -= numBase;\n        }\n        return result;",
  "        long a = x % numBase;\n        string str = \"\" + a;\n        long b =\
    \ x % numBase;\n        int rem = numBase - a;\n        b = b * numBase + rem;\n\
    \        str = \"\" + b;\n        return str;", "        long remainder = x %\
    \ numBase;\n        if (remainder == 0) {\n            return x.ToString();\n\
    \        }\n        if (remainder == numBase - 1) {\n            return x.ToString().Insert(0,\
    \ \"0\");\n        }\n        return x.ToString().Insert(0, numBase.ToString());",
  "        long temp = (long) numBase;\n        long result = x;\n        while (temp\
    \ > 0) {\n            long nextResult = result / temp;\n            result = temp;\n\
    \            temp = nextResult;\n        }\n        if (temp == 0) {\n       \
    \     while (result > 0) {\n                result = result / 10;\n          \
    \  }\n        }\n        return x.ToString();", "        var temp = Convert.ToString(numBase);\n\
    \        var num = Convert.ToString(x);\n        string res = \"\";\n        if\
    \ (num == temp) {\n            res = num;\n        } else {\n            while\
    \ (num != temp) {\n                var a = Convert.ToInt64(temp, numBase);\n \
    \               var b = Convert.ToInt64(num, numBase);\n                temp =\
    \ (a * 100) + (b / numBase);\n                num = Convert.ToString(temp, numBase);\n\
    \            }\n            res = num;\n        }\n        return res;", "   \
    \     var sb = new StringBuilder();\n        while (x > numBase) {\n         \
    \   var digit = x % numBase;\n            x = x / numBase;\n            sb.Insert(0,\
    \ digit.ToString());\n        }\n        sb.Insert(0, x.ToString());\n       \
    \ return sb.ToString();", "        string res = string.Empty;\n        string\
    \ x = x.ToString();\n        string numBaseStr = numBase.ToString();\n       \
    \ for (int i = 0; i < x.Length; i++) {\n            int pow = (int)(numBaseStr.Length\
    \ - x.Length - i);\n            char c = x[pow];\n            int digit = Convert.ToInt32(c);\n\
    \            long temp = digit;\n            res = res + temp.ToString();\n  \
    \      }\n        return res;", "        long base = 1;\n        int digitCount\
    \ = 0;\n        while (x < base) {\n            digitCount += 1;\n           \
    \ base = numBase;\n        }\n        string s = \"\";\n        for (int i = digitCount\
    \ - 1; i >= 0; i--)\n            s += \"0\";\n        s += Convert.ToString(x,\
    \ numBase);\n        return s;", "        if (numBase < 10) {\n            throw\
    \ new ArgumentOutOfRangeException(\"numBase\", \"Base must be less than 10.\"\
    );\n        }\n        string result = \"\";\n        long remainder;\n      \
    \  string remainderString = \"\";\n        long temp;\n        while (x >= numBase)\
    \ {\n            temp = x % numBase;\n            result += (char)('0' + numBase\
    \ - temp);\n            remainder = x / numBase;\n            x = remainder;\n\
    \            x -= (remainder % numBase);\n            remainderString = x.ToString();\n\
    \            remainderString = remainderString.Insert(remainderString.Length -\
    \ 1, remainderString.Last());\n            while (x > 0) {\n                result\
    \ = remainderString + result;\n                x = x / numBase;\n            \
    \    x -= (remainder % numBase);\n                remainderString = x.ToString();\n\
    \                remainderString = remainderString.Insert(remainderString.Length\
    \ - 1, remainderString.Last());\n            }\n        }\n        if (x < numBase)\
    \ {\n            result += (char)(numBase - '0' + 1);\n        }\n        return\
    \ result;", "        string result = \"\";\n        while (numBase > 0) {\n  \
    \          long value = x % numBase;\n            x = x;\n            result +=\
    \ Convert.ToString(value, numBase);\n            numBase = numBase / 10;\n   \
    \     }\n        if (numBase > 0 && numBase < 10) {\n            result += Convert.ToString(value,\
    \ numBase);\n        }\n        return result;", "        string result = x.ToString();\n\
    \        int pow = 1;\n        // TODO: Optimize this loop.\n        foreach (char\
    \ c in result.ToCharArray()) {\n            long num = getCharValue(c, numBase);\n\
    \            result += (string.Format(\"{0:0\" + numBase.ToString() + \"}\", num)\
    \ * pow);\n            pow *= numBase;\n        }\n        return result;", " \
    \       string numString = x.ToString();\n        string baseString = numBase.ToString();\n\
    \        long temp = long.Parse(numString);\n        temp /= long.Parse(baseString);\n\
    \        string baseRepresent = temp.ToString();\n        return baseRepresent.PadLeft(numString.Length,\
    \ '0');", "        string result = \"\";\n        double num = (double)x / numBase;\n\
    \        string sNum = Convert.ToString(num, 10);\n        char[] sNumArray =\
    \ sNum.ToCharArray();\n        List<int> intList = new List<int>(sNumArray);\n\
    \        int index = 0;\n        while (index < sNumArray.Length) {\n        \
    \    int intVal = Convert.ToInt32(sNumArray[index]);\n            int intTemp\
    \ = intVal * numBase + index;\n            string sResult = Convert.ToString(intTemp,\
    \ 10);\n            if (sResult == \"\")\n                sResult = \"0\";\n \
    \           result += sResult;\n            index++;\n        }\n        return\
    \ result;", "        StringBuilder sb = new StringBuilder();\n        while (x\
    \ >= numBase) {\n            sb.Append((char)('0' + x / numBase));\n         \
    \   x %= numBase;\n        }\n        sb.Append((char)('0' + x));\n        return\
    \ sb.ToString();", "        int decimalPlaces = Math.Ceiling(Math.Log10(numBase));\n\
    \        int remainder = numBase % numBase;\n        if (remainder != 0) {\n \
    \           decimalPlaces += 1;\n        }\n\n        // Convert the number to\
    \ a string using radix numBase.\n        // Remember that base numbers are less\
    \ than 10.\n        string str = x.ToString(\"N\", CultureInfo.InvariantCulture);\n\
    \n        // Re-create the number using the new base.\n        // Start from the\
    \ end of the string and work backwards.\n        // The first character will be\
    \ a 0, so the new\n        // number will be the same length as the original.\n\
    \        // The others will each be a digit from the old base.\n        // The\
    \ remaining characters will each be a digit from the new base.\n        char[]\
    \ charArray = str.ToCharArray();\n        int newCharIndex = 0;\n        for (int\
    \ i = charArray.Length - 1; i >= 0; i--) {\n            if (charArray[i] == '0')\
    \ {\n                charArray[newCharIndex] = '0';\n            } else {\n  \
    \              int digit = Convert.ToInt32(charArray[i]);\n                charArray[newCharIndex++]\
    \ = ((digit % numBase) + Convert.ToInt32(digit.ToString())).ToString();\n    \
    \        }\n        }\n\n        // Add the decimal points back in\n        for\
    \ (int i = 0; i < decimalPlaces; i++) {\n            charArray[newCharIndex++]\
    \ = '.';\n        }\n\n        // Convert the string back to a long.\n       \
    \ long output = Convert.ToInt64(new string(charArray), CultureInfo.InvariantCulture);\n\
    \n        // Create a string with leading zeros.\n        // The leading zeros\
    \ will be used to get the correct number of digits.\n        string newstr = output.ToString();\n\
    \        string zeros = \"00000000000000000000\";\n        int newstrLen = newstr.Length;\n\
    \        int zerosLen = zeros.Length;\n        int newstrIndex = 0;\n        while\
    \ (newstrIndex < zerosLen) {\n            newstr = newstr.Insert(newstrIndex,\
    \ zeros[newstrIndex]);\n            newstrIndex += zerosLen;\n        }\n\n  \
    \      // return the new string with the added zeros at the end of the string\n\
    \        return newstr;", "        if (numBase < 10) {\n            throw new\
    \ ArgumentException(\"Num base must be greater or equal than 10\");\n        }\n\
    \        if (numBase > 36) {\n            throw new ArgumentException(\"Num base\
    \ must be less than 36\");\n        }\n\n        long absx = Math.Abs(x);\n  \
    \      long absNumBase = Math.Abs(numBase);\n        long[] powersOfTwo = new\
    \ long[numBase + 1];\n        powersOfTwo[0] = 1;\n        for (long i = 1; i\
    \ < powersOfTwo.Length; i++) {\n            powersOfTwo[i] = powersOfTwo[i - 1]\
    \ * 2;\n        }\n\n        long numPower = 1;\n        long x = Math.Abs(x);\n\
    \        long y = x;\n        while (y) {\n            long quotient = y / numPower;\n\
    \            long exponent = y % numPower;\n            numPower = powersOfTwo[numPower];\n\
    \            x = x * numPower;\n            y = quotient * numPower;\n       \
    \ }\n\n        if (absx > absNumBase) {\n            int i = absNumBase - absx;\n\
    \            long num = 0;\n            for (int j = 0; j < i; j++) {\n      \
    \          num += powerOfTwo[j];\n            }\n\n            return num.ToString();\n\
    \        } else {\n            return x.ToString();\n        }", "        // get\
    \ all digits of number as string\n        var s = Convert.ToString(numBase).PadLeft(Convert.ToString(numBase).Length,\
    \ '0');\n        // convert it to array of numbers\n        var arrNum = s.Select(x\
    \ => Convert.ToInt32(x));\n        // convert numbers to different base\n    \
    \    arrNum = arrNum.Select((x, i) => Convert.ToString(Convert.ToString(arrNum[i]).PadLeft(numBase.ToString().Length,\
    \ '0'), numBase));\n        // combine digits\n        var res = String.Join(\"\
    \", arrNum.Select(x => Convert.ToString(x, numBase)));\n        return res;",
  "        // Find out how many digits are in number x\n        string numberString\
    \ = x.ToString();\n        decimal numDigits = decimal.GetBits(x);\n        decimal\
    \ zeroDigits = numDigits - 1;\n        // Find out how many digits are in base\
    \ of x\n        decimal baseDigits = numDigits / numBase;\n        // Reverse\
    \ the digits\n        numDigits = numDigits % numBase;\n        // Convert x from\
    \ base 2 to base 10\n        decimal x10 = numDigits / numBase;\n        // Convert\
    \ the digits from base 10 to base numBase\n        decimal numberDecimal = Convert.ToDecimal(x10)\
    \ * numBase;\n        decimal zeroDecimal = Convert.ToDecimal(numberDecimal) -\
    \ Convert.ToDecimal(zeroDigits);\n        // Return the new number in base numBase\n\
    \        return numberDecimal.ToString();", "        string result = \"\";\n \
    \       int exp = 0;\n        while (numBase != 0) {\n            long rem = (long)numBase\
    \ % x;\n            result += rem + \"\";\n            numBase = numBase / x;\n\
    \            x = (int)(Math.Pow(x, exp));\n            exp++;\n        }\n   \
    \     return result;", "        int base = 10; // Assume base 10 unless otherwise\
    \ specified.\n        double num = x; // Assume input number as double.\n    \
    \    string res = \"\";\n        if (numBase > num.ToString().Length)\n      \
    \  {\n            numBase = num.ToString().Length;\n        }\n        if (numBase\
    \ == 0)\n        {\n            return \"0\";\n        }\n        while (num.ToString().Length\
    \ > numBase)\n        {\n            int mod = (int)Math.Floor(Math.Log(numBase,\
    \ base));\n            num = num / Math.Pow(base, mod);\n            base = mod;\n\
    \        }\n        res = num.ToString();\n        while (res.Length < numBase)\n\
    \        {\n            res = num.ToString() + res;\n        }\n        return\
    \ res;", "        string result = \"\";\n        while (numBase > 1 && x >= 0)\
    \ {\n            long temp = x / numBase;\n            result = temp.to_String()\
    \ + result;\n            x -= temp * numBase;\n            numBase--;\n      \
    \  }\n        if (x >= 0) {\n            result = x.ToString(\"X\") + result;\n\
    \        }\n        return result;", "        if (numBase < 0 || numBase > 10)\n\
    \            return \"error\";\n\n        BigInteger b = BigInteger.Parse(x.ToString(),\
    \ System.Globalization.NumberStyles.HexNumber);\n        b = b.ToString(numBase);\n\
    \        if (b.Length > x.ToString().Length)\n            b = b.Substring(0, x.ToString().Length);\n\
    \n        return b;", "        long ret = 0;\n        while (x > 0) {\n      \
    \      ret += (x % numBase);\n            x /= numBase;\n        }\n        return\
    \ x.ToString(numBase);", "        string str = x.ToString();\n        string result\
    \ = \"\";\n        long remainder = 0;\n        for (int i = str.Length - 1; i\
    \ >= 0; i--) {\n            int digit = Convert.ToInt32(str[i]);\n           \
    \ remainder *= numBase;\n            remainder += digit;\n            if (numBase\
    \ < 10) {\n                result = (remainder % numBase).ToString();\n      \
    \          remainder = remainder / numBase;\n            }\n            else {\n\
    \                result = remainder.ToString();\n            }\n            if\
    \ (i == 0)\n                break;\n            if (str[i].Equals('0'))\n    \
    \            break;\n        }\n        return result;", "        var result =\
    \ Convert.ToString(x, numBase);\n        var charArray = result.ToCharArray();\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            charArray[i]\
    \ -= '0';\n        }\n        return new string(charArray);", "        bool isNegative\
    \ = x < 0;\n        if (numBase == 1L) return isNegative ? x.ToString() : \"0\"\
    \ + x.ToString();\n        if (numBase == 2L) return isNegative ? x.ToString()\
    \ : \"1\" + x.ToString();\n        long temp = x;\n        long remainder = 1;\n\
    \        string res = \"\";\n        while (remainder > 0) {\n            if (numBase\
    \ > remainder) {\n                temp = temp / numBase;\n                remainder\
    \ *= numBase;\n            }\n            else {\n                if (numBase\
    \ > remainder + 1) {\n                    remainder += 1;\n                  \
    \  temp = temp % numBase;\n                }\n                else {\n       \
    \             res = (isNegative ? \"-\" : \"\") + temp.ToString();\n         \
    \           break;\n                }\n            }\n        }\n        if (numBase\
    \ > 1) {\n            return res + ChangeBase(temp, numBase - 1);\n        }\n\
    \        else return res + temp.ToString();", "        string r = Convert.ToString(numBase,\
    \ 16).PadLeft(64, '0');\n        string s = Convert.ToString(x, 16).PadLeft(64,\
    \ '0');\n        for (int i = 0; i < 64; i++) {\n            int n = (int)s[i];\n\
    \            if (n > '9')\n                n = '0' + n;\n            if (n < '0')\n\
    \                n = '9' + n;\n            int m = s.IndexOf(\"1\", i);\n    \
    \        int e = s.IndexOf(\"9\", i);\n            if (i < e)\n              \
    \  r[i] = n;\n            else\n                r[i] = r[e - 1] + n;\n       \
    \ }\n        return r;", "        int numDigits = 1;\n        string s = x.ToString();\n\
    \        while (x < numBase) {\n            x = x / numBase;\n            numDigits++;\n\
    \        }\n        char[] charArray = new char[numDigits];\n        int numChars\
    \ = numDigits;\n        for (int i = 0; i < numDigits; i++) {\n            charArray[numChars\
    \ - i - 1] = (char) x;\n            numChars--;\n            x = x % numBase;\n\
    \        }\n        return s + new string(charArray);", "        BigInteger x\
    \ = new BigInteger(x);\n        BigInteger numBase = new BigInteger(numBase);\n\
    \        BigInteger newX = x.Multiply(numBase.Pow(x.ToString().Length - 1));\n\
    \        BigInteger temp = new BigInteger((long)Math.Pow(numBase, 1));\n     \
    \   return newX.ToString();", "        if (numBase == 10) {\n            if (x\
    \ == (long)Math.Sqrt(x)) {\n                return x.ToString(\"0\");\n      \
    \      } else {\n                return x.ToString();\n            }\n       \
    \ } else {\n            long remainder;\n            int numDigits = (int)Math.Ceiling(Math.Log10(Math.Abs(x)))\
    \ + 1;\n            int digitBase = (int)numBase - 1;\n            int maxDigitBase\
    \ = digitBase + numDigits - 1;\n            int digitCount = 0;\n            bool\
    \ canBreak = false;\n            string answer = string.Empty;\n            while\
    \ (digitCount < numDigits && canBreak == false) {\n                remainder =\
    \ (x / numBase) % 10;\n                if (remainder == 0) {\n               \
    \     canBreak = true;\n                } else {\n                    answer +=\
    \ remainder.ToString();\n                    canBreak = true;\n              \
    \  }\n                digitCount++;\n                numBase *= 10;\n        \
    \    }\n            if (digitCount == numDigits) {\n                return answer;\n\
    \            } else {\n                int digitBaseIndex = 0;\n             \
    \   long div = x / numBase;\n                string newAnswer = \"\";\n      \
    \          while (div > 1) {\n                    newAnswer += div.ToString();\n\
    \                    div = (div / numBase);\n                    if (digitBaseIndex\
    \ < maxDigitBase) {\n                        newAnswer += Convert.ToString(digitBase\
    \ + digitBaseIndex, 10);\n                        digitBaseIndex++;\n        \
    \            } else {\n                        newAnswer += Convert.ToString(digitBase\
    \ + maxDigitBase - digitBaseIndex, 10);\n                        maxDigitBase--;\n\
    \                        digitBaseIndex = maxDigitBase - 1;\n                \
    \    }\n                }\n                if (digitBaseIndex == maxDigitBase\
    \ - 1) {\n                    newAnswer += Convert.ToString(digitBase + 1, 10);\n\
    \                }\n                return newAnswer;\n            }\n       \
    \ }", "        string str = \"\";\n        int n = numBase;\n        while (n\
    \ > 0) {\n            long num = x / n;\n            x = x % n;\n            str\
    \ = num.ToString() + str;\n            n = numBase;\n        }\n        if (n\
    \ < 0) {\n            n = -n;\n            str = str.Reverse().ToString() + str;\n\
    \        }\n        return str;", "        var result = \"\";\n        long tens\
    \ = x / (long)numBase;\n        if (tens != 0) {\n            result += ChangeBase(tens,\
    \ (long)numBase);\n        }\n        long rest = x % (long)numBase;\n       \
    \ long place = 0;\n        while (x > 0) {\n            long tmp = (long)numBase\
    \ - rest;\n            result += tmp.ToString();\n            rest += tmp;\n \
    \           x += numBase;\n        }\n        if (rest < numBase / 2) {\n    \
    \        result += \"0\";\n        }\n        return result;", "        int max\
    \ = (int)Math.Pow(numBase, 10);\n        int min = (int)Math.Pow(numBase, -10);\n\
    \        if (x > max || x < min) {\n            return \"Overflow\";\n       \
    \ }\n        long n = x;\n        string answer = \"\";\n        while (n > max)\
    \ {\n            n /= numBase;\n            answer += (n % numBase) + \"\";\n\
    \        }\n        while (n < min) {\n            n *= numBase;\n           \
    \ answer += (n % numBase) + \"\";\n        }\n        return answer;", "     \
    \   BigInteger xBigInt = new BigInteger(x.ToString());\n        BigInteger numBaseBigInt\
    \ = new BigInteger(numBase.ToString());\n        BigInteger result = xBigInt.Pow(numBaseBigInt);\n\
    \        return result.ToString();", "        long numDigits = Digits(numBase);\n\
    \        long pow = Pow(numBase, numDigits - 1);\n        long rem = 0;\n    \
    \    long mult = 1;\n        while (x > 0) {\n            rem = x % numBase;\n\
    \            mult = mult * numBase;\n            x /= numBase;\n        }\n  \
    \      return string.Format(\"{0}{1}\", Mul(Mul(pow, mult), numDigits - rem),\
    \ numDigits);", "        string result = \"\";\n        BigInteger bx = BigInteger.Parse(x.ToString());\n\
    \        BigInteger bn = new BigInteger(numBase.ToString());\n        BigInteger\
    \ result = bx.Pow(bn);\n        StringBuilder sb = new StringBuilder();\n    \
    \    BigInteger remainder = bx.Remainder(bn);\n        while (remainder != BigInteger.Zero)\
    \ {\n            sb.Append(Convert.ToString(remainder, 10).PadLeft(numBase.ToString().Length,\
    \ '0'));\n            remainder = bx.Remainder(bn);\n        }\n        result\
    \ = sb.ToString();\n        return result;", "        var digits = BigInteger.Pow(numBase,\
    \ BigInteger.ValueOf(2)).Multiply(x); // Multiply x to base numBase\n        var\
    \ xString = digits.ToString(); // Convert to string.\n        return xString;",
  "        string s = x.ToString();\n        if (numBase > 10) {\n            throw\
    \ new ArgumentException(\"numBase must be less than 10.\");\n        }\n     \
    \   if (numBase < 1 || numBase > 36) {\n            throw new ArgumentException(\"\
    numBase must be between 1 and 36.\");\n        }\n\n        // Check whether the\
    \ input number is negative or not.\n        if (x < 0) {\n            return \"\
    -\";\n        }\n\n        // Get the number of digits in base of numBase.\n \
    \       int numDigits = numBase;\n        while (numDigits > 36) {\n         \
    \   numDigits /= 36;\n        }\n\n        // Change the numeral base of input\
    \ number x to numBase.\n        char[] buffer = new char[numDigits + 1];\n   \
    \     for (int i = numDigits; i >= 0; i--) {\n            buffer[i] = '0';\n \
    \       }\n        buffer[numDigits] = '1';\n\n        long restored = Long.Parse(buffer.ToString());\n\
    \        s = s.Replace(x.ToString(), restored.ToString());\n        s = s.Replace(\"\
    1\", \"0\"); // revert numBase to numeral base.\n\n        return s;", "     \
    \   long numbers = x / numBase;\n        string strReturn = \"\";\n\n        while(numbers\
    \ > 0) {\n            strReturn = Convert.ToString(numbers, numBase) + strReturn;\n\
    \            numbers = numbers % numBase;\n        }\n\n        while(x < 0) {\n\
    \            strReturn = strReturn + \"0\";\n            x = x * -1;\n       \
    \ }\n\n        return strReturn;", "        string strRet = \"\";\n\n        if\
    \ (numBase == 0)\n            return x.ToString();\n\n        if ((x > 0) && (numBase\
    \ > 0)) {\n            if (x >= numBase) {\n                strRet = ChangeBase(x\
    \ % numBase, numBase) + Convert.ToChar(numBase);\n            } else {\n     \
    \           strRet = ChangeBase((x % numBase), numBase);\n            }\n    \
    \    }\n\n        return strRet;", "        string result;\n\n        // Initialize\
    \ result to an empty string.\n        result = \"\";\n\n        // Loop through\
    \ each character in the number.\n        for (int i = 0; i < x.ToString().Length;\
    \ i++) {\n            // Get the number in base numBase of the character at i\n\
    \            long num = Convert.ToInt64(x.ToString()[i]) * numBase;\n        \
    \    // Convert it to string and append it to the result.\n            result\
    \ += num.ToString();\n        }\n        return result;", "        // We need\
    \ to change from base 10 to base 16.\n        string numString = x.ToString();\n\
    \        // We need to convert to a string.\n        string numStringAfterChange\
    \ = Convert.ToString(\n            Convert.ToInt64(numString, numBase), 16);\n\
    \        // Convert the string back to long.\n        long num = Convert.ToInt64(numStringAfterChange,\
    \ 16);\n        // Convert the long back to string.\n        string numStringChanged\
    \ = Convert.ToString(num, numBase);\n        return numStringChanged;", "    \
    \    if (x < 0) {\n            throw new ArgumentOutOfRangeException(\"x must\
    \ be non-negative\");\n        }\n        if (numBase < 0) {\n            throw\
    \ new ArgumentOutOfRangeException(\"numBase must be non-negative\");\n       \
    \ }\n        int digits = (int)Math.Log10(x);\n        long temp = 0;\n      \
    \  string result = \"\";\n        for (int i = 0; i < digits; i++) {\n       \
    \     temp *= numBase;\n            result += ((int)((x % temp) / numBase)).ToString();\n\
    \            x /= numBase;\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
