name: HumanEval_46_fib4
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n\
  \    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)\
  \ + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
  \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>\
  \ Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n\
  \    // (14L)\n    public static long Fib4(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))\
  \ == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))\
  \ == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
completions: ["        long fib4 = (long)0;\n        fib4 = 0;", "        if (n <\
    \ 4) {\n            return n;\n        }\n        if (n < 8) {\n            return\
    \ Fib4((n-1)+(n-2)+(n-3)+(n-4));\n        }\n        if (n < 14) {\n         \
    \   return Fib4((n-8)+(n-14)+(n-18)+(n-22)+(n-36));\n        }\n        return\
    \ Fib4((n-17)+(n-26)+(n-33)+(n-40)+(n-49)+(n-58)+(n-66));", "        if (n ==\
    \ 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n\
    \        if (n == 3) return 0;\n        if (n == 4) return 4;\n        if (n ==\
    \ 5) return 8;\n        if (n == 6) return 16;\n        if (n == 7) return 32;\n\
    \        if (n == 8) return 64;\n        if (n == 9) return 128;\n        if (n\
    \ == 10) return 256;\n        if (n == 11) return 512;\n        if (n == 12) return\
    \ 1024;\n        if (n == 13) return 2048;\n        if (n == 14) return 4096;\n\
    \        if (n == 15) return 8192;\n        if (n == 16) return 16384;\n     \
    \   if (n == 17) return 32768;\n        if (n == 18) return 65536;\n        if\
    \ (n == 19) return 131072;\n        if (n == 20) return 262144;\n        if (n\
    \ == 21) return 524288;\n        if (n == 22) return 1048576;\n        if (n ==\
    \ 23) return 2097152;\n        if (n == 24) return 4194304;\n        if (n ==\
    \ 25) return 8388608;\n        if (n == 26) return 16777216;\n        if (n ==\
    \ 27) return 33554432;\n        if (n == 28) return 67108864;\n        if (n ==\
    \ 29) return 134217728;\n        if (n == 30) return 268435456;\n        if (n\
    \ == 31) return 536870912;\n        if (n == 32) return 1073741824;\n        if\
    \ (n == 33) return 2147483648;\n        if (n == 34) return 4294967296;\n    \
    \    if (n == 35) return 8589934592;\n        if (n == 36) return 17179869184;\n\
    \        if (n == 37) return 3518437208;\n        if (n == 38) return 574311844;\n\
    \        if (n == 39) return 8796093022;\n        if (n == 40) return 17592186044416;\
    \ //2^64\n        if (n == 41) return 356456108128;\n        if (n == 42) return\
    \ 68719476736;\n        if (n == 43) return 137438953472;\n        if (n == 44)\
    \ return 274877906944;\n        if (n == 45) return 549755813888;\n        if\
    \ (n == 46) return 1099511627776;\n        if (n == 47) return 2199023255552;\n\
    \        if (n == 48) return 4398046511104;\n        if (n == 49) return 8796093022232;\n\
    \        if (n == 50) return 17592186044416; //2^64\n        if (n == 51) return\
    \ 3564561081128;\n        if (n == 52) return 687194767360;\n        if (n ==\
    \ 53) return 1374389534720;\n        if (n == 54) return 2748779069440;\n    \
    \    if (n == 55) return 549", "        // Return fib4(0)\n        if (n == 0)\n\
    \            return 0;\n        // Return fib4(1)\n        if (n == 1)\n     \
    \       return 0;\n        // Return fib4(2)\n        if (n == 2)\n          \
    \  return 2;\n        // Return fib4(3)\n        if (n == 3)\n            return\
    \ 0;\n        // Return fib4(4)\n        if (n == 4)\n            return 8;\n\
    \        // Return fib4(5)\n        if (n == 5)\n            return 32;\n    \
    \    // Return fib4(6)\n        if (n == 6)\n            return 128;\n       \
    \ // Return fib4(7)\n        if (n == 7)\n            return 64;\n        // Return\
    \ fib4(8)\n        if (n == 8)\n            return 256;\n        // Return fib4(9)\n\
    \        if (n == 9)\n            return 1024;\n        // Return fib4(10)\n \
    \       if (n == 10)\n            return 2048;\n        // Return fib4(11)\n \
    \       if (n == 11)\n            return 4096;\n        // Return fib4(12)\n \
    \       if (n == 12)\n            return 8192;\n        // Return fib4(13)\n \
    \       if (n == 13)\n            return 16384;\n        // Return fib4(14)\n\
    \        if (n == 14)\n            return 32768;\n        // Return fib4(15)\n\
    \        if (n == 15)\n            return 65536;\n        // Return fib4(16)\n\
    \        if (n == 16)\n            return 131072;\n        // Return fib4(17)\n\
    \        if (n == 17)\n            return 262144;\n        // Return fib4(18)\n\
    \        if (n == 18)\n            return 524288;\n        // Return fib4(19)\n\
    \        if (n == 19)\n            return 1048576;\n        // Return fib4(20)\n\
    \        if (n == 20)\n            return 2097152;\n        // Return fib4(21)\n\
    \        if (n == 21)\n            return 4194304;\n        // Return fib4(22)\n\
    \        if (n == 22)\n            return 8388608;\n        // Return fib4(23)\n\
    \        if (n == 23)\n            return 16777216;\n        // Return fib4(24)\n\
    \        if (n == 24)\n            return 33554432;\n        // Return fib4(25)\n\
    \        if (n == 25)\n            return 67108864;\n        // Return fib4(26)\n\
    \        if (n == 26)\n            return 134217728;\n        // Return fib4(27)\n\
    \        if (n == 27)\n            return 268435456;\n        // Return fib4(28)\n\
    \        if (n == 28)\n            return 536870912;\n        // Return fib4(29)\n\
    \        if (n == 29)\n            return 1073741824;\n        // Return fib4(30)\n\
    \        if (n == 30)\n            return 2147483648;\n        // Return fib4(31)\n\
    \        if (n == 31)\n            return 4294967296;\n        // Return fib4(32)\n\
    \        if (n == 32)\n            return 8589934592;\n", "        if (n < 4)\n\
    \            return n;\n        else if (n < 7)\n            return (Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4));\n        else\n            return (Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4) + Fib4(n-5) + Fib4(n-6));", "        if\
    \ (n == 0) {\n            return 0L;\n        }\n        if (n == 1) {\n     \
    \       return 1L;\n        }\n        if (n == 2) {\n            return 2L;\n\
    \        }\n        long[] fib = new long[4];\n        fib[0] = 0L;\n        fib[1]\
    \ = 1L;\n        fib[2] = 2L;\n        fib[3] = 3L;\n\n        long prevFib =\
    \ fib[3];\n        long sum = 0L;\n\n        // Add fib[2]\n        for (int i\
    \ = 0; i < 2; i++) {\n            sum += fib[i];\n            fib[i] += fib[i\
    \ - 1];\n            fib[i] = fib[i - 1];\n            fib[i] = prevFib;\n   \
    \     }\n\n        // Add fib[1]\n        for (int i = 2; i < 3; i++) {\n    \
    \        sum += fib[i];\n            fib[i] += fib[i - 1];\n            fib[i]\
    \ = fib[i - 1];\n            fib[i] = prevFib;\n        }\n\n        return sum;",
  "        long first;\n        long last;\n        long result;\n        first =\
    \ last = 0;\n        for (long counter = 1; counter <= n; counter++) {\n     \
    \       first++;\n            result += (long)Math.Pow(first, last);\n       \
    \     last = (int)Math.Pow((double)last + 1, (double)last);\n        }\n     \
    \   return result;", "        if (n <= 0) throw new ArgumentOutOfRangeException(\"\
    n\", \"n must be > 0.\");\n        if (n == 1 || n == 2)\n            return n;\n\
    \        var fibonacci = new Dictionary<long, long>();\n        fibonacci[1] =\
    \ 0;\n        fibonacci[2] = 1;\n        for (var i = 2; i <= n; i++) {\n    \
    \        fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n        }\n    \
    \    long answer = fibonacci[n];\n        return answer;", "        long fib4[]\
    \ = new long[4];\n        if (n == 0) return 0;\n        fib4[0] = 0;\n      \
    \  fib4[1] = 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n\
    \        fib4[2] = 1;\n        fib4[3] = 0;\n        int i = 4;\n        while\
    \ (i > 0 && n > fib4[i - 1]) {\n            fib4[i - 3] = fib4[i - 2] + fib4[i\
    \ - 1];\n            fib4[i] = fib4[i - 3] + fib4[i - 4];\n            i = i -\
    \ 4;\n        }\n        return fib4[i];", "        long fib4[] = new long[] {\
    \ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 };\n        return (long)fib4[n];",
  "        long lastn = 3;\n        long lastn1 = lastn;\n        long lastn2 = lastn1;\n\
    \        long lastn3 = lastn2;\n        long lastn4 = lastn3;\n        long lastn5\
    \ = lastn4;\n        long lastn6 = lastn5;\n        long lastn7 = lastn6;\n  \
    \      long lastn8 = lastn7;\n        long lastn9 = lastn8;\n        long lastn10\
    \ = lastn9;\n        long lastn11 = lastn10;\n        long lastn12 = lastn11;\n\
    \        long lastn13 = lastn12;\n        long lastn14 = lastn13;\n        long\
    \ lastn15 = lastn14;\n        long lastn16 = lastn15;\n        long lastn17 =\
    \ lastn16;\n        long lastn18 = lastn17;\n        long lastn19 = lastn18;\n\
    \        long lastn20 = lastn19;\n        long lastn21 = lastn20;\n        long\
    \ lastn22 = lastn21;\n        long lastn23 = lastn22;\n        long lastn24 =\
    \ lastn23;\n        long lastn25 = lastn24;\n        long lastn26 = lastn25;\n\
    \        long lastn27 = lastn26;\n        long lastn28 = lastn27;\n        long\
    \ lastn29 = lastn28;\n        long lastn30 = lastn29;\n        long lastn31 =\
    \ lastn30;\n        long lastn32 = lastn31;\n        long lastn33 = lastn32;\n\
    \        long lastn34 = lastn33;\n        long lastn35 = lastn34;\n        long\
    \ lastn36 = lastn35;\n        long lastn37 = lastn36;\n        long lastn38 =\
    \ lastn37;\n        long lastn39 = lastn38;\n        long lastn40 = lastn39;\n\
    \        long lastn41 = lastn40;\n        long lastn42 = lastn41;\n        long\
    \ lastn43 = lastn42;\n        long lastn44 = lastn43;\n        long lastn45 =\
    \ lastn44;\n        long lastn46 = lastn45;\n        long lastn47 = lastn46;\n\
    \        long lastn48 = lastn47;\n        long lastn49 = lastn48;\n        long ",
  "        // Add your code here\n        var fib4 = Enumerable.Range(1, n).SelectMany(n\
    \ => new [] {0,1,1,2,1}).TakeWhile(i => fib4.Skip(i).TakeWhile(j => fib4.Skip(j).TakeWhile(k\
    \ => fib4.Skip(k).TakeWhile(l => fib4.Skip(l).TakeWhile(m => fib4.Skip(m).TakeWhile(n\
    \ => fib4.Skip(n).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n).Skip(i)).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).Skip(k).Skip(l).Skip(m).Skip(n)).Skip(i).Skip(j).",
  "        long result = 0;\n        if (n == 0) {\n            return 0;\n      \
    \  }\n        if (n == 1) {\n            return 1;\n        }\n        if (n ==\
    \ 2) {\n            return 2;\n        }\n        if (n >= 3) {\n            result\
    \ = Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n        }\n      \
    \  return result;", "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        if (n == 0 || n == 1)\n            return n;\n        return Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4);", "        long ret = 0;\n        for (long\
    \ i = 1; i <= n; i++)\n        {\n            ret += i;\n            ret += i;\n\
    \            ret += i;\n            ret += i;\n        }\n        return ret;",
  "        if (n <= 1) return 0;\n        if (n <= 2) return 2;\n        return Fib4((n\
    \ - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4));", "        long sum = 0;\n\
    \        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n ==\
    \ 2) return 2;\n        if (n == 3) return 3;\n        if (n == 4) return 4;\n\
    \        sum += Fib4(n - 4);\n        sum += Fib4(n - 3);\n        sum += Fib4(n\
    \ - 2);\n        sum += Fib4(n - 1);\n        return sum;", "        long fib4\
    \ = 0, x = 1;\n        switch (n) {\n            case 0:\n                fib4\
    \ = 0;\n                break;\n            case 1:\n                fib4 = 0;\n\
    \                break;\n            case 2:\n                fib4 = 2;\n    \
    \            break;\n            case 3:\n                fib4 = 0;\n        \
    \        break;\n            case 4:\n                fib4 = 0;\n            \
    \    break;\n            case 5:\n                fib4 = 0;\n                break;\n\
    \            case 6:\n                fib4 = 8;\n                break;\n    \
    \        case 7:\n                fib4 = 14;\n                break;\n       \
    \ }\n        return fib4;", "        return n < 3 ? n\n            : n < 10 ?\
    \ Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4)\n            : Fib4(n\
    \ - 2) + Fib4(n - 3) + Fib4(n - 4);", "        if (n == 0) return 0;\n       \
    \ if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return\
    \ 0;\n        if (n == 4) return 4;\n        if (n == 5) return 8;\n        if\
    \ (n == 6) return 14;\n        if (n == 7) return 16;\n        if (n == 8) return\
    \ 24;\n        if (n == 9) return 32;\n        if (n == 10) return 48;\n     \
    \   if (n == 11) return 64;\n        if (n == 12) return 128;\n        if (n ==\
    \ 13) return 256;\n        if (n == 14) return 512;\n        if (n == 15) return\
    \ 1024;\n        if (n == 16) return 2048;\n        if (n == 17) return 4096;\n\
    \        if (n == 18) return 8192;\n        if (n == 19) return 16384;\n     \
    \   if (n == 20) return 32768;\n        if (n == 21) return 65536;\n        if\
    \ (n == 22) return 131072;\n        if (n == 23) return 262144;\n        if (n\
    \ == 24) return 524288;\n        if (n == 25) return 1048576;\n        if (n ==\
    \ 26) return 2097152;\n        if (n == 27) return 4194304;\n        if (n ==\
    \ 28) return 8388608;\n        if (n == 29) return 16777216;\n        if (n ==\
    \ 30) return 33554432;\n        if (n == 31) return 67108864;\n        if (n ==\
    \ 32) return 134217728;\n        if (n == 33) return 268435456;\n        if (n\
    \ == 34) return 536870912;\n        if (n == 35) return 1073741824;\n        if\
    \ (n == 36) return 2147483648;\n        if (n == 37) return 4294967296;\n    \
    \    if (n == 38) return 8589934592;\n        if (n == 39) return 17179869184;\n\
    \        if (n == 40) return 34359738368;\n        if (n == 41) return 68719476736;\n\
    \        if (n == 42) return 137438953472;\n        if (n == 43) return 274877906944;\n\
    \        if (n == 44) return 549755813888;\n        if (n == 45) return 1099511627776;\n\
    \        if (n == 46) return 2199023255552;\n        if (n == 47) return 4398046511104;\n\
    \        if (n == 48) return 8796093022208;\n        if (n == 49) return 17592186044416;\n\
    \        if (n == 50) return 35184372088832;\n        if (n == 51) return 70368744177664;\n\
    \        if (n == 52) return 140737488355328;\n        if (n == 53) return 281474976710656;\n\
    \        if (n == 54) return 562949953421312;\n        if (n == 55) return 1125899906842624;\n\
    \        if (n == ", "        if (n < 0) throw new ArgumentOutOfRangeException(\"\
    n\", \"n < 0\");\n        long fib4 = (1L) * (n - 1L);\n        for (int i = 1;\
    \ i < n; i++) {\n            fib4 += fib4;\n        }\n        return fib4;",
  "        long i = 4L;\n        if (n <= 1L) {\n            return i;\n        }\n\
    \        long res = Fib4(n - 1L) + Fib4(n - 2L) + Fib4(n - 3L) + Fib4(n - 4L);\n\
    \        return res;", "        // Compute the nth Fibbonacci number.  \n    \
    \    // Use a table to make the computation of fib4 faster.\n        // For a\
    \ fibbonacci sequence F(0), F(1) -> F, F(2) -> F+F+F, F(3) -> F+F+F+F.\n     \
    \   long fib4 = 0;\n        long sum = 0;\n        // Compute fib 0 ... n\n  \
    \      if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
    \ 1;\n        if (n == 2)\n            return 2;\n        // Compute fib 1 ...\
    \ n\n        for (int i = 1; i <= n; i++) {\n            fib4 += i;\n        \
    \    sum += fib4;\n        }\n        return sum;", "        var current = 1;\n\
    \        var sum = 0;\n        while (n-- > 0) {\n            current = current*2;\n\
    \            sum += current;\n        }\n        return sum;", "        if (n\
    \ < 0)\n            return -1;\n        if (n <= 0)\n            return 0;\n \
    \       if (n <= 1)\n            return 1;\n        long result = Fib4(n - 1)\
    \ + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n        return result;", "     \
    \   long sum = 0;\n        long current = 1;\n        for (int i = 0; i < n; i++)\n\
    \        {\n            sum = current;\n            current = current * 2 + 3;\n\
    \        }\n        return sum;", "        long result = 1;\n        for (int\
    \ i = 3; i <= n; i++)\n            result *= i;\n        return result;", "  \
    \      if (n <= 4L)\n            return 0L;\n        long fib4 = 0L;\n       \
    \ long result = Fib4(n - 1L) + Fib4(n - 2L) + Fib4(n - 3L) + Fib4(n - 4L);\n \
    \       fib4 = fib4 + result;\n        return fib4;", "        // Fill this in.\n\
    \        long x = 1;\n        for (int i = 0; i < n; i++) {\n            x = x\
    \ * i;\n        }\n        return x;", "        long[] fib = Fib4.fibs;\n    \
    \    return fib[(int)n - 1];", "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        }\n        // fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    \        // fib4(0) = 0\n        // fib4(1) = 0\n        // fib4(2) = 2\n    \
    \    // fib4(3) = 0\n        // fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4).\n        \n        \n        long fib4 = 1;\n        while (fib4\
    \ < n) {\n            fib4 += 2;\n        }\n        long newfib4 = fib4;\n  \
    \      \n        return newfib4;\n        \n        ", "        long a = 0, b\
    \ = 0, c;\n        Console.WriteLine(a);\n        Console.WriteLine(b);\n    \
    \    if (n == 0) return a;\n        else if (n == 1) return b;\n        else if\
    \ (n == 2) return a + b;\n        else if (n % 2 == 0) c = Fib4(n / 2); else c\
    \ = Fib4(n / 2) + Fib4(n / 2 - 1);\n        return a + b + c;", "        if ((n)\
    \ <= 0)\n            return 0;\n        else if (n == 1)\n            return 1;\n\
    \        else\n            return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n\
    \ - 4);", "        double d = 1.0F;\n        long sum = (long)Math.Pow(d, n);\n\
    \        return (long)Math.Truncate(sum);", "        if (n < 3) return 0;\n  \
    \      return (Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4));", "   \
    \     long fib4 = 0;\n        while (n >= 4) {\n            fib4 += 4;\n     \
    \       fib4 += 3;\n            fib4 += 2;\n            fib4 += 1;\n         \
    \   n = n - 4;\n        }\n        while (n >= 2) {\n            fib4 += 1;\n\
    \            fib4 += 1;\n            fib4 += 1;\n            fib4 += 1;\n    \
    \        fib4 += 1;\n            n = n - 2;\n        }\n        while (n >= 1)\
    \ {\n            fib4 += 1;\n            fib4 += 1;\n            fib4 += 1;\n\
    \            fib4 += 1;\n            fib4 += 1;\n            fib4 += 1;\n    \
    \        fib4 += 1;\n            n = n - 1;\n        }\n        return fib4;",
  "        long x = 0;\n        for (int i = 0; i < n; i++) {\n            long a\
    \ = 0, b = 0, c = 0, d = 0, e = 0;\n            for (int j = 0; j < n; j++) {\n\
    \                a += 4;\n                e += 4;\n                d += 4;\n \
    \               c += 4;\n                b += 4;\n            }\n            x\
    \ = a + b + c + d + e;\n        }\n        return x;", "        if (n < 0)\n \
    \       {\n            throw new ArgumentOutOfRangeException(\"n\");\n       \
    \ }\n        if (n == 0 || n == 1)\n        {\n            return n;\n       \
    \ }\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);", " \
    \       long fib;\n        if (n < 0) throw new ArgumentOutOfRangeException(\"\
    n must be >= 0\");\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 1;\n        if (n == 2) return 2;\n        fib = 0;\n        if (n <= 3) return\
    \ fib;\n        fib += Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n\
    \        return fib;", "        long fib4 = 0;\n        int a = 1;\n        int\
    \ b = 1;\n        int c = 1;\n        int d = 1;\n        int e = 1;\n       \
    \ int f = 1;\n        if (n <= 0) {\n            return 0;\n        }\n      \
    \  if (n == 1) {\n            return 1;\n        }\n        if (n <= 2) {\n  \
    \          return fib4;\n        }\n        fib4 = (long)Math.Pow(Math.Pow(a,\
    \ n), b);\n        fib4 += Math.Pow(c, (n-2))\n                + Math.Pow(d, (n-3))\n\
    \                + Math.Pow(e, (n-4));\n        return fib4;", "        long fib4n\
    \ = 0;\n        if (n <= 1) return fib4n;\n        for (int i = 0; i < 4; i++)\
    \ {\n            fib4n = fib4n + Fib4(n - 1) * 4;\n        }\n        return fib4n;",
  "        // write your code in C# 6.0 with .NET 4.6\n        var result = new ArrayList();\n\
    \        long temp;\n        if (n == 0)\n        {\n            result.Add(0);\n\
    \            return result.Last();\n        }\n        if (n == 1)\n        {\n\
    \            result.Add(0);\n            return result.Last();\n        }\n  \
    \      if (n == 2)\n        {\n            result.Add(2);\n            return\
    \ result.Last();\n        }\n        if (n == 3)\n        {\n            result.Add(0);\n\
    \            return result.Last();\n        }\n        if (n == 4)\n        {\n\
    \            result.Add(4);\n            return result.Last();\n        }\n  \
    \      for (int i = 0; i < n; i++)\n        {\n            temp = Fib4(n - 1);\n\
    \            result.Add(temp + temp + temp + temp);\n        }\n        return\
    \ result.Last();", "        if (n == 0)\n            return 0;\n        if (n\
    \ == 1)\n            return 1;\n        if (n == 2)\n            return 2;\n \
    \       if (n == 3)\n            return 0;\n        return Fib4(n - 1) + Fib4(n\
    \ - 2) + Fib4(n - 3) + Fib4(n - 4);", "        if (n <= 3)\n            return\
    \ 0;\n        if (n > 3) {\n            return Fib4(n - 4) + Fib4(n - 3) + Fib4(n\
    \ - 2);\n        }\n        throw new ArgumentOutOfRangeException();", "     \
    \   long x = 1;\n        long y = 1;\n        long total = 0;\n        long current\
    \ = n;\n        long fib = 0;\n        long temp = 0;\n        bool flag = false;\n\
    \        fib++;\n        flag = false;\n        while (current != 1) {\n     \
    \       temp = y;\n            y = x;\n            x = current;\n            current--;\n\
    \            if (flag == false) {\n                total += fib;\n           \
    \     flag = true;\n            }\n            total += temp;\n        }\n   \
    \     return total;", "        if (n < 0) throw new ArgumentOutOfRangeException(\"\
    n\", \"Fib4: Negative numbers not allowed.\");\n        if (n == 0) return 0;\n\
    \        if (n == 1) return 1;\n        return Fib4(n - 2) + Fib4(n - 3) + Fib4(n\
    \ - 4);", "        // Your code here\n        var result = new List<long>();\n\
    \        var prev = new List<long>();\n        prev.add(0);\n        result.add(0);\n\
    \        if (n < 4) {\n            prev.add(0, prev[0] + prev[1] + prev[2] + prev[3]);\n\
    \            result.add(prev[n]);\n            return prev[n];\n        }\n  \
    \      if (n < 7) {\n            prev.add(0, prev[0] + prev[1] + prev[2] + prev[3]\
    \ + prev[4]);\n            result.add(prev[n]);\n            return prev[n];\n\
    \        }\n        if (n < 9) {\n            prev.add(0, prev[0] + prev[1] +\
    \ prev[2] + prev[3] + prev[4] + prev[5]);\n            result.add(prev[n]);\n\
    \            return prev[n];\n        }\n        prev.add(0);\n        result.add(0);\n\
    \        if (n < 11) {\n            prev.add(0, prev[0] + prev[1] + prev[2] +\
    \ prev[3] + prev[4] + prev[5] + prev[6]);\n            result.add(prev[n]);\n\
    \            return prev[n];\n        }\n        prev.add(0, 0);\n        result.add(0,\
    \ 0);\n        if (n < 15) {\n            prev.add(0, prev[0] + prev[1] + prev[2]\
    \ + prev[3] + prev[4] + prev[5] + prev[6] + prev[7]);\n            result.add(prev[n]);\n\
    \            return prev[n];\n        }\n        prev.add(0, 0);\n        result.add(0,\
    \ 0);\n        if (n < 19) {\n            prev.add(0, prev[0] + prev[1] + prev[2]\
    \ + prev[3] + prev[4] + prev[5] + prev[6] + prev[7] + prev[8]);\n            result.add(prev[n]);\n\
    \            return prev[n];\n        }\n        prev.add(0, 0);\n        result.add(0,\
    \ 0);\n        if (n < 23) {\n            prev.add(0, prev[0] + prev[1] + prev[2]\
    \ + prev[3] + prev[4] + prev[5] + prev[6] + prev[7] + prev[8] + prev[9]);\n  \
    \          result.add(prev[n]);\n            return prev[n];\n        }\n    \
    \    prev.add(0, 0);\n        result.add(0, 0);\n        if (n < 27) {\n     \
    \       prev.add(0, prev[0] + prev[1] + prev[2] + prev[3] + prev[4] + prev[5]\
    \ + prev[6] + prev[7] + prev[8] + prev[9] + prev[10]);\n            result.add(prev[n]);\n\
    \            return prev[n];\n        }\n        prev.add(0, 0);\n        result.add(0,\
    \ 0);\n        if (n < 31) {\n            prev.add(0, prev[0] + prev[1] + prev[2]\
    \ + prev[3] + prev[4] + prev[5] + prev[6] + prev[7] + prev[8] + prev[9] + prev[10]\
    \ + prev[11]);\n            result.add(prev[n]);\n            return prev[n];\n\
    \        }\n        prev.add(0, 0);\n        result.add(0, 0);\n        if (n\
    \ < 35) {", "        var fibArray = new int[n+1];\n        fibArray[0] = 0;\n\
    \        fibArray[1] = 0;\n        fibArray[2] = 2;\n        fibArray[3] = 3;\
    \ // first element of array is 0\n        fibArray[4] = fibArray[3] + fibArray[2]\
    \ + fibArray[1] + fibArray[0];\n        long fib = 0;\n        fib = (long)fibArray[4];\n\
    \        for(int i=5;i<=n;i++) {\n            fibArray[i] = fibArray[i-1] + fibArray[i-2\
    \ + i] + fibArray[i-3] + fibArray[i-4];\n            fib += (long)fibArray[i];\n\
    \        }\n        return fib;", "        ulong b = 0;\n        ulong a = 0;\n\
    \        while (n >= 0) {\n            a = BigInteger.DivRem(BigInteger.Pow(a,\
    \ 4) + BigInteger.Pow(b + a, 4) + BigInteger.Pow(a + b, 4), BigInteger.Pow(4,\
    \ 3) + BigInteger.Pow(a, b), out b);\n            n -= 4;\n        }\n       \
    \ return a;", "        // base case\n        if (n <= 4) {\n            return\
    \ n;\n        }\n        else {\n            return Fib4(n - 1) + Fib4(n - 2)\
    \ + Fib4(n - 3) + Fib4(n - 4);\n        }", "        // TODO: Write your function\
    \ here\n        long result = 1;\n        long temp = 0;\n        if (n >= 4)\n\
    \            return result;\n        else {\n            for (int i = 1; i < n;\
    \ i++) {\n                temp = result + temp;\n                result = temp;\n\
    \            }\n            return result;\n        }", "        long fib4 = 0,\
    \ i = 4;\n        while (fib4 <= n) {\n            fib4 += i;\n            i +=\
    \ 2;\n        }\n        return fib4;", "        long temp = 0;\n        if (n\
    \ <= 1)\n            return n;\n        long fib4number = 0;\n        for (long\
    \ i = 0; i < n; i++) {\n            temp = temp + i;\n            fib4number =\
    \ fib4number + temp;\n        }\n        return fib4number;", "        long a\
    \ = 1;\n        long b = 0;\n        for (long i = 0; i < n; i++) {\n        \
    \    long k = a + b;\n            a = b;\n            b = k;\n        }\n    \
    \    return b;", "        long result = 1;\n        for (long i = 0; i < n; i++)\
    \ {\n            result = result + result;\n        }\n        return result;",
  "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n ==\
    \ 2) return 2;\n        if (n == 3) return 0;\n        if (n == 4) return 0;\n\
    \        if (n == 5) return 1;\n        if (n == 6) return 1;\n        if (n ==\
    \ 7) return 2;\n        if (n == 8) return 3;\n        if (n == 9) return 3;\n\
    \        if (n == 10) return 6;\n        if (n == 11) return 8;\n        if (n\
    \ == 12) return 10;\n        if (n == 13) return 12;\n        if (n == 14) return\
    \ 15;\n        if (n == 15) return 16;\n        if (n == 16) return 17;\n    \
    \    if (n == 17) return 18;\n        if (n == 18) return 19;\n        if (n ==\
    \ 19) return 20;\n        if (n == 20) return 21;\n        if (n == 21) return\
    \ 22;\n        if (n == 22) return 23;\n        if (n == 23) return 24;\n    \
    \    if (n == 24) return 25;\n        if (n == 25) return 26;\n        if (n ==\
    \ 26) return 27;\n        if (n == 27) return 28;\n        if (n == 28) return\
    \ 29;\n        if (n == 29) return 30;\n        if (n == 30 && n != 31) return\
    \ 31;\n        if (n == 31) return 32;\n        if (n == 32) return 33;\n    \
    \    if (n == 33) return 34;\n        if (n == 34) return 35;\n        if (n ==\
    \ 35) return 36;\n        if (n == 36) return 37;\n        if (n == 37) return\
    \ 38;\n        if (n == 38) return 39;\n        if (n == 39) return 40;\n    \
    \    if (n == 40 && n != 41) return 41;\n        if (n == 41) return 42;\n   \
    \     if (n == 42) return 43;\n        if (n == 43) return 44;\n        if (n\
    \ == 44) return 45;\n        if (n == 45) return 46;\n        if (n == 46) return\
    \ 47;\n        if (n == 47) return 48;\n        if (n == 48) return 49;\n    \
    \    if (n == 49) return 50;\n        if (n == 50 && n != 51) return 51;\n   \
    \     if (n == 51) return 52;\n        if (n == 52) return 53;\n        if (n\
    \ == 53) return 54;\n        if (n == 54) return 55;\n        if (n == 55) return\
    \ 56;\n        if (n == 56) return 57;\n        if (n == 57) return 58;\n    \
    \    if (n == 58) return 59;\n        if (n == 59) return 60;\n        if (n ==\
    \ 60 && n != 61) return 61;\n        if (n == 61) return 62;\n        if (n ==\
    \ 62) return 63;\n        if (n == 63) return 64;\n        if (n == 64) return\
    \ 65;\n        if (n == 65) return 66;\n        if (n == 66) return 67;\n    \
    \    if (n == 67) return 68;\n        if (n == 68) return 69;\n        if (n ==\
    \ 69) return 70;\n        if (n == 70 && n != 71) return 71;\n        if (n ==\
    \ 71) return 72;", "        long num = 1;\n        while (n >= 2) {\n        \
    \    num = num * (n-1) + num * (n-2) + num * (n-3) + num * (n-4) + 1;\n      \
    \      n -= 4;\n        }\n        return num;", "        if (n == 0) return 0;\n\
    \        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n ==\
    \ 3) return 0;\n        if (n == 4) return 0;\n        if (n == 5) return 1;\n\
    \        if (n == 6) return 2;\n        if (n == 7) return 3;\n        if (n ==\
    \ 8) return 4;\n        if (n == 9) return 0;\n        if (n == 10) return 1;\n\
    \        if (n == 11) return 2;\n        if (n == 12) return 3;\n        if (n\
    \ == 13) return 4;\n        if (n == 14) return 5;\n        if (n == 15) return\
    \ 0;\n        if (n == 16) return 1;\n        if (n == 17) return 2;\n       \
    \ if (n == 18) return 3;\n        if (n == 19) return 4;\n        if (n == 20)\
    \ return 5;\n        if (n == 21) return 6;\n        if (n == 22) return 7;\n\
    \        if (n == 23) return 8;\n        if (n == 24) return 9;\n        if (n\
    \ == 25) return 10;\n        if (n == 26) return 11;\n        if (n == 27) return\
    \ 12;\n        if (n == 28) return 13;\n        if (n == 29) return 14;\n    \
    \    if (n == 30) return 15;\n        if (n == 31) return 16;\n        if (n ==\
    \ 32) return 17;\n        if (n == 33) return 18;\n        if (n == 34) return\
    \ 19;\n        if (n == 35) return 20;\n        if (n == 36) return 21;\n    \
    \    if (n == 37) return 22;\n        if (n == 38) return 23;\n        if (n ==\
    \ 39) return 24;\n        if (n == 40) return 25;\n        if (n == 41) return\
    \ 26;\n        if (n == 42) return 27;\n        if (n == 43) return 28;\n    \
    \    if (n == 44) return 29;\n        if (n == 45) return 30;\n        if (n ==\
    \ 46) return 31;\n        if (n == 47) return 32;\n        if (n == 48) return\
    \ 33;\n        if (n == 49) return 34;\n        if (n == 50) return 35;\n    \
    \    if (n == 51) return 36;\n        if (n == 52) return 37;\n        if (n ==\
    \ 53) return 38;\n        if (n == 54) return 39;\n        if (n == 55) return\
    \ 40;\n        if (n == 56) return 41;\n        if (n == 57) return 42;\n    \
    \    if (n == 58) return 43;\n        if (n == 59) return 44;\n        if (n ==\
    \ 60) return 45;\n        if (n == 61) return 46;\n        if (n == 62) return\
    \ 47;\n        if (n == 63) return 48;\n        if (n == 64) return 49;\n    \
    \    if (n == 65) return 50;\n        if (n == 66) return 51;\n        if (n ==\
    \ 67) return 52;\n        if (n == 68) return 53;\n        if (n == 69) return\
    \ 54;\n        if (n == 70) return 55;\n        if (n == 71) return 56;\n    \
    \    if (n == 72) return 57;\n        if (n == 73) return 58;\n        if (n ==\
    \ 74) return 59;\n        if (n == 75) return 60;\n        if (n == 76", "   \
    \     long n1, n2, n3, n4, a1, a2, a3, a4;\n        a1 = n = 0;\n        for (int\
    \ i = 4; i <= n; i--)\n        {\n            a1 = a1 + n;\n            n1 = n2;\n\
    \            n2 = n3;\n            n3 = n4;\n            n4 = n;\n           \
    \ a = a1;\n            a1 = a1 + n4;\n        }\n        return a;", "       \
    \ if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n       \
    \     return 0;\n        } else if (n == 2) {\n            return 2;\n       \
    \ } else if (n == 3) {\n            return 0;\n        } else if (n == 4) {\n\
    \            return 0;\n        } else if (n == 5) {\n            return 4;\n\
    \        } else if (n == 6) {\n            return 8;\n        } else if (n ==\
    \ 7) {\n            return 14;\n        }\n        return 0;", "        long retVal\
    \ = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n      \
    \  long w = x;\n        long sum = 0;\n\n        while (n > 0) {\n           \
    \ sum = sum + w;\n            w = w + y;\n            n = n - 1;\n           \
    \ y = y + z;\n            z = z + x;\n            x = x + ret;\n            retVal\
    \ = retVal + ret;\n        }\n\n        return retVal;", "        long fib4;\n\
    \        if (n <= 4) {\n            fib4 = 0;\n        }\n        else if (n <=\
    \ 8) {\n            fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n        }\n        else if (n <= 14) {\n            fib4 = fib4(n - 5)\
    \ + fib4(n - 6) + fib4(n - 7) + fib4(n - 8);\n        }\n        else if (n <=\
    \ 21) {\n            fib4 = fib4(n - 9) + fib4(n - 10) + fib4(n - 11) + fib4(n\
    \ - 12) + fib4(n - 13) + fib4(n - 14);\n        }\n        else if (n <= 28) {\n\
    \            fib4 = fib4(n - 15) + fib4(n - 16) + fib4(n - 17) + fib4(n - 18)\
    \ + fib4(n - 19) + fib4(n - 20);\n        }\n        return fib4;", "        long\
    \ sum = 0;\n        for (int i = 3; i <= n; i += 2) {\n            sum = sum +\
    \ i;\n        }\n        return sum;", "        long a = 0,b = 0,c = 0,d = 0,result\
    \ = 0;\n        switch (n){\n            case 0:\n                result = 0;\n\
    \                break;\n            case 1:\n                result = 1;\n  \
    \              break;\n            case 2:\n                result = 2;\n    \
    \            break;\n            case 3:\n                result = 0;\n      \
    \          break;\n            default:\n                a = Fib4(n - 1);\n  \
    \              b = Fib4(n - 2);\n                c = Fib4(n - 3);\n          \
    \      d = Fib4(n - 4);\n                result = a + b + c + d;\n           \
    \     break;\n        }\n        return result;", "        long num = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            long temp = (long)(Math.Pow(i,\
    \ 4) + Math.Pow(i - 1, 4) + Math.Pow(i - 2, 4) + Math.Pow(i - 3, 4));\n      \
    \      num += temp;\n        }\n        return num;", "        if (n == 0) return\
    \ 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if\
    \ (n == 3) return 0;\n        if (n == 4) return 4;\n        if (n == 5) return\
    \ 8;\n        if (n == 6) return 14;\n        if (n == 7) return 28;\n       \
    \ if (n == 8) return 56;\n        if (n == 9) return 120;\n        if (n == 10)\
    \ return 252;\n        if (n == 11) return 512;\n        if (n == 12) return 1024;\n\
    \        if (n == 13) return 2048;\n        if (n == 14) return 4096;\n      \
    \  if (n == 15) return 8124;\n        if (n == 16) return 16384;\n        if (n\
    \ == 17) return 32768;\n        if (n == 18) return 65536;\n        if (n == 19)\
    \ return 131072;\n        if (n == 20) return 262144;\n        if (n == 21) return\
    \ 524288;\n        if (n == 22) return 1048576;\n        if (n == 23) return 2097152;\n\
    \        if (n == 24) return 4194304;\n        if (n == 25) return 8388608;\n\
    \        if (n == 26) return 16777216;\n        if (n == 27) return 33554432;\n\
    \        if (n == 28) return 67108864;\n        if (n == 29) return 134217728;\n\
    \        if (n == 30) return 268435456;\n        if (n == 31) return 536870912;\n\
    \        if (n == 32) return 1073741824;\n        if (n == 33) return 2147483648;\n\
    \        if (n == 34) return 4294967296;\n        if (n == 35) return 8589934592;\n\
    \        if (n == 36) return 17179869184;\n        if (n == 37) return 34359738368;\n\
    \        if (n == 38) return 68719476736;\n        if (n == 39) return 137438953472;\n\
    \        if (n == 40) return 274877906944;\n        if (n == 41) return 549755813888;\n\
    \        if (n == 42) return 1099511627776;\n        if (n == 43) return 2199023255552;\n\
    \        if (n == 44) return 4398046511104;\n        if (n == 45) return 8796093022208;\n\
    \        if (n == 46) return 17592186044416;\n        if (n == 47) return 35184372088832;\n\
    \        if (n == 48) return 6871947673664;\n        if (n == 49) return 13743895347200;\n\
    \        if (n == 50) return 27487790694400;\n        if (n == 51) return 54975581388800;\n\
    \        if (n == 52) return 109951162777760;\n        if (n == 53) return 219902325555200;\n\
    \        if (n == 54) return 439804651110480;\n        if (", "        if (n <=\
    \ 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return\
    \ 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n   \
    \     if (n == 3) {\n            return 0;\n        }\n        return Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4);", "        double result = 1.0;\n     \
    \   double x0 = 1.0;\n        double x1 = 0.0;\n        double x2 = 0.0;\n   \
    \     double x3 = 0.0;\n        double x4 = 0.0;\n        double x1 = x1 + x0;\n\
    \        double x2 = x2 + x1;\n        double x3 = x3 + x2;\n        double x4\
    \ = x4 + x3;\n        result = result + x4;\n        result /= n;\n        long\
    \ x = (long)result;\n        return x;", "        long x = 0;\n        while (n\
    \ > 2) {\n            x++;\n            n = n - 2;\n        }\n        return\
    \ x;", "        // Add your code here\n        long retVal = 0;\n        if (n\
    \ >= 0)\n            retVal = n;\n        else if (n < 0)\n        {\n       \
    \     int n2 = -n;\n            retVal = Fib4(n2);\n        }\n        return\
    \ ((n == 4) ? 4 : ((n == 8) ? 8 : ((n == 14) ? 14 : ((n == 0) ? 0 : (((Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4)) % 4) == 0 ? 1 : -1)))));", "        List<long>\
    \ result = new List<long> { 0,\n                                          0,\n\
    \                                          0,\n                              \
    \            0,\n                                          0,\n              \
    \                            0};\n        long fib4num = 0;\n        if (n >=\
    \ 2) {\n            for (int i = 1; i < n; i++) {\n                long num =\
    \ (fib4num = fib4num + i) % 4;\n                result.Add(num);\n           \
    \ }\n        }\n        if (n < 4) {\n            int index = (int)Math.Floor(n);\n\
    \            long num = (fib4num = fib4num + index) % 4;\n            result.Add(num);\n\
    \        }\n        return result.Aggregate((a, b) => a + b);", "        if (n\
    \ <= 0) {\n            return 0;\n        }\n        var first = 0;\n        var\
    \ second = 1;\n        var third = 2;\n        var fourth = 0;\n        long fibnum\
    \ = 0;\n        if (n <= 3) {\n            fibnum = first;\n        }\n      \
    \  else {\n            fibnum += (first + second + third) + fourth;\n        }\n\
    \        for (int i = 4; i <= n; i++) {\n            first += second;\n      \
    \      second += third;\n            third += fourth;\n            fourth = first;\n\
    \            fibnum += first;\n        }\n        return fibnum;", "        long\
    \ fib4n = 0;\n        bool isOdd = (n % 2 == 0);\n        long fib4n1 = 0;\n \
    \       long fib4n2 = 0;\n        long fib4n3 = 0;\n        long fib4n4 = 0;\n\
    \        long fib4n5 = 0;\n        long fib4n6 = 0;\n        long fib4n7 = 0;\n\
    \        long fib4n8 = 0;\n        long fib4n9 = 0;\n        long fib4n10 = 0;\n\
    \        long fib4n11 = 0;\n        long fib4n12 = 0;\n        long fib4n13 =\
    \ 0;\n        long fib4n14 = 0;\n        long fib4n15 = 0;\n        long fib4n16\
    \ = 0;\n        long fib4n17 = 0;\n        long fib4n18 = 0;\n        long fib4n19\
    \ = 0;\n        long fib4n20 = 0;\n        long fib4n21 = 0;\n        long fib4n22\
    \ = 0;\n        long fib4n23 = 0;\n        long fib4n24 = 0;\n        long fib4n25\
    \ = 0;\n        long fib4n26 = 0;\n        long fib4n27 = 0;\n        long fib4n28\
    \ = 0;\n        long fib4n29 = 0;\n        long fib4n30 = 0;\n        long fib4n31\
    \ = 0;\n        long fib4n32 = 0;\n        long fib4n33 = 0;\n        long fib4n34\
    \ = 0;\n        long fib4n35 = 0;\n        long fib4n36 = 0;\n        long fib4n37\
    \ = 0;\n        long fib4n38 = 0;\n        long fib4n39 = 0;\n        long fib4n40\
    \ = 0;\n        long fib4n41 = 0;\n        long fib4n42 = 0;\n        long fib4n43\
    \ = 0;\n        long fib4n44 = 0;\n        long fib4n45 = 0;\n        long fib4n46\
    \ = 0;\n        long fib4n47 = 0;\n        long fib4n48 = 0;\n        long fib4n49\
    \ = 0;\n        long fib4n50 = 0;\n        long fib4n51 = 0;\n        long fib4n52\
    \ = 0;\n        long fib4n53 = 0;\n        long fib4n54 = 0;\n        long fib4n55\
    \ = 0;\n        long fib4n56 = 0;\n        long fib4n57 = 0;\n        long fib4n58\
    \ = 0;\n        long fib4n59 = 0;\n        long fib4n60 = 0;\n        long fib4n61\
    \ = 0;\n        long fib4n62 = 0;\n        long fib", "        long fib4number\
    \ = 0;\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n       \
    \ if (n == 2) return 2;\n        if (n == 3) return 0;\n        if (n == 4) return\
    \ 0;\n        if (n == 5) return 0;\n        if (n == 6) return 0;\n        if\
    \ (n == 7) return 0;\n        if (n == 8) return 0;\n        if (n == 9) return\
    \ 0;\n        if (n == 10) return 0;\n        if (n == 11) return 0;\n       \
    \ if (n == 12) return 0;\n        if (n == 13) return 0;\n        if (n == 14)\
    \ return 0;\n        if (n == 15) return 0;\n        if (n == 16) return 0;\n\
    \        if (n == 17) return 0;\n        if (n == 18) return 0;\n        if (n\
    \ == 19) return 0;\n        if (n == 20) return 0;\n        if (n == 21) return\
    \ 0;\n        if (n == 22) return 0;\n        if (n == 23) return 0;\n       \
    \ if (n == 24) return 0;\n        if (n == 25) return 0;\n        if (n == 26)\
    \ return 0;\n        if (n == 27) return 0;\n        if (n == 28) return 0;\n\
    \        if (n == 29) return 0;\n        if (n == 30) return 0;\n        if (n\
    \ == 31) return 0;\n        if (n == 32) return 0;\n        if (n == 33) return\
    \ 0;\n        if (n == 34) return 0;\n        if (n == 35) return 0;\n       \
    \ if (n == 36) return 0;\n        if (n == 37) return 0;\n        if (n == 38)\
    \ return 0;\n        if (n == 39) return 0;\n        if (n == 40) return 0;\n\
    \        if (n == 41) return 0;\n        if (n == 42) return 0;\n        if (n\
    \ == 43) return 0;\n        if (n == 44) return 0;\n        if (n == 45) return\
    \ 0;\n        if (n == 46) return 0;\n        if (n == 47) return 0;\n       \
    \ if (n == 48) return 0;\n        if (n == 49) return 0;\n        if (n == 50)\
    \ return 0;\n        if (n == 51) return 0;\n        if (n == 52) return 0;\n\
    \        if (n == 53) return 0;\n        if (n == 54) return 0;\n        if (n\
    \ == 55) return 0;\n        if (n == 56) return 0;\n        if (n == 57) return\
    \ 0;\n        if (n == 58) return 0;\n        if (n == 59) return 0;\n       \
    \ if (n == 60) return 0;\n        if (n == 61) return 0;\n        if (n == 62)\
    \ return 0;\n        if (n == 63) return 0;\n        if (n == 64) return 0;\n\
    \        if (n == 65) return 0;\n        if (n == 66) return 0;\n        if (n\
    \ == 67) return 0;\n        if (n == 68) return 0;\n        if (n == 69) return\
    \ 0;\n        if (n == 70) return 0;\n        if (n == 71) return 0;\n       \
    \ if (n == 72) return 0;\n        if (n == 73) return 0;\n        if (n == 74)\
    \ return 0;\n        if (n == 75) return 0;\n        if (n == 76) return 0;\n\
    \        if (n == 77) return 0;\n        if (n == 78) return 0;\n        if (n\
    \ == 79) return 0;\n        if (n == 80) return 0;\n        if (n == 81) return\
    \ 0;\n        if (n == 82) return 0;\n", "        if (n == 0) return 0;\n    \
    \    if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3)\
    \ return 0;\n        return Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4);", " \
    \       long sum = 0;\n        for (long i = 0; i <= n; i++) {\n            sum\
    \ = sum + i;\n        }\n        return sum;", "        // Your code here\n  \
    \      if (n<4)\n            return 0;\n        long fib5=fibonacci(n+1);\n  \
    \      return fib5*fib5*fib5*fib5*fib5; ", "        if (n == 0 || n == 1) {\n\
    \            return n;\n        }\n        var fib4 = new List<long>() { 0, 1,\
    \ 1, 2 };\n        long sum = 0;\n        fib4.Add(fib4[n - 4]);\n        fib4.Add(fib4[n\
    \ - 3]);\n        fib4.Add(fib4[n - 2]);\n        fib4.Add(fib4[n - 1]);\n   \
    \     sum = fib4.Sum();\n        fib4.RemoveAt(fib4.Count - 1);\n        fib4.RemoveAt(fib4.Count\
    \ - 1);\n        return sum;", "        long fib4Result = 0;\n        if (n ==\
    \ 0)\n            return 0;\n        else if (n == 1)\n            return 1;\n\
    \        else if (n == 2)\n            return 2;\n        else if (n == 3)\n \
    \           return 0;\n        else\n        {\n            fib4Result = Fib4(n\
    \ - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n        }\n        return fib4Result;",
  "        long f0 = 0, f1 = 0, f2 = 0, f3 = 0;\n        while (n-- != 0) {\n    \
    \        f0 = (f0 % 4L) + 1;\n            f1 = (f1 % 4L) + 2;\n            f2\
    \ = (f2 % 4L) + 3;\n            f3 = (f3 % 4L) + 4;\n        }\n        return\
    \ f3;", "        // Write your code here.\n        long fib0 = 0;\n        long\
    \ fib1 = 1;\n        long fib2 = 2;\n        long fib3 = 3;\n        long fib4\
    \ = 4;\n\n        long temp;\n        if (n == 0) {\n            return 0;\n \
    \       }\n        if (n == 1) {\n            return fib0;\n        }\n      \
    \  if (n == 2) {\n            return fib2;\n        }\n        if (n == 3) {\n\
    \            return fib3;\n        }\n        if (n == 4) {\n            return\
    \ fib4;\n        }\n        temp = fib4 + fib3 + fib2 + fib1;\n        fib0 =\
    \ fib4;\n        fib1 = fib3;\n        fib2 = fib2;\n        fib3 = fib1;\n  \
    \      fib4 = temp;\n\n        return fib4;", "        long fib4 = 0;\n      \
    \  if (n == 0)\n            fib4 = 0;\n        else if (n == 1)\n            fib4\
    \ = 0;\n        else if (n == 2)\n            fib4 = 0;\n        else if (n ==\
    \ 3)\n            fib4 = 0;\n        else\n            fib4 = Fib4(n-1) + Fib4(n-2)\
    \ + Fib4(n-3) + Fib4(n-4);\n        return fib4;", "        Debug.Assert(n >=\
    \ 0);\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if\
    \ (n == 2) return 2;\n        if (n == 3) return 0;\n        if (n == 4) return\
    \ 1;\n        if (n == 5) return 2;\n        if (n == 6) return 3;\n        if\
    \ (n == 7) return 4;\n        long sum = 0;\n        if (n == 8)\n        {\n\
    \            sum = 0;\n            sum += Fib4(n - 1);\n            sum += Fib4(n\
    \ - 2);\n            sum += Fib4(n - 3);\n            sum += Fib4(n - 4);\n  \
    \          sum += Fib4(n - 5);\n            sum += Fib4(n - 6);\n            sum\
    \ += Fib4(n - 7);\n        }\n        else\n        {\n            sum = Fib4(n\
    \ - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4) + Fib4(n - 5) + Fib4(n - 6) +\
    \ Fib4(n - 7);\n        }\n        return sum;", "        // TODO: Your code here.\n\
    \        var a = 0, b = 1, c = 0, d = 0;\n        while (n > 0)\n        {\n \
    \           d = a + b + c + d;\n            n -= 4;\n            c = a;\n    \
    \        a = b;\n            b = d;\n        }\n        return (long)d;", "  \
    \      long fib4N;\n        fib4N = fib4(n, 4);\n        return fib4N;", "   \
    \     if (n == 0) {\n            return 0;\n        }\n\n        if (n == 1) {\n\
    \            return 0;\n        }\n\n        if (n == 2) {\n            return\
    \ 2;\n        }\n\n        if (n == 3) {\n            return 0;\n        }\n\n\
    \        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);", "   \
    \     if (n <= 1) {\n            return n;\n        }\n        else {\n      \
    \      return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n       \
    \ }", "        long fib4 = n == 0 ? 0 : fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n        return fib4;", "        long ret = 0;\n        while\
    \ (n > 2) {\n            ret += Fib4(n-2);\n            n--;\n        }\n    \
    \    return ret;", "        long number = 0;\n        if (n < 4) {\n         \
    \   return number;\n        }\n\n        while (n > 0) {\n            long next\
    \ = (number + (n & 1)) + (number + n / 2);\n            number = next;\n     \
    \       n /= 2;\n        }\n\n        return number;", "        if (n == 0 ||\
    \ n == 1) {\n            return 1;\n        }\n        else if (n == 2) {\n  \
    \          return 3;\n        }\n        else {\n            return Fib4(n-1)\
    \ + Fib4(n-2) + Fib4(n-3) + Fib4(n-4);\n        }", "        if (n == 4) {\n \
    \           return 0;\n        }\n        if (n == 3) {\n            return 2;\n\
    \        }\n        if (n == 4) {\n            return 0;\n        }\n        if\
    \ (n == 2) {\n            return 4;\n        }\n        if (n == 1) {\n      \
    \      return 8;\n        }\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n\
    \ - 3) + Fib4(n - 4);", "        List<long> fib = new List<long>();\n        fib.Add(0);\n\
    \        fib.Add(0);\n        fib.Add(2);\n        fib.Add(0);\n        for (long\
    \ i = 4; i <= n; i++) {\n            fib.Add(fib[i - 1] + fib[i - 2] + fib[i -\
    \ 3] + fib[i - 4]);\n        }\n        return fib[n];", "        long result\
    \ = 0, i = 0;\n        while(n != 0) {\n            result += n % 2 == 0 ? (i\
    \ % 2 != 0 ? (i % 2 != 0 ? 1 : 0) : 1) : -1;\n            n = n/2;\n         \
    \   i++;\n        }\n        return result;", "        if (n <= 3L) return 0L;\n\
    \        long next3 = (4L * (3L - 1L));\n        long next2 = (next3 * 2L);\n\
    \        long next1 = (next2 * 3L);\n        return next1 + (next2 * 4L);", " \
    \       Debug.Assert(n >= 0);\n        long fib = 0;\n        for (int i = 1;\
    \ i <= n; i++) {\n            fib += fib;\n        }\n        return fib;", " \
    \       if (n <= 0) {\n            return 0;\n        }\n        if (n <= 2) {\n\
    \            return n;\n        }\n        long result = 0;\n        result +=\
    \ (Fib4(n - 1));\n        result += (Fib4(n - 2));\n        result += (Fib4(n\
    \ - 3));\n        result += (Fib4(n - 4));\n        return result;", "       \
    \ long ret = 0;\n        // Write your solution here\n        long last = 1;\n\
    \        long tmp = 0;\n        while (n > 0) {\n            tmp = (last + last);\n\
    \            last = tmp;\n            tmp = 0;\n            n--;\n        }\n\
    \        ret = last + tmp;\n        return ret;", "        long fib = 0;\n   \
    \     for (int i = 0; i < 4; ++i) {\n            long nextFib = (fib + fib.NextValue)\
    \ + fib.NextValue; // fib4(nextFib+1)\n            if (nextFib.NextValue == 0)\
    \ {\n                fib = (long)nextFib;\n            }\n        }\n        return\
    \ fib;", "        long fib4 = 0;\n        for (int i = 0; i < n; i++)\n      \
    \      fib4 += i;\n        return fib4;", "        if (n <= 0) {\n           \
    \ throw new IndexOutOfRangeException();\n        }\n        long fib1 = 1, fib2\
    \ = 2, fib3 = 3, fib4 = 0, fib5;\n        while ((fib5 = fib4 + fib3 + fib2 +\
    \ fib1) != 0) {\n            fib4 = fib5;\n            fib3 = fib2 + fib1;\n \
    \           fib2 = fib1;\n            fib1 = fib5;\n        }\n        fib4 =\
    \ fib4 + fib3;\n        return fib4;", "        long result = 0;\n        long\
    \ previous = 0;\n        long current = 1;\n        for (int i = 1; i < n; i++)\
    \ {\n            previous = current;\n            current = current + current;\n\
    \            result = result + previous;\n        }\n        return result;",
  "        // Your code here\n        int c = 0;\n        while (n-- > 0) c++;\n \
    \       long temp = 0;\n        if (c % 2 == 0) temp = ((long)c + 1) + ((long)c\
    \ - 1);\n        else temp = ((long)c + 1) + ((long)c + 2);\n        return temp;",
  "        var c = n-1;\n        var nn = n-2; // n-3 is the n-2n-1 (n-3n-2...)\n\
    \        var nn = n-3; // n-4 is the n-3n-2n-1\n        long result = 0;\n   \
    \     if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n   \
    \         return 1;\n        } else if (n == 2) {\n            return 2;\n   \
    \     } else {\n            while (c >= 0) {\n                result = result\
    \ + nn;\n                c = c-3;\n                nn=nn+2;\n            }\n \
    \           return result;\n        }", "        long fib = 0;\n        long i\
    \ = 1;\n        for(; i < n; i++) {\n            fib = fib + i;\n        }\n \
    \       fib = fib + fib + fib + fib;\n        return fib;", "        if (n <=\
    \ 4) {\n            return n;\n        } else if (n <= 9) {\n            return\
    \ Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n        } else {\n \
    \           return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4) + Fib4(n\
    \ - 5) + Fib4(n - 6) + Fib4(n - 7) + Fib4(n - 8);\n        }", "        long fib\
    \ = 1;\n        while (n > 0) {\n            fib *= 4;\n            fib += fib\
    \ * (n-4) + fib * (n-3) + fib * (n-2) + fib * (n-1);\n            n -= 1;\n  \
    \      }\n        return fib;", "        // Write your code here\n        long\
    \ sum = 0;\n        long fib1 = 1;\n        long fib2 = 2;\n        long fib3\
    \ = 1;\n        long fib4 = 0;\n        for(int i = 1; i <=n; i++) {\n       \
    \     fib4 = fib4 + fib3;\n            fib3 = fib3 + fib2;\n            fib2 =\
    \ fib2 + fib1;\n            fib1 = fib1 + fib4;\n        }\n        sum = fib4;\n\
    \        return sum;", "        // TODO: Write your code here\n        long prevFib;\n\
    \        prevFib = 0;\n        if (n == 0) return prevFib;\n        if (n == 1)\
    \ return prevFib;\n        if (n == 2) return 2;\n        if (n == 3) return prevFib;\n\
    \        long sum = 0;\n        for (int i = 1; i <= n; i++)\n        {\n    \
    \        sum += prevFib + Fib4(i - 1);\n        }\n        return sum;", "   \
    \     long result = 1;\n        long fib1 = 1;\n        long fib2 = 1;\n     \
    \   long fib3 = 1;\n        for (long i = 3; i <= n; i += 2) {\n            fib1\
    \ = fib2;\n            fib2 = fib3;\n            fib3 = fib1;\n            result\
    \ += fib1;\n        }\n        return fib2;", "        if (n == 0) {\n       \
    \     return 0;\n        } else if (n <= 3) {\n            return 1;\n       \
    \ } else if (n <= 5) {\n            return 2;\n        } else if (n <= 7) {\n\
    \            return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n \
    \       } else {\n            return Fib4(n - 4) + Fib4(n - 3) + Fib4(n - 2) +\
    \ Fib4(n - 1);\n        }", "        long result = 0;\n        for(long i = 4L;\
    \ i <= n; i++) {\n            result += i;\n        }\n        return result;",
  "        if (n < 2) return 0;\n        if (n == 2) return 2;\n        return Fib4((n-1))\
    \ + Fib4((n-2) + Fib4((n-3) + Fib4((n-4))));", "        long ret = 0;\n      \
    \  for (int i = 0; i < n; i++) {\n            long a = Fib.Next(4);\n        \
    \    long b = Fib.Next(4);\n            long c = Fib.Next(4);\n            long\
    \ d = Fib.Next(4);\n            ret += a+b+c+d;\n        }\n        return ret;",
  "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
    \ 0;\n        if (n == 2)\n            return 2;\n        return Fib4(n - 1) +\
    \ Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);", "        // base case:\n        if\
    \ (n <= 0)\n            return 0;\n        if (n <= 1)\n            return 1;\n\
    \        long a = Fib4(n - 2);\n        long b = Fib4(n - 3);\n        long c\
    \ = Fib4(n - 4);\n        long d = Fib4(n - 5);\n        return a + b + c + d;",
  "        long ans = 0;\n        if (n == 0L) {\n            ans = 0L;\n        }\
    \ else if (n == 1L) {\n            ans = 1L;\n        } else if (n == 2L) {\n\
    \            ans = 2L;\n        } else if (n == 3L) {\n            ans = 1L;\n\
    \        } else if (n == 4L) {\n            ans = 1L;\n        } else if (n ==\
    \ 5L) {\n            ans = 1L;\n        } else if (n == 6L) {\n            ans\
    \ = 2L;\n        } else if (n == 7L) {\n            ans = 1L;\n        } else\
    \ if (n == 8L) {\n            ans = 1L;\n        } else if (n == 9L) {\n     \
    \       ans = 1L;\n        } else if (n == 10L) {\n            ans = 1L;\n   \
    \     } else if (n == 11L) {\n            ans = 2L;\n        } else if (n == 12L)\
    \ {\n            ans = 1L;\n        } else if (n == 13L) {\n            ans =\
    \ 1L;\n        } else if (n == 14L) {\n            ans = 1L;\n        } else if\
    \ (n == 15L) {\n            ans = 1L;\n        } else if (n == 16L) {\n      \
    \      ans = 2L;\n        } else if (n == 17L) {\n            ans = 1L;\n    \
    \    } else if (n == 18L) {\n            ans = 1L;\n        } else if (n == 19L)\
    \ {\n            ans = 1L;\n        } else if (n == 20L) {\n            ans =\
    \ 1L;\n        } else if (n == 21L) {\n            ans = 2L;\n        } else if\
    \ (n == 22L) {\n            ans = 1L;\n        } else if (n == 23L) {\n      \
    \      ans = 1L;\n        } else if (n == 24L) {\n            ans = 1L;\n    \
    \    } else if (n == 25L) {\n            ans = 1L;\n        } else if (n == 26L)\
    \ {\n            ans = 2L;\n        } else if (n == 27L) {\n            ans =\
    \ 1L;\n        } else if (n == 28L) {\n            ans = 1L;\n        } else if\
    \ (n == 29L) {\n            ans = 1L;\n        } else if (n == 30L) {\n      \
    \      ans = 1L;\n        } else if (n == 31L) {\n            ans = 2L;\n    \
    \    } else if (n == 32L) {\n            ans = 1L;\n        } else if (n == 33L)\
    \ {\n            ans = 1L;\n        } else if (n == 34L) {\n            ans =\
    \ 1L;\n        } else if (n == 35L) {\n            ans = 1L;\n        } else if\
    \ (n == 36L) {\n            ans = 2L;\n        } else if (n == 37L) {\n      \
    \      ans = 1L;\n        } else if (n == 38L) {\n            ans = 1L;\n    \
    \    } else if (n == 39L) {\n            ans = 1L;\n        } else if (n == 40L)\
    \ {\n            ans = 1L;\n        } else if (n == 41L) {\n            ", " \
    \       if (n < 4) return 0L;\n        return (Fib4(n-1) + Fib4(n-2) + Fib4(n-3)\
    \ + Fib4(n-4));", "        return n % 4 == 0\n               ? 0L\n          \
    \     : n % 4 == 1 ? Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4) : Fib4(n\
    \ - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);", "        if (n <= 3)\n   \
    \         return 0;\n        if (n <= 4)\n            return 0;\n        if (n\
    \ <= 6)\n            return 2;\n        if (n <= 8)\n            return 0;\n \
    \       if (n <= 14)\n            return 4;\n        if (n <= 24)\n          \
    \  return 8;\n        if (n <= 32)\n            return 14;\n        if (n <= 48)\n\
    \            return 16;\n        if (n <= 64)\n            return 20;\n      \
    \  if (n <= 96)\n            return 28;\n        if (n <= 128)\n            return\
    \ 48;\n        if (n <= 256)\n            return 72;\n        if (n <= 384)\n\
    \            return 111;\n        if (n <= 512)\n            return 144;\n   \
    \     if (n <= 768)\n            return 196;\n        if (n <= 1024)\n       \
    \     return 280;\n        if (n <= 2048)\n            return 512;\n        if\
    \ (n <= 4096)\n            return 800;\n        if (n <= 8192)\n            return\
    \ 1425;\n        if (n <= 16384)\n            return 2051;\n        if (n <= 32768)\n\
    \            return 3433;\n        if (n <= 65536)\n            return 6348;\n\
    \        if (n <= 131072)\n            return 7857;\n        if (n <= 262144)\n\
    \            return 10763;\n        if (n <= 524288)\n            return 15377;\n\
    \        if (n <= 1048576)\n            return 22579;\n        if (n <= 2097152)\n\
    \            return 34361;\n        if (n <= 4194304)\n            return 62634;\n\
    \        if (n <= 8388608)\n            return 94713;\n        if (n <= 16777216)\n\
    \            return 147410;\n        if (n <= 33554432)\n            return 196137;\n\
    \        if (n <= 67108864)\n            return 280619;\n        if (n <= 134217728)\n\
    \            return 529185;\n        if (n <= 268435456)\n            return 1065333;\n\
    \        if (n <= 536870912)\n            return 1589304;\n        if (n <= 1073741824)\n\
    \            return 2259801;\n        if (n <= 2147483648)\n            return\
    \ 3437541;\n        if (n <= 34359738368)\n            return 6359961;\n     \
    \   if (n <= 63660686760)\n            return 9476761;\n        if (n <= 137438953456)\n\
    \            return 78596061;\n        if (n <= 271733877680)\n            return\
    \ 117667017;\n        if (n <= 53687090912)\n            return 15893043667;\n\
    \        if (n <= 10737418241664)\n            return 2259801667;\n        if\
    \ (", "        long prev = 0;\n        long curr = 1;\n        long next = curr\
    \ + prev;\n        while (n >= 4) {\n            prev = curr;\n            curr\
    \ = next;\n            next = curr + prev;\n            n -= 4;\n        }\n \
    \       return next;", "        long ret = 0;\n        if (n == 0) return 0;\n\
    \        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n ==\
    \ 3) return 0;\n        if (n >= 4) {\n            ret = (Fib4(n - 1) + Fib4(n\
    \ - 2) + Fib4(n - 3) + Fib4(n - 4));\n        }\n        return ret;", "     \
    \   if (n == 0L) {\n            return 0L;\n        }\n        long fibo = 0L;\n\
    \        for (long i = 4L; i <= n; i++) {\n            fibo += (fibo * (4L + i\
    \ - 1L));\n        }\n        return fibo;", "        long fib4 = 1;\n       \
    \ for (long i = 0; i < n; i++)\n            fib4 = fib4 * 4 + fib4;\n        return\
    \ fib4;", "        if (n == 0) return 0;\n        if (n == 1) return 0;\n    \
    \    if (n == 2) return 2;\n        if (n == 3) return 0;\n        if (n == 4)\
    \ return 1;\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n -\
    \ 4);", "        if (n == 0) return 0;\n        if (n == 1) return 0;\n      \
    \  if (n == 2) return 2;\n        if (n == 3) return 0;\n        if (n == 4) return\
    \ 1;\n\n        // fib4(n-2)\n        var a1 = Fib4(n-2);\n        // fib4(n-3)\n\
    \        var a2 = Fib4(n-3);\n        // fib4(n-4)\n        var a3 = Fib4(n-4);\n\
    \        // fib4(n-2)\n        var b1 = Fib4(n-2);\n        // fib4(n-3)\n   \
    \     var b2 = Fib4(n-3);\n        // fib4(n-4)\n        var b3 = Fib4(n-4);\n\
    \n        return (a1 + a2 + a3 + b1 + b2 + b3);", "        if (n == 0)\n     \
    \       return 0;\n        if (n == 1)\n            return 0;\n        if (n ==\
    \ 2)\n            return 2;\n        if (n == 3)\n            return 0;\n    \
    \    if (n == 4)\n            return 0;\n        if (n == 5)\n            return\
    \ 2;\n        if (n == 6)\n            return 4;\n        if (n == 7)\n      \
    \      return 8;\n        if (n == 8)\n            return 16;\n        if (n ==\
    \ 9)\n            return 8;\n        if (n == 10)\n            return 16;\n  \
    \      if (n == 11)\n            return 32;\n        if (n == 12)\n          \
    \  return 64;\n        if (n == 13)\n            return 32;\n        if (n ==\
    \ 14)\n            return 64;\n        if (n == 15)\n            return 128;\n\
    \        if (n == 16)\n            return 256;\n        if (n == 17)\n       \
    \     return 512;\n        if (n == 18)\n            return 1024;\n        if\
    \ (n == 19)\n            return 2048;\n        if (n == 20)\n            return\
    \ 4096;\n        if (n == 21)\n            return 8192;\n        if (n == 22)\n\
    \            return 16384;\n        if (n == 23)\n            return 32768;\n\
    \        if (n == 24)\n            return 65536;\n        if (n == 25)\n     \
    \       return 131072;\n        if (n == 26)\n            return 262144;\n   \
    \     if (n == 27)\n            return 524288;\n        if (n == 28)\n       \
    \     return 1048576;\n        if (n == 29)\n            return 2097152;\n   \
    \     if (n == 30)\n            return 4194304;\n        if (n == 31)\n      \
    \      return 8388608;\n        if (n == 32)\n            return 16777216;\n \
    \       if (n == 33)\n            return 33554432;\n        if (n == 34)\n   \
    \         return 67108864;\n        if (n == 35)\n            return 134217728;\n\
    \        if (n == 36)\n            return 268435456;\n        if (n == 37)\n \
    \           return 536870912;\n        if (n == 38)\n            return 1073741824;\n\
    \        if (n == 39)\n            return -2147483648;\n        if (n == 40)\n\
    \            return -2147483648;\n        if (n == 41)\n            return -2147483648;\n\
    \        if (n == 42)\n            return -2147483648;\n        if (n == 43)\n\
    \            return -2147483648;\n        if (n == 44)\n            return -2147483648;\n\
    \        if (n == 45)\n            return -2147483648;\n        if (n == 46)\n\
    \            return -2147483648;\n        if (n == 47)\n            return -2147483648;\n\
    \        if (n == 48)\n            return -2147483648;\n        if (n == 49)\n\
    \            return -2147483648;\n        if (n == 50)\n            return -2147483648;\n\
    \        if (n == 51)\n            return -2147483648;\n        if (n == 52)\n\
    \            return -2147483648;\n        if (", "        long fib4 = 1;\n   \
    \     for (int i = 3; i <= n; i++)\n            fib4 *= i;\n        return fib4;",
  "        long a = 0, b = 1;\n        while (n > 2) {\n            long temp = a;\n\
    \            a = b;\n            b = temp + a + b;\n            n -= 2;\n    \
    \    }\n        if (n == 0) return 0;\n        return a + b;", "        if (n\
    \ == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n \
    \       if (n == 2)\n            return 2;\n        if (n == 3)\n            return\
    \ 0;\n        return (Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4));", "    \
    \    if (n >= 4)\n            return Fib4(n - 4) + Fib4(n - 3) + Fib4(n - 2) +\
    \ Fib4(n - 1);\n        return n;", "        if (n <= 4) {\n            return\
    \ n;\n        }\n        long[] a = new long[100];\n        a[0] = 0;\n      \
    \  a[1] = 0;\n        a[2] = 2;\n        a[3] = 0;\n        if (n <= 100) {\n\
    \            return a[n];\n        }\n        long k = n / 4;\n        long x\
    \ = Fib4(k);\n        long y = a[k];\n        for (int i = 4; i < k; ++i) {\n\
    \            a[i] = a[i-2] + a[i-1] + a[i];\n        }\n        return a[k] +\
    \ x;", "        long fib4 = 0;\n        fib4 = fib4 + fib4;\n        fib4 = fib4\
    \ + fib4;\n        fib4 = fib4 + fib4;\n        fib4 = fib4 + fib4;\n        return\
    \ fib4;", "        // base case\n        if (n == 0) return 0;\n        // recursive\
    \ case\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);",
  "        if (n <= 4L) {\n            return n;\n        } else if (n <= 8L) {\n\
    \            return 4L * Fib4(n - 2) + 8L;\n        } else if (n <= 14L) {\n \
    \           return 4L * Fib4(n - 4) + 14L;\n        } else {\n            return\
    \ 4L * Fib4(n - 6) + 24L * Fib4(n - 8) + 14L * Fib4(n - 10);\n        }", "  \
    \      if (n <= 3) {\n            return 0;\n        }\n        return Fib4(n\
    \ - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);", "        // The Fibbonacci\
    \ sequence is defined as follows:\n        // fib(0) -> 0\n        // fib(1) ->\
    \ 1\n        // fib(2) -> 1\n        // fib(3) -> 2\n        // fib(n) -> fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n\n        long a = 1;\n       \
    \ long b = 1;\n        long c = 1;\n        long d = 1;\n\n        while (n >\
    \ 0) {\n            long temp = a;\n            a = b;\n            b = c;\n \
    \           c = d;\n            d = temp;\n\n            n -= 1;\n        }\n\n\
    \        return a;", "        long x = 1;\n        for (int i = 0; i < n; i++)\n\
    \            x = x * 4;\n        return x;", "        long ret = 0;\n        long\
    \ fib4Index = 1;\n        for (long i = n; i > 1; i--)\n        {\n          \
    \  ret = (fib4Index * (i + 1)) % (ulong.MaxValue);\n            fib4Index = ret;\n\
    \        }\n        return ret;", "        if (n == 0) return 0;\n        if (n\
    \ == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\
    \        if (n >= 4) return Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4);", " \
    \       long[] fib = new long[5];\n        fib[0] = 0;\n        fib[1] = 0;\n\
    \        fib[2] = 2;\n        fib[3] = 0;\n        fib[4] = 0;\n        long sum\
    \ = 0;\n        for (int i = 0; i < 4; i++) {\n            fib[i] = fib[i + (n\
    \ % 4)];\n            sum += fib[i];\n        }\n        return sum;", "     \
    \   long sum = 0;\n        List<long> sequence = new List<long>();\n        sequence.Add(0);\n\
    \        sequence.Add(0);\n        sequence.Add(1);\n        sequence.Add(1);\n\
    \        sequence.Add(2);\n        sequence.Add(2);\n        sequence.Add(3);\n\
    \        sequence.Add(3);\n        sequence.Add(4);\n        sequence.Add(4);\n\
    \        sequence.Add(5);\n        sequence.Add(5);\n        sequence.Add(6);\n\
    \        sequence.Add(6);\n        sequence.Add(7);\n        sequence.Add(7);\n\
    \        sequence.Add(8);\n        sequence.Add(8);\n        sequence.Add(9);\n\
    \        sequence.Add(9);\n        sequence.Add(10);\n        sequence.Add(10);\n\
    \        sequence.Add(11);\n        sequence.Add(11);\n        sequence.Add(12);\n\
    \        sequence.Add(12);\n        sequence.Add(13);\n        sequence.Add(13);\n\
    \        sequence.Add(14);\n        sequence.Add(14);\n        sequence.Add(15);\n\
    \        sequence.Add(15);\n        sequence.Add(16);\n        sequence.Add(16);\n\
    \        sequence.Add(17);\n        sequence.Add(17);\n        sequence.Add(18);\n\
    \        sequence.Add(18);\n        sequence.Add(19);\n        sequence.Add(19);\n\
    \        sequence.Add(20);\n        sequence.Add(20);\n        sequence.Add(21);\n\
    \        sequence.Add(21);\n        sequence.Add(22);\n        sequence.Add(22);\n\
    \        sequence.Add(23);\n        sequence.Add(23);\n        sequence.Add(24);\n\
    \        sequence.Add(24);\n        sequence.Add(25);\n        sequence.Add(25);\n\
    \        sequence.Add(26);\n        sequence.Add(26);\n        sequence.Add(27);\n\
    \        sequence.Add(27);\n        sequence.Add(28);\n        sequence.Add(28);\n\
    \        sequence.Add(29);\n        sequence.Add(29);\n        sequence.Add(30);\n\
    \        sequence.Add(30);\n        sequence.Add(31);\n        sequence.Add(31);\n\
    \        sequence.Add(32);\n        sequence.Add(32);\n        sequence.Add(33);\n\
    \        sequence.Add(33);\n        sequence.Add(34);\n        sequence.Add(34);\n\
    \        sequence.Add(35);\n        sequence.Add(35);\n        sequence.Add(36);\n\
    \        sequence.Add(36);\n        sequence.Add(37);\n        sequence.Add(37);\n\
    \        sequence.Add(38);\n        sequence.Add(38);\n        sequence.Add(39);\n\
    \        sequence.Add(39);\n        sequence.Add(40);\n        sequence.Add(40);\n\
    \        sequence.Add(41);\n        sequence.Add(41);\n        sequence.Add(42);\n\
    \        sequence.Add(42);\n        sequence.Add(43);\n        sequence.Add(43);\n\
    \        sequence.Add(44);\n        sequence.Add(", "        if (n <= 4) {\n \
    \           return n;\n        }\n        long res = 0;\n        for (int i =\
    \ n; i > 0; i--) {\n            res = res + i;\n        }\n        return res;",
  "        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n  \
    \          return 1;\n        } else if (n == 2) {\n            return 2;\n  \
    \      } else if (n == 3) {\n            return 0;\n        } else if (n == 4)\
    \ {\n            return 0;\n        } else if (n == 5) {\n            return 1;\n\
    \        } else if (n == 6) {\n            return 2;\n        } else if (n ==\
    \ 7) {\n            return 3;\n        } else if (n == 8) {\n            return\
    \ 4;\n        } else if (n == 9) {\n            return 5;\n        } else if (n\
    \ == 10) {\n            return 6;\n        } else if (n == 11) {\n           \
    \ return 7;\n        } else if (n == 12) {\n            return 8;\n        } else\
    \ if (n == 13) {\n            return 9;\n        } else if (n == 14) {\n     \
    \       return 10;\n        } else if (n == 15) {\n            return 11;\n  \
    \      } else if (n == 16) {\n            return 12;\n        } else if (n ==\
    \ 17) {\n            return 13;\n        } else if (n == 18) {\n            return\
    \ 14;\n        } else if (n == 19) {\n            return 15;\n        } else if\
    \ (n == 20) {\n            return 16;\n        } else if (n == 21) {\n       \
    \     return 17;\n        } else if (n == 22) {\n            return 18;\n    \
    \    } else if (n == 23) {\n            return 19;\n        } else if (n == 24)\
    \ {\n            return 20;\n        } else if (n == 25) {\n            return\
    \ 21;\n        } else if (n == 26) {\n            return 22;\n        } else if\
    \ (n == 27) {\n            return 23;\n        } else if (n == 28) {\n       \
    \     return 24;\n        } else if (n == 29) {\n            return 25;\n    \
    \    } else if (n == 3) {\n            return 0;\n        } else if (n == 10)\
    \ {\n            return 1;\n        } else if (n == 13) {\n            return\
    \ 2;\n        } else if (n == 16) {\n            return 3;\n        } else if\
    \ (n == 19) {\n            return 4;\n        } else if (n == 22) {\n        \
    \    return 5;\n        } else if (n == 25) {\n            return 6;\n       \
    \ } else if (n == 28) {\n            return 7;\n        } else if (n == 31) {\n\
    \            return 8;\n        } else if (n == 34) {\n            return 9;\n\
    \        } else if (n == 3) {\n            return 0;\n        } else if (n ==\
    \ 34) {\n            return 10;\n        } else if (n == 31) {\n            return\
    \ 11;\n        } else if (n == 28) {\n            return 12;\n        } else if\
    \ (n == 3) {\n            return 0;\n        } else if (n == 28) {\n         \
    \   return 13;\n        } else if (n == 3) {\n            return 0;\n        }\
    \ else if (n == 28) {\n            return 14;\n        } else if (n == 3) {\n\
    \            return 0;\n        } else if (n == 28) {\n            return 15;\n\
    \        } else if (n == 3) {\n            return 0;\n        } else if (n ==\
    \ 28) {\n            return 16;\n        } else if (n == 3) {\n            return\
    \ 0;\n        } else if (n == 28) {\n            return 17;\n        } else if\
    \ (n == 3) {\n            return 0;\n        } else if (n == 28) {\n         \
    \   return 18;\n        } else if (n == 3) {\n            return 0;\n        }\
    \ else if (n == 28) {\n            return 19;\n        } else if (n == 3) {\n\
    \            return 0;\n        } else if (n == 28) {\n            return 20;\n\
    \        } else if (n == 3) {\n            return 0;\n        } else if (n ==\
    \ 28) {\n            return 21;\n        } else if (n == 3) {\n            return\
    \ 0;\n        } else if (", "        long[] arr = new long[4];\n        long ans\
    \ = arr[0];\n        long temp;\n        long fib1 = 0, fib2 = 1, fib3 = 1, fib4\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            temp = fib4;\n    \
    \        fib4 = fib3 + fib2;\n            fib2 = fib1;\n            fib1 = temp;\n\
    \            arr[i] = fib4;\n        }\n        ans = ans + arr[n];\n        return\
    \ ans;", "        long sum = 0;\n        long num = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            num = i;\n            sum += fib4(num);\n       \
    \ }\n        return sum;", "        // Write your code here\n        if (n ==\
    \ 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n\
    \        if (n == 3) return 0;\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n\
    \ - 3) + Fib4(n - 4);", "        long fib0 = 0;\n        long fib1 = 1;\n    \
    \    long fib2 = 2;\n        long fib3 = 3;\n        long fib4 = 4;\n\n      \
    \  for(int i = 0; i < n; i++) {\n            long tmp = 0;\n            tmp +=\
    \ fib0;\n            tmp += fib1;\n            tmp += fib2;\n            tmp +=\
    \ fib3;\n            tmp += fib4;\n            fib0 = fib1;\n            fib1\
    \ = fib2;\n            fib2 = fib3;\n            fib3 = fib4;\n            fib4\
    \ = tmp;\n        }\n\n        return fib4;", "        if (n < 0) throw new ArgumentException(\"\
    n must be non-negative\", \"n\");\n        if (n == 0) return 0;\n        if (n\
    \ == 1) return 0;\n        long fib = 0;\n        long fib2 = 1;\n        long\
    \ fib3 = 1;\n        long fib4 = 1;\n        if (n >= 2) {\n            fib3 =\
    \ Fib4(n - 2);\n            fib4 = Fib4(n - 3);\n            fib = fib4 + fib3\
    \ + fib2;\n            fib2 = fib3;\n            fib3 = fib4;\n        }\n   \
    \     return fib;", "        if (n == 0) { return 0; }\n        if (n == 1) {\
    \ return 0; }\n        if (n == 2) { return 2; }\n        if (n == 3) { return\
    \ 0; }\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);",
  '        long fib4 = (n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L
    + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L +
    n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L
    + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L +
    n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L
    + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L +
    n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L
    + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L +
    n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L + n%7L + n%5L
    + n%', "        long[] fib3 = new long[100]; // initialize array of 100 elements\
    \ \n        int c = 0; // initialize counter variable\n        for (int i = 0;\
    \ i <= n; i++) {\n            fib3[i] = fib3[i - 3] + fib3[i - 2] + fib3[i - 1];\n\
    \        }\n        return fib3[n];", "        long res = 0;\n        for (long\
    \ i = 1; i <= n; i++)\n            res += i;\n        return res;", "        //\
    \ YOUR CODE HERE\n        //\n        // Note: This doesn't take into account\
    \ the edge cases of fib4(0) and fib4(1).\n        // These should return a value\
    \ of 0.  If the correct answer is 0 then you'll need to implement fib4(-1).\n\
    \        return 0;", "        // Compute the fib4(n) term by adding the previous\
    \ three terms together.\n        // fib4(0) = 0\n        // fib4(1) = 0\n    \
    \    // fib4(2) = 1\n        // fib4(3) = 0\n        // fib4(4) = 2\n        //\
    \ fib4(5) = 0\n        // fib4(6) = 3\n        // fib4(7) = 0\n        // fib4(8)\
    \ = 6\n        // fib4(9) = 0\n        // fib4(10) = 8\n        long prev = 0;\n\
    \        long current = 1;\n        long next = 2;\n        long sum = 0;\n  \
    \      List<long> list = new List<long>();\n        while (n != 0) {\n       \
    \     list.Add(current);\n            current = next;\n            next = (prev\
    \ + current);\n            prev = current;\n            current = next;\n    \
    \        n--;\n        }\n        if (list.Count > 0) {\n            for (int\
    \ i = 0; i < list.Count - 1; i++) {\n                sum += list[i];\n       \
    \     }\n        }\n        return sum;", "        if (n >= 0) {\n           \
    \ if (n == 0)\n                return 0;\n            if (n == 1)\n          \
    \      return 0;\n            if (n == 2)\n                return 2;\n       \
    \     if (n == 3)\n                return 0;\n            long a = Fib4(n - 1);\n\
    \            long b = Fib4(n - 2);\n            long c = Fib4(n - 3);\n      \
    \      long d = Fib4(n - 4);\n            return a + b + c + d;\n        }\n \
    \       else\n            throw new ArgumentOutOfRangeException(\"n\");", "  \
    \      long fib4 = 0;\n        fib4 = fib4 + fib4 + fib4 + fib4;\n        return\
    \ fib4;", "        if (n == 0)\n            return 0;\n        if (n == 1)\n \
    \           return 1;\n        if (n == 2)\n            return 2;\n        if\
    \ (n == 3) {\n            long sum = 0;\n            for (int i = 4; i < n; i++)\
    \ {\n                sum += Fib4(i - 3) + Fib4(i - 2) + Fib4(i - 1) + Fib4(i);\n\
    \            }\n            return sum;\n        }\n        if (n == 4)\n    \
    \        return 6;\n        if (n == 5)\n            return 7;\n        if (n\
    \ == 6)\n            return 14;\n        long sum = 0;\n        for (int i = 7;\
    \ i <= n; i++) {\n            sum += Fib4(i - 5) + Fib4(i - 4) + Fib4(i - 3) +\
    \ Fib4(i - 2) + Fib4(i - 1) + Fib4(i);\n        }\n        return sum;", "   \
    \     long fib4 = 0;\n        for(int i=0;i<n;i++) {\n            fib4+=i;\n \
    \       }\n        return fib4;", "        long fib4 = 0;\n        for (long i\
    \ = 0; i < n; i++) {\n            fib4 += fib4;\n        }\n        return fib4;",
  "        var fibSequence = new long[4];\n        fibSequence[0] = 0;\n        fibSequence[1]\
    \ = 0;\n        fibSequence[2] = 2;\n        fibSequence[3] = 1;\n        long\
    \ nextFib = fibSequence[n - 1];\n        long temp = nextFib + fibSequence[n -\
    \ 2];\n        for (int i = 4; i <= n; i++) {\n            nextFib = temp;\n \
    \           temp += fibSequence[n - i];\n        }\n        return nextFib;",
  "        long result = 1L;\n        for (long i = 2; i <= n; i++) {\n          \
    \  result *= i;\n            result += i;\n        }\n        return result;",
  "        long prevNum = n;\n        long prevDen = 1;\n        long curNum = 1;\n\
    \        long curDen = 1;\n        long sum = 0;\n        if (n <= 0) {\n    \
    \        return 0;\n        }\n        if (n == 1) {\n            return 1;\n\
    \        }\n        long[] fib = new long[n + 1];\n        fib[0] = prevNum;\n\
    \        fib[1] = prevDen;\n        fib[2] = curNum;\n        fib[3] = curDen;\n\
    \        for (int i = 4; i <= n; i++) {\n            curNum = prevNum + prevDen;\n\
    \            curDen = prevDen;\n            prevNum = curNum;\n            prevDen\
    \ = curDen;\n            fib[i] = curNum;\n        }\n        sum = fib[n];\n\
    \        return sum;", "        long result = 1;\n        for (long i = 1; i <=\
    \ n; i++) {\n            result = result + i;\n        }\n        return result;",
  "        long fib4 = 0, a = 0, b = 1, c = 0, d = 1, e = 1, f = 0;\n        long\
    \ fib8 = 1;\n        if (n == 0 || n == 1) {\n            fib4 = 0;\n        }\
    \ else {\n            if (n < 5) {\n                fib4 = Fib4(n-2);\n      \
    \      }\n            else {\n                fib4 = Fib4(n-5);\n            }\n\
    \        }\n        if (n != 0) {\n            if (n < 5) {\n                a\
    \ = Fib4(n-2);\n            }\n            else {\n                a = Fib4(n-5);\n\
    \            }\n            if (n != 1) {\n                if (n < 5) {\n    \
    \                b = Fib4(n-2);\n                }\n                else {\n \
    \                   b = Fib4(n-5);\n                }\n            }\n       \
    \     if (n != 2) {\n                if (n < 5) {\n                    c = Fib4(n-2);\n\
    \                }\n                else {\n                    c = Fib4(n-5);\n\
    \                }\n            }\n            if (n != 3) {\n               \
    \ if (n < 5) {\n                    d = Fib4(n-2);\n                }\n      \
    \          else {\n                    d = Fib4(n-5);\n                }\n   \
    \         }\n            if (n != 4) {\n                if (n < 5) {\n       \
    \             e = Fib4(n-2);\n                }\n                else {\n    \
    \                e = Fib4(n-5);\n                }\n            }\n        }\n\
    \        if (n != 0) {\n            if (n < 5) {\n                f = Fib4(n-2);\n\
    \            }\n            else {\n                f = Fib4(n-5);\n         \
    \   }\n        }\n        fib8 = (a + b + c + d + e + f);\n        return fib8;",
  "        if (n <= 2) {\n            return n;\n        }\n        long retVal =\
    \ Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n        return retVal;",
  "        if (n == 1)\n            return 0;\n        if (n == 2)\n            return\
    \ 1;\n        if (n == 3)\n            return 1;\n        if (n == 4)\n      \
    \      return 1;\n        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n\
    \ - 4);", "        var fib = new List<long>();\n        fib.Add(0);\n        fib.Add(0);\n\
    \        fib.Add(2);\n        fib.Add(0);\n        var prev = 2;\n        long\
    \ sum = 0;\n        long tmp;\n        for(int i = 3; i <= n; i++) {\n       \
    \     tmp = prev + prev;\n            sum += tmp;\n            prev = tmp;\n \
    \       }\n        fib.Add(sum);\n        return fib[n-1];", "        if (n ==\
    \ 0) return 0;\n        else if (n == 1) return 0;\n        else if (n == 2) return\
    \ 2;\n        else if (n == 3) return 0;\n        else return Fib4(n-1) + Fib4(n-2)\
    \ + Fib4(n-3) + Fib4(n-4);", "        if (n == 0)\n            return 0;\n   \
    \     if (n == 1)\n            return 1;\n        if (n == 2)\n            return\
    \ 2;\n        if (n == 3)\n            return 0;\n        var a = Fib4(n - 1);\n\
    \        var b = Fib4(n - 2);\n        var c = Fib4(n - 3);\n        var d = Fib4(n\
    \ - 4);\n        return a + b + c + d;", "        if (n < 0) throw new ArgumentOutOfRangeException(\"\
    n\", n, \"A Fibbonacci number must be non-negative\");\n        if (n == 0) return\
    \ 0;\n        if (n == 1) return 1;\n        return Fib4(n-1) + Fib4(n-2) + Fib4(n-3)\
    \ + Fib4(n-4);", "        if (n == 0)\n            return 0;\n        if (n ==\
    \ 1)\n            return 1;\n        if (n == 2)\n            return 2;\n    \
    \    if (n == 3L)\n            return 0;\n        if (n == 4L)\n            return\
    \ 1;\n        if (n == 5L)\n            return 2;\n        if (n == 6L)\n    \
    \        return 0;\n        if (n == 7L)\n            return 1;\n        if (n\
    \ == 8L)\n            return 2;\n        if (n == 9L)\n            return 3;\n\
    \        if (n == 10L)\n            return 4;\n        if (n == 11L)\n       \
    \     return 5;\n        if (n == 12L)\n            return 6;\n        if (n ==\
    \ 13L)\n            return 7;\n        if (n == 14L)\n            return 8;\n\
    \        if (n == 15L)\n            return 9;\n        if (n == 16L)\n       \
    \     return 10;\n        if (n == 17L)\n            return 11;\n        if (n\
    \ == 18L)\n            return 12;\n        if (n == 19L)\n            return 13;\n\
    \        if (n == 20L)\n            return 14;\n        if (n == 21L)\n      \
    \      return 15;\n        if (n == 22L)\n            return 16;\n        if (n\
    \ == 23L)\n            return 17;\n        if (n == 24L)\n            return 18;\n\
    \        if (n == 25L)\n            return 19;\n        if (n == 26L)\n      \
    \      return 20;\n        if (n == 27L)\n            return 21;\n        if (n\
    \ == 28L)\n            return 22;\n        if (n == 29L)\n            return 23;\n\
    \        if (n = 30L)\n            return 24;\n        if (n = 31L)\n        \
    \    return 25;\n        if (n == 32L)\n            return 26;\n        if (n\
    \ == 33L)\n            return 27;\n        if (n == 34L)\n            return 28;\n\
    \        if (n == 35L)\n            return 29;\n        if (n == 36L)\n      \
    \      return 30;\n        if (n == 37L)\n            return 31;\n        if (n\
    \ == 38L)\n            return 32;\n        if (n == 39L)\n            return 33;\n\
    \        if (n == 40L)\n            return 34;\n        if (n == 41L)\n      \
    \      return 35;\n        if (n == 42L)\n            return 36;\n        if (n\
    \ == 43L)\n            return 37;\n        if (n == 44L)\n            return 38;\n\
    \        if (n == 45L)\n            return 39;\n        if (n == 46L)\n      \
    \      return 40;\n        if (n == 47L)\n            return 41;\n        if (n\
    \ == 48L)\n            return 42;\n        if (n == 49L)\n            return 43;\n\
    \        if (n == 10L)\n            return 44;\n        if (n == 11L)\n      \
    \      return 45;\n        if (n == 12L)\n            return 46;\n        if (n\
    \ == 13L)\n            return 47;\n        if (n == 14L)\n            return 48;\n\
    \        if (n == 15L)\n            return 49;\n        if (n == 16L)\n      \
    \      return 50;\n        if (n == 17L)\n            return 51;\n        if (n\
    \ == 18L)\n            return 52;\n        if (n == 19L)\n            return 53;",
  "        long result = 1;\n        long current = 1;\n        for (int i = 4; i\
    \ <= n; i++) {\n            current = current + current;\n            result *=\
    \ current;\n        }\n        return result;", "        long[] a = { 0, 0 };\n\
    \        long sum = 0;\n        Console.WriteLine(\"n = {0}\", n);\n        if\
    \ (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n\
    \        if (n == 2)\n            return 2;\n        if (n == 3)\n           \
    \ return 0;\n        if (n == 4)\n            return 1;\n        a[0] = 1;\n \
    \       a[1] = 1;\n        double d = 0;\n        for (int i = 2; i < n; i++)\
    \ {\n            d = (a[i - 1] + a[i]) + d;\n            a[i] = d;\n        }\n\
    \        sum = a[n - 1];\n        return sum;", "        // Base case:\n     \
    \   if (n < 4)\n            return 0;\n\n        // Recursive case:\n        long\
    \ res = Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n\n        // Make\
    \ sure fib4 is never negative:\n        if (res < 0)\n            res = -1;\n\n\
    \        return res;", "        long previous = 0, current = 1;\n        long\
    \ next = 0;\n        for (int i = 0; i < n; i++) {\n            next = previous\
    \ + current;\n            previous = current;\n            current = next;\n \
    \       }\n        return previous;", '        return n;', "        long fibSum\
    \ = 0;\n        if (n <= 2) {\n            fibSum = n;\n        }\n        else\
    \ if (n == 3) {\n            fibSum = 3;\n        }\n        else {\n        \
    \    for (int i = 0; i <= n; i++) {\n                fibSum = fibSum + i;\n  \
    \          }\n        }\n        return fibSum;", "        long fib4Value = 0;\n\
    \        fib4Value = 0;\n        fib4Value = 2;\n        if (n == 3) {\n     \
    \       fib4Value = 0;\n        }\n        else {\n            if (n < 2) {\n\
    \                return fib4Value;\n            }\n            else if (n < 4)\
    \ {\n                fib4Value = 0;\n            }\n            else {\n     \
    \           fib4Value = 1;\n                fib4Value += Fib4(n-1);\n        \
    \        fib4Value += Fib4(n-2);\n                fib4Value += Fib4(n-3);\n  \
    \          }\n        }\n        return fib4Value;", "        long fib4n = 0;\n\
    \        for (int i = 0; i <= 4; i++) {\n            fib4n += i;\n           \
    \ if (fib4n >= n) break;\n        }\n        return fib4n;", "        long sum\
    \ = 0;\n        for (long x = 4L; x <= n; x++) {\n            sum = (sum * x +\
    \ x) % 4294967296L;\n        }\n        return sum;", "        long sum = 0;\n\
    \        if (n <= 2) {\n            sum = n;\n        }\n        else if (n <=\
    \ 4) {\n            sum = sum + Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n\
    \ - 4);\n        }\n        else if (n <= 8) {\n            sum = sum + Fib4(n\
    \ - 3) + Fib4(n - 4) + Fib4(n - 5) + Fib4(n - 6);\n        }\n        else if\
    \ (n <= 16) {\n            sum = sum + Fib4(n - 5) + Fib4(n - 6) + Fib4(n - 7)\
    \ + Fib4(n - 8);\n        }\n        else if (n <= 32) {\n            sum = sum\
    \ + Fib4(n - 7) + Fib4(n - 8) + Fib4(n - 9) + Fib4(n - 10);\n        }\n     \
    \   else if (n <= 64) {\n            sum = sum + Fib4(n - 9) + Fib4(n - 10) +\
    \ Fib4(n - 11) + Fib4(n - 12);\n        }\n        else if (n <= 128) {\n    \
    \        sum = sum + Fib4(n - 11) + Fib4(n - 12) + Fib4(n - 13) + Fib4(n - 14);\n\
    \        }\n        else if (n <= 256) {\n            sum = sum + Fib4(n - 13)\
    \ + Fib4(n - 14) + Fib4(n - 15) + Fib4(n - 16);\n        }\n        else if (n\
    \ <= 512) {\n            sum = sum + Fib4(n - 15) + Fib4(n - 16) + Fib4(n - 17)\
    \ + Fib4(n - 18);\n        }\n        else if (n <= 1024) {\n            sum =\
    \ sum + Fib4(n - 17) + Fib4(n - 18) + Fib4(n - 19) + Fib4(n - 20);\n        }\n\
    \        else if (n <= 2048) {\n            sum = sum + Fib4(n - 19) + Fib4(n\
    \ - 20) + Fib4(n - 21);\n        }\n        else if (n <= 4096) {\n          \
    \  sum = sum + Fib4(n - 21);\n        }\n        else if (n <= 8192) {\n     \
    \       sum = sum + Fib4(n - 22);\n        }\n        else if (n <= 16384) {\n\
    \            sum = sum + Fib4(n - 23);\n        }\n        else if (n <= 32768)\
    \ {\n            sum = sum + Fib4(n - 24);\n        }\n        else if (n <= 65536)\
    \ {\n            sum = sum + Fib4(n - 25);\n        }\n        else if (n <= 131072)\
    \ {\n            sum = sum + Fib4(n - 26);\n        }\n        else if (n <= 262144)\
    \ {\n            sum = sum + Fib4(n - 27);\n        }\n        else if (n <= 524288",
  "        long result = 1;\n        long i;\n        if (n == 0) return result;\n\
    \        for (i = 2; i <= n; i++) {\n            result += i;\n        }\n   \
    \     return result;", "        if (n == 0 || n == 1)\n            return 0;\n\
    \        long a = Fib4(n - 1);\n        long b = Fib4(n - 2);\n        long c\
    \ = Fib4(n - 3);\n        long d = Fib4(n - 4);\n        return (a + (b + c +\
    \ d));", "        long fib4 = -1;\n        if (n <= 0) return fib4;\n        switch\
    \ (n % 4) {\n            case 0: fib4 = 0;\n            case 1: fib4 = 1;\n  \
    \          case 2: fib4 = 2;\n            case 3: fib4 = 0;\n            default:\
    \ fib4 = Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n        }\n \
    \       return fib4;", "        var a = new long[1000];\n        a[0] = 0;\n \
    \       a[1] = 1;\n        a[2] = 2;\n        a[3] = 3;\n        a[4] = 5;\n \
    \       a[5] = 8;\n        a[6] = 13;\n        a[7] = 21;\n        a[8] = 55;\n\
    \        a[9] = 89;\n        a[10] = 144;\n        a[11] = 233;\n        a[12]\
    \ = 377\n        [13] = 899\n        [14] = 1597\n        [15] = 2584\n      \
    \  [16] = 4181\n        [17] = 6765\n        [18] = 10946\n        [19] = 17711\n\
    \        [20] = 28657\n        [21] = 46368\n        [22] = 75025\n        [23]\
    \ = 121393\n        [24] = 196418\n        [25] = 317811\n        [26] = 514229\n\
    \        [27] = 832040\n        [28] = 1346269\n        [29] = 2178309\n     \
    \   [30] = 4053218\n        [31] = 6557421\n        [32] = 10753761\n        [33]\
    \ = 15945949\n        [34] = 25165813\n        [35] = 40516189\n        [36] =\
    \ 6557421\n        [37] = 10753761\n        [38] = 15945949\n        [39] = 25165813\n\
    \        [40] = 40516189\n        [41] = 6557421\n        [42] = 10753761\n  \
    \      [43] = 15945949\n        [44] = 25165813\n        [45] = 40516189\n   \
    \     [46] = 6557421\n        [47] = 10753761\n        [48] = 15945949\n     \
    \   [49] = 25165813\n        [50] = 40516189\n        [51] = 6557421\n       \
    \ [52] = 10753761\n        [53] = 15945949\n        [54] = 25165813\n        [55]\
    \ = 40516189\n        [56] = 6557421\n        [57] = 10753761\n        [58] =\
    \ 15945949\n        [59] = 25165813\n        [60] = 40516189\n        [61] = 6557421\n\
    \        [62] = 10753761\n        [63] = 15945949\n        [64] = 25165813\n \
    \       [65] = 40516189\n        [66] = 6557421\n        [67] = 10753761\n   \
    \     [68] = 15945949\n        [69] = 25165813\n        [70] = 40516189\n    \
    \    [71] = 6557421\n", "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"\
    n\", n, \"n cannot be negative.\");\n        if (n == 0)\n            return 0;\n\
    \        if (n == 1)\n            return 1;\n        if (n == 2)\n           \
    \ return 2;\n        long fib = 0;\n        long fib1 = Fib4(n - 1);\n       \
    \ long fib2 = Fib4(n - 2);\n        long fib3 = Fib4(n - 3);\n        long fib4\
    \ = Fib4(n - 4);\n        fib += fib1 * fib2 * fib3 * fib4;\n        return fib;",
  "        long result = 1;\n        long fib4 = 1;\n        while (fib4 < n) {\n\
    \            result = result + fib4;\n            fib4++;\n        }\n       \
    \ return result;", "        long[] fibArray = new long[4];\n        fibArray[0]\
    \ = 0;\n        fibArray[1] = 0;\n        fibArray[2] = 2;\n        fibArray[3]\
    \ = 0;\n\n        long temp = fibArray[0];\n        for (long i = 0; i < 4; i++)\
    \ {\n            temp = fibArray[i] + temp;\n            fibArray[i] = temp;\n\
    \        }\n        return fibArray[n];", "        if (n == 0)\n            return\
    \ 0;\n        if (n == 1)\n            return 1;\n        if (n == 2)\n      \
    \      return 2;\n        long a1 = Fib4(n - 1);\n        long a2 = Fib4(n - 2);\n\
    \        long a3 = Fib4(n - 3);\n        long a4 = Fib4(n - 4);\n        long\
    \ ans = a1 + a2 + a3 + a4;\n        return ans;", "        long a = 0;\n     \
    \   long b = 0;\n        long c = 0;\n        long d = 0;\n        long e = 0;\n\
    \        if (n == 0)\n            return 0;\n        if (n == 1)\n           \
    \ return 0;\n        if (n == 2)\n            return 2;\n        if (n == 3)\n\
    \            return 0;\n        if (n == 4)\n            return 4;\n        if\
    \ (n == 5)\n            return 8;\n\n        a = Fib4(n-1);\n        b = Fib4(n-2);\n\
    \        c = Fib4(n-3);\n        d = Fib4(n-4);\n        e = a + b + c + d;\n\
    \        return e;", "        // YOUR CODE HERE\n        long sum = 0;\n     \
    \   while (n > 0)\n        {\n            sum = sum + n;\n            n--;\n \
    \       }\n        return sum;", "        long fibbonacci;\n        long fib =\
    \ 0;\n        if (n <= 0)\n            fibbonacci = 0;\n        else if (n ==\
    \ 1)\n            fibbonacci = 1;\n        else if (n == 2)\n            fibbonacci\
    \ = 2;\n        else if (n <= 3)\n            fibbonacci = 3;\n        else if\
    \ (n % 4 == 0)\n            fibbonacci = 4;\n        else\n            fibbonacci\
    \ = Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);\n        fib += fibbonacci;\n\
    \        return fib;", "        var result = 1;\n        var fibbonacci = new\
    \ int[n];\n        var fibbonacciSequence = new int[n + 1];\n        fibbonacciSequence[0]\
    \ = 0;\n        fibbonacciSequence[1] = 1;\n        fibbonacciSequence[2] = 2;\n\
    \        fibbonacciSequence[3] = 4;\n        fibbonacciSequence[n] = fibbonacciSequence[n-1]\
    \ + fibbonacciSequence[n-2] + fibbonacciSequence[n-3] + fibbonacciSequence[n-4];\n\
    \        for (int i = 0; i <= n; i++) {\n            fibbonacci[i] = fibbonacciSequence[i]\
    \ + fibbonacciSequence[i - 1];\n            result *= fibbonacci[i];\n       \
    \ }\n        return result;", "        long result = 0;\n        if (n >= 4) {\n\
    \            result = Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4);\n       \
    \ }\n        if (n < 4) {\n            if (n == 1) {\n                result =\
    \ n;\n            } else {\n                result = Fib4(n-1) + Fib4(n-2) + Fib4(n-3)\
    \ + Fib4(n-4) + n;\n            }\n        }\n        return result;", "     \
    \   long x = 0;\n        long last;\n        if (n == 0) return 0;\n        if\
    \ (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return\
    \ 0;\n        while (n != 0) {\n            last = x;\n            x = x + last;\n\
    \            n--;\n        }\n        return last;", "        var fib = new Dictionary<long,\
    \ long>();\n        fib.Add(0, 0);\n        fib.Add(1, 0);\n        fib.Add(2,\
    \ 0);\n        fib.Add(3, 0);\n        fib[2] = fib[1] + fib[2];\n        fib[3]\
    \ = fib[1] + fib[2] + fib[3];\n        for (int i = 3; i <= n; i++) {\n      \
    \      fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n\
    \        return fib[n];", "        // Base case\n        if (n < 4) return n;\n\
    \        return Fib4(n - 1) + Fib4(n - 2) + Fib4(n - 3) + Fib4(n - 4);", "   \
    \     long a = 1;\n        long b = 1;\n        long c = 1;\n        long d =\
    \ 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n        long\
    \ h = 1;\n        if (n == 0)\n            return 0;\n        if (n <= 4)\n  \
    \          return 1;\n        if (n <= 9)\n            return 1;\n        if (n\
    \ <= 19)\n            return 1;\n        if (n <= 39)\n            return 1;\n\
    \        if (n <= 59)\n            return 1;\n        if (n <= 79)\n         \
    \   return 1;\n        if (n <= 99)\n            return 1;\n        if (n <= 149)\n\
    \            return 1;\n        if (n <= 199)\n            return 1;\n       \
    \ if (n <= 299)\n            return 1;\n        if (n <= 499)\n            return\
    \ 1;\n        if (n <= 599)\n            return 1;\n        if (n <= 799)\n  \
    \          return 1;\n        if (n <= 999)\n            return 1;\n        if\
    \ (n <= 1499)\n            return 1;\n        if (n <= 19999)\n            return\
    \ 1;\n        if (n <= 3999)\n            return 1;\n        if (n <= 5999)\n\
    \            return 1;\n        if (n <= 7999)\n            return 1;\n      \
    \  if (n <= 9999)\n            return 1;\n        if (n <= 14999)\n          \
    \  return 1;\n        if (n <= 199999)\n            return 1;\n        if (n <=\
    \ 39999)\n            return 1;\n        if (n <= 59999)\n            return 1;\n\
    \        if (n <= 79999)\n            return 1;\n        if (n <= 99999)\n   \
    \         return 1;\n        if (n <= 149999)\n            return 1;\n       \
    \ if (n <= 1999998)\n            return 1;\n        if (n <= 3999989)\n      \
    \      return 1;\n        if (n <= 5999989)\n            return 1;\n        if\
    \ (n <= 7999989)\n            return 1;\n        if (n <= 9999998)\n         \
    \   return 1;\n        if (n <= 14999999)\n            return 1;\n        if (n\
    \ <= 19999998)\n            return 1;\n        if (n <= 39999998)\n          \
    \  return 1;\n        if (n <= 59999998)\n            return 1;\n        if (n\
    \ <= 79999998)\n            return 1;\n        if (n <= 80000008)\n          \
    \  return 1;\n        if (n <= 12000000)\n            return 1;\n        if (n\
    \ <= 16000000)\n            return 1;\n        if (n <= 24000000)\n          \
    \  return 1;\n        if (n <= 32000000)\n            return 1;\n        if (n\
    \ <= 48000000)\n            return 1;\n        if (n <= 64000000)\n          \
    \  return 1;\n        if (n <= 96000000)\n            return 1;\n        if (n\
    \ <= 128000000)\n            return 1;\n        if (n <= 192000000)\n        \
    \    return 1;\n        if (n <= 320000000)\n            return 1;", "       \
    \ long[] fib4 = new long[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n\
    \        fib4[2] = 2;\n        fib4[3] = 0;\n        fib4[4] = 0;\n        for\
    \ (int i = 0; i < fib4.Length; i++) {\n            fib4[i + 1] = fib4[i] + fib4[i\
    \ + 1] + fib4[i + 2] + fib4[i + 3] + fib4[i + 4];\n        }\n        return fib4[n];"]
stop_tokens:
- "\n    }\n"
