language: cs
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        bool swap = false;\n        for (int i = 0; i < nums.Count; ++i)
    {\n            sum += nums[i];\n            if (swap) {\n                int tmp
    = nums[i];\n                nums[i] = sum - nums[i];\n                sum -= tmp;\n
    \           }\n            if (sum == 0) swap = true;\n        }\n        return
    nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk_7h73b1.cs(24,27): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        for (int i = 0; i < nums.Count; ++i) {\n            result.Add(0);\n
    \       }\n        long sum = 0;\n        for (int i = 0; i < nums.Count; ++i)
    {\n            sum += nums[i];\n            long tmp = nums[i];\n            while
    (tmp != 0) {\n                sum += tmp % 10;\n                tmp = tmp / 10;\n
    \           }\n            result[i] = sum;\n        }\n        List<long> sorted
    = result.OrderBy(x => x).ToList();\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e67903ec2afe441bbe1507d888b981ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e67903ec2afe441bbe1507d888b981ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0)\n            return nums;\n        List<long> res = nums;\n        using
    (MD5 md5 = MD5.Create())\n        {\n            foreach (long num in nums)\n
    \           {\n                byte[] buffer = md5.ComputeHash(BitConverter.GetBytes(num));\n
    \               long d = BitConverter.ToInt64(buffer, 0);\n                int
    i = 1;\n                while (d != 0)\n                {\n                    d
    /= 10;\n                    i++;\n                }\n                res.Insert(i,
    num);\n            }\n        }\n        Console.WriteLine(\"{0}, {1}\", res.Count,
    res);\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index must
    be within the bounds of the List.\nParameter name: index\n  at System.Collections.Generic.List`1[T].Insert
    (System.Int32 index, T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x0006d]
    in <f715d106558049eaaee4b99c76ffbb4e>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <f715d106558049eaaee4b99c76ffbb4e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index must be within the bounds of the List.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].Insert (System.Int32 index,
    T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x0006d] in <f715d106558049eaaee4b99c76ffbb4e>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <f715d106558049eaaee4b99c76ffbb4e>:0
    \n"
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // base
    cases\n        if(nums.Count == 0)\n            return nums;\n        if(nums.Count
    == 1)\n            return nums;\n\n        // get first two items\n        var
    first = nums.First();\n        var second = nums.Skip(1).First();\n\n        var
    firstDigit = first.ToString().Sum(x => (int)x);\n        var secondDigit = second.ToString().Sum(x
    => (int)x);\n\n        if(firstDigit > secondDigit)\n            return nums.OrderByDescending(x
    => x);\n        return nums.OrderBy(x => x);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9xaor23s.cs(33,20): error CS0266: Cannot implicitly convert type ''System.Linq.IOrderedEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    /tmp/tmp9xaor23s.cs(34,16): error CS0266: Cannot implicitly convert type ''System.Linq.IOrderedEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1659976367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null) return nums;\n        var result = new List<long>();\n        long sum
    = 0;\n        foreach (var item in nums) {\n            sum += item;\n            if
    (sum > 0) {\n                result.Add(item);\n            }\n        }\n        var
    hashSet = new HashSet<long>(nums);\n        foreach (var item in nums) {\n            if
    (!hashSet.Contains(item)) {\n                hashSet.Add(item);\n                result.Insert(nums.IndexOf(item),
    item);\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a479b87af3d48f891909ec9b691a703>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a479b87af3d48f891909ec9b691a703>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count < 1) return new List<long>();\n        var result = new
    List<long>();\n        var sums = new HashSet<long>();\n        var sortedIndexes
    = Enumerable.Range(0, nums.Count).OrderBy(i => nums[i]).ToArray();\n        foreach
    (var index in sortedIndexes) {\n            var sum = 0;\n            var current
    = nums[index];\n            for (var i = index + 1; i < nums.Count; i++) {\n                var
    nextDigit = nums[i];\n                sum += nextDigit % 10; // if nextDigit is
    greater than 10, then nextDigit - current\n                current = nextDigit;\n
    \           }\n            if (sums.Contains(sum)) continue;\n            sums.Add(sum);\n
    \           result.Add(nums[index]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7yd9qd25.cs(28,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    results = new List<long>();\n        // Write your code here\n        long sum
    = 0;\n        long maxSum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n
    \           sum += nums[i];\n            if (sum > maxSum) {\n                maxSum
    = sum;\n            }\n        }\n        long max = 0;\n        for (int i =
    0; i < nums.Count; i++) {\n            if (nums[i] + nums[nums.Count - i - 1]
    > maxSum) {\n                max = nums[i] + nums[nums.Count - i - 1];\n            }\n
    \       }\n        long maxSum = maxSum;\n        long max = max;\n        for
    (int i = 0; i < nums.Count; i++) {\n            long temp = nums[i];\n            int
    count = 0;\n            while (temp != 0) {\n                sum += nums[count];\n
    \               if (sum > maxSum) {\n                    maxSum = sum;\n                    max
    = temp;\n                }\n                count++;\n                temp--;\n
    \           }\n        }\n        for (int i = 0; i < nums.Count; i++) {\n            if
    (nums[i] > max) {\n                nums[i] = max;\n            }\n        }\n
    \       results.AddRange(nums.Take(nums.Count - 1));\n        return results;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwkqki9ye.cs(35,14): error CS0128: A local variable or function named ''maxSum''
    is already defined in this scope

    /tmp/tmpwkqki9ye.cs(36,14): error CS0128: A local variable or function named ''max''
    is already defined in this scope

    '
  timestamp: 1659976367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        //\n        //
    \  Step 1: Sort the numbers in ascending order\n        //\n        nums.Sort();\n
    \       //\n        //   Step 2: Find the sum of each digit\n        //\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++)\n            sum += nums[i];\n
    \       //\n        //   Step 3: If each digit has the same sum of digits,\n        //
    \  then order them in ascending order according to their original position\n        //\n
    \       if (nums.Count == 0)\n            return nums;\n        if (sum != 0)\n
    \       {\n            List<long> result = new List<long>();\n            long
    maxSum = nums[0];\n            for (int i = 0; i < nums.Count; i++)\n            {\n
    \               long current = nums[i];\n                if (maxSum == 0)\n                {\n
    \                   maxSum = current;\n                    result.Add(current);\n
    \               }\n                else\n                {\n                    if
    (current == maxSum)\n                    {\n                        result.Insert(i,
    current);\n                        maxSum -= current;\n                    }\n
    \                   else\n                    {\n                        result.Add(current);\n
    \                       maxSum -= current;\n                    }\n                }\n
    \           }\n            return result;\n        }\n        else\n        {\n
    \           return nums;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef36777572fe4940b37f7b654d86c48a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef36777572fe4940b37f7b654d86c48a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    numList = new List<long>();\n        foreach (long num in nums)\n        {\n            int
    sum = 0;\n            while (num != 0)\n            {\n                sum +=
    (num % 10); num /= 10;\n            }\n            numList.Add(sum);\n        }\n
    \       numList = numList.OrderBy(x => x).ToList();\n        return numList;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_m9bujj2.cs(25,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_m9bujj2.cs(25,36): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var maxSum
    = 0;\n        for (int i = 0; i < nums.Count; i++)\n        {\n            var
    sumOfDigits = nums.Sum(n=> Math.Pow(10, n.ToString().Length));\n            if
    (maxSum < sumOfDigits)\n            {\n                maxSum = sumOfDigits;\n
    \           }\n            else\n            {\n                var index = i;\n
    \               while (maxSum == sumOfDigits && index < nums.Count)\n                {\n
    \                   var currentSum = nums[index].ToString().Sum(n => Math.Pow(10,
    n.ToString().Length));\n                    maxSum = currentSum;\n                    index++;\n
    \               }\n                if (maxSum < sumOfDigits)\n                {\n
    \                   maxSum = sumOfDigits;\n                }\n            }\n
    \           nums.Insert(i, maxSum - nums.Sum());\n            nums.RemoveAt(i);\n
    \       }\n        return nums;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1tnvio9n.cs(25,26): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1tnvio9n.cs(33,30): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1tnvio9n.cs(38,30): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int digitSum
    = 0;\n        int startIndex = 0;\n        List<long> result = new List<long>();\n\n
    \       for (int i = 0; i < nums.Count; i++) {\n            digitSum = nums.Sum(n
    => n % 10);\n            if (digitSum == 0) {\n                result.Add(nums[startIndex++]);\n
    \           } else {\n                int index = nums.BinarySearch(digitSum);\n
    \               if (index < 0) {\n                    index = -index - 2;\n                }\n
    \               result.Add(nums[index]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptybxbmzm.cs(24,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        Dictionary<long, int> sorted = new Dictionary<long, int>();\n        int
    numIndex = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum
    += nums[i];\n            sorted[sum] = i;\n        }\n        List<long> result
    = new List<long>();\n        foreach (long key in sorted.Keys) {\n            result.Add(nums[sorted[key]]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd9ff36a4b44449384bdd1c1e8c779a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd9ff36a4b44449384bdd1c1e8c779a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here.\n        List<long> ordered = new List<long>(nums);\n        ordered.Sort((x,
    y) =>\n        {\n            int xDigits = GetDigits(x);\n            int yDigits
    = GetDigits(y);\n            return xDigits - yDigits;\n        });\n\n        return
    ordered;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx3l9xlkq.cs(23,27): error CS0103: The name ''GetDigits'' does not exist
    in the current context

    /tmp/tmpx3l9xlkq.cs(24,27): error CS0103: The name ''GetDigits'' does not exist
    in the current context

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        //nums.Sort();\n
    \       long sum = 0;\n        long orderSum = 0;\n        bool hasChanged = false;\n
    \       for (int i = 0; i < nums.Count; i++) {\n            sum = nums.Sum(n =>
    n.ToString().ToLong());\n            orderSum = nums.Where(n => n.ToString().ToLong()
    == sum).Sum(n => n.ToString().ToLong());\n            if (orderSum != sum) {\n
    \               hasChanged = true;\n            }\n            nums[i] = nums[i];\n
    \       }\n        return hasChanged ? nums : nums.OrderBy(n => n).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4wukb99b.cs(24,46): error CS1061: ''string'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp4wukb99b.cs(25,53): error CS1061: ''string'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int sum
    = 0;\n        List<long> lst = new List<long>(nums);\n        if (lst.Count ==
    0) {\n            return nums;\n        }\n        foreach (long n in lst) {\n
    \           sum = sum + n;\n        }\n        int k = 0;\n        int n = lst.Count;\n
    \       List<long> tmp = new List<long>();\n        for (int i = 1; i < n; i++)
    {\n            while (k > 0 && lst.ElementAt(k) < 0) {\n                k--;\n
    \           }\n            if (lst.ElementAt(k) > 0) {\n                tmp.Add(lst.ElementAt(k));\n
    \               k--;\n            }\n            else {\n                tmp.Add(0);\n
    \           }\n        }\n        k++;\n        while (k <= n && lst.ElementAt(k)
    <= 0) {\n            k++;\n        }\n        tmp.AddRange(lst.Take(k));\n        return
    tmp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl3kka9ob.cs(24,23): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpl3kka9ob.cs(25,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 2) return nums;\n        long[] digits = nums.Select(d => d.ToLong()).ToArray();\n
    \       long[] sums = digits.Select(d => d * d).ToArray();\n        Array.Sort(sums);\n
    \       for (int i = 1; i < sums.Length; i++) sums[i] += sums[i - 1];\n        return
    nums.Where(d => sums.Contains(d.ToLong())).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp85lrlesw.cs(20,44): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp85lrlesw.cs(24,48): error CS1061: ''long'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (var num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n\n
    \       long tmp = sum;\n        long tmp2 = 0;\n        int index = 0;\n        List<long>
    tmpList = new List<long>();\n        foreach (var num in nums) {\n            tmp2
    = tmp * 10;\n            tmpList = new List<long>();\n            int remain =
    tmp % 10;\n            while (index != nums.Count) {\n                if (remain
    == (index * 10 + nums[index])) {\n                    tmp2 += num;\n                    tmpList.Add(num);\n
    \                   break;\n                }\n                tmp2 += num;\n
    \               tmpList.Add(num);\n                index++;\n            }\n            tmp
    = tmp2;\n            index = tmpList.Count;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp66b9cw59.cs(33,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = nums.ToList();\n\n        if (nums.Count == 0)\n            return result;\n\n
    \       long maxSum = 0;\n        int maxIndex = 0;\n\n        for (int i = 0;
    i < nums.Count; i++) {\n            long sum = nums.ElementAt(i);\n            if
    (sum > maxSum) {\n                maxSum = sum;\n                maxIndex = i;\n
    \           }\n        }\n\n        long[] arr = nums.ToArray();\n        Array.Sort(arr,
    (i, j) => \n            OrderByPointsPartial(i, j).Sum() - OrderByPointsPartial(i,
    j).Sum());\n\n        result = nums.ToList();\n        for (int i = 0; i < maxIndex;
    i++)\n            result.Add(arr[i]);\n\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfokewbwq.cs(37,13): error CS0103: The name ''OrderByPointsPartial'' does
    not exist in the current context

    /tmp/tmpfokewbwq.cs(37,48): error CS0103: The name ''OrderByPointsPartial'' does
    not exist in the current context

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sortedNums
    = new List<long>();\n        var sum = 0;\n        var list = new List<long>(nums);\n
    \       for (int i = 0; i < list.Count; i++) {\n            sum = 0;\n            foreach
    (var item in nums) {\n                var temp = item % 10;\n                sum
    += temp * temp;\n                item /= 10;\n            }\n            if (sum
    > 0) {\n                sortedNums.Add(list[i]);\n            }\n        }\n        if
    (sortedNums.Count == 0) {\n            sortedNums.Add(0);\n        }\n        return
    sortedNums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo6j2m2su.cs(26,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpo6j2m2su.cs(27,17): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here\n        var dic = nums.GroupBy(x => x).ToDictionary(x => x.Key,
    x => x.Sum(y => Convert.ToInt64(y)));\n        var result = new List<long>();\n
    \       foreach (var item in dic)\n        {\n            if (item.Value > 0)
    result.Add(item.Key);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa0d311720847a6a20f4f3167e770ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <caa0d311720847a6a20f4f3167e770ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \       }\n        nums.Sort((x, y) => sum - x);\n        return nums;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kuc20u_.cs(23,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5kuc20u_.cs(23,29): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        SortedDictionary<long,
    long> result = new SortedDictionary<long, long>();\n        foreach(var x in nums)
    {\n            int sum = 0;\n            int remain = 0;\n            while(x
    > 0) {\n                sum = 10*sum + x%10;\n                remain = x / 10;\n
    \               x = remain;\n            }\n            if (result.ContainsKey(sum))
    {\n                result[sum] = result[sum] + 1;\n            } else {\n                result.Add(sum,
    1);\n            }\n        }\n        return new List<long>(result.Select(x =>
    x.Key));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92pm0e6u.cs(24,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp92pm0e6u.cs(25,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp92pm0e6u.cs(26,17): error CS1656: Cannot assign to ''x'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 2) return nums;\n\n        var list = nums.ToList();\n        long sum = 0;\n
    \       long maxsum = 0;\n        long largest = list[0];\n        foreach (long
    i in list) {\n            sum += i;\n            if (sum > maxsum) {\n                maxsum
    = sum;\n                largest = i;\n            }\n        }\n        list.Remove(largest);\n
    \       list.RemoveAll(l => l < largest);\n\n        var ans = new List<long>();\n
    \       foreach (long i in list) {\n            ans.Add(largest * 10 + i);\n        }\n
    \       return ans.Reverse().ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp04piyu12.cs(39,29): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659976367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // write
    your code here\n        Dictionary<long, int> dic = new Dictionary<long, int>();\n
    \       long sum = 0;\n        foreach (long n in nums) {\n            dic.Add(n,
    0);\n            sum += n;\n        }\n        foreach (KeyValuePair<long, int>
    kvp in dic)\n        {\n            int index = Array.IndexOf(nums, kvp.Key);\n
    \           nums[index] = kvp.Key;\n        }\n        int max = 0;\n        foreach
    (long n in nums)\n        {\n            if (n > max)\n            {\n                max
    = n;\n            }\n        }\n        List<long> results = new List<long>();\n
    \       foreach (long n in nums)\n        {\n            if (n >= max)\n            {\n
    \               results.Add(n);\n            }\n        }\n        return results;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp89i37ckx.cs(28,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp89i37ckx.cs(36,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Your
    code here\n        int totalSum = 0;\n        int digitSum = 0;\n        List<long>
    result = new List<long>();\n        for (int i = 0; i < nums.Count(); i++) {\n
    \           int digit = 0;\n            long num = nums[i];\n            while
    (num > 0) {\n                digit = num % 10;\n                totalSum += digit;\n
    \               num = (int)num / 10;\n            }\n            int curSum =
    totalSum;\n            while (curSum > 0) {\n                digitSum = 0;\n                int
    count = 0;\n                for (int j = totalSum - 1; j >= 0; j--) {\n                    digitSum
    += j % 10;\n                    count++;\n                }\n                for
    (int j = 0; j < count; j++) {\n                    if (digitSum < curSum) {\n
    \                       result.Add(nums[i]);\n                        break;\n
    \                   }\n                }\n                totalSum -= digitSum;\n
    \               digitSum = 0;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0d65p5pa.cs(27,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // write
    your code here\n        return nums.ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd7f1df5cb8c4dfcb08c221a7e81f26c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd7f1df5cb8c4dfcb08c221a7e81f26c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var ordered
    = nums.ToList();\n        ordered.Sort((x, y) => SumDigits(x) - SumDigits(y));\n
    \       return ordered;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkkaog580.cs(20,32): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpkkaog580.cs(20,47): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>(nums.Count);\n        long max = nums[0];\n        long
    min = nums[0];\n        int index = 0;\n        for (long n : nums) {\n            max
    = n > max ? n : max;\n            min = n < min ? n : min;\n            while
    (true) {\n                long mid = (min + max) / 2;\n                if (mid
    * mid == mid) {\n                    break;\n                }\n                if
    (mid * 10 + mid > max)\n                    max = mid;\n                else if
    (mid * 10 + mid < min)\n                    min = mid;\n                else\n
    \                   max = mid * 10 + mid;\n            }\n            while (true)
    {\n                result.Add(nums[index]);\n                index++;\n                if
    (index == nums.Count) {\n                    break;\n                }\n                long
    mid = (nums[index - 1] + nums[index]) / 2;\n                if (mid * mid == mid)\n
    \                   break;\n                if (mid * 10 + mid > nums[index])\n
    \                   max = mid;\n                else if (mid * 10 + mid < nums[index
    - 1])\n                    min = mid;\n                else\n                    max
    = mid * 10 + mid;\n            }\n        }\n        if (max != min)\n            result.Add(max);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwq24jqds.cs(23,21): error CS1002: ; expected

    /tmp/tmpwq24jqds.cs(23,21): error CS1525: Invalid expression term '':''

    /tmp/tmpwq24jqds.cs(23,21): error CS1001: Identifier expected

    '
  timestamp: 1659976368
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    sortedNums = new List<long>();\n        List<long> duplicates = new List<long>();\n
    \       sortedNums.AddRange(nums);\n        for (int i = 0; i < nums.Count; i++)\n
    \       {\n            long sum = 0;\n            foreach (long num in nums)\n
    \           {\n                if (nums.IndexOf(num) == i) sum += num;\n            }\n
    \           sortedNums.RemoveAll(x => x == sum);\n            duplicates.AddRange(nums);\n
    \       }\n        sortedNums.AddRange(duplicates);\n        return sortedNums;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6dcb5ea7786a401b82337576d89bdc05>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6dcb5ea7786a401b82337576d89bdc05>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    res = new List<long>();\n        foreach (long num in nums) {\n            int
    sum = 0;\n            while (num != 0) {\n                sum += (num % 10);\n
    \               num /= 10;\n            }\n            if (sum > 0) {\n                res.Add(num);\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy8y1clvm.cs(23,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpy8y1clvm.cs(24,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0)\n            return nums;\n\n        var sums = nums.Select(n => new { Num
    = n, Sum = n % 10 + n / 10 }).ToList();\n        sums.Sort((x, y) => y.Sum.CompareTo(x.Sum));\n\n
    \       var result = nums.ToList();\n        for (int i = 0; i < sums.Count; i++)\n
    \       {\n            var item = sums[i];\n            var index = result.FindIndex(n
    => n.Num == item.Num);\n            if (index != -1)\n                result[index]
    = item;\n            else\n                result.Add(item);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkmqcuiaq.cs(29,49): error CS1061: ''long'' does not contain a definition
    for ''Num'' and no accessible extension method ''Num'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpkmqcuiaq.cs(31,33): error CS0029: Cannot implicitly convert type ''<anonymous
    type: long Num, long Sum>'' to ''long''

    /tmp/tmpkmqcuiaq.cs(33,28): error CS1503: Argument 1: cannot convert from ''<anonymous
    type: long Num, long Sum>'' to ''long''

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sortedList
    = new List<long>();\n        sortedList.Add(nums.First());\n        long sum =
    0;\n        var lastSum = 0;\n        foreach (var item in nums) {\n            sum
    += item;\n            if (sum != lastSum) {\n                sortedList.Add(lastSum);\n
    \               sum = 0;\n            }\n            lastSum = sum;\n            sortedList.Add(item);\n
    \       }\n        if (sum != lastSum) {\n            sortedList.Add(lastSum);\n
    \       }\n        return sortedList;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk4sqvtv1.cs(29,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var numsCopy
    = new List<long>(nums);\n        var digitSum = nums.Select(n => Math.Abs(n %
    10)).Sum();\n        var numsSortedBySum = numsCopy.OrderByDescending(n => Math.Abs(n
    % 10)).ToList();\n        var res = new List<long>();\n        for (int i = 0;
    i < digitSum; ++i) {\n            var index = numsSortedBySum.FindIndex(n => Math.Abs(n
    % 10) == i);\n            res.Add(numsSortedBySum[index]);\n            numsSortedBySum.RemoveAt(index);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x0008b] in <5d5525505b264f918569907c03b3b044>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <5d5525505b264f918569907c03b3b044>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x0008b] in <5d5525505b264f918569907c03b3b044>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <5d5525505b264f918569907c03b3b044>:0
    \n"
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        //Your
    code goes here\n        List<long> numList = new List<long>();\n        foreach
    (long x in nums) {\n            numList.Add(x);\n        }\n        foreach (long
    x in numList) {\n            int sum = 0;\n            while (x > 0) {\n                sum
    = sum + x % 10;\n                x = x / 10;\n            }\n            if (numList.IndexOf(x)
    == nums.IndexOf(x)) {\n                nums.Remove(x);\n                numList.Remove(x);\n
    \           }\n        }\n        return numList;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5t42l9u.cs(27,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpn5t42l9u.cs(28,17): error CS1656: Cannot assign to ''x'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long Sum
    = nums.Sum(x => x); //sum of all numbers in list\n        long SumOfDigits = nums.Sum(x
    => Math.Floor(x / 10m) + 1); // sum of digits of each number in list\n\n        int
    Index = 0;\n        int StartIndex = -1; // Index of first number with given sum
    of digits\n        while (Index < nums.Count && SumOfDigits == Sum) {\n            if
    (SumOfDigits < Sum) Index = nums.Count;\n            else {\n                long
    RightSum = Sum - SumOfDigits; // the sum of the digits less then given sum\n                long
    LeftSum = SumOfDigits - Sum; // the sum of the digits greater then given sum\n
    \               int LeftIndex = nums.IndexOf(SumOfDigits, Index); //index of the
    first number with given sum of digits\n                StartIndex = LeftIndex;
    // set start index\n                Index++;\n                SumOfDigits -= RightSum;
    // sum new digit\n            }\n        }\n        return nums.GetRange(0, StartIndex).Concat(nums.GetRange(StartIndex
    + 1, nums.Count));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4loxxdkm.cs(20,28): error CS0266: Cannot implicitly convert type ''decimal''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4loxxdkm.cs(35,16): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int sum
    = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \       }\n        Array.Sort(nums.ToArray(), (x, y) => SumDigits(x) - SumDigits(y));\n
    \       return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplgs93orn.cs(21,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplgs93orn.cs(23,46): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmplgs93orn.cs(23,61): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976368
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int length
    = nums.Count;\n        int[] arr = new int[length];\n        Dictionary<long,
    long> dic = new Dictionary<long, long>();\n        for (int i = 0; i < length;
    i++) {\n            long value = nums[i];\n            arr[i] = (int)value;\n
    \           if (!dic.ContainsKey(arr[i])) {\n                dic.Add(arr[i], 0);\n
    \           }\n            dic[arr[i]] += value;\n        }\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (KeyValuePair<long,
    long> pair in dic) {\n            sum += pair.Value;\n            result.Add(pair.Key);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <273be416fe294c3dab50a0ce90c2c1cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <273be416fe294c3dab50a0ce90c2c1cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Array.Sort(nums);\n\n
    \       var result = new List<long>(nums);\n        bool flag = true;\n\n        foreach
    (var item in result) {\n            if (item < 0) {\n                flag = false;\n
    \               break;\n            }\n        }\n\n        if (flag) {\n            var
    tmp = result;\n            result = new List<long>(tmp.OrderBy(n => n).ToList());\n
    \           int index = -1;\n            foreach (var item in result) {\n                index++;\n
    \               if (item < 0) {\n                    break;\n                }\n
    \           }\n            while (index < result.Count) {\n                result.Insert(index--,
    0);\n            }\n        }\n\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkuv81t93.cs(19,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    <= 0) return new List<long>(nums);\n        var sum = 0;\n        var result =
    new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var
    cur = nums[i];\n            var remainder = cur % 10;\n            if (remain
    == 0)\n                sum += remainder;\n            else\n                sum
    += remain - 10;\n            result.Add(sum + cur);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpivbr7bcy.cs(25,17): error CS0103: The name ''remain'' does not exist in
    the current context

    /tmp/tmpivbr7bcy.cs(26,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpivbr7bcy.cs(28,24): error CS0103: The name ''remain'' does not exist in
    the current context

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sum
    = nums.Sum(d => (int)d);\n        var sorted = nums.OrderBy(d => d)\n            .GroupBy(d
    => (int)d)\n            .Select(g => g.OrderBy(d => d).Last())\n            .ToList();\n
    \       if (sorted.Count > 1) {\n            sorted.Sort((x, y) => ((int) x.SumOfAllDigits()
    - (int) y.SumOfAllDigits()));\n        }\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw10ipbj6.cs(25,44): error CS1061: ''long'' does not contain a definition
    for ''SumOfAllDigits'' and no accessible extension method ''SumOfAllDigits'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpw10ipbj6.cs(25,71): error CS1061: ''long'' does not contain a definition
    for ''SumOfAllDigits'' and no accessible extension method ''SumOfAllDigits'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    sorted = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            int
    sum = nums.Sum(i => i % 10); // find sum of digits\n            if (sorted.Any(o
    => sum == o)) {\n                int index = sorted.FindIndex(o => sum == o);\n
    \               sorted.Insert(index, nums[i]);\n            }\n            else
    {\n                sorted.Add(nums[i]);\n            }\n        }\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd4x2_y65.cs(21,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0)\n            return nums;\n        Dictionary<long, int> dict = nums.GroupBy(n
    => n.ToString()).ToDictionary(g => g.Key, g => g.Count());\n        var result
    = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var
    sum = 0;\n            var c = nums[i];\n            if (dict.TryGetValue(c, out
    int count)) {\n                sum += count;\n                for (int j = 0;
    j < count; j++) {\n                    sum += nums[j];\n                }\n            }\n
    \           dict.TryGetValue(sum, out int sumCount);\n            dict.TryGetValue(-sum,
    out int sumCount);\n            int j = 0;\n            while (!dict.TryGetValue(sum,
    out int sumCount)) {\n                sum -= nums[j];\n                j++;\n
    \           }\n            result.Add(sum);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzcf5pozo.cs(21,38): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.Dictionary<string,
    int>'' to ''System.Collections.Generic.Dictionary<long, int>''

    /tmp/tmpzcf5pozo.cs(28,26): error CS0136: A local or parameter named ''j'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpzcf5pozo.cs(29,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpzcf5pozo.cs(33,44): error CS0128: A local variable or function named ''sumCount''
    is already defined in this scope

    /tmp/tmpzcf5pozo.cs(35,51): error CS0136: A local or parameter named ''sumCount''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzcf5pozo.cs(36,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var index
    = 0;\n        var max = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            var
    digits = nums.Where(n => n < 0).OrderByDescending(n => n);\n            long sum
    = 0;\n            foreach (var digit in digits) {\n                sum += digit;\n
    \           }\n            if (index != i) {\n                index = i;\n                max
    = sum;\n            }\n        }\n        var results = new List<long>();\n        for
    (int i = 0; i < nums.Count; i++) {\n            var digits = nums.Where(n => n
    < 0).OrderByDescending(n => n);\n            var sum = 0;\n            foreach
    (var digit in digits) {\n                sum += digit;\n            }\n            if
    (sum == max) {\n                results.Add(nums[i]);\n            }\n        }\n
    \       return results;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5xjuprbp.cs(29,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5xjuprbp.cs(37,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var result
    = new List<long>(nums);\n        result.Sort(new Comparison<long>((x, y) => ToInt64DigitSum(x)
    - ToInt64DigitSum(y)));\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi7a5ea93.cs(20,52): error CS0103: The name ''ToInt64DigitSum'' does not
    exist in the current context

    /tmp/tmpi7a5ea93.cs(20,73): error CS0103: The name ''ToInt64DigitSum'' does not
    exist in the current context

    '
  timestamp: 1659976368
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \       }\n        var sorted = nums.OrderBy(n => Convert.ToInt64(Math.Round(n
    / Math.Pow(10, (int)Math.Log10(sum)))).ToString());\n        return sorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoi3ujyy5.cs(24,16): error CS0266: Cannot implicitly convert type ''System.Linq.IOrderedEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = nums.Sum();\n        List<long> ret = new List<long>();\n        int idx = nums.Count;\n
    \       while (idx > 0) {\n            int numDigits = nums.Skip(idx).TakeWhile(d
    => d < 0).Count();\n            long sumOfDigits = nums.Skip(idx).TakeWhile(d
    => d < 0).Sum();\n            if (sumOfDigits == sum) {\n                ret.Add(nums.Last());\n
    \               ret.AddRange(nums.Skip(idx).TakeWhile(d => d < 0));\n                break;\n
    \           }\n            if (sumOfDigits > sum) {\n                ret.Add(nums.Last());\n
    \               break;\n            }\n            ret.Add(nums.First());\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5d0970068a143478a7728ae35a84628>:0
    \n"
  stdout: None
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        double
    sum = 0;\n        long sum2 = 0;\n        List<long> nums2 = new List<long>();\n
    \       List<long> nums3 = new List<long>();\n\n        foreach (long num in nums)
    {\n            sum = sum + num;\n            if (sum >= 10) {\n                sum2
    = sum * 10;\n                sum2 -= sum % 10;\n                nums2.Add(sum2);\n
    \               sum = 0;\n            }\n        }\n        foreach (long num
    in nums2)\n            nums3.Add(num);\n        return nums3;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2g0xhd1h.cs(27,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp2g0xhd1h.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976368
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long[]
    sorted = nums.ToArray();\n        Array.Sort(sorted);\n        List<long> ret
    = new List<long>();\n        for (int i = 0; i < sorted.Length; i++)\n            ret.Add(sorted[i]);\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3330ed24cf734ee98f44b0ad2d166a10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3330ed24cf734ee98f44b0ad2d166a10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here\n        return nums.OrderByDescending(n1 => n1.ToString(CultureInfo.InvariantCulture)).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjg7hlqih.cs(20,57): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    '
  timestamp: 1659976369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < nums.Count; i++)
    {\n            sum += nums[i];\n            if (sum > 9)\n                sum
    -= 10;\n            else if (sum < 0)\n                sum += 10;\n            if
    (sum > 0)\n                maxIndex = i;\n        }\n        List<long> ans =
    new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if
    (nums[i] != 0)\n                ans.Add(nums[i]);\n        }\n        if (nums.Count
    > 0)\n            ans.Add(nums[maxIndex]);\n        return ans;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3879a33a28b4b7f8e75fe55c88b1656>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3879a33a28b4b7f8e75fe55c88b1656>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    res = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            long
    sum = nums[i];\n            while (sum != 0) {\n                int digit = sum
    % 10;\n                res.Add(digit);\n                sum = Math.DivRem(sum,
    10);\n            }\n        }\n        List<long> ordered = new List<long>();\n
    \       foreach (long val in nums)\n        {\n            int index = res.IndexOf(val);\n
    \           if (index > -1 && index != ordered.Count) ordered.Insert(index, val);\n
    \       }\n        return ordered;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i6wml6q.cs(23,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0i6wml6q.cs(25,28): error CS1501: No overload for method ''DivRem'' takes
    2 arguments

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count == 0) return nums;\n        long sum = 0;\n        long
    max = 0;\n        long largest = 0;\n        foreach (long num in nums) {\n            sum
    += num;\n            max = Math.Max(max, sum);\n            if (sum == max) {\n
    \               largest = num;\n            }\n        }\n        nums.Sort(new
    Comparison<long>((x, y) => sum - y.SumOfDigits() - x.SumOfDigits()));\n        if
    (largest == 0) return nums;\n        if (largest == max) return nums.OrderBy(x
    => x).ToList();\n        List<long> result = new List<long>();\n        long currentSum
    = largest;\n        result.Add(largest);\n        for (int i = 0; i < nums.Count;
    i++) {\n            currentSum -= nums[i];\n            if (currentSum == 0) break;\n
    \           currentSum = nums[i];\n            result.Add(nums[i]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn0mnhsdn.cs(30,58): error CS1061: ''long'' does not contain a definition
    for ''SumOfDigits'' and no accessible extension method ''SumOfDigits'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpn0mnhsdn.cs(30,76): error CS1061: ''long'' does not contain a definition
    for ''SumOfDigits'' and no accessible extension method ''SumOfDigits'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null)\n            return new List<long>();\n        Dictionary<long, int>
    sums = new Dictionary<long, int>();\n        Dictionary<long, int> rev = new Dictionary<long,
    int>();\n        // Add key value pairs\n        foreach (long num in nums)\n
    \           rev[num] = rev[num.ToString()] == null ? 0 : rev[num.ToString()] +
    1;\n        foreach (long key in rev.Keys)\n            sums[key] = rev[key];\n
    \       List<long> sorted = new List<long>();\n        // Add reversed key value
    pairs\n        foreach (long num in nums)\n            if (sums.ContainsKey(num))\n
    \               sorted.Add(sums[num]);\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2uuv6ytv.cs(25,28): error CS1503: Argument 1: cannot convert from ''string''
    to ''long''

    /tmp/tmp2uuv6ytv.cs(25,62): error CS1503: Argument 1: cannot convert from ''string''
    to ''long''

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        double
    sum = 0.0;\n        int pos = 0;\n        double current = 0.0;\n        int numsLen
    = nums.Count;\n        for (int i = 0; i < numsLen; i++) {\n            current
    = Math.Abs(nums[i]);\n            sum += current;\n            if (numsLen > 1)
    {\n                double lastCurrent = Math.Abs(nums[i - 1]);\n                if
    (Math.Abs(sum - lastCurrent) > 1)\n                    pos += 1;\n            }\n
    \       }\n        List<long> ret = new List<long>();\n        long lastSum =
    sum;\n        double lastCurrent = 0.0;\n        double lastPos = 0;\n        for
    (int i = 0; i < numsLen; i++) {\n            current = Math.Abs(nums[i]);\n            sum
    += current;\n            if (numsLen > 1) {\n                double nextCurrent
    = Math.Abs(nums[i + 1]);\n                if (Math.Abs(sum - lastSum) > 1)\n                    pos
    += 1;\n                if (Math.Abs(lastCurrent - current) > 1)\n                    pos
    += 1;\n                if (Math.Abs(lastPos - pos) > 1)\n                    pos
    += 1;\n            }\n            lastSum = sum;\n            lastCurrent = current;\n
    \           lastPos = pos;\n            ret.Add(nums[i]);\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5lrl7b5h.cs(27,24): error CS0136: A local or parameter named ''lastCurrent''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp5lrl7b5h.cs(33,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5lrl7b5h.cs(48,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your sorting algorithm here!\n        nums = nums.ToList();\n        List<long>
    list = new List<long>();\n        List<long> temp = new List<long>();\n        int
    count = 0;\n        long maxSum = 0;\n        long sum = 0;\n        foreach (long
    num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n                count = 0;\n            }\n            count++;\n        }\n
    \       list.Add(nums.Last());\n        for (int i = nums.Count - 1; i >= 0; i--)
    {\n            temp.Add(nums[i]);\n            if (sum == maxSum) {\n                list
    = list.Insert(0, temp);\n                maxSum = 0;\n                count =
    0;\n            }\n            sum -= nums[i];\n            if (sum > maxSum)
    {\n                maxSum = sum;\n                count = 0;\n            }\n
    \           count++;\n        }\n        return list;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptjk1a6j3.cs(38,39): error CS1503: Argument 2: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    ordered = new List<long>();\n        foreach (long n in nums) {\n            long
    sum = 0;\n            while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            ordered.Add(sum);\n        }\n        ordered.Sort();\n
    \       ordered.RemoveRange(0, ordered.Count - 1);\n        return ordered;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy1io2925.cs(24,17): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        SortedDictionary<long,
    SortedDictionary<long, long>> dic = new SortedDictionary<long, SortedDictionary<long,
    long>>();\n        foreach (long n in nums) {\n            SortedDictionary<long,
    long> d = null;\n            if (dic.TryGetValue(n, d))\n                dic.Add(n,
    new SortedDictionary<long, long>() { { d, n } });\n            else {\n                SortedDictionary<long,
    long> newD = new SortedDictionary<long, long>();\n                newD.Add(n,
    n);\n                dic.Add(n, newD);\n            }\n        }\n        foreach
    (KeyValuePair<long, SortedDictionary<long, long>> kvp in dic)\n            dic.Remove(kvp.Key);\n
    \       List<long> res = new List<long>(nums.Count);\n        foreach (long n
    in nums)\n            res.Add(kvp.Value.Value); \n        foreach (KeyValuePair<long,
    SortedDictionary<long, long>> kvp in dic)\n            res.Add(kvp.Value.Value);\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4uj_2p2.cs(22,36): error CS1620: Argument 2 must be passed with the ''out''
    keyword

    /tmp/tmpi4uj_2p2.cs(23,65): error CS1950: The best overloaded Add method ''SortedDictionary<long,
    long>.Add(long, long)'' for the collection initializer has some invalid arguments

    /tmp/tmpi4uj_2p2.cs(23,67): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.SortedDictionary<long,
    long>'' to ''long''

    /tmp/tmpi4uj_2p2.cs(34,21): error CS0103: The name ''kvp'' does not exist in the
    current context

    /tmp/tmpi4uj_2p2.cs(36,31): error CS1061: ''SortedDictionary<long, long>'' does
    not contain a definition for ''Value'' and no accessible extension method ''Value''
    accepting a first argument of type ''SortedDictionary<long, long>'' could be found
    (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count == 0) {\n            return nums;\n        }\n        Dictionary<long,
    List<long>> dict = new Dictionary<long, List<long>>();\n        List<long> order
    = new List<long>();\n        List<long> dup = new List<long>();\n        foreach
    (long n in nums) {\n            if (n.HasValue && dict.ContainsKey(n.Value)) {\n
    \               dup.Add(n.Value);\n            } else {\n                dict.Add(n,
    order);\n                order.Add(n);\n            }\n        }\n        List<long>
    finalOrder = dup.Count > 0 ? dup : order;\n        return finalOrder.OrderByDescending(x
    => x.ToString()).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp40m018_3.cs(26,19): error CS1061: ''long'' does not contain a definition
    for ''HasValue'' and no accessible extension method ''HasValue'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp40m018_3.cs(26,50): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp40m018_3.cs(27,27): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return new List<long>();\n\n        // Find the largest sum of digits in
    the array\n        long largestSumOfDigits = nums.Sum(n => n);\n        int largestIndex
    = nums.FindIndex(n => n == largestSumOfDigits);\n\n        // Sort the list according
    to their sum\n        nums.Sort((a, b) =>\n            {\n                long
    c = a + b;\n                int d = nums.IndexOf(c);\n                if (d ==
    largestIndex) return a.CompareTo(b);\n                return d.CompareTo(largestIndex);\n
    \           }\n        );\n\n        return nums;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0d1c85cd33f4d87a00b34f190bed7b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0d1c85cd33f4d87a00b34f190bed7b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Use
    this index to keep track of the previous number\n        // with same sum of digits
    as the current one.\n        int index = 0;\n        bool sameSum = true;\n        List<long>
    result = new List<long>();\n        if (nums.Count > 0) {\n            long sum
    = 0;\n            int digits = nums.Select(x => x - '0').Sum();\n            for
    (int i = 0; i < nums.Count - 1; i++) {\n                // Compare current number
    with previous one\n                if (nums[i] != nums[index] && (!sameSum)) {\n
    \                   // If there is a new number with same sum of digits,\n                    //
    add it to the result list.\n                    sameSum = true;\n                    result.Add(nums[i]);\n
    \               } else {\n                    // If they are the same, just increase
    the index.\n                    index = index + 1;\n                    if (index
    < nums.Count) {\n                        sameSum = true;\n                        result.Add(nums[i]);\n
    \                   }\n                }\n            }\n            // If this
    is the last number, add it to result list.\n            if (sameSum) {\n                result.Add(nums.Last());\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcl5mu60u.cs(26,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpcl5mu60u.cs(25,18): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        long ret = 0;\n        foreach (long i in nums) {\n            sum
    += i;\n        }\n        int[] numDigits = new int[sum + 1];\n        int digitSum
    = 0;\n        foreach (long i in nums) {\n            digitSum += i;\n            numDigits[digitSum]
    = 1;\n        }\n        for (int i = 0; i <= sum; i++) {\n            int index
    = i;\n            int j = i;\n            while (j > 0) {\n                int
    temp = numDigits[j];\n                numDigits[j] = numDigits[j - 1];\n                numDigits[j
    - 1] = temp;\n                j--;\n            }\n            if (i == 0) {\n
    \               ret = numDigits[0];\n            }\n            else {\n                ret
    += numDigits[i];\n            }\n        }\n        nums.Clear();\n        for
    (int i = 0; i < numDigits.Length; i++) {\n            if (numDigits[i] != 0) {\n
    \               nums.Add(i);\n            }\n        }\n        return nums.ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9lbt_iu4.cs(27,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var order
    = new List<long>(nums);\n        var numsCopy = nums.ToList();\n        order.Sort((x,
    y) => Compare(numsCopy[(int)x], numsCopy[(int)y]));\n        return order;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuusf6o69.cs(21,30): error CS0103: The name ''Compare'' does not exist
    in the current context

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // TODO:
    Complete the implementation\n        nums.Sort((a, b) => { \n            int digitSum
    = a.ToString().Sum(c => Convert.ToInt32(c.ToString())); \n            int bdigitSum
    = b.ToString().Sum(c => Convert.ToInt32(c.ToString()));\n            return digitSum
    - bdigitSum;\n        });\n        return nums;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Failed to compare
    two elements in the array. ---> System.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<OrderByPoints>b__0_1
    (System.Char c) [0x00007] in <1291b2a149da44098ddfdefe05012976>:0 \n  at System.Linq.Enumerable.Sum[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]
    selector) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem+<>c.<OrderByPoints>b__0_0
    (System.Int64 a, System.Int64 b) [0x00008] in <1291b2a149da44098ddfdefe05012976>:0
    \n  at System.Collections.Generic.ArraySortHelper`1[T].InsertionSort (T[] keys,
    System.Int32 lo, System.Int32 hi, System.Comparison`1[T] comparer) [0x0002a] in
    <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].IntroSort
    (T[] keys, System.Int32 lo, System.Int32 hi, System.Int32 depthLimit, System.Comparison`1[T]
    comparer) [0x0004b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].IntrospectiveSort
    (T[] keys, System.Int32 left, System.Int32 length, System.Comparison`1[T] comparer)
    [0x00013] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.ArraySortHelper`1[T].Sort
    (T[] keys, System.Int32 index, System.Int32 length, System.Comparison`1[T] comparer)
    [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n   --- End of inner exception
    stack trace ---\n  at System.Collect"
  stdout: ''
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 1)\n            return nums;\n\n        int sum = 0;\n        int lastSum =
    0;\n\n        int n = nums.Count;\n        List<long> result = new List<long>(n);\n
    \       int[] dig = nums.Select(x => (int)Math.Floor(Math.Log10(x) + 1)).ToArray();\n\n
    \       for (int i = 0; i < n; i++) {\n            int sum = dig[i];\n            if
    (lastSum != sum) {\n                result.Add(nums[i]);\n                lastSum
    = sum;\n            }\n        }\n\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd5tohxck.cs(30,17): error CS0136: A local or parameter named ''sum'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpd5tohxck.cs(22,13): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    '
  timestamp: 1659976369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    ordered = new List<long>();\n        \n        long sum = 0;\n        List<long>
    numsCopy = new List<long>();\n        foreach (long num in nums) {\n            sum
    += num;\n            ordered.Add(num);\n        }\n        \n        foreach(var
    num in nums) {\n            if (sum == 1) {\n                ordered.Remove(num);\n
    \               ordered.Add(numsCopy.First());\n                sum--;\n            }
    else {\n                numsCopy.Add(num);\n            }\n        }\n        \n
    \       return ordered;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <903da93e6ed04339baf856bf99d79de4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <903da93e6ed04339baf856bf99d79de4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long min;\n
    \       long max;\n        long sum;\n\n        if (nums.Count == 0) {\n            return
    nums;\n        }\n\n        min = max = nums[0];\n        foreach (long n in nums)
    {\n            if (n < 0) {\n                min = Math.Min(min, -n);\n            }
    else {\n                max = Math.Max(max, n);\n            }\n        }\n        sum
    = 0;\n        foreach (long n in nums) {\n            sum += n;\n        }\n        if
    (sum < min) {\n            return nums.OrderBy(n => n).ToList();\n        }\n
    \       if (sum > max) {\n            return nums.OrderByDescending(n => n).ToList();\n
    \       }\n        return nums.OrderBy(n => (sum - n)).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e0484f3e1004d0d8058594a17e2f8f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e0484f3e1004d0d8058594a17e2f8f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    ret = new List<long>();\n        HashSet<long> sums = new HashSet<long>();\n        foreach(long
    x in nums) {\n            int sum = x.ToString().Sum(c => c - '0');\n            if(!sums.Contains(sum))
    {\n                sums.Add(sum);\n                ret.Add(x);\n            }\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f745d373e58f40ad83725edb92e9bcf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f745d373e58f40ad83725edb92e9bcf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count < 2) {\n            return new List<long>();\n        }\n
    \       List<long> sortedNums = new List<long>();\n        Dictionary<long, int>
    sums = new Dictionary<long, int>();\n        foreach (long n in nums) {\n            if
    (sums.ContainsKey(n)) {\n                sums[n]++;\n            } else {\n                sums[n]
    = 1;\n            }\n        }\n        sortedNums.Clear();\n        int sum =
    0;\n        int num = 0;\n        int i = 0;\n        foreach (long n in sums)
    {\n            if (sum > 0) {\n                sum += n;\n                num++;\n
    \               sortedNums.Add(num);\n            }\n            sum -= n;\n            sum
    -= sums[n];\n            i++;\n        }\n        while (num > 0) {\n            sortedNums.Add(num);\n
    \           num--;\n        }\n        sortedNums.Insert(0, 1);\n        if (nums
    > 0) {\n            sortedNums.Add(nums.Count);\n        }\n        return sortedNums;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvnyihdqm.cs(37,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvnyihdqm.cs(41,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvnyihdqm.cs(35,9): error CS0030: Cannot convert type ''System.Collections.Generic.KeyValuePair<long,
    int>'' to ''long''

    /tmp/tmpvnyihdqm.cs(50,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659976369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums.Sort((x,
    y) => x.CompareTo(y));\n        return nums.ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb0427587832415ba53909496185d3ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb0427587832415ba53909496185d3ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    ans = new List<long>();\n        var sum = nums.Sum();\n        foreach (var item
    in nums) {\n            if (item >= sum) {\n                ans.Add(item);\n            }\n
    \       }\n        return ans;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb1d774ce3f04f4bb47be969506a3982>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb1d774ce3f04f4bb47be969506a3982>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    res = new List<long>();\n        // 1. Sort the list\n        Array.Sort(nums);\n
    \       // 2. Iterate over the list and calculate the sum of digits\n        //
    \   (each digit is an int between 0 and 9)\n        foreach (long num in nums)
    {\n            int sum = 0;\n            while (num > 0) {\n                sum
    += num % 10;\n                num = num / 10;\n            }\n            res.Add(sum);\n
    \       }\n        // 3. Sort by sum\n        Array.Sort(res);\n        // 4.
    Return the sorted list\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9a_u8rz7.cs(21,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp9a_u8rz7.cs(27,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9a_u8rz7.cs(28,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmp9a_u8rz7.cs(33,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 1)\n            return nums;\n\n        List<long> sorted = nums.OrderBy(x =>
    x.ToString()).ToList();\n        foreach (long num in sorted)\n            sum.Add(num,
    0);\n\n        for (int i = 0; i < nums.Count; ++i) {\n            sum[nums[i]]
    = sum[nums[i]] - nums[i];\n        }\n        sorted = sorted.OrderBy(x => sum[x.ToString()]).ToList();\n\n
    \       foreach (long num in sorted)\n            nums.Remove(num);\n\n        return
    nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3u2l0f7g.cs(24,13): error CS0103: The name ''sum'' does not exist in the
    current context

    /tmp/tmp3u2l0f7g.cs(27,13): error CS0103: The name ''sum'' does not exist in the
    current context

    /tmp/tmp3u2l0f7g.cs(27,28): error CS0103: The name ''sum'' does not exist in the
    current context

    /tmp/tmp3u2l0f7g.cs(29,38): error CS0103: The name ''sum'' does not exist in the
    current context

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    nums1 = new List<long>();\n        bool changed = false;\n        do {\n            changed
    = false;\n            foreach (long num in nums) {\n                nums1.Add(num);\n
    \               if (nums1.Sum() == num) {\n                    nums1.Sort((x,y)
    => x - y);\n                    changed = true;\n                    break;\n
    \               }\n            }\n        } while (changed);\n        return nums1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv7hm4sx1.cs(26,41): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv7hm4sx1.cs(26,41): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long total
    = 0;\n        long temp;\n        Dictionary<long, long> sorted = new Dictionary<long,
    long>();\n\n        foreach (long n in nums) {\n            temp = n;\n            while
    (temp != 0) {\n                int digit = nums.IndexOf(temp % 10);\n                total
    += (digit * temp % 10);\n                sorted.Add(total, nums.IndexOf(temp));\n
    \               temp /= 10;\n            }\n        }\n\n        List<long> ordered
    = new List<long>();\n        foreach (KeyValuePair<long, long> pair in sorted)
    {\n            ordered.Add(pair.Value);\n        }\n\n        return ordered;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same
    key has already been added. Key: 0\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00047]
    in <df27e5ccda934ca796e66cfda24e004a>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <df27e5ccda934ca796e66cfda24e004a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: An item with the same key has already been added. Key:
    0\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key,
    TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00047]
    in <df27e5ccda934ca796e66cfda24e004a>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <df27e5ccda934ca796e66cfda24e004a>:0 \n"
  stdout: ''
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count == 0) {\n            return nums;\n        }\n        //
    TODO: Write your code here!\n        int max = nums.Max();\n        int min =
    nums.Min();\n        int sum = 0;\n        List<long> list = new List<long>();\n
    \       foreach (long item in nums) {\n            sum += (int)Math.Floor(Math.Sqrt(item));\n
    \           if (sum > max) {\n                sum -= max;\n                list.Add(item);\n
    \           } else if (sum < min) {\n                sum -= min;\n                list.Add(item);\n
    \           } else {\n                list.Add(item);\n            }\n        }\n
    \       return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdka8tt1y.cs(23,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpdka8tt1y.cs(24,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // write
    your code here\n        \n        \n        // Sort the list \n        nums.Sort();\n
    \       // Sum the digits of the numbers\n        foreach (var i in nums)\n        {\n
    \           var temp = i.ToString();\n            var c = temp.Select(x => x.ToString()).ToArray();\n
    \           int sum = 0;\n            foreach (var j in c)\n            {\n                sum
    += int.Parse(j);\n            }\n            while (sum > 9)\n            {\n
    \               sum = sum / 10;\n                \n            }\n            while
    (sum < 9)\n            {\n                sum = sum * 10;\n            }\n            int
    n = 0;\n            while (sum != 0)\n            {\n                n = sum %
    10;\n                sum = sum / 10;\n                \n                nums[n]
    = i;\n            }\n        }\n        return nums;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00065]
    in <b762e6568d4841609f1683355074a3a8>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <b762e6568d4841609f1683355074a3a8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00065]
    in <b762e6568d4841609f1683355074a3a8>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <b762e6568d4841609f1683355074a3a8>:0 \n"
  stdout: ''
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var dict
    = nums.ToDictionary(x => x.ToString());\n        foreach (var v in dict)\n            dict[v.Value.Sum()]
    = v;\n        \n        return dict.OrderBy(x => x.Value).Select(x => x.Value).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp029kh79i.cs(21,18): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count < 1) {\n            return nums;\n        }\n        var
    sums = new Dictionary<long, long>();\n        foreach (var x in nums) {\n            long
    sum = 0;\n            foreach (var y in new long[] { x % 10, x % 100, x % 1000,
    x % 10000, x % 100000 }) {\n                sum += y;\n            }\n            sums.Add(x,
    sum);\n        }\n        var ordered = sums.OrderBy(x => x.Value).ToList();\n
    \       foreach (var x in ordered) {\n            nums.Remove(x.Key);\n            nums.Insert(x.Key,
    x.Value);\n        }\n        return nums;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo_h1pblr.cs(33,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sums
    = nums.Select(n => n.ToString().ToCharArray().Sum(x => x)).OrderBy(n => n);\n
    \       return nums.Where(n => sums.Contains(n.ToString().ToCharArray().Sum(x
    => x))).OrderBy(n => n);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt3hwvzzf.cs(20,16): error CS0266: Cannot implicitly convert type ''System.Linq.IOrderedEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        int index = 0;\n        List<long> temp = new List<long>(nums);\n
    \       while (temp.Any()) {\n            sum += temp.First();\n            temp.RemoveAt(0);\n
    \           index = temp.FindIndex(item => item == sum);\n            temp.Insert(index,
    sum);\n        }\n        return temp;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index must
    be within the bounds of the List.\nParameter name: index\n  at System.Collections.Generic.List`1[T].Insert
    (System.Int32 index, T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00049]
    in <a7493b3cdf5e4f948126c14072edacce>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <a7493b3cdf5e4f948126c14072edacce>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index must be within the bounds of the List.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].Insert (System.Int32 index,
    T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x00049] in <a7493b3cdf5e4f948126c14072edacce>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <a7493b3cdf5e4f948126c14072edacce>:0
    \n"
  stdout: ''
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count < 2)\n            return nums;\n        List<long> result
    = new List<long>();\n        long total = 0;\n        int digits = 0;\n        for
    (int i = 0; i < nums.Count; i++) {\n            total += nums[i];\n            digits
    += nums[i] % 10;\n        }\n        long tensPower = (long)Math.Pow(10, digits
    - 1);\n        long tens = (int)(tensPower * total);\n        result.Add(tens);\n
    \       tensPower = (long)Math.Pow(10, digits - 2);\n        tens = (int)Math.Floor(tensPower
    * total);\n        result.Add(tens);\n        tensPower = (long)Math.Pow(10, digits
    - 3);\n        tens = (int)Math.Floor(tensPower * total);\n        result.Add(tens);\n
    \       tensPower = (long)Math.Pow(10, digits - 4);\n        tens = (int)Math.Floor(tensPower
    * total);\n        result.Add(tens);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_8rp9du.cs(26,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpb_8rp9du.cs(32,26): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmpb_8rp9du.cs(35,26): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    /tmp/tmpb_8rp9du.cs(38,26): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Debug.Assert(nums.Count
    != 0);\n        var sum = nums.Sum(n => n);\n        var sorted = nums.OrderByDescending(n
    => sum % n).ToList();\n        for (int i = 0; i < sorted.Count; i++) {\n            sorted[sorted.Count
    - 1 - i] = sorted[i];\n        }\n        return sorted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3a9a17938a5435c84ffa7d03a9899dc>:0
    \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by
    zero.\n  at Problem+<>c__DisplayClass0_0.<OrderByPoints>b__1 (System.Int64 n)
    [0x00000] in <a3a9a17938a5435c84ffa7d03a9899dc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys
    (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,
    System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort
    (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement]
    buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].ToList
    () [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00053]
    in <a3a9a17938a5435c84ffa7d03a9899dc>:0 \n  at Problem.Main"
  stdout: ''
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sorted
    = new List<long>();\n        foreach (var n in nums) {\n            int s = 0;\n
    \           while (n != 0) {\n                s = s + n % 10;\n                n
    = n / 10;\n            }\n            int ix = sorted.IndexOf(s);\n            if
    (ix != -1) {\n                sorted.Insert(ix, n);\n            } else {\n                sorted.Add(n);\n
    \           }\n        }\n        return sorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfe68vhi4.cs(23,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpfe68vhi4.cs(24,17): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659976370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> answer = new List<long>();\n        foreach (long number
    in nums) {\n            sum += number;\n            answer.Add(number);\n        }\n
    \       return answer.OrderBy(x => sum - x).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ca32e233e545efbddf371107bc8ce3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ca32e233e545efbddf371107bc8ce3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        long maxSum = nums.Max().ToString() + nums.Min().ToString();\n        List<long>
    orderedNums = new List<long>();\n        foreach (long num in nums)\n        {\n
    \           sum = 0;\n            for (int i = 0; i < num.ToString().Length; i++)\n
    \           {\n                sum += Convert.ToInt64(num.ToString()[i]) - Convert.ToInt64(maxSum[i]);\n
    \           }\n            orderedNums.Add(sum);\n        }\n        return orderedNums;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8fp60mih.cs(20,23): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmp8fp60mih.cs(27,77): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here.\n        long[] numArr = nums.ToArray();\n        Array.Sort(numArr,
    (a, b) =>\n        {\n            long total = 0;\n            long aValue = Math.Abs(a);\n
    \           long bValue = Math.Abs(b);\n            foreach (var x in numArr)\n
    \           {\n                long x = Math.Abs(x);\n                if (x ==
    0)\n                {\n                    continue;\n                }\n                if
    (aValue * 10 + x == bValue * 10 + x)\n                {\n                    total
    += x;\n                }\n            }\n            return total;\n        });\n
    \       List<long> result = new List<long>();\n        foreach (var item in numArr)\n
    \       {\n            long aValue = Math.Abs(item);\n            long bValue
    = Math.Abs(numArr[numArr.IndexOf(item)]);\n            if (aValue == bValue)\n
    \           {\n                result.Add(item);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_hkehn9.cs(28,22): error CS0136: A local or parameter named ''x'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpf_hkehn9.cs(38,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpf_hkehn9.cs(38,20): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpf_hkehn9.cs(44,50): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpf_hkehn9.cs(28,35): error CS0165: Use of unassigned local variable ''x''

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums =
    nums.OrderBy(x => x).ToList();\n        bool lastSumWasNegative = false;\n        List<long>
    numsCopy = new List<long>(nums);\n        numsCopy.Add(numsCopy[0]);\n        long
    lastSum = 0;\n        foreach(long num in numsCopy) {\n            long sum =
    num;\n            foreach(char ch in num.ToString().ToCharArray()) {\n                sum
    -= Convert.ToInt64(ch);\n                if (sum < 0) {\n                    sum
    += 10;\n                    lastSumWasNegative = true;\n                }\n            }\n
    \           if (lastSumWasNegative) {\n                lastSum -= num;\n            }\n
    \           lastSum += sum;\n        }\n        if (lastSumWasNegative) {\n            numsCopy
    = numsCopy.OrderByDescending(x => x).ToList();\n            long lastSum = 0;\n
    \           foreach(long num in numsCopy) {\n                long sum = num;\n
    \               foreach(char ch in num.ToString().ToCharArray()) {\n                    sum
    -= Convert.ToInt64(ch);\n                    if (sum < 0) {\n                        sum
    += 10;\n                        lastSumWasNegative = true;\n                    }\n
    \               }\n                if (lastSumWasNegative) {\n                    lastSum
    -= num;\n                }\n                lastSum += sum;\n            }\n            if
    (lastSumWasNegative) {\n                numsCopy = numsCopy.OrderBy(x => x).ToList();\n
    \           }\n        }\n        return numsCopy;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpligp657c.cs(40,18): error CS0136: A local or parameter named ''lastSum''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int sumOfDigits
    = nums.Sum(x => x.ToString().ToCharArray().Sum(y => y == '0') ? 1 : 0);\n        bool
    isSorted = true;\n        int startIndex = nums.Count / 2;\n        int endIndex
    = nums.Count - 1;\n        long lastDigit = 0;\n        while (true) {\n            if
    (nums[startIndex] >= sumOfDigits) {\n                startIndex--;\n            }
    else {\n                while (startIndex >= 0 && (startIndex >= nums.Count ||
    nums[startIndex + 1] < sumOfDigits)) {\n                    if (nums[startIndex]
    == lastDigit && nums[startIndex + 1] > sumOfDigits) {\n                        break;\n
    \                   }\n                    startIndex--;\n                }\n
    \               isSorted = false;\n            }\n            if (isSorted) {\n
    \               if (nums[endIndex] > sumOfDigits) {\n                    endIndex--;\n
    \               } else {\n                    while (endIndex >= 0 && (endIndex
    >= nums.Count || nums[endIndex - 1] < sumOfDigits)) {\n                        if
    (nums[endIndex] == lastDigit && nums[endIndex - 1] > sumOfDigits) {\n                            break;\n
    \                       }\n                        endIndex--;\n                    }\n
    \                   isSorted = false;\n                }\n            }\n            if
    (isSorted) {\n                nums[startIndex] = nums[endIndex];\n                nums[endIndex]
    = nums[startIndex];\n            }\n            if (endIndex - startIndex + 1
    < nums.Count / 2) {\n                break;\n            }\n            if (sumOfDigits
    != nums[startIndex + 1]) {\n                sumOfDigits -= nums[startIndex + 1];\n
    \               nums[startIndex + 1] = lastDigit;\n            }\n            if
    (sumOfDigits != nums[endIndex - 1]) {\n                sumOfDigits -= nums[endIndex
    - 1];\n                nums[endIndex - 1] = lastDigit;\n            }\n            lastDigit
    = sumOfDigits;\n        }\n        return nums;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwfze988m.cs(19,77): error CS0029: Cannot implicitly convert type ''bool''
    to ''long?''

    /tmp/tmpwfze988m.cs(19,77): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpwfze988m.cs(57,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpwfze988m.cs(61,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null)\n            throw new ArgumentNullException(nameof(nums));\n        if
    (nums.Count < 2)\n            return nums;\n        int sum = 0;\n        for
    (int i = 0; i < nums.Count; i++) {\n            long num = nums[i];\n            sum
    += num % 10;\n            if (sum > 0)\n                nums[i] = sum;\n            else\n
    \               nums[i] = num / 10;\n            sum += num % 10;\n        }\n
    \       if (sum < 0)\n            sum = sum + 10;\n        int pos = 0;\n        List<long>
    res = new List<long>();\n        while (nums[pos] != 0) {\n            long num
    = nums[pos];\n            res.Add(num);\n            pos += num % 10 == 0 ? 1
    : 2;\n        }\n        res.Reverse();\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4xtcz70o.cs(26,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4xtcz70o.cs(31,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your solution here\n        var rez = new List<long>(nums);\n        foreach (var
    item in nums) {\n            var sum = 0;\n            while (item != 0) {\n                sum
    += item % 10;\n                item /= 10;\n            }\n            rez.Remove(item);\n
    \           rez.Insert(0, sum);\n        }\n        return rez;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgy9y_wlu.cs(24,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgy9y_wlu.cs(25,17): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Dictionary<int,
    int> d = new Dictionary<int, int>();\n        foreach (var n in nums) {\n            int
    sum = 0;\n            while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            d.Add(sum, n);\n        }\n        List<long>
    ret = new List<long>();\n        foreach (var entry in d) {\n            ret.Add(entry.Value);\n
    \       }\n        return ret;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps93d0zr2.cs(23,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmps93d0zr2.cs(24,17): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    /tmp/tmps93d0zr2.cs(26,24): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        int digitSum = 0;\n        int maxSum = 0;\n
    \       long currentSum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n
    \           currentSum += nums[i];\n            digitSum = 0;\n            while
    (currentSum > 0) {\n                digitSum += currentSum % 10;\n                currentSum
    = currentSum / 10;\n            }\n            if (maxSum < digitSum) maxSum =
    digitSum;\n        }\n        for (int i = 0; i < nums.Count; i++) {\n            currentSum
    = nums[i];\n            digitSum = 0;\n            while (currentSum > 0) {\n
    \               digitSum += currentSum % 10;\n                currentSum = currentSum
    / 10;\n            }\n            if (maxSum < digitSum) maxSum = digitSum;\n
    \           result.Add(nums[nums.IndexOf(nums[i])]);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk5q3aagg.cs(27,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpk5q3aagg.cs(36,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    numsSums = nums.ToList();\n        int sumsSum = 0;\n        foreach (long num
    in numsSums) {\n            sumsSum += num;\n        }\n        for (int i = 0;
    i < nums.Count; i++) {\n            for (int j = i + 1; j < nums.Count; j++) {\n
    \               double num = (double)nums[i];\n                double num2 = (double)nums[j];\n
    \               if (numsSums[i] == numsSums[j]) {\n                    numsSums[i]
    = (long)Math.Min(num, num2);\n                    numsSums[j] = (long)Math.Max(num,
    num2);\n                }\n            }\n        }\n        return numsSums.ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp58riqy1m.cs(22,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    ordered = new List<long>(nums.Count);\n        long highestSum = 0;\n        long
    currentSum = 0;\n        long currentIndex = 0;\n        foreach (long num in
    nums) {\n            currentIndex++;\n            currentSum += num;\n            if
    (currentSum > highestSum) {\n                ordered.Add(num);\n                highestSum
    = currentSum;\n            } else if (currentSum == highestSum) {\n                ordered.Insert(currentIndex,
    num);\n                currentSum -= num;\n            }\n        }\n        return
    ordered;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphjpm1gkg.cs(30,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = nums.Sum(x => x.ToString().ToLong());\n        if (sum < 0)\n        {\n            throw
    new ArgumentException(\"Input list contains negative numbers\");\n        }\n
    \       \n        List<long> result = new List<long>();\n        double tempSum
    = 0.0;\n        HashSet<long> sumHashes = new HashSet<long>();\n        foreach
    (long i in nums)\n        {\n            double tempSum2 = sum.ToDouble();\n            tempSum
    = Math.Sqrt(tempSum2);\n            if (sumHashes.Add(tempSum2))\n            {\n
    \               result.Add(i);\n            }\n            else\n            {\n
    \               int index = nums.FindIndex(x => x.ToString().ToLong() == tempSum);\n
    \               result.Insert(index, i);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa6pm1i4e.cs(19,47): error CS1061: ''string'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpa6pm1i4e.cs(30,35): error CS1061: ''long'' does not contain a definition
    for ''ToDouble'' and no accessible extension method ''ToDouble'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpa6pm1i4e.cs(32,31): error CS1503: Argument 1: cannot convert from ''double''
    to ''long''

    /tmp/tmpa6pm1i4e.cs(38,62): error CS1061: ''string'' does not contain a definition
    for ''ToLong'' and no accessible extension method ''ToLong'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sorted
    = nums.ToList();\n        sorted.Sort((a, b) => {\n            long result = 0;\n
    \           var d1 = a - nums.Sum(x => Math.Abs((int)x));\n            var d2
    = b - nums.Sum(x => Math.Abs((int)x));\n            if (d1 > d2) {\n                result
    = 1;\n            } else if (d1 < d2) {\n                result = -1;\n            }
    else {\n                result = a.CompareTo(b);\n            }\n            return
    result;\n        });\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt16jiz4x.cs(31,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpt16jiz4x.cs(31,20): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Debug.Assert(nums.Count
    > 0);\n        Debug.Assert(nums.All(n => n >= 0));\n        if (nums.Count ==
    1) {\n            return nums;\n        }\n\n        // We sort by increasing
    sums of digits and then by their original order.\n        // If two numbers have
    same sums of digits, we order them by their original order.\n        var list
    = new List<long>();\n        foreach (var num in nums) {\n            var sumOfDigits
    = SumOfDigits(num);\n            var index = list.FindIndex(l => SumOfDigits(l)
    == sumOfDigits);\n            if (index >= 0) {\n                list[index] =
    num;\n            } else {\n                list.Add(num);\n            }\n        }\n\n
    \       // We sort list by increasing sums of digits again\n        // (in case
    sum of digits changes, we sort by their original order)\n        list = list.OrderBy(l
    => SumOfDigits(l)).ThenBy(l => l).ToList();\n        return list;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7312ru2g.cs(29,31): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmp7312ru2g.cs(30,45): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmp7312ru2g.cs(40,34): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long maxPoints
    = nums.Max();\n        bool isFirst = true;\n        for (int i = 0; i <= maxPoints;
    i++) {\n            long sum = 0;\n            for (int j = 0; j < nums.Count;
    j++)\n                if (nums[j] >= i)\n                    sum += nums[j];\n
    \           if (sum > 0) {\n                nums.RemoveAll(n => n < i);\n                nums.Insert(i,
    sum);\n            }\n            if (sum < 0) {\n                nums.RemoveAll(n
    => n > i);\n                nums.Insert(i, -sum);\n            }\n            if
    (sum == 0 && isFirst)\n                nums.Insert(i, nums[0]);\n            isFirst
    = false;\n        }\n        nums.Sort();\n        return nums;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <561d01ff61434e7580ce1289c09065be>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index must be within
    the bounds of the List.\nParameter name: index\n  at System.Collections.Generic.List`1[T].Insert
    (System.Int32 index, T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x000ad]
    in <561d01ff61434e7580ce1289c09065be>:0 \n  at Problem.Main (System.String[] args)
    [0x00054] in <561d01ff61434e7580ce1289c09065be>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index must be within the bounds of the List.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].Insert (System.Int32 index,
    T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x000ad] in <561d01ff61434e7580ce1289c09065be>:0
    \n  at Problem.Main (System.String[] args) [0x00054] in <561d01ff61434e7580ce1289c09065be>:0
    \n"
  stdout: ''
  timestamp: 1659976370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Dictionary<long,
    int> sumToIndex = new Dictionary<long, int>();\n        for (int i = 0; i < nums.Count;
    i++) {\n            long numToSort = nums[i];\n            int index;\n            if
    (sumToIndex.TryGetValue(numToSort, out index)) {\n                int tmp = index;\n
    \               numToSort = sumToIndex[numToSort];\n                index = tmp;\n
    \           }\n            sumToIndex[numToSort] = i;\n        }\n\n        List<long>
    result = new List<long>();\n        foreach (KeyValuePair<long, int> kvp in sumToIndex)
    {\n            result.Add(nums[kvp.Value]);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aace9d25db2d46efbf525979cb95f822>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aace9d25db2d46efbf525979cb95f822>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long maxSum
    = nums.Sum();\n        long tempSum = maxSum;\n        List<long> tempList = new
    List<long>(nums);\n        Dictionary<long, long> tempDict = new Dictionary<long,
    long>(tempList.Count);\n        foreach (long num in nums) {\n            long
    curSum = num;\n            long curPoints = 0;\n            while (curSum > 0)
    {\n                curPoints++;\n                curSum /= 10;\n            }\n
    \           tempDict.Add(curPoints, curSum);\n        }\n        List<long> result
    = new List<long>();\n        foreach (KeyValuePair<long, long> item in tempDict)
    {\n            if (tempDict.Keys.Contains(maxSum - item.Value)) {\n                result.Add(item.Key);\n
    \               tempDict.Remove(item.Key);\n            }\n        }\n        result.AddRange(tempDict.Select(x
    => x.Key).OrderBy(x => x).ToList());\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same
    key has already been added. Key: 0\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00059]
    in <50667eac5c3a4d658aecba50bcb61cf0>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <50667eac5c3a4d658aecba50bcb61cf0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: An item with the same key has already been added. Key:
    0\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key,
    TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x00059]
    in <50667eac5c3a4d658aecba50bcb61cf0>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <50667eac5c3a4d658aecba50bcb61cf0>:0 \n"
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Your
    code here\n        Dictionary<long, long> sumDict = new Dictionary<long, long>();\n
    \       foreach (var item in nums) {\n            long sum = 0;\n            while
    (item > 0) {\n                sum += (item % 10);\n                item = item
    / 10;\n            }\n            if (!sumDict.ContainsKey(sum)) {\n                sumDict[sum]
    = 1;\n            } else {\n                sumDict[sum]++;\n            }\n        }\n
    \       return nums.OrderBy(x => sumDict[(int)x - 1]).ToList();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3us8al4v.cs(25,17): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long totalSum = 0;\n        bool anyDuplicate
    = false;\n\n        // Add all numbers in the list to result\n        foreach(long
    num in nums) {\n            if(!result.Contains(num)) {\n                result.Add(num);\n
    \           }\n        }\n        \n        // Set current sum to 0\n        foreach(long
    num in result) {\n            totalSum += num;\n        }\n\n        // For each
    number in result, add digit if digit doesn't exceed sum\n        foreach(long
    num in result) {\n            int digit = num % 10;\n            if(digit > totalSum)
    {\n                // Add previous number as a possible answer\n                result.Add(num);\n
    \               totalSum += digit;\n                \n                // Mark
    that we have found a duplicate\n                anyDuplicate = true;\n            }\n
    \       }\n\n        // If there were any duplicates, sort by their index\n        if(anyDuplicate)
    {\n            result = result.OrderBy(n => Array.IndexOf(nums, n))\n                .ThenBy(n
    => Array.IndexOf(nums, n)).ToList();\n        }\n\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmlg1ddsn.cs(37,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmlg1ddsn.cs(50,56): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659976370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var result
    = new List<long>();\n        long sum = 0;\n        foreach (var i in nums) {\n
    \           sum += i;\n            result.Add(sum);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d460217f64a41b4909b92a8b134f5a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d460217f64a41b4909b92a8b134f5a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count == 0) return new List<long>();\n        var distr = new
    List<long>(); //store the sum of the digits in distr\n        var len = nums.Count;\n
    \       for (int i = 0; i < len; i++) {\n            var s = nums[i].ToString();\n
    \           var sum = Convert.ToInt64(s);\n            distr.Add(sum);\n        }\n
    \       distr.Sort();\n        var ordered = new List<long>();\n        for (int
    i = 0; i < len; i++) {\n            int ind = Array.IndexOf(distr, distr[i]);
    //find the index of the item with same sum\n            if (ind != -1) ordered.Add(nums[ind]);
    //add the item with same sum to the ordered list\n        }\n        return ordered;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzpotubu6.cs(30,37): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659976370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int sum
    = 0;\n        HashSet<long> sums = new HashSet<long>();\n        for (int i =
    0; i < nums.Count; ++i) {\n            sum += nums[i];\n            if (sums.Contains(sum))
    {\n                List<int> index = new List<int>();\n                for (int
    j = i; j < nums.Count; ++j) {\n                    sum += nums[j];\n                    if
    (sums.Contains(sum)) {\n                        index.Add(j);\n                        break;\n
    \                   }\n                }\n                index = index.OrderBy(x
    => x).ToList();\n                nums.RemoveAll(x => !index.Contains(x));\n                nums.InsertRange(index.ToArray(),
    i);\n            } else {\n                sums.Add(sum);\n            }\n        }\n
    \       return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppfjppnys.cs(22,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppfjppnys.cs(26,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmppfjppnys.cs(33,53): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmppfjppnys.cs(34,34): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''int''

    /tmp/tmppfjppnys.cs(34,51): error CS1503: Argument 2: cannot convert from ''int''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659976370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Your
    code goes here\n        nums = nums.OrderBy(s => ((int)s).ToString()).ToList();\n
    \       return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51178beee40f4476a876d02798ee440f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51178beee40f4476a876d02798ee440f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // write
    your code here\n        var result = nums.GroupBy(i => Math.Floor(i / Math.Pow(10,
    i.ToString().Length)), i => (long?)i).OrderByDescending(x => x.Key.Sum()).ToList();\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4rr208_m.cs(20,129): error CS1929: ''double'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = nums.Sum();\n        long maxPoint = sum;\n        long index = 1;\n        List<long>
    result = new List<long>();\n        do {\n            result.Add(nums[index]);\n
    \           sum += nums[index];\n            maxPoint = sum;\n            index++;\n
    \       } while (sum != maxPoint);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6ucp5qd.cs(24,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr6ucp5qd.cs(25,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    ans = new List<long>();\n        if (nums.Count == 0)\n            return nums;\n
    \       long sum = 0;\n        foreach (long num in nums) {\n            sum +=
    num;\n            ans.Add(sum);\n        }\n        return ans.OrderBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d802ad9aacb2454489dbd38a760f1628>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d802ad9aacb2454489dbd38a760f1628>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sums
    = nums.Select(x => (int)Math.Pow(10, Math.Log10(x) + 1)).OrderBy(x => x).ToList();\n
    \       var index = 0;\n        return nums.Select(x => (int)Math.Pow(10, Math.Log10(x)
    + 1) - sums[index++]).Distinct().ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfq_xkd7m.cs(21,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<int>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659976371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // write
    your code in C# here\n        if (nums.Count == 0) return new List<long>();\n
    \       long digitSum = 0;\n        long maxSum = 0;\n        bool swap = false;\n
    \       for (int i = 0; i < nums.Count; i++) {\n            digitSum += nums[i];\n
    \           if (digitSum > maxSum) {\n                swap = true;\n                maxSum
    = digitSum;\n            }\n        }\n        int currentMaxIndex = 0;\n        int
    maxIndex = 0;\n        if (swap) {\n            List<long> temp = new List<long>();\n
    \           for (int i = 0; i < nums.Count; i++) {\n                digitSum +=
    nums[i];\n                if (digitSum > maxSum) {\n                    temp.Add(nums[i]);\n
    \                   currentMaxIndex = i;\n                    maxSum = digitSum;\n
    \               }\n            }\n            return temp;\n        }\n        return
    nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74466b32f9144d3cb6a35e96a3225a09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <74466b32f9144d3cb6a35e96a3225a09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums =
    nums.OrderBy(x => x.ToString(CultureInfo.InvariantCulture).Replace(\",\", \"\")).ToList();\n
    \       var sorted = new List<long>();\n        for (int i = 0; i < nums.Count;
    i++)\n        {\n            long sum = 0;\n            long index = i;\n            int
    digit = 0;\n            while (index > 0)\n            {\n                sum
    += nums[index--];\n                digit++;\n            }\n            sorted.Add(sum);\n
    \       }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp02_5mb_c.cs(19,45): error CS0103: The name ''CultureInfo'' does not exist
    in the current context

    /tmp/tmp02_5mb_c.cs(28,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long Sum
    = nums.Sum();\n        List<long> res = nums.ToList();\n\n        long temp =
    Sum;\n        long temp2 = 0;\n\n        for (int i = 0; i < res.Count; i++) {\n
    \           temp2 = Convert.ToInt64(Math.Floor(temp));\n            if (temp2
    == Sum) {\n                res.Insert(i, temp2);\n            }\n            temp
    = temp - temp2;\n        }\n        return res;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjruaxm8o.cs(26,42): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659976371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // sort
    based on the sum of their digits\n        nums.Sort();\n        long sum = 0;\n
    \       foreach (long i in nums)\n            sum += i;\n        List<long> result
    = new List<long>();\n        for (int i = 0; i < nums.Count; i++)\n        {\n
    \           if (sum == nums[i])\n                result.Add(nums[i]);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5df09bb12d7d4689acbb20158c6ca90e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5df09bb12d7d4689acbb20158c6ca90e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Array.Sort(nums,
    (x, y) => Math.Abs(x - y));\n        return nums;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6v4st3_r.cs(19,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp6v4st3_r.cs(19,26): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums =
    nums.Distinct().OrderBy(x => x).ToList();\n        long[] vals = new long[nums.Count];\n
    \       int pos = 0;\n        foreach (long num in nums) {\n            while
    (num != 0) {\n                vals[pos++] = num % 10;\n                num = num
    / 10;\n            }\n        }\n        long[] sorted = new long[pos];\n        pos
    = 0;\n        foreach (long num in vals) {\n            sorted[pos++] = num;\n
    \       }\n        List<long> res = new List<long>();\n        for (int i = 0;
    i < sorted.Count; i++) {\n            res.Add(sorted[i]);\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92kza9v5.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmp92kza9v5.cs(34,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int sum
    = 0;\n        long digitSum = 0;\n        bool sorted = true;\n        List<long>
    result = new List<long>();\n        long temp = 0;\n        foreach (long n in
    nums) {\n            if (n == temp) {\n                sorted = false;\n                digitSum
    = 0;\n            }\n            else {\n                temp = n;\n                digitSum
    += n % 10;\n            }\n            sum += n % 10;\n        }\n        if (sorted)\n
    \           result.Add(temp);\n        else\n            result.Add(temp);\n        for
    (int i = 0; i < nums.Count; i++) {\n            bool found = false;\n            long
    newSum = sum;\n            for (int j = i; j < nums.Count; j++) {\n                newSum
    += nums[j] % 10;\n                if (newSum > digitSum)\n                    break;\n
    \               if (newSum == digitSum) {\n                    found = true;\n
    \                   break;\n                }\n            }\n            if (found)\n
    \               result.Add(nums[i]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuvkj8d4b.cs(33,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int sum
    = 0;\n        int n = nums.Count;\n        long[] digi = new long[n];\n        for
    (int i = 0; i < n; i++)\n            digi[i] = nums[i];\n        int index = 0;\n
    \       for (int i = 0; i < n; i++)\n            sum += digi[i];\n        int[]
    indexSum = new int[n];\n        for (int i = 0; i < n; i++)\n            indexSum[digi[i]]
    += 1;\n        index = 0;\n        for (int i = 0; i < n; i++)\n            if
    (indexSum[i] != 1)\n                index += indexSum[i];\n        for (int i
    = 0; i < n; i++)\n            indexSum[i] = indexSum[i] / 2;\n        List<long>
    result = new List<long>();\n        for (int i = 0; i < n; i++)\n            if
    (indexSum[i] != 1)\n                result.Add(nums[indexSum[i] - 1]);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwu5_z8lj.cs(26,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here.\n        List<long> numsSorted = new List<long>();\n        foreach
    (long num in nums) {\n            long sum = 0;\n            while (num > 0) {\n
    \               sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum != 0) {\n                numsSorted.Add(sum);\n                numsSorted.Add(num);\n
    \           }\n        }\n        numsSorted.Sort();\n        return numsSorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkdoeer42.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here\n        int maxSum = nums.Sum(x => x);\n        int index = 0;\n
    \       var list = new List<long>();\n        while (nums.Any()) {\n            int
    sum = nums.Sum(x => x);\n            while (sum > maxSum) {\n                maxSum
    -= nums[index];\n                index++;\n                nums.RemoveAt(index);\n
    \           }\n            list.Add(nums[index]);\n            index++;\n            nums.RemoveAt(index);\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0w93zu_5.cs(20,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0w93zu_5.cs(24,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0w93zu_5.cs(26,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count()
    == 0) return nums;\n\n        List<long> sorted = new List<long>();\n        long
    sum = 0;\n\n        // Find sum of digits for first number\n        foreach (long
    n in nums) {\n            sum += n;\n        }\n        sorted.Add(sum);\n\n        //
    Find sum of digits for next numbers\n        for (int i = 1; i < nums.Count; i++)
    {\n            long sum = 0;\n            for (int j = 0; j < i; j++) {\n                sum
    += nums[j];\n            }\n            sum += nums[i];\n            sorted.Add(sum);\n
    \       }\n\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2iy6dhec.cs(32,18): error CS0136: A local or parameter named ''sum'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        bool first = true;\n
    \       foreach (long num in nums)\n        {\n            sum += num;\n            bool
    added = false;\n            foreach (long otherSum in result)\n            {\n
    \               if (otherSum == sum)\n                {\n                    result.Remove(otherSum);\n
    \                   result.Insert(result.IndexOf(num), num);\n                    added
    = true;\n                    break;\n                }\n            }\n            if
    (!added)\n            {\n                result.Add(num);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index must
    be within the bounds of the List.\nParameter name: index\n  at System.Collections.Generic.List`1[T].Insert
    (System.Int32 index, T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x0005e]
    in <e4d6bf8842dc49a481fe060994cd26ff>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <e4d6bf8842dc49a481fe060994cd26ff>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index must be within the bounds of the List.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].Insert (System.Int32 index,
    T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x0005e] in <e4d6bf8842dc49a481fe060994cd26ff>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <e4d6bf8842dc49a481fe060994cd26ff>:0
    \n"
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    sortedNums = new List<long>();\n        List<long> digits = new List<long>(nums.Count);\n
    \       foreach (var n in nums)\n            digits.Add(n % 10);\n        List<int>
    digitSums = new List<int>(digits.Count);\n        foreach (var d in digits)\n
    \           digitSums.Add(digitSums.Count == 0 ? d : digitSums[digitSums.Count
    - 1] + d);\n        List<int> sortedDigitSums = digitSums.OrderBy(n => n).ToList();\n
    \       int bestSum = -1;\n        int bestIndex = -1;\n        int index = 0;\n
    \       int sum = 0;\n        int currentSum = 0;\n        int currentDigit =
    0;\n        for (int i = 0; i < sortedDigitSums.Count; i++) {\n            sum
    = digitSums[i];\n            currentDigit = sortedDigitSums[i];\n            if
    (bestSum < 0 || sum < bestSum) {\n                bestSum = sum;\n                bestIndex
    = i;\n            }\n        }\n        for (int i = 0; i < sortedDigitSums.Count;
    i++) {\n            sum = digitSums[i];\n            currentDigit = sortedDigitSums[i];\n
    \           if (sum == bestSum && i == bestIndex)\n                sortedNums.Add(nums[index]);\n
    \           else {\n                index++;\n                sortedNums.Add(nums[index]);\n
    \               currentSum = sum - currentDigit;\n                if (currentSum
    != 0)\n                    index++;\n            }\n        }\n        return
    sortedNums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8t5l59e4.cs(25,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long largest
    = nums.Last();\n        List<long> result = new List<long>();\n        // Sort
    the list by summing the digits of the number\n        foreach (long n in nums)
    {\n            int digitSum = n.ToString().Sum(d => d == '-' ? -1 : d >= '0' ?
    d : d - '0');\n            // If the sum is larger than the largest digit, move
    it to the end of the list\n            if (digitSum > largest) result.Add(n);\n
    \           else if (digitSum < largest) {\n                // If the same sum
    is found, find the smallest index\n                int smallest = nums.FindIndex(i
    => i > n);\n                // If that index is not smaller than the largest index,
    swap them\n                if (smallest != nums.FindIndex(i => i < n)) nums[smallest]
    = nums[nums.FindIndex(i => i < n)];\n                nums[nums.FindIndex(i =>
    i < n)] = n;\n            }\n            // If the sum is smaller, move the largest
    to the end of the list\n            else if (digitSum < largest) result.Add(largest);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8807462c449c445ab2021429a02167b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8807462c449c445ab2021429a02167b2>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x00001] in <8807462c449c445ab2021429a02"
  stdout: ''
  timestamp: 1659976371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return new List<long>();\n        long total = 0;\n        long sum = 0;\n
    \       foreach (var item in nums)\n        {\n            sum += item;\n        }\n
    \       foreach (var item in nums)\n        {\n            total += item;\n        }\n
    \       if (sum != total) return nums.OrderBy(item => item - total).ToList();\n
    \       return nums.OrderBy(item => item - sum).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4024f247a20448bb700eb86507fb6b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4024f247a20448bb700eb86507fb6b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count()
    == 0) return nums;\n        // Use an OrderedDictionary to store duplicate sums
    along with the index\n        Dictionary<long, List<long>> sums = new Dictionary<long,
    List<long>>();\n        // Sum all integers\n        long total = 0;\n        foreach
    (long n in nums) {\n            total += n;\n            sums[total].Add(n);\n
    \       }\n        // Sort by summing up the digits\n        List<long> sortedNums
    = new List<long>();\n        foreach (long n in nums) {\n            long sum
    = 0;\n            int count = 0;\n            for (int i = 0; i < n.Length; i++)
    {\n                if (n % 10 != 0) {\n                    sum = (sum * 10) +
    n % 10;\n                    count++;\n                }\n                n /=
    10;\n            }\n            sortedNums.Add(sum);\n            if (sums.ContainsKey(sum))
    {\n                sums[sum].Insert(count, sum);\n            }\n            else
    {\n                sums.Add(sum, new List<long>() { sum });\n            }\n        }\n
    \       return sortedNums.Count == 0 ? new List<long>() : sortedNums.GroupBy(i
    => i).Select(i => i.First()).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_rb9ytyc.cs(33,35): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_rb9ytyc.cs(38,17): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Sort
    nums in ascending order\n        // TODO: Replace the following code with a bubble
    sort implementation\n        // http://en.wikipedia.org/wiki/Bubble_sort\n\n        List<long>
    sorted = new List<long>(nums);\n\n        // Sort nums in ascending order\n        for(int
    i = 0; i < nums.Count; i++ ){\n            for(int j = 0; j < nums.Count; j++){\n
    \               if(nums[j] <= nums[j + 1]){\n                    long temp = nums[j];\n
    \                   nums[j] = nums[j + 1];\n                    nums[j + 1] =
    temp;\n                    //Console.WriteLine(temp);\n                }\n            }\n
    \       }\n        //Console.WriteLine();\n\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x00019] in <2b156f3ba95e4458ab70e054edbd0278>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <2b156f3ba95e4458ab70e054edbd0278>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x00019] in <2b156f3ba95e4458ab70e054edbd0278>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <2b156f3ba95e4458ab70e054edbd0278>:0
    \n"
  stdout: ''
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // TODO:
    write your code here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv2nmorlv.cs(18,30): error CS0161: ''Problem.OrderByPoints(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        foreach (var n in nums) {\n            sum += n;\n        }\n        long
    digitSum = 0;\n        int index = 0;\n        var sortedNums = nums.OrderBy(n
    => n.ToString()).ToList();\n        for (int i = 0; i < nums.Count; i++) {\n            digitSum
    = 0;\n            while (digitSum >= 10) {\n                digitSum -= 10;\n
    \               index++;\n            }\n            digitSum = sum - digitSum;\n
    \           while (digitSum >= digits[index]) {\n                digitSum -= digits[index];\n
    \               index++;\n            }\n            sortedNums.Add(index - 1);\n
    \       }\n        return sortedNums;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvytl_5cl.cs(33,32): error CS0103: The name ''digits'' does not exist in
    the current context

    /tmp/tmpvytl_5cl.cs(34,29): error CS0103: The name ''digits'' does not exist in
    the current context

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var dict
    = new Dictionary<long, int>();\n        foreach (var item in nums) {\n            int
    pos = 0;\n            while (item.ToString().Length > 0) {\n                int
    digit = Convert.ToInt32(item.ToString());\n                int sum = digit % 10;\n
    \               pos++;\n                if (dict.ContainsKey(sum))\n                    dict[sum]
    = pos;\n                else\n                    dict[sum] = sum;\n                item
    /= 10;\n            }\n        }\n        var list = new List<long>();\n        foreach
    (var item in dict)\n            list.Add(nums[dict[item]]);\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0f7mggm0.cs(30,17): error CS1656: Cannot assign to ''item'' because it
    is a ''foreach iteration variable''

    /tmp/tmp0f7mggm0.cs(35,32): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<long,
    int>'' to ''long''

    '
  timestamp: 1659976371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        foreach (var item in nums) {\n            sum += item;\n        }\n
    \       nums.Sort();\n        var result = new List<long>();\n        for (int
    i = 0; i < nums.Count; i++) {\n            int j = i;\n            while (j >
    0 && nums[j - 1] > sum) {\n                result.Add(nums[j--]);\n            }\n
    \           result.Add(nums[j]);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d9ef98eda6045e391c805dd1bebea17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d9ef98eda6045e391c805dd1bebea17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           if (sum != 0) {\n                nums[nums.IndexOf(nums[i])] = sum;\n
    \           }\n        }\n        return nums.OrderBy(num => num).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8151dc86d4e1489393cd1f842dec64b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8151dc86d4e1489393cd1f842dec64b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums =
    nums.ToList();\n        nums.Sort((a, b) => a.ToString().Sum() - b.ToString().Sum());\n
    \       return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9y7j3y5g.cs(20,29): error CS1929: ''string'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmp9y7j3y5g.cs(20,50): error CS1929: ''string'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1659976371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        // Get sum of digits for all numbers in the list\n
    \       // and store it in hashset\n        var sums = new HashSet<long>(nums.Select(x
    => x.ToString().Sum(y => y)));\n        var sortedNums = new List<long>(nums.Count);\n
    \       // Add elements from original list to new list if they have sum of digits\n
    \       // which are not in the hashset yet\n        for (int i = 0; i < nums.Count;
    i++) {\n            long sum = nums[i].ToString().Sum(y => y);\n            if
    (!sums.Contains(sum)) {\n                sortedNums.Add(nums[i]);\n                sums.Add(sum);\n
    \           }\n        }\n        return sortedNums;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpndo8tlo9.cs(22,38): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<int>''
    to ''System.Collections.Generic.IEqualityComparer<long>''

    '
  timestamp: 1659976371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long total
    = 0;\n        bool needNew = false;\n        for (int i = 0; i < nums.Count; i++)
    {\n            total += nums[i];\n            if (needNew) {\n                nums[i]
    = total;\n                needNew = false;\n            }\n            else if
    (nums[i] == total) {\n                nums[i] = i;\n                needNew =
    true;\n            }\n        }\n        return nums;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45f723af507c4c6aa268eb7e8af6a6ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45f723af507c4c6aa268eb7e8af6a6ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var digitSum
    = nums.Select(n => n.ToString().ToCharArray().Sum(c=>(int)c)).ToArray();\n        var
    uniqueDigitSum = new HashSet<long>(digitSum);\n        return nums.OrderBy(n=>uniqueDigitSum.Contains(n.ToString().ToCharArray().Sum(c=>(int)c))).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw84h3bb1.cs(20,48): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''System.Collections.Generic.IEqualityComparer<long>''

    '
  timestamp: 1659976371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // TODO:
    Implement this method\n        List<long> res = new List<long>();\n        long
    sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n
    \           res.Add(sum);\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed0b6956ec40466097ef9ab5603c404e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed0b6956ec40466097ef9ab5603c404e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        long sum = nums.Sum(x => x);\n        List<long> result
    = new List<long>();\n        long lastDigit = sum % 10;\n        while (sum >
    0) {\n            if (sum < 10) {\n                long value = sum - lastDigit;\n
    \               result.Add(value);\n                sum -= value;\n            }
    else {\n                result.Add(lastDigit);\n                break;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f76a2b4fd793458992f1edd1dd6198d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f76a2b4fd793458992f1edd1dd6198d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    newList = new List<long>();\n        List<long> tempList = new List<long>();\n
    \       foreach (long n in nums) {\n            tempList.Add(n);\n        }\n
    \       long lastSum = 0;\n        long digitSum = 0;\n        int lastDigitIndex
    = -1;\n        bool flag = true;\n        for (int i = 0; i < tempList.Count;
    i++) {\n            digitSum = tempList[i];\n            if (digitSum > 0) {\n
    \               flag = false;\n                lastSum = digitSum;\n            }\n
    \           if (flag && lastSum != 0) {\n                lastDigitIndex = i;\n
    \           }\n        }\n        if (flag == false) {\n            lastDigitIndex
    = tempList.Count - 1;\n        }\n        for (int i = 0; i < tempList.Count;
    i++) {\n            digitSum = tempList[i];\n            if (digitSum == 0) {\n
    \               lastSum = 0;\n            }\n            if (i == lastDigitIndex)
    {\n                newList.Add(lastSum);\n            } else {\n                newList.Add(digitSum);\n
    \           }\n        }\n        return newList;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0eaa30fd536f4b8b876767880dfb6d29>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0eaa30fd536f4b8b876767880dfb6d29>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Use
    hash set to get unique values and sum them up.\n        // Use Linq to sort\n
    \       var set = new HashSet<long>();\n        foreach (var num in nums)\n        {\n
    \           if (set.Contains(num))\n            {\n                var sum = 0;\n
    \               foreach (var n in set.Select(n => n.ToString()))\n                {\n
    \                   sum += Convert.ToInt64(n);\n                }\n                var
    same = sum == num;\n                if (!same)\n                {\n                    return
    nums.OrderBy(n => set.IndexOf(n)).ToList();\n                }\n            }\n
    \           else\n            {\n                set.Add(num);\n            }\n
    \       }\n        // Use Linq to sort\n        return nums.OrderBy(n => set.IndexOf(n)).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_9bem7xs.cs(29,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_9bem7xs.cs(34,46): error CS1929: ''HashSet<long>'' does not contain a
    definition for ''IndexOf'' and the best extension method overload ''MemoryExtensions.IndexOf<long>(Span<long>,
    long)'' requires a receiver of type ''Span<long>''

    /tmp/tmp_9bem7xs.cs(43,34): error CS1929: ''HashSet<long>'' does not contain a
    definition for ''IndexOf'' and the best extension method overload ''MemoryExtensions.IndexOf<long>(Span<long>,
    long)'' requires a receiver of type ''Span<long>''

    '
  timestamp: 1659976371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long[]
    arr;\n        long sum = 0;\n        for (int i = 0; i < nums.Count; i++)\n            sum
    += nums[i];\n        arr = nums.ToArray();\n        Array.Sort(arr);\n        List<long>
    ret = new List<long>();\n        for(int i = 0; i < arr.Length; i++) {\n            ret.Add(arr[i]
    - sum);\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06030d8fa56447999b7b83bd7284c0b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06030d8fa56447999b7b83bd7284c0b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    <= 0) return nums;\n        HashSet<long> sums = new HashSet<long>();\n        foreach
    (long n in nums) {\n            sums.Add(SumDigits(n));\n        }\n        List<long>
    sorted = new List<long>(nums);\n        sorted.Sort((x, y) => {\n            return
    sums.Contains(SumDigits(x)) ? sums.IndexOf(SumDigits(x)) : sums.IndexOf(SumDigits(y));\n
    \       });\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnwedq58p.cs(22,22): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpnwedq58p.cs(26,34): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpnwedq58p.cs(26,63): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpnwedq58p.cs(26,92): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Debug.Assert(nums.Count
    != 0);\n        int len = nums.Count;\n        if (len == 0) {\n            return
    nums;\n        }\n        int[] digits = new int[len];\n        long sum = 0;\n
    \       for (int i = 0; i < len; i++) {\n            digits[i] = nums[i] % 10;\n
    \           sum += digits[i];\n        }\n        Array.Sort(digits, 0, len, (x,
    y) => { return x.CompareTo(y); });\n        List<long> res = new List<long>();\n
    \       for (int i = 0; i < len; i++) {\n            res.Add(nums[i]);\n            if
    (i == 0) {\n                long tmp = sum;\n                for (int j = len;
    j > i; j--) {\n                    tmp += digits[j];\n                    if (tmp
    > sum) {\n                        break;\n                    }\n                }\n
    \               if (tmp != sum) {\n                    res.Add(tmp);\n                }\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ji1zddm.cs(27,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9ji1zddm.cs(30,36): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659976372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Your
    code here\n        Array.Sort(nums.ToArray());\n        return nums.ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b864a8a4a904ad4ad6d707b4a465f5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b864a8a4a904ad4ad6d707b4a465f5e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 2) return nums;\n        // Initialize sum of the first digit.\n        long
    sum = 0;\n        // Sum up all digits.\n        for (int i = nums.Count - 1;
    i >= 0; i--) {\n            sum += nums[i];\n        }\n        long maxSum =
    sum;\n        // Sort and return the result list.\n        List<long> result =
    new List<long>(nums);\n        // Sort according to sum of the digits, starting
    from right to left.\n        bool swapped = false;\n        for (int i = nums.Count
    - 1; i >= 0; i--) {\n            if (sum > maxSum) {\n                swapped
    = true;\n                result.Add(nums[i]);\n                sum -= nums[i];\n
    \           } else {\n                sum -= nums[i];\n            }\n        }\n
    \       // If there are remaining digits, sort them by their index in original
    list.\n        if (sum > 0) {\n            result.Sort(new DescendingComparer());\n
    \           swapped = true;\n        }\n        if (swapped) {\n            int
    last = result.Count - 1;\n            result[last] = result[nums.Count - 1];\n
    \           result[nums.Count - 1] = last;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9u2doojc.cs(42,29): error CS0246: The type or namespace name ''DescendingComparer''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int sum
    = 0;\n        // Use Sum() to compute sum\n        // Use List.Comparer to sort
    by sum in ascending order\n        return nums.OrderBy(x => x.Sum()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1zqz4bqe.cs(22,34): error CS1929: ''long'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    /tmp/tmp1zqz4bqe.cs(19,13): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0)\n            return new List<long>();\n        Dictionary<long, int> sumDict
    = new Dictionary<long, int>();\n        int sum = 0;\n        foreach (long num
    in nums)\n        {\n            sum += num;\n            int numAsInt = Convert.ToInt32(num);\n
    \           if (sumDict.ContainsKey(num))\n                sumDict[num] += numAsInt;\n
    \           else\n                sumDict.Add(num, numAsInt);\n        }\n        List<long>
    sortedList = new List<long>();\n        foreach (KeyValuePair<long, int> kvp in
    sumDict)\n        {\n            sortedList.Add(kvp.Key);\n        }\n        return
    sortedList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8etlkcb7.cs(25,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return new List<long>();\n        List<long> nums2 = new List<long>();\n
    \       long sum = 0;\n        long index = 0;\n        for (long i = 0; i < nums.Count;
    i++) {\n            sum += nums[i];\n            index = i;\n        }\n        nums2.AddRange(\n
    \           nums\n            .Select(\n                n => new {\n                    n,\n
    \                   s = Math.Abs(n % 10) * Math.Pow(10, Math.Log10(Math.Abs(n
    % 10)))\n                })\n            .OrderBy(x => x.s)\n            .Select(x
    => x.n));\n        nums2.Sort();\n        nums2.Reverse();\n        if (nums2.Count()
    > 0) nums.Clear();\n        for (int i = 0; i < nums2.Count(); i++)\n            if
    (i < nums2.Count() - 1) nums.Add(nums2[i] + nums2[i + 1]);\n        else nums.Add(nums2[0]);\n
    \       return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe4i_s7e8.cs(24,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums
    == null || nums.Count == 0) return nums;\n        var sum = new Dictionary<long,
    long>();\n        foreach (var n in nums) {\n            int sum = n.ToString().Sum(x
    => Convert.ToInt32(x));\n            if (!sum.ContainsKey(sum)) {\n                sum.Add(sum,
    n);\n            } else {\n                sum[sum] = n;\n            }\n        }\n
    \       List<long> res = new List<long>();\n        foreach (var pair in sum)
    {\n            res.Add(pair.Value);\n        }\n        return res;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplexux7w3.cs(22,17): error CS0136: A local or parameter named ''sum'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmplexux7w3.cs(23,22): error CS1061: ''int'' does not contain a definition
    for ''ContainsKey'' and no accessible extension method ''ContainsKey'' accepting
    a first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmplexux7w3.cs(24,21): error CS1061: ''int'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmplexux7w3.cs(26,17): error CS0021: Cannot apply indexing with [] to an
    expression of type ''int''

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    sortedNums = new List<long>(nums);\n        List<int> digits = new List<int>();\n
    \       foreach (long i in sortedNums)\n        {\n            digits.Add(i.ToString().ToCharArray().Select(x
    => Convert.ToInt32(x).ToString()).ToArray().Sum(x => int.Parse(x)));\n        }\n
    \       Array.Sort(digits);\n        foreach (int i in digits)\n        {\n            sortedNums.Remove(digits.IndexOf(i));\n
    \       }\n        foreach (long i in sortedNums)\n        {\n            sortedNums.Add(i);\n
    \       }\n        return sortedNums;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ka3ad2x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var result
    = new List<long>();\n        if (nums.Count > 0) {\n            var sum = nums.Sum();\n
    \           var lastPoint = 0;\n            var lastPointSum = 0;\n            for
    (var i = 0; i < nums.Count; i++) {\n                var point = nums[i];\n                lastPointSum
    = lastPoint + point;\n                if (lastPointSum > sum) {\n                    result.Add(lastPoint);\n
    \                   lastPoint = point;\n                }\n                else
    if (lastPointSum == sum) {\n                    lastPoint = point;\n                }\n
    \           }\n            result.Add(lastPoint);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbu58rs5y.cs(26,32): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbu58rs5y.cs(29,33): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbu58rs5y.cs(32,33): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // write
    your solution here\n        List<long> points = new List<long>();\n        for
    (int i = 1; i < nums.Count; i++) {\n            int sum = 0;\n            int
    count = 0;\n            for (int j = 0; j < i; j++) {\n                sum +=
    nums[j];\n                if (sum > 0) {\n                    count++;\n                }\n
    \           }\n            bool flag = true;\n            while (count > 0) {\n
    \               long value = nums[i - count];\n                if (value != 0)
    {\n                    flag = false;\n                    break;\n                }\n
    \               count--;\n            }\n            if (flag) {\n                points.Add(nums[i]);\n
    \           }\n        }\n        return points;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjmm2qh8g.cs(25,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sums
    = nums.Select(n => Convert.ToInt32(n.ToString())).Sum();\n        var sorted =
    nums.OrderBy(n => sums.FirstOrDefault(s => s == n)).ToList();\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnvowdryw.cs(20,45): error CS1061: ''int'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''int'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        if (nums.Count > 0) {\n            long firstDigit
    = nums[0];\n            long secondDigit = nums[1];\n            int sumOfFirst
    = firstDigit;\n            int sumOfSecond = secondDigit;\n            int index
    = 0;\n            while (index < nums.Count) {\n                int digit = nums[index];\n
    \               sumOfFirst += digit;\n                sumOfSecond += digit * digit;\n
    \               index++;\n            }\n            int compareResult = sumOfFirst
    - sumOfSecond;\n            if (compareResult != 0) {\n                if (compareResult
    < 0) {\n                    result.Add(firstDigit);\n                    result.Add(secondDigit);\n
    \                   nums.Clear();\n                } else {\n                    result.Add(secondDigit);\n
    \                   result.Add(firstDigit);\n                    nums.Clear();\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptot3odfo.cs(23,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptot3odfo.cs(24,31): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptot3odfo.cs(27,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums.Sort();\n\n
    \       var nums2 = nums;\n        nums2.Sort();\n        List<long> result =
    nums2;\n\n        Dictionary<long, long> tempDict = new Dictionary<long, long>();\n
    \       foreach (var item in nums)\n            tempDict.Add(item, 0);\n        foreach
    (var item in nums2)\n            tempDict[item] += 1;\n        foreach (var item
    in tempDict.OrderBy(x => x.Value).ThenBy(x => x.Key))\n            result.Add(item.Value);\n\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c20a921c9ffd4255bef27b1f82647f40>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key
    has already been added. Key: 423\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert
    (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x0002c]
    in <c20a921c9ffd4255bef27b1f82647f40>:0 \n  at Problem.Main (System.String[] args)
    [0x00054] in <c20a921c9ffd4255bef27b1f82647f40>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: An item with the same key has already been added. Key:
    423\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey
    key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add
    (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n
    \ at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x0002c] "
  stdout: ''
  timestamp: 1659976372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> list = new List<long>();\n        foreach (var num in
    nums) {\n            sum += num;\n            if (list.Contains(sum)) {\n                list
    = list.OrderByDescending(x => x.ToString()).ToList();\n            }\n            list.Add(sum);\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a15dec5f383424dbe5f56d4258732e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a15dec5f383424dbe5f56d4258732e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0)\n            return nums;\n        var result = new List<long>();\n        var
    totals = nums.Select(n => new {\n            n = n,\n            sum = n % 10
    + n * 10 / 10\n        }).OrderBy(n => n.sum).Select(n => n.n).ToList();\n        //
    Find all same sum and order them by their index in original list.\n        var
    sameSum = totals.Where(total => total.Sum() == nums.Sum()).Select(total => total.Sum()).ToList();\n
    \       foreach (var same in sameSum) {\n            var index = totals.IndexOf(same);\n
    \           result.Add(same);\n            totals.RemoveAt(index);\n        }\n
    \       foreach (var total of totals)\n            result.Add(total);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzyoz24lg.cs(33,28): error CS1515: ''in'' expected

    /tmp/tmpzyoz24lg.cs(33,31): error CS1026: ) expected

    /tmp/tmpzyoz24lg.cs(33,37): error CS1002: ; expected

    /tmp/tmpzyoz24lg.cs(33,37): error CS1513: } expected

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    order = new List<long>();\n        long sum = 0;\n        bool first = true;\n
    \       for(int i = 0; i < nums.Count; i++) {\n            if(!first) {\n                sum
    += nums[i];\n            }\n            if((nums[i] < 0) != first) {\n                order.Insert(i,
    -sum);\n            }\n            sum = nums[i];\n            first = false;\n
    \       }\n        return order;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index must
    be within the bounds of the List.\nParameter name: index\n  at System.Collections.Generic.List`1[T].Insert
    (System.Int32 index, T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x0003f]
    in <f8cd9da6795e4af888719bd555b09708>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <f8cd9da6795e4af888719bd555b09708>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index must be within the bounds of the List.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].Insert (System.Int32 index,
    T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x0003f] in <f8cd9da6795e4af888719bd555b09708>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <f8cd9da6795e4af888719bd555b09708>:0
    \n"
  stdout: ''
  timestamp: 1659976372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        List<long> temp = new List<long>();\n        long
    sum = 0;\n        foreach(long num in nums)\n        {\n            sum += num;\n
    \           if (!temp.Contains(sum))\n            {\n                temp.Add(sum);\n
    \               result.Add(num);\n            }\n            else\n            {\n
    \               int index = temp.FindIndex(x => x == sum);\n                result.Insert(index,
    num);\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91d43525d7104aa98b5931178136435c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91d43525d7104aa98b5931178136435c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        List<long> result = new List<long>(nums);\n        var
    sum = result.Sum();\n        long sum2 = Convert.ToInt64(sum);\n        if (sum2
    == 0) return result;\n        List<long> sortedResult = new List<long>(nums);\n
    \       bool sortBySum = true;\n        foreach (long n in nums) {\n            long
    sumOfN = 0;\n            foreach (long k in nums) {\n                long k =
    Convert.ToInt64(Math.Abs(n));\n                long kk = Convert.ToInt64(Math.Abs(k));\n
    \               long d = kk - n;\n                sumOfN += d;\n            }\n
    \           if (sortBySum) {\n                var n = Convert.ToInt64(Math.Abs(n));\n
    \               var sumOfN = Convert.ToInt64(Math.Abs(sumOfN));\n                if
    (sumOfN < sum) {\n                    sortedResult.RemoveAll(r => r.Equals(n));\n
    \                   sortedResult.Add(n);\n                    sortBySum = false;\n
    \               }\n                if (sumOfN > sum) {\n                    sortedResult.RemoveAll(r
    => r.Equals(n));\n                    sortedResult.Add(n);\n                    sortBySum
    = true;\n                }\n            } else {\n                var n = Convert.ToInt64(Math.Abs(n));\n
    \               var sumOfN = Convert.ToInt64(Math.Abs(sumOfN));\n                if
    (sumOfN > sum) {\n                    sortedResult.RemoveAll(r => r.Equals(n));\n
    \                   sortedResult.Add(n);\n                    sortBySum = true;\n
    \               }\n                if (sumOfN < sum) {\n                    sortedResult.RemoveAll(r
    => r.Equals(n));\n                    sortedResult.Add(n);\n                    sortBySum
    = false;\n                }\n            }\n        }\n        return sortedResult;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpki7vbn5d.cs(29,22): error CS0136: A local or parameter named ''k'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpki7vbn5d.cs(35,21): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpki7vbn5d.cs(35,50): error CS0841: Cannot use local variable ''n'' before
    it is declared

    /tmp/tmpki7vbn5d.cs(36,21): error CS0136: A local or parameter named ''sumOfN''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpki7vbn5d.cs(36,55): error CS0841: Cannot use local variable ''sumOfN''
    before it is declared

    /tmp/tmpki7vbn5d.cs(48,21): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpki7vbn5d.cs(48,50): error CS0841: Cannot use local variable ''n'' before
    it is declared

    /tmp/tmpki7vbn5d.cs(49,21): error CS0136: A local or parameter named ''sumOfN''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpki7vbn5d.cs(49,55): error CS0841: Cannot use local variable ''sumOfN''
    before it is declared

    /tmp/tmpki7vbn5d.cs(35,50): error CS0165: Use of unassigned local variable ''n''

    /tmp/tmpki7vbn5d.cs(36,55): error CS0165: Use of unassigned local variable ''sumOfN''

    /tmp/tmpki7vbn5d.cs(48,50): error CS0165: Use of unassigned local variable ''n''

    /tmp/tmpki7vbn5d.cs(49,55): error CS0165: Use of unassigned local variable ''sumOfN''

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Dictionary<long,
    List<long>> sums = new Dictionary<long, List<long>>();\n        foreach (long
    num in nums) {\n            sums[num] = new List<long>();\n        }\n        foreach
    (long num in nums) {\n            long sum = 0;\n            while (num > 0) {\n
    \               sum += num % 10;\n                num /= 10;\n            }\n
    \           sums[sum].Add(num);\n        }\n        List<long> result = new List<long>();\n
    \       foreach (var sum in sums.Keys) {\n            result.AddRange(sums[sum]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpya80snru.cs(27,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        var ordered = new List<long>();\n        ordered.Add(nums[0]);\n
    \       int index = 1;\n        int sum = 0;\n        for (int i = 0; i < nums.Count
    - 1; i++) {\n            sum += nums[i];\n            if (sum == 0) continue;\n
    \           sum += nums[i + 1];\n            if (sum != 0) {\n                ordered.Add(index++);\n
    \               sum = 0;\n            }\n        }\n        return ordered;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpndeowmme.cs(25,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpndeowmme.cs(27,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    <= 1) return nums;\n        SortedList<int, int> index = new SortedList<int, int>(nums.Count
    * 2 - 1);\n        int pos = 0;\n        long sum = 0;\n        foreach (long
    num in nums) {\n            sum += num;\n            if (sum > 0) {\n                index.Add((int)pos,
    (int)(sum / 10));\n                sum += num % 10;\n            }\n            pos++;\n
    \       }\n        if (sum > 0) index.Add((int)pos, (int)(sum / 10));\n        List<long>
    ret = new List<long>();\n        for (int i = 0; i <= index.Count; i++) {\n            if
    (index.Count > 0 && index.ContainsKey(i)) {\n                int j;\n                if
    (index.TryGetValue(0, out j)) ret.Add(nums[j]);\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d9db05749bf4fc288c9ad8b907621e9>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x000dc] in <1d9db05749bf4fc288c9ad8b907621e9>:0
    \n  at Problem.Main (System.String[] args) [0x00054] in <1d9db05749bf4fc288c9ad8b907621e9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x000dc] in <1d9db05749bf4fc288c9ad8b907621e9>:0
    \n  at Problem.Main (System.String[] args) [0x00054] in <1d9db05749bf4fc288c9ad8b907621e9>:0
    \n"
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Sort
    first by sum of digits, secondly by index\n        nums.Sort((x, y) => x.AddDigits(y).CompareTo(x.AddDigits(y)));\n
    \       nums.Sort((x, y) => x.CompareTo(y));\n        return nums;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe7694qsi.cs(20,31): error CS1061: ''long'' does not contain a definition
    for ''AddDigits'' and no accessible extension method ''AddDigits'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpe7694qsi.cs(20,56): error CS1061: ''long'' does not contain a definition
    for ''AddDigits'' and no accessible extension method ''AddDigits'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    sortedNums = new List<long>(nums);\n        Dictionary<long, List<long>> sortedNumsDict
    = new Dictionary<long, List<long>>();\n        List<long> tempList = new List<long>();\n\n
    \       // Sort nums\n        foreach (long n in nums) {\n            List<long>
    list;\n            if (!sortedNumsDict.TryGetValue(n, out list)) {\n                list
    = new List<long>();\n                sortedNumsDict[n] = list;\n            }\n
    \           list.Add(n);\n        }\n\n        // Sort numsDict\n        foreach
    (KeyValuePair<long, List<long>> entry in sortedNumsDict) {\n            List<long>
    list;\n            if (!sortedNumsDict.TryGetValue(entry.Key, out list)) {\n                list
    = new List<long>();\n                sortedNumsDict[entry.Key] = list;\n            }\n
    \           list.Sort();\n            sortedNumsDict[entry.Key].AddRange(list);\n
    \       }\n\n        // Sort sortedNumsDict\n        foreach (KeyValuePair<long,
    List<long>> entry in sortedNumsDict) {\n            List<long> list = entry.Value;\n
    \           list.Sort();\n            sortedNums.AddRange(list);\n        }\n
    \       return sortedNums;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1432e09c17e040c2bad78abda67a9e98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1432e09c17e040c2bad78abda67a9e98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here\n        List<long> list = new List<long>();\n        for (int
    i = 0; i < nums.Count; i++)\n        {\n            long sum = 0;\n            for
    (int j = 0; j < nums[i].ToString().Length; j++)\n            {\n                sum
    += nums[i].ToString().Length - j;\n            }\n            list.Add(sum);\n
    \       }\n        list.Sort();\n        return list;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1a21802f2344a2f8307f8c8bc98d251>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1a21802f2344a2f8307f8c8bc98d251>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // TODO:
    Your code here\n        long num = nums[0];\n        List<long> lst = new List<long>();\n
    \       for (int i = 0; i < nums.Count; i++) {\n            long lNum = nums[i];\n
    \           long sumOfDigits = lNum;\n            while (sumOfDigits > 0) {\n
    \               int remDiv = sumOfDigits % 10;\n                sumOfDigits =
    sumOfDigits / 10;\n                if (remDiv != 0) lNum += remDiv;\n            }\n
    \           lst.Add(lNum);\n        }\n        return lst;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw5clw1t3.cs(26,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long[]
    digitSums = nums.Select(n => n.ToString().ToCharArray()\n            .Select(c
    => Convert.ToInt64(c)).Sum()).ToArray();\n\n        Array.Sort(digitSums, 0, digitSums.Length,
    (i, j) => digitSums[i] - digitSums[j]);\n\n        List<long> result = new List<long>();\n
    \       for (int i = 0; i < nums.Count; i++)\n        {\n            if (digitSums[i]
    >= 0)\n            {\n                result.Add(nums[i]);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp81m0eaog.cs(22,52): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Dictionary<long,
    long> dic = new Dictionary<long, long>();\n        foreach (long num in nums)
    {\n            if (!dic.ContainsKey(num))\n                dic.Add(num, 0);\n
    \           dic[num] += num;\n        }\n        List<long> ret = new List<long>();\n
    \       foreach (KeyValuePair<long, long> kvp in dic)\n            ret.Add(kvp.Value);\n
    \       Array.Reverse(ret.ToArray());\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d21ba9107d13427dbfdc52d4f97e5e50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d21ba9107d13427dbfdc52d4f97e5e50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here.\n        var newList = new List<long>();\n        int sum = 0;\n
    \       foreach (var item in nums) {\n            sum += item;\n            newList.Add(sum);\n
    \       }\n        return newList;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4x3ngkdu.cs(23,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            if (sum >= 10) sum -= 10;\n            result.Add(sum);\n
    \       }\n        if (nums.Count > 0 && nums[nums.Count - 1] < 0) result.Insert(0,
    nums[nums.Count - 1]);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f558f0256ff48b38a87120a80cb73bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f558f0256ff48b38a87120a80cb73bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums =
    nums.ToArray();\n        List<long> ordered = new List<long>();\n        long
    sum = 0;\n        for (long i = 0; i < nums.Length; i++)\n        {\n            sum
    += nums[i];\n            ordered.Add(sum);\n        }\n        ordered = ordered.OrderBy(x
    => x).ToList();\n        return ordered;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_fiull0f.cs(19,16): error CS0029: Cannot implicitly convert type ''long[]''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmp_fiull0f.cs(22,35): error CS1061: ''List<long>'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp_fiull0f.cs(24,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> ret = new List<long>();\n        foreach (long num in
    nums) {\n            sum += num;\n            ret.Add(num);\n        }\n        sum
    = Math.Abs(sum);\n        List<long> sorted = ret.OrderBy(n=>Math.Abs(sum-n)).ToList();\n
    \       foreach (long n in sorted) {\n            sum += n;\n        }\n        return
    sorted.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <914c798467344f6f940bff44b6f3cb71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <914c798467344f6f940bff44b6f3cb71>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Dictionary<long,
    int> dict = new Dictionary<long, int>();\n        foreach (long n in nums) {\n
    \           int index;\n            int sum = 0;\n            long temp = n;\n
    \           while (temp != 0) {\n                sum = sum + temp % 10;\n                temp
    = temp / 10;\n            }\n            index = dict.Keys.ToList().IndexOf(sum);\n
    \           dict.Add(n, index);\n        }\n        List<long> res = new List<long>();\n
    \       foreach (long n in nums) {\n            int index = dict[n];\n            if
    (index >= 0) {\n                res.Add(n);\n            }\n        }\n        return
    res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpudcsr_0w.cs(25,23): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long[]
    values = new long[nums.Count];\n        for (int i = 0; i < nums.Count; i++)\n
    \           values[i] = nums[i];\n        Array.Sort(values, (x, y) => CompareNumbers(x,
    y));\n        return new List<long>(nums);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2trom4a.cs(22,38): error CS0103: The name ''CompareNumbers'' does not
    exist in the current context

    '
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Dictionary<long,
    List<long>> dictionary = new Dictionary<long, List<long>>();\n        List<long>
    sortedList = new List<long>();\n        // sort and add every unique digit to
    dictionary\n        // and sort them by their corresponding index in nums\n        nums.Sort();\n
    \       foreach (long num in nums)\n        {\n            string tempNum = num.ToString();\n
    \           foreach (char c in tempNum)\n            {\n                long digit
    = Convert.ToInt64(c);\n                if (dictionary.ContainsKey(digit))\n                {\n
    \                   dictionary[digit].Add(num);\n                }\n                else\n
    \               {\n                    dictionary.Add(digit, new List<long>()
    { num });\n                }\n            }\n        }\n        // iterate through
    dictionary and add every item to the sorted list\n        foreach (KeyValuePair<long,
    List<long>> kvp in dictionary)\n        {\n            sortedList.AddRange(kvp.Value);\n
    \       }\n        return sortedList;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9502833399a9442d82457fe956c19ba3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9502833399a9442d82457fe956c19ba3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        Debug.Assert(nums.Count
    > 0);\n        if (nums.Count == 1) {\n            return nums;\n        }\n        long
    sum = 0;\n        List<long> ret = new List<long>();\n        long last = 0;\n
    \       foreach (long i in nums) {\n            sum += i;\n            if (sum
    == last) {\n                ret.Add(i);\n            } else {\n                last
    = sum;\n            }\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ced462b919741fcb2c6597af1fc5c7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ced462b919741fcb2c6597af1fc5c7d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long[]
    digits = nums.Select(n => n * n).ToArray();\n        long[] sums = digits.Select(d
    => d * d).ToArray();\n        Array.Sort(sums);\n        return nums.OrderBy(n
    => sums.IndexOf(sums.Sum(d => d % d == 0)).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwaz_74f7.cs(22,82): error CS1026: ) expected

    '
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Your
    code here\n        List<long> res = new List<long>();\n        long sum = 0;\n
    \       for (int i = 0; i < nums.Count; i++) {\n            long curr = nums[i];\n
    \           long sumDig = curr % 10;\n            sum += sumDig;\n            while
    (curr >= 10) {\n                curr -= 10;\n                sumDig += curr %
    10;\n                sum += sumDig;\n            }\n            res.Add(sum);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f10dcd8a5322401a9f281e91bc62a24e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f10dcd8a5322401a9f281e91bc62a24e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        for (int i = 0; i
    < nums.Count; i++) {\n            sum += nums[i];\n            result.Add(nums[i]);\n
    \       }\n        var sorted = result.OrderByDescending(x => x.GetDigitSum()).ToList();\n
    \       long tempSum = 0;\n        for (int i = 0; i < sorted.Count; i++) {\n
    \           tempSum = sorted[i].GetDigitSum();\n            if (tempSum == sum)
    {\n                result.RemoveAt(i);\n                sorted.RemoveAt(i);\n
    \               i--;\n            }\n        }\n        if (sorted.Count > 0)
    {\n            result.AddRange(sorted);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4u_uw13m.cs(25,54): error CS1061: ''long'' does not contain a definition
    for ''GetDigitSum'' and no accessible extension method ''GetDigitSum'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp4u_uw13m.cs(27,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    /tmp/tmp4u_uw13m.cs(35,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    sortedList = new List<long>();\n        long sum = 0;\n        foreach (var item
    in nums) {\n            sum += item;\n            sortedList.Add(sum);\n        }\n
    \       foreach (var item in nums.OrderBy(item => item)) {\n            sum +=
    item;\n            sortedList.Add(sum);\n        }\n        return sortedList;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80cc795c4c5c4655a9ca71878c973ff4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80cc795c4c5c4655a9ca71878c973ff4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        foreach (var n in nums) {\n            sum += n;\n        }\n        List<long>
    result = new List<long>();\n        foreach (var n in nums) {\n            if
    (sum > 0) {\n                long digit = sum % 10;\n                result.Add(n
    + digit);\n                sum -= digit;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f3c5d082cb349babd82ff1dc3d62d83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f3c5d082cb349babd82ff1dc3d62d83>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums.Sort();\n
    \       var sorted = nums.ToArray();\n        var dict = new Dictionary<long,
    List<long>>();\n        for (int i = 0; i < sorted.Length; i++) {\n            var
    sum = sorted[i].ToString().Sum(c => (int)c);\n            List<long> list;\n            if
    (dict.TryGetValue(sum, out list))\n                list.Add(i);\n            else\n
    \               dict[sum] = new List<long>{i};\n        }\n        var list =
    new List<long>();\n        foreach (var kvp in dict) {\n            list.Add(kvp.Value);\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6sxbfd1x.cs(24,24): error CS0136: A local or parameter named ''list''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6sxbfd1x.cs(32,22): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Initialize
    your variables here.\n        List<long> result = new List<long>();\n        int
    sum = 0;\n        int c = 0;\n        bool found = false;\n        // Iterate
    through your list.\n        foreach (long n in nums) {\n            // Add the
    digits of current number to your running sum.\n            sum = (sum * 10) +
    n;\n            // If the sum is equal to the target sum, add the current number
    to your result list\n            // and exit the loop.\n            if (sum ==
    nums.Sum()) {\n                result.Add(n);\n                found = true;\n
    \               break;\n            }\n            // If the current number doesn't
    match the target sum, continue the loop\n            // (since we have already
    found a number that doesn't match the target sum).\n            c += 1;\n        }\n
    \       // If no number found that sums to your target sum, return the result
    list.\n        if (!found) {\n            return result;\n        }\n        //
    Otherwise, find the number that doesn't match the target sum and return its position\n
    \       // as the result list.\n        for (int i = c; i < nums.Count; i++) {\n
    \           if (sum != nums.Sum()) {\n                return new List<long>();\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpczbz7vbh.cs(27,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var sums
    = nums.Select(n => new { n = n, sum = 0L }).ToList();\n        foreach (var n
    in nums) {\n            sums.RemoveAll(x => x.sum > 0 && x.sum >= x.n);\n            sums.Add(new
    { n = n, sum = SumDigits(n) });\n        }\n        return sums.OrderBy(x => x.sum).Select(x
    => x.n).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6u4vqrfi.cs(22,41): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int maxSum
    = nums.Max().GetDigitSum();\n        if (maxSum == 0) {\n            return nums;\n
    \       }\n        var res = new List<long>(nums);\n        res.Sort((x, y) =>
    { return Compare(x, y); });\n        var res = new List<long>(nums);\n        for
    (int i = 0; i < res.Count; i++) {\n            int sum = 0;\n            for (int
    j = 0; j < nums.Count; j++) {\n                sum += nums[j];\n                if
    (sum > maxSum) break;\n            }\n            if (sum == maxSum) {\n                res.Insert(i,
    nums.ElementAt(i));\n                nums.RemoveAt(i);\n            }\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplsh3hmme.cs(19,33): error CS1061: ''long'' does not contain a definition
    for ''GetDigitSum'' and no accessible extension method ''GetDigitSum'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmplsh3hmme.cs(24,37): error CS0103: The name ''Compare'' does not exist
    in the current context

    /tmp/tmplsh3hmme.cs(25,13): error CS0128: A local variable or function named ''res''
    is already defined in this scope

    /tmp/tmplsh3hmme.cs(29,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // 1. calculate
    the sum of the digits of nums\n        long sum = 0;\n        foreach (long n
    in nums) {\n            sum += n % 10;\n        }\n        // 2. calculate the
    powers of 10 from sum\n        List<long> power10s = new List<long>();\n        bool
    init = false;\n        for (int i = 0; i < sum; i++) {\n            long power10
    = 0;\n            while (sum >= 10) {\n                sum += n % 10;\n                power10++;\n
    \               n = n / 10;\n            }\n            power10s.Add(power10);\n
    \           if (!init) {\n                init = true;\n            }\n        }\n
    \       // 3. order nums in ascending order of their powers\n        List<long>
    result = new List<long>(nums.Count);\n        for (int i = 0; i < power10s.Count;
    i++) {\n            int j = power10s[i];\n            long n = nums[j];\n            for
    (int k = j + 1; k < nums.Count; k++) {\n                long tmp = nums[k];\n
    \               nums[k] = n;\n                n = tmp;\n            }\n            result.Add(n);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprt8x5dld.cs(30,24): error CS0103: The name ''n'' does not exist in the
    current context

    /tmp/tmprt8x5dld.cs(32,17): error CS0103: The name ''n'' does not exist in the
    current context

    /tmp/tmprt8x5dld.cs(32,21): error CS0103: The name ''n'' does not exist in the
    current context

    /tmp/tmprt8x5dld.cs(42,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your sort code here\n        int sum = 0;\n        for(int i = 0; i < nums.Count;
    i++)\n        {\n            sum += nums[i];\n        }\n        List<long> orderedNums
    = new List<long>();\n        for(int i = 0; i < nums.Count; i++)\n        {\n
    \           if(sum == nums[i])\n            {\n                orderedNums.Add(i);\n
    \           }\n        }\n        orderedNums.Sort();\n        return orderedNums;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprxgzxbxe.cs(23,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        var tmp
    = new List<long>(nums);\n        tmp.RemoveAll(n => n < 0L);\n        tmp.RemoveAll(n
    => n == 0L);\n        tmp.RemoveAll(n => n == 1L);\n        long sum = 0;\n        foreach
    (long i in tmp) {\n            sum += i;\n        }\n        Dictionary<long,
    List<long>> result = new Dictionary<long, List<long>>();\n        foreach (long
    n in tmp) {\n            List<long> list;\n            if (!result.TryGetValue(sum,
    n, ref list)) {\n                list = new List<long>();\n                result[sum]
    = list;\n            }\n            list.Add(n);\n        }\n        var ret =
    new List<long>();\n        foreach (KeyValuePair<long, List<long>> entry in result)
    {\n            ret.AddRange(entry.Value);\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmporjkopx5.cs(30,25): error CS1501: No overload for method ''TryGetValue''
    takes 3 arguments

    /tmp/tmporjkopx5.cs(30,49): error CS0165: Use of unassigned local variable ''list''

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0)\n            return nums;\n        double maxSum = nums.Aggregate(0, (sum,
    i) => sum + i);\n        var sorted = nums.OrderBy(n => CalculateSum(n, maxSum)).ToList();\n
    \       int index = 0;\n        while (nums[index] == sorted[index])\n            index++;\n
    \       while (nums[index] != sorted[index]) {\n            sorted.Insert(index,
    nums[index]);\n            index++;\n        }\n        return sorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsih5lg2_.cs(21,55): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpsih5lg2_.cs(21,55): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpsih5lg2_.cs(22,40): error CS0103: The name ''CalculateSum'' does not exist
    in the current context

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        // TODO: write your code here\n        var
    sum = nums.Sum();\n        for(int i = 0; i < nums.Count; i++)\n        {\n            int
    value = nums[i];\n            int index = i;\n            var temp = nums.Where((num,
    i) => num == value).ToList();\n            int number = temp.Count();\n            int
    sum1 = 0;\n            int sum2 = 0;\n            while (number > 0)\n            {\n
    \               sum1 += temp[number - 1];\n                sum2 += temp[number
    - 1];\n                number--;\n            }\n            int result = sum1
    - sum2;\n            if(result > 0)\n            {\n                temp = nums.Where((num,
    i) => num == value).ToList();\n                number = temp.Count();\n                sum1
    = temp[number - 1];\n                sum2 = temp[number - 1];\n                while
    (number > 0)\n                {\n                    sum1 += temp[number - 1];\n
    \                   sum2 += temp[number - 1];\n                    number--;\n
    \               }\n                result = sum1 - sum2;\n            }\n            if(result.Equals(0))\n
    \           {\n                var nums2 = nums.Where((num, i) => num != value).ToList();\n
    \               number = 0;\n                sum1 = nums2[number];\n                sum2
    = nums2[number];\n                while (number < nums2.Count)\n                {\n
    \                   sum1 += nums2[number];\n                    sum2 += nums2[number];\n
    \                   number++;\n                }\n                result = sum1
    - sum2;\n            }\n            result.Add(nums[i]);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphllauz2k.cs(24,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(32,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(33,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(36,17): error CS0136: A local or parameter named ''result''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphllauz2k.cs(41,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(42,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(45,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(46,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(55,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(56,24): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(59,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(60,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphllauz2k.cs(65,20): error CS1061: ''int'' does not contain a definition
    for ''Add'' and no accessible extension met'
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here\n        var temp = nums.ToList();\n        long sum = 0;\n        foreach
    (long item in temp)\n        {\n            sum += item;\n        }\n        List<long>
    result = new List<long>();\n        long maxSum = -1;\n        for (int i = 0;
    i < temp.Count; i++)\n        {\n            long item = temp[i];\n            bool
    isMaxSum = false;\n            while (sum != item){\n                sum += item;\n
    \               result.Add(item);\n                isMaxSum = true;\n            }\n
    \           if (sum > maxSum){\n                maxSum = sum;\n            }\n
    \       }\n        List<long> result = new List<long>(temp.Count);\n        for
    (int i = 0; i < temp.Count; i++)\n        {\n            long item = temp[i];\n
    \           bool isMaxSum = false;\n            while (sum != item){\n                sum
    += item;\n                result.Add(item);\n                isMaxSum = true;\n
    \           }\n            if (sum > maxSum){\n                maxSum = sum;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu9aisexk.cs(41,20): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmpu9aisexk.cs(31,18): warning CS0219: The variable ''isMaxSum'' is assigned
    but its value is never used

    /tmp/tmpu9aisexk.cs(45,18): warning CS0219: The variable ''isMaxSum'' is assigned
    but its value is never used

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0)\n            return nums;\n        int[] digits = nums.ToArray();\n        int[]
    sums = digits.Select((x, i) => new { x = x, i = i }).OrderBy(x => x.x).ToArray();\n
    \       List<long> sortedNums = sums.Select(x => x.x).ToList();\n        int maxIndex
    = 0;\n        for (int i = 0; i < sums.Length; i++)\n            if (sums[i].x
    != 0)\n                maxIndex = i;\n        for (int i = 0; i < sums.Length;
    i++) {\n            if (sums[i].x != 0) {\n                sortedNums[sums[i].i]
    = sums[i].x;\n                sums[i].x = 0;\n                sums[i].i = 0;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        for
    (int i = 0; i < maxIndex; i++)\n            result.Add(sortedNums[i]);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvtci1f_.cs(21,24): error CS0029: Cannot implicitly convert type ''long[]''
    to ''int[]''

    /tmp/tmpwvtci1f_.cs(22,22): error CS0029: Cannot implicitly convert type ''<anonymous
    type: int x, int i>[]'' to ''int[]''

    /tmp/tmpwvtci1f_.cs(23,52): error CS1061: ''int'' does not contain a definition
    for ''x'' and no accessible extension method ''x'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvtci1f_.cs(26,25): error CS1061: ''int'' does not contain a definition
    for ''x'' and no accessible extension method ''x'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvtci1f_.cs(29,25): error CS1061: ''int'' does not contain a definition
    for ''x'' and no accessible extension method ''x'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvtci1f_.cs(30,36): error CS1061: ''int'' does not contain a definition
    for ''i'' and no accessible extension method ''i'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvtci1f_.cs(30,49): error CS1061: ''int'' does not contain a definition
    for ''x'' and no accessible extension method ''x'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvtci1f_.cs(31,25): error CS1061: ''int'' does not contain a definition
    for ''x'' and no accessible extension method ''x'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvtci1f_.cs(32,25): error CS1061: ''int'' does not contain a definition
    for ''i'' and no accessible extension method ''i'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // Write
    your code here.\n        return nums.OrderByDescending(n => n.ToString().Sum()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp05wmqrn1.cs(20,44): error CS1929: ''string'' does not contain a definition
    for ''Sum'' and the best extension method overload ''ParallelEnumerable.Sum(ParallelQuery<int>)''
    requires a receiver of type ''ParallelQuery<int>''

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) {\n            return nums;\n        }\n        List<long> result = new
    List<long>();\n        long sum = nums.Sum();\n        long point = 0;\n        foreach
    (long n in nums) {\n            point = n % 10;\n            if (point == 0) {\n
    \               result.Add(n);\n            } else {\n                int index
    = 0;\n                while (point != 0) {\n                    point = (point
    - n%10)/10;\n                    index++;\n                }\n                result.Insert(index-1,
    n);\n            }\n        }\n        foreach (long n in result) {\n            sum
    += n;\n        }\n        foreach (long n in result) {\n            n /= 10;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1cqk18zp.cs(42,13): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        int N =
    nums.Count;\n        if (N == 0)\n            return nums;\n        if (N == 1)\n
    \           return new List<long> {nums[0]};\n        if (N > 1 && nums.Sum(x
    => Math.Abs(x - nums[0])) % 10 == 0)\n            return OrderByPoints(nums.Skip(1));\n
    \       if (N > 1 && nums.Sum(x => Math.Abs(x - nums[0])) % 10 != 0)\n            return
    OrderByPoints(nums);\n        var list = new List<long>();\n        long sum =
    0;\n        long maxSum = nums[0];\n        foreach (var x in nums) {\n            sum
    += x;\n            if (sum > maxSum) {\n                maxSum = sum;\n                list.Clear();\n
    \               list.Add(x);\n            }\n            if (sum == maxSum)\n
    \               list.Add(x);\n        }\n        if (list.Count == 0)\n            return
    nums;\n        var sumOfMaxSum = maxSum;\n        foreach (var x in nums) {\n
    \           sum += x;\n            list.remove(x);\n            if (sum > sumOfMaxSum)\n
    \               return OrderByPoints(nums);\n        }\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiwgr21bs.cs(25,34): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpiwgr21bs.cs(46,18): error CS1061: ''List<long>'' does not contain a definition
    for ''remove'' and no accessible extension method ''remove'' accepting a first
    argument of type ''List<long>'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        nums.Sort();\n
    \       Dictionary<long, List<long>> map = new Dictionary<long, List<long>>();\n
    \       foreach (var num in nums)\n        {\n            int sum = 0;\n            while
    (num != 0)\n            {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            List<long> list;\n            if (!map.TryGetValue(sum,
    out list))\n            {\n                list = new List<long>();\n                map.Add(sum,
    list);\n            }\n            list.Add(num);\n        }\n        List<long>
    result = new List<long>();\n        foreach (var entry in map)\n        {\n            List<long>
    list = entry.Value;\n            result.AddRange(list.OrderBy(n => n));\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjimhu244.cs(26,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjimhu244.cs(27,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659976373
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    ret = new List<long>();\n        long[] sums = nums.Sum(d => (long)Math.Pow(10,
    d));\n        bool first = true;\n        foreach (long sum in sums) {\n            if
    (ret.Count() == 0) ret.Add(sum);\n            if (sum < 0) continue;\n            if
    (ret.Last() == sum) ret.RemoveAt(ret.Count() - 1);\n            if (!first) {\n
    \               if (sum < ret.Last()) ret.Add(sum);\n            } else {\n                ret.Add(sum);\n
    \           }\n            first = false;\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpinvtu4f9.cs(20,23): error CS0029: Cannot implicitly convert type ''long''
    to ''long[]''

    '
  timestamp: 1659976374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        // YOUR
    CODE HERE\n        Dictionary<long, long> sums = new Dictionary<long, long>();\n
    \       List<long> results = new List<long>();\n        foreach (long number in
    nums)\n        {\n            long sum = 0;\n            for (int i = 0; i < number.Length;
    i++)\n            {\n                sum += number[i] % 10;\n            }\n            sums[sum]
    = sums[sum] + 1;\n        }\n        List<long> result = new List<long>();\n        foreach
    (KeyValuePair<long, long> entry in sums)\n        {\n            if (entry.Key
    != 0)\n            {\n                result.Add(entry.Key);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp953qa58p.cs(25,40): error CS1061: ''long'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp953qa58p.cs(27,24): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976374
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    ret = new List<long>();\n\n        var maxSum = nums.Sum(num => num % 10);\n\n
    \       nums.Sort((x, y) => sum(x, y));\n\n        if (nums.Any()) {\n            int
    i = 1;\n            while (nums.Sum(num => num % 10) != maxSum) {\n                if
    (nums.Sum(num => num % 10) < maxSum) {\n                    ret.add(nums.First());\n
    \                   nums.RemoveAt(0);\n                } else {\n                    i++;\n
    \                   nums.Insert(0, nums.First());\n                    nums.RemoveAt(0);\n
    \               }\n            }\n        }\n\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj562w5te.cs(23,29): error CS0103: The name ''sum'' does not exist in the
    current context

    /tmp/tmpj562w5te.cs(29,25): error CS1061: ''List<long>'' does not contain a definition
    for ''add'' and no accessible extension method ''add'' accepting a first argument
    of type ''List<long>'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659976374
