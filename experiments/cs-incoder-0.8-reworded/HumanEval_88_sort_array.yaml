name: HumanEval_88_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of non-negative integers, return a cocs of the\
  \ given list after sorting,\n    // you will sort the given list in ascending order\
  \ if the sum( first index value, last index value) is odd,\n    // or sort it in\
  \ descending order if the sum( first index value, last index value) is even.\n \
  \   // Note:\n    // * don't change the given list.\n    // Examples:\n    // >>>\
  \ SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
  \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
  \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L,\
  \ (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n\
  \    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L,\
  \ (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long> array)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
  \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
  \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
  \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
  \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
  \ (long)11L}))));\n    }\n\n}\n"
completions: ["        int n = array.Count;\n        if (n < 2) return array;\n  \
    \      long sum = 0;\n        int low = 0;\n        int high = n - 1;\n      \
    \  while (high > low) {\n            long mid = (low + high) / 2;\n          \
    \  sum += array[mid];\n            if (sum % 2 == 1)\n                low = mid\
    \ + 1;\n            else\n                high = mid - 1;\n        }\n       \
    \ Array.Sort(array, new DescendingComparer(sum));\n        return array;", " \
    \       long sum = 0;\n        bool isEven = true;\n        for (int i = 0; i\
    \ < array.Count; i++) {\n            sum += array[i];\n            if (sum % 2\
    \ == 0) {\n                isEven = false;\n            }\n        }\n       \
    \ if (isEven) {\n            array.Sort();\n            long temp;\n         \
    \   for (int i = 0; i < array.Count; i++) {\n                temp = array[i];\n\
    \                array[i] = array[array.Count - 1 - i];\n                array[array.Count\
    \ - 1 - i] = temp;\n            }\n        } else {\n            array.Sort();\n\
    \            long temp;\n            for (int i = 0; i < array.Count; i++) {\n\
    \                temp = array[i];\n                array[i] = array[array.Count\
    \ - 1 - i];\n                array[array.Count - 1 - i] = temp;\n            }\n\
    \            array.Sort();\n        }\n        return array;", "        if (array\
    \ == null || array.Count == 0)\n            throw new ArgumentNullException(\"\
    array\");\n        var sum = array.Sum();\n        if (sum % 2 == 0)\n       \
    \     array = array.OrderBy(x => x).ToList();\n        else\n            array\
    \ = array.OrderByDescending(x => x).ToList();\n        return array;", "     \
    \   int len = array.Count;\n        if (len < 2)\n            return array;\n\
    \        if (len > 100)\n            throw new ArgumentException(\"too large\"\
    );\n        long sum = 0;\n        for (int i = 0; i < len; i++) {\n         \
    \   sum += array[i];\n        }\n        int left = len - 1;\n        int right\
    \ = len - 2;\n        while (left >= 0 && right > 0) {\n            long curSum\
    \ = sum - array[left] + array[right];\n            if (sum % 2 == 0)\n       \
    \         curSum -= array[left];\n            else if (sum % 2 == 1)\n       \
    \         curSum -= array[right];\n            sum += curSum;\n            if\
    \ (sum > 0) {\n                sum -= array[left];\n                left--;\n\
    \            } else {\n                sum -= array[right];\n                right--;\n\
    \            }\n        }\n        while (left >= 0) {\n            sum += array[left];\n\
    \            left--;\n        }\n        while (right >= 0) {\n            sum\
    \ += array[right];\n            right--;\n        }\n        List<long> result\
    \ = new List<long>();\n        while (left >= 0 || right >= 0) {\n           \
    \ if (left >= 0)\n                result.Add(array[left--]);\n            if (right\
    \ >= 0)\n                result.Add(array[right--]);\n        }\n        return\
    \ result;", "        if (array.Count <= 0) {\n            return array;\n    \
    \    }\n        double sum = array.Sum();\n        double lastElement = array[array.Count\
    \ - 1];\n        if (sum % 2 == 0) {\n            bool firstElement = true;\n\
    \            List<long> result = new List<long>();\n            int i = 0;\n \
    \           for (int j = 0; j < array.Count; j++) {\n                long tmp\
    \ = array[j];\n                long last = lastElement;\n                if (i\
    \ == 0) {\n                    last = tmp;\n                }\n              \
    \  i++;\n                if (firstElement) {\n                    result.Add(tmp);\n\
    \                    firstElement = false;\n                } else {\n       \
    \             double left = tmp - last;\n                    if (left > 0) {\n\
    \                        result.Add(tmp);\n                    } else {\n    \
    \                    result.Add(last + left);\n                    }\n       \
    \         }\n            }\n            return result;\n        } else {\n   \
    \         bool firstElement = true;\n            List<long> result = new List<long>();\n\
    \            int i = array.Count - 1;\n            for (int j = array.Count -\
    \ 1; j > 0; j--) {\n                long tmp = array[j];\n                long\
    \ last = lastElement;\n                if (i == 0) {\n                    last\
    \ = tmp;\n                }\n                i--;\n                if (firstElement)\
    \ {\n                    result.Add(tmp);\n                    firstElement =\
    \ false;\n                } else {\n                    double left = last - tmp;\n\
    \                    if (left > 0) {\n                        result.Add(tmp);\n\
    \                    } else {\n                        result.Add(last - left);\n\
    \                    }\n                }\n            }\n            return result;\n\
    \        }", "        if (array.Count < 2) {\n            return array;\n    \
    \    }\n        long first = array.First();\n        long last = array.Last();\n\
    \        long sum = first + last;\n        if (sum % 2 == 0) {\n            SortArrayHelper(array,\
    \ first, last);\n            SortArrayHelper(array, first + 1, last);\n      \
    \  } else {\n            SortArrayHelper(array, first + 1, last);\n          \
    \  SortArrayHelper(array, first, last + 1);\n        }\n        return array;",
  "        List<long> result = new List<long>();\n        array.Sort();\n        int\
    \ sum = 0;\n        int len = array.Count;\n        for (int i = 0; i < len; i++)\
    \ {\n            sum = sum + array[i];\n            if (sum % 2 == 0) {\n    \
    \            result.Add(array[i]);\n            } else {\n                result.Add(array[len\
    \ - i - 1]);\n            }\n        }\n        return result;", "        if (array.Count\
    \ <= 0)\n        {\n            throw new Exception(\"Invalid Argument\");\n \
    \       }\n\n        var sorted = array.OrderBy(x => x).ToList();\n\n        foreach\
    \ (var item in sorted)\n        {\n            var result = IsSumEven(item.Value,\
    \ sorted.Last().Value);\n            if (result.IsEven)\n            {\n     \
    \           sorted.Reverse();\n                break;\n            }\n       \
    \     else\n            {\n                sorted.Reverse();\n               \
    \ sorted.Add(item);\n            }\n        }\n        return sorted;", "    \
    \    // Sort ascending if sum is odd\n        if (array.Sum(item => item) % 2\
    \ == 1) {\n            array.Sort((a, b) => a - b);\n        } else {\n      \
    \      // Sort descending if sum is even\n            array.Sort((a, b) => b -\
    \ a);\n        }\n        return array;", "        int[] numbers = array.ToArray();\n\
    \        Array.Sort(numbers);\n        if (numbers[numbers.length-1] % 2 != 0)\n\
    \            numbers.Reverse();\n        return numbers;", "        List<long>\
    \ result = array.ToList();\n        var totalSum = array.First();\n        var\
    \ lastSum = array.Last();\n        var sum = 0;\n        if (totalSum == lastSum)\
    \ {\n            if (lastSum % 2 == 0) {\n                sum = (long)Math.Ceiling(lastSum\
    \ / 2);\n                result.RemoveAt(1);\n                result.Insert(0,\
    \ lastSum - sum);\n            }\n            else {\n                sum = (long)Math.Floor(lastSum\
    \ / 2);\n                result.RemoveAt(result.Count - 1);\n                result.Insert(result.Count\
    \ - 1, lastSum - sum);\n            }\n        }\n        return result;", " \
    \       if (array.Count() == 0)\n            return new List<long>();\n      \
    \  var sumArray = array.Sum();\n        if (sumArray % 2 == 0)\n            return\
    \ array.OrderByDescending(a => a).ToList();\n        return array.OrderBy(a =>\
    \ a).ToList();", "        // sort list by sum (first index value, last index value)\n\
    \        long sum = 0;\n        for (int i = 0; i < array.Count - 1; i++) {\n\
    \            sum += array[i];\n        }\n        long temp = sum;\n        sum\
    \ = 0;\n        for (int i = 0; i < array.Count - 1; i++) {\n            sum +=\
    \ array[i];\n            if (sum % 2 != 0) {\n                temp = sum;\n  \
    \              sum = temp - array[i];\n            } else {\n                temp\
    \ = sum;\n                sum = sum - array[i];\n            }\n        }\n  \
    \      List<long> result = new List<long>();\n        for (int i = 0; i < array.Count\
    \ - 1; i++) {\n            result.Add(array[i]);\n        }\n        for (int\
    \ i = 0; i < array.Count - 1; i++) {\n            if (sum % 2 == 0) {\n      \
    \          result.Add(array[i]);\n            }\n        }\n        return result;",
  "        int sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n       \
    \     sum += array[i];\n        }\n\n        if (sum % 2 != 0) {\n           \
    \ array.Reverse();\n        }\n\n        return array.OrderBy(i => i).ToList();",
  "        // TODO: Write your answer in English here\n        long[] array1 = array.ToArray();\n\
    \        Array.Sort(array1);\n        long[] array2 = array1.ToArray();\n    \
    \    Array.Sort(array2);\n        return new List<long>(array2);", "        if\
    \ (array.Count <= 1) {\n            return array;\n        }\n        long firstIndex\
    \ = array.First();\n        long lastIndex = array.Last();\n        if (firstIndex\
    \ + lastIndex < firstIndex) {\n            return SortArrayDescending(array);\n\
    \        }\n        if (firstIndex + lastIndex > lastIndex) {\n            return\
    \ SortArrayAscending(array);\n        }\n        return SortArrayEvenOdd(array);",
  "        var sum = (long)0;\n        for (int i = 0; i < array.Count; i++) {\n \
    \           sum += array[i];\n        }\n        if (sum % 2 == 0) {\n       \
    \     return array.OrderBy(x => x).ToList();\n        }\n        return array.OrderByDescending(x\
    \ => x).ToList();", "        // write your code here\n        if (array.Count\
    \ > 1) {\n            var sortedArray = array.OrderByDescending(x => x).ToList();\n\
    \            return sortedArray.Sort((x, y) => x > y ? -1 : 1).ToList();\n   \
    \     }\n        return array.OrderByDescending(x => x).ToList();", "        var\
    \ list = new List<long>();\n        long sum = 0;\n        for(int i = 0; i <\
    \ array.Count - 1; i++){\n            list.Add(array[i]);\n            sum +=\
    \ array[i];\n        }\n        if(sum % 2 == 0){\n            list.Sort();\n\
    \        }else{\n            list.Reverse();\n        }\n        return list;",
  "        int sum = 0;\n        int sum2;\n        bool isDesc = true;\n        foreach\
    \ (long item in array)\n        {\n            sum += item;\n        }\n     \
    \   if (sum % 2 == 0)\n        {\n            isDesc = true;\n        }\n    \
    \    else\n        {\n            isDesc = false;\n        }\n        if (array.Count\
    \ <= 1)\n        {\n            return array;\n        }\n        long sum3 =\
    \ sum;\n        for (int i = 0; i < array.Count - 1; i++)\n        {\n       \
    \     sum3 += array[i];\n            if (sum3 % 2 == 0)\n            {\n     \
    \           sum3 += isDesc ? array[i + 1] : array[i];\n            }\n       \
    \     else\n            {\n                sum3 -= isDesc ? array[i + 1] : array[i];\n\
    \            }\n        }\n        List<long> list = new List<long>();\n     \
    \   list.Add(array[0]);\n        for (int i = 0; i < array.Count - 1; i++)\n \
    \       {\n            if (sum3 != 0)\n            {\n                if (sum3\
    \ % 2 == 0)\n                {\n                    list.Add(isDesc ? array[i\
    \ + 1] : array[i]);\n                    sum3 += isDesc ? array[i + 1] : array[i];\n\
    \                }\n                else\n                {\n                \
    \    list.Add(isDesc ? array[i] : array[i + 1]);\n                    sum3 -=\
    \ isDesc ? array[i] : array[i + 1];\n                }\n            }\n      \
    \      else\n            {\n                list.Add(isDesc ? array[i] : array[i\
    \ + 1]);\n            }\n        }\n        return list;", "        // Your code\
    \ here\n        int n = array.Count;\n        var result = new List<long>();\n\
    \n        Array.Sort(array, (x, y) => { return (x - y); });\n        if (n % 2\
    \ == 1) {\n            Array.Sort(array, (x, y) => { return (y - x); });\n   \
    \     }\n\n        for (int i = 0; i < (n - 1) / 2; i++) {\n            result.Add(array[i]);\n\
    \            result.Add(array[n - (i + 1)]);\n        }\n        if (n % 2 ==\
    \ 0) {\n            result.Add(array[n - 1]);\n        }\n\n        return result;",
  "        List<long> ret = new List<long>();\n        int count = 0;\n        int\
    \ sum = 0;\n        foreach (long item in array) {\n            count += 1;\n\
    \            sum += item;\n        }\n        if (sum % 2 == 0) {\n          \
    \  ret.AddRange(array.Take(count).OrderByDescending(item => item).ToList());\n\
    \        } else {\n            ret.AddRange(array.Take(count).OrderBy(item =>\
    \ item).ToList());\n        }\n        return ret;", "        int size = array.Count;\n\
    \        if (size == 0)\n            return array;\n        long sum = 0;\n  \
    \      for (long value : array) {\n            sum += value;\n        }\n    \
    \    bool sumOddOrEven = sum % 2 == 1;\n        List<long> result = new List<long>();\n\
    \        long value = sum;\n        long last = array[0];\n        long first\
    \ = 0;\n        while (value > 0) {\n            while (value == 1) {\n      \
    \          last = first;\n                first = array[++size];\n           \
    \     value += first - last;\n            }\n            if (sumOddOrEven) {\n\
    \                result.Add(last);\n                result.Add(first);\n     \
    \       } else {\n                result.Add(first);\n                result.Add(last);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        long currentSum = 0;\n        long sum = 0;\n       \
    \ for (int i = 0; i < array.Count; ++i) {\n            sum += array[i];\n    \
    \        if (sum % 2 == 1) // even\n            {\n                currentSum\
    \ = sum;\n                result.Add(array[i]);\n            }\n            else\
    \ // odd\n            {\n                currentSum -= sum;\n                result.Add(currentSum\
    \ + array[i]);\n            }\n        }\n        return result;", "        if\
    \ (array == null) return array;\n        List<long> result = array.OrderBy(x =>\
    \ x).ToList();\n        long sum = 0;\n        foreach (long i in array)\n   \
    \         sum += i;\n        if (sum % 2 != 0)\n            result.Reverse();\n\
    \        return result;", "        var sortedArray = array.OrderBy(i => i).ToList();\n\
    \        if (sortedArray.Sum(i => i) % 2 != 0) {\n            sortedArray = sortedArray.Reverse().ToList();\n\
    \        }\n        return sortedArray;", "        int sum = 0;\n        for (int\
    \ i = 0; i < array.Count; i++) {\n            sum += array[i];\n        }\n  \
    \      long[] newArray = array.ToArray();\n        if (sum % 2 == 0) {\n     \
    \       newArray = newArray.OrderBy(x => x).ToArray();\n        } else {\n   \
    \         newArray = newArray.OrderByDescending(x => x).ToArray();\n        }\n\
    \        return new List<long>(newArray);", "        if (array == null) {\n  \
    \          throw new ArgumentNullException(nameof(array));\n        }\n      \
    \  var result = new List<long>();\n        var minElement = array.First();\n \
    \       var maxElement = array.Last();\n        bool isFirst = true;\n       \
    \ var currentSum = minElement + maxElement;\n        foreach (var element in array)\
    \ {\n            if (isFirst) {\n                isFirst = false;\n          \
    \      minElement = element;\n            }\n            else if (element < minElement)\
    \ {\n                minElement = element;\n            }\n            else if\
    \ (element > maxElement) {\n                maxElement = element;\n          \
    \  }\n            currentSum += element;\n            if (currentSum < minElement)\
    \ {\n                result.Add(minElement);\n                minElement = element;\n\
    \            }\n            else if (currentSum > maxElement) {\n            \
    \    result.Add(maxElement);\n                maxElement = element;\n        \
    \    }\n            else if (currentSum == minElement || currentSum == maxElement)\
    \ {\n                result.Add(element);\n            }\n            currentSum\
    \ -= element;\n        }\n        return result;", "        long sum = 0;\n  \
    \      long currentSum = 0;\n        long tempSum = 0;\n        long minSum =\
    \ 0;\n        long maxSum = 0;\n        long minIndex = 0;\n        long maxIndex\
    \ = 0;\n        long midIndex = 0;\n        bool firstOddSum = false;\n      \
    \  bool lastOddSum = false;\n        int size = array.Count;\n        long leftSum\
    \ = 0;\n        long rightSum = 0;\n        long leftMax = 0;\n        long rightMax\
    \ = 0;\n        List<long> list = new List<long>();\n        array.Sort();\n \
    \       foreach (long i in array) {\n            sum += i;\n            currentSum\
    \ = sum - i;\n            if (i % 2 == 0) {\n                if (currentSum >\
    \ 0) {\n                    lastOddSum = true;\n                }\n          \
    \  } else {\n                if (currentSum < 0) {\n                    firstOddSum\
    \ = true;\n                }\n            }\n            if (firstOddSum == true)\
    \ {\n                maxSum = i;\n                maxIndex = i;\n            \
    \    leftSum = leftSum + i;\n                leftMax = leftSum;\n            }\
    \ else if (lastOddSum == true) {\n                minSum = i;\n              \
    \  minIndex = i;\n                rightSum = rightSum + i;\n                rightMax\
    \ = rightSum;\n            } else if (currentSum > 0) {\n                minSum\
    \ = i;\n                minIndex = i;\n                leftSum = leftSum + i;\n\
    \                leftMax = leftSum;\n            } else if (currentSum < 0) {\n\
    \                maxSum = i;\n                maxIndex = i;\n                rightSum\
    \ = rightSum + i;\n                rightMax = rightSum;\n            }\n     \
    \   }\n        if (maxSum < minSum) {\n            if (maxSum > 0) {\n       \
    \         leftMax = maxSum;\n                rightMax = maxSum;\n            }\
    \ else {\n                rightMax = maxSum;\n                leftMax = maxSum;\n\
    \            }\n            minSum = maxSum;\n            minIndex = maxIndex;\n\
    \            sum = 0;\n        } else if (maxSum == minSum) {\n            leftSum\
    \ = maxSum;\n            rightSum = maxSum;\n        }\n        list.Add(maxSum);\n\
    \        list.Add(maxIndex);\n        list.Add(minSum);\n        list.Add(minIndex);\n\
    \        list.Add(sum);\n        list.Add(leftSum);\n        list.Add(leftMax);\n\
    \        list.Add(rightSum);\n        list.Add(rightMax);\n        return list;",
  "        long sum = 0;\n        long total = 0;\n        foreach (long value in\
    \ array) {\n            total += value;\n        }\n        if (total % 2 == 0)\
    \ {\n            return array.OrderBy(p => p).ToList();\n        } else {\n  \
    \          return array.OrderByDescending(p => p).ToList();\n        }", "   \
    \     // TODO 1: Your code here\n        \n        int sum = 0;\n        int n\
    \ = array.Count;\n        for (int i = 0; i < n; i++) {\n            sum += array[i];\n\
    \        }\n        Array.Sort(array, (a, b) => sum - sum + a > sum - sum + b\
    \ ? 1 : -1);\n        return array;", "        if (array == null || array.Count\
    \ == 0) return new List<long>();\n        long sum = 0;\n        foreach (long\
    \ num in array) sum += num;\n        if (sum % 2 == 1) return SortArray(array.Reverse()).Reverse();\n\
    \        long tempSum = sum;\n        int[] tempArray = new int[array.Count];\n\
    \        for (int i = 0; i < array.Count; i++) {\n            tempArray[i] = i;\n\
    \            long nextNum = array[i];\n            while (nextNum != 0) {\n  \
    \              tempSum += nextNum;\n                nextNum /= 10;\n         \
    \   }\n            while (tempSum != 0) {\n                int cur = tempSum %\
    \ 10;\n                tempArray[tempArray[tempArray.IndexOf(cur)]] = cur;\n \
    \               tempSum /= 10;\n            }\n        }\n        List<long> res\
    \ = new List<long>();\n        for (int i = 0; i < array.Count; i++) {\n     \
    \       if (tempArray[i] != i) res.Add(array[i]);\n        }\n        return res;",
  "        long sum = array.Sum();\n        List<long> ans = new List<long>();\n \
    \       if (sum % 2 == 1)\n            ans = array.OrderByDescending(n => n).ToList();\n\
    \        else\n            ans = array.OrderBy(n => n).ToList();\n        return\
    \ ans;", "        List<long> ret = array.ToList();\n        if (ret.Count == 0)\
    \ {\n            return ret;\n        }\n        long first = ret.First();\n \
    \       long last = ret.Last();\n        long sum = (first + last) / 2;\n    \
    \    bool isOdd = sum % 2 == 1;\n        if (isOdd) {\n            Array.Sort(ret);\n\
    \        } else {\n            Array.Sort(ret, (i, j) => { return -ret[j].CompareTo(ret[i]);\
    \ });\n        }\n        return ret;", "        // get array's size\n       \
    \ ulong maxArrayLength = (ulong)array.Count;\n        if (array.Count < 1)\n \
    \           return array;\n\n        double sum = 0.0;\n        for (int i = 0;\
    \ i < array.Count; i++)\n            sum += array[i];\n        // if sum is odd,\
    \ sort it in ascending order\n        if (sum % 2 != 0)\n            return array.OrderBy(a\
    \ => a).ToList();\n\n        // if sum is even, sort it in descending order\n\
    \        return array.OrderByDescending(a => a).ToList();", "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        int n = (int) array.Sum();\n\
    \        int even = n % 2 == 0;\n        var result = array.OrderBy(a => a).ThenByDescending(a\
    \ => a).ToList();\n        if (even) {\n            result = result.Reverse();\n\
    \        }\n        return result;", "        Debug.Assert(array.Count > 0);\n\
    \        bool even = array.Sum(x => (int)x) % 2 == 0;\n        bool odd = !even;\n\
    \        List<long> result = new List<long>(even, odd);\n        if (even) {\n\
    \            result.Sort((x, y) => y - x);\n        }\n        else {\n      \
    \      result.Sort((x, y) => x - y);\n        }\n        return result;", "  \
    \      long totalSum = 0;\n        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < array.Count; i++) {\n            totalSum += array[i];\n\
    \            if (totalSum > 0) {\n                result.Add(array[i]);\n    \
    \        }\n        }\n        bool isSumOdd = totalSum % 2 != 0;\n        if\
    \ (isSumOdd) {\n            Array.Sort(result);\n        }\n        else {\n \
    \           Array.Sort(result, (a, b) => b - a);\n        }\n        return result;",
  "        List<long> result = array.ToList();\n        long[] a = new long[result.Count];\n\
    \        int len = a.Length;\n        int sum = 0;\n        for (int i = 0; i\
    \ < len; i++)\n        {\n            a[i] = result[i];\n            sum += a[i];\n\
    \        }\n        if (sum % 2 != 0)\n        {\n            Array.Sort(a, (a,\
    \ b) => b - a);\n        }\n        else\n        {\n            Array.Sort(a,\
    \ (a, b) => a - b);\n        }\n        for (int i = 0; i < len; i++)\n      \
    \  {\n            result[i] = a[i];\n        }\n        return result;", "   \
    \     var result = new List<long>();\n        if (array == null) {\n         \
    \   return result;\n        }\n\n        long lastValue = array.Sum() - 1;\n \
    \       bool odd = (lastValue % 2) == 1;\n        if (odd) {\n            array.Reverse();\n\
    \            long firstValue = array.First();\n            if (firstValue == lastValue\
    \ || array.First() == 0) {\n                result.Add(lastValue);\n         \
    \       return result;\n            }\n            long mid = (firstValue + lastValue)\
    \ / 2;\n            result.Add(mid);\n            array = array.Skip(1).Concat(array.Take(1).Reverse()).ToList();\n\
    \        }\n\n        long midValue = array.First();\n        long lastValue =\
    \ array.Last();\n        if (midValue == lastValue || array.Last() == 0) {\n \
    \           result.Add(midValue);\n            return result;\n        }\n\n \
    \       long mid = (midValue + lastValue) / 2;\n        result.Add(mid);\n   \
    \     array = array.Skip(1).Concat(array.Take(1).Reverse()).ToList();\n      \
    \  return result;", "        int max = array.Max();\n        int min = array.Min();\n\
    \        // find the min and max values\n        int minIndex = 0;\n        int\
    \ maxIndex = 0;\n        for (int i = 0; i < array.Count; i++) {\n           \
    \ if (max > array[i]) {\n                maxIndex = i;\n                max =\
    \ array[i];\n            }\n            if (min < array[i]) {\n              \
    \  minIndex = i;\n                min = array[i];\n            }\n        }\n\
    \        // sort the arrays\n        long temp = 0;\n        long minSum = min\
    \ * (min + 1) / 2;\n        long maxSum = max * (max + 1) / 2;\n        // sort\
    \ the first array\n        for (int i = minIndex; i <= maxIndex; i++) {\n    \
    \        temp = array[i];\n            if (temp >= minSum) {\n               \
    \ array[i] = min + 1;\n            } else if (temp <= maxSum) {\n            \
    \    array[i] = max + 1;\n            }\n        }\n        long sum = 0;\n  \
    \      List<long> ret = new List<long>();\n        for (int i = 0; i < array.Count;\
    \ i++) {\n            sum += array[i];\n            ret.Add(array[i]);\n     \
    \   }\n        // sort the second array\n        for (int i = maxIndex; i >= minIndex;\
    \ i--) {\n            temp = array[i];\n            if (temp >= minSum) {\n  \
    \              array[i] = min + 1;\n            } else if (temp <= maxSum) {\n\
    \                array[i] = max + 1;\n            }\n        }\n        sum =\
    \ 0;\n        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n\
    \            ret.Add(array[i]);\n        }\n        return ret;", "        List<long>\
    \ list = new List<long>(array);\n        long sum = 0;\n        long firstValue\
    \ = 0;\n        long lastValue = 0;\n        for (int i = 0; i < list.Count; i++)\
    \ {\n            firstValue = list[i];\n            sum += firstValue;\n     \
    \       lastValue = list[i];\n            list.RemoveAt(i);\n        }\n     \
    \   if (sum % 2 != 0)\n            list.Reverse();\n        SortList(list, firstValue,\
    \ lastValue);\n        return list;", "        List<long> sortedArray = new List<long>();\n\
    \        long sum = array.Sum();\n        bool isSumEven = sum % 2 == 0;\n\n \
    \       bool isDescendingOrder = isSumEven ? !array.Reverse().IsEmpty : array.IsEmpty;\n\
    \n        if (array.IsEmpty)\n            return sortedArray;\n\n        if (array.Count\
    \ == 2)\n        {\n            sortedArray = array;\n        }\n        else\n\
    \        {\n            List<long> firstHalf = new List<long>();\n           \
    \ List<long> secondHalf = new List<long>();\n            long firstElement = array.First();\n\
    \            long lastElement = array.Last();\n            long sum = firstElement\
    \ + lastElement;\n\n            while (sum != 0)\n            {\n            \
    \    long currentSum = sum;\n                firstHalf.Add(firstElement);\n  \
    \              secondHalf.Add(lastElement);\n                sum = sum - currentSum;\n\
    \n                firstElement = firstElement + lastElement;\n               \
    \ lastElement = currentSum - firstElement;\n                sum = sum - currentSum;\n\
    \            }\n\n            sortedArray = firstHalf.Concat(secondHalf).Concat(isDescendingOrder\
    \ ? array.Reverse() : array).ToList();\n        }\n\n        return sortedArray;",
  "        if (array.Count == 0) return new List<long>();\n        long s = array.First();\n\
    \        long e = (long)array.Last();\n        if (sumEven(s, e) % 2 == 0) {\n\
    \            List<long> result = new List<long>();\n            for (int i = 0;\
    \ i < array.Count; i++) {\n                result.Add(array[i]);\n           \
    \ }\n            Array.Sort(result);\n            return result;\n        } else\
    \ {\n            List<long> result = new List<long>();\n            for (int i\
    \ = array.Count - 1; i >= 0; i--) {\n                result.Add(array[i]);\n \
    \           }\n            Array.Sort(result);\n            return result;\n \
    \       }", "        if (array.Count == 0) {\n            throw new ArgumentException(\"\
    Input array length must be greater than zero\");\n        }\n        long sum\
    \ = 0;\n        foreach (var item in array) {\n            sum += item;\n    \
    \    }\n        if (sum % 2 == 1) {\n            array = array.OrderByDescending(a\
    \ => a).ToList();\n        } else {\n            array = array.OrderBy(a => a).ToList();\n\
    \        }\n        return array;", "        if (array.Count > 0) {\n        \
    \    long sum = 0;\n            foreach (long l in array) {\n                sum\
    \ += l;\n            }\n\n            if (sum % 2 == 0) {\n                return\
    \ SortArray(array.OrderBy(l => l).ToList());\n            }\n            else\
    \ {\n                return SortArray(array.OrderByDescending(l => l).ToList());\n\
    \            }\n        }\n        return new List<long>();", "        int N =\
    \ array.Count;\n        if (N == 0) {\n            throw new ArgumentException(\"\
    The array must not be empty\", \"array\");\n        }\n        var result = array.ToList();\n\
    \        if (array.Sum() % 2 == 1) {\n            result.Sort((x, y) => { return\
    \ y - x; });\n        } else {\n            result.Sort((x, y) => { return x -\
    \ y; });\n        }\n        return result;", "        Debug.WriteLine(array);\n\
    \        int n = array.Count;\n        if (n == 0) return array;\n        List<long>\
    \ res = new List<long>();\n        long sum = 0;\n        long lastVal = array.Last();\n\
    \        bool isEven = lastVal % 2 == 0;\n        long lastVal1 = array.Last();\n\
    \        int index = 0;\n        foreach (long i in array)\n        {\n      \
    \      index++;\n            sum += i;\n            if (isEven)\n            {\n\
    \                if (sum < lastVal1)\n                {\n                    res.Add(i);\n\
    \                }\n                else\n                {\n                \
    \    if (i == 0)\n                    {\n                        res.Add(lastVal);\n\
    \                    }\n                    else\n                    {\n    \
    \                    res.Add(lastVal);\n                    }\n              \
    \      break;\n                }\n            }\n            else\n          \
    \  {\n                if (sum > lastVal1)\n                {\n               \
    \     res.Add(i);\n                }\n                else\n                {\n\
    \                    if (i == 0)\n                    {\n                    \
    \    res.Add(lastVal);\n                    }\n                    else\n    \
    \                {\n                        res.Add(lastVal);\n              \
    \      }\n                    break;\n                }\n            }\n     \
    \   }\n        Debug.WriteLine(res);\n        return res;", "        var result\
    \ = (array.Count > 1)\n            ? ((array.Sum() == array.Last()) \n       \
    \         ? (array.OrderByDescending(x => x).ToList())\n                : (array.OrderBy(x\
    \ => x).ToList()))\n            : (array.OrderBy(x => x).ToList());\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (var value in array) {\n            sum += value;\n    \
    \        result.Add(value);\n        }\n        if (sum % 2 == 1) {\n        \
    \    Sort(result, array.Count);\n        } else {\n            Sort(result.Reverse(),\
    \ array.Count);\n        }\n        return result;", "        long sum = 0;\n\
    \        List<long> result = new List<long>();\n        if (array.Count > 0) {\n\
    \            sum = array.Sum();\n            int mid = array.Count / 2;\n    \
    \        int evenSum = sum / 2;\n            if (sum % 2 == 0) {\n           \
    \     if (array.Count > 1) {\n                    for (int i = mid; i <= array.Count\
    \ - 1; i++) {\n                        result.Add(array[i]);\n               \
    \     }\n                    for (int i = 0; i < mid; i++) {\n               \
    \         result.Add(array[i]);\n                    }\n                    for\
    \ (int i = mid; i >= 0; i--) {\n                        result.Add(array[i]);\n\
    \                    }\n                }\n            }\n            else {\n\
    \                if (array.Count > 1) {\n                    for (int i = mid;\
    \ i <= array.Count - 1; i++) {\n                        result.Add(array[i]);\n\
    \                    }\n                    for (int i = 0; i < mid; i++) {\n\
    \                        result.Add(array[i]);\n                    }\n      \
    \              for (int i = mid; i >= 0; i--) {\n                        result.Add(array[i]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>(array);\n        if (result.Count\
    \ < 2) return result;\n        if (result.Count % 2 == 1) {\n            result.Reverse();\n\
    \        }\n        var sum = result.Aggregate((c, n) => c + n);\n        if (sum\
    \ % 2 == 0) {\n            result.Sort((x, y) => x.CompareTo(y));\n        } else\
    \ {\n            result.Sort((x, y) => y.CompareTo(x));\n        }\n        return\
    \ result;", "        int n = array.Count;\n        int sum = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            sum = sum + array[i];\n        }\n\n     \
    \   // Sort the array\n        if (sum % 2 == 0) {\n            List<long> temp\
    \ = new List<long>();\n            temp.AddRange(array);\n            temp.Sort();\n\
    \            return temp;\n        } else {\n            List<long> temp = new\
    \ List<long>();\n            temp.AddRange(array.Reverse());\n            temp.Sort();\n\
    \            return temp.Reverse();\n        }", "        if (array.Count == 0)\
    \ {\n            Console.WriteLine(\"The given array is empty!\");\n         \
    \   return new List<long>(new long[0]);\n        }\n        long[] longArray =\
    \ array.ToArray();\n        int[] intArray = longArray.Select(i => i).ToArray();\n\
    \        double[] doubleArray = intArray.Select(i => (double)i).ToArray();\n \
    \       int[] reverseArray = doubleArray.Select(d => (int)(d * 100)).ToArray();\n\
    \        int[] sortedArray = reverseArray.Select(i => intArray[(int)i]).ToArray();\n\
    \        int[] reversedSortedArray = sortedArray.Select(i => (int)(i * 100)).ToArray();\n\
    \        int[] reverseSortedSortedArray = reversedSortedArray.Select(i => intArray[(int)i]).ToArray();\n\
    \        int[] sortedSortedArray = reverseSortedSortedArray.Select(i => intArray[(int)i]).ToArray();\n\
    \        int[] sortedSortedSortedArray = sortedSortedArray.Select(i => intArray[(int)i]).ToArray();\n\
    \        int[] sortedSortedSortedSortedArray = sortedSortedSortedSortedArray.Select(i\
    \ => intArray[(int)i]).ToArray();\n        int[] sortedSortedSortedSortedSortedArray\
    \ = sortedSortedSortedSortedSortedArray.Select(i => intArray[(int)i]).ToArray();\n\
    \        int[] sortedSortedSortedSortedSortedSortedArray = sortedSortedSortedSortedSortedSortedSortedArray.Select(i\
    \ => intArray[(int)i]).ToArray();\n        int[] sortedSortedSortedSortedSortedSortedSortedSortedArray\
    \ = sortedSortedSortedSortedSortedSortedSortedSortedArray.Select(i => intArray[(int)i]).ToArray();\n\
    \        int[] sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedArray\
    \ = sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedArray.Select(i\
    \ => intArray[(int)i]).ToArray();\n        int[] sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedArray\
    \ = sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedArray.Select(i\
    \ => intArray[(int)i]).ToArray();\n        int[] sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedArray\
    \ = sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedArray.Select(i\
    \ => intArray[(int)i]).ToArray();\n        int[] sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedArray\
    \ = sortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted", "   \
    \     long sum = array.Sum();\n        // use Sum() to calculate the sum value\n\
    \        long evenSum = sum / 2;\n        long oddSum = sum / 2 + sum % 2;\n \
    \       bool isOdd = (oddSum > evenSum);\n\n        long[] arr = array.ToArray();\n\
    \        Array.Sort(arr);\n\n        if (isOdd)\n            Array.Sort(arr);\n\
    \        return arr.ToList();", "        if (array.Count <= 0)\n            return\
    \ array;\n        bool odd = array.Sum() % 2 == 1;\n        if (odd)\n       \
    \     array.Sort();\n        else\n            array.Reverse();\n        return\
    \ array;", "        int[] index = new int[array.Count];\n        List<long> list\
    \ = new List<long>();\n        long[] array2 = new long[array.Count];\n      \
    \  int sum;\n        for (int i = 0; i < array.Count; i++) {\n            index[i]\
    \ = i;\n            sum += array[i];\n        }\n        if (sum % 2 == 0) {\n\
    \            list = array;\n        } else {\n            list = array.OrderByDescending(x\
    \ => x).ToList();\n        }\n        int temp = 0;\n        for (int i = 0; i\
    \ < list.Count; i++) {\n            temp = sum - list[i];\n            if (temp\
    \ % 2 == 0) {\n                array2[index[temp]] = list[i];\n            }\n\
    \        }\n        array.Clear();\n        array.AddRange(array2);\n        return\
    \ array;", "        var sum = array.Sum();\n        var even = sum % 2 == 0;\n\
    \        var evenIndex = array.FindIndex(i => i == even);\n        var oddIndex\
    \ = array.FindIndex(i => i == !even);\n        double left = 0;\n        double\
    \ right = 0;\n        if (even) {\n            left = array[0] + array[1];\n \
    \           right = array[evenIndex] + array[oddIndex];\n        } else {\n  \
    \          left = array[oddIndex] + array[0];\n            right = array[evenIndex]\
    \ + array[oddIndex];\n        }\n        var leftArr = array.GetRange(left);\n\
    \        var rightArr = array.GetRange(right);\n        var newList = new List<long>(leftArr.Count\
    \ + rightArr.Count);\n        newList.AddRange(leftArr);\n        newList.AddRange(rightArr);\n\
    \        return newList;", "        // Your code here\n        List<long> result\
    \ = array.OrderBy(x => x).ToList();\n        if (result.Sum() % 2 != 0)\n    \
    \    {\n            result.Reverse();\n        }\n        return result;", " \
    \       List<long> sorted = new List<long>();\n        var result = new int[array.Count];\n\
    \        for (int i = 1; i < array.Count; i++) {\n            result[i - 1] =\
    \ 0;\n        }\n        for (int i = 1; i < array.Count; i++) {\n           \
    \ result[i - 1] += array[i];\n        }\n        int j = array.Count - 1;\n  \
    \      long sum = 0;\n        while (j > 0) {\n            sum += array[j--];\n\
    \            int tmpSum = sum;\n            sum -= result[j];\n            result[j--]\
    \ = tmpSum;\n        }\n        for (int i = 0; i < array.Count; i++) {\n    \
    \        sorted.Add(array[i]);\n        }\n        if (sorted.Count % 2 == 0)\
    \ {\n            sorted.Reverse();\n        }\n        return sorted;", "    \
    \    bool evenSum = array.Sum(x => x) % 2 == 0;\n        long odd = array.Sum(x\
    \ => x);\n        if (evenSum) {\n            return array.OrderBy(x => x).ToList();\n\
    \        }\n        else {\n            return array.OrderByDescending(x => x).ToList();\n\
    \        }", "        long sum = 0;\n        long c = 0;\n        for(int i =\
    \ 0; i < array.Count; i++) {\n            sum += array[i];\n            c += array[i];\n\
    \        }\n        if (c % 2 != 0) {\n            array.Reverse();\n        \
    \    sum = sum - c;\n        }\n        var result = array.Select(x => new { x,\
    \ sum = sum }).OrderBy(x => x.sum).Select(x => x.x).ToList();\n        if (result.Count\
    \ > 0) {\n            result.RemoveAt(result.Count - 1);\n        }\n        return\
    \ result;", "        int sum = (array.First() + array.Last()) / 2;\n        bool\
    \ odd = sum % 2;\n        bool even = sum == 0;\n        if (odd) {\n        \
    \    array = array.OrderByDescending(x => x).ToList();\n        } else {\n   \
    \         array = array.OrderBy(x => x).ToList();\n        }\n        return array;",
  "        if (array == null) {\n            return null;\n        }\n        long\
    \ sum = 0;\n        long first = array[0];\n        long last = array[array.Count\
    \ - 1];\n        foreach (long i in array) {\n            sum += i;\n        }\n\
    \        // Sort the array if the sum is odd\n        if (sum % 2 != 0) {\n  \
    \          Array.Sort(array);\n        }\n        // Sort the array if the sum\
    \ is even\n        else {\n            Array.Reverse(array);\n            Array.Sort(array);\n\
    \        }\n        List<long> result = new List<long>();\n        result.Add(first);\n\
    \        foreach (long i in array) {\n            result.Add(i);\n        }\n\
    \        result.Add(last);\n        return result;", "        int first = 0;\n\
    \        int last = array.Count - 1;\n        int middle = first + (last - first)\
    \ / 2;\n\n        if (array[0].CompareTo(array[last]) % 2 == 0) {\n          \
    \  Array.Sort(array);\n        } else {\n            Array.Sort(array, reverse:\
    \ true);\n        }\n        return array;", "        List<long> res = new List<long>();\n\
    \        if (array.Count <= 1)\n            return array;\n\n        long sum\
    \ = 0;\n        int cnt = 0;\n        long last = 0;\n        bool isAsc = true;\n\
    \        if (array.Count % 2 == 1) {\n            isAsc = false;\n        }\n\n\
    \        for (int i = 0; i < array.Count - 1; i++) {\n            sum += array[i];\n\
    \            cnt++;\n            if (cnt != 1) {\n                if (isAsc) {\n\
    \                    if (sum > last) {\n                        isAsc = true;\n\
    \                    } else {\n                        res.Add(last);\n      \
    \              }\n                } else {\n                    if (sum < last)\
    \ {\n                        isAsc = false;\n                    } else {\n  \
    \                      res.Add(last);\n                    }\n               \
    \ }\n            }\n            last = array[i];\n        }\n        if (isAsc)\
    \ {\n            res.Add(last);\n        } else {\n            res.Reverse();\n\
    \        }\n        return res;", "        Debug.Assert(array.Count > 0);\n  \
    \      long[] sum = new long[array.Count - 1];\n        long sumLastIndex = array.Count\
    \ - 1;\n        long sumLastIndexRight = sumLastIndex;\n        long[] result\
    \ = new long[array.Count];\n        long[] sumRight = new long[array.Count - 1];\n\
    \        for (int i = 0; i < array.Count; i++) {\n            sum[i] = array[i];\n\
    \        }\n        for (int i = 1; i < sum.Length; i++) {\n            sumRight[i]\
    \ = sum[i - 1] + sum[i];\n        }\n        int left = 0;\n        int right\
    \ = sum.Length - 1;\n        while (left < right) {\n            while (sumRight[left]\
    \ < sumRight[right - 1] && left < right) {\n                left++;\n        \
    \    }\n            while (sumRight[left] == sumRight[right - 1]) {\n        \
    \        left++;\n                right--;\n            }\n            if (left\
    \ < right) {\n                long[] newResult = new long[right - left + 1];\n\
    \                for (int i = left; i <= right; i++) {\n                    newResult[i\
    \ - left] = sum[i];\n                }\n                result[right - left +\
    \ 1] = sum[right - 1];\n                result = newResult;\n                left\
    \ = right - left + 1;\n                sumLastIndexRight = sumRight[right - 1];\n\
    \            }\n        }\n        result[0] = array[sumLastIndexRight];\n   \
    \     sumLastIndexRight = sumLastIndexRight - 1;\n        for (int i = 0; i <\
    \ result.Length; i++) {\n            sum[i] = sumLastIndexRight;\n        }\n\
    \        return result;", "        if (array.Count == 0) return array;\n     \
    \   long first = array.First();\n        long last = array.Last();\n        if\
    \ (array.Sum() == (last + first) % 2)\n            array = array.OrderByDescending(x\
    \ => x).ToList();\n        else\n            array = array.OrderBy(x => x).ToList();\n\
    \        return array;", "        // Add code here\n\n        Array.Sort(array);\n\
    \        if (array.Sum() % 2 == 1) {\n            Array.Sort(array);\n       \
    \ }\n        return array;", "        if (array.Count() == 0) {\n            return\
    \ new List<long>();\n        }\n        // sort ascending\n        if (array.Sum(x\
    \ => x) % 2 == 1) {\n            array.Sort();\n        }\n        // sort descending\n\
    \        else if (array.Sum(x => x) % 2 == 0) {\n            array.Reverse();\n\
    \        }\n        return array;", "        array.Sort();\n        var len =\
    \ array.Count;\n        if (len < 1) {\n            return new List<long>();\n\
    \        }\n        var last = array[len - 1];\n        if (last % 2 == 0) {\n\
    \            Array.Sort(array);\n        }\n        else {\n            Array.Reverse(array);\n\
    \        }\n        return array;", "        long sum = 0;\n        long first\
    \ = 0, last = array.Count - 1;\n        do {\n            sum += array[first];\n\
    \            if (sum % 2 == 1)\n                sum += array[last];\n        \
    \    first++;\n            last--;\n        } while (last > first);\n        if\
    \ (sum % 2 == 1)\n            return array.OrderByDescending(a => a).ToList();\n\
    \        else\n            return array.OrderBy(a => a).ToList();", "        long\
    \ sum = array.Sum();\n        if (sum % 2 == 0) {\n            return array.OrderByDescending(x\
    \ => x).ToList();\n        } else {\n            return array.OrderBy(x => x).ToList();\n\
    \        }", "        int lenght = array.Count;\n        int min = array.Min();\n\
    \        int max = array.Max();\n        int sum = 0;\n        long[] cocs = new\
    \ long[lenght];\n        bool desc = false;\n        for (int i = 0; i < lenght;\
    \ i++) {\n            sum += array[i];\n            if (sum % 2 == 0)\n      \
    \          desc = true;\n            if (sum < min)\n                min = sum;\n\
    \            if (sum > max)\n                max = sum;\n            cocs[i] =\
    \ array[i];\n        }\n        if (desc)\n            Array.Reverse(cocs);\n\
    \        return array.Concat(cocs).OrderBy(x => x).ToList();", "        long odd\
    \ = array.Sum(x => x);\n        long even = array.Sum(x => x + 1);\n        int\
    \ sumEven = even % 2 == 0 ? even : even + 1;\n        int sumOdd = odd % 2 ==\
    \ 0 ? odd : odd + 1;\n        List<long> resultArray = new List<long>();\n   \
    \     if (sumOdd < sumEven)\n            Array.Reverse(array);\n        var pivot\
    \ = array.Count / 2;\n        var pivotedArray = array.Skip(pivot).ToArray();\n\
    \        int leftSum = 0;\n        int rightSum = 0;\n        for (int i = 0;\
    \ i < pivotedArray.Length; i++)\n            leftSum += pivotedArray[i];\n   \
    \     for (int i = pivotedArray.Length - 1; i >= 0; i--)\n            rightSum\
    \ += pivotedArray[i];\n        var leftSumOdd = leftSum % 2 == 0 ? leftSum : leftSum\
    \ + 1;\n        var rightSumOdd = rightSum % 2 == 0 ? rightSum : rightSum + 1;\n\
    \        if (leftSumOdd < rightSumOdd)\n            Array.Reverse(array);\n  \
    \      resultArray = array.Skip(pivot).ToList();\n        return resultArray;",
  "        int sum = 0;\n        var ret = array.ToList();\n        foreach (var num\
    \ in array) {\n            sum += num;\n        }\n        if (sum % 2 == 0) {\n\
    \            ret = ret.OrderByDescending(x => x).ToList();\n        } else {\n\
    \            ret = ret.OrderBy(x => x).ToList();\n        }\n        return ret;",
  "        long[] sumarray = array.ToArray();\n        Array.Sort(sumarray);\n   \
    \     long sum = sumarray.Sum();\n        Array.Sort(sumarray);\n        long\
    \ sum2 = sumarray.Sum();\n        if (sum % 2 == 0)\n            Array.Sort(sumarray);\n\
    \        else\n            Array.Reverse(sumarray);\n        long sum3 = sumarray.Sum();\n\
    \        if (sum2 % 2 == 0)\n            Array.Sort(sumarray);\n        else\n\
    \            Array.Reverse(sumarray);\n        long sum4 = sumarray.Sum();\n \
    \       long sum5 = sumarray.Sum();\n        if (sum3 % 2 == 0)\n            Array.Sort(sumarray);\n\
    \        else\n            Array.Reverse(sumarray);\n        long sum6 = sumarray.Sum();\n\
    \        long sum7 = sumarray.Sum();\n        if (sum4 % 2 == 0)\n           \
    \ Array.Sort(sumarray);\n        else\n            Array.Reverse(sumarray);\n\
    \        long sum8 = sumarray.Sum();\n        long sum9 = sumarray.Sum();\n  \
    \      if (sum5 % 2 == 0)\n            Array.Sort(sumarray);\n        else\n \
    \           Array.Reverse(sumarray);\n        long sum10 = sumarray.Sum();\n \
    \       long sum11 = sumarray.Sum();\n        if (sum6 % 2 == 0)\n           \
    \ Array.Sort(sumarray);\n        else\n            Array.Reverse(sumarray);\n\
    \        long sum12 = sumarray.Sum();\n        long sum13 = sumarray.Sum();\n\
    \        if (sum7 % 2 == 0)\n            Array.Sort(sumarray);\n        else\n\
    \            Array.Reverse(sumarray);\n        long sum14 = sumarray.Sum();\n\
    \        long sum15 = sumarray.Sum();\n        if (sum8 % 2 == 0)\n          \
    \  Array.Sort(sumarray);\n        else\n            Array.Reverse(sumarray);\n\
    \        long sum16 = sumarray.Sum();\n        long sum17 = sumarray.Sum();\n\
    \        if (sum9 %2 == 0)\n            Array.Sort(sumarray);\n        else\n\
    \            Array.Reverse(sumarray);\n        long sum18 = sumarray.Sum();\n\
    \        long sum19 = sumarray.Sum();\n        if (sum10 % 2 == 0)\n         \
    \   Array.Sort(sumarray);\n        else\n            Array.Reverse(sumarray);\n\
    \        long sum20 = sumarray.Sum();\n        long sum21 = sumarray.Sum();\n\
    \        if (sum11 % 2 == 0)\n            Array.Sort(sumarray);\n        else\n\
    \            Array.Reverse(sumarray);\n        long sum22 = sumarray.Sum();\n\
    \        long sum23 = ", "        long sum = 0;\n        var array1 = array.ToArray();\n\
    \        var array = array.ToList();\n        long sum2 = 0;\n        array.Sort(new\
    \ Comparison<long>((a, b) => {\n            sum = a + b;\n            sum2 = sum\
    \ % 2;\n            return sum2;\n        }));\n        sum2 = sum % 2;\n    \
    \    return array1;", "        int sum = 0;\n        long maxValue = array.Max();\n\
    \        bool isOdd = (sum % 2 != 0);\n        for (int i = 0; i < array.Count;\
    \ i++)\n            sum += array[i];\n        array.Sort(compare);\n        if\
    \ (sum < maxValue && isOdd)\n            array.Reverse();\n        return array;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long item in array)\n        {\n            sum += item;\n            result.Add(item);\n\
    \        }\n\n        if (sum % 2 != 0)\n        {\n            Collections.Reverse(result);\n\
    \        }\n        return result;", "        int startIndex = 0;\n        int\
    \ endIndex = array.Count - 1;\n        long sum = (long)0;\n        while (startIndex\
    \ <= endIndex) {\n            sum = sum + array[startIndex];\n            sum\
    \ = (sum % 2 == 0) ? (sum + array[endIndex]) : (sum - array[endIndex]);\n    \
    \        long temp = array[startIndex];\n            array[startIndex] = array[endIndex];\n\
    \            array[endIndex] = temp;\n            startIndex++;\n            endIndex--;\n\
    \        }\n        if (sum % 2 != 0) {\n            array.Reverse();\n      \
    \  }\n        return array;", "        var arr = array.ToArray();\n        //\
    \ Sort in ascending order.\n        Array.Sort(arr);\n        // If the sum of\
    \ the first and last element is odd, sort in descending order.\n        if (arr[0]%2\
    \ == 1 || arr[arr.Length-1]%2 == 1)\n        {\n            Array.Sort(arr, (a,\
    \ b) => b - a);\n        }\n        return array;", "        var list = new List<long>(array);\n\
    \        list.Sort();\n        if (IsEven(array, list)) {\n            list.Reverse();\n\
    \        }\n        return list;", "        if (array.Count <= 1) {\n        \
    \    return array;\n        }\n        long sum = 0;\n        long temp = 0;\n\
    \        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n\
    \        }\n        if (sum % 2 == 1) {\n            Array.Sort(array);\n    \
    \    } else {\n            Array.Reverse(array);\n        }\n        List<long>\
    \ result = new List<long>();\n        bool flag = true;\n        for (int i =\
    \ 0; i < array.Count && flag; i++) {\n            if (i == 0) {\n            \
    \    if (array[i] > array[i + 1]) {\n                    temp = array[i];\n  \
    \                  array[i] = array[i + 1];\n                    array[i + 1]\
    \ = temp;\n                }\n                flag = false;\n            } else\
    \ {\n                if (array[i] > array[i - 1]) {\n                    temp\
    \ = array[i];\n                    array[i] = array[i - 1];\n                \
    \    array[i - 1] = temp;\n                }\n            }\n            result.Add(array[i]);\n\
    \        }\n        return result;", "        if (array == null || array.Count\
    \ < 2) {\n            return array;\n        }\n        long sum = 0;\n      \
    \  foreach (long num in array) {\n            sum += num;\n        }\n       \
    \ if (sum % 2 == 1) {\n            return array.OrderByDescending(r => r).ToList();\n\
    \        } else {\n            return array.OrderBy(r => r).ToList();\n      \
    \  }", "        if (array.Count == 0) {\n            return array;\n        }\n\
    \        List<long> list = new List<long>(array);\n        if (list.Count > 1)\
    \ {\n            long first = list[0];\n            long last = list[list.Count\
    \ - 1];\n            long sum = (first + last) / 2;\n            if (sum % 2 ==\
    \ 1) {\n                list.Sort();\n            } else {\n                list.Reverse();\n\
    \            }\n        }\n        return list;", "        if (array == null)\
    \ return null;\n        if (array.Count == 0) {\n            return array;\n \
    \       }\n        bool ascending = array.FirstOrDefault() == 0 || array.LastOrDefault()\
    \ == 0;\n        if (ascending == false) {\n            int firstIndex = (array.Count\
    \ / 2) - 1;\n            int lastIndex = array.Count - 1;\n            if (array.FirstOrDefault()\
    \ == array.LastOrDefault()) {\n                firstIndex -= 1;\n            \
    \    lastIndex = array.Count - 1;\n            }\n            if (ascending ==\
    \ false) {\n                bool temp = array[0];\n                array[0] =\
    \ array[lastIndex];\n                array[lastIndex] = temp;\n            }\n\
    \            int sum = 0;\n            array.ForEach(i => sum += i);\n       \
    \     if (sum % 2 == 1) {\n                array.Reverse();\n            }\n \
    \           return array;\n        }\n        int firstIndex = 0;\n        int\
    \ lastIndex = array.Count - 1;\n        if (array.FirstOrDefault() == array.LastOrDefault())\
    \ {\n            firstIndex -= 1;\n            lastIndex = array.Count - 1;\n\
    \        }\n        bool temp = array[0];\n        array[0] = array[lastIndex];\n\
    \        array[lastIndex] = temp;\n        List<long> tempList = new List<long>();\n\
    \        List<long> newArray = new List<long>();\n        tempList.AddRange(array.GetRange(firstIndex,\
    \ array.Count - firstIndex));\n        array.RemoveRange(firstIndex, array.Count\
    \ - firstIndex);\n        tempList.ForEach(i => newArray.Add(i));\n        if\
    \ (tempList.FirstOrDefault() == tempList.LastOrDefault()) {\n            tempList.RemoveAt(0);\n\
    \        }\n        if (tempList.FirstOrDefault() == tempList.LastOrDefault())\
    \ {\n            tempList.RemoveAt(0);\n            tempList.RemoveAt(0);\n  \
    \      }\n        if (tempList.FirstOrDefault() == tempList.LastOrDefault()) {\n\
    \            tempList.RemoveAt(0);\n            tempList.RemoveAt(0);\n      \
    \  }\n        if (tempList.FirstOrDefault() == tempList.LastOrDefault()) {\n \
    \           tempList.RemoveAt(0);\n            tempList.RemoveAt(0);\n       \
    \ }\n        if (tempList.FirstOrDefault() == tempList.LastOrDefault()) {\n  \
    \          tempList.RemoveAt(0);\n            tempList.RemoveAt(0);\n        }\n\
    \        if (tempList.FirstOrDefault() == tempList.LastOrDefault()) {\n      \
    \      tempList.RemoveAt(0);\n            tempList.RemoveAt(0);\n        }\n \
    \       if (tempList.FirstOrDefault() == tempList.LastOrDefault()) {\n       \
    \     tempList.RemoveAt(0);\n            tempList.RemoveAt(0);\n        }\n  \
    \      if (tempList.FirstOrDefault() == tempList.LastOrDefault()) {\n        \
    \    tempList.RemoveAt(0);\n            tempList.RemoveAt(0);\n        }\n   \
    \     if (tempList.FirstOrDefault() == tempList.LastOrDefault()) {\n         \
    \   tempList.RemoveAt(", "        var sum = 0;\n        var len = array.Count;\n\
    \        var list = new List<long>();\n        foreach (var item in array) {\n\
    \            sum += item;\n        }\n        list.AddRange(array);\n        if\
    \ (sum % 2 == 0) {\n            list.Sort((x, y) => y.CompareTo(x));\n       \
    \ } else {\n            list.Sort((x, y) => x.CompareTo(y));\n        }\n    \
    \    return list;", "        if (array == null) return null;\n        int sum\
    \ = 0;\n        bool even = false;\n        foreach (var item in array)\n    \
    \    {\n            sum += item;\n            even = sum % 2 == 0;\n        }\n\
    \        if (even) return array.OrderByDescending(i => i).ToList();\n        return\
    \ array.OrderBy(i => i).ToList();", "        long sum = 0;\n        foreach (var\
    \ value in array) {\n            sum += value;\n        }\n        List<long>\
    \ result = new List<long>();\n        if (sum % 2 == 0) {\n            result.Sort(Comparer<long>.Create((x,\
    \ y) => x > y));\n        } else {\n            result.Sort(Comparer<long>.Create((x,\
    \ y) => x < y));\n        }\n        return result;", "        long lastElement\
    \ = array.Last();\n        long sumOfLastElement = lastElement + lastElement;\
    \ // just for convenience.\n        if (sumOfLastElement % 2 == 1) {\n       \
    \     array.Sort((a, b) => b - a);\n            return array;\n        } else\
    \ {\n            array.Sort((a, b) => a - b);\n            return array;\n   \
    \     }", "        long total = 0;\n        foreach (long element in array)\n\
    \            total += element;\n\n        List<long> list = new List<long>();\n\
    \        foreach (long element in array) {\n            list.Add(element);\n \
    \       }\n\n        if (total % 2 == 1)\n            list.Reverse();\n\n    \
    \    return list;", "        long sum = array.Sum();\n        long lastValue =\
    \ sum % 2 == 0 ? sum : sum - 1;\n        if (sum < 0)\n        {\n           \
    \ throw new ArgumentException();\n        }\n        if (sum > 0 && (array.Count\
    \ != array.Length))\n        {\n            throw new ArgumentException();\n \
    \       }\n        if (sum > 0 && sum % 2 == 0)\n        {\n            return\
    \ SortArray(array.OrderByDescending(v => v).ToList());\n        }\n        else\n\
    \        {\n            return SortArray(array.OrderBy(v => v).ToList());\n  \
    \      }", "        long result = 0;\n        foreach (var item in array) {\n\
    \            result += item;\n        }\n        if (result % 2 == 0) {\n    \
    \        array.Reverse();\n        }\n        array.Sort();\n        return array;",
  "        long sum = 0;\n        for(int i = 0; i < array.Count; i++) {\n       \
    \     sum = sum + array[i];\n        }\n        if (sum % 2 == 0) {\n        \
    \    long[] sorted = array.OrderByDescending(x => x).ToArray();\n            return\
    \ new List<long>(sorted);\n        }\n        long[] sorted = array.OrderBy(x\
    \ => x).ToArray();\n        return new List<long>(sorted);", "        // Complete\
    \ this method\n        return array.ToList();", "        long s = array.Sum();\n\
    \        if (s % 2 == 0)\n            return SortArrayDescending(array);\n   \
    \     else\n            return SortArrayAscending(array);", "        // write\
    \ your code here\n        int len = array.Count;\n        List<long> temp = new\
    \ List<long>();\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n\
    \            sum += array[i];\n            if (sum > 0)\n                temp.Add(array[i]);\n\
    \        }\n        if (sum % 2 == 1)\n            temp.Reverse();\n        return\
    \ temp;", "        var list = array;\n        long sum = 0;\n        var result\
    \ = new List<long>(array);\n        long first = list[0];\n        long last =\
    \ list[list.Count - 1];\n        long count = 0;\n        foreach (var item in\
    \ list)\n        {\n            if (item > 0)\n            {\n               \
    \ sum = sum + item;\n            }\n            count++;\n        }\n        if\
    \ (sum % 2 == 1)\n        {\n            result.Reverse();\n            list.Reverse();\n\
    \        }\n        var sort = 0;\n        foreach (var item in list)\n      \
    \  {\n            if (item > 0)\n            {\n                if (sort > 0)\n\
    \                {\n                    result.Add(list[list.Count - 1]);\n  \
    \                  list.RemoveAt(list.Count - 1);\n                    break;\n\
    \                }\n                else\n                {\n                \
    \    result.Add(item);\n                }\n            }\n            sort++;\n\
    \        }\n        if (sort > 0)\n        {\n            result.Add(list[list.Count\
    \ - 1]);\n            list.RemoveAt(list.Count - 1);\n        }\n        return\
    \ result;", "        if (array.Count < 1) {\n            return array;\n     \
    \   }\n        int sum = 0;\n        List<long> result = new List<long>();\n \
    \       foreach (long element in array) {\n            sum += element;\n     \
    \       result.Add(element);\n        }\n        if (sum % 2 != 0) {\n       \
    \     return SortArray(result);\n        }\n        return SortArray(result);",
  "        Stopwatch watch = Stopwatch.StartNew();\n        var sorted = array.OrderBy(x\
    \ => x).ToList();\n        watch.Stop();\n        Debug.WriteLine(watch.ElapsedMilliseconds);\n\
    \        return sorted;", "        long sumOfFirstAndLastElements = array.Last()\
    \ - array.First();\n        long oddSum = sumOfFirstAndLastElements & 1;\n   \
    \     long evenSum = sumOfFirstAndLastElements >> 1;\n        if (oddSum == evenSum)\n\
    \            return array.OrderBy(item => item).ToList();\n        if (oddSum\
    \ == 0)\n            return array.OrderByDescending(item => item).ToList();\n\
    \        return array.OrderByDescending(item => item).ThenBy(item => item).ToList();",
  "        var result = new List<long>();\n        var len = array.Count;\n      \
    \  var sum = (array.Sum() / 2);\n        // sort in ascending order if the sum\
    \ is odd\n        if (sum % 2 == 1) {\n            var middle = Math.Ceiling(len\
    \ / 2);\n            for (int i = 0; i < middle; i++) {\n                var val\
    \ = array[i];\n                result.Add(val);\n            }\n            var\
    \ leftSum = sum - (middle * 2);\n            for (int i = middle; i < len; i++)\
    \ {\n                var val = array[i];\n                result.Add(val);\n \
    \           }\n            var rightSum = sum - ((middle + 1) * 2);\n        \
    \    // sort it in descending order if the sum is even\n        } else {\n   \
    \         var middle = Math.Floor(len / 2);\n            for (int i = 0; i < middle;\
    \ i++) {\n                var val = array[i];\n                result.Add(val);\n\
    \            }\n            var leftSum = sum - (middle * 2);\n            for\
    \ (int i = middle; i < len; i++) {\n                var val = array[i];\n    \
    \            result.Add(val);\n            }\n            var rightSum = sum -\
    \ ((middle + 1) * 2);\n        }\n        return result;", "        long total\
    \ = 0;\n        for (int i = 0; i < array.Count; i++)\n            total += array[i];\n\
    \        if (total % 2 == 0) {\n            array.Sort();\n            foreach\
    \ (var item in array)\n                array.Remove(item);\n            return\
    \ array;\n        }\n        Array.Sort(array);\n        List<long> res = new\
    \ List<long>();\n        for (int i = 0; i < array.Count; i++)\n            res.Add(array[i]);\n\
    \        return res;", "        int length = array.Count;\n        int sum = 0;\n\
    \        for (int i = 0; i < length; i++) {\n            sum += array[i];\n  \
    \      }\n        if (sum % 2 == 0) {\n            array.Reverse();\n        }\n\
    \        int startIndex = 0;\n        int endIndex = 0;\n        for (int i =\
    \ 0; i < length; i++) {\n            int tmp = array[i];\n            endIndex++;\n\
    \            if (startIndex > endIndex) {\n                Array.Copy(array, startIndex,\
    \ array, endIndex, length - endIndex);\n                break;\n            }\n\
    \            int j = i;\n            while (j > startIndex && array[j - 1] > tmp)\
    \ {\n                array[j] = array[j - 1];\n                j--;\n        \
    \    }\n            array[j] = tmp;\n            startIndex++;\n        }\n  \
    \      return array;", "        long sum = 0;\n        bool isEven = false;\n\
    \        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n\
    \            isEven = (sum % 2) == 0;\n        }\n\n        if (isEven) {\n  \
    \          array.Reverse();\n        }\n        long firstIndex = 0, lastIndex\
    \ = array.Count - 1;\n        while (firstIndex <= lastIndex) {\n            long\
    \ midIndex = (firstIndex + lastIndex) / 2;\n            if (sum > array[midIndex])\
    \ {\n                firstIndex = midIndex + 1;\n            } else {\n      \
    \          lastIndex = midIndex - 1;\n            }\n        }\n        List<long>\
    \ result = new List<long>(array);\n        Array.Sort(result, (i, j) => array[j]\
    \ > array[i] ? 1 : -1);\n        if (isEven) {\n            array.Sort();\n  \
    \          Array.Reverse(array);\n        }\n        return result;", "      \
    \  long sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n          \
    \  sum += array[i];\n        }\n\n        if (sum % 2 == 0) {\n            List<long>\
    \ sortedArray = new List<long>();\n            sortedArray.Add(array[0]);\n  \
    \          int index = array.FindLastIndex(x => x < 0);\n            sortedArray.Add(array[index]);\n\
    \            return sortedArray;\n        }\n\n        List<long> sortedArray\
    \ = new List<long>();\n        sortedArray.Add(array[array.Count - 1]);\n    \
    \    int index = array.FindLastIndex(x => x >= 0);\n        sortedArray.Add(array[index]);\n\
    \        return sortedArray;", "        List<long> result = new List<long>();\n\
    \        if (array.Count == 0) {\n            return result;\n        }\n    \
    \    var first = array[0];\n        var last = array[0];\n        int currentSum\
    \ = 0;\n        var count = 0;\n        for (int i = 1; i < array.Count; i++)\
    \ {\n            currentSum += array[i];\n            if (currentSum < first)\
    \ {\n                count++;\n                first = currentSum;\n         \
    \       last = array[i];\n            } else if (currentSum > last) {\n      \
    \          result.Add(last);\n                last = currentSum;\n           \
    \     count = 1;\n            } else {\n                count++;\n           \
    \ }\n        }\n        if (count % 2 == 0) {\n            result.Add(last);\n\
    \        }\n        if (count > 0) {\n            for (int i = 0; i < count; i++)\
    \ {\n                result.Add(first);\n            }\n        }\n        return\
    \ result;", "        var results = new List<long>();\n        var size = array.Count;\n\
    \        if (size == 0) {\n            return results;\n        }\n        var\
    \ first = array[0];\n        var last = array[size - 1];\n        var sum = first\
    \ + last;\n        if (sum % 2 == 1) {\n            var tmpSum = sum / 2;\n  \
    \          var tmpFirst = first;\n            var tmpLast = last;\n          \
    \  var tmpArray = new List<long>();\n            while (tmpSum > 0) {\n      \
    \          tmpArray.Add(tmpSum);\n                tmpSum -= tmpFirst;\n      \
    \          tmpFirst += tmpLast;\n                tmpLast += tmpFirst;\n      \
    \      }\n            results.AddRange(tmpArray);\n        } else {\n        \
    \    var tmpSum = sum / 2;\n            var tmpFirst = first;\n            var\
    \ tmpLast = last;\n            var tmpArray = new List<long>();\n            while\
    \ (tmpSum > 0) {\n                tmpArray.Add(tmpSum);\n                tmpSum\
    \ -= tmpLast;\n                tmpFirst += tmpLast;\n                tmpLast +=\
    \ tmpLast;\n            }\n            results.AddRange(tmpArray);\n        }\n\
    \        return results;", "        long[] numbers = array.ToArray();\n      \
    \  long[] sum = numbers.Take(numbers.Length - 1).Reverse().ToArray();\n      \
    \  long sumOfSum = sum.Sum();\n        long cocs = sumOfSum;\n        if (sumOfSum\
    \ % 2 == 1)\n            cocs = -cocs;\n\n        var sortedArray = array.OrderBy(num\
    \ => num).ToList();\n        if (sortedArray.Count > 0)\n            sortedArray.Add(cocs);\n\
    \        else\n            sortedArray.Add(cocs);\n        return sortedArray.OrderBy(num\
    \ => num).ToList();", "        if (array.Count <= 0)\n            return array;\n\
    \        if (array.Count <= 1)\n            return array;\n\n        var sumArray\
    \ = array.Take(array.Count - 1).Sum();\n        var lastValue = array[array.Count\
    \ - 1];\n        var sumOfLastValue = lastValue;\n        var evenSumOfLastValue\
    \ = false;\n        var oddSumOfLastValue = true;\n        for (var i = 1; i <\
    \ array.Count; i++) {\n            var newSum = sumArray + array[i];\n       \
    \     var newSumOfLastValue = sumOfLastValue + lastValue;\n            if (newSum\
    \ % 2 != 0) {\n                evenSumOfLastValue = false;\n                oddSumOfLastValue\
    \ = true;\n            }\n            else {\n                evenSumOfLastValue\
    \ = true;\n                oddSumOfLastValue = false;\n            }\n       \
    \     sumOfLastValue = newSumOfLastValue;\n        }\n\n        var result = new\
    \ List<long>(array.Count);\n\n        if (evenSumOfLastValue == oddSumOfLastValue)\
    \ {\n            return result;\n        }\n\n        result.Insert(0, array[array.Count\
    \ - 1]);\n        for (var i = array.Count - 2; i >= 0; i--) {\n            result.Insert(0,\
    \ array[i]);\n        }\n\n        return result;", "        long sum = 0;\n \
    \       foreach (var i in array) {\n            sum += i;\n        }\n       \
    \ if (sum % 2 == 0) {\n            return array.OrderBy(i => i).ToList();\n  \
    \      } else {\n            return array.OrderByDescending(i => i).ToList();\n\
    \        }", "        if (array == null)\n            return null;\n\n       \
    \ var sum = array.Sum();\n        if (sum % 2 == 0)\n            array = array.OrderByDescending(a\
    \ => a).ToList();\n        else\n            array = array.OrderBy(a => a).ToList();\n\
    \n        return array;", "        if (array.Count == 0) {\n            array.Add(0);\n\
    \        }\n        long sum = 0;\n        for (int i = 0; i < array.Count; i++)\
    \ {\n            sum += array[i];\n            if (sum % 2 == 0) {\n         \
    \       array.Sort();\n                sum = array.Last() - array[0] + 1;\n  \
    \          } else {\n                sum = -sum;\n                array.Sort();\n\
    \                sum = array.First() - array[0];\n            }\n        }\n \
    \       return array;", "        long sum = 0;\n        foreach (var number in\
    \ array) {\n            sum += number;\n        }\n        long remainder;\n \
    \       if (sum % 2 == 0) {\n            Array.Reverse(array.ToArray());\n   \
    \     }\n        long start = 0;\n        long end = array.Count - 1;\n      \
    \  while ((start + end) > 0) {\n            int mid = (start + end) / 2;\n   \
    \         if (sum % 2 == 0) {\n                sum -= array[mid];\n          \
    \  } else {\n                sum -= array[mid];\n                array[mid] =\
    \ array[mid + 1];\n                array[mid + 1] = 0;\n            }\n      \
    \      sum = sum / 2;\n            if (sum == 0) {\n                Console.WriteLine(\"\
    {0}, {1}\", start, end);\n                start += 1;\n                end -=\
    \ 1;\n            } else {\n                if (sum % 2 == 0) {\n            \
    \        end = mid;\n                } else {\n                    start = mid\
    \ + 1;\n                }\n            }\n        }\n        return array;", " \
    \       long curSum = 0;\n        List<long> result = new List<long>();\n    \
    \    int n = array.Count;\n        for(int i = 0; i < n; i++) {\n            long\
    \ val = array[i];\n            curSum += val;\n            result.Add(curSum);\n\
    \        }\n        bool odd = (curSum % 2L) != 0;\n        bool even = !(odd);\n\
    \        if(even) {\n            n = n - 1;\n            for(int i = 0; i < n;\
    \ i++) {\n                result.Add(array[i]);\n            }\n        }\n  \
    \      long curSum2 = 0;\n        for(int i = 0; i < n - 1; i++) {\n         \
    \   curSum2 += result[i];\n        }\n        if(odd) {\n            n = n - 1;\n\
    \            for(int i = 0; i < n; i++) {\n                result.Add(array[i]);\n\
    \            }\n        }\n        long curSum3 = 0;\n        for(int i = 0; i\
    \ < n - 1; i++) {\n            curSum3 += result[i];\n        }\n        bool\
    \ odd2 = (curSum2 % 2L) != 0;\n        bool even2 = !(odd2);\n        if(even2)\
    \ {\n            n = n - 1;\n            for(int i = 0; i < n; i++) {\n      \
    \          result.Add(array[i]);\n            }\n        }\n        bool odd3\
    \ = (curSum3 % 2L) != 0;\n        bool even3 = !(odd3);\n        if(even3) {\n\
    \            n = n - 1;\n            for(int i = 0; i < n; i++) {\n          \
    \      result.Add(array[i]);\n            }\n        }\n        if(odd2) {\n \
    \           n = n - 1;\n            for(int i = 0; i < n; i++) {\n           \
    \     result.Add(array[i]);\n            }\n        }\n        if(odd3) {\n  \
    \          n = n - 1;\n            for(int i = 0; i < n; i++) {\n            \
    \    result.Add(array[i]);\n            }\n        }\n        return result;",
  "        var sortedArray = new List<long>(array.Count);\n        var resultIndex\
    \ = 0;\n        var index = 0;\n        var sum = array.Sum();\n        // Sort\
    \ the list\n        while (index < array.Count) {\n            var indexInArray\
    \ = index - 1;\n            // Move the array element up or down according to\
    \ its sum\n            if (sum % 2 == 0 && sum > 0) {\n                // If sum\
    \ is even and index can be moved up\n                if (index < array.Count -\
    \ 1) {\n                    indexInArray = index + 1;\n                }\n   \
    \             while (indexInArray < array.Count && array[indexInArray] == 0) {\n\
    \                    indexInArray++;\n                }\n                if (indexInArray\
    \ < array.Count && array[indexInArray] == 0) {\n                    sortedArray.Add(array[index]);\n\
    \                    index++;\n                    indexInArray++;\n         \
    \       }\n                if (indexInArray < array.Count && array[indexInArray]\
    \ == 0) {\n                    // If sum is even and index can't be moved up\n\
    \                    while (indexInArray < array.Count && array[indexInArray]\
    \ == 0) {\n                        indexInArray++;\n                    }\n  \
    \                  sortedArray.Add(array[index]);\n                    index++;\n\
    \                }\n            }\n            // If sum is not even and index\
    \ can be moved up\n            else if (sum > 0 && index > 0) {\n            \
    \    indexInArray = index - 1;\n                while (indexInArray < array.Count\
    \ && array[indexInArray] == 0) {\n                    indexInArray++;\n      \
    \          }\n                if (indexInArray < array.Count && array[indexInArray]\
    \ == 0) {\n                    sortedArray.Add(array[index]);\n              \
    \      index--;\n                    indexInArray++;\n                }\n    \
    \            if (indexInArray < array.Count && array[indexInArray] == 0) {\n \
    \                   while (indexInArray < array.Count && array[indexInArray] ==\
    \ 0) {\n                        indexInArray++;\n                    }\n     \
    \               sortedArray.Add(array[index]);\n                    index--;\n\
    \                }\n            }\n            // If sum is even\n           \
    \ else if (sum % 2 == 0 && sum < 0) {\n                indexInArray = index +\
    \ 1;\n                while (indexInArray < array.Count && array[indexInArray]\
    \ == 0) {\n                    indexInArray++;\n                }\n          \
    \      if (indexInArray < array.Count && array[indexInArray] == 0) {\n       \
    \             sortedArray.Add(array[index]);\n                    index++;\n \
    \                   indexInArray++;\n                }\n                if (indexInArray\
    \ < array.Count && array[indexInArray] == 0) {\n                    while (indexInArray\
    \ < array.Count && array[indexInArray] == 0) {\n                        indexInArray++;\n\
    \                    }\n                    sortedArray.Add(array[index]);\n \
    \                   index++;\n                }\n            }\n            //\
    \ If sum is not even\n            else {\n", "        array.Sort();\n        long\
    \ sum = 0;\n        foreach (var num in array)\n            sum += num;\n\n  \
    \      Debug.Assert(sum % 2 == 0, \"The sum of the given array must be even.\"\
    );\n\n        if (sum % 2 == 1)\n            array.Reverse();\n\n        return\
    \ array;", "        long first = array.First();\n        long last = array.Last();\n\
    \        long first = array.First();\n        long last = array.Last();\n    \
    \    long sumFirst = first + first;\n        long sumLast = last + last;\n   \
    \     long sumFirstReverse = sumFirst + first;\n        long sumLastReverse =\
    \ sumLast + last;\n        long evenSum = sumFirstReverse - sumLastReverse;\n\
    \        long oddSum = sumLastReverse - sumFirstReverse;\n        if (sumFirst\
    \ % 2 == 0) {\n            return array.OrderByDescending(i => i)\n          \
    \      .ToList();\n        }\n        if (sumLast % 2 == 0) {\n            return\
    \ array.OrderBy(i => i)\n                .ToList();\n        }\n        if (evenSum\
    \ < oddSum) {\n            return array.OrderByDescending(i => i)\n          \
    \      .ToList();\n        }\n        return array.OrderBy(i => i)\n         \
    \   .ToList();", "        List<long> sortedArray = array.OrderBy(a => a).ToList();\n\
    \        if (sortedArray.Count % 2 == 0) {\n            sortedArray.Reverse();\n\
    \        }\n        return sortedArray;", "        if (array.Count < 3) return\
    \ array;\n        var sum = array.Sum();\n        var index1 = array.IndexOf(sum\
    \ / 2);\n        var index2 = array.IndexOf(sum / 2 + sum % 2 == 1 ? index1 +\
    \ 1 : index1 - 1);\n        var middle = array.ElementAtOrDefault(index1);\n \
    \       List<long> result = new List<long>();\n        while (index2 != -1) {\n\
    \            result.Add(array.ElementAtOrDefault(index1));\n            index1\
    \ = index2;\n            index2 = array.IndexOf(sum / 2 + sum % 2 == 1 ? index1\
    \ + 1 : index1 - 1);\n        }\n        return result;", "        Debug.Assert(array\
    \ != null);\n        if (array.Count == 0)\n        {\n            return new\
    \ List<long>();\n        }\n        if (array.Count > 1)\n        {\n        \
    \    var sumOfAllElements = array.Sum();\n            if (sumOfAllElements % 2\
    \ == 0)\n            {\n                return SortArray(array.reverse());\n \
    \           }\n            return SortArrayOfEvenSum(array);\n        }\n    \
    \    return array;", "        long sum = 0L;\n        List<long> result = new\
    \ List<long>();\n        int n = array.Count;\n        for (int i = 0; i < n;\
    \ i++)\n            sum += array[i];\n        if (sum % 2 == 0)\n            foreach\
    \ (long item in array)\n                result.Add(item);\n        else\n    \
    \        foreach (long item in array.Reverse())\n                result.Add(item);\n\
    \        return result;", "        var sorted = array.OrderBy(x => x).ToList();\n\
    \        var min = sorted.First();\n        var max = sorted.Last();\n       \
    \ if (min == max)\n            return new List<long>(array);\n        if (sorted.Sum()\
    \ == 0)\n            return new List<long>();\n        if (sorted.Sum() % 2 ==\
    \ 1)\n            sorted = sorted.Reverse().ToList();\n        List<long> list\
    \ = new List<long>(sorted);\n        list.Sort();\n        if (list.Sum() == 0)\n\
    \            return new List<long>(array);\n        list.Sort();\n        if (list.Sum()\
    \ == 0)\n            return new List<long>(array);\n        list.Reverse();\n\
    \        list.Sort();\n        return list;", "        if (array == null || array.Count\
    \ <= 0) {\n            return array;\n        }\n\n        var newArray = new\
    \ List<long>();\n        var firstIndex = 0;\n        var lastIndex = 0;\n   \
    \     var lastSum = array.First();\n        var newSum = lastSum;\n        var\
    \ i = 0;\n\n        while (true) {\n            var maxIndex = i + 1;\n      \
    \      var maxSum = array.ElementAt(maxIndex);\n            var maxSumIndex =\
    \ maxIndex;\n            for (var j = i; j < array.Count; j++) {\n           \
    \     var sum = array.ElementAt(j);\n                i = j;\n\n              \
    \  if ((sum + newSum) == 0) {\n                    newSum = sum;\n           \
    \         break;\n                } else if (sum + newSum > 0) {\n           \
    \         newSum = sum;\n                    maxSumIndex = j;\n              \
    \      maxSum = sum;\n                }\n\n                if (sum == maxSum)\
    \ {\n                    break;\n                }\n            }\n          \
    \  newArray.Add(maxSum);\n            newArray.Add(maxSumIndex);\n           \
    \ newArray.Add(maxSum);\n            if (newSum == 0) {\n                break;\n\
    \            }\n        }\n\n        if (newSum == 0) {\n            var newList\
    \ = new List<long>();\n            for (int i = 0; i < newArray.Count; i++) {\n\
    \                array.Add(newArray[i]);\n                array.RemoveAt(array.Count\
    \ - 1);\n            }\n            newList.AddRange(array);\n            return\
    \ newList;\n        }\n\n        return newArray.Concat(array.ToList()).OrderBy(i\
    \ => i).ToList();", "        array.Sort();\n        var resultList = array.ToList();\n\
    \        if (array.Count == 0)\n            resultList.Clear();\n        if (array.Count\
    \ % 2 == 0)\n            resultList.Reverse();\n        return resultList;", " \
    \       int sum = 0;\n        long last = array.First();\n        foreach (long\
    \ i in array)\n            sum += i;\n        if (sum % 2 != 0)\n            Array.Reverse(array.ToArray());\n\
    \        else\n            array = array.OrderBy(x => x).ToList();\n        List<long>\
    \ result = new List<long>(array);\n        if (result.Last() - result.First()\
    \ == 1)\n            Array.Reverse(result.ToArray());\n        return result;",
  "        long sum = 0;\n        long temp = 0;\n        long min = 0;\n        long\
    \ max = 0;\n        bool isEvenSum = false;\n        bool isOddSum = false;\n\
    \        bool isDesc = true;\n        long minIdx = 0;\n        long maxIdx =\
    \ 0;\n        long index = 0;\n        long lastIndex = 0;\n\n        for (int\
    \ i = 0; i < array.Count(); i++) {\n            sum += array[i];\n           \
    \ if (isEvenSum) {\n                if (sum > max) {\n                    max\
    \ = sum;\n                    maxIdx = i;\n                }\n               \
    \ if (sum < min) {\n                    min = sum;\n                    minIdx\
    \ = i;\n                }\n                sum += array[i];\n            }\n \
    \           if (isOddSum) {\n                if (sum < max) {\n              \
    \      max = sum;\n                    maxIdx = i;\n                }\n      \
    \          if (sum > min) {\n                    min = sum;\n                \
    \    minIdx = i;\n                }\n                sum += array[i];\n      \
    \      }\n\n            temp = sum;\n            isEvenSum = temp.ToString().Length\
    \ % 2 == 0;\n            isOddSum = temp.ToString().Length % 2 == 1;\n       \
    \     sum = 0;\n\n            if (isEvenSum) {\n                isDesc = true;\n\
    \            }\n            if (isOddSum) {\n                isDesc = false;\n\
    \            }\n        }\n        if (isEvenSum && isOddSum) {\n            isDesc\
    \ = true;\n        }\n        if (isEvenSum && !isOddSum) {\n            isDesc\
    \ = false;\n        }\n        if (isOddSum && !isEvenSum) {\n            isDesc\
    \ = true;\n        }\n\n        Array.Sort(array, index + 1, lastIndex + 1, isDesc,\
    \ new CompareToLongDesc());\n\n        List<long> result = new List<long>();\n\
    \        result.AddRange(array.GetRange(index, array.Count - index));\n      \
    \  result.AddRange(array.GetRange(minIdx + 1, minIdx + 1 + maxIdx - minIdx - 1));\n\
    \n        return result;", "        var sum = 0;\n        for (int i = 0; i <\
    \ array.Count; i++)\n            sum += array[i];\n        if (sum % 2 == 0)\n\
    \            array = array.OrderByDescending(x => x).ToList();\n        else\n\
    \            array = array.OrderBy(x => x).ToList();\n        return array;",
  "        List<long> list = array.ToList();\n        array.Clear();\n        long\
    \ sum = 0;\n        long temp = 0;\n        for (int i = 0; i < list.Count; i++)\
    \ {\n            sum = sum + list[i];\n            if (sum % 2 == 1) {\n     \
    \           temp = temp + list[i];\n            } else {\n                temp\
    \ = temp - list[i];\n            }\n            if (temp < 0) {\n            \
    \    temp = 0;\n            }\n            if (temp > 9) {\n                temp\
    \ = temp / 10;\n            }\n            array.Add(temp);\n        }\n     \
    \   return array;", "        long sum = 0;\n        long maxIndex = array.Count;\n\
    \        for (int i = 0; i < maxIndex; i++) {\n            sum += array[i];\n\
    \        }\n        if (sum % 2 != 0) {\n            Array.Sort(array);\n    \
    \        return array;\n        } else {\n            array.Reverse();\n     \
    \       Array.Sort(array);\n            return array;\n        }", "        Debug.Assert(array.Count\
    \ > 0);\n        if (array.Count == 1)\n            return array;\n        long\
    \ first = array.First();\n        long last = array.Last();\n        if (array.Count()\
    \ == 2)\n            return new List<long>() { first, last };\n        if (SumOfTwoIndexesOrOdd(array,\
    \ 0, array.Count - 1) & 1)\n            return SortArray(SortArrayInDescending(array));\n\
    \        else\n            return SortArray(SortArrayInAscending(array));", " \
    \       if (array.Count == 0)\n            return array;\n        long sum = 0;\n\
    \        for (int i = 0; i < array.Count - 1; i++)\n            sum += array[i];\n\
    \        if (sum % 2 == 1)\n            array.Reverse();\n        long curSum\
    \ = 0;\n        long prevSum = 0;\n        int change = 0;\n        int num =\
    \ 0;\n        long maxNum = long.MaxValue;\n        foreach (long i in array)\
    \ {\n            curSum += i;\n            change = 0;\n            if (curSum\
    \ > maxNum) {\n                maxNum = curSum;\n                num = 0;\n  \
    \          }\n            else if (curSum < 0)\n                num = 1;\n   \
    \         else if (curSum > prevSum) {\n                prev = array[array.Count\
    \ - 1];\n                prevSum -= prev;\n                array[array.Count -\
    \ 1] = i;\n                num = 1;\n            }\n            else {\n     \
    \           change = 1;\n                num = 2;\n            }\n           \
    \ prevSum = curSum;\n            while (num == 0 && change == 0) {\n         \
    \       curSum -= array[num];\n                num++;\n            }\n       \
    \     while (num > 0 && change == 0) {\n                curSum -= array[num -\
    \ 1];\n                num--;\n            }\n        }\n        Console.WriteLine(array.Count.ToString()\
    \ + \"=\" + array.ToList().Count.ToString());\n        if (array.Count == 0)\n\
    \            return array;\n        List<long> res = new List<long>();\n     \
    \   for (int i = 0; i < array.Count - 1; i++)\n            if (array[i] > maxNum)\n\
    \                maxNum = array[i];\n        for (int i = 0; i < array.Count -\
    \ 1; i++)\n            if (array[i] < maxNum && array[i] != 0)\n             \
    \   res.Add(array[i]);\n        array.Clear();\n        array.AddRange(res);\n\
    \        array.RemoveRange(0, res.Count);\n        array.Reverse();\n        return\
    \ array;", "        var results = new List<long>();\n        var sum = 0;\n  \
    \      bool isDescending = false;\n        foreach (var item in array) {\n   \
    \         sum += item;\n            if (sum > 0) {\n                if (sum %\
    \ 2 == 0) {\n                    results.Add(item);\n                } else {\n\
    \                    results.Add((item * -1L));\n                    isDescending\
    \ = true;\n                }\n            } else {\n                results.Add((item\
    \ * -1L));\n                isDescending = true;\n            }\n        }\n \
    \       if (isDescending) {\n            results.Reverse();\n        }\n     \
    \   return results;", "        // TODO: Your code here\n        var sorted = array.OrderBy(x\
    \ => x).ToList();\n        if (array.Sum() % 2 == 1)\n            sorted.Reverse();\n\
    \        return sorted;", "        List<long> res = new List<long>();\n      \
    \  long maxValue = array.Sum();\n        if (maxValue % 2 == 0) {\n          \
    \  int counter = 1;\n            long sum = array.Sum();\n            while (counter\
    \ < array.Count && sum < maxValue) {\n                res.Add(array[counter]);\n\
    \                sum += array[counter];\n                counter++;\n        \
    \    }\n            counter = 1;\n            sum = maxValue;\n            while\
    \ (counter < array.Count && sum >= 0) {\n                res.Add(array[counter]);\n\
    \                sum -= array[counter];\n                counter++;\n        \
    \    }\n        } else {\n            int counter = array.Count - 1;\n       \
    \     long sum = maxValue;\n            while (counter >= 0 && sum < maxValue)\
    \ {\n                res.Add(array[counter]);\n                sum += array[counter];\n\
    \                counter--;\n            }\n            counter = array.Count\
    \ - 1;\n            sum = maxValue;\n            while (counter >= 0 && sum >=\
    \ 0) {\n                res.Add(array[counter]);\n                sum -= array[counter];\n\
    \                counter--;\n            }\n        }\n        return res;", " \
    \       long lastIndex = array.Count;\n        long sum = 0;\n        bool sumOdd\
    \ = true;\n\n        foreach (var item in array) {\n            if (sum % 2 ==\
    \ 0) {\n                sum += item;\n            }\n            else {\n    \
    \            sum -= item;\n            }\n            sumOdd = sumOdd ^ item %\
    \ 2 == 1;\n            sum += item;\n            lastIndex = Math.Max(lastIndex,\
    \ sum);\n        }\n\n        if (sumOdd) {\n            Sort(array, lastIndex,\
    \ array.Count);\n        }\n        else {\n            Sort(array, lastIndex,\
    \ array.Count - 1);\n        }\n        return array;", "        if (array.Count\
    \ <= 0)\n            return array;\n        List<long> result = new List<long>(array);\n\
    \        result.Sort((a, b) => {\n            if (a > b)\n                return\
    \ -1;\n            if (a < b)\n                return 1;\n            return 0;\n\
    \        });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastSum = array.First();\n        foreach (long number in array.Skip(1))\n\
    \        {\n            lastSum += number;\n            result.Add(lastSum);\n\
    \        }\n        if (lastSum % 2 == 1)\n        {\n            result.Reverse();\n\
    \        }\n        return result;", "        int sum = 0;\n        bool isOddSum\
    \ = false;\n        bool isEvenSum = false;\n        List<long> result = new List<long>();\n\
    \        // Odd Sum Check\n        foreach (long n in array) {\n            sum\
    \ += n;\n            if (sum % 2 == 1) {\n                isEvenSum = true;\n\
    \            }\n            if (sum % 2 == 0) {\n                isOddSum = true;\n\
    \            }\n        }\n        if (array.Count < 2) {\n            return\
    \ array;\n        }\n        if (array.Count == 2) {\n            sum = 0;\n \
    \       }\n        if (sum < array.Count / 2) {\n            if (isOddSum) {\n\
    \                result.Add(array[1]);\n                result.Add(array[0]);\n\
    \                return result;\n            }\n            if (isEvenSum) {\n\
    \                result.Add(array[0]);\n                result.Add(array[1]);\n\
    \                return result;\n            }\n        }\n        // Even Sum\
    \ Check\n        sum = 0;\n        isOddSum = false;\n        isEvenSum = false;\n\
    \        foreach (long n in array) {\n            sum += n;\n            if (sum\
    \ % 2 == 1) {\n                isEvenSum = true;\n            }\n            if\
    \ (sum % 2 == 0) {\n                isOddSum = true;\n            }\n        }\n\
    \        if (sum < array.Count / 2) {\n            if (isOddSum) {\n         \
    \       result.Add(array[0]);\n                result.Add(array[1]);\n       \
    \         return result;\n            }\n            if (isEvenSum) {\n      \
    \          result.Add(array[1]);\n                result.Add(array[0]);\n    \
    \            return result;\n            }\n        }\n        // Even Sum Check\n\
    \        sum = 0;\n        isOddSum = false;\n        isEvenSum = false;\n   \
    \     foreach (long n in array) {\n            sum += n;\n            if (sum\
    \ % 2 == 1) {\n                isEvenSum = true;\n            }\n            if\
    \ (sum % 2 == 0) {\n                isOddSum = true;\n            }\n        }\n\
    \        if (sum < array.Count / 2) {\n            if (isOddSum) {\n         \
    \       result.Add(array[1]);\n                result.Add(array[0]);\n       \
    \         return result;\n            }\n            if (isEvenSum) {\n      \
    \          result.Add(array[0]);\n                result.Add(array[1]);\n    \
    \            return result;\n            }\n        }\n        // Even Sum Check\n\
    \        sum = 0;\n        isOddSum = false;\n        isEvenSum = false;\n   \
    \     foreach (long n in array) {\n            sum += n;\n            if (sum\
    \ % 2 == 1) {\n                isEvenSum = true;\n            }\n            if\
    \ (sum % 2 == 0) {\n                isOddSum = true;\n            }\n        }\n\
    \        if (sum < array.Count / 2) {\n            if (isOddSum) {\n         \
    \       result.Add(array[1]);\n                result.Add(array[0]);\n       \
    \         return result;\n            }\n            if (isEvenSum) {\n      \
    \          result.Add(array[0]);\n                result.Add(array[1]);\n    \
    \            return result;\n            }", "        long tempSum = 0;\n    \
    \    List<long> sortedArray = new List<long>();\n        long tempMax = 0;\n\n\
    \        for (int i = 0; i < array.Count; i++) {\n            long item = array[i];\n\
    \n            tempSum = tempSum + item;\n            tempMax = tempMax < item\
    \ ? tempMax : item;\n\n            if (tempSum > 0) {\n                sortedArray.Add(item);\n\
    \            }\n        }\n\n        if (tempSum > 0) {\n            if (tempSum\
    \ % 2 == 1) {\n                sortedArray.Sort();\n            } else {\n   \
    \             sortedArray.Sort();\n                sortedArray.Reverse();\n  \
    \          }\n        }\n\n        return sortedArray;", "        var result =\
    \ new List<long>();\n        if (array.Count == 0)\n            return result;\n\
    \        var sum = 0;\n        foreach (var item in array)\n            sum +=\
    \ item;\n        if (sum % 2 == 1)\n            array.Reverse();\n        foreach\
    \ (var item in array) {\n            sum += item;\n            result.Add(item);\n\
    \        }\n        return result;", "        int sumOfArray = array.Sum();\n\
    \        List<long> sorted = new List<long>();\n        if (sumOfArray % 2 ==\
    \ 0) {\n            sorted = array.OrderByDescending(i => i).ToList();\n     \
    \       int lastElement = sorted.Count - 1;\n            int firstElement = sorted.Count\
    \ / 2;\n            sorted.Insert(0, array[firstElement]);\n            sorted.Add(array[lastElement]);\n\
    \        } else {\n            sorted = array.OrderBy(i => i).ToList();\n    \
    \        int lastElement = sorted.Count - 1;\n            int firstElement = sorted.Count\
    \ / 2;\n            sorted.Insert(0, array[firstElement]);\n            sorted.Add(array[lastElement]);\n\
    \        }\n        return sorted;", "        int sum = 0;\n        foreach (var\
    \ item in array)\n            sum += item;\n        if (sum % 2 == 0)\n      \
    \      return array.OrderByDescending(x => x).ToList();\n        else\n      \
    \      return array.OrderBy(x => x).ToList();", "        long sum = array.Sum();\n\
    \        bool isEvenSum = sum & 1 == 1;\n        int length = array.Count;\n \
    \       long minIndexValue = array[0];\n        long maxIndexValue = array[array.Count\
    \ - 1];\n        if (length <= 1) {\n            return array;\n        }\n  \
    \      int[] leftArray = new int[length];\n        int[] rightArray = new int[length];\n\
    \        for (int i = 0; i < leftArray.Length; i++) {\n            leftArray[i]\
    \ = i;\n        }\n        for (int i = leftArray.Length - 1; i > 0; i--) {\n\
    \            rightArray[i - 1] = i;\n        }\n\n        Array.Sort(leftArray,\
    \ rightArray);\n        bool isOddSum = sum % 2 != 0;\n        int sum1 = 0;\n\
    \        int sum2 = 0;\n        long last = 0;\n        long first = array[0];\n\
    \        long pivotVal = array[0];\n        for (int i = 0; i < length / 2; i++)\
    \ {\n            sum1 += leftArray[i];\n            sum2 += rightArray[i];\n \
    \       }\n        if (isOddSum) {\n            for (int i = 0; i < length; i++)\
    \ {\n                if (isEvenSum) {\n                    sum1 += array[i];\n\
    \                    sum2 -= array[length - i - 1];\n                } else {\n\
    \                    sum1 -= array[i];\n                    sum2 += array[length\
    \ - i - 1];\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < length; i++) {\n                if (isEvenSum) {\n         \
    \           sum1 -= array[i];\n                    sum2 += array[length - i -\
    \ 1];\n                } else {\n                    sum1 += array[i];\n     \
    \               sum2 -= array[length - i - 1];\n                }\n          \
    \  }\n        }\n        if (isEvenSum) {\n            for (int i = 0; i < length;\
    \ i++) {\n                if (isOddSum) {\n                    sum1 += array[i];\n\
    \                    sum2 += array[length - i - 1];\n                } else {\n\
    \                    sum1 -= array[i];\n                    sum2 += array[length\
    \ - i - 1];\n                }\n            }\n        } else {\n            for\
    \ (int i = 0; i < length; i++) {\n                if (isOddSum) {\n          \
    \          sum1 -= array[i];\n                    sum2 -= array[length - i - 1];\n\
    \                } else {\n                    sum1 += array[i];\n           \
    \         sum2 -= array[length - i - 1];\n                }\n            }\n \
    \       }\n        int i = leftArray.Length - 1;\n        long firstSum = sum1;\n\
    \        long secondSum = sum2;\n        while (i >= 0) {\n            if (firstSum\
    \ <= secondSum) {\n                array[i] = firstSum;\n                firstSum\
    \ -= leftArray[i];\n                secondSum -= rightArray[i];\n            \
    \    i -= 1;\n            } else {\n                array[i] = secondSum;\n  \
    \              firstSum -= leftArray[i];\n                secondSum -= rightArray[i];\n\
    \                i -= 1;\n            }\n        }\n        return array;\n  \
    \  }", "        if (array.Count <= 0) return array;\n        long[] sorted = new\
    \ long[array.Count];\n        for (int i = 0; i < array.Count; i++) {\n      \
    \      sorted[i] = array.Last();\n        }\n        int evenSum = 0;\n      \
    \  int oddSum = 0;\n        int lastSum = 0;\n        int evenCount = 0, oddCount\
    \ = 0;\n        for (int i = 0; i < sorted.Length; i++) {\n            lastSum\
    \ = sorted[i];\n            if (lastSum % 2 == 0) evenCount += 1;\n          \
    \  else\n            {\n                oddSum += lastSum;\n                oddCount++;\n\
    \            }\n        }\n        if (evenCount % 2 == 0) evenSum += oddSum;\n\
    \        else\n        {\n            oddSum += evenSum;\n            evenCount++;\n\
    \        }\n        bool evenDesc = lastSum > evenSum;\n        evenSum += oddSum;\n\
    \        if (evenDesc)\n        {\n            evenSum = lastSum - evenSum;\n\
    \        }\n        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < sorted.Length; i++)\n        {\n            long value = sorted[i];\n\
    \            if (value == lastSum)\n            {\n                if (evenDesc)\n\
    \                {\n                    result.Add(value + 1);\n             \
    \   }\n            }\n            else if (value == evenSum)\n            {\n\
    \                result.Add(value + 1);\n            }\n            else\n   \
    \         {\n                result.Add(value);\n            }\n        }\n  \
    \      return result;", "        if (array.Count == 0) return new List<long>();\n\
    \        long firstIndex = array.Min();\n        long lastIndex = array.Max();\n\
    \        long sum = firstIndex + lastIndex;\n        bool isEven = (sum % 2) ==\
    \ 0 ? false : true;\n        if (array.Count == 1) { return isEven ? new List<long>(new\
    \ long[] { array[0] }) : new List<long>(new long[] { array[array.Count-1] });\
    \ }\n\n        if (sum % 2 == 0) {\n            List<long> result = new List<long>();\n\
    \            long i = firstIndex + 1;\n            while (i < lastIndex)\n   \
    \         {\n                if (isEven)\n                    result.Add(array[i]);\n\
    \                else\n                    result.Add(array[i] - array[i - 1]);\n\
    \                i++;\n            }\n            return result;\n        }\n\
    \        else\n        {\n            List<long> result = new List<long>();\n\
    \            long i = firstIndex + 1;\n            while (i < lastIndex)\n   \
    \         {\n                if (isEven)\n                    result.Add(array[i]\
    \ - array[i - 1]);\n                else\n                    result.Add(array[i]);\n\
    \                i++;\n            }\n            return result;\n        }",
  "        int n = array.Count;\n        // Sort the array into ascending order\n\
    \        var result = array.OrderBy(item => item);\n        // Sum all the numbers\
    \ in the array\n        long sum = 0;\n        foreach (var item in result) {\n\
    \            sum += item;\n        }\n        // Get the least number to be added\
    \ first\n        long first;\n        if (sum % 2 == 1) {\n            first =\
    \ result.First();\n            result = result.Skip(1).ToList();\n        } else\
    \ {\n            first = result.Last();\n            result = result.Take(n -\
    \ 1).ToList();\n        }\n        // Add all the numbers in the array\n     \
    \   foreach (var item in result) {\n            result.Add(first+item);\n    \
    \    }\n        // Return the resulting array\n        return result;", "    \
    \    if (array == null || array.Count == 0)\n            return null;\n\n    \
    \    long result = array.First();\n        if (array.Count > 1)\n            foreach\
    \ (long i in array.Skip(1))\n                result += i;\n\n        List<long>\
    \ result = new List<long>();\n        while (true) {\n            if (result %\
    \ 2 != 0)\n                result.Add(result);\n            else\n           \
    \     result.Sort(delegate (long l, long r) { return l < r; });\n\n          \
    \  if (array.Count > 1)\n                foreach (long i in array.Skip(1))\n \
    \                   result += i;\n            else {\n                result.Remove(result);\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       if (array == null) return null;\n        Array.Sort(array);\n        if\
    \ (array.Sum() % 2 == 0) return array.OrderBy(x => x).ToList();\n        else\
    \ return array.OrderByDescending(x => x).ToList();", "        long sum = 0;\n\
    \        List<long> list = new List<long>();\n        foreach (long i in array)\
    \ {\n            sum += i;\n            list.Add(i);\n        }\n        if (sum\
    \ % 2 == 1) {\n            list = list.OrderByDescending(i => i).ToList();\n \
    \       } else {\n            list = list.OrderBy(i => i).ToList();\n        }\n\
    \        Debug.WriteLine(\"list: \" + list);\n        return list;", "       \
    \ // write your code here\n        long sum = 0;\n        for(int i=0; i<array.Count;\
    \ i++){\n            sum = sum + array[i];\n        }\n\n        if(sum % 2 !=\
    \ 0){\n            array.Reverse();\n            sum = sum - 1;\n            array.Reverse();\n\
    \        }\n        Debug.WriteLine(\"sum = {0}, array = {1}\", sum, array.ToList());\n\
    \        return array;", "        List<long> result = array;\n        bool ascendingSumOddOrEven\
    \ = true;\n        bool ascendingIndexSumOddOrEven = true;\n        bool ascendingIndexFirstOddOrEven\
    \ = true;\n\n        if (array.Count < 2) { throw new ArgumentOutOfRangeException();}\n\
    \        var sum = array.Sum();\n\n        if (sum % 2 == 0) {\n            if\
    \ (sum > array.Count) { ascendingSumOddOrEven = false; }\n        }\n        else\
    \ if (sum > array.Count / 2) {\n            ascendingIndexFirstOddOrEven = false;\n\
    \            ascendingIndexSumOddOrEven = false;\n        }\n        else {\n\
    \            ascendingIndexFirstOddOrEven = true;\n            ascendingIndexSumOddOrEven\
    \ = false;\n        }\n\n        if (ascendingSumOddOrEven) {\n            var\
    \ sorted = array.OrderBy(x => x).ToList();\n            result = new List<long>(sorted);\n\
    \        }\n        else {\n            var sorted = array.OrderByDescending(x\
    \ => x).ToList();\n            result = new List<long>(sorted);\n        }\n\n\
    \        return result;", "        if (array == null) {\n            return new\
    \ List<long>();\n        }\n\n        // sort ascending\n        if (array.Sum(n\
    \ => n) % 2 == 0) {\n            array.Sort();\n        }\n        // sort descending\n\
    \        else {\n            array.Reverse();\n            array.Sort();\n   \
    \     }\n        return array;", "        Stopwatch sw = Stopwatch.StartNew();\n\
    \        long sum = 0;\n        int n = array.Count;\n        if (n % 2 != 0)\
    \ {\n            array = ReverseArray(array);\n            n = array.Count;\n\
    \        }\n        long tempSum;\n        for (int i = 0; i <= n; i += 2) {\n\
    \            sum = 0;\n            for (int j = i; j < n; j += 2) {\n        \
    \        sum += array[j];\n            }\n            tempSum = sum;\n       \
    \     while (tempSum > 0) {\n                if (tempSum % 2 == 0) {\n       \
    \             int pos = j - 1;\n                    while (pos >= 0 && array[pos]\
    \ == 0) {\n                        pos--;\n                    }\n           \
    \         if (pos >= 0) {\n                        array[j] += array[pos];\n \
    \                       array[pos] = array[j] % 10;\n                    }\n \
    \               } else {\n                    int pos = j + 1;\n             \
    \       while (pos < n && array[pos] == 0) {\n                        pos++;\n\
    \                    }\n                    if (pos < n) {\n                 \
    \       array[j] += array[pos];\n                        array[pos] = array[j]\
    \ % 10;\n                    }\n                }\n                tempSum -=\
    \ array[pos];\n                array[j] %= 10;\n                pos--;\n     \
    \       }\n        }\n        long newSum = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            newSum += array[i];\n        }\n        if (newSum % 2 ==\
    \ 0)\n            array = ReverseArray(array);\n        sw.Stop();\n        sw.ElapsedMilliseconds\
    \ / 1000;\n        return array;", "        // Write your code in C# 6.0. Don't\
    \ forget to convert it to C#6.0\n        \n        long sum = 0;\n        long\
    \ lastSum = 0;\n        long maxArray = array.Max();\n        \n        // sort\
    \ array\n        var result = array.OrderBy(a => a).ToList();\n        \n    \
    \    // find max sum\n        for (int i = 0; i < result.Count; i++) {\n     \
    \       sum += result[i];\n            if (sum > maxArray) {\n               \
    \ maxArray = sum;\n            }\n        }\n        \n        if (sum % 2 !=\
    \ 0) {\n            // sort array in descending order\n            result = result.OrderByDescending(a\
    \ => a).ToList();\n        } else {\n            // sort array in ascending order\n\
    \            result = result.OrderBy(a => a).ToList();\n        }\n        \n\
    \        // remove maxArray\n        int counter = 0;\n        for (int i = 0;\
    \ i < result.Count; i++) {\n            if (result[i] == maxArray) {\n       \
    \         result.RemoveAt(i);\n            }\n        }\n        \n        //\
    \ return sorted list\n        return result;", "        long min = array.Min();\n\
    \        long max = array.Max();\n        long sum = 0;\n        for (long i =\
    \ min; i < max; i++)\n            sum += array[i];\n        if (sum % 2 != 0)\n\
    \            array.Reverse();\n        if (sum % 2 == 0)\n            array.Reverse();\n\
    \        return array;", "        // Your code here\n        if (array == null\
    \ || array.Count == 0) {\n            throw new ArgumentException(\"array == null\
    \ or array.Count == 0\");\n        }\n        if (array.Count == 1) {\n      \
    \      return array;\n        }\n        long total = 0;\n        bool sumOdd\
    \ = true;\n        foreach (var item in array) {\n            total += item;\n\
    \            sumOdd = !sumOdd;\n        }\n        long start = 0;\n        long\
    \ end = array.Count - 1;\n        long mid = 0;\n        long tempSum = 0;\n \
    \       while (start < end) {\n            mid = (start + end) / 2;\n        \
    \    tempSum = array[mid];\n            if (tempSum < 0) {\n                end\
    \ = mid - 1;\n            } else if (tempSum > 0) {\n                start = mid\
    \ + 1;\n            } else {\n                mid++;\n            }\n        }\n\
    \        long sum = 0;\n        if (sumOdd) {\n            for (int i = start;\
    \ i < end; i++) {\n                sum += array[i];\n            }\n        }\
    \ else {\n            for (int i = start; i > end; i--) {\n                sum\
    \ += array[i];\n            }\n        }\n        List<long> newArray = new List<long>();\n\
    \        while (start < end) {\n            newArray.Add(array[start]);\n    \
    \        start++;\n        }\n        while (start < end) {\n            newArray.Add(sum\
    \ - array[start]);\n            start++;\n        }\n        newArray.Reverse();\n\
    \        return newArray;", "        // Sort input list\n        var inputList\
    \ = array.ToList();\n        Array.Sort(inputList);\n\n        // Calculate sum\
    \ of all the elements in the input list\n        var sumOfElements = inputList.Sum();\n\
    \n        // Calculate the odd and even sum\n        var oddSum = sumOfElements\
    \ % 2 == 1 ? sumOfElements : sumOfElements - 1;\n        var evenSum = sumOfElements\
    \ % 2 == 0 ? sumOfElements : sumOfElements + 1;\n\n        // Create a new list\
    \ which will have the odd numbers\n        var evenList = inputList.Where((value,\
    \ index) => index % 2 == 0).ToList();\n\n        // Create a new list which will\
    \ have the even numbers\n        var oddList = inputList.Where((value, index)\
    \ => index % 2 == 1).ToList();\n\n        // Create a new list which will contain\
    \ both\n        var newList = oddList.Concat(evenList).ToList();\n\n        //\
    \ Return the sorted list\n        return newList.OrderBy(x => x).ToList();", " \
    \       int[] tempArray = new int[array.Count];\n        int sum = 0;\n      \
    \  int index = 0;\n        // Find the first odd sum and use that index to find\
    \ all odd sums before it.\n        for (int i = 0; i < array.Count; i++) {\n \
    \           if (i % 2 == 0) {\n                sum += array[i];\n            \
    \    tempArray[index++] = i;\n            }\n        }\n        // If sum is odd,\
    \ use last odd index as last odd sum\n        if (sum % 2 != 0) {\n          \
    \  index--;\n        }\n        // Find the last odd sum and use that index to\
    \ find all odd sums after it.\n        for (int i = array.Count - 1; i > 0; i--)\
    \ {\n            if (i % 2 == 0) {\n                sum += array[i];\n       \
    \         tempArray[index++] = i;\n            }\n        }\n        if (sum %\
    \ 2 != 0) {\n            index++;\n        }\n        Array.Sort(tempArray);\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < tempArray.Length;\
    \ i++) {\n            result.Add(array[index + i]);\n        }\n        return\
    \ result;", "        // Sort the given list by summing the first and last element\
    \ of it\n        if (array.Count < 2) return array;\n        long sum = (array[0]\
    \ + array[1]) % 2 == 0 ? array[0] + array[1] : array[0] - array[1];\n        List<long>\
    \ sortedList = new List<long>();\n        bool evenSum = sum % 2 == 0;\n     \
    \   bool oddSum = sum % 2 != 0;\n        int index = 0;\n        while (index\
    \ < array.Count) {\n            int left = 0, right = array.Count - 1;\n     \
    \       long pivot = sum / 2;\n            while (left <= right) {\n         \
    \       if (evenSum) {\n                    if (array[left] + array[right] >=\
    \ pivot) left++;\n                    else right--;\n                } else {\n\
    \                    if (array[left] + array[right] <= pivot) left++;\n      \
    \              else right--;\n                }\n            }\n            sortedList.Add(array[index]);\n\
    \            index = left;\n        }\n        if (oddSum) sortedList.Reverse();\n\
    \        return sortedList;", "        List<long> result = new List<long>();\n\
    \        long totalSum = 0;\n        long totalSum2 = 0;\n        if (array.Count\
    \ > 0) {\n            totalSum = array.Sum();\n            totalSum2 = totalSum\
    \ / 2;\n            for (int i = 0; i < array.Count; i++) {\n                result.Add(array[i]);\n\
    \            }\n            result = result.OrderBy(x => x).ToList();\n      \
    \      long sum = 0;\n            for (int i = 0; i < result.Count; i++) {\n \
    \               sum += result[i];\n            }\n            if ((sum + totalSum)\
    \ % 2 == 0) {\n                result = result.OrderByDescending(x => x).ToList();\n\
    \            } else {\n                result = result.OrderBy(x => x).ToList();\n\
    \            }\n        }\n        return result;", "        long sumOfArray =\
    \ array.Sum();\n        long sumOfSortedArray = sumOfArray;\n\n        if (sumOfSortedArray\
    \ % 2 == 0)\n            sumOfSortedArray = sumOfSortedArray / 2;\n        else\n\
    \            sumOfSortedArray = sumOfSortedArray * 3 + 1;\n\n        long min\
    \ = array.Min();\n        long max = array.Max();\n\n        bool isEvenSum =\
    \ sumOfSortedArray % 2 == 0;\n\n        if (isEvenSum)\n        {\n          \
    \  sumOfSortedArray = sumOfSortedArray / 2;\n            sum = sumOfArray;\n \
    \       }\n        else\n        {\n            sumOfSortedArray = sumOfSortedArray\
    \ * 3 + 1;\n            sum = sumOfArray;\n        }\n\n        List<long> sortedList\
    \ = new List<long>();\n\n        bool isRight = false;\n\n        while (!sortedList.Contains(min)\
    \ && !sortedList.Contains(max))\n        {\n            if (sumOfSortedArray ==\
    \ sum)\n            {\n                isRight = true;\n                break;\n\
    \            }\n            else\n            {\n                if (sumOfSortedArray\
    \ > sum)\n                {\n                    sumOfSortedArray = sumOfSortedArray\
    \ - sum;\n                }\n                else\n                {\n       \
    \             sumOfSortedArray = sumOfSortedArray + sum;\n                }\n\n\
    \                sum = sumOfSortedArray;\n            }\n        }\n\n       \
    \ if (isRight)\n        {\n            sortedList.Add(min);\n            sortedList.Add(max);\n\
    \        }\n        else\n        {\n            sortedList.Add(max);\n      \
    \      sortedList.Add(min);\n        }\n\n        return sortedList;", "     \
    \   long sum = 0;\n        int evenCount = 0;\n        int oddCount = 0;\n   \
    \     array.ForEach(x => {\n            sum += x;\n            if (sum % 2 ==\
    \ 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n        });\n\n        if (evenCount > oddCount) {\n         \
    \   return array.OrderBy(x => x).ToList();\n        } else {\n            return\
    \ array.OrderByDescending(x => x).ToList();\n        }", "        int? sum = null;\n\
    \        var max = array.Max();\n        var min = array.Min();\n        var max\
    \ = array.Count;\n        if (array.Count > 1) {\n            sum = (array[0]\
    \ + array[array.Count - 1]);\n        }\n        if (sum is int) {\n         \
    \   int[] sortedArray = new int[array.Count];\n            int index = 0;\n  \
    \          while (index < array.Count) {\n                sortedArray[index] =\
    \ index;\n                index += 1;\n            }\n            bool isOddSum\
    \ = (sum is int && ((sum % 2) == 1));\n            if (isOddSum) {\n         \
    \       Array.Reverse(sortedArray);\n            }\n            int left = 0,\
    \ right = sortedArray.Length - 1;\n            while (left < right) {\n      \
    \          int mid = (left + right) / 2;\n                if (array[sortedArray[mid]]\
    \ < array[sortedArray[mid + 1]]) {\n                    right = mid;\n       \
    \         } else {\n                    left = mid + 1;\n                }\n \
    \           }\n            List<long> result = new List<long>(array);\n      \
    \      if (isOddSum) {\n                for (int i = left; i < right; i++) {\n\
    \                    result.Add(array[i]);\n                }\n            } else\
    \ {\n                for (int i = left; i > right; i--) {\n                  \
    \  result.Add(array[i]);\n                }\n            }\n            return\
    \ result;\n        } else {\n            return array;\n        }", "        if\
    \ (array == null || array.Count < 1) {\n            return array;\n        }\n\
    \        long sum = 0;\n        // Sort the array\n        foreach (var item in\
    \ array) {\n            sum += item;\n        }\n        int size = array.Count;\n\
    \        if (sum % 2 == 0) {\n            return array.OrderByDescending(item\
    \ => item).ToList();\n        } else {\n            return array.OrderBy(item\
    \ => item).ToList();\n        }", "        if (array == null)\n            return\
    \ null;\n        long sum = array.Sum();\n        Array.Sort(array, (first, last)\
    \ => {\n            return ((first - last) / sum) * sum - (first + last);\n  \
    \      });\n        return array;", "        var n = array.Count;\n        if\
    \ (n == 0) {\n            return new List<long>();\n        }\n        var sum\
    \ = array.Sum();\n        if (sum % 2 != 0) {\n            return array.OrderByDescending(r\
    \ => r).ToList();\n        }\n        return array.OrderBy(r => r).ToList();",
  "        if (array == null || array.Count < 2) return array;\n        int max =\
    \ array.Max();\n        int min = array.Min();\n        int sum = (max + min)\
    \ / 2;\n        long sum2 = sum * sum;\n        if (sum % 2 == 1) return array.Reverse().Select(x\
    \ => (long)((sum2 - x) / sum)).ToList();\n        else return array.Select(x =>\
    \ (long)((sum2 - x) / sum)).ToList();", "        long sum = array.Sum();\n   \
    \     var evenSum = (sum % 2) == 0;\n        var even = (evenSum) ? 1 : -1;\n\
    \        var evenList = array.Where((x, i) => i % 2 == 0).OrderBy(x => x).ToList();\n\
    \        var oddList = array.Where((x, i) => i % 2 != 0).OrderByDescending(x =>\
    \ x).ToList();\n        list.AddRange(evenList + oddList);\n        return list.OrderBy(x\
    \ => x).ToList();", "        var sorted = array.OrderBy(i => i).ToList();\n  \
    \      // if sum is odd\n        if (sorted.Sum() % 2 == 1) {\n            return\
    \ sorted.Reverse();\n        }\n        // sum is even\n        return sorted;",
  "        List<long> sorted = new List<long>();\n        int[] sumArray = new int[array.Count];\n\
    \        int sum = 0;\n        int sumLast = 0;\n        for (int i = 0; i < array.Count;\
    \ i++) {\n            sumArray[i] = array[i];\n            sum += array[i];\n\
    \        }\n\n        if (sum % 2 == 1) {\n            sumLast = sum - 1;\n  \
    \      } else {\n            sumLast = sum;\n        }\n\n        Array.Sort(sumArray);\n\
    \n        int start = 0;\n        int end = sumArray.Length - 1;\n        while\
    \ (end >= start) {\n            if (sumArray[start] < sumArray[end]) {\n     \
    \           sorted.Add(sumArray[start]);\n                start++;\n         \
    \   } else {\n                sorted.Add(sumArray[end]);\n                end--;\n\
    \            }\n        }\n\n        if (sumLast % 2 == 1) {\n            sorted.Add(sumLast);\n\
    \        } else {\n            sorted.Reverse();\n        }\n\n        return\
    \ sorted;", "        array.Sort();\n        if (array.Sum() % 2 == 1) {\n    \
    \        array.Reverse();\n        }\n        return array;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long temp = 0;\n\
    \        bool even = array.Count == 0 || array.First() % 2 == 0;\n        if (even)\n\
    \        {\n            temp = array.First();\n            int firstIndex = 0,\
    \ lastIndex = array.Count - 1;\n            while (firstIndex < lastIndex)\n \
    \           {\n                sum = temp + array[firstIndex];\n             \
    \   result.Insert(firstIndex, sum);\n                firstIndex++;\n         \
    \       lastIndex--;\n            }\n        }\n        else\n        {\n    \
    \        temp = array.Last();\n            int firstIndex = array.Count - 1, lastIndex\
    \ = 0;\n            while (firstIndex > lastIndex)\n            {\n          \
    \      sum = temp + array[lastIndex];\n                result.Insert(lastIndex,\
    \ sum);\n                firstIndex--;\n                lastIndex++;\n       \
    \     }\n        }\n        return result;", "        int n = array.Count;\n \
    \       List<long> list = array.ToList();\n        long sum = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            sum += list[i];\n        }\n        if\
    \ (sum % 2 != 0) {\n            list = list.OrderByDescending(l => l).ToList();\n\
    \        }\n        if (sum % 2 == 0) {\n            list = list.OrderBy(l =>\
    \ l).ToList();\n        }\n        return list;", "        if (array.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        var size = array.Count;\n\
    \        var min = array.Min();\n        var max = array.Max();\n        var middle\
    \ = (min + max) / 2;\n        var half = (min + max) / 2;\n        var temp =\
    \ array.OrderBy(n => n).ToArray();\n        List<long> result = new List<long>();\n\
    \        if (temp[size - 1] < middle) {\n            if (temp[size - 1] == max)\
    \ {\n                if (temp[size - 2] < max) {\n                    result.Add(temp[size\
    \ - 2]);\n                    result.Add(temp[size - 1]);\n                }\n\
    \                else {\n                    result.Add(temp[size - 1]);\n   \
    \             }\n            }\n            else {\n                result.Add(temp[size\
    \ - 1]);\n            }\n        }\n        else {\n            if (temp[size\
    \ - 1] == max) {\n                if (temp[size - 2] > max) {\n              \
    \      result.Add(temp[size - 2]);\n                    result.Add(temp[size -\
    \ 1]);\n                }\n                else {\n                    result.Add(temp[size\
    \ - 1]);\n                }\n            }\n            else {\n             \
    \   result.Add(temp[size - 1]);\n            }\n        }\n        return result;",
  "        bool sumEvenOrOdd = ((array.Sum() % 2) == 0);\n\n        List<long> newArray\
    \ = new List<long>();\n\n        if (sumEvenOrOdd) {\n            // sort even\
    \ sum\n            int low = 0;\n            int high = array.Count - 1;\n   \
    \         while (low < high) {\n                int mid = (low + high) / 2;\n\
    \                if (array[mid] < array[mid + 1]) {\n                    low =\
    \ mid + 1;\n                } else {\n                    high = mid;\n      \
    \          }\n            }\n\n            // sort odd sum\n            low =\
    \ 0;\n            high = array.Count - 1;\n            while (low < high) {\n\
    \                int mid = (low + high) / 2;\n                if (array[mid] >\
    \ array[mid + 1]) {\n                    high = mid;\n                } else {\n\
    \                    low = mid;\n                }\n            }\n\n        \
    \    while (low < array.Count - 1) {\n                newArray.Add(array[low++]);\n\
    \            }\n\n        } else {\n            // sort odd sum\n            int\
    \ low = 0;\n            int high = array.Count - 1;\n            while (low <\
    \ high) {\n                int mid = (low + high) / 2;\n                if (array[mid]\
    \ > array[mid + 1]) {\n                    low = mid + 1;\n                } else\
    \ {\n                    high = mid;\n                }\n            }\n\n   \
    \         while (low < array.Count - 1) {\n                newArray.Add(array[low++]);\n\
    \            }\n\n            // sort even sum\n            low = 0;\n       \
    \     high = array.Count - 1;\n            while (low < high) {\n            \
    \    int mid = (low + high) / 2;\n                if (array[mid] < array[mid +\
    \ 1]) {\n                    low = mid + 1;\n                } else {\n      \
    \              high = mid;\n                }\n            }\n        }\n\n  \
    \      return newArray;", "        List<long> ret = new List<long>(array);\n \
    \       double sum = 0;\n        for (int i = 0; i < ret.Count; i++) {\n     \
    \       sum += ret[i];\n        }\n        if (sum % 2 == 0) {\n            ret.Sort();\n\
    \        } else {\n            ret = ret.Reverse();\n            ret.Sort();\n\
    \        }\n        return ret;", "        if (array == null || array.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n\n        // if the sum\
    \ of first and last element is odd\n        if (array.Sum() % 2 != 0) {\n    \
    \        // then sort it in descending order\n            Array.Sort(array, (l,\
    \ r) => r - l);\n        }\n        return array;", "        long first = array.First();\n\
    \        long last = array.Last();\n        if (array.Count <= 1) {\n        \
    \    return array;\n        }\n        long firstSum = array.Sum(x => x);\n  \
    \      long lastSum = array.Sum(x => x);\n        if (firstSum%2 == 0)\n     \
    \   {\n            long[] temp = new long[array.Count];\n            int i = 0;\n\
    \            for (long x = first; x < last; x++)\n            {\n            \
    \    temp[i] = x;\n                i++;\n            }\n            array = temp;\n\
    \        }\n        else\n        {\n            long[] temp = new long[array.Count];\n\
    \            int i = array.Count-1;\n            for (long x = last; x > first;\
    \ x--)\n            {\n                temp[i] = x;\n                i--;\n  \
    \          }\n            array = temp;\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long x in array)\n        {\n        \
    \    result.Add(x);\n        }\n        Array.Sort(result);\n        return result;",
  "        if (array.Count <= 0) {\n            Debug.Assert(array.Count == 0);\n\
    \            return array;\n        }\n        if (array.Count == 1) {\n     \
    \       return array;\n        }\n        List<long> first = new List<long>()\
    \ { array[0], array[1] };\n        List<long> second = new List<long>() { array[1],\
    \ array[0] };\n        List<long> result = new List<long>();\n        List<long>\
    \ finalResult = result.Concat(new List<long>() { first, second }).ToList();\n\
    \        if (finalResult.Sum(x => x) % 2 == 0) {\n            finalResult = finalResult.Reverse();\n\
    \        }\n        return finalResult;", "        if (array.Count < 2)\n    \
    \        return array;\n        List<long> tempArray = new List<long>(array);\n\
    \        long sum = 0;\n        foreach (long i in tempArray)\n            sum\
    \ += i;\n        if (sum % 2 == 1)\n            tempArray.Sort(CompareDescending);\n\
    \        else\n            tempArray.Sort(CompareAscending);\n        return tempArray;",
  "        long sumFirst = array.ElementAt(0);\n        long sumLast = array.ElementAt(array.Count\
    \ - 1);\n        bool sumOdd = (sumFirst % 2) == (sumLast % 2);\n        if (sumOdd)\
    \ {\n            SortArray(array, sumOdd);\n        }\n        else {\n      \
    \      SortArray(array, !sumOdd);\n        }\n        return array;", "      \
    \  List<long> res = new List<long>();\n        int sum = 0;\n        foreach (long\
    \ item in array) {\n            sum = sum + item;\n            res.Add(item);\n\
    \        }\n        if (sum % 2 != 0) {\n            Array.Sort(res);\n      \
    \  } else {\n            Array.Sort(res);\n            int len = res.Count;\n\
    \            while (len > 1) {\n                long item = res[0];\n        \
    \        for (int i = 0; i < len - 1; i++) {\n                    if (res[i +\
    \ 1] > item) {\n                        res[i] = res[i + 1];\n               \
    \         res[i + 1] = item;\n                    } else {\n                 \
    \       res[i] = item;\n                    }\n                }\n           \
    \     len--;\n            }\n        }\n        return res;", "        int sumFirstIndex\
    \ = array.Sum(x => x);\n        int sumLastIndex = array.Sum(x => x) - sumFirstIndex;\n\
    \        Console.WriteLine(\"sumFirstIndex:{0}  sumLastIndex:{1}, array:{2}\"\
    , sumFirstIndex, sumLastIndex, array.ToArray());\n\n        if (sumLastIndex %\
    \ 2 == 0) {\n            Console.WriteLine(\"descending\");\n            return\
    \ array.OrderByDescending(x => x).ToList();\n        }\n\n        Console.WriteLine(\"\
    ascending\");\n        return array.OrderBy(x => x).ToList();", "        long\
    \ sum = 0;\n        foreach (long x in array) {\n            sum += x;\n     \
    \   }\n        if (sum % 2 == 0) {\n            array.Reverse();\n           \
    \ return array;\n        }\n        long lastSum = 0;\n        foreach (long x\
    \ in array) {\n            lastSum += x;\n        }\n        if (lastSum % 2 !=\
    \ 0) {\n            array.Reverse();\n            return array;\n        }\n \
    \       long firstSum = 0;\n        foreach (long x in array) {\n            firstSum\
    \ += x;\n        }\n        if (firstSum % 2 == 0) {\n            array.Reverse();\n\
    \            return array;\n        }\n        return array;", "        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        long firstIndex\
    \ = 0;\n        long lastIndex = 0;\n\n        // If any list is empty, return\
    \ an empty list.\n        if (array.Count == 0) {\n            return new List<long>();\n\
    \        }\n\n        foreach (long value in array) {\n            // Check if\
    \ this number is odd.\n            if (value % 2 != 0) {\n                sum\
    \ = sum + value;\n            } else {\n                sum = sum - value;\n \
    \           }\n\n            // Add the number to the result list.\n         \
    \   result.Add(value);\n\n            // Check for an even sum.\n            if\
    \ (sum % 2 == 0) {\n                // If the sum is even, save the indexes.\n\
    \                firstIndex = firstIndex + 1;\n                lastIndex = lastIndex\
    \ + 1;\n            }\n\n            // Check for an odd sum.\n            if\
    \ (sum % 2 != 0) {\n                // If the sum is odd, save the indexes.\n\
    \                firstIndex = firstIndex;\n                lastIndex = lastIndex;\n\
    \            }\n        }\n\n        // Return the sorted list.\n        return\
    \ result.OrderBy(index => index).ToList();", "        int sum = 0; // sum of all\
    \ numbers in array\n        foreach (long num in array) { sum += num; }\n\n  \
    \      if (sum % 2 == 0) // if the sum is even reverse the array\n        {\n\
    \            array.Reverse();\n            sum = 0; // sum the numbers again\n\
    \            foreach (long num in array) { sum += num; }\n        }\n\n      \
    \  if (sum < 0) // if the sum is negative, sort the array in descending order\n\
    \        {\n            Array.Sort(array);\n        }\n\n        return array;",
  "        bool reverse = array.Sum() % 2 == 1;\n        bool ascending = array.Sum()\
    \ < array.Max();\n        long maxValue = array.Max();\n        long minValue\
    \ = array.Min();\n        long sum = 0;\n        long[] array2 = array.ToArray();\n\
    \        long[] array3 = new long[array2.Length - 1];\n        for (int i = 0;\
    \ i < array2.Length; i++) {\n            sum += array2[i];\n        }\n      \
    \  long sumOfMin = minValue + sum;\n        if (sumOfMin == maxValue) {\n    \
    \        array3 = array2.ToArray();\n        } else {\n            for (int i\
    \ = 1; i < array2.Length; i++) {\n                if (array2[i] < minValue) {\n\
    \                    for (int j = i; j >= 0; j--) {\n                        array3[j]\
    \ = array2[j];\n                    }\n                    i = j;\n          \
    \          break;\n                } else if (array2[i] > maxValue) {\n      \
    \              for (int j = i; j >= 0; j--) {\n                        array3[j]\
    \ = array2[j];\n                    }\n                    i = j;\n          \
    \          break;\n                } else if (array2[i] == maxValue) {\n     \
    \               array3[i - 1]++;\n                    for (int j = i; j < array2.Length\
    \ - 1; j++) {\n                        array3[j] = array2[j + 1];\n          \
    \          }\n                    i = array2.Length - 1;\n                   \
    \ break;\n                } else if (array2[i] == minValue) {\n              \
    \      array3[i - 1]++;\n                    for (int j = i; j < array2.Length\
    \ - 1; j++) {\n                        array3[j] = array2[j + 1];\n          \
    \          }\n                    i = array2.Length - 1;\n                   \
    \ break;\n                } else if (array2[i] < maxValue && array2[i] > minValue)\
    \ {\n                    array3[i - 1]++;\n                    for (int j = i;\
    \ j < array2.Length - 1; j++) {\n                        array3[j] = array2[j\
    \ + 1];\n                    }\n                    i = array2.Length - 1;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    return (reverse ? array3.Reverse() : array3).ToList();", "        if (array.Count\
    \ == 0) return array;\n        if (array.Count < 2) {\n            array.Add(0L);\n\
    \            array.Add(1L);\n            return array;\n        }\n        int\
    \ first = array.Count - 1;\n        bool even = array.ElementAt(first) % 2 ==\
    \ 0;\n        if (even) {\n            return array.OrderByDescending(x => x).ToList();\n\
    \        } else {\n            return array.OrderBy(x => x).ToList();\n      \
    \  }", "        long sum = 0;\n        long cur = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (var i in array) {\n            cur +=\
    \ i;\n            sum += cur;\n            result.Add(cur);\n        }\n     \
    \   if (sum % 2 != 0) {\n            result = result.OrderByDescending(a => a).ToList();\n\
    \        } else {\n            result = result.OrderBy(a => a).ToList();\n   \
    \     }\n        return result;", "        long[] arrays = array.ToArray();\n\
    \        Array.Sort(arrays);\n        if (arrays.Sum() % 2 == 1) {\n         \
    \   Array.Sort(arrays);\n        }\n        return arrays;", "        var arr\
    \ = array.ToArray();\n        Array.Sort(arr);\n        if (arr.Last() - arr.First()\
    \ == 1)\n        {\n            int firstIndex = arr.First();\n            int\
    \ lastIndex = arr.Last();\n            if (lastIndex %2 == 0)\n            {\n\
    \                return new List<long>() { arr[lastIndex / 2] };\n           \
    \ }\n            return new List<long>() { arr[firstIndex - 1], arr[lastIndex\
    \ / 2] };\n        }\n        else\n        {\n            int firstIndex = arr.First();\n\
    \            int lastIndex = arr.Last();\n            if (lastIndex %2 == 0)\n\
    \            {\n                return new List<long>() { arr[lastIndex - 1],\
    \ arr[lastIndex / 2] };\n            }\n            return new List<long>() {\
    \ arr[firstIndex - 1], arr[lastIndex - 1] };\n        }", "        // write your\
    \ code here\n        if (array.Count == 0)\n            throw new ArgumentException(\"\
    Input list should be greater than zero.\");\n        if (array.Count > 1)\n  \
    \          throw new ArgumentException(\"Input list should be less than or equal\
    \ only one.\");\n        int size = array.Count;\n        if (size <= 1)\n   \
    \         return array;\n\n        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        long sum = array[0] + array[size - 1];\n        bool\
    \ isOddSum = true;\n        bool isEvenSum = true;\n        if (sum % 2 == 0)\n\
    \            isEvenSum = false;\n        else\n            isOddSum = false;\n\
    \        int mid = size / 2;\n        long midSum = 0;\n        for (int i = 0;\
    \ i < mid; i++) {\n            midSum += array[i];\n            if (isOddSum)\
    \ {\n                if (midSum % 2 == 0)\n                    midSum -= array[i];\n\
    \            }\n            else {\n                if (midSum % 2 != 0)\n   \
    \                 midSum -= array[i];\n            }\n        }\n        midSum\
    \ = midSum / 2;\n        long rightSum = 0;\n        for (int i = 0; i < mid;\
    \ i++) {\n            rightSum += array[i];\n            if (isEvenSum) {\n  \
    \              if (rightSum % 2 == 0)\n                    rightSum -= array[i];\n\
    \            }\n            else {\n                if (rightSum % 2 != 0)\n \
    \                   rightSum -= array[i];\n            }\n        }\n        rightSum\
    \ = rightSum / 2;\n        result.Add(isOddSum ? midSum : rightSum);\n       \
    \ for (int i = 1; i < mid; i++) {\n            result.Add(midSum);\n         \
    \   if (isEvenSum) {\n                result.Add(rightSum);\n            }\n \
    \           else {\n                result.Add(0);\n            }\n          \
    \  if (isOddSum) {\n                result.Add(midSum);\n                result.Add(rightSum);\n\
    \            }\n            else {\n                result.Add(midSum);\n    \
    \        }\n        }\n        if (isOddSum) {\n            for (int i = mid -\
    \ 1; i > 0; i--) {\n                result.Add(midSum);\n                if (isEvenSum)\
    \ {\n                    result.Add(rightSum);\n                }\n          \
    \      else {\n                    result.Add(0);\n                }\n       \
    \         if (isOddSum) {\n                    result.Add(midSum);\n         \
    \           result.Add(rightSum);\n                }\n                else {\n\
    \                    result.Add(midSum);\n                }\n            }\n \
    \       }\n        for (int i = 1; i < mid; i++) {\n            result.Add(midSum);\n\
    \            if (isEvenSum) {\n                result.Add(rightSum);\n       \
    \     }\n            else {\n                result.Add(0);\n            }\n \
    \           if (isOddSum) {\n                result.Add(midSum);\n           \
    \     result.Add(rightSum);\n            }\n            else {\n             \
    \   result.", "        if (array.Count < 1)\n            return array;\n     \
    \   long lastSum = array.Last();\n        long firstSum = array[0];\n        long\
    \ sum = 0;\n        foreach (var i in array) {\n            if (i % 2 == 0) {\n\
    \                sum += firstSum;\n            }\n            else {\n       \
    \         sum -= lastSum;\n            }\n            lastSum = firstSum;\n  \
    \          firstSum = i;\n        }\n        switch (sum) {\n            case\
    \ 0:\n                return array;\n            case 1:\n                return\
    \ new List<long>() { array[0] };\n            case 2:\n                return\
    \ new List<long>() { array[1], array[0] };\n            case 3:\n            \
    \    return new List<long>() { array[2], array[1], array[0] };\n            default:\n\
    \                return new List<long>() { array[2], array[1], array[0], array[3],\
    \ array[2], array[1], array[0] };\n        }", "        long sum = array.Sum();\n\
    \        List<long> sortedArray = array.OrderByDescending(x => x).ThenByDescending(x\
    \ => x).ToList();\n        if (sum % 2 == 0) {\n            sortedArray.Reverse();\n\
    \        }\n        return sortedArray;", "        if (array.Count == 0) return\
    \ new List<long>();\n        long sum = 0;\n        long minSum = array.First();\n\
    \        long maxSum = array.Last();\n        for (int i = 0; i < array.Count;\
    \ i++) {\n            sum += array[i];\n            if (sum < minSum) minSum =\
    \ sum;\n            if (sum > maxSum) maxSum = sum;\n        }\n        List<long>\
    \ ret = new List<long>();\n        for (int i = 0; i < array.Count; i++) {\n \
    \           long value = array[i];\n            if (sum % 2 == 0 && value < minSum)\
    \ {\n                ret.Push(-1);\n                break;\n            }\n  \
    \          if (sum % 2 == 1 && value > maxSum) {\n                ret.Push(1);\n\
    \                break;\n            }\n            ret.Push(value);\n       \
    \     sum -= value;\n        }\n        return ret;", "        long sum = 0;\n\
    \        bool isOddSum = false;\n        bool isEvenSum = false;\n        bool\
    \ isDescend = true;\n        Array.Sort(array, (a, b) => isDescend = a > b ? true\
    \ : isDescend = b > a ? true : false);\n        if (array.Count == 0) {\n    \
    \        return array;\n        }\n\n        foreach (var i in array) {\n    \
    \        sum += i;\n            if (sum % 2 == 0) {\n                isEvenSum\
    \ = true;\n            } else {\n                isEvenSum = false;\n        \
    \    }\n        }\n        if (isEvenSum) {\n            Array.Sort(array, (a,\
    \ b) => isDescend = a > b ? false : isDescend = b > a ? false : true);\n     \
    \   }\n\n        return array;", "        // your logic here\n        var firstIndex\
    \ = 0;\n        var lastIndex = array.Count - 1;\n        var currentSum = 0;\n\
    \        var newArray = new List<long>();\n        while (firstIndex < lastIndex)\
    \ {\n            currentSum += array[firstIndex];\n            if (currentSum\
    \ % 2 == 1) {\n                currentSum -= array[firstIndex];\n            \
    \    newArray.Add(array[firstIndex]);\n                firstIndex++;\n       \
    \     } else {\n                newArray.Add(array[lastIndex]);\n            \
    \    lastIndex--;\n            }\n        }\n        return newArray;", "    \
    \    // Do not write the full code here\n        if (array == null || array.Count\
    \ == 0) return new List<long>();\n        if (array.Count == 1) return array;\n\
    \n        // find max num\n        long maxNum = array.Max();\n\n        // if\
    \ max num is odd\n        if (maxNum % 2 == 0) {\n            // sort in descending\
    \ order\n            Array.Sort(array, array.Reverse());\n        }\n        else\
    \ {\n            // sort in ascending order\n            Array.Sort(array);\n\
    \        }\n\n        return array;"]
stop_tokens:
- "\n    }\n"
