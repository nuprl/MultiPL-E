language: cs
name: HumanEval_91_is_bored
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0L;\n        foreach (string
    word in S.Split('.')) {\n            if (word.ToLower()[0].Equals(\"i\")) {\n
    \               count++;\n            }\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4af03bb18e342178e85eb61cb96bcdb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4af03bb18e342178e85eb61cb96bcdb>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        return S.Length >= 3 && \n            (S[0]
    == 'I' || S[0] == 'i') &&\n            S.Substring(1, 3).All(x => x == '.' ||
    x == '?' || x == '!');\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkhzmglsk.cs(18,16): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        foreach (string
    s in SplitString(S)) {\n            if (s.StartsWith(\"I\"))\n                count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz4dbw8k9.cs(19,30): error CS0103: The name ''SplitString'' does not exist
    in the current context

    '
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int count = 0;\n        bool isFirst
    = true;\n        foreach(string word in S.Split('.', '?', '!')){\n            if(isFirst){\n
    \               isFirst = false;\n                continue;\n            }\n            if
    (word == \"I\"){\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <827f08f9b9f74ceb9cb496b3046de87b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <827f08f9b9f74ceb9cb496b3046de87b>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Your code here\n        long count
    = 0L;\n        int pos = 0;\n        string str = S;\n        while (pos < str.Length)
    {\n            if (str[pos] == '?') {\n                pos = pos + 1;\n                if
    (pos == str.Length) break;\n            } else if (str[pos] == '!') {\n                pos
    = pos + 1;\n                if (pos == str.Length) break;\n            } else
    if (str[pos] == '.') {\n                pos = pos + 1;\n                if (pos
    == str.Length) break;\n            }\n            else\n                pos++;\n
    \       }\n        if (pos == str.Length)\n            return 0;\n        if (str[0]
    == 'I')\n            return 1;\n        if (pos > 0 && str.Substring(pos - 1,
    1) == \"a\") {\n            return 1 + IsBored(str.Substring(0, pos - 1));\n        }\n
    \       return 1 + IsBored(str.Substring(0, pos));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de2deb16b96a4d418b49c7f5210e6cb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de2deb16b96a4d418b49c7f5210e6cb0>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        IList<string> Words = S.Split('.').ToList();\n
    \       IList<string> WordsToCount = new List<string>();\n        bool First =
    true;\n        bool Last = true;\n        foreach(string Word in Words) {\n            if(First
    && Last) {\n                WordsToCount.Add(Word);\n            }\n            else
    if(First && Word == \"I\") {\n                First = false;\n            }\n
    \           else if(Last && Word == \"I\") {\n                Last = false;\n
    \           }\n            else if(Word == \"?\") {\n                First = true;\n
    \           }\n            else if(Word == \"!\") {\n                Last = true;\n
    \           }\n            else {\n                WordsToCount.Add(Word);\n            }\n
    \       }\n        long Count = 0;\n        foreach(string WordToCount in WordsToCount)
    {\n            foreach(string WordToCheck in WordsToCount) {\n                if(WordToCheck.Equals(WordToCount,
    StringComparison.OrdinalIgnoreCase)) {\n                    Count++;\n                }\n
    \           }\n        }\n        return Count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <335f1809d316443da23f4e188627691a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <335f1809d316443da23f4e188627691a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string t = S;\n        bool flag = false;\n
    \       int boredoms = 0;\n        for (int i = 0; i < t.Length; i++) {\n            if
    (t[i] == 'I') {\n                flag = true;\n            }\n            else
    if (t[i] == t[0].ToUpper()) {\n                flag = true;\n            }\n            if
    (flag == true) {\n                boredoms++;\n                flag = false;\n
    \           }\n        }\n        return (boredoms);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo_kdx4gp.cs(25,35): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    '
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        Regex r = new Regex(@\"^I\");\n        foreach
    (string s in S) {\n            if (r.IsMatch(s))\n                return 1;\n
    \       }\n        return 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqtexl14e.cs(18,9): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpqtexl14e.cs(18,23): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpqtexl14e.cs(19,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredomCount = 0;\n        S = S.ToLower();\n
    \       string sArr1 = S.Split('.');\n        string sArr2 = S.Split('!');\n        string
    sArr3 = S.Split('?');\n        if (sArr1.Length > 0) {\n            bool firstI
    = sArr1[0] == \"i\";\n            boredomCount += firstI ? 1 : 0;\n            sArr1
    = sArr1.Skip(1).ToArray();\n            for (int i = 0; i < sArr1.Length; i++)
    {\n                string sArr = sArr1[i].Split(' ');\n                string
    sArr2 = sArr.FirstOrDefault(s => s.Equals(\"i\", StringComparison.CurrentCultureIgnoreCase));\n
    \               if (sArr2 != null)\n                    boredomCount += sArr2.Length
    > 0 ? 1 : 0;\n            }\n        }\n        if (sArr2.Length > 0) {\n            boredomCount
    += sArr2.Length;\n            sArr2 = sArr2.Skip(1).ToArray();\n            for
    (int i = 0; i < sArr2.Length; i++) {\n                string sArr = sArr2[i].Split('
    ');\n                string sArr3 = sArr.FirstOrDefault(s => s.Equals(\"i\", StringComparison.CurrentCultureIgnoreCase));\n
    \               if (sArr3 != null)\n                    boredomCount += sArr3.Length
    > 0 ? 1 : 0;\n            }\n        }\n        if (sArr3.Length > 0) {\n            boredomCount
    += sArr3.Length;\n            sArr3 = sArr3.Skip(1).ToArray();\n            for
    (int i = 0; i < sArr3.Length; i++) {\n                string sArr = sArr3[i].Split('
    ');\n                string sArr1 = sArr.FirstOrDefault(s => s.Equals(\"i\", StringComparison.CurrentCultureIgnoreCase));\n
    \               if (sArr1 != null)\n                    boredomCount += sArr1.Length
    > 0 ? 1 : 0;\n            }\n        }\n        return boredomCount;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp83mz6stz.cs(20,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmp83mz6stz.cs(21,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmp83mz6stz.cs(22,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmp83mz6stz.cs(24,27): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp83mz6stz.cs(26,21): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    /tmp/tmp83mz6stz.cs(28,40): error CS1061: ''char'' does not contain a definition
    for ''Split'' and no accessible extension method ''Split'' accepting a first argument
    of type ''char'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp83mz6stz.cs(29,24): error CS0136: A local or parameter named ''sArr2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp83mz6stz.cs(29,57): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmp83mz6stz.cs(36,21): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    /tmp/tmp83mz6stz.cs(38,40): error CS1061: ''char'' does not contain a definition
    for ''Split'' and no accessible extension method ''Split'' accepting a first argument
    of type ''char'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp83mz6stz.cs(39,24): error CS0136: A local or parameter named ''sArr3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp83mz6stz.cs(39,57): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmp83mz6stz.cs(46,21): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string''

    /tmp/tmp83mz6'
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Declare a variable that holds the
    number of boredoms\n        long BoredomCount;\n        // Declare a variable
    to hold the index of a boredom sentence\n        long index = 0;\n        // Declare
    a variable to hold a character to be checked for a boredom\n        char boredom
    = '?';\n        // Declare a variable to hold a character to be checked for a
    boredom\n        char charToCheck = '?';\n        // Declare a variable to hold
    a character to be checked for a boredom\n        char charToCheck2 = '?';\n        //
    Declare a variable to hold a character to be checked for a boredom\n        char
    charToCheck3 = '?';\n        // Declare a variable to hold the index of a boredom
    sentence\n        long index2 = 0;\n        // Declare a variable to hold the
    index of a boredom sentence\n        long index3 = 0;\n        // Declare a variable
    to hold the index of a boredom sentence\n        long index4 = 0;\n        //
    Declare a variable to hold a character to be checked for a boredom\n        char
    boredom2 = '?';\n        // Declare a variable to hold a character to be checked
    for a boredom\n        char charToCheck2 = '?';\n        // Declare a variable
    to hold a character to be checked for a boredom\n        char charToCheck3 = '?';\n
    \       // Declare a variable to hold a character to be checked for a boredom\n
    \       char charToCheck4 = '?';\n        // Declare a variable to hold a character
    to be checked for a boredom\n        char charToCheck5 = '?';\n        // Declare
    a variable to hold a character to be checked for a boredom\n        char charToCheck6
    = '?';\n        // Declare a variable to hold a character to be checked for a
    boredom\n        char charToCheck7 = '?';\n        // Declare a variable to hold
    a character to be checked for a boredom\n        char charToCheck8 = '?';\n        //
    Declare a variable to hold a character to be checked for a boredom\n        char
    charToCheck9 = '?';\n        // Declare a variable to hold a character to be checked
    for a boredom\n        char charToCheck10 = '?';\n        // Declare a variable
    to hold a character to be checked for a boredom\n        char charToCheck11 =
    '?';\n        // Declare a variable to hold a character to be checked for a boredom\n
    \       char charToCheck12\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ebd4i6y.cs(59,27): error CS1002: ; expected

    '
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string str = S;\n        string[] strArray
    = str.Split('.', '?', '!');\n        return strArray.Count(x => x.StartsWith(\"I\"));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47800ab1229c400db6f7f65bb7d4aa51>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47800ab1229c400db6f7f65bb7d4aa51>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string boredom = \"I\";\n        string
    pattern = boredom + @\"\\s[^.?!]+\\.\";\n        long count = 0;\n        foreach
    (string word in S.Split('.')) {\n            if (Regex.IsMatch(word, pattern))
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72p9u1o3.cs(22,17): error CS0103: The name ''Regex'' does not exist in
    the current context

    '
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0L;\n        List<string>
    words = new List<string>();\n        string s = S;\n        string word;\n        string
    delimiter = \" .?!\";\n        string[] wordArray;\n        int j = 0;\n\n        while
    ((j = s.IndexOf(delimiter, j)) != -1)\n        {\n            word = s.Substring(j,
    (s.Length - j));\n            words.Add(word);\n            j++;\n        }\n
    \       wordArray = words.ToArray();\n\n        foreach (string word in wordArray)\n
    \       {\n            if (word.ToUpper() == \"I\")\n            {\n                count
    = count + 1;\n            }\n        }\n        return (count);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp525og24g.cs(34,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var bored = new List<char>();\n        foreach
    (var c in S)\n            if (c == '.' || c == '?' || c == '!') {\n                if
    (!bored.Contains('.'))\n                    bored.Add('.');\n                if
    (c != '!') bored.Add(c);\n            }\n        else\n            bored.Add(c);\n
    \       var boredoms = bored.Count(c => c == 'I');\n        return (long)boredoms;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25297cff71e0488abcec0e0eee8a3318>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25297cff71e0488abcec0e0eee8a3318>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015914
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Your code here.\n        var boredom
    = 0;\n        foreach (var s in S.Split('.'))\n        {\n            if (s.StartsWith(\"I\"))\n
    \           {\n                boredom++;\n            }\n        }\n        return
    boredom;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83484ddf89854a2eae2e368cfdf3874f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83484ddf89854a2eae2e368cfdf3874f>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        var words =
    S.Split('.', '?', '!');\n        for (int i = 0; i < words.Length; i++) {\n            if
    (words[i] == \"I\") {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b166269621774600966ecc780027ac35>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b166269621774600966ecc780027ac35>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        // Create
    a string that holds the whole sentence.\n        string sentence = string.Join(\"
    \", S.Split(new char[] {'.', '?', '!'}));\n\n        // Create a hash set that
    holds the number of times each word appears.\n        // If it appears once, then
    the value is set to 1. \n        // If it appears more than once, the value is
    set to 2. \n        HashSet<string> hash = new HashSet<string>(sentence.Split('
    ').Select(x => x.ToLower()));\n        // Now go through each letter and see if
    it is the same as \"i\". If it is\n        // the letter, then increment the number
    of boredoms.\n        foreach(char letter in sentence) {\n            if(letter
    == 'i') boredoms += 1;\n        }\n        return boredoms;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4392f1ddb9e94c2190b6b073a20d1c0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4392f1ddb9e94c2190b6b073a20d1c0d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015914
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredomCount = 0;\n        foreach
    (var word in S.Split('.', '?', '!')) {\n            var startsWithI = word.ToLowerInvariant().StartsWith(\"i\");\n
    \           if (startsWithI) boredomCount++;\n        }\n        return boredomCount;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4682f6373f348a89ef8ffa05a68077e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4682f6373f348a89ef8ffa05a68077e>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string Boredom = new string(\".?!\");\n
    \       long count = 0;\n        foreach (string word in S.Split(new char[] {
    ' ' }, StringSplitOptions.RemoveEmptyEntries)) {\n            if (Boredom.Contains(word[0]))
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1e241716238d4bd2b0229c77697f7552>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var count = 0;\n        for (int i =
    0; i < S.Length; i++) {\n            if (S[i] == '.' || S[i] == '!' || S[i] ==
    '?') {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19ea1433ac4a464b93e62c1626771ff8>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // TODO: Write your code here\n        var
    counts = new Dictionary<string, long>();\n        var delimiters = new char[]
    { '.', '?', '!' };\n        foreach(var word in S.Split(' '))\n        {\n            counts[word]
    = counts.ContainsKey(word) ? counts[word] + 1 : 1;\n        }\n        var boredom
    = counts.ContainsKey(\"I\") ? counts[\"I\"] : 0;\n        return boredom;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <997629ba080f474fb4329f651bcff128>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long ret = 0;\n        bool first = true;\n
    \       foreach (string sentence in S.Split(new char[] {'.', '?', '!'},\n                                        StringSplitOptions.RemoveEmptyEntries))
    {\n            if (first) {\n                first = false;\n                ret
    += s.IndexOf(\"I\", 0L);\n                continue;\n            }\n            bool
    Is = s.StartsWith(\"I\", 0L);\n            bool lastIs = s.EndsWith(\"I\", 0L);\n
    \           if (Is == lastIs) {\n                ret += s.Length - s.IndexOf(\"I\",
    0);\n            }\n        }\n        return ret;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpov130b_b.cs(24,24): error CS0103: The name ''s'' does not exist in the
    current context

    /tmp/tmpov130b_b.cs(27,23): error CS0103: The name ''s'' does not exist in the
    current context

    /tmp/tmpov130b_b.cs(28,27): error CS0103: The name ''s'' does not exist in the
    current context

    /tmp/tmpov130b_b.cs(30,24): error CS0103: The name ''s'' does not exist in the
    current context

    /tmp/tmpov130b_b.cs(30,35): error CS0103: The name ''s'' does not exist in the
    current context

    '
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> words = S.Split('.').ToList();\n
    \       List<string> boredoms = new List<string>();\n        foreach(string word
    in words) {\n            if(word.StartsWith(\"I\")) {\n                boredoms.Add(word);\n
    \           }\n        }\n        return boredoms.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ea52dabc5774b82b41b794e646024da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ea52dabc5774b82b41b794e646024da>:0
    \n"
  stdout: ''
  timestamp: 1660015913
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string pattern = @\"\\b(I\\b.+?[.?!])\";\n
    \       Match m = Regex.Match(S, pattern);\n        if (m.Success)\n            return
    ((long)m.Groups[1].Length);\n        else\n            return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfj8d3o9r.cs(19,9): error CS0246: The type or namespace name ''Match''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpfj8d3o9r.cs(19,19): error CS0103: The name ''Regex'' does not exist in
    the current context

    '
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var result = S.Split('.').Where(a =>
    a.StartsWith(\"I\")).Count();\n        return (long) result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0198fcff6014216be07ecf8117b269b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0198fcff6014216be07ecf8117b269b>:0
    \n"
  stdout: ''
  timestamp: 1660015914
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> boredoms = new List<string>();\n
    \       foreach (string word in S.Split('.', '?', '!').ToList()) {\n            if
    (word == \"I\") {\n                boredoms.Add(word);\n            }\n        }\n
    \       if (boredoms.Count == 0) {\n            return 0;\n        } else {\n
    \           double boredoms_sum = 0;\n            foreach (string boredom in boredoms)
    {\n                boredoms_sum += boredoms.Count(b => b == boredom);\n            }\n
    \           return boredoms_sum;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps9xmehge.cs(31,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015914
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long result = 0;\n\n        foreach (var
    s in S) {\n            if (s.Equals(\"I\", StringComparison.InvariantCultureIgnoreCase))
    {\n                ++result;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9n2hu8y1.cs(21,17): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    '
  timestamp: 1660015914
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var Slow = S;\n        string Sentence
    = Slow;\n        var Boring = new List<string> { \"I\" };\n        var Count =
    0;\n        while (Slow != \"\") {\n            Boring.Clear();\n            Boring.AddRange(Slow.Split(\".?!\"));\n
    \           Boring.RemoveAll(x => x == \"\");\n            if (Boring.Contains(\"I\")
    && !Boring.Contains(\"I.\")) {\n                Count = Count + 1;\n            }\n
    \           Slow = Slow.Substring(0, Slow.IndexOf(\".\"));\n            Sentence
    = Sentence.Substring(0, Sentence.IndexOf(\".\"));\n        }\n        return Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot
    be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.IsBored (System.String S) [0x00096] in <ba96514b12f647019f141ef98f111469>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <ba96514b12f647019f141ef98f111469>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length
    cannot be less than zero.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.IsBored (System.String S) [0x00096] in <ba96514b12f647019f141ef98f111469>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <ba96514b12f647019f141ef98f111469>:0
    \n"
  stdout: ''
  timestamp: 1660015914
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Implement the boredoms counter here\n
    \       // You start by counting the number of periods. When you see a period
    (.),\n        // you increment the counter. When you see an exclamation (!), you
    decrement\n        // the counter. After you've seen the three letter words, you
    subtract the\n        // counter.\n        var periods = 0;\n        // You start
    by counting the number of exclamations. When you see an exclamation\n        //
    (!), you decrement the counter. When you see an exclamation (!), you decrement\n
    \       // the counter.\n        var exclamations = 0;\n        // You start by
    counting the number of question marks. When you see a question\n        // mark
    (?), you increment the counter. When you see a question mark (?),\n        //
    you decrement the counter.\n        var questionMarks = 0;\n        // You start
    by counting the number of periods. When you see a period (.),\n        // you
    increment the counter. When you see an exclamation (!), you decrement\n        //
    the counter. After you've seen the three letter words, you subtract the\n        //
    counter.\n        var periods = 0;\n        var firstWord = S.Split(' ')[0];\n
    \       var firstWords = firstWord.Split('.', '?', '!');\n        foreach (var
    word in firstWords) {\n            if (word == \".\") {\n                periods++;\n
    \           } else if (word == \"!\") {\n                exclamations--;\n            }
    else if (word == \"?\") {\n                questionMarks++;\n            }\n        }\n
    \       var boredoms = periods - exclamations - questionMarks - firstWords.Length;\n
    \       return boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjuqpbs0x.cs(36,13): error CS0128: A local variable or function named ''periods''
    is already defined in this scope

    /tmp/tmpjuqpbs0x.cs(36,13): warning CS0219: The variable ''periods'' is assigned
    but its value is never used

    '
  timestamp: 1660015914
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int count = 0;\n        string sentence
    = S.ToLower();\n        char[] boredom = sentence.ToCharArray();\n        ArrayList
    words = new ArrayList();\n        int index = 0;\n        while (index < boredom.Length)
    {\n            if (boredom[index] == 'i') {\n                words.Add(sentence.Substring(0,
    index));\n                index++;\n            }\n            index++;\n        }\n
    \       for (int i = 0; i < words.Count; i++) {\n            bool flag = false;\n
    \           foreach (string word in words) {\n                if (word.Contains(sentence))
    {\n                    flag = true;\n                    break;\n                }\n
    \           }\n            if (flag) {\n                count++;\n            }\n
    \       }\n        return (long)count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvvrl324j.cs(21,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpvvrl324j.cs(21,31): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpvvrl324j.cs(30,25): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''int'' and ''method group''

    '
  timestamp: 1660015914
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        ArrayList list = new ArrayList();\n        foreach
    (string item in S.Split('.')) {\n            string sentence = item;\n            string
    sentenceSplit = sentence.Split('?');\n            string sentenceSplit2 = sentence.Split('!');\n
    \           foreach (string sentenceSplit In sentenceSplit) {\n                if
    (item == \"I\") {\n                    list.Add(sentenceSplit);\n                }\n
    \           }\n            foreach (string sentenceSplit2 In sentenceSplit2) {\n
    \               if (item == \"I\") {\n                    list.Add(sentenceSplit2);\n
    \               }\n            }\n        }\n        ArrayList arraylist = new
    ArrayList();\n        foreach (string item in list) {\n            string[] arrays
    = item.Split(' ');\n            arraylist.Add(arrays);\n        }\n        long
    count = 0;\n        foreach (string[] array in arraylist) {\n            if (array[0]
    == \"I\") {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdb6mxzsf.cs(23,43): error CS1515: ''in'' expected

    /tmp/tmpdb6mxzsf.cs(23,46): error CS1026: ) expected

    /tmp/tmpdb6mxzsf.cs(23,59): error CS1002: ; expected

    /tmp/tmpdb6mxzsf.cs(23,59): error CS1513: } expected

    /tmp/tmpdb6mxzsf.cs(28,44): error CS1515: ''in'' expected

    /tmp/tmpdb6mxzsf.cs(28,47): error CS1026: ) expected

    /tmp/tmpdb6mxzsf.cs(28,61): error CS1002: ; expected

    /tmp/tmpdb6mxzsf.cs(28,61): error CS1513: } expected

    '
  timestamp: 1660015913
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        HashSet<string> words = new HashSet<string>();\n
    \       HashSet<string> sentences = new HashSet<string>();\n        foreach (string
    s in S.Split('.', '?', '!'))\n            sentences.Add(s);\n        foreach (string
    s in sentences) {\n            int index = -1;\n            while (index != -1)
    {\n                index = s.IndexOf('I', index + 1);\n                if (index
    != -1)\n                    words.Add(s.Substring(0, index));\n            }\n
    \       }\n        return words.Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55db52acabf44b1ba1c953bb713019c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55db52acabf44b1ba1c953bb713019c5>:0
    \n"
  stdout: ''
  timestamp: 1660015914
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Create a string array of all sentences.\n
    \       char[] splitter = { ' ', '.', '?', '!' };\n        string[] S = S.Split(splitter);\n\n
    \       long boredoms = 0;\n        // Create a string array of words in each
    sentence.\n        char[] wordArray = S.Select(c => c).ToArray();\n\n        //
    Use LINQ to find the first word.\n        string firstWord = S.First();\n        boredoms
    += wordArray.Count(s => s.StartsWith(firstWord)) ?? 0;\n        return boredoms;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp19dvu9z0.cs(20,18): error CS0136: A local or parameter named ''S'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp19dvu9z0.cs(20,24): error CS1061: ''string[]'' does not contain a definition
    for ''Split'' and no accessible extension method ''Split'' accepting a first argument
    of type ''string[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp19dvu9z0.cs(24,28): error CS0029: Cannot implicitly convert type ''string[]''
    to ''char[]''

    /tmp/tmp19dvu9z0.cs(28,44): error CS1061: ''char'' does not contain a definition
    for ''StartsWith'' and no accessible extension method ''StartsWith'' accepting
    a first argument of type ''char'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp19dvu9z0.cs(20,22): error CS0165: Use of unassigned local variable ''S''

    '
  timestamp: 1660015914
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var words = S.Split(new char[] { '.',
    '?', '!' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n        return words.Count(w
    => w.StartsWith(\"I\", StringComparison.InvariantCultureIgnoreCase));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <010bcd68fca1452cb1f02f3b4e8a94ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <010bcd68fca1452cb1f02f3b4e8a94ce>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long ans = 0L;\n        foreach (string
    word in S.Split(new char[] {'.', '?', '!'}, StringSplitOptions.RemoveEmptyEntries))
    {\n            string w = word.ToLower();\n            if (w == \"i\") {\n                ans
    += 1;\n            }\n        }\n        return ans;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fb143303f7543d1851e691578e720c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3fb143303f7543d1851e691578e720c0>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        foreach (string
    line in S.Split('.', '?', '!')) {\n            foreach (string word in line.Split(','))
    {\n                long l = 0;\n                if (word == \"I\") l++;\n                if
    (word == \"the\") l++;\n                count += l;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72210e02c3634ffda36772095a305f95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72210e02c3634ffda36772095a305f95>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int i;\n        long count = 0;\n        for
    (i = 0; i < S.Length; i++) {\n            if ((S[i] == '.') || (S[i] == '?') ||
    (S[i] == '!')) {\n                count = count + 1;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e3977eaa8c64a43af0f55f1ece14dea>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string result = \"\";\n        for (int
    i = 0; i <= S.Length; i++) {\n            if (S[i] == '.') {\n                result
    = result + \"0\";\n            } else if (S[i] == '?') {\n                result
    = result + \"1\";\n            } else if (S[i] == '!') {\n                result
    = result + \"1\";\n            } else if (S[i] != ' ' && S[i] != '?' && S[i] !=
    '.') {\n                result = result + \"1\";\n            }\n        }\n        return
    (long.Parse(result));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.IsBored (System.String S) [0x0000f] in
    <c6184a72ce844ebd83a5ca03eecbd075>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c6184a72ce844ebd83a5ca03eecbd075>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.IsBored (System.String S) [0x0000f] in <c6184a72ce844ebd83a5ca03eecbd075>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <c6184a72ce844ebd83a5ca03eecbd075>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string [] strList = S.Split('.','?','!');\n
    \       long boredoms = 0;\n        foreach (string str in strList) {\n            if
    (str.Contains(\"I\")) {\n                boredoms += 1;\n            }\n        }\n
    \       return boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f27a8d323b05436aa06516bcadb103e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f27a8d323b05436aa06516bcadb103e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        StringBuilder buf = new StringBuilder();\n
    \       foreach (char c in S) {\n            if (c == '.' || c == '?' || c ==
    '!') buf.Append(c);\n        }\n        string bufStr = buf.ToString();\n        bool
    boredom = false;\n        for (int i = 0; i < bufStr.Length; i++) {\n            if
    (bufStr[i] == 'I') boredom = true;\n        }\n        if (boredom) return 1L;\n
    \       else return 0L;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f8f5fe0c14e4cabafaf3fdf70d3b87f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f8f5fe0c14e4cabafaf3fdf70d3b87f>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int n = S.Length;\n        long[] res
    = new long[n];\n        string boredom = \"\";\n        int boredomCount = 0;\n
    \       int i = 0;\n        int count = 0;\n        bool first = true;\n        while
    (i < n) {\n            char c = S[i];\n            boredom += c;\n            if
    (first) {\n                if (c == '.' || c == '?' || c == '!')\n                    first
    = false;\n                else\n                    boredomCount++;\n            }
    else {\n                if (c == '.' || c == '?' || c == '!')\n                    boredomCount++;\n
    \               else\n                    break;\n            }\n            i++;\n
    \       }\n        for (int j = 0; j < n; j++)\n        {\n            if (boredom[j]
    == boredom[0])\n            {\n                res[j] = 0;\n            }\n            else\n
    \           {\n                res[j] = 1;\n            }\n        }\n        return
    boredomCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596a7c5f1634c96acf87f76e5a429d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596a7c5f1634c96acf87f76e5a429d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        S = S.Trim().Replace(\". \", \" . \");\n
    \       S = S.Trim().Replace(\"? \", \" ?\");\n        S = S.Trim().Replace(\"!
    \", \" !\");\n        int i = 0;\n        long result = 0;\n        foreach (string
    w in S.Split(' ')){\n            if (w.StartsWith(\"I\")){\n                i++;\n
    \           }\n        }\n        result = i;\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5b083f693944af386c3179f0f023703>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5b083f693944af386c3179f0f023703>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long l = 0;\n        foreach (string
    s in S.Split('.', '?','!')) {\n            if (s.StartsWith(\"I\")) {\n                l++;\n
    \           }\n        }\n        return l;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <096a24f8a5a7479ba1cb534248d7ea2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <096a24f8a5a7479ba1cb534248d7ea2f>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        bool isBored = false;\n        string
    word = \" \";\n        string boredomSentence = \"\";\n        int index = 0;\n
    \       char[] arr = S.ToCharArray();\n        while (index < S.Length) {\n            //
    Ignore '.', '?' and '!'\n            if ((arr[index] == '.') || (arr[index] ==
    '?') || (arr[index] == '!')) {\n                if (index == 0) {\n                    isBored
    = true;\n                }\n                index++;\n                continue;\n
    \           }\n            word = arr[index];\n            // Ignore empty words\n
    \           if (word == \"\") {\n                isBored = false;\n                index++;\n
    \               continue;\n            }\n            // Find beginning of boredom
    sentence\n            if (word == \"I\") {\n                boredomSentence =
    arr.Substring(index + 1, (arr.Length - 1) - index);\n                index++;\n
    \               continue;\n            }\n            index++;\n        }\n        //
    Find beginning of boredom sentence\n        if (index == 0)\n            isBored
    = true;\n        return (isBored ? (Convert.ToInt64(boredomSentence) - 1) : 0L);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_akphl1t.cs(32,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp_akphl1t.cs(41,39): error CS1061: ''char[]'' does not contain a definition
    for ''Substring'' and no accessible extension method ''Substring'' accepting a
    first argument of type ''char[]'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660015914
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredoms = new Dictionary<string,
    long>();\n        var boredomCount = 0;\n\n        foreach (var sentence in S.Split('.'))
    {\n            if (sentence.StartsWith(\"I\")) {\n                boredoms.Add(sentence,
    1L);\n                boredomCount++;\n            }\n        }\n\n        return
    boredomCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7f3af310bde462697c98d67e57daba4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7f3af310bde462697c98d67e57daba4>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // YOUR CODE HERE\n        long boredoms
    = 0;\n        for (int i = 0; i < S.Length; i++)\n        {\n            if (S[i]
    == 'I')\n            {\n                boredoms++;\n            }\n        }\n
    \       return boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc69e429beb64d33ba11afb4f925c86a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc69e429beb64d33ba11afb4f925c86a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015915
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredomCount = 0;\n        var splits
    = S.Split('.', '?', '!');\n        foreach (var word in splits)\n        {\n            var
    firstWord = word[0];\n            if (firstWord == \"I\")\n            {\n                boredomCount++;\n
    \           }\n        }\n        return (long)boredomCount;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj5bmdlnq.cs(23,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660015914
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string words = \"I\";\n        string
    boredom = String.Empty;\n        List<char> chars = new List<char>();\n        for
    (int i = 0; i < S.Length; i++) {\n            if (S.Substring(0, i).Equals(words))
    { \n                boredom = S.Substring(i);\n            }\n            chars.Add(S[i]);\n
    \       }\n        chars.Add(boredom.First());\n        return CalculateBoredom(chars);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr4k3nkoh.cs(28,16): error CS0103: The name ''CalculateBoredom'' does not
    exist in the current context

    '
  timestamp: 1660015914
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string w = \"I\";\n        if (S == null
    || S.Length == 0)\n            throw new ArgumentNullException();\n        if
    (S.StartsWith(w))\n            return 1L;\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d2e4144963c48d3b61206cad859f1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d2e4144963c48d3b61206cad859f1a0>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long x = 0;\n        foreach(string str
    in S.Split(new string[] { \".\", \"?\", \"!\" }, StringSplitOptions.None)) {\n
    \           if(str.StartsWith(\"I\")) x++;\n        }\n        return x;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa6a4f400ea4638ae53ba75a934f7c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1aa6a4f400ea4638ae53ba75a934f7c3>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var result = new Dictionary<string, long>();\n
    \       S.Split('.', '?', '!').ToList().ForEach(word =>\n        {\n            if
    (!result.ContainsKey(word))\n            {\n                result.Add(word, 0);\n
    \           }\n            result[word]++;\n        });\n        return result.ContainsKey(\"I\")
    ? result[\"I\"] : 0L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b70c75c3895b405f9328e60d97cd947c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b70c75c3895b405f9328e60d97cd947c>:0
    \n"
  stdout: ''
  timestamp: 1660015915
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Return 0 if no sentence is found.\n
    \       if (S == null) return 0L;\n        String[] S = S.Split('.', '?', '!');\n
    \       long count = 0L;\n        foreach (String s in S) {\n            if (s.StartsWith(\"I\"))\n
    \               count += 1;\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2fminf1.cs(19,13): error CS0841: Cannot use local variable ''S'' before
    it is declared

    /tmp/tmpi2fminf1.cs(20,18): error CS0136: A local or parameter named ''S'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpi2fminf1.cs(20,24): error CS1061: ''string[]'' does not contain a definition
    for ''Split'' and no accessible extension method ''Split'' accepting a first argument
    of type ''string[]'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        string sLower
    = S.ToLower();\n        string[] words = sLower.Split(' ');\n        foreach (string
    word in words) {\n            if (word.StartsWith(\"i\")) {\n                boredoms
    += 1;\n            }\n        }\n        return boredoms;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cb273bba18d4c9ea0cddb0b7547c6b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cb273bba18d4c9ea0cddb0b7547c6b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015915
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long total = 0;\n        foreach (string
    line in S) {\n            if (line == \".\") total++;\n            else if (line
    == \"?\") total++;\n            else if (line == \"!\") total++;\n            else
    total = 0;\n        }\n        return total;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflcr3yu6.cs(19,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        HashSet<string> words = new HashSet<string>();\n
    \       StringBuilder sb = new StringBuilder();\n        foreach(string line in
    S.Split(new char[] { '.', '?', '!' })) {\n            words.UnionWith(line.Split());\n
    \       }\n        long count = 0;\n        foreach(string word in words) {\n
    \           if (word.StartsWith(\"I\")) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a6c104359864b88bac7aa9a6e0818c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a6c104359864b88bac7aa9a6e0818c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var list = new List<string>();\n        foreach
    (var item in S) {\n            if (list.Contains(\".\")) {\n                if
    (list.Contains(\"?\")) {\n                    if (list.Contains(\"!\")) {\n                        if
    (list.Contains(\"I\")) return list.Count;\n                    }\n                }\n
    \           }\n            list.Add(item);\n        }\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprgb1ll6f.cs(27,22): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // your code goes here\n        int count
    = S.Count(s => s == '.' || s == '?' || s == '!') -2;\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7758f7ce45242e89a13e284d9b84d72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7758f7ce45242e89a13e284d9b84d72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // We'll start by creating a collection
    of \"sentences\" delimited by dots, question marks and exclamation marks.\n        //
    Each sentence will be a List<string> where each string is a word in the sentence.\n
    \       List<List<string>> sentences = StringToWords(S).ToList().Select(s => new
    List<string> { s }).ToList();\n\n        // We'll start by creating a counter
    for the number of boredoms.\n        long boredoms = 0;\n\n        // We'll then
    iterate over the sentences, counting the number of boredoms for each one.\n        foreach
    (List<string> sentence in sentences) {\n            boredoms += sentence.FirstOrDefault(w
    => w.StartsWith(\"I\")).Count;\n        }\n\n        // We'll return this value
    to the caller.\n        return boredoms;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdhj2p12x.cs(20,40): error CS0103: The name ''StringToWords'' does not
    exist in the current context

    /tmp/tmpdhj2p12x.cs(27,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''method group''

    '
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (S == null) throw new ArgumentNullException(\"S\");\n
    \       long boredoms = 0;\n        bool boredomWord = false;\n        foreach
    (char c in S) {\n            if ((c == '.') || (c == '?') || (c == '!')) {\n                if
    (boredomWord) {\n                    boredomWord = false;\n                } else
    {\n                    boredoms++;\n                    boredomWord = true;\n
    \               }\n            } else {\n                boredomWord = false;\n
    \           }\n        }\n        return boredoms;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <219664a2833e4429afcdc13a9b563979>:0
    \n"
  stdout: ''
  timestamp: 1660015916
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int boredom = 0;\n        foreach (var
    c in S) {\n            if (c == 'I') {\n                boredom++;\n            }\n
    \       }\n        return (boredom);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8eb0ae02f2d4dc88ff204a8a132d740>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8eb0ae02f2d4dc88ff204a8a132d740>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Convert the string to an array of
    characters\n        char[] Cs = s.ToCharArray();\n        // Use a hash map to
    keep track of what has been seen before\n        HashSet<char> seen = new HashSet<char>();\n
    \       // Return 0 if there are no boredoms or the length of the string is 0\n
    \       if (Cs.Length == 0 || Cs.FirstOrDefault() == '.')\n            return
    0;\n        // If the first character is 'I', increment the number of boredoms\n
    \       if (Cs.FirstOrDefault() == 'I')\n            return (long)seen.Count;\n
    \       // If the first character is neither 'I' nor '!', then there are either
    no\n        // boredoms or there are some boredoms \n        foreach (char c in
    Cs)\n            // If the current character has not been seen before, then add
    it to the\n            // seen hash set \n            if (!seen.Contains(c))\n
    \               seen.Add(c);\n            // If the current character has been
    seen before, then decrement the \n            // number of boredoms \n            return
    seen.Count - (long)seen.Count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0grmdz9b.cs(19,21): error CS0103: The name ''s'' does not exist in the
    current context

    '
  timestamp: 1660015915
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long b=0;\n        foreach (string s
    in S.Split('.','?','!'))\n        {\n            if (s[0]==\"I\")\n            {\n
    \               b++;\n            }\n        }\n        return b;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe6o0a3ek.cs(21,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        foreach (var
    word in S.Split('.')) {\n            if (word.StartsWith(\"I\")) count++;\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd1f253458c3421fb899e13761a1a6e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd1f253458c3421fb899e13761a1a6e5>:0
    \n"
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string words = S.Split(new char[] { '.',
    '?' }, StringSplitOptions.RemoveEmptyEntries)\n                          .ToLower()\n
    \                         .Aggregate((a, b) => a + \". \" + b).Split(new char[]
    { '!' }, StringSplitOptions.RemoveEmptyEntries)\n                          .ToLower();\n
    \       long count = 0;\n        foreach (string word in words) {\n            if
    (word.StartsWith(\"i\"))\n                count++;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvw6epjg8.cs(19,28): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''destination'' of ''MemoryExtensions.ToLower(ReadOnlySpan<char>,
    Span<char>, CultureInfo)''

    /tmp/tmpvw6epjg8.cs(23,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660015915
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredomCount = 0;\n        foreach
    (char c in S) {\n            if (c == 'I')\n                boredomCount++;\n
    \       }\n        return boredomCount;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f79846f9b01e4394836dd775dd875fc2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f79846f9b01e4394836dd775dd875fc2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015916
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredoms = (from c in S\n                       where
    c == '.' || c == '?' || c == '!'\n                       select c).Count();\n
    \       return (long)boredoms;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79351e2d4cc54919b06c36215b3164da>:0
    \n"
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // The hash value has three bits, each
    of which is set if either the 'I' or '!' character appears.\n        // Thus,
    to check if an input starts with 'I', we need to check if the third bit is set.\n
    \       ulong hash = long.Parse(S, System.Globalization.NumberStyles.AllowHexSpecifier);\n
    \       return (hash >> 63) & 31;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjgrnlst2.cs(20,22): error CS0266: Cannot implicitly convert type ''long''
    to ''ulong''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjgrnlst2.cs(21,16): error CS0266: Cannot implicitly convert type ''ulong''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // You can change the code below to solve
    this problem.\n        long[] counters = new long[4] { 0, 0, 0, 0, 0 };\n        S.ToCharArray().ToList().ForEach(c
    => {\n            if (c == '?' || c == '.' || c == '!') counters[c]++;\n        });\n\n
    \       // Your code goes here!\n        return counters[0];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa81c4vy0.cs(19,39): error CS0847: An array initializer of length ''4''
    is expected

    '
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredomCount = 0;\n        foreach
    (string sentence in SplitSentences(S)) {\n            if (sentence.StartsWith(\"I\",
    StringComparison.OrdinalIgnoreCase)) {\n                boredomCount++;\n            }\n
    \       }\n        return boredomCount;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgktd7lhb.cs(19,37): error CS0103: The name ''SplitSentences'' does not
    exist in the current context

    '
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> words = S.Split(new[] {
    ' ', '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n        var
    matches = words.Select(w =>\n        {\n            if (w.StartsWith(\"I\"))\n
    \               return w.Length;\n            return null;\n        }).Where(n
    => n != null).ToList();\n\n        return matches.Sum();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxt7y9_8_.cs(23,20): error CS0037: Cannot convert null to ''int'' because
    it is a non-nullable value type

    /tmp/tmpxt7y9_8_.cs(23,20): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1660015916
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredom = 0;\n        foreach (string
    sentence in S.Split('.')) {\n            boredom += sentence.Count(p => p == 'I')
    + sentence.Count(p => p == '!') + sentence.Count(p => p == '?');\n        }\n
    \       return boredom;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcf79befadd74a01bc2d135f6c1fca19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcf79befadd74a01bc2d135f6c1fca19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Your code here\n        string boredoms
    = \"I love this weather !\";\n        string boredom1 = \"I\";\n        string
    boredom2 = \".\";\n        string boredom3 = \"!\";\n        string boredom4 =
    \"?\";\n        int lenboredom = boredoms.Length;\n        int boredomcount =
    0;\n        char[] charboredom = boredoms.ToCharArray();\n        string boredom1
    = \"I\";\n        int boredom1index = -1;\n        int boredom2index = -1;\n        int
    boredom3index = -1;\n        int boredom4index = -1;\n        string boredom5
    = boredoms + boredoms + boredoms + boredoms;\n        foreach (char boredom in
    boredoms)\n        {\n            if (boredom.ToUpper() == boredom1)\n            {\n
    \               boredom1index = charboredom.ToList().IndexOf(boredom);\n            }\n
    \           if (boredom.ToUpper() == boredom2)\n            {\n                boredom2index
    = charboredom.ToList().IndexOf(boredom);\n            }\n            if (boredom.ToUpper()
    == boredom3)\n            {\n                boredom3index = charboredom.ToList().IndexOf(boredom);\n
    \           }\n            if (boredom.ToUpper() == boredom4)\n            {\n
    \               boredom4index = charboredom.ToList().IndexOf(boredom);\n            }\n
    \           if (boredom.ToUpper() == boredom5)\n            {\n                boredom4index
    = charboredom.ToList().IndexOf(boredom);\n            }\n            if (boredom.ToUpper()
    == boredom1)\n            {\n                boredom1index = charboredom.ToList().IndexOf(boredom);\n
    \           }\n            if (boredom.ToUpper() == boredom1)\n            {\n
    \               boredom1index = charboredom.ToList().IndexOf(boredom);\n            }\n
    \           if (boredom.ToUpper() == boredom4)\n            {\n                boredom4index
    = charboredom.ToList().IndexOf(boredom);\n            }\n            if (boredom.ToUpper()
    == boredom2)\n            {\n                boredom2index = charboredom.ToList().IndexOf(boredom);\n
    \           }\n            if (boredom.ToUpper() == boredom3)\n            {\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3m97v57_.cs(74,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3m97v57_.cs(83,2): error CS1513: } expected

    '
  timestamp: 1660015915
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        foreach (string
    str in S) {\n            if (str.StartsWith(\"I\")) boredoms += 1;\n        }\n
    \       return boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6qroyoi.cs(19,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660015916
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredoms = (from s in S.Split(new
    char[] {'.', '?', '!'})\n                      where s.StartsWith(\"I\")\n                      select
    s);\n        var boredomCount = boredoms.Count();\n        return (long)boredomCount;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d147c3c99814c84831ddfd2df8d8793>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d147c3c99814c84831ddfd2df8d8793>:0
    \n"
  stdout: ''
  timestamp: 1660015916
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        bool first = true;\n        string currentToken
    = null;\n        long boredomCount = 0;\n\n        foreach (string token in S.Split('.',
    '?', '!')) {\n            if (token.StartsWith(\"I\")) {\n                if (!first)
    {\n                    boredomCount += 1;\n                }\n                first
    = false;\n            }\n            else {\n                currentToken = token;\n
    \           }\n        }\n        return boredomCount;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f52be609e20a484b8cc3833474ac9038>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f52be609e20a484b8cc3833474ac9038>:0
    \n"
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        foreach (var
    word in S.Split('.')) {\n            count += Count(word);\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsxl2u7kw.cs(20,22): error CS0103: The name ''Count'' does not exist in
    the current context

    '
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        HashSet<string> Set = new HashSet<string>();\n
    \       HashSet<string> Set2 = new HashSet<string>();\n        long Count = 0;\n
    \       foreach (var item in S) {\n            if (Set.Contains(item)) {\n                Count++;\n
    \           }\n            else if (Set2.Contains(item)) {\n                Count++;\n
    \           }\n            Set.Add(item);\n        }\n\n        Set2.Add(\"\");\n
    \       foreach (var item in S) {\n            if (Set2.Contains(item)) {\n                Count++;\n
    \           }\n            Set2.Add(item);\n        }\n        return Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcwvw8ixh.cs(22,30): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpcwvw8ixh.cs(25,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpcwvw8ixh.cs(28,21): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpcwvw8ixh.cs(33,31): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpcwvw8ixh.cs(36,22): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660015916
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        return ((S[0] == 'I') ? 1L : 0L);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d640ccf3752479bb7782559da9c2e56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d640ccf3752479bb7782559da9c2e56>:0
    \n"
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        S = S.Replace(\".\", \"\");\n        S
    = S.Replace(\"?\", \"\");\n        S = S.Replace(\"!\", \"\");\n        S = S.Replace(\"I\",
    \"\");\n        S = S.Replace(\"A\", \"\");\n        S = S.Replace(\"U\", \"\");\n
    \       S = S.Replace(\"R\", \"\");\n        S = S.Replace(\"S\", \"\");\n        S
    = S.Replace(\"O\", \"\");\n        S = S.Replace(\"N\", \"\");\n        S = S.Replace(\"G\",
    \"\");\n        S = S.Replace(\"H\", \"\");\n        S = S.Replace(\"C\", \"\");\n
    \       S = S.Replace(\"D\", \"\");\n        S = S.Replace(\"F\", \"\");\n        S
    = S.Replace(\"J\", \"\");\n        S = S.Replace(\"K\", \"\");\n        S = S.Replace(\"L\",
    \"\");\n        S = S.Replace(\"M\", \"\");\n        S = S.Replace(\"P\", \"\");\n
    \       S = S.Replace(\"Q\", \"\");\n        S = S.Replace(\"V\", \"\");\n        S
    = S.Replace(\"W\", \"\");\n        S = S.Replace(\"Z\", \"\");\n        S = S.Replace(\"X\",
    \"\");\n        S = S.Replace(\"Y\", \"\");\n        S = S.Replace(\"E\", \"\");\n
    \       S = S.Replace(\"Z\", \"\");\n        S = S.Replace(\"B\", \"\");\n        S
    = S.Replace(\"G\", \"\");\n        S = S.Replace(\"D\", \"\");\n        S = S.Replace(\"E\",
    \"\");\n        S = S.Replace(\"E\", \"\");\n        S = S.Replace(\"F\", \"\");\n
    \       S = S.Replace(\"I\", \"\");\n        S = S.Replace(\"L\", \"\");\n        S
    = S.Replace(\"M\", \"\");\n        S = S.Replace(\"P\", \"\");\n        S = S.Replace(\"R\",
    \"\");\n        S = S.Replace(\"S\", \"\");\n        S = S.Replace(\"T\", \"\");\n
    \       S = S.Replace(\"U\", \"\");\n        S = S.Replace(\"V\", \"\");\n        S
    = S.Replace(\"W\", \"\");\n        S = S.Replace(\"X\", \"\");\n        S = S.Replace(\"Y\",
    \"\");\n        S = S.Replace(\"Z\", \"\");\n        S = S.Replace(\"Z\", \"\");\n
    \       S = S.Replace(\"B\", \"\");\n        S = S.Replace(\"A\", \"\");\n        S
    = S.Replace(\"Z\", \"\");\n        S = S.Replace(\"V\", \"\");\n        S = S.Replace(\"B\",
    \"\");\n        S = S.Replace(\"B\", \"\");\n        S = S.Replace(\"G\", \"\");\n
    \       S = S.Replace(\"C\", \"\");\n        S = S.Replace(\"L\", \"\");\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvhi_2h0g.cs(17,24): error CS0161: ''Problem.IsBored(string)'': not all
    code paths return a value

    '
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Your code here\n        string result
    = \"\";\n        for (int i = 0; i < S.Length; i++)\n        {\n            if
    (S[i] == '.')\n            {\n                result = result + \"(\" + Convert.ToInt32(i)
    + \")\" + \"\\n\";\n            }\n        }\n        return Convert.ToInt32(result);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsBored
    (System.String S) [0x00050] in <d3ffecea9db44efc94ac2b1a95f839e6>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <d3ffecea9db44efc94ac2b1a95f839e6>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsBored
    (System.String S) [0x00050] in <d3ffecea9db44efc94ac2b1a95f839e6>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <d3ffecea9db44efc94ac2b1a95f839e6>:0 \n"
  stdout: ''
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Your code here\n        var boredoms
    = S.Split('.')\n            .Where(s => s == \"I\" || s == \"i\")\n            .Select(s
    => s.Split('?')\n            .Count() ?? (s.Split('!')\n            .Count() ??
    1))).Sum();\n\n        Debug.Assert(boredoms != 0);\n        return boredoms;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7xqb2t7m.cs(23,28): error CS1002: ; expected

    /tmp/tmp7xqb2t7m.cs(23,28): error CS1513: } expected

    '
  timestamp: 1660015916
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Your code here.\n        \n        var
    count = 0;\n        \n        // Loop through all chars in string\n        foreach(var
    c in S) {\n            // Check if char is 'I', '!', '?' or '.'\n            //
    If it is, increase counter by 1\n            if (c == '!' || c == '?' || c ==
    '.') {\n                count++;\n            }\n        }\n        \n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2bfbd1ff0f8e4982a6f75e3054471dd3>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0L;\n        for (int i
    = 0; i < S.Length; i++) {\n            char c = S[i];\n            if ((c != '.')
    && (c != '?') && (c != '!')) {\n                if (c == 'I')\n                    count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f1bf7ab912a473db5fa54991b526222>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f1bf7ab912a473db5fa54991b526222>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        string words
    = \"I!?!?.!\";\n        string[] sentence = S.Split('.', '?', '!');\n        foreach
    (string s in sentence) {\n            if (s.StartsWith(\"I\")) {\n                boredoms
    += 1;\n            }\n        }\n        return boredoms;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6908205b391942aaac96331cf7549839>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6908205b391942aaac96331cf7549839>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var result = new List<int>();\n        foreach
    (var word in S.Split('.')) {\n            if (word.StartsWith(\"I\", StringComparison.InvariantCultureIgnoreCase))
    {\n                result.Add(1);\n            }\n        }\n        return result.Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6be41cab160c48d98f24b0ef2a1fcd20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6be41cab160c48d98f24b0ef2a1fcd20>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        foreach (string
    sentence in S.Split(new char[] {'.', '?', '!'}, StringSplitOptions.RemoveEmptyEntries))
    {\n            if (sentence.StartsWith(\"I\")) {\n                boredoms++;\n
    \           }\n        }\n        return boredoms;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eeb794c8cbc448c19c7076c54a4a6af8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eeb794c8cbc448c19c7076c54a4a6af8>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int L = 0;\n        char[] Char = S.ToCharArray();\n
    \       foreach(char C in Char)\n            if(C == '.' || C == '?' || C == '!')
    L++;\n        return L;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3de70432924a4906af044c65a5db7aac>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        Debug.Assert(S != null);\n        Debug.Assert(S
    != \"\");\n        var dict = new Dictionary<char, long>();\n        foreach (var
    s in S.Split(new char[] { '.', '?', '!' })) {\n            if (s.StartsWith(\"I\"))\n
    \               dict[s[0]] = (long)1;\n        }\n        return dict.Values.Max();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsBored
    (System.String S) [0x00076] in <d687e3462f2a4fdf802700e7f43b2198>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <d687e3462f2a4fdf802700e7f43b2198>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsBored
    (System.String S) [0x00076] in <d687e3462f2a4fdf802700e7f43b2198>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <d687e3462f2a4fdf802700e7f43b2198>:0 \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0L;\n        foreach
    (var sentence in S.Split('.', '?', '!')) {\n            if (sentence.StartsWith(\"I\"))
    {\n                boredoms++;\n            }\n        }\n        return boredoms;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dfa8416d1d840ba81b7eeaa95905ab9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dfa8416d1d840ba81b7eeaa95905ab9>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        foreach (string s in S.Split(new char[]
    { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)) {\n            if (s.StartsWith(\"I\"))
    {\n                return (long)1;\n            }\n        }\n        return (long)0;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01abee2d870843a5a7352ee2bf59d9e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01abee2d870843a5a7352ee2bf59d9e8>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long totalBoredoms = 0;\n        S =
    S.Replace(\"?\", \"\").Replace(\".\", \"\").Replace(\"!\", \"\");\n        char[]
    splitChar = new char[] { '.', '!', '?' };\n        foreach (var word in S.Split('
    '))\n            if (word.StartsWith(\"I\"))\n                totalBoredoms +=
    1;\n        return totalBoredoms;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4cef616f8bcf402ebbf91e288412c581>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4cef616f8bcf402ebbf91e288412c581>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        foreach (string
    sentence in S.Split('.')) {\n            if (sentence.ToLower().StartsWith(\"i\"))
    { boredoms++; }\n        }\n        return boredoms;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4dbb02074dec4ff48b9e61d029e69c5a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4dbb02074dec4ff48b9e61d029e69c5a>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        S = S.Replace(\".\", \"\").Replace(\"?\",
    \"\").Replace(\"!\", \"\");\n        var words = S.Split(' ');\n        int count
    = 0;\n        for (int i = 0; i < words.Length; i++) {\n            bool bOk =
    words[i].StartsWith(\"I\");\n            count += bOk;\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeiw6c86p.cs(23,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''int'' and ''bool''

    '
  timestamp: 1660015917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var regex = new Regex(@\"\\b(?:I|i|We|Were)\\b\");\n
    \       return regex.Matches(S).Count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp34uam1vq.cs(18,25): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // TODO: Implement the IsBored method
    here\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1143ccb4ba4040a998e354336de70d31>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1143ccb4ba4040a998e354336de70d31>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (S == null) throw new ArgumentNullException(\"S\");\n
    \       long N = 0L;\n        foreach (char c in S.ToLower())\n        {\n            if
    (c == 'i' || c == 'e' || c == 'e' || c == 'e' || c == 's')\n            {\n                if
    (c == 'i')\n                    N++;\n                else\n                    N--;\n
    \           }\n        }\n        return N;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57f346e47ed34e28b93f3ef77f2db558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <57f346e47ed34e28b93f3ef77f2db558>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var regex = new Regex(@\"^I\");\n        return
    regex.Matches(S).Count;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoz7uu6n1.cs(18,25): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> splitText = S.Split('.',
    '?', '!').ToList();\n        foreach (string s in splitText) {\n            if
    (s.StartsWith(\"I\")) {\n                return 1L;\n            }\n        }\n
    \       return 0L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d59c8c570f040fcb4bf0858e69e355e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d59c8c570f040fcb4bf0858e69e355e>:0
    \n"
  stdout: ''
  timestamp: 1660015917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (S.StartsWith(\"I\"))\n            return
    0L;\n        int N = S.IndexOf(\". . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . . \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqcviparu.cs(20,27): error CS1010: Newline in constant

    /tmp/tmpqcviparu.cs(20,1014): error CS1026: ) expected

    /tmp/tmpqcviparu.cs(20,1014): error CS1002: ; expected

    '
  timestamp: 1660015916
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        string word
    = string.Empty;\n        for(int i = 0; i < S.Length; i++)\n        {\n            if(!char.IsWhiteSpace(S[i]))
    {\n                if(i == 0) {\n                    word = S[i];\n                }\n
    \               else if(S[i] == ' ') {\n                    if(!word.StartsWith(\"I\"))
    {\n                        boredoms++;\n                    }\n                    word
    = string.Empty;\n                }\n                else\n                {\n
    \                   if(!word.StartsWith(\"I\")) {\n                        word
    += S[i];\n                    }\n                }\n            }\n        }\n
    \       return boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqe7q2nu_.cs(24,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int count = 0;\n        string sentence
    = S;\n        foreach (char c in sentence)\n        {\n            if (c == '.')\n
    \           {\n                if (sentence.StartsWith(\"I\"))\n                {\n
    \                   count++;\n                }\n                else\n                {\n
    \                   count = 0;\n                }\n            }\n            else
    if (c == '?')\n            {\n                if (sentence.StartsWith(\"I\"))\n
    \               {\n                    count++;\n                }\n                else\n
    \               {\n                    count = 0;\n                }\n            }\n
    \           else if (c == '!')\n            {\n                if (sentence.StartsWith(\"I\"))\n
    \               {\n                    count++;\n                }\n                else\n
    \               {\n                    count = 0;\n                }\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <309c88529fc1455fa5110bfc98396075>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var regex = new Regex(@\"^[I].+[.?!]$\");\n
    \       var boredoms = new List<string>();\n        var boredomCount = new int[25];\n
    \       foreach (var match in regex.Matches(S)) {\n            var word = match.Value;\n
    \           boredoms.Add(word);\n            var count = (from s in boredoms where
    s.Equals(word) select s).Count();\n            boredomCount[count]++;\n        }\n
    \       return boredomCount.Sum();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpheadpnxi.cs(18,25): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string boredoms = \"I\";\n        long
    boredom_counter = 0;\n        // Get boredom string from string.\n        foreach
    (string s in boredoms.Split(',')) {\n            boredom_counter++;\n        }\n
    \       // Find index of first char of string in boredom string.\n        long
    pos = S.IndexOf(boredoms);\n        // Check if index found is greater than 0.\n
    \       if (pos > 0) {\n            // Loop through string to find count of boredoms.\n
    \           string s = S;\n            long count = 0;\n            for (pos =
    s.IndexOf(boredoms); ; pos++) {\n                if (pos == 0) break;\n                if
    (pos == S.Length) break;\n                s++;\n                count++;\n            }\n
    \           return count;\n        }\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdso8hv0_.cs(34,17): error CS0023: Operator ''++'' cannot be applied to
    operand of type ''string''

    '
  timestamp: 1660015917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (S.Length < 2) return 0;\n        string
    p = S.Substring(0, 1).ToLower();\n        bool b = (S[0] == p || S[0] == p.ToUpper());\n
    \       int pcnt = 1;\n        foreach (char c in S.Substring(1).ToLower()) {\n
    \           bool b1 = (S[0] == c || S[0] == c.ToUpper());\n            if (b1
    != b) pcnt = 0;\n            else pcnt++;\n            b = b1;\n        }\n        return
    pcnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph82f87gl.cs(20,19): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmph82f87gl.cs(20,32): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmph82f87gl.cs(23,47): error CS1501: No overload for method ''ToUpper'' takes
    0 arguments

    '
  timestamp: 1660015917
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        return S.Split('.', '?', '!').Count(x
    => x.StartsWith(\"I\"));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be6ffff29a3340dea4c6279c7fcf059b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be6ffff29a3340dea4c6279c7fcf059b>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        Debug.Assert(S != null);\n        List<string>
    SList = S.Split('.', '?', '!').ToList();\n        long result = SList.Count(l
    => l == \"I\");\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c101af2a1274d2495adff0b6aa1b5db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c101af2a1274d2495adff0b6aa1b5db>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> words = new List<string>();\n
    \       int count = 0, i;\n        foreach (char c in S) {\n            if (char.IsLetter(c))
    {\n                words.Add(c);\n            }\n        }\n        List<string>
    boredWords = new List<string>();\n        for (i = 0; words.Count - i < 5; i++)
    {\n            if (words[i] == 'I') {\n                boredWords.Add(words[words.Count
    - 1]);\n            }\n        }\n        return boredWords.Count(w => S == w);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrdkt3bs.cs(22,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpvrdkt3bs.cs(27,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''char''

    /tmp/tmpvrdkt3bs.cs(19,13): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        StringBuilder sentence = new StringBuilder(S);\n
    \       sentence = sentence.Remove(0, 1).Remove(sentence.Length - 2, 2);\n        long
    boredomCount = 0;\n        long index = 0;\n        while ((index = sentence.IndexOf(\"I\",
    index, StringComparison.Ordinal)) != -1) {\n            boredomCount++;\n            index
    = index + 1;\n        }\n        return boredomCount;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9vi299it.cs(22,34): error CS1501: No overload for method ''IndexOf'' takes
    3 arguments

    '
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> words = new List<string>(S.Split('
    ').Distinct());\n        var count = words.Where(w => w.StartsWith(\"I\")).Count();\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <819cc4cc2a014d258958b8e13c6a83dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <819cc4cc2a014d258958b8e13c6a83dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0L;\n        char[] chars
    = S.ToCharArray();\n        for (int i = 1; i < S.Length; i++) {\n            char
    c = chars[i - 1];\n            if (c == '.' || c == '?' || c == '!') {\n                for
    (int j = 1; j < S.Length; j++) {\n                    if (chars[i] == '.' || chars[i]
    == '?' || chars[i] == '!') {\n                        if (chars[j] == '.' || chars[j]
    == '?' || chars[j] == '!') {\n                            if (chars[i - 1] !=
    '.' || chars[i - 1] != '?' || chars[i - 1] != '!') {\n                                count
    += 1;\n                            }\n                        }\n                    }\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d1d720779b94c259a8fe1f1c6b60246>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d1d720779b94c259a8fe1f1c6b60246>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredoms = new List<string>();\n
    \       foreach (var sentence in S.Split('.')) {\n            if (sentence.Contains(\"I\")
    && boredoms.Count <= 0) {\n                boredoms.Add(\"I\");\n            }\n
    \           else if (sentence.Contains(\"I\") && !boredoms.Contains(\"I\")) {\n
    \               boredoms.Add(\"I\");\n            }\n            else if (sentence.Contains(\"!\")
    && boredoms.Count <= 0) {\n                boredoms.Add(\"!\");\n            }\n
    \           else if (sentence.Contains(\"!\") && !boredoms.Contains(\"!\")) {\n
    \               boredoms.Add(\"!\");\n            }\n            else if (sentence.Contains(\"?\")
    && boredoms.Count <= 0) {\n                boredoms.Add(\"?\");\n            }\n
    \           else if (sentence.Contains(\"?\") && !boredoms.Contains(\"?\")) {\n
    \               boredoms.Add(\"?\");\n            }\n            else if (sentence.StartsWith(\"I\")
    && boredoms.Count <= 0) {\n                boredoms.Add(\"I\");\n            }\n
    \           else if (sentence.StartsWith(\"I\") && !boredoms.Contains(\"I\"))
    {\n                boredoms.Add(\"I\");\n            }\n            else if (sentence.StartsWith(\"!\")
    && boredoms.Count <= 0) {\n                boredoms.Add(\"!\");\n            }\n
    \           else if (sentence.StartsWith(\"!\") && !boredoms.Contains(\"!\"))
    {\n                boredoms.Add(\"!\");\n            }\n            else if (sentence.StartsWith(\"?\")
    && boredoms.Count <= 0) {\n                boredoms.Add(\"?\");\n            }\n
    \           else if (sentence.StartsWith(\"?\") && !boredoms.Contains(\"?\"))
    {\n                boredoms.Add(\"?\");\n            }\n            else if (boredoms.Count
    <= 0) {\n                boredoms.Add(\"I\");\n            }\n        }\n        return
    boredoms.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cca6af0ff1bc49f08a2ef445bd949678>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cca6af0ff1bc49f08a2ef445bd949678>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long Boredoms = 0L;\n        foreach
    (string word in S.Split('.')) {\n            if (word == \"I\") {\n                Boredoms
    ++;\n            }\n        }\n        return Boredoms;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d6885abd1ce458c85c29ec7c9c318e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d6885abd1ce458c85c29ec7c9c318e6>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (S != null && S.Length > 0) {\n            long.TryParse(Regex.Match(S,
    @\"^I\").Value, out long boredom);\n            return boredom;\n        }\n        else\n
    \           return (long)0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvzn6prn9.cs(19,27): error CS0103: The name ''Regex'' does not exist in
    the current context

    '
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var N = S.Length;\n        var BoredomCount
    = 0;\n        var start = S.IndexOf(\"I\");\n        if (start >= 0) {\n            for
    (int i = 0; i < N; i++) {\n                if (S[i] == '.') {\n                    //
    The word 'I' must be followed immediately by a period.\n                    //
    If not, then we can't boredom (this is okay).\n                    if (i + 1 ==
    N) {\n                        BoredomCount++;\n                    }\n                }
    else if (S[i] == '?' || S[i] == '!') {\n                    // The word 'I' must
    be followed immediately by one of the\n                    // delimiters.\n                    //
    If not, then we can't boredom (this is okay).\n                    if (i + 1 ==
    N) {\n                        BoredomCount++;\n                    }\n                }
    else {\n                    // The word 'I' must not follow any delimiter immediately\n
    \                   // after it but must be followed by another word (this is
    not\n                    // okay).\n                    if (i == start) {\n                        BoredomCount++;\n
    \                   }\n                }\n            }\n        }\n        return
    BoredomCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6ca938f3fa94ddf98604313d69e4e15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6ca938f3fa94ddf98604313d69e4e15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string S = S.ToLower();\n        string
    words[] = S.Split('.', '?', '!').Where(x => x.StartsWith(\"i\")).ToArray();\n
    \       long count = 0;\n        foreach (string w in words)\n            if (w.Equals(\"i\"))\n
    \               count++;\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_rwzvt3x.cs(19,21): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    '
  timestamp: 1660015917
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Step 1: split the string into its
    component parts\n        char[] separators = { '.', '?', '!' };\n        IEnumerable<string>
    components = S.Split(separators);\n        long count = 0; // number of boredoms\n
    \       string lastComponent = null; // last component (either an I, or a .)\n
    \       foreach (string component in components) {\n            // Step 2: remove
    spaces from components\n            component = component.Replace(\" \", \"\");\n
    \           // Step 3: check if last component is a \"I\", and count it (count
    + 1)\n            if (component == \"I\")\n                count = count + 1;\n
    \           // Step 4: check if the last component is a \".\", and count it (count
    + 1)\n            else if (lastComponent == \".\")\n                count = count
    + 1;\n            lastComponent = component;\n        }\n        // Step 5: Return
    count\n        return count;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpegns2afe.cs(25,13): error CS1656: Cannot assign to ''component'' because
    it is a ''foreach iteration variable''

    '
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<char> boredom = new List<char> {
    '.', '?' , '!' };\n        string str = \"\";\n        foreach (string word in
    S.Split('.')) {\n            if (boredom.Contains(word[0])) {\n                str
    += word[0] + \".\";\n            }\n        }\n        long b = 1;\n        int
    c = 0;\n        while (str.IndexOf('.') != -1) {\n            str = str.Remove(str.IndexOf('.'),
    1);\n            b++;\n        }\n        while (str.IndexOf('?') != -1) {\n            str
    = str.Remove(str.IndexOf('?'), 1);\n            b++;\n        }\n        while
    (str.IndexOf('!') != -1) {\n            str = str.Remove(str.IndexOf('!'), 1);\n
    \           b++;\n        }\n        c = str.Length;\n        return (b * c);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fb09d07b12044ddaa40c7a600d79e82>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fb09d07b12044ddaa40c7a600d79e82>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (S == null) return 0L;\n        long
    Boredoms = 0L;\n        foreach (string sentence in S.Split('.')) {\n            long
    Boremed = IsBored(sentence);\n            if (Boremed > 0) Boredoms++;\n        }\n
    \       return Boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> boredoms = new List<string>();\n
    \       foreach(char c in S) {\n            if(c == '.') {\n                boredoms.Add(\".
    \");\n            } else if(c == '?') {\n                boredoms.Add(\"? \");\n
    \           } else if(c == '!') {\n                boredoms.Add(\"! \");\n            }\n
    \       }\n        return boredoms.Count(w => w.StartsWith(\"I\"));\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2411404f285c4354a1f2ad7f8ab8c151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2411404f285c4354a1f2ad7f8ab8c151>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string [] words = S.Split(' ');\n        bool
    startsWithI = false;\n        foreach (string w in words) {\n            if ((w[0]
    == 'I') && !startsWithI) {\n                startsWithI = true;\n            }\n
    \       }\n        long count = 0;\n        foreach (string w in words) {\n            if
    (w[0] == 'I') {\n                count += 1;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9129a73a92244389bfbfa73eb55ac4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9129a73a92244389bfbfa73eb55ac4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredom = S.Select((x,i) => new {
    x, i })\n            .Where(x => x.x.ToLowerInvariant().StartsWith(\"i\", StringComparison.OrdinalIgnoreCase))\n
    \           .Select(x => x.i)\n            .Distinct()\n            .Count(i =>
    i%2==1);\n        return boredom;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk0fhc9cy.cs(19,29): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''c'' of ''char.ToLowerInvariant(char)''

    '
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string[] S = S.Split('.', '?', '!');\n
    \       long boredoms = 0;\n        foreach (string str in S) {\n            boredoms
    += ((str[0] == 'I') ? 1L: 0L);\n        }\n        return boredoms;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcipe54w.cs(18,18): error CS0136: A local or parameter named ''S'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpwcipe54w.cs(18,24): error CS1061: ''string[]'' does not contain a definition
    for ''Split'' and no accessible extension method ''Split'' accepting a first argument
    of type ''string[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwcipe54w.cs(18,22): error CS0165: Use of unassigned local variable ''S''

    '
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Initialize count\n        long result
    = 0;\n        // Loop through every character in string\n        foreach (char
    c in S) {\n            // Determine if character is the delimiter\n            if
    (c == ',' || c == '.' || c == '!' || c == '?') {\n                // If character
    is delimiter, increment count\n                result += 1;\n            }\n        }\n
    \       // Return the result\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a81f344d3f142c7909ce878c979ca36>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long cnt = 0;\n        Regex regex =
    new Regex(\"[?!.]\");\n        List<string> words = regex.Split(S).ToList();\n
    \       foreach (string word in words) {\n            if (word.ToLower() == \"i\")
    {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptp6mmg7z.cs(19,9): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmptp6mmg7z.cs(19,27): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015918
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long C = 0;\n        char L;\n        for
    (int i = 1; i < S.Length; i++) {\n            L = S[i];\n            C += 1;\n
    \           if (L == 'i' || L == 'i!' || L == 'i?' || L == 'i..') {\n                C
    -= 1;\n            }\n        }\n        return C;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxtbzsqke.cs(23,34): error CS1012: Too many characters in character literal

    /tmp/tmpxtbzsqke.cs(23,47): error CS1012: Too many characters in character literal

    /tmp/tmpxtbzsqke.cs(23,60): error CS1012: Too many characters in character literal

    '
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Find \"I\" in the sentence and store
    in temp\n        string temp = S;\n        int count = 0;\n        while (temp.IndexOf(\"I\")
    != -1 && temp.IndexOf('.') != -1 && temp.IndexOf('?') != -1 && temp.IndexOf('!')
    != -1) {\n            temp = temp.Substring(temp.IndexOf(\"I\") + 1);\n            count++;\n
    \       }\n\n        // Return count as long\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf51f4fc7f6e4e6c911edf37ed20f9fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf51f4fc7f6e4e6c911edf37ed20f9fb>:0
    \n"
  stdout: ''
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        foreach (string
    part in S.Split('.', '?', '!'))\n        {\n            if (part.StartsWith(\"I\"))\n
    \           {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <397a82d1466d4d94adc79fd5097ff6b9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <397a82d1466d4d94adc79fd5097ff6b9>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        foreach (string
    sentence in S.Split('.')) {\n            if (IsBored(sentence, out count)) {\n
    \               break;\n            }\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp844e3qlw.cs(20,17): error CS1501: No overload for method ''IsBored'' takes
    2 arguments

    '
  timestamp: 1660015918
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        foreach (string W in S.Split('.')) {\n
    \           if (W.StartsWith(\"I\")) {\n                return 1L;\n            }\n
    \       }\n        return 0L;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95cfcb327887438ca7cd07099f7f17e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95cfcb327887438ca7cd07099f7f17e0>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Write your answer here.\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ef4361f6eba4323bb5e25b26af33ec7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2ef4361f6eba4323bb5e25b26af33ec7>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var words = S.Split('.', '?', '!');\n
    \       var bored = 0;\n        foreach (var word in words) {\n            if
    (word.StartsWith(\"I\")) bored += 1;\n        }\n        return bored;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76b6effdf0c648198868a21100a25450>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76b6effdf0c648198868a21100a25450>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string [] S = S.Split('.');\n        char[]
    C = new char[] {'.', '?' , '!' };\n        long Boredoms = 0;\n        foreach
    (string x in S) {\n            Boredoms += x.StartsWith(\"I\", StringComparison.OrdinalIgnoreCase)
    ? 1 : 0;\n        }\n        return Boredoms;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo420_i5s.cs(18,19): error CS0136: A local or parameter named ''S'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpo420_i5s.cs(18,25): error CS1061: ''string[]'' does not contain a definition
    for ''Split'' and no accessible extension method ''Split'' accepting a first argument
    of type ''string[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpo420_i5s.cs(18,23): error CS0165: Use of unassigned local variable ''S''

    '
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        int sentences
    = S.Split('.').Count();\n        for (int i = 0; i < sentences; i++) {\n            string
    sentence = S.Split('.')[i].Trim();\n            if (sentence.StartsWith(\"I\"))
    {\n                boredoms += 1;\n            }\n        }\n        return boredoms;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <907aa1c725d84208ac2322f851fcc346>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var dictionary = new Dictionary<string,
    string>();\n        foreach (var line in S.Split(new[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries))
    {\n            dictionary.Add(line.ToLower(), \"\");\n        }\n        var boredoms
    = dictionary.Values.Sum(s => s.Count(i => i == 'i'));\n        return boredoms;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd4cbc25ff6c48a6bcdae646d5499d7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd4cbc25ff6c48a6bcdae646d5499d7b>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredomCount = 0;\n        foreach
    (char c in S)\n        {\n            if (c == '.' || c == '?' || c == '!')\n
    \           {\n                boredomCount++;\n            }\n        }\n        return
    boredomCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94afcfb101ae4a06a56ec257ddd29729>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        foreach (var
    item in S.Split('.', '?', '!')) {\n            if (item.StartsWith(\"I\")) {\n
    \               count = count + 1;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64085bc134814e208b2f882e71b7826d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <64085bc134814e208b2f882e71b7826d>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Your code here\n        long ans =
    0;\n        foreach (string item in S.Split('.'))\n        {\n            ans
    += S.Split('?').Length + S.Split('!').Length;\n        }\n        return ans;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d1a4b9cda0b46aaa8e5873dab6ebc58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d1a4b9cda0b46aaa8e5873dab6ebc58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        foreach (string
    word in S.Split('.')) {\n            string lower = word.ToLower();\n            bool
    isI = lower == \"i\" || lower == \"i\\'\" || lower == \"im\" || lower == \"ive\";\n
    \           if (isI) {\n                boredoms++;\n            }\n        }\n
    \       return boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f9aca1860b14279b8a03caeaa8ad247>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f9aca1860b14279b8a03caeaa8ad247>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string t = S;\n        Regex r = new
    Regex(\"[.!?]\");\n        long n = 0;\n        foreach (Match m in r.Matches(t))
    {\n            t =\n                m.Value.Replace(\".\", \"[.]\")\n                    .Replace(\"?\",
    \"[?]\")\n                    .Replace(\"!\", \"[!]\");\n            if (t.StartsWith(\"I\"))
    {\n                n = n + 1;\n            }\n        }\n        return n;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz76oxvzt.cs(19,9): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpz76oxvzt.cs(19,23): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpz76oxvzt.cs(21,18): error CS0246: The type or namespace name ''Match''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long B = 0;\n        foreach (string
    word in S.Split('.', '?', '!')) {\n            if (word.StartsWith(\"I\"))\n                B++;\n
    \       }\n        return B;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96fc0731e88d4e45a7d15a2736ed7677>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96fc0731e88d4e45a7d15a2736ed7677>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // TODO: Your code here.\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ee58083e52246459244b808fa2f7a70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9ee58083e52246459244b808fa2f7a70>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Your code here\n        var boredoms
    = new List<string>();\n        foreach(var s in S.Split('.','?','!').Where(s=>s.StartsWith(\"I\")))\n
    \       {\n            if(boredoms.Contains(s))\n            {\n                boredoms.Remove(s);\n
    \           }\n            else\n            {\n                boredoms.Add(s);\n
    \           }\n        }\n        return boredoms.Count;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b2775859675443c8a5105e010c1743f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b2775859675443c8a5105e010c1743f>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredoms = (from word in S.Split('.')\n
    \                      where word.StartsWith(\"I\")\n                       select
    word)\n                       .Count();\n        return boredoms;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed49adc966334ceab4c3c9134529349c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed49adc966334ceab4c3c9134529349c>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        Debug.Assert(S != null);\n        long
    count = new long();\n        string [] tokens = S.Split(' ');\n        foreach
    (string token in tokens) {\n            if (token.StartsWith(\"I\"))\n                count++;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45652e40215c4107a95026bc2a8cb8ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <45652e40215c4107a95026bc2a8cb8ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long answer = 0;\n        foreach (string
    word in S.Split('.', '?', '!')) {\n            bool boredom = true;\n            foreach
    (char character in word.ToCharArray()) {\n                if (character != 'I')
    {\n                    boredom = false;\n                }\n            }\n            if
    (boredom) {\n                answer++;\n            }\n        }\n        return
    answer;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fab4d4722c4f4f149b881d97781bc06f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fab4d4722c4f4f149b881d97781bc06f>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        foreach (var
    word in S.Split('.')) {\n            if (word == \"I\") {\n                boredoms++;\n
    \           }\n        }\n        return boredoms;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86c6ab453f1f4ebf8600f7ac7e1bb4ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86c6ab453f1f4ebf8600f7ac7e1bb4ad>:0
    \n"
  stdout: ''
  timestamp: 1660015919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        ArrayList words = S.Split('.', '?', '!').ToArrayList();\n
    \       long boredoms = 0;\n        foreach (string word in words) {\n            if
    (word.StartsWith(\"I\"))\n                boredoms += 1;\n        }\n        return
    boredoms;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp26h_rh9d.cs(18,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp26h_rh9d.cs(18,50): error CS1061: ''string[]'' does not contain a definition
    for ''ToArrayList'' and no accessible extension method ''ToArrayList'' accepting
    a first argument of type ''string[]'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string boredom = \"\";\n        int count
    = 0;\n        foreach (char c in S) {\n            if (c == ' ') continue;\n            if
    (c == '.') boredom = boredom + c;\n            if (c == '?') boredom = boredom
    + c;\n            if (c == '!') boredom = boredom + c;\n            if (boredom
    == \"I \") {\n                count++;\n                boredom = \"\";\n            }\n
    \       }\n        return (long)count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3aee0bd5fbcd47ba8bf2e99e6bce8640>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3aee0bd5fbcd47ba8bf2e99e6bce8640>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        StringBuilder
    sb = new StringBuilder();\n        foreach (var item in S) {\n            if (!item.Equals('.'))
    sb.Append(item);\n            if (item.Equals('.')) break;\n        }\n        string
    s = sb.ToString();\n        string pattern = \"I \";\n        List<string> words
    = new List<string>();\n        foreach (string s in s.Split('.', '?', '!'))\n
    \           words.Add(s);\n        foreach (string word in words)\n            if
    (word.StartsWith(pattern)) count++;\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpad12uxwk.cs(27,25): error CS0136: A local or parameter named ''s'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1660015919
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        return S.Count(w => w.Equals(\"I\", StringComparison.OrdinalIgnoreCase)\n
    \           && !w.Equals(\"!\", StringComparison.OrdinalIgnoreCase)\n            &&
    !w.Equals(\".\", StringComparison.OrdinalIgnoreCase)\n            && !w.Equals(\"?\",
    StringComparison.OrdinalIgnoreCase)\n            && !w.Equals(\"/\", StringComparison.OrdinalIgnoreCase)\n
    \           && w.Length > 1) // just to be extra sure\n            / S.Count(w
    => w.Equals(\".\", StringComparison.OrdinalIgnoreCase)\n            || w.Equals(\"?\",
    StringComparison.OrdinalIgnoreCase)\n            || w.Equals(\"!\", StringComparison.OrdinalIgnoreCase)\n
    \           || w.Equals(\"/\", StringComparison.OrdinalIgnoreCase)\n            ||
    w.Equals(\"I\", StringComparison.OrdinalIgnoreCase));\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu5zkypc.cs(18,29): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(19,17): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(20,17): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(21,17): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(22,17): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(23,18): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpsu5zkypc.cs(24,28): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(25,16): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(26,16): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(27,16): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    /tmp/tmpsu5zkypc.cs(28,16): error CS0176: Member ''object.Equals(object, object)''
    cannot be accessed with an instance reference; qualify it with a type name instead

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long n = S.Length;\n        long b =
    0;\n        foreach (var s in S.Trim().Split('.', '?', '!')) {\n            b
    += s.StartsWith(\"I\");\n        }\n        return b;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk80e5rq2.cs(21,13): error CS0019: Operator ''+='' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1660015919
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long result = 0;\n        foreach (string
    str in S.Split('.', '?', '!').ToList())\n            if (str == \"I\")\n                result++;\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ef593f670a141e19c632d96c44c3188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1ef593f670a141e19c632d96c44c3188>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string S = S.ToLower();\n        var
    words = S.Split('.', '?', '!').Where(w => w.Length > 0).ToList();\n        bool
    bored = words.Contains(\"i\");\n        long boredCount = 0;\n        if (bored)
    {\n            boredCount = words.ToList().Count(w => w.StartsWith(\"i\"));\n
    \       }\n        return boredCount;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplctpn5ro.cs(18,16): error CS0136: A local or parameter named ''S'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmplctpn5ro.cs(18,20): error CS0165: Use of unassigned local variable ''S''

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        foreach (string
    word in S.Split(new[] {\".\", \"?\", \"!\"}, StringSplitOptions.None)) {\n            if
    (word.ToLowerInvariant().StartsWith(\"i\")) {\n                boredoms++;\n            }\n
    \       }\n        return boredoms;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a2fd51a375d4099adb8988e2c1c554b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a2fd51a375d4099adb8988e2c1c554b>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int i;\n        long ans = 0, len = 0;\n
    \       foreach (string x in S.Split('.', '?', '!'))\n            if (x != \"I\"
    && x.StartsWith(\"I\"))\n                ans += 1;\n            else\n                len
    += 1;\n        ans = ans / len;\n        return ans;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7ed59953f8d4fa3bb42fe712380c286>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f7ed59953f8d4fa3bb42fe712380c286>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        foreach (string
    part in S.Split('.', '?', '!').Select(x => x.Trim())) {\n            if (part.StartsWith(\"I\"))\n
    \               count++;\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1415b04d53842a4af9eba6af30f6a9b>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> words = S.Split('.', '?',
    '!').ToList();\n        int count = 0;\n        foreach (string word in words)
    {\n            if (word == \"I\") {\n                count = count + 1;\n            }\n
    \       }\n        return (long) count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18014ee9b38145d0b3f4b1caa24be4b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18014ee9b38145d0b3f4b1caa24be4b8>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long l = 0;\n        List<String> v =
    new List<String>();\n        foreach (var i in S.Split('.', '?', '!').ToList())
    {\n            v.Add(i);\n        }\n        for (int i = 0; i < (v.Count - 1);
    i++) {\n            if (v[i].StartsWith(\"I\")) {\n                l++;\n            }\n
    \       }\n        return l;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e3e7b693ee944b1bc9cbec0ad40914b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e3e7b693ee944b1bc9cbec0ad40914b>:0
    \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Use a dictionary to store a mapping
    of letters to their frequency\n        Dictionary<char, long> D = new Dictionary<char,
    long>();\n        foreach (char c in S) {\n            if (D[c] == null) {\n                D[c]
    = 1;\n            } else {\n                D[c] += 1;\n            }\n        }\n\n
    \       // Now iterate through each letter in the dictionary and count boredom\n
    \       foreach (KeyValuePair<char, long> entry in D) {\n            if (entry.Key.ToString()
    == \"I\") {\n                return entry.Value;\n            }\n        }\n        return
    (long)0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException:
    The given key 'H' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsBored
    (System.String S) [0x00017] in <45f1309628264252abc02a614a2ef82b>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <45f1309628264252abc02a614a2ef82b>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException: The
    given key 'H' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item
    (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsBored
    (System.String S) [0x00017] in <45f1309628264252abc02a614a2ef82b>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <45f1309628264252abc02a614a2ef82b>:0 \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int N;\n        var d = new string[S.Length];\n
    \       var t = new string[S.Length];\n        char boredoms[] = new char[3];\n
    \       bool b1 = false;\n        bool b2 = false;\n        bool b3 = false;\n
    \       bool b4 = false;\n        bool bx = false;\n        for (int i = 0; i
    < S.Length; i++) {\n            if (boredoms[i] == '.') { d.SetLength(1); }\n
    \           else if (boredoms[i] == '?') { d.SetLength(1); }\n            else
    if (boredoms[i] == '!') { d.SetLength(1); }\n            else if (S[i] == 'I')
    {\n                if (i == 0) { b1 = true; break; }\n                if (i ==
    1) { b2 = true; break; }\n                if (i == 2) { b3 = true; break; }\n
    \               if (i == 3) { b4 = true; break; }\n            }\n            else
    {\n                if (i == 0) { bx = true; break; }\n                if (i ==
    1) { bx = true; break; }\n                if (i == 2) { bx = true; break; }\n
    \               if (i == 3) { bx = true; break; }\n            }\n            d[d.Length
    - 1] = S[i];\n        }\n        if (bx) { return 0; }\n        if (b1 && b2 &&
    b3 && b4) { N = (d.Length - 1); return 1; }\n        if (b1) {\n            if
    (d.Length == 1) { N = (d.Length - 1); return 1; }\n            if (d[1] == '.'
    && d[2] == '.' && d[3] == '.') {\n                N = d.Length - 1;\n                return
    1; }\n            if (d[1] == '.' && d[2] == '.' && d[3] == '.') { N = (d.Length
    - 3); return 1; }\n            if (d[1] == '.' && d[2] == '.' && d[3] == '.')
    { N = (d.Length - 3); return 1; }\n            if (d[1] == '.' && d[2] == '.'
    && d[3] == '.') { N = (d.Length - 3); return 1; }\n            if (d[1] == '.'
    && d[2] == '.' && d[3] == '.') { N = (d.Length - 3); return 1; }\n            if
    (d[1] == '.' && d[2] == '.' && d[3] == '.') { N = (d.Length - 3); return 1; }\n
    \           if (d[1] == '.' && d[2] == '.' && d[3] == '.') { N = (d.Length - 3);
    return 1; }\n            if (d[1] == '.' && d[2] == '.' && d[3] == '.') { N =
    (d.Length - 3); return 1; }\n            if (d[1] == '.' && d[2] == '.' && d[3]
    == '.') { N = (d.Length - 3\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplg6gtckb.cs(21,22): error CS0650: Bad array declarator: To declare a managed
    array the rank specifier precedes the variable''s identifier. To declare a fixed
    size buffer field, use the fixed keyword before the field type.

    /tmp/tmplg6gtckb.cs(59,79): error CS1026: ) expected

    /tmp/tmplg6gtckb.cs(59,79): error CS1002: ; expected

    /tmp/tmplg6gtckb.cs(61,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmplg6gtckb.cs(70,2): error CS1513: } expected

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        char[] punctuation = new[] { '.', '?',
    '!' };\n        List<String> words = S.Split(' ').Where(x => x != null).ToList();\n
    \       List<String> boredom = words.Where(x => x != \"I\").ToList();\n        long
    boredomCount = 0;\n        for (int i = 0; i < words.Count; i++) {\n            boredomCount
    = boredomCount + boredom.Count(x => x.StartsWith(words[i]));\n        }\n        return
    boredomCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ab0921501c342bbbb09a69e82a58e15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ab0921501c342bbbb09a69e82a58e15>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        char[] delimiters
    = { '.', '?', '!' };\n        foreach (string sentence in S.Split(delimiters))
    {\n            if (sentence.StartsWith(\"I\")) {\n                count += 1;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d887843a3c0245c1bcc142617fb46bfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d887843a3c0245c1bcc142617fb46bfb>:0
    \n"
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string boredom = @\"(?i)\\bI\\b\";\n
    \       var boredoms = new List<long>();\n        var splits = S.Split('.')\n
    \           .Select(s => s.Split('?').Select(c => c.Split('!').Select(b => b.Trim()).ToList()).ToList())\n
    \           .Select(b => b.Aggregate((a, b) => a + b));\n        var boredCount
    = 0;\n        foreach (var boredoms in splits) {\n            foreach (var boredoms
    in boredoms) {\n                if (boredoms.Any(x => boredom.StartsWith(x, StringComparison.OrdinalIgnoreCase)))
    {\n                    boredCount++;\n                }\n            }\n        }\n
    \       return (long) boredCount;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_cvub7dx.cs(22,48): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<string>'' and ''List<string>''

    /tmp/tmp_cvub7dx.cs(24,22): error CS0136: A local or parameter named ''boredoms''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp_cvub7dx.cs(25,26): error CS0136: A local or parameter named ''boredoms''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var r = new Regex(@\"(I\\b)\");\n        var
    boredoms = s.Split(new[] {'.', '?', '!'}, StringSplitOptions.RemoveEmptyEntries);\n
    \       return boredoms.Count(x => r.IsMatch(x.ToLower())) + 1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3b1yf6ex.cs(18,21): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp3b1yf6ex.cs(19,24): error CS0103: The name ''s'' does not exist in the
    current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long n = 0;\n        if (S == \"I\".ToCharArray().Take(1).ToList().Contains(S.First().ToString()))
    {\n            n++;\n        }\n        return n;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpen8zp_2h.cs(19,62): error CS1503: Argument 1: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Declare an array to hold the counts
    of letter 'I'.\n        var boredomCounts = new int[26];\n\n        // Iterate
    through every word in the sentence and increment the\n        // count of the
    letter I in the word.\n        foreach (string word in S.Split(' '))\n            for
    (int i = 0; i < word.Length; i++)\n                if (word[0] = 'I')\n                    boredomCounts[word.ToLower().ToUpper()[i]
    - 'A']++;\n\n        // If there are no words, return 0.\n        if (boredomCounts.All(w
    => w == 0))\n            return 0L;\n\n        // Else return the highest boredom
    count possible.\n        return boredomCounts.Max();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ess4ztd.cs(25,21): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        bool IsBored = false;\n        if (S.StartsWith(\"I\",
    StringComparison.OrdinalIgnoreCase)) {\n            IsBored = true;\n        }\n
    \       return IsBored ? 1 : 0;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e65041d961e4568940b26f42cb3c456>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e65041d961e4568940b26f42cb3c456>:0
    \n"
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int n = 0;\n        bool bored = false;\n
    \       foreach (var s in S) {\n            if (s.StartsWith(\"I\")) {\n                bored
    = true;\n            }\n            if (s.Equals(\".\")) {\n                bored
    = true;\n            }\n            if (s.Equals(\"?\")) {\n                bored
    = true;\n            }\n            if (s.Equals(\"!\")) {\n                bored
    = true;\n            }\n        }\n        return bored ? n : -1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2946cd8o.cs(21,19): error CS1061: ''char'' does not contain a definition
    for ''StartsWith'' and no accessible extension method ''StartsWith'' accepting
    a first argument of type ''char'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // The algorithm works by counting how
    many times each character appears\n        // in a sentence and comparing that
    to the total number of characters. \n        // The algorithm also looks for the
    first occurrence of a character which\n        // is listed in the \"BoredomChars\"
    array (which has all 'I' in the\n        // English alphabet). So the algorithm
    does a little bit of work to find \n        // how many boredoms a given sentence
    has. \n        \n        long boredomCount = 0;\n        char[] BoredomChars =
    new char[] { 'I', '.', '!', '?' };\n        bool foundChar = false;\n        \n
    \       // The code below looks for the first occurrence of a char in the BoredomChars
    array \n        // for each char in the input sentence. It then adds the number
    of times that\n        // char appears to the total boredomCount and moves on
    to the next char.\n        foreach (char c in S.ToCharArray())\n        {\n            if
    (BoredomChars.Contains(c))\n            {\n                boredomCount++;\n            }\n
    \       }\n        \n        // If there is a char in S, then the first occurring
    char will be in BoredomChars \n        // because that is what we searched for.
    \n        // If not, then all chars in S which are not found in BoredomChars \n
    \       // will also be in BoredomChars, so we don't have to check for that\n
    \       // here. The code below handles the case where a sentence does not start\n
    \       // with a boredom. \n        if (boredomCount > 0)\n        {\n            return
    boredomCount;\n        }\n        else\n        {\n            return 0;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1930976ef2481380baed1cc042f138>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f1930976ef2481380baed1cc042f138>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        foreach (string word in S.Split('.'))
    {\n            if (word.StartsWith(\"I\")) {\n                return 1L;\n            }\n
    \       }\n        return 0L;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ffaa836effe432eb7e5e41cea138250>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ffaa836effe432eb7e5e41cea138250>:0
    \n"
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (String.IsNullOrEmpty(S))\n            return
    0L;\n        long count = 0;\n        foreach (var s in S) {\n            bool
    isBoredom = ((s == \".\") || (s == \"?\") || (s == \"!\")) && (s.StartsWith(\"I\"));\n
    \           if (isBoredom) count++;\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2lwb353q.cs(22,32): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp2lwb353q.cs(22,46): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp2lwb353q.cs(22,60): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmp2lwb353q.cs(22,77): error CS1061: ''char'' does not contain a definition
    for ''StartsWith'' and no accessible extension method ''StartsWith'' accepting
    a first argument of type ''char'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long res = 0;\n        foreach (string
    line in S.Split('.')) {\n            foreach (string word in line.Split('?!'))
    {\n                if (word.Equals(\"I\")) {\n                    res++;\n                }\n
    \           }\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_s6eqbvy.cs(20,48): error CS1012: Too many characters in character literal

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        char[] delimiters = { ' ', '.', '?',
    '!' };\n        char[] chars = S.ToCharArray();\n        bool bored = false;\n
    \       long count = 0;\n        foreach (char c in chars) {\n            bored
    = false;\n            foreach (char d in delimiters) {\n                if (c
    == d)\n                    bored = true;\n            }\n            if (!bored)\n
    \               count++;\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a42c8fcca1134b699ff981b959e83cd4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a42c8fcca1134b699ff981b959e83cd4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        S = S.ToLower();\n        long ret =
    0;\n        bool isIn = false;\n        bool isInMiddle = false;\n        bool
    isInEnd = false;\n        int count = 0;\n        foreach (var c in S) {\n            if
    (isIn && c == ' ') isInMiddle = true;\n            else if (isIn && isInMiddle
    && c == ' ') isInMiddle = false;\n            else if (isIn && !isInMiddle &&
    c == ' ') isIn = false;\n            else if (isInMiddle && c == ' ') isInMiddle
    = false;\n            else if (isInEnd && c == ' ') isInEnd = false;\n            else
    if (isInEnd && !isInMiddle && c == ' ') isInEnd = false;\n            else if
    (c == '.') isInMiddle = false;\n            else if (c == '?') isInMiddle = false;\n
    \           else if (c == '!') isInMiddle = false;\n            else if (isIn
    && c == '.') isIn = true;\n            else if (isIn && c == '?') isIn = true;\n
    \           else if (isIn && c == '!') isIn = true;\n            else if (isInMiddle
    && c == '.') isInMiddle = true;\n            else if (isInMiddle && c == '?')
    isInMiddle = true;\n            else if (isInMiddle && c == '!') isInMiddle =
    true;\n            else if (isInEnd && c == '.') isInEnd = true;\n            else
    if (isInEnd && c == '?') isInEnd = true;\n            else if (isInEnd && c ==
    '!') isInEnd = true;\n            else if (c == 'I') isIn = true;\n            else
    if (c == 'i') isIn = true;\n            else if (c == '!') isIn = true;\n            else
    if (c == '.') isIn = true;\n            else if (c == '?') isIn = true;\n            else
    if (c == 'i') isIn = true;\n            else if (c == '!') isIn = true;\n            else
    if (c == '!') isIn = true;\n            else if (c == '.') isIn = true;\n            else
    if (c == '?') isIn = true;\n            else if (c == '!') isIn = true;\n            else
    ret++;\n            count++;\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd5e39d70a034708acab09e77427e323>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd5e39d70a034708acab09e77427e323>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string sArr = S.Split('.', '?', '!');\n
    \       List<string> sArrArr = new List<string>(sArr);\n        bool bTrue = true;\n
    \       long l = 0;\n        long i = 0;\n        for (int i1 = 0; i1 < sArrArr.Count;
    i1++) {\n            if (sArrArr[i1].StartsWith(\"I\", StringComparison.InvariantCultureIgnoreCase))
    {\n                bTrue = true;\n            }\n            else if (sArrArr[i1].StartsWith(\"is\",
    StringComparison.InvariantCultureIgnoreCase)) {\n                bTrue = false;\n
    \           }\n            else if (sArrArr[i1].StartsWith(\"was\", StringComparison.InvariantCultureIgnoreCase))
    {\n                bTrue = false;\n            }\n            else {\n                bTrue
    = true;\n            }\n            l++;\n            i += 1;\n        }\n        return
    l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9qfpdd6_.cs(18,23): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmp9qfpdd6_.cs(19,49): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp9qfpdd6_.cs(20,14): warning CS0219: The variable ''bTrue'' is assigned
    but its value is never used

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long[] array = new long[S.Length];\n
    \       int count = 0;\n        bool start = false;\n        foreach (char c in
    S) {\n            if (c == ' ')\n                start = true;\n            if
    (start) {\n                array[count] = Convert.ToInt64(c);\n                count++;\n
    \           }\n        }\n\n        for (int i = count - 1; i >= 0; i--) {\n            if
    (array[i] % 3 == 0) {\n                count = i;\n            }\n        }\n\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac370d29b49148ecb48d35515ad3504a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac370d29b49148ecb48d35515ad3504a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long ret = 0;\n        foreach (var word
    in S) {\n            switch (word) {\n                case \"I\":\n                    ret++;\n
    \                   break;\n                case \"?\":\n                    ret++;\n
    \                   break;\n                case \"!\":\n                    ret++;\n
    \                   break;\n                case \".\":\n                    ret++;\n
    \                   break;\n            }\n        }\n        return ret;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzyy4_vyd.cs(21,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpzyy4_vyd.cs(24,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpzyy4_vyd.cs(27,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpzyy4_vyd.cs(30,22): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // YOUR CODE HERE\n        var boredoms
    = string.Join(\" \", S.Where(s => s == \".\" || s == \"?\" || s == \"!\").ToArray()).ToList();\n
    \       return boredoms.Count(s => s == \"I\");\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo26eh7js.cs(19,54): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpo26eh7js.cs(19,66): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpo26eh7js.cs(19,78): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    /tmp/tmpo26eh7js.cs(20,36): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (S == null) return 0L;\n        string
    delimiters = \".?!\";\n        StringBuilder sb = new StringBuilder(S);\n        char
    ch;\n        long boredoms = 0;\n        int pos = 0;\n        bool nextDelim
    = false;\n        for (; pos < sb.Length; pos++) {\n            ch = sb[pos];\n
    \           if (delimiters.IndexOf(ch) >= 0)\n            {\n                if
    (nextDelim)\n                {\n                    nextDelim = false;\n                }\n
    \               else\n                {\n                    nextDelim = true;\n
    \                   boredoms += 1;\n                }\n            }\n            else\n
    \           {\n                nextDelim = false;\n            }\n        }\n
    \       return boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d2daa5f2be04b25b219310c09ee7e07>:0
    \n"
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        char[] chars
    = s.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n            if
    (chars[i] == 'I')\n                count++;\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpov_k3bbw.cs(19,24): error CS0103: The name ''s'' does not exist in the
    current context

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> lst = S.Split(',').ToList();\n
    \       Dictionary<string, long> Dic = new Dictionary<string, long>();\n        string
    boredoms = \"\";\n        foreach (string word in lst) {\n            if (word.Length
    > 0 && word[0] == 'I') {\n                if (!Dic.ContainsKey(word)) {\n                    boredoms
    = boredoms + word + \",\";\n                    Dic.Add(word, 1);\n                }
    else {\n                    Dic[word] = Dic[word] + 1;\n                }\n            }\n
    \       }\n        return Dic.Count();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28d548c8aa0a41ba92337c26bbcde136>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <28d548c8aa0a41ba92337c26bbcde136>:0
    \n"
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> Words = new List<string>(S.Split('.').ToList());\n
    \       List<string> IsBored = new List<string>();\n        foreach(string word
    in Words) {\n            if( word == \"I\" ) IsBored.Add(word);\n        }\n        return
    (long)IsBored.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0c603e2d2514c3faaef4d78066df532>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0c603e2d2514c3faaef4d78066df532>:0
    \n"
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        if (string.IsNullOrEmpty(S)) return 0L;\n\n
    \       char boredom = '.';\n        bool hasBoredom = false;\n\n        foreach(var
    word in S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries))
    {\n            boredom = boredom == '.' ? hasBoredom ? '!' : boredom : boredom;\n
    \           hasBoredom = hasBoredom || boredom == word[0];\n        }\n\n        return
    hasBoredom ? 1 : 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cde38856906f4de59925f9ef80a640cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cde38856906f4de59925f9ef80a640cf>:0
    \n"
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // The idea here is to count the number
    of times each sentence starts with \"I\"\n        // and return the sum of these
    counts.\n        long sum = 0;\n        foreach (var s in S.Split(new char[] {
    '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)) {\n            if (s.StartsWith(\"I\"))\n
    \               sum++;\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <961c259f8f0643039bf0d79256e38ae3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <961c259f8f0643039bf0d79256e38ae3>:0
    \n"
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        string P = S;\n        Dictionary<string,
    int> D = new Dictionary<string, int>();\n        int Count = 0;\n        string
    Word = null;\n        foreach (char Ch in P) {\n            if (Ch == '.' || Ch
    == '?' || Ch == '!') {\n                D.Add(Word, Count);\n                Count
    = 0;\n                Word = null;\n            }\n            else {\n                if
    (Word == null) {\n                    Word = Ch;\n                }\n                else
    {\n                    if (Ch == 'I') {\n                        Count++;\n                    }\n
    \                   else {\n                        Word = Ch;\n                    }\n
    \               }\n            }\n        }\n        return D.Sum(t => t.Value);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc2mf7jht.cs(30,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpc2mf7jht.cs(37,32): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        bool startsWithI = false;\n        long
    count = -1;\n        for (int i = 0; i < S.Length; i++) {\n            char c
    = S[i];\n            switch (c) {\n            case '?':\n            case '!':\n
    \               if (!startsWithI)\n                    startsWithI = true;\n                else\n
    \                   return count;\n            case '.':\n                if (startsWithI)\n
    \                   startsWithI = false;\n                else\n                    count++;\n
    \               break;\n            case 'I':\n                startsWithI = true;\n
    \               break;\n            }\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7adkpq58.cs(24,13): error CS0163: Control cannot fall through from one
    case label (''case ''!'':'') to another

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0;\n        S = S.Trim();\n
    \       foreach (char c in S) {\n            if (c == '.' || c == '?' || c ==
    '!') {\n                count += 1;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d312090126d64bee8fce2a98e6a33c0f>:0
    \n"
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        int i = 0;\n        foreach (string words
    in S.Split('.')) {\n            if (words[0] == \"I\") {\n                return
    ++i;\n            }\n        }\n        return 0;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4chcv1tc.cs(20,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // Return the number of boredoms in the
    sentence S.\n        long boredoms = 0;\n        var words = S.Split('.', '?',
    '!');\n        foreach (var word in words) {\n            if (word == \"I\") {\n
    \               boredoms++;\n            }\n        }\n        return boredoms;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd764b9e72b4a7d897e4f59345e0520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd764b9e72b4a7d897e4f59345e0520>:0
    \n"
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        bool isBored = false;\n        string
    sentence = S;\n        string word = string.Empty;\n        long count = 0;\n
    \       foreach (char c in sentence) {\n            if(c == '.' || c == '?' ||
    c == '!') {\n                isBored = true;\n                count++;\n            }\n
    \           if(c == 'I') {\n                isBored = true;\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2e02936cfc94bdc98a49d8352bc8e50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2e02936cfc94bdc98a49d8352bc8e50>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // The first word is the boredom word.\n
    \       string boredom = S.Split(new char[] { '.', '?' }).First().Trim();\n\n
    \       // The boredom word counts as 1, but is ignored,\n        // so the boredom
    word is ignored for boredom count purposes.\n        long boredomCount = 0;\n\n
    \       // The boredom word counts as 1, but is ignored,\n        // so the boredom
    word is ignored for boredom count purposes.\n        foreach (var item in S.Split(new
    char[] { '.', '?' })) {\n            if (item.Trim().StartsWith(boredom))\n                boredomCount++;\n
    \       }\n\n        // Return boredom word count.\n        return boredomCount;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63db1a49af834553b039ba8337ae7c7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63db1a49af834553b039ba8337ae7c7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        // YOUR CODE HERE\n        StringBuilder
    sb = new StringBuilder();\n        List<String> boredoms = new List<string>();\n
    \       foreach(string s in S.Split('.', '?', '!'))\n        {\n            if
    (s.StartsWith(\"I\"))\n            {\n                sb.Append(\"I\");\n                boredoms.Add(s);\n
    \           }\n        }\n        return sb.ToString().Count(f => f == \"I\");\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoqn6q_yb.cs(29,41): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        List<string> words = S.Split('.', '?',
    '!').ToList();\n        return words.Count(x => x.StartsWith(\"I\") == 1);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8u7kjov.cs(19,33): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''bool'' and ''int''

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long count = 0, startIndex = 0;\n        foreach
    (var s in S.Split(new char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries))
    {\n            startIndex = 0;\n            foreach (char c in s) {\n                if
    (c == 'I') {\n                    count++;\n                }\n                startIndex++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5700725655e0495b931c21557bb445b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5700725655e0495b931c21557bb445b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        Debug.Assert(S != null);\n        long
    ans = 0;\n        foreach (char c in S) {\n            if (c == '.' || c == '?'
    || c == '!') {\n                ans += 1;\n            }\n        }\n        return
    ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello
    world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n
    \   Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\"))
    == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.
    will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for
    a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <073d046bb05445ab9cc2df8164bbe7bf>:0
    \n"
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        long boredoms = 0;\n        foreach (string
    sentence in S) {\n            int pos = 0;\n            bool firstWord = true;\n
    \           bool endOfSentence = false;\n            while (!endOfSentence) {\n
    \               if (firstWord) {\n                    while (pos < sentence.Length
    && sentence[pos] != '?' && sentence[pos] != '!') {\n                        pos++;\n
    \                   }\n                    firstWord = false;\n                }
    else {\n                    while (pos < sentence.Length && sentence[pos] != '?'
    && sentence[pos] != '!') {\n                        pos++;\n                    }\n
    \                   if (pos < sentence.Length) {\n                        endOfSentence
    = true;\n                    }\n                }\n            }\n            if
    (endOfSentence) {\n                boredoms += 1;\n            }\n        }\n
    \       return boredoms;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1sms4zse.cs(19,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        return S.Length > 0 ? S.Select((c) =>
    (c == ' ' || c == '.' || c == '?' || c == '!') ? 0 : 1).Sum() : 0L;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\"))
    == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91a32de6925f497387a96dcaf2fc506f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91a32de6925f497387a96dcaf2fc506f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        return S.Length > 0 ? BoredomsCount(S,
    new HashSet<string>()) : 0L;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpou0moz2v.cs(18,31): error CS0103: The name ''BoredomsCount'' does not
    exist in the current context

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var words = S.Split('.', '?', '!');\n
    \       var count = 0;\n        foreach (var word in words) {\n            var
    firstLetter = word[0];\n            if (firstLetter == \"I\") {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n
    \   Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I
    love It !\")) == (1L));\n    Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I
    feel good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_xeb3xmr.cs(22,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You'll be given a string of words, and your task is to count
    the number\n    // of boredoms. A boredom is a sentence that starts with the word
    \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n
    \   // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The
    sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public
    static long IsBored(string S) {\n        var boredoms = new List<string>();\n
    \       foreach (string word in S.Split('.')) {\n            if (word[0] != 'I')\n
    \               boredoms.Add(word);\n        }\n        bool boredom = false;\n
    \       var count = boredoms.Count;\n        for (var x = 0; x < count; x++) {\n
    \           boredom = false;\n            for (var y = 0; y < count; y++) {\n
    \               if (boredoms.ElementAt(y) == boredoms.ElementAt(x)) {\n                    boredom
    = true;\n                }\n            }\n            if (boredom == false) count--;\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsBored((\"Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is
    the sky blue?\")) == (0L));\n    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n
    \   Debug.Assert(IsBored((\"bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel
    good today. I will be productive. will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You
    and I are going for a walk\")) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5affec9dce4142cc93ee1be74f14d1aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5affec9dce4142cc93ee1be74f14d1aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1660015922
