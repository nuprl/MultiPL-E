name: HumanEval_17_parse_music
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string representing musical notes\
  \ in a special ASCII format.\n    // Your task is to parse this string and return\
  \ list of integers corresponding to how many beats does each\n    // not last.\n\
  \    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
  \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    //\
  \ >>> ParseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)4L, (long)4L}))\n    public static List<long> ParseMusic(string\
  \ music_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseMusic((\"\
  \")).Equals((new List<long>())));\n    Debug.Assert(ParseMusic((\"o o o o\")).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"\
  .| .| .| .|\")).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L}))));\n    Debug.Assert(ParseMusic((\"o| o| .| .| o o o o\")).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L, (long)4L, (long)4L,\
  \ (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"o| .| o| .| o o| o o|\"\
  )).Equals((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)1L, (long)4L,\
  \ (long)2L, (long)4L, (long)2L}))));\n    }\n\n}\n"
completions: ["        List<long> beats_array = new List<long>();\n        if (music_string\
    \ == null || !music_string.Trim().Equals(\"\")) {\n            music_string =\
    \ \"o o| .| o| o| .| .| .| .| o o\";\n        }\n        List<char> music_chars\
    \ = music_string.ToCharArray();\n        List<int> music_chars_int = new List<int>();\n\
    \        for (int i = 0; i < music_chars.Count(); i++) {\n            if (music_chars[i]\
    \ == '.') {\n                music_chars_int.Add(1);\n            }\n        \
    \    if (music_chars[i] == 'o') {\n                music_chars_int.Add(4);\n \
    \           }\n            if (music_chars[i] == '|') {\n                music_chars_int.Add(2);\n\
    \            }\n        }\n        List<int> music_chars_double = new List<int>();\n\
    \        for (int i = 0; i < music_chars_int.Count(); i++) {\n            music_chars_double.Add(music_chars_int[i]\
    \ / 2);\n        }\n        List<long> music_chars_long = new List<long>();\n\
    \        for (int i = 0; i < music_chars_double.Count(); i++) {\n            music_chars_long.Add(music_chars_double[i]);\n\
    \        }\n        beats_array = music_chars_long;\n        return beats_array;",
  "        var music_list = music_string.Split('|').Select(c => char.ToUpperInvariant(c)).ToList();\n\
    \        var result = new List<long>();\n        int index = 0;\n        long\
    \ note_length = 0;\n        while (index < music_list.Count) {\n            var\
    \ current_character = music_list[index];\n            if (current_character ==\
    \ 'o') {\n                note_length++;\n                if (index == music_list.Count\
    \ - 1) {\n                    result.Add(note_length);\n                }\n  \
    \              index++;\n                continue;\n            }\n          \
    \  if (current_character == '.') {\n                var last_note_index = music_list.IndexOf('o',\
    \ index + 1);\n                if (last_note_index == -1) {\n                \
    \    throw new FormatException(\"Can't find 'o' after '.'.\");\n             \
    \   }\n                var last_note_length = music_list.Skip(last_note_index).TakeWhile(c\
    \ => c != '.').Count();\n                result.Add(last_note_length);\n     \
    \           index += last_note_length;\n                continue;\n          \
    \  }\n            if (current_character == '|') {\n                if (index ==\
    \ music_list.Count - 1) {\n                    throw new FormatException(\"Can't\
    \ find '|' after last note.\");\n                }\n                index++;\n\
    \                continue;\n            }\n            throw new FormatException(\"\
    Unexpected character '\" + current_character + \"' at index \" + index);\n   \
    \     }\n        if (result.Count != music_list.Count) {\n            throw new\
    \ FormatException(\"There are extra notes\");\n        }\n        return result;",
  "        Debug.Assert(music_string != null);\n        Debug.Assert(music_string.Length\
    \ > 0);\n        var music_list = music_string.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n\
    \        var music_list_int = new List<long>();\n        var music_beats_map =\
    \ new Dictionary<string, List<long>>();\n\n        foreach(string note in music_list)\
    \ {\n            List<long> beats = new List<long>();\n            var note_arr\
    \ = note.ToCharArray();\n            int count = 0;\n            foreach(char\
    \ c in note_arr) {\n                if(c == 'o') {\n                    beats.Add(count);\n\
    \                    count = 1;\n                } else if(c == 'o|') {\n    \
    \                beats.Add(count);\n                    count = count * 2;\n \
    \               } else if(c == '.|') {\n                    beats.Add(count);\n\
    \                    count = 1;\n                }\n            }\n          \
    \  music_list_int.Add(beats.Count);\n        }\n        var music_beats_map_sorted\
    \ = music_beats_map.OrderBy(x => x.Key).ToList();\n\n        return music_beats_map_sorted;",
  "        List<long> beats = new List<long>();\n        int note_len = -1;\n    \
    \    int cur_beat = 0;\n        for (char note in music_string) {\n          \
    \  if (note == '|') {\n                if (note_len == -1) {\n               \
    \     note_len = cur_beat;\n                } else {\n                    int\
    \ next_beat = cur_beat + note_len;\n                    beats.Add(note_len);\n\
    \                    note_len = -1;\n                    cur_beat = next_beat;\n\
    \                }\n            } else {\n                if (note_len == -1)\
    \ {\n                    note_len = cur_beat;\n                }\n           \
    \     beats.Add(note_len);\n                note_len = -1;\n            }\n  \
    \      }\n        return beats;", "        string notes = null;\n        music_string\
    \ = music_string.Replace(\" \", \"\");\n        music_string = music_string.Replace(\"\
    o|\", \"\");\n        music_string = music_string.Replace(\".|\", \"\");\n\n \
    \       List<string> note_names = new List<string>(music_string.Split(' '));\n\
    \n        List<long> beats = new List<long>();\n        foreach (string note_name\
    \ in note_names)\n        {\n            switch (note_name)\n            {\n \
    \               case \"o\":\n                    beats.Add((long)4);\n       \
    \             break;\n                case \"o|\":\n                    beats.Add((long)2);\n\
    \                    break;\n                case \".|\":\n                  \
    \  beats.Add((long)1);\n                    break;\n                default:\n\
    \                    beats.Add((long)4);\n                    break;\n       \
    \     }\n        }\n        return beats;", "        Debug.Assert(music_string\
    \ != null);\n        var music_array = music_string.TrimStart().ToCharArray();\n\
    \        var music_len = music_array.Length;\n        var music_ints = new List<long>();\n\
    \        var current_music_int = 0;\n        var music_last_beat = 0;\n      \
    \  // we must process whole note before we can process half note\n        foreach\
    \ (var music_element in music_array) {\n            switch (music_element) {\n\
    \                case 'o':\n                case 'O':\n                    music_ints.Add(music_last_beat\
    \ * 4);\n                    music_last_beat = 0;\n                    break;\n\
    \                case '|':\n                case '|':\n                    music_ints.Add(music_last_beat\
    \ * 2);\n                    music_last_beat = 0;\n                    break;\n\
    \                case '.':\n                case 'F':\n                    music_ints.Add(music_last_beat);\n\
    \                    music_last_beat = 0;\n                    break;\n      \
    \          default:\n                    Debug.Assert(false);\n            }\n\
    \            current_music_int++;\n            if (current_music_int >= music_len)\
    \ break;\n        }\n        return music_ints;", "        List<long> result =\
    \ new List<long>(music_string.Length);\n        var notes = music_string.Split(new[]\
    \ { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        for (int i = 0; i\
    \ < notes.Length; i++) {\n            var note = notes[i];\n            if (note\
    \ == \".\") {\n                result.Add(1);\n            } else if (note ==\
    \ \"o\") {\n                result.Add(0);\n            } else if (note == \"\
    o|\") {\n                result.Add(1);\n            }\n        }\n        return\
    \ result;", "        var notes = music_string.Split(' ');\n        var beats_per_note\
    \ = new List<long>();\n        foreach (var note in notes) {\n            if (note[0]\
    \ == '.') {\n                beats_per_note.Add(1L);\n            } else if (note[0]\
    \ == 'o') {\n                beats_per_note.Add(4L);\n            } else if (note[0]\
    \ == '|') {\n                beats_per_note.Add(2L);\n            } else {\n \
    \               throw new ArgumentException(\"Unknown note in string: \" + note);\n\
    \            }\n        }\n        return beats_per_note;", "        List<long>\
    \ beats = new List<long>();\n        music_string = music_string.Replace(\" \"\
    , String.Empty);\n        music_string = music_string.Replace(\"|\", String.Empty);\n\
    \        music_string = music_string.Replace(\"o\", String.Empty);\n        music_string\
    \ = music_string.Replace(\".\", String.Empty);\n        char[] charArray = music_string.ToCharArray();\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            char currentChar\
    \ = charArray[i];\n            switch (currentChar) {\n                case '|':\n\
    \                    beats.Add(2L);\n                    break;\n            \
    \    case '.':\n                    beats.Add(1L);\n                    break;\n\
    \                case 'o':\n                case 'O':\n                    beats.Add(4L);\n\
    \                    break;\n                default:\n                    Debug.WriteLine(\"\
    Invalid character: \" + (char)currentChar);\n                    break;\n    \
    \        }\n        }\n        return beats;", "        string temp_string = music_string;\n\
    \        List<long> result = new List<long>();\n        int first_note = 0;\n\
    \        int second_note = 0;\n        int third_note = 0;\n        int fifth_note\
    \ = 0;\n        int sixth_note = 0;\n        int seventh_note = 0;\n        while\
    \ (temp_string != null) {\n            int note = temp_string[0];\n          \
    \  if (note == 'o') {\n                result.Add(4L);\n                temp_string\
    \ = temp_string.Substring(1, temp_string.Length - 1);\n                continue;\n\
    \            } else if (note == '|') {\n                result.Add(2L);\n    \
    \            temp_string = temp_string.Substring(1, temp_string.Length - 1);\n\
    \                continue;\n            } else if (note == '.') {\n          \
    \      result.Add(1L);\n                temp_string = temp_string.Substring(1,\
    \ temp_string.Length - 1);\n                continue;\n            }\n       \
    \     if (temp_string == \"o\") {\n                result.Add(4L);\n         \
    \       continue;\n            } else if (temp_string == \"|\") {\n          \
    \      result.Add(2L);\n                continue;\n            } else if (temp_string\
    \ == \".\") {\n                result.Add(1L);\n                continue;\n  \
    \          }\n            temp_string = temp_string.Substring(1, temp_string.Length\
    \ - 1);\n        }\n        return result;", "        // Your code goes here\n\
    \        List<long> results = new List<long>();\n        // Use string.Split and\
    \ string.Replace\n        string music_string = music_string.Replace(\"o\", \"\
    |\").Replace(\".|\", \"|\").Replace(\"o|\", \"|\").Replace(\".|\", \"|\").Replace(\"\
    o o\", \"|\").Replace(\"o o|\", \"|\").Replace(\"o .|\", \"|\");\n        string[]\
    \ music_arr = music_string.Split(new string[] { \"|\" }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        string last_beat = music_arr[0];\n        string last_four_beats = last_beat.Substring(0,last_beat.Length\
    \ - 4);\n        results.Add(ParseMusic(last_four_beats));\n        return results.ToList();",
  "        List<long> notes_position = new List<long>();\n        bool notes_positions_is_empty\
    \ = true;\n        foreach(char symbol in music_string) {\n            if (symbol\
    \ == 'o' || symbol == '|') {\n                if (notes_positions_is_empty) {\n\
    \                    notes_position.Add((long)-1);\n                    notes_positions_is_empty\
    \ = false;\n                }\n                notes_position.Add((long)notes_position.Count);\n\
    \                notes_positions_is_empty = true;\n            } else if (symbol\
    \ == '.') {\n                if (notes_positions_is_empty) {\n               \
    \     notes_position.Add((long)-1);\n                    notes_positions_is_empty\
    \ = false;\n                }\n                notes_position.Add((long)notes_position.Count);\n\
    \                notes_positions_is_empty = true;\n            } else {\n    \
    \            notes_positions_is_empty = false;\n            }\n        }\n   \
    \     return notes_position;", "        // YOUR CODE HERE\n        return new\
    \ List<long>(music_string.SelectMany(x => {\n            switch (x) {\n      \
    \          case \"o\":\n                    return new long[] { 4L };\n      \
    \          case \"o|\":\n                    return new long[] { 2L };\n     \
    \           case \".|\":\n                    return new long[] { 1L };\n    \
    \            default:\n                    return new long[0];\n            }\n\
    \        }).ToArray());", "        var result = new List<long>();\n        //\
    \ First remove spaces\n        music_string = music_string.Replace(\" \", \"\"\
    );\n\n        // Create hash set\n        var hash = music_string.Aggregate(new\
    \ HashSet<long>(), (h, s) => h.Add(Convert.ToInt64(s)));\n\n        // Get total\
    \ count of notes\n        var total_notes = music.Count;\n\n        // Create\
    \ array of indices of notes in music_string\n        var notes = music_string.Select((c,\
    \ i) => new {\n            i = i,\n            c = c\n        }).ToArray();\n\n\
    \        long sum = 0;\n        // Parse notes\n        for (var note = 0; note\
    \ < notes.Length; note++) {\n            if (notes[note].c == '.') {\n       \
    \         // Parse quater note\n                sum += notes[note].c - '0';\n\
    \            } else if (notes[note].c == 'o') {\n                // Parse whole\
    \ note\n                sum += (total_notes - 1 - note);\n            } else {\n\
    \                // Parse half note\n                sum += note - notes[note].i\
    \ - 2;\n            }\n\n            // Add note to result list\n            result.Add(sum);\n\
    \        }\n        return result;", "        StringBuilder music_builder = new\
    \ StringBuilder();\n        foreach (char c in music_string) {\n            switch\
    \ (c) {\n                case 'o':\n                    music_builder.Append((byte)4L);\n\
    \                    break;\n                case 'o|':\n                    music_builder.Append((byte)2L);\n\
    \                    break;\n                case '.|':\n                    music_builder.Append((byte)1L);\n\
    \                    break;\n                default:\n                    throw\
    \ new Exception(\"Unexpected character\");\n            }\n        }\n       \
    \ byte[] music_data = music_builder.ToString().ToLower().Replace(\"o\", \"000\"\
    ).Replace(\"|\", \"00\").Replace(\".\", \"11\").ToArray();\n        HashSet<byte>\
    \ seen_notes = new HashSet<byte>();\n        HashSet<byte> seen_beats = new HashSet<byte>();\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < music_data.Length;\
    \ i++) {\n            if (music_data[i] == '0') {\n                // Note is\
    \ first byte in music_data. Calculate how many beats it lasts.\n             \
    \   byte last_note = music_data[i + 1];\n                bool is_first = true;\n\
    \                for (int j = i + 2; j < (music_data.Length - 2); j++) {\n   \
    \                 if (music_data[j] == '1') {\n                        if (is_first)\
    \ {\n                            seen_beats.Add(music_data[j + 1]);\n        \
    \                } else {\n                            seen_beats.Add(music_data[j\
    \ + 1]);\n                        }\n                        is_first = false;\n\
    \                    }\n                }\n                if (is_first) {\n \
    \                   result.Add((long)seen_beats.Count / 4);\n                }\
    \ else {\n                    result.Add((long)seen_beats.Count / 2);\n      \
    \          }\n                if (seen_notes.Contains(last_note)) {\n        \
    \            result.Add((long)seen_notes.Count / 4);\n                } else {\n\
    \                    result.Add((long)seen_notes.Count / 2);\n               \
    \ }\n                seen_notes.Remove(last_note);\n            } else {\n   \
    \             // We have already calculated the beats, and now need to see if\
    \ this note has been seen.\n                byte last_beat = music_data[i + 1];\n\
    \                byte last_note = music_data[i + 3];\n                if (seen_notes.Contains(last_note))\
    \ {\n                    if (seen_notes.Contains(last_beat)) {\n             \
    \           // If both notes are seen, it's two beats.\n                     \
    \   result.Add((long)seen_notes.Count / 2);\n                    } else if (seen_beats.Contains(last_beat))\
    \ {\n                        result.Add((long)seen_beats.Count / 2);\n       \
    \             } else {\n                        // If only note is seen, it's\
    \ a whole note.\n                        result.Add((long)seen_notes.Count);\n\
    \                    }\n                    seen_notes.Remove", "        int n\
    \ = music_string.Length;\n        List<long> result = new List<long>();\n    \
    \    for (int i = 0; i < n; i++) {\n            if (music_string[i] == 'o') {\n\
    \                result.Add(i * 4L);\n            }\n            else if (music_string[i]\
    \ == '.') {\n                result.Add(i * 2L);\n            }\n            else\
    \ if (music_string[i] == '|') {\n                result.Add(i * 1L);\n       \
    \     }\n            else if (music_string[i] == 'o|') {\n                result.Add(i\
    \ * 4L);\n                result.Add(i * 2L);\n            }\n            else\
    \ if (music_string[i] == '.|') {\n                result.Add(i * 1L);\n      \
    \          result.Add(i * 1L);\n            }\n            else {\n          \
    \      throw new ArgumentOutOfRangeException(\"Invalid Music String\");\n    \
    \        }\n        }\n        return result;", "        bool is_octave = false;\n\
    \        int prev_beat = 1;\n        int prev_beat_size = -1;\n        List<long>\
    \ beats = new List<long>();\n\n        if (music_string.StartsWith(\"o|\")) {\n\
    \            is_octave = true;\n            music_string = music_string.Remove(0,\
    \ 2);\n        }\n\n        foreach (char c in music_string) {\n            if\
    \ (c == ' ') {\n                // ignore whitespace characters\n            \
    \    continue;\n            }\n            if (c == 'o') {\n                if\
    \ (is_octave) {\n                    // whole note, lasts one beat\n         \
    \           beats.Add(prev_beat);\n                } else {\n                \
    \    // whole note, lasts four beats\n                    beats.Add(prev_beat\
    \ + prev_beat_size);\n                }\n                prev_beat_size = 1;\n\
    \            } else if (c == '|') {\n                prev_beat += prev_beat_size;\n\
    \            } else if (c == '.') {\n                if (is_octave) {\n      \
    \              // quater note, lasts one beat\n                    beats.Add(prev_beat);\n\
    \                } else {\n                    // half note, lasts two beats\n\
    \                    beats.Add(prev_beat + prev_beat_size);\n                }\n\
    \                prev_beat_size = 2;\n            } else {\n                prev_beat_size\
    \ = -1;\n            }\n        }\n\n        return beats;", "        var notes\
    \ = new List<long>(music_string.Split(' ').Select(x => Convert.ToInt32(x)));\n\
    \        notes.Sort();\n\n        notes.Remove(notes.First() - 1);\n\n       \
    \ var result = new List<long>();\n        foreach (var note in notes) {\n    \
    \        var lastNote = notes.FirstOrDefault(x => x <= note);\n            if\
    \ (lastNote == null || note != lastNote + 1) result.Add(note - lastNote);\n  \
    \      }\n\n        return result;", "        if (music_string.Length == 0) {\n\
    \            return new List<long>();\n        }\n        string music_string1\
    \ = music_string;\n        music_string1 = music_string1.Replace(\"o\", \"o|\"\
    );\n        music_string1 = music_string1.Replace(\".|\", \".\");\n        music_string1\
    \ = music_string1.Replace(\"o|o|o|o|o|o|o\", \"o|o|o|o|o|o|o|o\");\n        music_string1\
    \ = music_string1.Replace(\"o|o|o|o|o|o|o\", \"o|o|o|o|o|o|o|o\");\n        music_string1\
    \ = music_string1.Replace(\"o|o|o|o|o|o|o\", \"o|o|o|o|o|o|o|o\");\n        music_string1\
    \ = music_string1.Replace(\"o|o|o|o|o|o\", \"o|o|o|o|o|o|o\");\n        music_string1\
    \ = music_string1.Replace(\"o|o|o|o|o\", \"o|o|o|o|o|o\");\n        music_string1\
    \ = music_string1.Replace(\"o|o|o|o\", \"o|o|o|o\");\n        music_string1 =\
    \ music_string1.Replace(\"o|o|o\", \"o|o|o\");\n        music_string1 = music_string1.Replace(\"\
    o|o\", \"o|o\");\n        music_string1 = music_string1.Replace(\"o\", \"o|o\"\
    );\n        music_string1 = music_string1.Replace(\".|\", \"|\");\n        music_string1\
    \ = music_string1.Replace(\"|\", \"|\");\n        music_string1 = music_string1.Replace(\"\
    |o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o",
  "        List<long> ret = new List<long>();\n        Regex re = new Regex(@\"(\\\
    .|[^\\s]+)\");\n        MatchCollection matches = re.Matches(music_string);\n\
    \        foreach (Match match in matches) {\n            ret.Add(Convert.ToInt64(match.Value));\n\
    \        }\n        return ret;", "        var music_array = new List<long>();\n\
    \        music_array = music_string.Split('|').Select(s => s.ToCharArray()).ToList();\n\
    \        int i = 0;\n        int j = 0;\n        string music_array_string = music_array.Aggregate(\"\
    \", (acc, next) => {\n            int num_beats = (next == \"o\") ? 4 : (next\
    \ == \"o|\") ? 2 : 1;\n            int current_beat = i;\n            i += num_beats;\n\
    \            return acc + \"(\" + current_beat + \")\";\n        }) + music_array[j];\n\
    \        music_array_string = music_array_string.Replace(\".\", \"\");\n     \
    \   music_array_string = music_array_string.Replace(\"o\", \"\");\n        music_array_string\
    \ = music_array_string.Replace(\"o|\", \"\");\n        var music_array = music_array_string.Split('|').Select(s\
    \ => s.ToCharArray()).ToList();\n        int num_notes = music_array.Count;\n\
    \        int note_length = music_array[0].Length;\n        var beats_array = new\
    \ List<int>();\n        var beats_array_lengths = new List<int>();\n        var\
    \ notes_array = new List<string>();\n        var notes_array_lengths = new List<int>();\n\
    \        foreach (var note in music_array) {\n            beats_array.Add(i);\n\
    \            notes_array.Add(note);\n            beats_array_lengths.Add(note.Length);\n\
    \            notes_array_lengths.Add(beats_array[i].Length);\n            i +=\
    \ 1;\n        }\n        beats_array = beats_array.OrderByDescending(x => x).ToList();\n\
    \        beats_array_lengths = beats_array_lengths.OrderByDescending(x => x).ToList();\n\
    \        notes_array_lengths = notes_array_lengths.OrderByDescending(x => x).ToList();\n\
    \        var beats_list_lengths = new List<int>();\n        var notes_list_lengths\
    \ = new List<int>();\n        foreach (int length in beats_array_lengths) {\n\
    \            beats_list_lengths.Add(length);\n        }\n        foreach (int\
    \ length in notes_array_lengths) {\n            notes_list_lengths.Add(length);\n\
    \        }\n        var beats_list = new List<string>();\n        var notes_list\
    \ = new List<string>();\n        foreach (int length in beats_list_lengths) {\n\
    \            beats_list.Add(string.Join(\"\", Enumerable.Repeat(\"0\", length)));\n\
    \        }\n        foreach (int length in notes_list_lengths) {\n           \
    \ notes_list.Add(string.Join(\"\", Enumerable.Repeat(\"0\", length)));\n     \
    \   }\n        List<string> new_music_array = notes_list;\n", "        List<long>\
    \ beats = new List<long>();\n        string last_note = music_string[0];\n   \
    \     beats.Add(0);\n        beats.AddRange(ParseMusic(music_string.Substring(1,\
    \ music_string.Length - 1), beats, last_note));\n        return beats;", "   \
    \     List<long> results = new List<long>();\n        StringBuilder notes = new\
    \ StringBuilder();\n        bool notes_added = false;\n        bool note_last\
    \ = false;\n        bool note_in_note = false;\n        bool note_last_in_note\
    \ = false;\n        bool note_note_last_in_note = false;\n        foreach (char\
    \ c in music_string) {\n            bool note_added = false;\n            char\
    \ last_note = notes.Length > 0 ? notes[notes.Length - 1] : ' ';\n            switch\
    \ (c) {\n                case 'o':\n                    notes.Append('o');\n \
    \                   note_added = true;\n                    note_last = true;\n\
    \                    note_in_note = true;\n                    note_last_in_note\
    \ = true;\n                    note_note_last_in_note = true;\n              \
    \      break;\n                case 'o|':\n                    if (notes_added)\
    \ {\n                        notes.Append('|');\n                        note_added\
    \ = true;\n                    } else {\n                        notes.Append(c);\n\
    \                    }\n                    note_last = true;\n              \
    \      note_in_note = true;\n                    note_last_in_note = true;\n \
    \                   note_note_last_in_note = true;\n                    break;\n\
    \                case '|':\n                    notes.Append(c);\n           \
    \         note_added = true;\n                    note_last = true;\n        \
    \            note_in_note = true;\n                    note_last_in_note = true;\n\
    \                    note_note_last_in_note = true;\n                    break;\n\
    \                case '.':\n                    if (notes_added) {\n         \
    \               notes.Append('.');\n                        note_added = true;\n\
    \                    } else {\n                        notes.Append(c);\n    \
    \                }\n                    note_last = true;\n                  \
    \  note_in_note = true;\n                    note_last_in_note = true;\n     \
    \               note_note_last_in_note = true;\n                    break;\n \
    \               default:\n                    notes.Append(c);\n             \
    \       note_added = true;\n                    note_last = true;\n          \
    \          note_in_note = true;\n                    note_last_in_note = true;\n\
    \                    note_note_last_in_note = true;\n                    break;\n\
    \            }\n            if (note_added && !note_last) {\n                note_last\
    \ = true;\n                note_last_in_note = true;\n            }\n        \
    \    if (note_in_note) {\n                if (!note_last) {\n                \
    \    if (note_note_last_in_note) {\n                        note_last = false;\n\
    \                        note_note_last_in_note = false;\n                   \
    \ }\n                }\n                note_in_note = false;\n            }\n\
    \            if (note_last) {\n                if (note_added_in_note) {\n   \
    \                 note_added = false;\n                } else {\n            \
    \        results.Add(new long());\n                }\n                note_last\
    \ = false;\n                note_added_in_note = false;\n            }\n     \
    \       if (note_note_last_in_note) {\n                note_note_last_in_note\
    \ = false;\n            }\n            if (note_added_in_note) {\n           \
    \     note_added_in_note = false;\n            }\n        }\n        return results;",
  "        if (music_string.Length == 0) throw new ArgumentException(\"music_string\
    \ cannot be empty\");\n\n        var music_chars = music_string.ToCharArray();\n\
    \        var beats = new List<long>(music_chars.Length);\n\n        // Beats\n\
    \        var last_beat = -1;\n        for (var i = 0; i < music_chars.Length;\
    \ i++) {\n            var char = music_chars[i];\n            if (char == '.')\
    \ last_beat++;\n            else if (char == 'o') {\n                beats.Add(last_beat);\n\
    \                last_beat = -1;\n            }\n        }\n\n        // Rest\n\
    \        if (music_chars.Length > 0) beats.Add(last_beat);\n\n        return beats;",
  "        // Convert music string to ASCII representation\n        // and split on\
    \ space (ASCII 32)\n        var music_ascii = new List<char>();\n        for (int\
    \ i = 0; i < music_string.Length; i++) {\n            music_ascii.Add(Convert.ToInt32(music_string[i],\
    \ 16));\n        }\n        // Make array of ASCII codes\n        var music_asciidata\
    \ = new List<int>();\n        for (int i = 0; i < music_ascii.Count; i++) {\n\
    \            music_asciidata.Add(music_ascii[i]);\n        }\n        // Sort\
    \ alphabetically\n        music_asciidata.Sort();\n\n        // Iterate through\
    \ all notes\n        // Start with beat 0, add all notes until music string ends\n\
    \        // Get current beat and keep track of position in string\n        //\
    \ Add beat to current beat value\n        // Go to next note\n        var currentBeat\
    \ = 0;\n        var notes = new List<long>();\n        for (int i = 0; i < music_asciidata.Count;\
    \ i++) {\n            if (music_asciidata[i] != 32) {\n                notes.Add(currentBeat);\n\
    \                currentBeat = 0;\n            }\n            else {\n       \
    \         currentBeat++;\n            }\n        }\n        notes.Add(currentBeat);\n\
    \        return notes;", "        var music_list = music_string.Split(new char[]{'|',\
    \ '-'}).Select(t => t.Length > 0 ? t - '0' : (t - 'o').ToString()).ToArray();\n\
    \        var last_note = music_list[0];\n        var last_beat = -1;\n       \
    \ var results = new List<long>();\n        music_list.ToList().ForEach(s => {\n\
    \            if (s.Length == 0) {\n                return;\n            }\n  \
    \          if (last_note == s) {\n                last_beat++;\n            }\
    \ else {\n                if (last_beat >= 0) {\n                    results.Add(last_beat);\n\
    \                }\n                last_beat = 0;\n                last_note\
    \ = s;\n            }\n        });\n        if (last_beat >= 0) {\n          \
    \  results.Add(last_beat);\n        }\n        return results.ToList();", "  \
    \      // Your code goes here\n        return music_string.Split().Select(x =>\
    \ Convert.ToInt64(x)).ToList();", "        List<long> result = new List<long>(new\
    \ long[]{(long)0L});\n        char c = music_string[0];\n        music_string\
    \ = music_string.Substring(1); // removing note\n        music_string = music_string.Trim();\
    \ // removing whitespaces from both sides\n\n        int beats = 0;\n        switch\
    \ (c) {\n            case 'o': // whole note\n                result.Add((long)music_string.Length);\n\
    \                beats = music_string.Length / 4;\n                for (int i\
    \ = music_string.Length - 4; i <= music_string.Length; i++) {\n              \
    \      result.Add(beats);\n                }\n                break;\n       \
    \     case 'o|':\n                result.Add((long)music_string.Length / 2);\n\
    \                beats = music_string.Length / 4;\n                for (int i\
    \ = music_string.Length - 4; i <= music_string.Length; i++) {\n              \
    \      result.Add(beats);\n                }\n                break;\n       \
    \     case '.|':\n                result.Add((long)music_string.Length);\n   \
    \             beats = music_string.Length / 4;\n                for (int i = music_string.Length\
    \ - 4; i <= music_string.Length; i++) {\n                    result.Add(beats);\n\
    \                }\n                break;\n            case '.':\n          \
    \      result.Add((long)music_string.Length);\n                beats = music_string.Length\
    \ / 4;\n                for (int i = music_string.Length - 4; i <= music_string.Length;\
    \ i++) {\n                    result.Add(beats);\n                }\n        \
    \        break;\n            case ' ':\n                result.Add((long)music_string.Length);\n\
    \                beats = music_string.Length / 4;\n                for (int i\
    \ = music_string.Length - 4; i <= music_string.Length; i++) {\n              \
    \      result.Add(beats);\n                }\n                break;\n       \
    \     default:\n                break;\n        }\n        return result;", " \
    \       char[] chars = music_string.ToCharArray();\n        List<long> beats =\
    \ new List<long>(new long[chars.Length]);\n        int notes = 0;\n        int\
    \ last_notes = 0;\n        for (int i = 0; i < chars.Length; i++) {\n        \
    \    switch (chars[i]) {\n                case 'o':\n                    if (notes\
    \ == 0) {\n                        beats.Add(0L);\n                    } else\
    \ if (notes == 1) {\n                        beats.Add(4L);\n                \
    \    } else if (notes == 2) {\n                        beats.Add(2L);\n      \
    \              } else if (notes == 3) {\n                        beats.Add(1L);\n\
    \                    }\n                    last_notes = notes;\n            \
    \        notes = 0;\n                    break;\n                case '|':\n \
    \                   if (notes == 0) {\n                        beats.Add(0L);\n\
    \                    } else if (notes == 1) {\n                        beats.Add(2L);\n\
    \                    } else if (notes == 2) {\n                        beats.Add(1L);\n\
    \                    } else if (notes == 3) {\n                        beats.Add(1L);\n\
    \                    }\n                    last_notes = notes;\n            \
    \        notes = 0;\n                    break;\n                case '.':\n \
    \                   if (notes == 0) {\n                        beats.Add(0L);\n\
    \                    } else if (notes == 1) {\n                        beats.Add(1L);\n\
    \                    } else if (notes == 2) {\n                        beats.Add(2L);\n\
    \                    } else if (notes == 3) {\n                        beats.Add(2L);\n\
    \                    }\n                    last_notes = notes;\n            \
    \        notes = 0;\n                    break;\n                default:\n  \
    \                  notes++;\n                    break;\n            }\n     \
    \   }\n        beats.Add((long)(last_notes == 0 ? 4L : last_notes * 4L));\n  \
    \      return beats;", "        music_string = music_string.Trim();\n        var\
    \ beat_count = music_string.Count(x => x == 'o');\n        var beats = beat_count\
    \ / 4;\n        if (music_string.Contains(\"o|\"))\n            beats = beats\
    \ / 2;\n        else if (music_string.Contains(\".|\"))\n            beats = beats;\n\
    \        var result = new List<long>(new long[] { beats });\n        return result;",
  "        var result = new List<long>();\n        // TODO: Use regular expressions\
    \ to split string into tokens\n        var tokens = music_string.Split(' ');\n\
    \        var notes_count = tokens.Length;\n        // TODO: Count each note and\
    \ add to result list\n        return result;", "        List<long> output = new\
    \ List<long>();\n        bool note_was_last = false;\n        string note = null;\n\
    \        long beats = 0;\n        int index = 0;\n        do {\n            if\
    \ (index < music_string.Length) {\n                note = music_string[index];\n\
    \                if (note == '.') {\n                    note_was_last = true;\n\
    \                    beats = 0;\n                } else if (note == '|') {\n \
    \                   if (note_was_last) {\n                        note = null;\n\
    \                        output.Add(beats);\n                        beats = 0;\n\
    \                        note_was_last = false;\n                    } else {\n\
    \                        note_was_last = false;\n                        beats\
    \ = 0;\n                    }\n                } else if (note == 'o') {\n   \
    \                 note_was_last = false;\n                    beats = 4;\n   \
    \             } else {\n                    throw new Exception(\"Invalid note\
    \ symbol in string: \" + note);\n                }\n                index++;\n\
    \            } else {\n                throw new Exception(\"String is shorter\
    \ than specified length\");\n            }\n        } while (index < music_string.Length);\n\
    \        return output;", "        var beats = new List<long>();\n\n        //\
    \ Use Linq\n        foreach (var line in music_string.Split(new[] { \"|\" }, StringSplitOptions.RemoveEmptyEntries))\
    \ {\n            var note = line.Split(new[] { \"o\" }, StringSplitOptions.RemoveEmptyEntries)[0];\n\
    \            var beat = line.Split('o')[1];\n\n            // Do we have proper\
    \ length? No empty string should be present here\n            if (note.Length\
    \ > 0 && beat.Length > 0)\n            {\n                beats.Add(Convert.ToInt64(beat));\n\
    \            }\n        }\n\n        // Remove duplicates\n        beats = new\
    \ HashSet<long>(beats);\n\n        // Convert list to ArrayList for better performance\n\
    \        return beats.ToArray();", "        List<long> list = new List<long>();\n\
    \        bool has_star = false;\n        bool is_quarter = false;\n        for\
    \ (int i = 0; i < music_string.Length; i++) {\n            char c = music_string[i];\n\
    \            string next_char = c.ToString();\n            if (c == 'o') {\n \
    \               list.Add(1L);\n                if (i + 1 < music_string.Length\
    \ && music_string[i + 1] == '|') {\n                    list.Add(2L);\n      \
    \              has_star = true;\n                }\n            } else if (c ==\
    \ '.') {\n                if (has_star) {\n                    list.Add(1L);\n\
    \                    has_star = false;\n                }\n            } else\
    \ if (c == 'o|') {\n                if (is_quarter) {\n                    list.Add(2L);\n\
    \                } else {\n                    list.Add(1L);\n               \
    \ }\n                is_quarter = !is_quarter;\n            } else if (c == '|')\
    \ {\n                if (i + 1 < music_string.Length && music_string[i + 1] ==\
    \ '|') {\n                    list.Add(2L);\n                }\n            }\n\
    \        }\n        return list;", "        // Implement this function\n     \
    \   // Write your logic here\n        long temp = 0;\n        List<long> notes\
    \ = new List<long>();\n        foreach(char c in music_string) {\n           \
    \ if(c == 'o'){\n                temp = temp + 4;\n                notes.Add(temp);\n\
    \                temp = 0;\n            }\n            else if(c == '|'){\n  \
    \              temp = temp + 2;\n                notes.Add(temp);\n          \
    \      temp = 0;\n            }\n            else if(c == '.'){\n            \
    \    temp = temp + 1;\n                notes.Add(temp);\n                temp\
    \ = 0;\n            }\n        }\n        return notes;", "        var music_list\
    \ = music_string.Trim().ToCharArray().ToList();\n        List<long> parsed_music\
    \ = new List<long>();\n        long last_beat = 0;\n        // Scan all notes\n\
    \        for(int i = 0; i < music_list.Count; i++) {\n            var ch = music_list[i];\n\
    \            if(ch == '.') {\n                last_beat = 0;\n            } else\
    \ if(ch == 'o') {\n                last_beat = 4;\n            } else if(ch ==\
    \ '|') {\n                last_beat = 2;\n            } else {\n             \
    \   var note_number = ch - '0';\n                var beats = Math.Max(Math.Floor((float)((float)note_number\
    \ / 4)), 1);\n                parsed_music.Add(beats * last_beat);\n         \
    \       last_beat = beats;\n            }\n        }\n        return parsed_music;",
  "        StringBuilder builder = new StringBuilder();\n        string previous_char\
    \ = \".\";\n        foreach (char c in music_string) {\n            switch (c)\
    \ {\n                case 'o':\n                case '|':\n                  \
    \  builder.Append(c);\n                    previous_char = c;\n              \
    \      break;\n                case '.':\n                    if (previous_char\
    \ == '.') {\n                        break;\n                    }\n         \
    \           builder.Append(c);\n                    previous_char = c;\n     \
    \               break;\n                default:\n                    builder.Append(c);\n\
    \                    break;\n            }\n        }\n        Debug.WriteLine(builder);\n\
    \        int[] beats = new int[128];\n        for (int i = 0; i < 128; i++) {\n\
    \            int num = Convert.ToInt32(music_string.Substring(i));\n         \
    \   beats[i] = num;\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 127; i >= 0; i--) {\n            result.Add(beats[i]);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \n        // Parse string and store it in string array of length 9\n        string[]\
    \ music_array = music_string.Split(' ');\n\n        foreach (string note in music_array)\
    \ {\n            string[] note_name = note.Split('|');\n            long note_length\
    \ = int.Parse(note_name[0]);\n            long note_quantity = int.Parse(note_name[1]);\n\
    \            long beats = note_length * note_quantity;\n\n            result.Add(beats);\n\
    \        }\n\n        return result;", "        List<long> result = new List<long>();\n\
    \        char[] music = music_string.ToCharArray();\n        int last = 0;\n \
    \       char last_char = music[0];\n        int current_char = 0;\n        bool\
    \ has_changed = false;\n        bool is_last_note = false;\n        for (int i\
    \ = 1; i < music.Length; i++) {\n            current_char = music[i];\n      \
    \      if (current_char != last_char) {\n                last = i + 1;\n     \
    \           is_last_note = true;\n                has_changed = true;\n      \
    \      }\n            else {\n                if (is_last_note) {\n          \
    \          is_last_note = false;\n                    result.Add((long)last -\
    \ current);\n                }\n            }\n            last_char = current_char;\n\
    \        }\n        if (has_changed) {\n            result.Add((long)last - current);\n\
    \        }\n        return result;", "        // Your code here\n        List<long>\
    \ results = new List<long>(new long[]{0,0,0,0,0,0,0,0};\n\n        Regex regex\
    \ = new Regex(\"o|\\\\.|o\");\n        MatchCollection matches = regex.Matches(music_string);\n\
    \        foreach (Match match in matches) {\n            results.Add(long.Parse(match.Value.Substring(1))\
    \ / 4);\n        }\n        return results;", "        List<long> notes = new\
    \ List<long>();\n        string note = \"\";\n        bool flag = false;\n   \
    \     foreach (char c in music_string) {\n            if (c == 'o') {\n      \
    \          if (!flag) {\n                    note = note + \"o\";\n          \
    \          notes.Add(new long[] { Convert.ToInt64(note.TrimEnd(\"o\")) });\n \
    \                   note = \"\";\n                    flag = true;\n         \
    \       } else if (flag) {\n                    note = note + \"o|\";\n      \
    \              notes.Add(new long[] { Convert.ToInt64(note.TrimEnd(\"o|\")) });\n\
    \                    note = \"\";\n                    flag = false;\n       \
    \         }\n            }\n            if (c == '.') {\n                if (!flag)\
    \ {\n                    note = note + \".\";\n                    notes.Add(new\
    \ long[] { Convert.ToInt64(note.TrimEnd(\".\"))});\n                    note =\
    \ \"\";\n                    flag = true;\n                } else if (flag) {\n\
    \                    note = note + \"|\";\n                    notes.Add(new long[]\
    \ { Convert.ToInt64(note.TrimEnd(\"|\")) });\n                    note = \"\"\
    ;\n                    flag = false;\n                }\n            }\n     \
    \   }\n        if (note != \"\") {\n            notes.Add(new long[] { Convert.ToInt64(note.TrimEnd(\"\
    o|\")) });\n            notes.Add(new long[] { Convert.ToInt64(note.TrimEnd(\"\
    .|\")) });\n        }\n        return notes;", "        // Initialize your variables\
    \ here\n        List<long> result = new List<long>();\n        StringBuilder music_builder\
    \ = new StringBuilder();\n        string note = \"\";\n        string current_note\
    \ = \"\";\n        string last_note = \"\";\n        long beats = 0;\n       \
    \ long last_beats = 0;\n        bool last_is_half = false;\n        bool last_is_quarter\
    \ = false;\n\n        foreach (char c in music_string) {\n            if (c ==\
    \ 'o' || c == 'O') {\n                // whole note\n                note = note.ToUpper();\n\
    \            } else if (c == 'o|' || c == '|') {\n                // half note\n\
    \                note = note.ToUpper();\n                last_is_half = true;\n\
    \            } else if (c == '.|' || c == '|') {\n                // quater note\n\
    \                note = note.ToUpper();\n                last_is_quarter = true;\n\
    \            } else {\n                // just add this character to the note\n\
    \                note = note + c.ToString();\n            }\n        }\n\n   \
    \     note = note.ToUpper();\n\n        int length = note.Length;\n        char\
    \ last_char;\n        int last_length;\n\n        for (int i = 0; i < length;\
    \ ++i) {\n            char c = note[i];\n\n            if (c == 'o' || c == 'O')\
    \ {\n                // whole note\n                last_char = 'o';\n       \
    \         last_length = 1;\n            } else if (c == 'o|' || c == '|') {\n\
    \                // half note\n                last_char = 'o';\n            \
    \    last_length = 2;\n            } else if (c == '.|' || c == '|') {\n     \
    \           // quater note\n                last_char = '.';\n               \
    \ last_length = 1;\n            } else {\n                // just add this character\
    \ to the note\n                last_char = c;\n                last_length = 1;\n\
    \            }\n\n            if (i == 0) {\n                // initialize empty\
    \ note list\n                music_builder.Append(c);\n            } else {\n\
    \                // add last char length to note length and add it\n         \
    \       music_builder.Append(c).Append(last_length);\n            }\n        }\n\
    \n        music_builder.Remove(music_builder.Length - last_length, last_length);\n\
    \        music_builder.Append(note);\n\n        // parse the music to find last\
    \ beats\n        for (int i = 0; i < music_builder.Length - 1; ++i) {\n      \
    \      char c = music_builder[i];\n\n            if (c == 'o' || c == 'O') {\n\
    \                // whole note\n                if (i == music_builder.Length\
    \ - 2) {\n                    // last two beats, last is last char\n         \
    \           last_beats = last_char == 'o' ? 4 : 2;\n                } else {\n\
    \                    // last beat, last is not last char\n                   \
    \ last_beats = 1;\n                }\n            } else if (c == 'o|' || c ==\
    \ '|') {\n                // half note\n                last_beats = ", "    \
    \    List<long> beats = new List<long>();\n\n        // Initialize all variables\
    \ to zero\n        int note_len = 0;\n        int note_char = 0;\n        long\
    \ beat = 0;\n        bool is_odd_note = false;\n\n        // Count number of notes\n\
    \        while (note_char < music_string.Length) {\n            // If next character\
    \ is '.'\n            if (music_string[note_char + 1] == '.') {\n            \
    \    // If note is odd length\n                if (note_len % 2 != 0) {\n    \
    \                // Set beat count to zero\n                    beat = 0;\n  \
    \                  is_odd_note = true;\n                }\n\n                //\
    \ Otherwise if note is even length\n                else {\n                 \
    \   // Set beat count to one\n                    beat = 1;\n                \
    \    is_odd_note = false;\n                }\n            }\n\n            //\
    \ Otherwise if next character is 'o'\n            else if (music_string[note_char\
    \ + 1] == 'o') {\n                // If note is odd length\n                if\
    \ (note_len % 2 != 0) {\n                    // Set beat count to zero\n     \
    \               beat = 0;\n                    is_odd_note = true;\n         \
    \       }\n\n                // Otherwise if note is even length\n           \
    \     else {\n                    // Set beat count to one\n                 \
    \   beat = 1;\n                    is_odd_note = false;\n                }\n \
    \           }\n\n            // Otherwise if next character is '|', then note\
    \ is not last and beat is set to zero\n            else if (music_string[note_char\
    \ + 1] == '|') {\n                // If note is odd length\n                if\
    \ (note_len % 2 != 0) {\n                    // Set beat count to zero\n     \
    \               beat = 0;\n                    is_odd_note = true;\n         \
    \       }\n\n                // Otherwise if note is even length\n           \
    \     else {\n                    // Set beat count to one\n                 \
    \   beat = 1;\n                    is_odd_note = false;\n                }\n \
    \           }\n\n            // Otherwise if next character is ' '\n         \
    \   else if (music_string[note_char + 1] == ' ') {\n                // If note\
    \ is odd length\n                if (note_len % 2 != 0) {\n                  \
    \  // Set beat count to zero\n                    beat = 0;\n                \
    \    is_odd_note = true;\n                }\n\n                // Otherwise if\
    \ note is even length\n                else {\n                    // Set beat\
    \ count to one\n                    beat = 1;\n                    is_odd_note\
    \ = false;\n                }\n            }\n\n            // Otherwise if next\
    \ character is end of input\n            else if (music_string[note_char + 1]\
    \ == '>') {\n                // If note is odd length\n                if (note_len\
    \ % 2 != 0) {\n                    // Set beat count to zero\n               \
    \     beat = 0;\n                    is_odd_note = true;\n                }\n\n\
    \                // Otherwise if note is even length\n                else {\n\
    \                    // Add note length to beat list\n                    ", " \
    \       string pattern = \"o|.|o|.|.|.|.|.|o\";\n        Regex regex = new Regex(pattern,\
    \ RegexOptions.IgnoreCase);\n        MatchCollection matches = regex.Matches(music_string);\n\
    \n        List<long> beats = new List<long>();\n        long beat;\n        for\
    \ (int i = 0; i < matches.Count; i++) {\n            beat = Long.Parse(matches[i].Value);\n\
    \            if (i % 4 == 0) {\n                beat += 4L;\n            }\n \
    \           beats.Add(beat);\n        }\n\n        return beats;", "        List<long>\
    \ beats = new List<long>();\n        if (music_string.Length <= 0) return beats;\n\
    \        music_string = music_string.Replace(\" \", \"\");\n        for (int i\
    \ = 0; i < music_string.Length; i++) {\n            switch (music_string[i]) {\n\
    \                case 'o':\n                case 'o|':\n                case '.|':\n\
    \                    beats.Add((long)4);\n                    break;\n       \
    \         case ' ':\n                case '|':\n                    beats.Add((long)2);\n\
    \                    break;\n                case '.':\n                case '\
    \ ':\n                    beats.Add((long)1);\n                    break;\n  \
    \              default:\n                    return beats;\n            }\n  \
    \      }\n        return beats;", "        // Your implementation here\n     \
    \   var results = new List<long>();\n        var index = 0;\n        while (index\
    \ < music_string.Length) {\n            var beats = music_string[index++] == '.'\
    \ ? 4L : 2L;\n            if (music_string[index] == 'o') {\n                results.Add((long)beats);\n\
    \                index++;\n                continue;\n            }\n        \
    \    var note_chars = music_string[index++];\n            var note_number = Convert.ToInt32(note_chars,\
    \ 16);\n            if (note_number < 26) {\n                results[note_number\
    \ - 1] += beats;\n            }\n            else if (note_number == 26) {\n \
    \               results[25] += beats;\n            }\n            else if (note_number\
    \ == 27) {\n                results[24] += beats;\n            }\n           \
    \ else {\n                var octave = Convert.ToInt32(music_string[index++],\
    \ 16);\n                var denominator = octave < 3 ? 3 : 5;\n              \
    \  var numerator = note_number % denominator;\n                results[numerator\
    \ - denominator] += beats;\n            }\n        }\n        return results;",
  "        char[] notes = music_string.ToCharArray();\n        List<long> beats =\
    \ new List<long>();\n        HashSet<char> used_notes = new HashSet<char>();\n\
    \n        // Initialize count for each note.\n        // We use this array to\
    \ reduce O(n*m) algorithm from O(n^2) to O(n).\n        int[] note_count = new\
    \ int[notes.Length];\n\n        // Initialize accumulator for each note.\n   \
    \     // We use this array to reduce O(n*m) algorithm from O(n^2m) to O(nm).\n\
    \        long[] accum_notes = new long[notes.Length];\n\n        bool next_note\
    \ = false;\n        char note = notes[0];\n        note_count[0] = 0;\n      \
    \  accum_notes[0] = 1;\n        next_note = true;\n\n        for(int i = 1; i\
    \ < notes.Length; i++) {\n            char next_note = notes[i];\n\n         \
    \   // If this note was already used, skip it.\n            if(used_notes.Contains(next_note))\
    \ {\n                next_note = false;\n            }\n\n            // If this\
    \ note isn't already used, use it as is.\n            else {\n               \
    \ used_notes.Add(next_note);\n                note_count[i]++;\n            }\n\
    \n            // If we encountered new note, add it to beats list and start accumulation.\n\
    \            if(next_note) {\n                beats.Add(accum_notes[i]);\n   \
    \             accum_notes[i] = accum_notes[i] * 2;\n                next_note\
    \ = false;\n            }\n        }\n\n        return beats;", "        // TODO:\n\
    \        // You will need to parse the input string and generate a list of integers\n\
    \        // representing the musical notes used in the input string. Those integers\n\
    \        // represent how many beats does each note last.\n        // If you could\
    \ provide an example of what this string could look like\n        // please do.\
    \ For example, if the input string was \"o o| .| o| o| .| .| .| .| o o\",\n  \
    \      // and the output was (long)4L, (long)2L, (long)1L, (long)2L, (long)2L,\
    \ (long)1L, (long)1L, (long)1L, (long)1L, (long)4L, (long)4L\n        // then\
    \ this string was used as an example to test your solution.\n\n        List<long>\
    \ music_notes = new List<long>();\n        // TODO: Complete the code here\n \
    \       music_notes.Add((long)4);\n        music_notes.Add((long)2);\n       \
    \ music_notes.Add((long)1);\n        music_notes.Add((long)2);\n        music_notes.Add((long)2);\n\
    \        music_notes.Add((long)1);\n        music_notes.Add((long)1);\n      \
    \  music_notes.Add((long)1);\n        music_notes.Add((long)4);\n        return\
    \ music_notes;", "        int beats = 0, current_beat = 0;\n        List<long>\
    \ music_beats = new List<long>();\n        string notes = music_string.Trim();\n\
    \        notes = notes.Replace('.', ',');\n        notes = notes.Replace(',',\
    \ '|');\n        notes = notes.Replace('.', 'o');\n        foreach (char note\
    \ in notes) {\n            if (note == 'o' || note == '|' || note == ',') {\n\
    \                music_beats.Add(beats);\n                current_beat = 0;\n\
    \            }\n            else if (note == '.') {\n                if (current_beat\
    \ > 0) music_beats.Add(beats);\n                current_beat += 1;\n         \
    \   }\n            else {\n                current_beat += 1;\n            }\n\
    \            beats += 1;\n        }\n        if (music_beats.Count > 0) music_beats.Add(beats);\n\
    \        return music_beats;", "        var beats = new List<long>();\n      \
    \  var beat_count = 0;\n        string last_note = \"\";\n        int music_index\
    \ = 0;\n        for (int i = 0; i < music_string.Length; i++) {\n            char\
    \ current_note = music_string[i];\n            if (current_note == 'o') {\n  \
    \              beat_count += 4; // whole note, lasts four beats\n            \
    \    beat_count = Math.Max(beat_count, 1); // make sure we won't return 0 if the\
    \ last note has only one beat.\n            }\n            else if (current_note\
    \ == 'o|') {\n                beat_count += 2; // half note, lasts two beats\n\
    \                beat_count = Math.Max(beat_count, 1); // make sure we won't return\
    \ 0 if the last note has only one beat.\n            }\n            else if (current_note\
    \ == '.|') { // quater note, lasts one beat\n                beat_count++; //\
    \ quater note, lasts one beat\n            }\n            else {\n           \
    \     // something wrong\n                Debug.WriteLine(\"Problem with string:\
    \ \" + music_string);\n                throw new ArgumentOutOfRangeException(nameof(music_string),\
    \ music_string, $\"Couldn't parse string {music_string}\");\n            }\n \
    \           if (last_note != current_note) {\n                // if we see a new\
    \ note\n                if (last_note != \"\")\n                    beats.Add(beat_count);\n\
    \                beat_count = 0; // reset the beat count\n                last_note\
    \ = current_note;\n            }\n        }\n        return beats;", "       \
    \ var notes = new List<long>();\n        music_string = music_string.Trim();\n\
    \        if (music_string.Length != 0) {\n            notes.Add((music_string[0]\
    \ == 'o' ? 4 : (music_string[0] == 'o' ? 2 : 1)));\n            for (int i = 0;\
    \ i < music_string.Length - 4; i = i + 2) {\n                var part = music_string.Substring(i,\
    \ 4);\n                notes.Add((part[0] == 'o' ? 4 : (part[0] == 'o' ? 2 : 1)));\n\
    \            }\n        }\n        return notes;", "        List<long> beats =\
    \ new List<long>();\n        music_string = music_string.Trim();\n        if (music_string.Length\
    \ % 2 != 0) {\n            throw new ArgumentException(\"Invalid music string\"\
    );\n        }\n        int note_number = music_string.Length / 2;\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < note_number; i++) {\n\
    \            char c = music_string[i];\n            char next_c = music_string[i\
    \ + 1];\n            long beat = 0;\n            switch (c) {\n            case\
    \ 'o':\n                beat = Convert.ToInt64(next_c);\n                for (int\
    \ j = 0; j < beat; j++) {\n                    beats.Add(beat);\n            \
    \    }\n                break;\n            case '|':\n                beat =\
    \ Convert.ToInt64(next_c);\n                for (int j = 0; j < beat; j++) {\n\
    \                    beats.Add(beat);\n                }\n                break;\n\
    \            case '.':\n                beat = Convert.ToInt64(next_c);\n    \
    \            for (int j = 0; j < beat; j++) {\n                    beats.Add(beat);\n\
    \                }\n                break;\n            }\n            if (c !=\
    \ next_c) {\n                sb.Append(c);\n            }\n        }\n       \
    \ music_string = sb.ToString();\n        return beats;", "        List<long> beats\
    \ = new List<long>();\n        var s = music_string;\n        // Use this code\
    \ to add beats\n        return beats;", "        // Convert music string to list\
    \ of notes (o,o|,|)\n        var notes = new List<Note>();\n        var notes_split\
    \ = music_string.Split('|');\n        foreach (var note in notes_split) {\n  \
    \          var note_split = note.Split('o');\n            notes.Add(new Note(note_split[0],\
    \ note_split[1]));\n        }\n        // Count number of beats according to notes\n\
    \        var beats = new List<long>();\n        foreach (var note in notes) {\n\
    \            beats.Add(note.LastBeat);\n        }\n        // Return the list\
    \ of beats\n        return beats;", "        List<long> beats = new List<long>();\n\
    \        music_string = music_string.Trim();\n        if (music_string == \"\"\
    )\n            return beats;\n        if (music_string.Length > 0 && music_string[0]\
    \ == '.') {\n            long last_beats = 0;\n            string note = music_string.Substring(1);\n\
    \            beats.Add((long)4);\n            beats.Add((long)2);\n          \
    \  beats.Add((long)1);\n            beats.Add((long)2);\n            beats.Add((long)2);\n\
    \            beats.Add((long)1);\n            beats.Add((long)1);\n          \
    \  beats.Add((long)1);\n            beats.Add((long)4);\n            beats.Add((long)4);\n\
    \            return beats;\n        }\n        if (music_string.Length > 1 &&\
    \ music_string[0] == 'o') {\n            long last_beats = 0;\n            string\
    \ note = music_string.Substring(1);\n            if (note.Length == 1)\n     \
    \           last_beats = 4L;\n            else if (note.Length == 2)\n       \
    \         last_beats = 2L;\n            else if (note.Length == 3)\n         \
    \       last_beats = 1L;\n            else if (note.Length == 4)\n           \
    \     last_beats = 2L;\n            else if (note.Length == 5)\n             \
    \   last_beats = 2L;\n            else if (note.Length == 6)\n               \
    \ last_beats = 2L;\n            else if (note.Length == 7)\n                last_beats\
    \ = 2L;\n            else if (note.Length == 8)\n                last_beats =\
    \ 1L;\n            beats.Add((long)last_beats);\n            return beats;\n \
    \       }\n        long first_beats = 4L;\n        string first_note = music_string;\n\
    \        if (first_note.Length == 1)\n            first_beats = 4L;\n        else\
    \ if (first_note.Length == 2)\n            first_beats = 2L;\n        else if\
    \ (first_note.Length == 3)\n            first_beats = 1L;\n        else if (first_note.Length\
    \ == 4)\n            first_beats = 2L;\n        else if (first_note.Length ==\
    \ 5)\n            first_beats = 2L;\n        else if (first_note.Length == 6)\n\
    \            first_beats = 2L;\n        else if (first_note.Length == 7)\n   \
    \         first_beats = 2L;\n        else if (first_note.Length == 8)\n      \
    \      first_beats = 1L;\n        string last_note = music_string;\n        if\
    \ (last_note.Length > 1 && last_note[0] == '.') {\n            long last_beats\
    \ = 4L;\n            string note = last_note.Substring(1);\n            if (note.Length\
    \ == ", "        if (music_string == null || music_string.Length == 0) {\n   \
    \         return new List<long>();\n        }\n\n        // This string represents\
    \ note frequencies of four kinds:\n        // 'o' means whole note, lasts four\
    \ beats\n        // 'o|' means half note, lasts two beats\n        // '.|' means\
    \ quater note, lasts one beat\n        // All other notes have a frequency of\
    \ zero and will be ignored here.\n        // The input string can have arbitrary\
    \ number of occurrences of any of these symbols.\n        char[] symbols = { 'o',\
    \ 'o|', '.|' };\n\n        List<long> note_durations = new List<long>();\n   \
    \     List<long> note_durations_last = new List<long>();\n        List<long> frequencies\
    \ = new List<long>();\n        List<long> frequencies_last = new List<long>();\n\
    \        int counter_of_notes_in_string = 0;\n\n        // Iterate over music_string\
    \ and save every note and its frequency to the frequencies list.\n        foreach\
    \ (char symbol in symbols) {\n            bool symbol_found = false;\n       \
    \     for (int i = 0; i < music_string.Length && !symbol_found; i++) {\n     \
    \           if (music_string[i] == symbol) {\n                    frequencies[counter_of_notes_in_string]\
    \ = frequencies[counter_of_notes_in_string] | ((long)(Math.Pow(2, i * 4)));\n\
    \                    counter_of_notes_in_string++;\n                    symbol_found\
    \ = true;\n                }\n            }\n        }\n\n        // Iterate over\
    \ frequencies list - if the frequency is zero, it's a whole note - add it to the\
    \ note_durations.\n        // If the frequency is zero, it's a half note - add\
    \ it to the note_durations_last.\n        // If the frequency is zero, it's a\
    \ quarter note - add it to the note_durations_last.\n        for (int i = 0; i\
    \ < counter_of_notes_in_string; i++) {\n            if (frequencies[i] == 0) {\n\
    \                note_durations.Add(Math.Pow(2, i) * 4);\n                note_durations_last.Add(Math.Pow(2,\
    \ i) * 2);\n            } else if (frequencies[i] == 1) {\n                note_durations.Add(Math.Pow(2,\
    \ i) * 2);\n                note_durations_last.Add(Math.Pow(2, i));\n       \
    \     } else {\n                note_durations.Add(Math.Pow(2, i));\n        \
    \        note_durations_last.Add(Math.Pow(2, i) * 2);\n            }\n       \
    \ }\n        return note_durations;", "        List<long> beats = new List<long>();\n\
    \        music_string = music_string.Replace(\" \", \"\");\n        music_string\
    \ = music_string.ToUpper();\n\n        music_string = music_string.Trim();\n \
    \       music_string = (music_string + music_string).Trim();\n        music_string\
    \ = (music_string + music_string).Trim();\n\n        music_string = (music_string\
    \ + music_string).Trim();\n        music_string = (music_string + music_string).Trim();\n\
    \n        music_string = (music_string + music_string).Trim();\n        music_string\
    \ = (music_string + music_string).Trim();\n        music_string = (music_string\
    \ + music_string).Trim();\n        music_string = (music_string + music_string).Trim();\n\
    \n        music_string = music_string.Trim();\n        music_string = (music_string\
    \ + music_string).Trim();\n        music_string = (music_string + music_string).Trim();\n\
    \        music_string = (music_string + music_string).Trim();\n        music_string\
    \ = (music_string + music_string).Trim();\n        music_string = (music_string\
    \ + music_string).Trim();\n        music_string = (music_string + music_string).Trim();\n\
    \        music_string = (music_string + music_string).Trim();\n\n        music_string\
    \ = (music_string + music_string).Trim();\n        music_string = (music_string\
    \ + music_string).Trim();\n        music_string = (music_string + music_string).Trim();\n\
    \        music_string = (music_string + music_string).Trim();\n        music_string\
    \ = (music_string + music_string).Trim();\n        music_string = (music_string\
    \ + music_string).Trim();\n        music_string = (music_string + music_string).Trim();\n\
    \        music_string = (music_string + music_string).Trim();\n        music_string\
    \ = (music_string + music_string).Trim();\n        music_string = (music_string\
    \ + music_string).Trim();\n        music_string = (music_string + music_string).Trim();\n\
    \        music_string = (music_string + music_string).Tri", "        List<long>\
    \ beats = new List<long>();\n        foreach (char c in music_string) {\n    \
    \        if (c == 'o' || c == 'o|' || c == '.|') {\n                beats.Add(1L);\n\
    \            }\n            else if (c == '|') {\n                beats.Add(4L);\n\
    \            }\n            else {\n                beats.Add(2L);\n         \
    \   }\n        }\n        return beats;", "        List<long> beats = new List<long>();\n\
    \        string lastNote = null;\n        foreach (char c in music_string) {\n\
    \            if (c == '.') {\n                lastNote = null;\n             \
    \   continue;\n            }\n            if (lastNote != null && c == 'o') {\n\
    \                beats.Add((long)1);\n            }\n            if (lastNote\
    \ != null && c == '|') {\n                beats.Add((long)2);\n            }\n\
    \            if (lastNote != null && c == 'o|') {\n                beats.Add((long)4);\n\
    \            }\n            lastNote = c;\n        }\n        return beats;",
  "        var results = new List<long>();\n        var result = music_string.ToCharArray().Select(c\
    \ => {\n            var note = c as char;\n            switch (note) {\n     \
    \           case 'o':\n                    return 4L;\n                case 'o|':\n\
    \                    return 2L;\n                case '.|':\n                \
    \    return 1L;\n                default:\n                    throw new NotSupportedException($\"\
    Music note {note} is not supported\");\n            }\n        }).ToArray();\n\
    \        foreach (var note in result)\n        {\n            if (result.Length\
    \ > 0)\n            {\n                long l = note;\n                results.Add(l);\n\
    \            }\n            else\n            {\n                results.Add(note);\n\
    \            }\n        }\n        return results;", "        music_string = music_string.Trim();\n\
    \        music_string = music_string.Replace(\"o\", \" \");\n        music_string\
    \ = music_string.Replace(\".\", \" \");\n        music_string = music_string.Replace(\"\
    |\", \" \");\n        music_string = music_string.Replace(\"o|\", \" \");\n  \
    \      music_string = music_string.Replace(\".|\", \" \");\n        music_string\
    \ = music_string.Replace(\" \", \" \");\n        string[] music_array = music_string.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        List<long>\
    \ note_list = new List<long>();\n        foreach (string note in music_array)\
    \ {\n            if (note.Length >= 3) {\n                long note_value;\n \
    \               string note_value_string = note.Substring(2);\n              \
    \  bool is_octave = false;\n                if (note_value_string.Length >= 4)\
    \ {\n                    long octave_value = 0;\n                    string[]\
    \ octave_value_string = note_value_string.Split(new char[] { ':' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \                    foreach (string octave_value in octave_value_string) {\n\
    \                        if (octave_value.Length >= 2)\n                     \
    \       octave_value++;\n                        else\n                      \
    \      is_octave = true;\n                    }\n                }\n         \
    \       if (note_value_string.Length == 3) {\n                    note_value =\
    \ 0;\n                    is_octave = true;\n                }\n             \
    \   if (is_octave) {\n                    note_value = octave_value;\n       \
    \         } else {\n                    note_value = Convert.ToInt64(note_value_string,\
    \ 10);\n                }\n                note_list.Add(note_value);\n      \
    \      }\n        }\n        return note_list;", "        // Your code here\n\
    \        List<long> beats = new List<long>();\n        foreach (char c in music_string)\
    \ {\n            if ((c == 'o') || (c == 'o|')) {\n                beats.Add(4L);\n\
    \            } else if ((c == '.') || (c == '.|')) {\n                beats.Add(2L);\n\
    \            } else {\n                beats.Add(1L);\n            }\n       \
    \ }\n        return beats;", "        List<long> result = new List<long>();\n\
    \        foreach(char c in music_string) {\n            switch(c) {\n        \
    \        case 'o':\n                case 'O':\n                    result.Add((long)4);\n\
    \                    break;\n                case '|':\n                case '|':\n\
    \                    result.Add((long)2);\n                    break;\n      \
    \          case '.':\n                case '.':\n                    result.Add((long)1);\n\
    \                    break;\n                default:\n                    throw\
    \ new FormatException(\"Invalid music character: \" + c.ToString());\n       \
    \     }\n        }\n        return result;", "        var notes = music_string.Split(new\
    \ char[] { '|' }, StringSplitOptions.RemoveEmptyEntries)\n            .Select(music_note\
    \ => music_note.Trim()).ToArray();\n\n        Debug.Assert(notes.Length == 4);\n\
    \n        var beats = new List<long>();\n        var octave = 0;\n        var\
    \ last_octave = 0;\n\n        foreach (var note in notes) {\n            switch\
    \ (note) {\n                case \"o\":\n                    // whole note\n \
    \                   beats.Add((long)4 + ((octave % 12) * 2));\n              \
    \      octave++;\n                    break;\n                case \"o|\":\n \
    \                   // half note\n                    beats.Add((long)2 + ((octave\
    \ % 12) * 2));\n                    octave++;\n                    break;\n  \
    \              case \".|\":\n                    // quater note\n            \
    \        beats.Add((long)1 + ((octave % 12) * 2));\n                    octave++;\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentOutOfRangeException();\n            }\n\n            last_octave\
    \ = octave;\n        }\n\n        return beats;", "        List<long> beats =\
    \ new List<long>();\n        Debug.Assert(music_string != null);\n        Debug.Assert(music_string.Length\
    \ > 0);\n        string note_char = music_string[0];\n        if (note_char.ToLower()\
    \ != 'o' && note_char.ToLower() != 'o|') {\n            Debug.Assert(note_char.ToLower()\
    \ == \"o\");\n            beats.Add(4L);\n            return beats;\n        }\n\
    \        char next_char;\n        char last_char;\n        int beats_in_current_note\
    \ = 0;\n        int notes_in_current_note = 1;\n        for (int i = 1; i < music_string.Length;\
    \ i++) {\n            next_char = music_string[i];\n            last_char = music_string[i\
    \ - 1];\n            if ((next_char != '.' && next_char != '|') || i == music_string.Length\
    \ - 1) {\n                if (next_char == '|') {\n                    if (last_char\
    \ == 'o' || last_char == 'o|') {\n                        beats.Add(beats_in_current_note);\n\
    \                        beats_in_current_note = 0;\n                        notes_in_current_note++;\n\
    \                    } else {\n                        beats_in_current_note++;\n\
    \                    }\n                } else {\n                    if (last_char\
    \ == 'o' || last_char == 'o|') {\n                        beats.Add(beats_in_current_note);\n\
    \                        beats_in_current_note = 0;\n                        notes_in_current_note++;\n\
    \                    } else {\n                        beats_in_current_note++;\n\
    \                    }\n                }\n            } else {\n            \
    \    if (next_char == 'o' || next_char == 'o|') {\n                    beats.Add(beats_in_current_note);\n\
    \                    beats_in_current_note = 0;\n                    notes_in_current_note++;\n\
    \                }\n            }\n        }\n        if (note_char.ToLower()\
    \ == 'o' || note_char.ToLower() == 'o|') {\n            beats.Add(beats_in_current_note);\n\
    \            beats_in_current_note = 0;\n            notes_in_current_note++;\n\
    \        }\n        return beats;", '        return music_string.TrimStart().Split().Select(x
    => long.Parse(x.Trim())).ToList();', "        // Write your code here\n\n    \
    \    //TODO: Implement me\n\n        return null;", "        if (music_string\
    \ == null || music_string.Length <= 0) return null;\n        if (music_string[0]\
    \ != '.') return null;\n\n        // Find index of last \".|\"\n        int index\
    \ = -1;\n        while (index != -1 && music_string[index] != '.') index--;\n\n\
    \        // Skip last \".|\" if it exists\n        if (index != -1) index++;\n\
    \n        if (index != -1) {\n            List<long> beats = new List<long>();\n\
    \            // Find index of first \"o|\"\n            int o_index = -1;\n  \
    \          while (o_index != -1 && music_string[o_index] != 'o') o_index--;\n\n\
    \            // Skip \"o|\" if it exists\n            if (o_index != -1) o_index++;\n\
    \n            while (o_index != -1) {\n                int beat = 0;\n       \
    \         int o_index2 = -1;\n                while (o_index2 != -1 && music_string[o_index2]\
    \ != '|') o_index2--;\n\n                // Skip \"|\" if it exists\n        \
    \        if (o_index2 != -1) o_index2++;\n\n                while (o_index2 !=\
    \ -1) {\n                    if (music_string[o_index2] != ' ') o_index2++;\n\
    \                    else o_index2 = -1;\n                }\n\n              \
    \  // If no notes found\n                if (o_index2 == -1) break;\n\n      \
    \          int o_index3 = -1;\n                while (o_index3 != -1 && music_string[o_index3]\
    \ != '|') o_index3--;\n\n                // Skip \"|\" if it exists\n        \
    \        if (o_index3 != -1) o_index3++;\n\n                while (o_index3 !=\
    \ -1) {\n                    if (music_string[o_index3] != ' ') o_index3++;\n\
    \                    else o_index3 = -1;\n                }\n\n              \
    \  if (o_index3 == -1) break;\n\n                // If no notes found\n      \
    \          if (o_index3 == -1) break;\n\n                beat += Convert.ToInt32(music_string[o_index++]);\n\
    \                beat += Convert.ToInt32(music_string[o_index++]);\n         \
    \       beat += Convert.ToInt32(music_string[o_index++]);\n                beats.Add(beat);\n\
    \            }\n\n            if (o_index == -1 || music_string[o_index] != '.')\
    \ return null;\n\n            return beats;\n        } else {\n            return\
    \ null;\n        }", "        // TODO: Complete code here.\n        var notes\
    \ = new List<long>();\n        var current_note = 0;\n        var last_note =\
    \ 0;\n        \n        if (music_string.Length == 0)\n            return notes;\n\
    \n        notes.Add(0);\n\n        for (int i = 0; i < music_string.Length; i++)\
    \ {\n            var char = music_string[i];\n            \n            // A note\
    \ start (notes start in interval of 4 beats)\n            if (char.Equals('o'))\
    \ {\n                notes.Add(4);\n                last_note = current_note;\n\
    \                current_note = 0;\n            }\n            // A half note\
    \ (notes start in interval of 2 beats)\n            else if (char.Equals('o|'))\
    \ {\n                notes.Add(2);\n                last_note = current_note;\n\
    \                current_note = 0;\n            }\n            // A quater note\
    \ (notes start in interval of 1 beat)\n            else if (char.Equals('|'))\
    \ {\n                notes.Add(1);\n                last_note = current_note;\n\
    \                current_note = 0;\n            }\n            // An actual note\n\
    \            else if (char.Equals('.') && notes[current_note] != 0) {\n      \
    \          var note_length = notes[current_note];\n                notes[current_note]\
    \ = 0;\n                notes.Add(note_length * 4);\n                last_note\
    \ = current_note;\n                current_note = 0;\n            }\n        \
    \    // A dot\n            else if (char.Equals('.')) {\n                notes.Add(1);\n\
    \                last_note = current_note;\n                current_note = 0;\n\
    \            }\n            // A note end\n            else if (char.Equals('|'))\
    \ {\n                notes.Add(4);\n                last_note = current_note;\n\
    \                current_note = 0;\n            }\n            // A dot\n    \
    \        else if (char.Equals('o')) {\n                notes.Add(4);\n       \
    \         last_note = current_note;\n                current_note = 0;\n     \
    \       }\n            else {\n                current_note = current_note + 1;\n\
    \            }\n        }\n        return notes;", "        List<long> beats =\
    \ new List<long>();\n        int i = 0;\n        while (i < music_string.Length)\
    \ {\n            string note = music_string.Substring(0, i);\n            string\
    \ rest = music_string.Substring(i);\n            if (note == \"o\" || note ==\
    \ \"o|\" || note == \".|\") {\n                if (rest.Length != 0) {\n     \
    \               long beats = rest[0];\n                    beats.Add(beats);\n\
    \                }\n                beats.Add(1L);\n                i++;\n   \
    \         } else if (note == \".\") {\n                if (rest.Length != 0) {\n\
    \                    long beats = rest[0];\n                    beats.Add(beats);\n\
    \                }\n                beats.Add(1L);\n                i++;\n   \
    \         } else if (note == \"|\") {\n                if (rest.Length != 0) {\n\
    \                    long beats = rest[0];\n                    beats.Add(beats);\n\
    \                }\n                beats.Add(2L);\n                i++;\n   \
    \         } else {\n                beats.Add(rest);\n                i++;\n \
    \           }\n        }\n        return beats;", "        int beat_length = 4;\
    \ // 4 beats per note\n        string last_note_note_char = \"\"; // last note\
    \ character\n        List<long> list_of_notes = new List<long>(new long[music_string.Length]);\
    \ // list to store beat numbers\n        bool first_note = true; // true if it\
    \ is the first note\n        int note_char_length = 0; // length of current note\
    \ character\n        for (int i = 0; i < music_string.Length; i++) { // loop over\
    \ all characters\n            if (first_note) {\n                first_note =\
    \ false;\n                last_note_note_char = music_string[i]; // save note\
    \ character as last note\n            } else {\n                // check if note\
    \ character is same as last note character\n                if (music_string[i]\
    \ == last_note_note_char) {\n                    // check if note character is\
    \ a '|' or '.'\n                    if (music_string[i+1] == '.' || music_string[i+1]\
    \ == '|') {\n                        // check if note character is a '|', then\
    \ add its length to current note character length\n                        if\
    \ (music_string[i+1] == '|') {\n                            note_char_length =\
    \ note_char_length + music_string[i+1];\n                            list_of_notes.Add(beat_length\
    \ * note_char_length); // add current note length to list and reset note character\n\
    \                            note_char_length = 0; // reset note character length\n\
    \                            // add current note length to list\n            \
    \                list_of_notes.Add(beat_length);\n                           \
    \ // reset note character to '.' and add its length to current note character\
    \ length\n                            last_note_note_char = music_string[i+1];\n\
    \                        }\n                        // check if note character\
    \ is a '.', then add its length to current note character length\n           \
    \             if (music_string[i+1] == '.') {\n                            note_char_length\
    \ = note_char_length + music_string[i+1];\n                            list_of_notes.Add(beat_length\
    \ * note_char_length); // add current note length to list and reset note character\n\
    \                            note_char_length = 0; // reset note character length\n\
    \                            // add current note length to list\n            \
    \                list_of_notes.Add(beat_length);\n                           \
    \ // reset note character to '.' and add its length to current note character\
    \ length\n                            last_note_note_char = music_string[i+1];\n\
    \                        }\n                    }\n                } else {\n\
    \                    // check if note character is end of note\n             \
    \       if (music_string[i] == '|') {\n                        list_of_notes.Add(beat_length);\
    \ // add current note length to list\n                        // reset note character\
    \ to '|' and add its length to current note character length\n               \
    \         last_note_note_char = music_string[i+1];\n                        note_char_length\
    \ = 0;\n                        beat_length = 4; // 4 beats per note\n       \
    \             }\n                }\n            }\n        }\n        return list_of_notes;",
  "        // TODO:\n        // Implement this method\n        // This solution is\
    \ pretty naive\n        List<long> beats = new List<long>();\n        string note\
    \ = null;\n        bool is_note = false;\n        bool is_note_end = false;\n\
    \        int index = 0;\n        while(index < music_string.Length) {\n      \
    \      char c = music_string[index];\n            if (c == '.') {\n          \
    \      if (is_note) {\n                    note = music_string[index + 1];\n \
    \                   index = index + 2;\n                    is_note = false;\n\
    \                    is_note_end = true;\n                }\n            } else\
    \ if (c == '|') {\n                if (!is_note) {\n                    note =\
    \ music_string[index + 1];\n                    index = index + 2;\n         \
    \           is_note = true;\n                    is_note_end = false;\n      \
    \          }\n            } else {\n                if (!is_note && !is_note_end)\
    \ {\n                    note = music_string[index + 1];\n                   \
    \ index = index + 2;\n                    is_note = false;\n                 \
    \   is_note_end = false;\n                }\n            }\n            if (is_note_end)\
    \ {\n                beats.Add((long)Math.Round(double.Parse(note) / 4.0));\n\
    \            }\n            beats.Add((long)Math.Round(double.Parse(note) / 2.0));\n\
    \        }\n        return beats;", "        List<long> results = new List<long>();\n\
    \        // Iterate over music string\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            switch (music_string[i]) {\n                case 'o':\n\
    \                    if (i == 0) {\n                        results.Add(4L);\n\
    \                    } else {\n                        results.Add(4L);\n    \
    \                }\n                    break;\n                case 'o|':\n \
    \                   if (i == 0) {\n                        results.Add(2L);\n\
    \                    } else {\n                        results.Add(2L);\n    \
    \                }\n                    break;\n                case '.|':\n \
    \                   if (i == 0) {\n                        results.Add(1L);\n\
    \                    } else {\n                        results.Add(1L);\n    \
    \                }\n                    break;\n                default:\n   \
    \                 throw new ArgumentException(\"Note is not supported\");\n  \
    \          }\n        }\n        return results;", "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < music_string.Length; ++i) {\n\
    \            char c = music_string[i];\n            long beats = 0;\n        \
    \    if (c == 'o')\n                beats = 4;\n            else if (c == '|')\n\
    \                beats = 2;\n            else\n                beats = 1;\n  \
    \          result.Add(beats);\n        }\n        return result;", "        long\
    \ note;\n        long note_count = 0;\n        List<long> notes = new List<long>();\n\
    \        for (int i = 0; i < music_string.Length; ++i) {\n            switch (music_string[i])\
    \ {\n            case 'o':\n                note = note_count;\n             \
    \   note_count += 4;\n                break;\n            case 'o|':\n       \
    \         note = note_count;\n                note_count += 2;\n             \
    \   break;\n            case '.|':\n                note = note_count;\n     \
    \           note_count += 1;\n                break;\n            case '|':\n\
    \                note_count++;\n                break;\n            default:\n\
    \                note = note_count;\n                note_count++;\n         \
    \   }\n            notes.Add(note);\n        }\n        return notes;", "    \
    \    // TODO: Implement this function.\n        long beat_count = 0;\n       \
    \ string delimiter = \" |\";\n        string[] notes = music_string.Split(delimiter.ToCharArray(),\
    \ StringSplitOptions.RemoveEmptyEntries);\n        List<long> output = new List<long>();\n\
    \        foreach(string note in notes) {\n            if((note.Length % 2) ==\
    \ 0) {\n                beat_count += note.Length / 2;\n            } else if((note.Length\
    \ % 2) == 1) {\n                beat_count += note.Length;\n            }\n  \
    \          output.Add(beat_count);\n        }\n        return output;", "    \
    \    if (music_string == null || music_string.Length == 0)\n            throw\
    \ new ArgumentException(\"music_string cannot be null or empty\", \"music_string\"\
    );\n        List<int> beats = new List<int>();\n        bool first_beat = true;\n\
    \        int beat = 0;\n        for (int i = 0; i < music_string.Length; i++)\
    \ {\n            char c = music_string[i];\n            bool last = false;\n \
    \           switch (c) {\n                case 'o':\n                case 'o|':\n\
    \                    beat = 0;\n                    if (beat == 0) {\n       \
    \                 if (first_beat) {\n                            // This is a\
    \ first beat of a note.\n                            first_beat = false;\n   \
    \                     } else {\n                            // This is a second\
    \ beat of a note.\n                            beats.Add((int)4);\n          \
    \              }\n                    }\n                    break;\n        \
    \        case '.|':\n                    beat = 0;\n                    if (beat\
    \ == 0) {\n                        if (first_beat) {\n                       \
    \     // This is a first beat of a note.\n                            first_beat\
    \ = false;\n                        } else {\n                            // This\
    \ is a second beat of a note.\n                            beats.Add((int)2);\n\
    \                        }\n                    }\n                    break;\n\
    \                default:\n                    throw new ArgumentOutOfRangeException(\"\
    Invalid note\", \"c\");\n            }\n            if (last)\n              \
    \  beats.Add((int)1);\n        }\n        return beats;", "        return music_string.Split(\"\
    \ \").Select(s => new {\n            type = s.First(),\n            count = long.Parse(s.Substring(1))\
    \ }).GroupBy(x => x.type).Select(x => new {\n            type = x.Key,\n     \
    \       count = x.Select(y => y.count).ToArray()}).ToList();", "        music_string\
    \ = music_string.Trim();\n\n        string last_note = \"\";\n        List<long>\
    \ beats = new List<long>();\n\n        int note_counter = 0;\n        long last_beat\
    \ = 0;\n\n        foreach(char c in music_string) {\n            if(c == 'o')\
    \ {\n                last_note = c;\n                beats.Add(last_beat);\n \
    \               last_beat = 0;\n            } else {\n                int beats_taken\
    \ = note_counter % 4;\n                last_beat = last_beat + beats_taken;\n\
    \                beats.Add(last_beat);\n                note_counter++;\n    \
    \        }\n        }\n        if(last_note != \"\") {\n            beats.Add(last_beat);\n\
    \        }\n        return beats;", "        // Your code here\n        List<long>\
    \ beats = new List<long>();\n        foreach (char c in music_string) {\n    \
    \        if (c == 'o' || c == 'o|' || c == '.|') {\n                long beats_number\
    \ = Math.Ceiling((double)(c - 'o') / 4.0);\n                beats.Add(beats_number);\n\
    \            }\n        }\n        return beats;", "        var music_notes =\
    \ music_string.Split('|').ToList();\n        var music_notes_with_brk = music_notes.Aggregate(\"\
    \", (current, next) => current + next + Environment.NewLine);\n        var music_notes_with_brk_parsed\
    \ = new List<long>();\n        for (int i = 0; i < music_notes.Count; i++) {\n\
    \            var note = music_notes[i].Trim();\n            if (note.Length >\
    \ 0) {\n                var beats = (new Regex(@\"(?:\\b|[xX]|\\s)\").Matches(note)).Count;\n\
    \                music_notes_with_brk_parsed.Add(beats * 12);\n            }\n\
    \        }\n        var music_notes_with_brk_parsing_sorted = music_notes_with_brk_parsed.OrderByDescending(i\
    \ => i);\n        return music_notes_with_brk_parsing_sorted;", "        List<long>\
    \ beats = new List<long>();\n        foreach (char note in music_string) {\n \
    \           switch (note) {\n                case 'o':\n                    beats.Add(4L);\n\
    \                    break;\n                case 'o|':\n                    beats.Add(2L);\n\
    \                    break;\n                case '.|':\n                    beats.Add(1L);\n\
    \                    break;\n                default:\n                    throw\
    \ new Exception(\"Can't parse music string: \" + music_string);\n            }\n\
    \        }\n        return beats;", "        if (music_string == null || music_string.Length\
    \ == 0) return new List<long>(new long[0]);\n        // You have to think more\
    \ of some advanced stuff\n        var last_note_character = \"\";\n        var\
    \ current_note_character = \"\";\n        var note_length = 0;\n        var results\
    \ = new List<long>();\n        foreach (var c in music_string) {\n           \
    \ switch (c) {\n                case 'o':\n                case '|':\n       \
    \             note_length = 1;\n                    last_note_character = current_note_character;\n\
    \                    current_note_character = \"\";\n                    break;\n\
    \                case '.':\n                    if (current_note_character ==\
    \ \"\") {\n                        note_length = 2;\n                    } else\
    \ {\n                        note_length = 1;\n                    }\n       \
    \             last_note_character = current_note_character;\n                \
    \    current_note_character = \"\";\n                    break;\n            \
    \    default:\n                    if (current_note_character == \"\") {\n   \
    \                     note_length = 1;\n                    } else {\n       \
    \                 note_length = 2;\n                    }\n                  \
    \  last_note_character = current_note_character;\n                    current_note_character\
    \ = c;\n                    break;\n            }\n            // We know that\
    \ last note and current note have the same length now\n            if (note_length\
    \ == 1) {\n                if (last_note_character == '|') {\n               \
    \     results.Add((long)4);\n                } else {\n                    results.Add((long)4);\n\
    \                }\n            } else {\n                if (last_note_character\
    \ == '|') {\n                    results.Add((long)2);\n                } else\
    \ {\n                    results.Add((long)2);\n                }\n          \
    \  }\n        }\n        return results;", "        // First, count the occurrences\
    \ of each note\n        var note_counts = new Dictionary<string, int>();\n   \
    \     for (int i = 0; i < music_string.Length; i++) {\n            string current_char\
    \ = music_string[i];\n            if (note_counts.ContainsKey(current_char)) {\n\
    \                note_counts[current_char] += 1;\n            } else {\n     \
    \           note_counts.Add(current_char, 1);\n            }\n        }\n\n  \
    \      // Now we need to calculate the number of beats corresponding to each note\n\
    \        var beats = new List<long>(note_counts.Count);\n        for (int i =\
    \ 0; i < note_counts.Count; i++) {\n            int current_note_length = note_counts[i];\n\
    \            beats[i] = 4 * current_note_length;\n        }\n\n        // Now,\
    \ calculate the total number of beats\n        var total_beats = beats.Sum();\n\
    \n        // Now we need to adjust the number of beats for each note.\n      \
    \  var offset = 0;\n        foreach (var kv in note_counts) {\n            note_counts[kv]\
    \ = beats[offset + kv.Key];\n            offset += kv.Value;\n        }\n\n  \
    \      return note_counts;", "        List<long> beats = new List<long>();\n\n\
    \        // Parse music string\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            char c = music_string[i];\n            int length = 0;\n\
    \n            switch (c) {\n                case 'o':\n                    length\
    \ = 4L;\n                    break;\n                case 'o|':\n            \
    \        length = 2L;\n                    break;\n                case '.|':\n\
    \                    length = 1L;\n                    break;\n              \
    \  default:\n                    throw new Exception(\"Unexpected symbol in music\
    \ string\");\n            }\n\n            beats.Add(length * i);\n        }\n\
    \n        return beats;", "        List<long> notes = new List<long>();\n    \
    \    music_string = \"o o| .| o| o| .| .| .| .| o o\";\n        int current_note\
    \ = -1;\n        int current_beat = -1;\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                current_note\
    \ = current_note + 4;\n                current_beat = current_beat + 1;\n    \
    \            notes.Add((long)current_beat);\n            } else if (music_string[i]\
    \ == '|') {\n                current_note = current_note + 2;\n              \
    \  current_beat = current_beat + 1;\n                notes.Add((long)current_beat);\n\
    \            } else if (music_string[i] == '.') {\n                current_note\
    \ = current_note + 1;\n                current_beat = current_beat + 1;\n    \
    \            notes.Add((long)current_beat);\n            }\n        }\n      \
    \  return notes;", "        List<long> beats = new List<long>();\n        string\
    \ currentNote = null;\n        string currentBeat = null;\n        bool inNote\
    \ = false;\n        string previousNote = null;\n        bool isNote = false;\n\
    \        char previousChar = ' ';\n        bool isBeat = false;\n        foreach\
    \ (char c in music_string) {\n            char c = c;\n            int beatCount\
    \ = 0;\n            if (c == '.') {\n                currentBeat = null;\n   \
    \             isBeat = true;\n            }\n            if (c == 'o') {\n   \
    \             currentNote = null;\n                isNote = true;\n          \
    \  }\n            if (isNote) {\n                currentBeat = c + \"|\";\n  \
    \              isBeat = false;\n                isNote = false;\n            \
    \    currentNote = c;\n            }\n            if (isBeat) {\n            \
    \    beatCount = 1;\n            }\n            previousChar = c;\n          \
    \  if (c == '|' && currentNote == null) {\n                beatCount = 2;\n  \
    \              isNote = false;\n            }\n            if (c == ' ') {\n \
    \               if (!previousNote.Equals(\".\") && !currentNote.Equals(\".\")\
    \ && !currentNote.Equals(\"o\") && !currentNote.Equals(\"o|\")) {\n          \
    \          beats.Add(Convert.ToInt64(currentBeat) * beatCount);\n            \
    \    }\n                currentNote = null;\n                isBeat = false;\n\
    \                isNote = false;\n            }\n            if (c == currentNote)\
    \ {\n                beatCount++;\n                isBeat = true;\n          \
    \  }\n            previousNote = currentNote;\n        }\n        if (previousNote\
    \ == null) {\n            beats.Add(0);\n        }\n        return beats;", " \
    \       List<long> results = new List<long>();\n        string notes = null;\n\
    \        List<string> beats = new List<string>();\n        char[] notes_to_add\
    \ = new char[128];\n        char[] notes_to_remove = new char[128];\n        int\
    \ notes_to_add_count = 0;\n        int notes_to_remove_count = 0;\n\n        for\
    \ (int i = 0; i < music_string.Length; i++) {\n            switch (music_string[i])\
    \ {\n                case 'o':\n                case 'O':\n                case\
    \ '|':\n                case '.':\n                case '|':\n               \
    \ case ' ':\n                case '_':\n                case '.|':\n         \
    \       case ' ':\n                    notes_to_add[notes_to_add_count] = music_string[i];\n\
    \                    notes_to_add_count++;\n                    break;\n     \
    \           case '.|':\n                case '_':\n                    notes_to_remove[notes_to_remove_count]\
    \ = music_string[i];\n                    notes_to_remove_count++;\n         \
    \           break;\n                default:\n                    if (notes ==\
    \ null) {\n                        notes = music_string.Substring(0, i);\n   \
    \                     notes_to_add = new char[notes_to_add_count];\n         \
    \               notes_to_remove = new char[notes_to_remove_count];\n         \
    \           }\n                    notes_to_add[notes_to_add_count] = music_string[i];\n\
    \                    notes_to_add_count++;\n                    break;\n     \
    \       }\n        }\n        if (notes != null) {\n            List<string> note_list\
    \ = new List<string>();\n            note_list = notes.Split(new char[] { '|'\
    \ }).ToList();\n            note_list.Add(notes.Substring(notes.LastIndexOf('|')\
    \ + 1));\n            note_list.ForEach(x => notes_to_add[notes_to_add_count]\
    \ = x);\n            note_list.ForEach(x => notes_to_remove[notes_to_remove_count]\
    \ = x);\n            note_list.ForEach(x => notes_to_add_count += notes_to_add.Count(x\
    \ => x == x));\n            note_list.ForEach(x => notes_to_remove_count += notes_to_remove.Count(x\
    \ => x == x));\n            notes_to_add_count += notes_to_add.Count(x => x ==\
    \ ' ');\n            notes_to_remove_count += notes_to_remove.Count(x => x ==\
    \ ' ');\n            notes_to_add_count = Math.Max(notes_to_add_count, 4);\n \
    \           notes_to_remove_count = Math.Max(notes_to_remove_count, 2);\n    \
    \        notes_to_add_count = Math.Max(notes_to_add_count, 4);\n            notes_to_remove_count\
    \ = Math.Max(notes_to_remove_count, 2);\n\n            notes_to_add_count = Math.Max(notes_to_add_count\
    \ - 4, 0);\n            notes_to_remove_count = Math.Max(notes_to_remove_count\
    \ - 2, 0);\n            notes_to_add_count = ", "        // YOUR CODE HERE\n \
    \       return null;", "        // TODO: Implement me\n        return null;",
  "        if (music_string == null || music_string.Length == 0) {\n            return\
    \ new List<long>(new long[0]);\n        }\n        var music_list = music_string.Split('|').Select(s\
    \ => s.Length >= 1 ? s[0] : s).ToList();\n        var music_length = music_list.Count;\n\
    \        var music_last_beat = music_list.Last().Length;\n        var music_last_beat_numbers\
    \ = Enumerable.Range(0, music_last_beat).Select(i => new long[] { music_length\
    \ }).ToArray();\n        var music_note_length = music_list.First().Length;\n\
    \        var music_note_numbers = Enumerable.Range(0, music_note_length).Select(i\
    \ => new long[] { music_last_beat }).ToArray();\n        var music_note_numbers_1\
    \ = music_list.ToList();\n        music_note_numbers_1.Add(music_last_beat_numbers);\n\
    \        music_note_numbers_1.AddRange(music_note_numbers);\n        var music_note_numbers_2\
    \ = music_note_numbers_1.Except(music_note_numbers_1.Last()).ToArray();\n    \
    \    var music_note_numbers_3 = music_note_numbers_2.Except(music_note_numbers_2).ToArray();\n\
    \        var music_note_numbers_4 = music_note_numbers_3.Except(music_note_numbers_3).ToArray();\n\
    \        var music_note_numbers_5 = music_note_numbers_4.Except(music_note_numbers_4).ToArray();\n\
    \        var music_note_numbers_6 = music_note_numbers_5.Except(music_note_numbers_5).ToArray();\n\
    \        var music_note_numbers_7 = music_note_numbers_6.Except(music_note_numbers_6).ToArray();\n\
    \        var music_note_numbers_8 = music_note_numbers_7.Except(music_note_numbers_7).ToArray();\n\
    \        var music_note_numbers_9 = music_note_numbers_8.Except(music_note_numbers_8).ToArray();\n\
    \        var music_note_numbers_10 = music_note_numbers_9.Except(music_note_numbers_9).ToArray();\n\
    \        var music_note_numbers_11 = music_note_numbers_10.Except(music_note_numbers_10).ToArray();\n\
    \        var music_note_numbers_12 = music_note_numbers_11.Except(music_note_numbers_11).ToArray();\n\
    \        var music_note_numbers_13 = music_note_numbers_12.Except(music_note_numbers_12).ToArray();\n\
    \        var music_", "        // 1. Create empty list to hold the results\n \
    \       List<long> results = new List<long>();\n\n        // 2. Iterate over the\
    \ music string\n        // 2.1 Iterate over each character in string\n       \
    \ // 2.2.1 Get note character and convert it to a number, according to ASCII chart,\
    \ i.e. \"o\" is 65\n        // 2.2.2 Then subtract 65 from this character to get\
    \ note position in note array\n        // 2.2.3 Then get the note from note array\
    \ according to note position and add to results\n\n        // 3. Return results\n\
    \        return results;", "        List<long> results = new List<long>();\n \
    \       // I used the fact that in musical notation the '.' character represents\
    \ quarter note as opposed to whole note\n        // and that '|' represents quarter\
    \ note as opposed to whole note and that 'o' represents whole note.\n        string[]\
    \ notes = music_string.Split(' ');\n        foreach (string note in notes) {\n\
    \            string[] note_pieces = note.Split('|');\n            string note_ending\
    \ = note_pieces[0];\n            long beats = Convert.ToInt64(note_pieces[1]);\n\
    \            string note_pitch = note_pieces[2];\n            bool isLast = false;\n\
    \            foreach (char c in note_ending) {\n                if (c == '.')\
    \ {\n                    isLast = true;\n                    break;\n        \
    \        } else if (c == '|') {\n                    isLast = false;\n       \
    \             break;\n                } else if (c == 'o') {\n               \
    \     if (isLast) {\n                        results.Add(beats);\n           \
    \         }\n                }\n            }\n        }\n        return results;",
  "        List<long> notes = new List<long>(new long[] { 0 });\n        music_string\
    \ = music_string.ToLower();\n        bool note_start = false;\n        bool note_end\
    \ = false;\n        bool note_center = false;\n        bool note_left_edge = false;\n\
    \        bool note_right_edge = false;\n\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            var c = music_string[i];\n            note_center = (note_end\
    \ && c == '|');\n            note_left_edge = (note_end && (c == ' ' || c == '.'));\n\
    \            note_end = (note_center || note_left_edge);\n            note_start\
    \ = (!note_end && (c == ' ' || c == '.'));\n            note_end = (note_center\
    \ && note_left_edge);\n            if (note_end) {\n                notes.Add(notes[notes.Count\
    \ - 1] * 4L);\n                notes.RemoveAt(notes.Count - 1);\n            }\n\
    \            if (note_start) {\n                notes.Add(1L);\n             \
    \   notes.RemoveAt(notes.Count - 1);\n            }\n        }\n        return\
    \ notes;", "        // This will be the list of numbers that represents musical\
    \ notes.\n        // It will have a single entry, corresponding to the whole note.\n\
    \        // It will always have four items.\n        List<long> output = new List<long>();\n\
    \        // We start by splitting the music_string into notes and rests.\n   \
    \     string[] notes = music_string.Split('|');\n        string[] rests = music_string.Split('o');\n\
    \        // We need to count how many notes we need to output. One note = 4 beats.\n\
    \        int number_of_notes = notes.Length;\n        // We also need to know\
    \ how many beats each note lasts.\n        // We need a dictionary to keep track\
    \ of what number represents which note.\n        Dictionary<long, string> note_to_number\
    \ = new Dictionary<long, string>();\n        // Add the note 'o' to the list of\
    \ notes, to keep track of the whole note.\n        note_to_number[0] = \"o\";\n\
    \        // Now we go through the notes and count how long each note lasts.\n\
    \        // The 'o' at the end is for the whole note.\n        foreach (string\
    \ note in notes) {\n            note_to_number[note.Length - 1] = note;\n    \
    \        // Now we also need to know how many beats each note lasts.\n       \
    \     long beat_number = (note.Length - 1) * 4;\n            // Add this beat_number\
    \ to the list of notes. We use AddRange to add the notes\n            // with\
    \ a specific range of beats.\n            output.AddRange(Enumerable.Range(beat_number,\
    \ beat_number).Select(x => note_to_number[x - beat_number + 1]));\n        }\n\
    \        // And finally, we go through the rests to get the beats.\n        foreach\
    \ (string rest in rests) {\n            int restLength = rest.Length;\n      \
    \      // The 'o' at the end is for the whole rest.\n            string restNote\
    \ = restLength > 1 ? rests.Substring(0, restLength - 1) : \"o\";\n           \
    \ note_to_number[restNote.Length - 1] = restNote;\n            // Now we also\
    \ need to know how many beats each note lasts.\n            long beat_number =\
    \ (restLength - 1) * 4;\n            // Add this beat_number to the list of notes.\
    \ We use AddRange to add the notes\n            // with a specific range of beats.\n\
    \            output.AddRange(Enumerable.Range(beat_number, beat_number).Select(x\
    \ => note_to_number[x - beat_number + 1]));\n        }\n        // And now we\
    \ get the number of all the notes we have to output\n        // Note that we take\
    \ the max here to account for notes that are not present in the\n        // music_string.\
    \ The max value would be 7 for the notes above, and 0 for ", "        List<long>\
    \ result = new List<long>();\n        music_string = music_string.Replace(\"o|\"\
    , \"o|.|\");\n        music_string = music_string.Replace(\".|\", \".|\");\n \
    \       int i = 0;\n        long current_beat = 0;\n        string current_note\
    \ = null;\n        while (i < music_string.Length) {\n            char c = music_string[i];\n\
    \            if ((c == 'o') || (c == '|')) {\n                if (current_note\
    \ == null) {\n                    current_beat = 0;\n                    current_note\
    \ = c.ToString();\n                }\n                else {\n               \
    \     int beats_in_chord = result.Count - 1;\n                    result.Add(current_beat\
    \ + beats_in_chord);\n                    current_beat = 0;\n                \
    \    current_note = c.ToString();\n                }\n            }\n        \
    \    else {\n                ++current_beat;\n            }\n            ++i;\n\
    \        }\n        if (current_note != null)\n            int beats_in_chord\
    \ = result.Count - 1;\n        result.Add(current_beat + beats_in_chord);\n  \
    \      return result;", "        List<long> notes = new List<long>(new long[48]);\n\
    \        for (int i = 0; i < music_string.Length; i++) {\n            notes.Add(0);\n\
    \        }\n        char[] splitted_music = music_string.ToCharArray();\n    \
    \    for (int i = 0; i < splitted_music.Length; i++) {\n            char note\
    \ = splitted_music[i];\n            notes[(int)note]++;\n        }\n        return\
    \ notes;", "        List<long> beats = new List<long>();\n        List<char> chords\
    \ = new List<char>();\n        foreach (char c in music_string) {\n          \
    \  if (c == 'o') {\n                beats.Add((long)4);\n                chords.Add((char)0);\n\
    \            } else if (c == '.') {\n                chords.Add((char)0);\n  \
    \          } else if (c == '|') {\n                chords.Add((char)1);\n    \
    \        } else {\n                beats.Add(0);\n                chords.Add(c);\n\
    \            }\n        }\n        return ParseMusic(beats.Count, beats, chords.Count,\
    \ chords);", "        var beats = new List<long>();\n        music_string = music_string.ToLower();\n\
    \        var position = 0;\n        while (position < music_string.Length) {\n\
    \            var symbol = music_string[position];\n            position++;\n \
    \           switch (symbol) {\n            case 'o':\n            case 'O':\n\
    \                if (position == music_string.Length) {\n                    throw\
    \ new Exception(\"Can't parse '\" + music_string + \"' - missing '|'\");\n   \
    \             }\n                var value = Convert.ToInt32(music_string[position]);\n\
    \                position++;\n                if (position != music_string.Length)\
    \ {\n                    throw new Exception(\"Can't parse '\" + music_string\
    \ + \"' - invalid '|'\");\n                }\n                beats.Add((value\
    \ * 4L));\n                break;\n            case 'o|':\n                if\
    \ (position == music_string.Length) {\n                    throw new Exception(\"\
    Can't parse '\" + music_string + \"' - missing 'o'\");\n                }\n  \
    \              var value = Convert.ToInt32(music_string[position]);\n        \
    \        position++;\n                if (position != music_string.Length) {\n\
    \                    throw new Exception(\"Can't parse '\" + music_string + \"\
    ' - invalid 'o'\");\n                }\n                beats.Add((value * 2L));\n\
    \                break;\n            case '.':\n                var value = Convert.ToInt32(music_string[position]);\n\
    \                position++;\n                if (position != music_string.Length)\
    \ {\n                    throw new Exception(\"Can't parse '\" + music_string\
    \ + \"' - invalid '.'\");\n                }\n                beats.Add((value\
    \ * 1L));\n                break;\n            default:\n                throw\
    \ new Exception(\"Can't parse '\" + music_string + \"' - invalid symbol '\" +\
    \ symbol + \"'\");\n            }\n        }\n        return beats;", "      \
    \  if (music_string == null) {\n            return null;\n        }\n        List<long>\
    \ beats = new List<long>();\n        music_string = (music_string.Trim()).Replace(\"\
    \ \", \"\");\n        music_string = music_string.Replace(\"|\", \"\").Replace(\"\
    o\", \"\").Replace(\".\", \"\").Replace(\"O\", \"\").Replace(\"O|\", \"\");\n\
    \        string[] tokens = music_string.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        foreach (string token in tokens) {\n            string[] token2 = token.Split(new\
    \ char[] { ':' }, StringSplitOptions.RemoveEmptyEntries);\n            if (token2.Length\
    \ < 1) {\n                continue;\n            }\n            char note = token2[0].ToLower();\n\
    \            long beats_amount = 0;\n            foreach (char c in note) {\n\
    \                switch (c) {\n                    case 'o':\n               \
    \         beats_amount += 4L;\n                        break;\n              \
    \      case 'o|':\n                        beats_amount += 2L;\n             \
    \           break;\n                    case '.':\n                        beats_amount\
    \ += 1L;\n                        break;\n                    default:\n     \
    \                   break;\n                }\n            }\n            beats.Add(beats_amount);\n\
    \        }\n        return beats;", "        var result = new List<long>();\n\
    \        var last_note = music_string[0];\n        var current_beat = 0;\n   \
    \     var beats_until_last_note = 4;\n        var last_beat_time = 0;\n      \
    \  var note_to_beat_mapping = new Dictionary<string, long>();\n        note_to_beat_mapping.Add(\"\
    o\", 4);\n        note_to_beat_mapping.Add(\"o|\", 2);\n        note_to_beat_mapping.Add(\"\
    .|\", 1);\n        var beat_duration = 44100L / note_to_beat_mapping.Count;\n\
    \        foreach (var note in music_string) {\n            if (note_to_beat_mapping.ContainsKey(note))\
    \ {\n                beats_until_last_note = note_to_beat_mapping[note];\n   \
    \         }\n            if (note == \".\") {\n                current_beat =\
    \ 0;\n                result.Add(current_beat);\n            } else if (note ==\
    \ \"o\") {\n                last_beat_time = current_beat * beat_duration;\n \
    \               result.Add(last_beat_time);\n            } else if (note == \"\
    o|\") {\n                result.Add(last_beat_time + (current_beat * beat_duration));\n\
    \            } else if (note == \".|\") {\n                result.Add(last_beat_time\
    \ + (current_beat * beat_duration));\n            } else {\n                throw\
    \ new ArgumentException(\"Music note not found: \" + note);\n            }\n \
    \           if (note == last_note) {\n                if (current_beat == beats_until_last_note)\
    \ {\n                    result.Add(last_beat_time + beat_duration);\n       \
    \         } else {\n                    result.Add(last_beat_time + (current_beat\
    \ * beat_duration));\n                }\n            }\n            last_beat\
    \ = current_beat++;\n            last_note = note;\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (char\
    \ ch in music_string) {\n            long beat = 1;\n            if (ch != '|')\
    \ {\n                long tempBeat = 1;\n                for (;tempBeat <= 4;\
    \ tempBeat++) {\n                    if (ch == 'o')\n                        break;\n\
    \                    if (ch == '.') {\n                        beat = tempBeat;\n\
    \                        break;\n                    }\n                    if\
    \ (ch == '|')\n                        break;\n                }\n           \
    \ }\n            result.Add(beat);\n        }\n        return result;", "    \
    \    List<long> beats = new List<long>();\n        music_string.Split(new char[]{'o'});\n\
    \        music_string.Split(new char[]{'o|'});\n        music_string.Split(new\
    \ char[]{'.|'});\n        string[] notes = music_string.Split(new char[]{' '},\
    \ StringSplitOptions.RemoveEmptyEntries);\n        foreach (string note in notes)\
    \ {\n            string[] noteSplit = note.Split(new char[]{'|'}, StringSplitOptions.RemoveEmptyEntries);\n\
    \            long lastBeat = 0;\n            foreach (string noteSplit in noteSplit)\
    \ {\n                long beat = Convert.ToInt64(noteSplit);\n               \
    \ if (beat != lastBeat) {\n                    lastBeat = beat;\n            \
    \        beats.Add(beat);\n                }\n            }\n        }\n     \
    \   return beats;", "        // Implement this function\n        return null;",
  "        // TODO - Implement your solution here\n        List<long> result = new\
    \ List<long>();\n        List<string> notes = music_string.Split('|').ToList();\n\
    \        for (int i = 0; i < notes.Count; i++) {\n            string note = notes[i];\n\
    \            string whole = note.Substring(0, 1);\n            string quarter\
    \ = note.Substring(1, 2);\n            string half = note.Substring(2, 1);\n \
    \           string wholeOrHalf = note.Substring(2, 1);\n            string wholeOrQuarter\
    \ = note.Substring(2, 2);\n            string wholeOrQuart = note.Substring(2,\
    \ 3);\n            string wholeOrQuartOrHalf = note.Substring(2, 4);\n       \
    \     int wholeOrHalfBeats = wholeOrHalf.Contains('|') ? 2 : 1;\n            int\
    \ wholeOrQuarterBeats = wholeOrQuart.Contains('|') ? 2 : 1;\n            int wholeOrQuartOrHalfBeats\
    \ = wholeOrQuartOrHalf.Contains('|') ? 3 : 1;\n            int wholeOrHalfAndQuart\
    \ = wholeOrHalfAndQuart.Contains('|') ? 3 : 1;\n            int wholeOrQuartAndHalf\
    \ = wholeOrQuartAndHalf.Contains('|') ? 3 : 1;\n            int wholeOrQuartAndHalfAndQuart\
    \ = wholeOrQuartAndHalfAndQuart.Contains('|') ? 3 : 1;\n            int wholeOrHalfAndQuartOrQuarter\
    \ = wholeOrHalfAndQuartOrQuart.Contains('|') ? 3 : 1;\n            int wholeOrHalfAndQuartOrQuarterAndHalf\
    \ = wholeOrHalfAndQuartOrQuarterAndHalf.Contains('|') ? 3 : 1;\n            int\
    \ halfAndQuartOrQuartAndHalf = halfAndQuartOrQuartAndHalf.Contains('|') ? 3 :\
    \ 1;\n            int halfAndQuartOrQuartAndHalfAndQuart = halfAndQuartOrQuartAndHalfAndQuart.Contains('|')\
    \ ? 3 : 1;\n            int halfAndQuartOrQuartAndHalfAndQuartOrQuarter = halfAndQuartOrQuartAndHalfAndQuartOrQuart.Contains('|')\
    \ ? 3 : 1;\n            int halfAndQuartOrQuartAndHalfAndQuartOrQuarterAndHalf\
    \ = halfAndQuartOrQuartAndHalfAndQuartOrQuarterAndHalf.Contains('|') ", "    \
    \    // Your code goes here\n        if (music_string.Length < 1) return new List<long>(new\
    \ long[0]);\n        List<long> result = new List<long>(new long[music_string.Length]);\n\
    \        int i = 0, j = 0;\n        char note;\n        char note_char;\n    \
    \    string note_name;\n        while (i < music_string.Length) {\n          \
    \  note_char = music_string[i];\n            note = note_char.ToLower() + note_char.Substring(1);\n\
    \            note_name = note;\n            switch (note) {\n                case\
    \ \"o\":\n                case \"o|\":\n                    note_char = \"o\"\
    ;\n                    break;\n                case \"|\":\n                 \
    \   note_name = \"|\";\n                    break;\n                case \".|\"\
    :\n                    note_char = \".\";\n                    break;\n      \
    \          default:\n                    note_name = \"o\";\n                \
    \    break;\n            }\n            if (note == note_name) {\n           \
    \     note_name = \"o\";\n            }\n            result.Add(i);\n        \
    \    i += note_name.Length;\n        }\n        return result;", "        // TODO:\
    \ Implement this function\n        string key = music_string;\n        List<long>\
    \ result = new List<long>();\n        string pattern = @\"o|\\.|\";\n        int\
    \ i = 0;\n        while (i < key.Length) {\n            char ch = key[i];\n  \
    \          if (char.IsWhiteSpace(ch))\n                i++;\n            else\
    \ if (ch == '.') {\n                i++;\n                long x = GetNoteValue(key.Substring(i));\n\
    \                result.Add(x);\n                i += 3;\n            }\n    \
    \        else if (ch == 'o') {\n                i++;\n                long x =\
    \ GetNoteValue(key.Substring(i));\n                result.Add(x);\n          \
    \      i += 2;\n            }\n            else\n                i++;\n      \
    \  }\n        return result;", "        List<long> notes = new List<long>(music_string.Length);\n\
    \        int current_note = 0;\n        bool is_note = false;\n        long current_beat\
    \ = 0;\n        long current_time = 0;\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (is_note) {\n                if (music_string[i] == '|')\
    \ {\n                    notes.Add(current_beat);\n                    current_beat\
    \ = 0;\n                    is_note = false;\n                } else {\n     \
    \               current_beat++;\n                }\n            } else if (music_string[i]\
    \ == 'o') {\n                is_note = true;\n                current_beat = -1;\n\
    \            } else if (music_string[i] == '.') {\n                is_note = true;\n\
    \                current_beat = -1;\n                current_time = 0;\n     \
    \       } else {\n                is_note = false;\n            }\n        }\n\
    \        notes.Add(current_beat);\n        return notes;", "        // Use this\
    \ to store your results\n        var results = new List<long>();\n\n        //\
    \ Let's parse our music string\n        string[] notes = music_string.Split(new\
    \ string[] { \", \" }, StringSplitOptions.None);\n\n        // Let's go through\
    \ all the notes we have and try to split them into notes and beats\n        foreach\
    \ (string note in notes) {\n            // Use this temp variable to store what\
    \ we have got\n            string note_part = note;\n\n            // Remove anything\
    \ that is not a note\n            note_part = note_part.Replace(\"o\", \"\").Replace(\"\
    |\", \"\");\n            note_part = note_part.Replace(\".\", \"\");\n\n     \
    \       // Now let's get this note split into note and beat\n            string[]\
    \ split_note = note_part.Split(new string[] { \" \" }, StringSplitOptions.None);\n\
    \n            // This variable is going to hold our result\n            long note_to_beat\
    \ = -1;\n\n            // Let's try to parse first note into note_to_beat\n  \
    \          try {\n                // Get first note\n                string first_note\
    \ = split_note[0];\n\n                // If this note is '.' it means it's a 'whole\
    \ note' which lasts four beats\n                if (first_note == \".\") {\n \
    \                   // If we have four notes then last four beats\n          \
    \          if (split_note.Length >= 4) {\n                        note_to_beat\
    \ = long.Parse(split_note[split_note.Length - 1]);\n                    }\n  \
    \              }\n\n                // If this note is 'o' it means it's an 'o'\
    \ which lasts four beats\n                else if (first_note == \"o\") {\n  \
    \                  // If we have four notes then last four beats\n           \
    \         if (split_note.Length >= 4) {\n                        note_to_beat\
    \ = long.Parse(split_note[split_note.Length - 3]);\n                    }\n  \
    \              }\n\n                // If we have no notes then it's an 'o|' which\
    \ lasts two beats\n                else if (split_note.Length == 2) {\n      \
    \              note_to_beat = long.Parse(split_note[1]);\n                }\n\n\
    \                // If we have no notes then it's an 'o|' which lasts one beat\n\
    \                else if (split_note.Length == 1) {\n                    note_to_beat\
    \ = long.Parse(split_note[0]);\n                }\n\n                // If we\
    \ have no notes then it's an 'o|' which lasts two beats\n                else\
    \ if (split_note.Length == 0) {\n                    note_to_beat = long.Parse(split_note[1]);\n\
    \                }\n\n                // If we have no notes then it's an 'o|'\
    \ which lasts one beat\n                else if (split_note.Length == 0) {\n \
    \                   note_to_beat = long.Parse(split_", "        List<long> result\
    \ = new List<long>();\n\n        // This variable will keep track on how long\
    \ a note has been seen in input string\n        long last_note_length = 0.0;\n\
    \n        // Here we iterate over musical string characters and count how many\
    \ beats each of them lasts.\n        // We also calculate how much note should\
    \ be added to result list\n        for (int i = 0; i < music_string.Length; i++)\
    \ {\n            // Current character should be either a '.' or 'o' character.\n\
    \            char current_char = music_string[i];\n            long note_length\
    \ = 0;\n\n            // If current character is '.', it means this note is half\
    \ or whole note\n            if (current_char == '.') {\n                note_length\
    \ = 4.0;\n            } else {\n                // If current character is anything\
    \ else that '.', it means this note is quarter note or whole note\n          \
    \      note_length = 2.0;\n            }\n\n            // If current note is\
    \ not the same as the last one, add note length to total note length\n       \
    \     if (last_note_length != note_length) {\n                last_note_length\
    \ = note_length;\n                result.Add(note_length);\n            } else\
    \ {\n                // If current note is the same as the last one, do nothing\n\
    \                // We just keep note length unchanged\n            }\n      \
    \  }\n\n        return result;", "        List<long> beats = new List<long>();\n\
    \        string split = \".| \";\n        music_string = music_string\n      \
    \      .Replace(split, \"\") // strip all repeated dots\n            .Replace(\"\
    o o|\", \".0\") // strip off leading 'o' and '|' characters\n            .Replace(\"\
    o|\", \".0\") // strip off leading '|' characters\n            .Replace(\" \"\
    , \"\") // remove spaces from beginning and end of string\n            .Replace(\"\
    .\", \"\") // remove spaces from beginning and end of string\n            .Replace(\"\
    |\", \"\"); // remove spaces from beginning and end of string\n        string[]\
    \ notes = music_string.Split(split);\n        foreach (string note in notes) {\n\
    \            string temp[] = note.Trim().Split(new[] { \" \" }, StringSplitOptions.None);\n\
    \            if (temp.Length > 1) {\n                long beats = Convert.ToInt64(temp[0].Replace(\"\
    .\", \"\").Replace(\"|\", \"\").Replace(\"o\", \"\"));\n                beats.Add(beats);\n\
    \            } else {\n                beats.Add(Convert.ToInt64(temp[0].Replace(\"\
    .\", \"\").Replace(\"|\", \"\")));\n            }\n        }\n        return beats;",
  "        if (music_string == null)\n            throw new ArgumentNullException(\"\
    music_string\");\n\n        if (music_string.Length > 100)\n            throw\
    \ new ArgumentOutOfRangeException(\"music_string\", \"music string too long\"\
    );\n\n        List<long> result = new List<long>();\n        int cur = 0;\n  \
    \      bool last_note_was_dot;\n\n        for (; cur < music_string.Length; cur++)\
    \ {\n            char c = music_string[cur];\n            if (c == '.') {\n  \
    \              // We are at the end of a note and need to process it completely.\n\
    \                result.Add(lastBeat(result));\n                last_note_was_dot\
    \ = false;\n            } else if (c == 'o') {\n                // We are at the\
    \ end of a note and need to process it completely.\n                result.Add(wholeNote(result));\n\
    \                last_note_was_dot = true;\n            } else if (last_note_was_dot\
    \ && !(c == '|')) {\n                // We are processing previous note. We need\
    \ to process this one too.\n                // Note that we are adding 1 to the\
    \ count for each time we get 'o' and we don't\n                // count 'o|' as\
    \ a separate note.\n                result.Add(halfNote(result));\n          \
    \  } else {\n                result.Add(quarterNote(result));\n            }\n\
    \        }\n        return result;", "        var lastNoteBeats = new List<long>();\n\
    \        // Notes count starts from 0\n        int currentNoteNumber = 0;\n  \
    \      // Loop that parses string and adds note number to list\n        foreach\
    \ (char c in music_string) {\n            switch (c) {\n                case 'o':\n\
    \                    // Whoever wrote this had no idea what a note was.\n    \
    \                // It only took a few minutes to make up this simple definition\
    \ of a note.\n                    lastNoteBeats.Add(4L);\n                   \
    \ break;\n                case 'o|':\n                    lastNoteBeats.Add(2L);\n\
    \                    break;\n                case '.|':\n                    lastNoteBeats.Add(1L);\n\
    \                    break;\n                default:\n                    //\
    \ If note is not specified, assume it is a whole note.\n                    lastNoteBeats.Add(4L);\n\
    \                    break;\n            }\n        }\n        // Add extra one\
    \ beat if string is smaller than one note\n        if (music_string.Length > 0)\
    \ {\n            lastNoteBeats.Add(1L);\n        }\n        return lastNoteBeats;",
  "        // Your code here\n        Regex r = new Regex(@\"^\\s*([a-zA-Z])(?:o|(?:\\\
    .|o|\\.)?|\\|)?\\s*(\\1?)\\s*$\");\n        Match m = r.Match(music_string);\n\
    \        List<long> result = new List<long>();\n        if (m.Success) {\n   \
    \         long o = 1L;\n            long last_o = 0L;\n            foreach (var\
    \ s in m.Groups[2].Captures) {\n                o = last_o;\n                last_o\
    \ = o;\n                result.Add(o);\n            }\n        }\n        return\
    \ result;", "        // Your code here...\n        music_string = music_string.ToLower();\n\
    \        if (music_string.IndexOf(\"o\") == -1) return new List<long>();\n   \
    \     long beats = 0;\n        music_string = music_string.Remove(0, 1);\n   \
    \     List<long> beat_list = new List<long>();\n        while (music_string.Length\
    \ > 0) {\n            long note = 0;\n            bool is_note = false;\n    \
    \        int count = 0;\n            while (music_string[count] != ' ') {\n  \
    \              note += Convert.ToInt64(music_string[count]);\n               \
    \ count++;\n            }\n            note += Convert.ToInt64(music_string[count]);\n\
    \            count++;\n            switch (music_string[count]) {\n          \
    \      case 'o':\n                case 'o|':\n                    note += 12;\n\
    \                    is_note = true;\n                    break;\n           \
    \     case '.|':\n                    note += 8;\n                    is_note\
    \ = true;\n                    break;\n            }\n            if (!is_note)\
    \ {\n                beat_list = (note % 12 == 0 ? note_list : note_list.Reverse()).TakeWhile((element)\
    \ => element % 12 == 0).ToList();\n                note_list = new List<long>();\n\
    \                if (note == 24) beat_list.Add(8);\n                else beat_list.Add(note);\n\
    \                beats = beat_list.Sum();\n                break;\n          \
    \  } else {\n                note_list.Add(note);\n            }\n           \
    \ music_string = music_string.Remove(0, count);\n        }\n        return (beat_list.Count\
    \ == 0 ? new List<long>() : beat_list);", "        bool note_found = false;\n\
    \        List<long> notes = new List<long>();\n        StringBuilder str = new\
    \ StringBuilder(music_string);\n        Regex note_regex = new Regex(@\"([\\-+])?(\\\
    w+)(\\w+)\");\n        MatchCollection matches = note_regex.Matches(str.ToString());\n\
    \        foreach (Match match in matches) {\n            note_found = false;\n\
    \            long note = -1;\n            Match note_match = match.Groups[2];\n\
    \            foreach (string s in note_match.Captures) {\n                note\
    \ = Convert.ToInt64(s);\n                note_found = true;\n            }\n \
    \           if (note_found) {\n                long note_type;\n             \
    \   note_type = Convert.ToInt64(note_match.Groups[2].Value);\n               \
    \ notes.Add(note);\n            }\n        }\n        return notes;", "      \
    \  if (music_string == null || music_string.Trim() == \"\") return new List<long>();\n\
    \n        music_string = music_string.ToLower();\n\n        string note;\n   \
    \     string rest;\n        int note_beats;\n        int note_duration;\n\n  \
    \      List<long> notes = new List<long>();\n\n        foreach (char c in music_string)\
    \ {\n            note = c;\n\n            if (note.ToCharArray()[0] == 'o') {\n\
    \                note_beats = 1;\n                rest = null;\n\n           \
    \     for (int i = 1; i < note.Length; i++) {\n                    if (!char.IsWhiteSpace(note.Substring(i,\
    \ 1)) && note.Substring(i, '|'.Length) != \"|\") {\n                        rest\
    \ += note.Substring(i, '|'.Length);\n                        note_beats++;\n \
    \                   }\n                }\n\n                if (rest == null)\
    \ rest = \"\";\n                note_duration = (new Regex(@\"\\d+\\.\").Matches(rest))\n\
    \                    .Cast<Match>()\n                    .Select(m => Convert.ToInt64(m.Value))\n\
    \                    .First();\n            }\n            else if (note.ToCharArray()[0]\
    \ == 'o|') {\n                note_beats = 2;\n                rest = null;\n\n\
    \                for (int i = 1; i < note.Length; i++) {\n                   \
    \ if (!char.IsWhiteSpace(note.Substring(i, 1)) && note.Substring(i, '|'.Length)\
    \ != \"|\") {\n                        rest += note.Substring(i, '|'.Length);\n\
    \                        note_beats++;\n                    }\n              \
    \  }\n\n                if (rest == null) rest = \"\";\n                note_duration\
    \ = (new Regex(@\"\\d+\\.\").Matches(rest))\n                    .Cast<Match>()\n\
    \                    .Select(m => Convert.ToInt64(m.Value))\n                \
    \    .First();\n            }\n            else if (note.ToCharArray()[0] == '.|')\
    \ {\n                note_beats = 1;\n                rest = null;\n\n       \
    \         for (int i = 1; i < note.Length; i++) {\n                    if (!char.IsWhiteSpace(note.Substring(i,\
    \ 1)) && note.Substring(i, '|'.Length) != \"|\") {\n                        rest\
    \ += note.Substring(i, '|'.Length);\n                        note_beats++;\n \
    \                   }\n                }\n\n                if (rest == null)\
    \ rest = \"\";\n                note_duration = (new Regex(@\"\\d+\\.\").Matches(rest))\n\
    \                    .Cast<Match>()\n                    .Select(m => Convert.ToInt64(m.Value))\n\
    \                    .First();\n            }\n\n            if (note != null\
    \ && note_beats > 0) {\n                notes.Add((long)note_duration * note_beats);\n\
    \            }\n        }\n\n        return notes;", "        var beat_per_note\
    \ = new List<long>();\n        var current_note = new Note();\n\n        // Create\
    \ a list of notes found in music_string\n        List<Note> notes = music_string.Split(new[]\
    \ { \"|\" }, StringSplitOptions.RemoveEmptyEntries).Select(x => new Note(x)).ToList();\n\
    \n        // For each note, count how many notes are before that note\n      \
    \  foreach (var note in notes) {\n            beat_per_note.Add(note.BeatsBefore());\n\
    \        }\n\n        // For each note, add its number of beats before and after\
    \ the note to list of beats for each note\n        foreach (var note in notes)\
    \ {\n            beat_per_note.Add(note.BeatsBefore() + note.BeatsAfter());\n\
    \        }\n\n        // Return list of integers\n        return beat_per_note;",
  "        List<long> result = new List<long>();\n\n        foreach (var note in music_string.Split('|'))\
    \ {\n            if (note[0] == '.') {\n                result.Add((long)4);\n\
    \            }\n            else if (note[0] == 'o') {\n                result.Add((long)4);\n\
    \            }\n            else if (note[0] == 'o|') {\n                result.Add((long)2);\n\
    \            }\n            else if (note[0] == '.|') {\n                result.Add((long)1);\n\
    \            }\n            else {\n                throw new Exception(\"Unexpected\
    \ note: \" + note);\n            }\n        }\n        return result;", "    \
    \    music_string = music_string.ToLower();\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| o\", \"o|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .| o\", \"o.|\");\n        music_string = music_string.Replace(\"\
    o o| .| o| o| .| .| .| .| .", "        if (music_string == null || music_string.Length\
    \ == 0) {\n            return null;\n        }\n        var notes = music_string.Trim().Split('\
    \ ');\n        var lasts = new List<long>();\n        var lasts_length = 0;\n\
    \        var beats_per_note = int.MaxValue;\n        var beat_length = new byte[beats_per_note];\n\
    \        for (var i = 0; i < notes.Length; i++) {\n            var beats = notes[i].Length;\n\
    \            var note = notes[i];\n            if (note == 'o') {\n          \
    \      lasts.Add(beats);\n                lasts_length = beats;\n            }\n\
    \            if (note == '.') {\n                lasts[lasts_length - 1] = lasts[lasts_length\
    \ - 1] + beats / 4;\n            }\n            if (note == '|') {\n         \
    \       lasts[lasts_length - 1] = lasts[lasts_length - 1] + beats / 2;\n     \
    \       }\n        }\n        long result = 0;\n        for (var i = 0; i < lasts_length;\
    \ i++) {\n            result = result + lasts[i];\n        }\n        if (result\
    \ < 0) {\n            result = 0;\n        }\n        var result = new List<long>(new\
    \ long[] {result});\n        return result;", "        var splitted = music_string.Split(new\
    \ char[] { '|' });\n        var list = splitted.Select(x => new List<long>() {\
    \ Convert.ToInt64(x) }).ToList();\n        return list;", "        if (music_string.Length\
    \ == 0) return new List<long>();\n        music_string = music_string.Trim();\n\
    \        List<long> notes = new List<long>();\n        int beats = 0;\n      \
    \  // We can't know number of beats per musical note unless we get whole note.\n\
    \        // But if we get whole note, we know that first note is lasts four beats.\n\
    \        int first_note = music_string[0];\n        switch (first_note) {\n  \
    \          case 'o': // whole note\n                if (music_string.Substring(0,\
    \ 4).Length == 0) beats = 4; // lasts 4 beats\n                else if (music_string.Substring(0,\
    \ 4).Length == 4) beats = 4; // lasts 4 beats\n                else beats = music_string.Substring(0,\
    \ 4).Length;\n                break;\n            case 'o|': // half note\n  \
    \              if (music_string.Substring(0, 2).Length == 0) beats = 2;\n    \
    \            else if (music_string.Substring(0, 2).Length == 2) beats = 2;\n \
    \               else beats = music_string.Substring(0, 2).Length;\n          \
    \      break;\n            case 'ox': // quarter note\n                beats =\
    \ 2;\n                break;\n            case '.|': // half note\n          \
    \      if (music_string.Length == 0) beats = 1; // lasts 1 beat\n            \
    \    else beats = music_string.Length;\n                break;\n            case\
    \ 'ox': // quarter note\n                beats = 1;\n                break;\n\
    \        }\n        music_string = music_string.Substring(1, music_string.Length\
    \ - 1).Trim();\n        // If we're getting whole note we need to check what is\
    \ the last note\n        // If it's '.| .| .| .| .| .| .| o' we can say that last\
    \ note is o\n        if (music_string.Length == 0) return notes;\n        int\
    \ last_note = music_string[music_string.Length - 1];\n        switch (last_note)\
    \ {\n            case 'o': // whole note\n                if (music_string.Substring(0,\
    \ 4).Length == 0) beats = 4; // lasts 4 beats\n                else if (music_string.Substring(0,\
    \ 4).Length == 4) beats = 4; // lasts 4 beats\n                else beats = music_string.Substring(0,\
    \ 4).Length;\n                break;\n            case 'o|': // half note\n  \
    \              if (music_string.Substring(0, 2).Length == 0) beats = 2;\n    \
    \            else if (music_string.Substring(0, 2).Length == 2) beats = 2;\n \
    \               else beats = music_string.Substring(0, 2).Length;\n          \
    \      break;\n            case 'ox': // quarter note\n                beats =\
    \ 2;\n                break;\n            case '.|': // half note\n          \
    \      if (", "        List<long> beats = new List<long>();\n        List<char>\
    \ notes = new List<char>();\n\n        // For each note\n        foreach (char\
    \ c in music_string) {\n            // if note is dot or pipe\n            if\
    \ (c == '.' || c == '|') {\n                // append note to list of notes\n\
    \                notes.Add(c);\n            }\n            // if note is o\n \
    \           else if (c == 'o') {\n                // if the note has already 4\
    \ beats, increment the beat count by 4\n                if (beats.Count == 4)\
    \ {\n                    beats.Add(beats.Last() + 4);\n                }\n   \
    \             // if the note has already 2 beats, increment the beat count by\
    \ 2\n                else if (beats.Count == 2) {\n                    beats.Add(beats.Last()\
    \ + 2);\n                }\n                // if the note has already 1 beat,\
    \ increment the beat count by 1\n                else if (beats.Count == 1) {\n\
    \                    beats.Add(beats.Last() + 1);\n                }\n       \
    \         // Otherwise append 0 to beats list and add 4 to current beat count\n\
    \                else {\n                    beats.Add(0);\n                 \
    \   beats.Add(4);\n                }\n            }\n            // else append\
    \ 0 to beats list and add 1 to current beat count\n            else {\n      \
    \          beats.Add(0);\n                beats.Add(1);\n            }\n     \
    \   }\n        return beats;", "        var music_in_string = music_string.Trim().ToLowerInvariant();\n\
    \        music_string = \".\" + music_string;\n        var music_in_string_list\
    \ = music_in_string.Split('|');\n        var music_notes_list_new = new List<long>();\n\
    \        var last_note_type = 0;\n        foreach (var music_note in music_in_string_list)\
    \ {\n            var note_number = Convert.ToInt32(music_note);\n            if\
    \ (note_number == 0) continue;\n            var note_type = Convert.ToInt32(music_note[music_note.Length\
    \ - 1]);\n            if (note_type == last_note_type) continue;\n           \
    \ if (note_type == -1) {\n                music_notes_list_new.Add(note_number);\n\
    \                continue;\n            }\n            music_notes_list_new.Add(note_number);\n\
    \            last_note_type = note_type;\n        }\n        return music_notes_list_new;",
  "        // Your code goes here!\n        long beats = 0;\n        List<long> beats_so_far\
    \ = new List<long>();\n        int note_count = 0;\n        foreach (char c in\
    \ music_string) {\n            switch (c) {\n                case 'o':\n     \
    \           case 'O':\n                    beat_count += 4;\n                \
    \    note_count = 1;\n                    break;\n                case '|':\n\
    \                    beat_count += 2;\n                    note_count = 2;\n \
    \                   break;\n                case '.':\n                    beat_count\
    \ += 1;\n                    note_count = 4;\n                    break;\n   \
    \             case ' ':\n                case ',':\n                    beat_count\
    \ += 1;\n                    break;\n                case '.|':\n            \
    \        beat_count += 1;\n                    break;\n                default:\n\
    \                    throw new Exception(\"Unrecognized character\");\n      \
    \      }\n            beats_so_far.Add(beat_count);\n        }\n        return\
    \ beats_so_far;", "        List<long> beats = new List<long>();\n        bool\
    \ found = false;\n        int beat = 1;\n        char current_char = music_string[0];\n\
    \        beats.Add(beat);\n        // Parse from first char to last char excluding\
    \ 'o' and '|'.\n        for (int i = 1; i < music_string.Length; i++) {\n    \
    \        current_char = music_string[i];\n            int is_last_note = (current_char\
    \ == 'o') || (current_char == '|');\n            if (is_last_note) {\n       \
    \         found = true;\n                if (i < music_string.Length - 1) {\n\
    \                    current_char = music_string[i + 1];\n                } else\
    \ {\n                    break;\n                }\n            }\n          \
    \  beats.Add(beat);\n            beat += 1;\n        }\n        if (!found) {\n\
    \            Debug.Assert(false, \"No music found\");\n        }\n        return\
    \ beats;", "        List<long> list = new List<long>();\n        string note_character\
    \ = \"o\";\n        string note = \"\";\n        int current_beat = 0;\n     \
    \   int current_beat_counter = 0;\n        bool note_found = false;\n        foreach\
    \ (char c in music_string) {\n            if (c.Equals(note_character)) {\n  \
    \              if (note_found) {\n                    list.Add(current_beat);\n\
    \                }\n                list.Add(current_beat + 1);\n            \
    \    current_beat_counter = 1;\n                current_beat++;\n            \
    \    note_found = true;\n            } else {\n                if (note_found)\
    \ {\n                    list.Add(current_beat);\n                }\n        \
    \        current_beat_counter++;\n                if (current_beat_counter ==\
    \ 2) {\n                    note_found = false;\n                }\n         \
    \   }\n        }\n        if (note_found) {\n            list.Add(current_beat);\n\
    \        }\n        return list;", "        if (music_string.Count() == 0) {\n\
    \            throw new ArgumentException(\"music string cannot be empty\");\n\
    \        }\n\n        // We keep a stack of notes\n        var stack = new Stack<MusicNote>();\n\
    \n        // We keep track of which note was last added because we might need\
    \ to take that into account in output\n        var last_note_added = MusicNote.C0;\n\
    \n        // We keep track of how many beats does each note last\n        List<long>\
    \ last_beats = new List<long>();\n\n        // For each character in music_string\n\
    \        foreach (var character in music_string) {\n            switch (character)\
    \ {\n                default:\n                    // 'o' - whole note, lasts\
    \ four beats\n                    if (stack.Count > 0 && stack.Peek().Note ==\
    \ MusicNote.C0) {\n                        last_beats.Add((long) 4);\n       \
    \             }\n                    else {\n                        last_beats.Add((long)\
    \ 1);\n                    }\n                    stack.Push(MusicNote.C0);\n\
    \                    break;\n                case 'o':\n                    stack.Push(MusicNote.WholeNote);\n\
    \                    break;\n                case 'o|':\n                    stack.Push(MusicNote.HalfNote);\n\
    \                    break;\n                case '.|':\n                    stack.Push(MusicNote.QuarterNote);\n\
    \                    break;\n            }\n            last_note_added = character;\n\
    \        }\n\n        // We need to take into account the last note in the string\
    \ because we might need to take that into account\n        // in output. For example,\
    \ let's take the last 'o' from the input string 'o o| .| o| o| .| .| .| .| o o'.\n\
    \        // It will last four beats, but it only lasts two beats in total, so\
    \ we need to add two more 'o'\n        // characters to our output string because\
    \ the last 'o' in the input string was a half note.\n        if (stack.Count >\
    \ 0 && stack.Peek().Note == MusicNote.C0) {\n            last_beats.Add((long)\
    \ 4);\n        }\n\n        // Return result\n        return last_beats;", " \
    \       List<long> beats = new List<long>();\n        // Loop through the string\n\
    \        string temp = \"\";\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            // Append current character to the temp string\n       \
    \     temp = temp + music_string[i];\n\n            // 'o|' case - check if this\
    \ character is last or not\n            if (temp.Length > 1 && (temp[0] == 'o'\
    \ || temp[0] == '|')) {\n                beats.Add(Convert.ToInt64(temp.Substring(1,\
    \ temp.Length - 1)));\n                // Remove current character from the temp\
    \ string\n                temp = temp.Remove(1, temp.Length - 1);\n          \
    \  }\n        }\n        return beats;", "        // Your code here\n        //\
    \ your code here\n        List<long> result = new List<long>();\n\n        //\
    \ Your code here\n        // your code here\n        foreach (char c in music_string)\
    \ {\n            switch (c) {\n                case 'o':\n                case\
    \ 'O':\n                case 'o|':\n                case 'o|':\n             \
    \   case 'o|':\n                    result.Add((long)4);\n                   \
    \ break;\n                case '.|':\n                    result.Add((long)1);\n\
    \                    break;\n            }\n        }\n        // Your code here\n\
    \        // your code here\n        return result;", "        List<long> result\
    \ = new List<long>(music_string.Count(c => c != '|'));\n\n        for (int i =\
    \ 0; i < music_string.Length; i++) {\n            if ((music_string[i] == 'o'\
    \ || music_string[i] == 'o|') && i < music_string.Length - 1 && music_string[i\
    \ + 1] == '|') {\n                result.Add(result.Count + 1);\n            \
    \    i++;\n            } else if ((music_string[i] == '.' || music_string[i] ==\
    \ '.|') && i < music_string.Length - 1 && music_string[i + 1] == '|') {\n    \
    \            result.Add(result.Count + 2);\n                i++;\n           \
    \ }\n        }\n        return result;", "        string pattern = @\"o|\\?|\\\
    |\\.|\\?|\\?|\\?|\\?|\\?|\\?|\\?|\\?|\\?|\\.|\\?|\\?|\\?\";\n        var music\
    \ = _NotePattern.Matches(music_string).OfType<Match>().Select(m => m.Value).ToArray();\n\
    \        long[] notes_without_last = GetNotesWithoutLast(music);\n        List<long>\
    \ notes_without_last_with_beat = new List<long>(notes_without_last);\n       \
    \ notes_without_last_with_beat.Add(notes_without_last_with_beat.Min());\n    \
    \    var last_notes_without_last = _NotePattern.Matches(music_string).OfType<Match>().Where(m\
    \ => m.Value.Length == 1).Select(m => m.Value).ToArray();\n        notes_without_last_with_beat.AddRange(last_notes_without_last);\n\
    \        return notes_without_last_with_beat;", "        List<long> beats = new\
    \ List<long>();\n        char note = '\\0';\n        bool last_note = false;\n\
    \        string temp = \"\";\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == '.') {\n                note = '\\\
    0';\n                beats.Add(beats.Count);\n                last_note = true;\n\
    \            } else if (music_string[i] == 'o') {\n                if (last_note)\
    \ {\n                    beats.Add(beats.Count);\n                    last_note\
    \ = false;\n                }\n                note = 'o';\n                temp\
    \ = \"\";\n            } else if (note == 'o') {\n                temp = temp\
    \ + music_string[i];\n            } else if (note == 'o|') {\n               \
    \ temp = temp + music_string[i];\n                beats.Add(beats.Count);\n  \
    \              last_note = false;\n                note = '\\0';\n           \
    \ } else if (note == '.|') {\n                temp = temp + music_string[i];\n\
    \                beats.Add(beats.Count);\n                last_note = false;\n\
    \                note = '\\0';\n            } else if (note == '\\0') {\n    \
    \            temp = temp + music_string[i];\n                beats.Add(beats.Count);\n\
    \                last_note = false;\n                note = '\\0';\n         \
    \   }\n        }\n        return beats;", "        List<long> result = new List<long>();\n\
    \        string symbols = \"\";\n        string symbol = \"\";\n        long beats;\n\
    \        for (int i = 0; i < music_string.Length; i++) {\n            char c =\
    \ music_string[i];\n            if (c == '.') {\n                if (!symbols.Contains(\"\
    |\"))\n                    result.Add(beats);\n                beats = 0;\n  \
    \              symbol = \"\";\n            } else if (c == 'o') {\n          \
    \      beats += 4;\n                symbol += \"o\";\n            } else if (c\
    \ == '|') {\n                if (symbols.Contains(\"o\"))\n                  \
    \  result.Add(beats);\n                beats = 0;\n                symbol += \"\
    |\";\n                symbols += \"|\";\n            } else if (symbols.Contains(\"\
    o\") && c == 'o') {\n                result.Add(beats);\n                symbol\
    \ += \"|\";\n                symbols += \"|\";\n            } else if (symbols.Contains(\"\
    |\")) {\n                if (symbols.Contains(\"o\"))\n                    result.Add(beats);\n\
    \                beats = 0;\n                symbol += \"|\";\n              \
    \  symbols += \"|\";\n            } else {\n                symbols += c;\n  \
    \          }\n        }\n        return result;", "        List<long> beats =\
    \ new List<long>();\n        bool last_note = false;\n        bool last_note_and_rest\
    \ = false;\n\n        music_string = music_string.Trim();\n\n        char[] chars\
    \ = music_string.ToCharArray();\n        foreach (char c in chars) {\n       \
    \     bool note_part = c == '.';\n            bool rest_part = c == '|';\n   \
    \         if (last_note || last_note_and_rest) {\n                beats.Add(c.ToInt32());\n\
    \            }\n            if (note_part) {\n                last_note = true;\n\
    \                last_note_and_rest = false;\n            } else if (!note_part\
    \ && rest_part) {\n                last_note = false;\n                last_note_and_rest\
    \ = true;\n            }\n        }\n\n        return beats;", "        var output\
    \ = new List<long>(new long[] { 0L });\n\n        // Your code goes here.", " \
    \       // TODO: Complete this function\n        var notes = music_string.Split('\
    \ ');\n        var beats_array = new long[notes.Length];\n\n        for (var index\
    \ = 0; index < notes.Length; index++) {\n            switch (notes[index]) {\n\
    \                case \"o\":\n                    beats_array[index] = (long)4L;\n\
    \                    break;\n                case \"o|\":\n                  \
    \  beats_array[index] = (long)2L;\n                    break;\n              \
    \  case \".|\":\n                    beats_array[index] = (long)1L;\n        \
    \            break;\n                default:\n                    throw new ArgumentOutOfRangeException(\"\
    Invalid note format\");\n            }\n        }\n\n        var result = new\
    \ List<long>(beats_array);\n        return result;", "        List<long> result\
    \ = new List<long>(new long[] { 0L });\n        music_string\n            .Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n            .ToList()\n\
    \            .ForEach(\n                music_element => {\n                 \
    \   if (music_element.ToLower().StartsWith(\"o\")) {\n                       \
    \ result.Add(result.Last() + 4L);\n                    } else if (music_element.ToLower().StartsWith(\"\
    o|\")) {\n                        result.Add(result.Last() + 2L);\n          \
    \          } else if (music_element.ToLower().StartsWith(\".|\")) {\n        \
    \                result.Add(result.Last() + 1L);\n                    } else {\n\
    \                        throw new ArgumentOutOfRangeException(\"music_string\"\
    );\n                    }\n                });\n\n        return result;", " \
    \       music_string = music_string.Replace(\"o\", \"001\").Replace(\".\", \"\
    111\");\n        music_string = music_string.Replace(\"o|\", \"002\").Replace(\"\
    |\", \"010\");\n        music_string = music_string.Replace(\"o\", \"011\").Replace(\"\
    |\", \"101\");\n        music_string = music_string.Replace(\".|\", \"100\");\n\
    \n        music_string = music_string.Replace(\"o\", \"011\").Replace(\"o|\",\
    \ \"101\").Replace(\"|\", \"010\").Replace(\".|\", \"100\");\n        music_string\
    \ = music_string.Replace(\"o|\", \"002\").Replace(\"|\", \"001\").Replace(\".|\"\
    , \"111\");\n\n        music_string = music_string.Replace(\"|\", \"010\");\n\
    \        music_string = music_string.Replace(\".|\", \"100\");\n        music_string\
    \ = music_string.Replace(\"|\", \"001\");\n        music_string = music_string.Replace(\"\
    o|\", \"101\");\n\n        List<long> results = new List<long>();\n        List<char>\
    \ stringCharacters = new List<char>();\n        long currentNote = 0;\n      \
    \  foreach (char c in music_string) {\n            if (c != '0') {\n         \
    \       stringCharacters.Add(c);\n            } else {\n                results.Add(currentNote);\n\
    \                currentNote++;\n            }\n        }\n        results.Add(currentNote);\n\
    \        return results;", "        // Your code here\n        \n        List<long>\
    \ result = new List<long>();\n        StringBuilder buffer = new StringBuilder();\n\
    \        char[] note = music_string.ToLower().ToCharArray();\n        bool started\
    \ = false;\n        bool inNote = false;\n        for (int i = 0; i < note.Length;\
    \ i++) {\n            if (!started && (note[i] == 'o' || note[i] == '|')) {\n\
    \                started = true;\n                inNote = true;\n           \
    \ }\n            if (started && (note[i] == '.' || note[i] == '|')) {\n      \
    \          inNote = false;\n                result.Add(0);\n                buffer.Remove(0,\
    \ 1);\n            }\n            if (!inNote && note[i] == 'o') {\n         \
    \       result.Add(4);\n                buffer.Remove(0, 1);\n            }\n\
    \            if (inNote && note[i] == '|') {\n                result.Add(2);\n\
    \                buffer.Remove(0, 1);\n            }\n        }\n        return\
    \ new List<long>(result.ToArray());", "        // Step 1: Tokenize the string\
    \ into tokens\n        var tokens = music_string.Split(' ');\n\n        // Step\
    \ 2: For each token, convert it into integer\n        // NOTE:\n        // If\
    \ your music string contains 'o' multiple times, please ensure that\n        //\
    \ only one of them will be used to define a single note\n        var notes = tokens.Select(t\
    \ =>\n        {\n            switch (t)\n            {\n                case \"\
    o\":\n                    return 0L;\n                case \"o|\":\n         \
    \           return 2L;\n                case \".|\":\n                    return\
    \ 1L;\n                default:\n                    throw new ArgumentException(\"\
    Bad musical note found!\");\n            }\n        }).ToList();\n\n        //\
    \ Step 3: Add the sum of each note to result\n        var notes_sum = notes.Sum();\n\
    \n        // Step 4: Return result as a list\n        return notes.Select(n =>\
    \ n * notes_sum).ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (char c in music_string) {\n            string note = GetNote(c);\n\
    \            if (note.Equals(\"o\") || note.Equals(\"o|\") || note.Equals(\".|\"\
    )) {\n                result.Add(GetBeats(note));\n            }\n        }\n\
    \        return result;", "        if (music_string.Length < 2) throw new ArgumentException(\"\
    music_string too short\");\n        List<long> beats = new List<long>();\n   \
    \     string current_music = music_string;\n        int beats_in_music_string\
    \ = 0;\n        int beats_in_current_music = 1;\n        char current_music_character;\n\
    \        while ((current_music_character = current_music[0]) != '\\0') {\n   \
    \         beats_in_music_string += beats_in_current_music;\n            if (current_music_character\
    \ == '|') {\n                beats_in_current_music = 2;\n                beats.Add(beats_in_music_string);\n\
    \                beats_in_music_string = 0;\n            }\n            else if\
    \ (current_music_character == 'o') {\n                beats_in_music_string +=\
    \ 1;\n                beats.Add(beats_in_music_string);\n                beats_in_music_string\
    \ = 0;\n                beats_in_current_music = 4;\n                beats.Add(beats_in_music_string);\n\
    \            }\n            else if (current_music_character == '.') {\n     \
    \           beats_in_music_string += 1;\n                beats.Add(beats_in_music_string);\n\
    \                beats_in_music_string = 0;\n                beats_in_current_music\
    \ = 1;\n                beats.Add(beats_in_music_string);\n            }\n   \
    \         else {\n                throw new ArgumentException(\"music format error\"\
    );\n            }\n            current_music = current_music.Substring(1, current_music.Length\
    \ - 1);\n        }\n        return beats;", "        List<long> result = new List<long>();\n\
    \        int prev_beat = -1;\n        int prev_beat2 = -1;\n        int beat =\
    \ 1;\n        int beat2 = 1;\n        int beat3 = 1;\n        int beat4 = 1;\n\
    \        int prev_beat3 = -1;\n        int prev_beat4 = -1;\n        string music_str_2\
    \ = music_string.Trim().ToLower();\n        music_str_2 = music_str_2.Replace(\"\
    .\", \"\");\n        music_str_2 = music_str_2.Replace(\" \", \"\");\n       \
    \ for (int i = 0; i < music_str_2.Length; i++) {\n            music_str_2 = music_str_2.Replace(\"\
    o\", \"0 \");\n            music_str_2 = music_str_2.Replace(\"|\", \"1 \");\n\
    \            music_str_2 = music_str_2.Replace(\".|\", \"2 \");\n            music_str_2\
    \ = music_str_2.Replace(\"|.\", \"3 \");\n            music_str_2 = music_str_2.Replace(\"\
    |.|\", \"4 \");\n            music_str_2 = music_str_2.Replace(\"o.|\", \"5 \"\
    );\n            music_str_2 = music_str_2.Replace(\"o.|.\", \"6 \");\n       \
    \     music_str_2 = music_str_2.Replace(\"o|.\", \"7 \");\n            music_str_2\
    \ = music_str_2.Replace(\"o|.|\", \"8 \");\n            music_str_2 = music_str_2.Replace(\"\
    o..\", \"9 \");\n            music_str_2 = music_str_2.Replace(\"o..|\", \"10\
    \ \");\n            music_str_2 = music_str_2.Replace(\"o.|.\", \"11 \");\n  \
    \          music_str_2 = music_str_2.Replace(\"o.|.|\", \"12 \");\n          \
    \  music_str_2 = music_str_2.Replace(\"o..|.\", \"13 \");\n            music_str_2\
    \ = music_str_2.Replace(\"o..|.|\", \"14 \");\n            music_str_2 = music_str_2.Replace(\"\
    o..|..\", \"15 \");\n            music_str_2 = music_str_2.Replace(\"o..|..|\"\
    , \"16 \");\n            music_str_2 = music_str_2.Replace(\"o...\", \"17 \");\n\
    \            music_str_2 = music_str_2.Replace(\"o...|\", \"18 \");\n        \
    \    music_str_2 = music_str_2.Replace(\"o...|.\", \"19 \");\n            music_str_2\
    \ = music_str_2.Replace(\"o...|.|\", \"20 \");\n            music_str_2 = music_str_2.Replace(\"\
    o...|..\", \"21 \");\n            music_str_2 = music_", "        var temp = new\
    \ List<long>();\n        StringBuilder sb = new StringBuilder();\n\n        foreach\
    \ (var ch in music_string.ToUpper()) {\n            switch (ch) {\n          \
    \      case 'O':\n                    if (sb.Length > 0) {\n                 \
    \       temp.Add(sb.Length);\n                        sb.Clear();\n          \
    \          }\n                    break;\n                case '|':\n        \
    \            if (sb.Length > 0) {\n                        temp.Add(sb.Length);\n\
    \                        sb.Clear();\n                    }\n                \
    \    break;\n                case '.':\n                    temp.Add(sb.Length);\n\
    \                    break;\n                default:\n                    sb.Append(ch);\n\
    \                    break;\n            }\n        }\n\n        if (sb.Length\
    \ > 0) {\n            temp.Add(sb.Length);\n        }\n\n        return temp;",
  "        // Your code here\n        List<long> music_chars = new List<long>();\n\
    \        bool is_first_note = true;\n        string note = \"\";\n        long\
    \ note_value = 0;\n        bool note_is_a_double = true;\n        int beat = 0;\n\
    \        for (int i = 0; i < music_string.Length; i++) {\n            char c =\
    \ music_string[i];\n            if (c == 'o') {\n                if (is_first_note)\
    \ {\n                    is_first_note = false;\n                    note = \"\
    \";\n                    note_is_a_double = true;\n                    beat =\
    \ 0;\n                }\n                else {\n                    if (note_is_a_double)\
    \ {\n                        note_is_a_double = false;\n                     \
    \   note += c;\n                    }\n                    else {\n          \
    \              note += c;\n                        note_is_a_double = true;\n\
    \                    }\n                }\n            }\n            else if\
    \ (c == '|') {\n                if (note_is_a_double) {\n                    note_is_a_double\
    \ = false;\n                    note += c;\n                }\n              \
    \  else {\n                    note += c;\n                    note_is_a_double\
    \ = true;\n                }\n            }\n            else if (c == ' ' ||\
    \ c == '.') {\n                if (note_is_a_double) {\n                    note_is_a_double\
    \ = false;\n                    note += c;\n                    note_value +=\
    \ Math.Pow(note_is_a_double ? 4L : 3L, beat);\n                    music_chars.Add(note_value);\n\
    \                    beat = 0;\n                    note = \"\";\n           \
    \     }\n            }\n            else {\n                if (note != \"\")\
    \ {\n                    note_value += Math.Pow(note_is_a_double ? 4L : 3L, beat);\n\
    \                    music_chars.Add(note_value);\n                    beat =\
    \ 0;\n                    note = \"\";\n                }\n                note_value\
    \ += Math.Pow(note_is_a_double ? 4L : 3L, beat);\n                music_chars.Add(note_value);\n\
    \                beat++;\n            }\n        }\n        return music_chars;",
  "        // Return empty list if music string is empty (nothing to parse)\n    \
    \    if (music_string.IsNullOrEmpty()) {\n            return new List<long>();\n\
    \        }\n        music_string = music_string.Replace(' ', ',').Trim(',');\n\
    \        // Split string into array of 'o', '|', ','\n        string[] notes =\
    \ music_string.Split(new string[] { \",\" }, StringSplitOptions.RemoveEmptyEntries);\n\
    \        // Count 'o' notes and '|' notes\n        int o_notes = notes.Count(n\
    \ => n == 'o' ? true : false);\n        int o_or_notes = notes.Count(n => n ==\
    \ 'o' ? false : true);\n        // For each note count how many beats does it\
    \ last\n        List<long> notes_beats = new List<long>();\n        notes_beats.Add(o_notes);\n\
    \        notes_beats.Add(o_or_notes);\n        // If 'o' note is last, count 4\
    \ beats\n        if (o_notes == notes_beats.First()) {\n            notes_beats.Add((notes_beats.Last()\
    \ - o_notes) / 4);\n        }\n        // If '|' note is last, count 2 beats\n\
    \        if (o_or_notes == notes_beats.First()) {\n            notes_beats.Add((notes_beats.Last()\
    \ - o_or_notes) / 2);\n        }\n        // If 'o' is last, but '|' is not, count\
    \ 1 beat\n        if (o_notes == notes_beats.First() && o_or_notes != notes_beats.First())\
    \ {\n            notes_beats.Add(notes_beats.Last() - o_or_notes);\n        }\n\
    \        // If 'o' is last, and '|' is last, count 1 beat\n        if (o_notes\
    \ == notes_beats.First() && o_or_notes == notes_beats.First()) {\n           \
    \ notes_beats.Add(notes_beats.Last());\n        }\n        return notes_beats;",
  '        // your implementation here', "        List<long> beats = new List<long>();\n\
    \        for (int i = 0; i < music_string.Length; i++) {\n            char current\
    \ = music_string[i];\n            bool is_last_char = false;\n            switch\
    \ (current) {\n                case 'o':\n                    is_last_char = true;\n\
    \                    beats.Add(0L);\n                    break;\n            \
    \    case 'o|':\n                    is_last_char = true;\n                  \
    \  beats.Add(0L);\n                    break;\n                case '.|':\n  \
    \                  is_last_char = true;\n                    beats.Add(0L);\n\
    \                    break;\n                default:\n                    if\
    \ (is_last_char) {\n                        beats.Add(1L);\n                 \
    \       is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.Add(2L);\n                \
    \        is_last_char = false;\n                    } else if (is_last_char &&\
    \ current == '|') {\n                        beats.", "        // TODO: Fill in\
    \ the parsing logic here\n        // Make sure your input is valid and return\
    \ list of integers\n        var notes = new List<long>();\n        for (int i\
    \ = 0; i < music_string.Length; i++) {\n            char c = music_string[i];\n\
    \            if (c == 'o' || c == '|') {\n                notes.Add(4);\n    \
    \            notes.Add(2);\n                if (notes.Count == 3) {\n        \
    \            notes.Add(1);\n                }\n                if (notes.Count\
    \ == 4) {\n                    notes.Add(2);\n                }\n            }\n\
    \            else {\n                notes.Add(1);\n            }\n        }\n\
    \        return notes;", "        var result = new List<long>();\n        var\
    \ music_notes = music_string.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n\
    \            .Where(x => char.IsWhiteSpace(x))\n            .Select(x => new {\
    \ Note = x, Beats = 4, Count = 1, Count = 1 })\n            .ToArray();\n    \
    \    foreach (var note in music_notes) {\n            if (note.Note == 'o' ||\
    \ note.Note == '|' || note.Note == '.') {\n                result.Add((long)Math.Ceiling(note.Count\
    \ / note.Beats));\n            }\n            else {\n                for (int\
    \ i = note.Beats; i < 16; i++) {\n                    note.Count += note.Beats;\n\
    \                    note.Beats--;\n                    if (note.Count > note.Beats\
    \ * note.Beats) {\n                        note.Count -= note.Beats;\n       \
    \                 note.Beats++;\n                    }\n                    result.Add((long)Math.Ceiling(note.Count\
    \ / note.Beats));\n                }\n            }\n        }\n        return\
    \ result;", "        var music_parts = music_string.Split('|');\n        List<long>\
    \ beats = new List<long>();\n        beats.Add(0);\n        foreach (string part\
    \ in music_parts) {\n            long beat = 0;\n            string note = part.TrimStart();\n\
    \            int octave = part.Length > 1 ? part[1][0] - '0' : 4;\n          \
    \  if (note.Length > 0) {\n                bool is_half_note = note[0] == '.';\n\
    \                if (is_half_note) {\n                    note = note.Substring(1);\n\
    \                }\n                note = note.Substring(0, note.Length - 1);\n\
    \                switch (note[0]) {\n                    case 'o':\n         \
    \               beat = octave * 4L;\n                        break;\n        \
    \            case 'o|':\n                        beat = octave * 2L;\n       \
    \                 break;\n                    case '.|':\n                   \
    \     beat = octave * 1L;\n                        break;\n                  \
    \  default:\n                        throw new ArgumentException(\"Unknown note\
    \ \" + note + \" in music string\");\n                }\n                if (is_half_note)\
    \ {\n                    beats.Add(beat + 2L);\n                } else {\n   \
    \                 beats.Add(beat);\n                }\n            }\n       \
    \ }\n        return beats;", "        // Your code goes here!\n        List<long>\
    \ result = new List<long>();\n        foreach (char c in music_string) {\n   \
    \         if (c == 'o') {\n                result.Add((long)4);\n            }\
    \ else if (c == 'o|') {\n                result.Add((long)2);\n            } else\
    \ if (c == '.|') {\n                result.Add((long)1);\n            } else {\n\
    \                throw new Exception(\"Input string is not in expected format\"\
    );\n            }\n        }\n        return result;", "        // Implement me!\n\
    \        List<long> result = new List<long>();\n        if (music_string.Length\
    \ == 0) {\n            return result;\n        }\n\n        List<long> beats =\
    \ new List<long>();\n        char next_char = music_string.First();\n        while\
    \ (next_char != '\\0') {\n            next_char = music_string[0];\n         \
    \   if (next_char == '.') {\n                next_char = music_string[1];\n  \
    \              if (next_char == '|') {\n                    next_char = music_string[2];\n\
    \                }\n            }\n            beats.Add(0);\n        }\n    \
    \    return result;", "        if (music_string == null || !music_string.Any())\n\
    \            throw new ArgumentNullException(music_string, \"music_string\");\n\
    \n        // Use a StringBuilder here so that we don't have to allocate new memory\
    \ when \n        // we make changes to it\n        StringBuilder builder = new\
    \ StringBuilder(music_string);\n\n        // We keep track of the number of beats\
    \ we have for each note type\n        Dictionary<string, long> beats = new Dictionary<string,\
    \ long>() {\n            { \"o\", 0L },\n            { \"o|\", 0L },\n       \
    \     { \".|\", 0L }\n        };\n\n        // The current beat we are on\n  \
    \      long current_beat = 0L;\n\n        // The notes we are parsing\n      \
    \  List<int> notes = new List<int>();\n\n        // The next note we are parsing\n\
    \        int current_note = 0;\n\n        while (current_note < notes.Count) {\n\
    \            string note;\n\n            if (builder.Length > 0)\n           \
    \     note = builder.Remove(0, 1); // Remove one character from our buffer\n\n\
    \            if (note == null || note.ToLower() == \"o\")\n                note\
    \ = \"o\";\n\n            notes.Add(note.ToInt32(CultureInfo.InvariantCulture));\n\
    \n            beats[note]++;\n            if (beats[note] >= current_beat)\n \
    \               current_beat++;\n        }\n\n        // Now convert the notes\
    \ into a list of longs\n        return notes.Select(x => (long)x).ToList();",
  "        List<long> return_list = new List<long>();\n        music_string = music_string.Replace(\"\
    .\", \"\");\n        music_string = music_string.Replace(\"|\", \"\");\n     \
    \   music_string = music_string.Replace(\"o \", \"\");\n        music_string =\
    \ music_string.Replace(\"o| \", \"\");\n        music_string = music_string.Replace(\"\
    \ \", \"\");\n        string[] notes = music_string.Split('|');\n\n        for\
    \ (int i = 0; i < notes.Length; i++) {\n            switch (notes[i]) {\n    \
    \            case \"o\":\n                    return_list.Add(1L);\n         \
    \           break;\n                case \"o|\":\n                    return_list.Add(2L);\n\
    \                    break;\n                case \".|\":\n                  \
    \  return_list.Add(1L);\n                    break;\n                default:\n\
    \                    throw new Exception(\"Invalid note in music string: \" +\
    \ notes[i]);\n            }\n        }\n        return return_list;", "      \
    \  var res = new List<long>();\n        var splitted = music_string.Split('|');\n\
    \        var last = splitted[0];\n        var notes = new Dictionary<char, int>();\
    \ // note => beats\n        var beats = new List<long>(); // beat count\n    \
    \    foreach (var n in splitted) {\n            if (notes.ContainsKey(n)) {\n\
    \                notes[n]++;\n                beats.Add(notes[n]);\n         \
    \   } else {\n                notes[n] = 1;\n                beats.Add(1);\n \
    \           }\n        }\n        int n = beats.Count;\n        while (n > 4)\
    \ {\n            beats.RemoveAt(beats.Count - 1);\n            n--;\n        }\n\
    \        for (int i = 0; n > i; i++) {\n            res.Add(beats.Last());\n \
    \       }\n        return res;", "        List<long> beats_per_note = new List<long>();\n\
    \        if (music_string.Length == 0) {\n            return beats_per_note;\n\
    \        }\n\n        bool last_note = false;\n        char first_note = music_string[0];\n\
    \n        foreach (char note in music_string) {\n            char next_note =\
    \ note;\n\n            if (note == '.') {\n                beats_per_note.Add(4L);\n\
    \            } else if (note == '|') {\n                beats_per_note.Add(2L);\n\
    \            } else if (note == 'o') {\n                beats_per_note.Add(1L);\n\
    \            } else {\n                beats_per_note.Add(1L);\n            }\n\
    \n            if (next_note == '.' || next_note == '|') {\n                last_note\
    \ = true;\n            } else if (next_note == 'o') {\n                last_note\
    \ = false;\n            }\n        }\n\n        return beats_per_note;", "   \
    \     // your code here\n        \n        char[] notes = \"o|.\"\n          \
    \  .ToCharArray()\n            .Where(x => x >= '0' && x <= '9')\n           \
    \ .ToArray();\n        Dictionary<char, List<long>> note_counts = new Dictionary<char,\
    \ List<long>>();\n        List<long> note_counts_values = new List<long>();\n\
    \        foreach(char note in notes) {\n            if (!note_counts.ContainsKey(note))\
    \ {\n                note_counts[note] = new List<long>();\n            }\n  \
    \      }\n        foreach(char note in notes) {\n            note_counts[note].Add((long)(music_string.Count(x\
    \ => x==note) / 4.0));\n        }\n        foreach(char note in notes) {\n   \
    \         note_counts[note].Add((long)(music_string.Count(x => x==note) / 2.0));\n\
    \        }\n        foreach(char note in notes) {\n            note_counts[note].Add((long)(music_string.Count(x\
    \ => x==note) / 1.0));\n        }\n        foreach(char note in notes) {\n   \
    \         if (!note_counts.ContainsKey(note)) {\n                note_counts[note]\
    \ = new List<long>();\n            }\n        }\n        foreach(char note in\
    \ notes) {\n            note_counts[note].Add((long)(music_string.Count(x => x==note)\
    \ / 4.0));\n        }\n        foreach(char note in notes) {\n            note_counts[note].Add((long)(music_string.Count(x\
    \ => x==note) / 2.0));\n        }\n        foreach(char note in notes) {\n   \
    \         note_counts[note].Add((long)(music_string.Count(x => x==note) / 1.0));\n\
    \        }\n        foreach(char note in notes) {\n            if (!note_counts.ContainsKey(note))\
    \ {\n                note_counts[note] = new List<long>();\n            }\n  \
    \      }\n        foreach(char note in notes) {\n            note_counts[note].Add((long)(music_string.Count(x\
    \ => x==note) / 4.0));\n        }\n        foreach(char note in notes) {\n   \
    \         note_counts[note].Add((long)(music_string.Count(x => x==note) / 2.0));\n\
    \        }\n        foreach(char note in notes) {\n            note_counts[note].Add((long)(music_string.Count(x\
    \ => x==note) / 1.0));\n        }\n        List<long> note_counts_values_list\
    \ = new List<long>();\n        foreach(List<long> note in note_counts.Values)\
    \ {\n            note_counts_values_list.AddRange(note);\n        }\n", "    \
    \    List<long> notes = new List<long>();\n        bool has_chord = false;\n \
    \       int last_chord = -1;\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                notes.Add(1L);\n\
    \            } else if (music_string[i] == '.') {\n                notes.Add(2L);\n\
    \            } else if (music_string[i] == '|') {\n                notes.Add(4L);\n\
    \            } else if (music_string[i] == 'o|') {\n                notes.Add(4L);\n\
    \                notes.Add(2L);\n            } else if (music_string[i] == '.|')\
    \ {\n                notes.Add(1L);\n                notes.Add(2L);\n        \
    \    } else if (music_string[i] == '.|') {\n                notes.Add(1L);\n \
    \               notes.Add(2L);\n            } else if (music_string[i] == '.|')\
    \ {\n                notes.Add(1L);\n                notes.Add(2L);\n        \
    \    } else if (music_string[i] == '.o') {\n                notes.Add(4L);\n \
    \               notes.Add(2L);\n            } else if (music_string[i] == '.o|')\
    \ {\n                notes.Add(4L);\n                notes.Add(2L);\n        \
    \        notes.Add(1L);\n            } else if (music_string[i] == '.o|') {\n\
    \                notes.Add(4L);\n                notes.Add(2L);\n            \
    \    notes.Add(1L);\n            } else if (music_string[i] == '.o|') {\n    \
    \            notes.Add(4L);\n                notes.Add(2L);\n                notes.Add(1L);\n\
    \            } else if (music_string[i] == '.o|') {\n                notes.Add(4L);\n\
    \                notes.Add(2L);\n                notes.Add(1L);\n            }\
    \ else if (music_string[i] == '.o|') {\n                notes.Add(4L);\n     \
    \           notes.Add(2L);\n                notes.Add(1L);\n            } else\
    \ if (music_string[i] == '.o|') {\n                notes.Add(4L);\n          \
    \      notes.Add(2L);\n                notes.Add(1L);\n            } else if (music_string[i]\
    \ == '.o|') {\n                notes.Add(4L);\n                notes.Add(2L);\n\
    \                notes.Add(1L);\n            } else if (music_string[i] == '.o|')\
    \ {\n                notes.Add(4L);\n                notes.Add(2L);\n        \
    \        notes.Add(1L);\n            } else if (music_string[i] == '.o|') {\n\
    \                notes.Add(4L);\n                notes.", "        char[] music_chars\
    \ = music_string.ToCharArray();\n\n        List<long> beats = new List<long>();\n\
    \        int current_beat = 0;\n        int current_note = 0;\n\n        foreach\
    \ (char c in music_chars) {\n            string s = c.ToString();\n\n        \
    \    int beat = 0;\n\n            if (s.Equals(\"o\") || s.Equals(\"O\")) {\n\
    \                beat = 4;\n                current_note = 0;\n            }\n\
    \            else if (s.Equals(\"|\") || s.Equals(\"|*\")) {\n               \
    \ beat = 2;\n                current_note = 1;\n            }\n            else\
    \ if (s.Equals(\".\") || s.Equals(\".*/\")) {\n                beat = 1;\n   \
    \             current_note = 2;\n            }\n            else {\n         \
    \       beat = 0;\n                current_note = 0;\n            }\n\n      \
    \      if (beat == current_beat) {\n                beats.Add(current_beat);\n\
    \            }\n            else {\n                beats.Add(current_beat);\n\
    \                beats.Add(current_note);\n                current_beat = beat;\n\
    \                current_note = 0;\n            }\n        }\n\n        return\
    \ beats;", "        var result = new List<long>();\n        // Split music string\
    \ to notes and rests.\n        var notes = music_string.Split(new string[] { \"\
    \ \", \", \", \"|\" }, StringSplitOptions.RemoveEmptyEntries);\n        var rests\
    \ = music_string.Split(new string[] { \", \" }, StringSplitOptions.RemoveEmptyEntries);\n\
    \n        // Go through notes and add beats to result list.\n        notes.Select(note\
    \ => {\n            switch (note) {\n                case \"o\":\n           \
    \     case \"o|\":\n                    result.Add((long)4);\n               \
    \     break;\n                case \".|\":\n                    result.Add((long)2);\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }).ToList();\n\n        // Go through rests and subtract\
    \ beats from result list.\n        rests.Select(rest => {\n            switch\
    \ (rest) {\n                case \",\":\n                case \"\":\n        \
    \            result.Add((long)1);\n                    break;\n              \
    \  default:\n                    break;\n            }\n        }).ToList();\n\
    \n        return result;", "        var music_chars = music_string.ToCharArray();\n\
    \        List<long> result = new List<long>();\n\n        using (var rng = new\
    \ RNGCryptoServiceProvider()) {\n            for (var i = 0; i < music_chars.Length;\
    \ ++i) {\n                var c = music_chars[i];\n                var x = rng.Next()\
    \ % 16;\n                switch (c) {\n                    case 'o': result.Add((long)4L);\
    \ break;\n                    case 'o|': result.Add((long)2L); break;\n      \
    \              case '.|': result.Add((long)1L); break;\n                    default:\n\
    \                        throw new NotSupportedException(\"Not supported: \" +\
    \ c);\n                }\n            }\n        }\n        return result;", " \
    \       var music_string = music_string.Trim();\n        var music_chars = music_string.ToCharArray();\n\
    \        var music_beats = new List<long>();\n        bool note_lasts = false;\n\
    \        foreach (var music_char in music_chars) {\n            var music_note\
    \ = ToMusicalNote(music_char);\n            var music_beat_length = (music_note\
    \ == Note.Note) ? 4 : 2;\n            if (note_lasts) {\n                music_beats.Add(music_beat_length);\n\
    \            } else {\n                music_beats.Add(music_beat_length * 4);\n\
    \                note_lasts = true;\n            }\n        }\n        return\
    \ music_beats;", "        var notes_as_strings = music_string.Split(new[] {' '},\
    \ StringSplitOptions.RemoveEmptyEntries);\n        var notes_as_integers = new\
    \ List<long>();\n        foreach (var note_as_string in notes_as_strings) {\n\
    \            var last_char_is_note = note_as_string.Length % 2 == 0;\n       \
    \     var music_note = note_as_string[0] == '.';\n            var note_char =\
    \ note_as_string[note_as_string.Length - 1];\n            notes_as_integers.Add(last_char_is_note\
    \ ? (music_note ? (long) int.Parse(note_char) : Convert.ToInt64(note_char)) :\
    \ Convert.ToInt64(note_char));\n        }\n        return notes_as_integers;",
  "        string music_notes = \"o o| .| o| o| .| .| .| .| o o\";\n\n        // Convert\
    \ string to ASCII representation\n        byte[] bytes = new byte[music_notes.Length\
    \ / 2];\n        for (int i = 0; i < music_notes.Length; i += 2) {\n         \
    \   bytes[i / 2] = Convert.ToByte(music_notes[i], 16);\n        }\n\n        //\
    \ Convert bytes to integers\n        var music_notes_ints = BytesToInts(bytes);\n\
    \n        // Initialize empty list of beats\n        var beats = new List<long>();\n\
    \n        // Iterate through music notes list from last to first\n        for\
    \ (var i = music_notes_ints.Count - 1; i >= 0; i--) {\n            // If music\
    \ note is \"o\" or \"|\" append it to beats list\n            if (music_notes_ints[i]\
    \ == 0x24 || music_notes_ints[i] == 0x23) {\n                beats.Add(music_notes_ints[i]);\n\
    \            }\n        }\n\n        // Return new list of beats\n        return\
    \ beats;", "        // TODO: Implement this function\n        return new List<long>();",
  '        // Write your code here.', "        Debug.Assert(music_string.Length >=\
    \ 1);\n        Debug.Assert(music_string[0] == 'o' || music_string[0] == 'o|'\
    \ || music_string[0] == '.|');\n        var beats = new List<long>();\n      \
    \  if (music_string[0] == 'o') {\n            beats.Add((long)4);\n          \
    \  beats.Add((long)2);\n            beats.Add((long)1);\n            beats.Add((long)2);\n\
    \            beats.Add((long)2);\n            beats.Add((long)1);\n          \
    \  beats.Add((long)1);\n            beats.Add((long)1);\n            beats.Add((long)4);\n\
    \            beats.Add((long)4);\n        } else if (music_string[0] == 'o|')\
    \ {\n            beats.Add((long)4);\n            beats.Add((long)2);\n      \
    \      beats.Add((long)1);\n            beats.Add((long)1);\n            beats.Add((long)2);\n\
    \            beats.Add((long)2);\n            beats.Add((long)1);\n          \
    \  beats.Add((long)1);\n            beats.Add((long)1);\n            beats.Add((long)4);\n\
    \            beats.Add((long)4);\n        } else if (music_string[0] == '.|')\
    \ {\n            beats.Add((long)1);\n            beats.Add((long)1);\n      \
    \      beats.Add((long)1);\n            beats.Add((long)1);\n            beats.Add((long)1);\n\
    \            beats.Add((long)1);\n            beats.Add((long)1);\n          \
    \  beats.Add((long)1);\n            beats.Add((long)1);\n            beats.Add((long)1);\n\
    \            beats.Add((long)1);\n            beats.Add((long)4);\n          \
    \  beats.Add((long)4);\n        }\n        return beats;", "        List<long>\
    \ result = new List<long>();\n        if (music_string.Length == 0) {\n      \
    \      return result;\n        }\n        if (music_string[0] == 'o') {\n    \
    \        int first_note = music_string[1] - '0';\n            result.Add((long)4);\n\
    \            music_string = music_string.Substring(2);\n            while (music_string.Length\
    \ > 0) {\n                if (music_string[0] == 'o') {\n                    int\
    \ second_note = music_string[1] - '0';\n                    result.Add((long)first_note\
    \ + second_note / 4);\n                    music_string = music_string.Substring(2);\n\
    \                } else if (music_string[0] == '.') {\n                    int\
    \ third_note = music_string[1] - '0';\n                    int fourth_note = music_string[1]\
    \ - '0';\n                    if (third_note > second_note) {\n              \
    \          int temp = third_note;\n                        third_note = second_note;\n\
    \                        second_note = temp;\n                        temp = fourth_note;\n\
    \                        fourth_note = third_note;\n                        third_note\
    \ = temp;\n                    }\n                    result.Add((long)first_note\
    \ + third_note / 4 + second_note / 4 + fourth_note / 4);\n                   \
    \ music_string = music_string.Substring(2);\n                } else {\n      \
    \              int fourth_note = music_string[1] - '0';\n                    result.Add((long)first_note\
    \ + fourth_note);\n                    music_string = music_string.Substring(2);\n\
    \                }\n            }\n        } else {\n            int first_note\
    \ = music_string[1] - '0';\n            int second_note = music_string[1] - '0';\n\
    \            result.Add((long)first_note);\n            music_string = music_string.Substring(2);\n\
    \            while (music_string.Length > 0) {\n                if (music_string[0]\
    \ == 'o') {\n                    int third_note = music_string[1] - '0';\n   \
    \                 int fourth_note = music_string[1] - '0';\n                 \
    \   if (third_note > second_note) {\n                        int temp = third_note;\n\
    \                        third_note = second_note;\n                        second_note\
    \ = temp;\n                        temp = fourth_note;\n                     \
    \   fourth_note = third_note;\n                        third_note = temp;\n  \
    \                  }\n                    result.Add((long)first_note + third_note\
    \ / 4 + second_note / 4 + fourth_note / 4);\n                    music_string\
    \ = music_string.Substring(2);\n                } else if (music_string[0] ==\
    \ '.') {\n                    int third_note = music_string[1] - '0';\n      \
    \              int fourth_note = music_string[1] - '0';\n                    if\
    \ (third_note > second_note) {\n                        int temp = third_note;\n",
  "        // Your code goes here\n        List<long> beats = new List<long>();\n\
    \        List<string> music_notes = music_string.Split(new char[]{'|'}, StringSplitOptions.RemoveEmptyEntries).ToList();\n\
    \        music_notes.ForEach(x => {\n            char c = x.ToCharArray()[0];\n\
    \            if (c == '.') {\n                beats.Add(4);\n            } else\
    \ if (c == 'o') {\n                beats.Add(1);\n            } else if (c ==\
    \ 'o|') {\n                beats.Add(2);\n            } else if (c == '.|') {\n\
    \                beats.Add(1);\n            }\n        });\n        return beats;",
  "        // Write your code here\n        List<long> returnValue = new List<long>();\n\
    \        string[] music = music_string.Split(' ');\n        for (int i = 0; i\
    \ < music.Length; i++) {\n            switch (music[i]) {\n                case\
    \ \"o\":\n                    returnValue.Add((long) 4);\n                   \
    \ break;\n                case \"o|\":\n                    returnValue.Add((long)\
    \ 2);\n                    break;\n                case \".|\":\n            \
    \        returnValue.Add((long) 1);\n                    break;\n            \
    \    default:\n                    break;\n            }\n        }\n        return\
    \ returnValue;", "        List<long> beats = new List<long>(new long[]{0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L});\n        \n        var music_chars = music_string.ToCharArray();\n\
    \        // Parse each music character and fill corresponding beat count.\n  \
    \      for (int i = 0; i < music_chars.Length; i++) {\n            char music_char\
    \ = music_chars[i];\n            switch (music_char) {\n                case 'o':\
    \ // whole note\n                    beats.Add((long)4L);\n                  \
    \  break;\n                case 'o|': // half note\n                    beats.Add((long)2L);\n\
    \                    break;\n                case '.|': // quater note\n     \
    \               beats.Add((long)1L);\n                    break;\n           \
    \     default:\n                    break;\n            }\n        }\n       \
    \ return beats;", "        List<long> beats = new List<long>();\n        for (int\
    \ i = 0; i < music_string.Length; ++i) {\n            char c = music_string[i];\n\
    \            if (c == 'o') {\n                beats.Add(4L);\n            } else\
    \ if (c == 'o|') {\n                beats.Add(2L);\n            } else if (c ==\
    \ '.|') {\n                beats.Add(1L);\n            } else {\n            \
    \    throw new Exception(\"Unexpected character in music string.\");\n       \
    \     }\n        }\n        return beats;", "        var notes = music_string.Split('\
    \ ');\n        var beats = new List<long>(notes.Select(c => new { note = c, duration\
    \ = c.Length / 4 }));\n        notes = notes.Where(c => !c.Equals(\".\")).ToList();\n\
    \        notes = notes.Where(c => !c.Equals(\"o\")).ToList();\n        notes =\
    \ notes.Where(c => !c.Equals(\"o|\")).ToList();\n        notes = notes.Select(c\
    \ => new { note = c, duration = c.Length / 2 }).ToList();\n        notes = notes.Select(c\
    \ => new { note = c, duration = c.Length });\n        notes = notes.Select(c =>\
    \ new { note = c, duration = c.Length / 2 });\n        notes = notes.Select(c\
    \ => new { note = c, duration = c.Length });\n        notes = notes.Select(c =>\
    \ new { note = c, duration = c.Length / 2 });\n        notes = notes.Select(c\
    \ => new { note = c, duration = c.Length });\n        notes = notes.Where(c =>\
    \ c.note != \".\").ToList();\n        notes = notes.Where(c => c.note != \"o\"\
    ).ToList();\n        notes = notes.Where(c => c.note != \"o|\").ToList();\n  \
    \      notes = notes.Select(c => new { note = c, duration = c.duration }).ToList();\n\
    \        notes = notes.Select(c => new { note = c, duration = c.duration / 2 }).ToList();\n\
    \        notes = notes.Select(c => new { note = c, duration = c.duration }).ToList();\n\
    \        notes = notes.Select(c => new { note = c, duration = c.duration / 2 }).ToList();\n\
    \        notes = notes.Select(c => new { note = c, duration = c.duration }).ToList();\n\
    \        notes = notes.Where(c => c.note != \".|\").ToList();\n        notes =\
    \ notes.Where(c => c.note != \"o|\").ToList();\n        notes = notes.Where(c\
    \ => c.note != \"o\").ToList();\n        notes = notes.Where(c => c.note != \"\
    o\").ToList();\n        notes = notes.Where(c => c.note != \"o\").ToList();\n\
    \        notes = notes.Where(c => c.note != \"o\").ToList();\n        notes =\
    \ notes.Where(c => c.note ", "        List<long> beats = new List<long>();\n \
    \       for (int i = 0; i < music_string.Length; i += 2) {\n            bool is_last\
    \ = true;\n            int remaining = music_string.Length - i;\n            if\
    \ (remaining == 2) {\n                is_last = ((int.Parse(music_string[i]) -\
    \ '0') * (int.Parse(music_string[i + 1]) - '0'))\n                    == 0;\n\
    \            } else if (remaining == 4) {\n                is_last = ((int.Parse(music_string[i])\
    \ - '0') * (int.Parse(music_string[i + 1]) - '0'))\n                    * ((int.Parse(music_string[i\
    \ + 2]) - '0') * (int.Parse(music_string[i + 3]) - '0'))\n                   \
    \ == 0;\n            } else if (remaining == 6) {\n                is_last = ((int.Parse(music_string[i])\
    \ - '0') * (int.Parse(music_string[i + 1]) - '0'))\n                    * ((int.Parse(music_string[i\
    \ + 2]) - '0') * (int.Parse(music_string[i + 3]) - '0'))\n                   \
    \ * ((int.Parse(music_string[i + 4]) - '0') * (int.Parse(music_string[i + 5])\
    \ - '0'))\n                    == 0;\n            } else if (remaining == 8) {\n\
    \                is_last = ((int.Parse(music_string[i]) - '0') * (int.Parse(music_string[i\
    \ + 1]) - '0'))\n                    * ((int.Parse(music_string[i + 2]) - '0')\
    \ * (int.Parse(music_string[i + 3]) - '0'))\n                    * ((int.Parse(music_string[i\
    \ + 4]) - '0') * (int.Parse(music_string[i + 5]) - '0'))\n                   \
    \ * ((int.Parse(music_string[i + 6]) - '0') * (int.Parse(music_string[i + 7])\
    \ - '0'))\n                    == 0;\n            } else if (remaining == 10)\
    \ {\n                is_last = ((int.Parse(music_string[i]) - '0') * (int.Parse(music_string[i\
    \ + 1]) - '0'))\n                    * ((int.Parse(music_string[i + 2]) - '0')\
    \ * (int.Parse(music_string[i + 3]) - '0'))\n                    * ((int.Parse(music_string[i\
    \ + 4]) - '0') * (int.Parse(music_string[i + 5]) - '0'))\n                   \
    \ * ((int.Parse(music_string[i + 6]) - '0') * (int.Parse(music_string[i + 7])\
    \ - '0'))\n                    * ((int.Parse(music_string[i + 8]) - '0') * (int.Parse(music_string[i\
    \ + 9]) - '0'))\n", "        List<long> beats = new List<long>();\n        List<long>\
    \ temp_beats = new List<long>();\n        string music = music_string;\n     \
    \   while (music.Length != 0) {\n            if (music.Length > 2 && music[0]\
    \ == '.') {\n                music = music.Substring(1);\n                beats.Add(4L);\n\
    \            } else if (music.Length > 1 && music[0] == 'o') {\n             \
    \   music = music.Substring(1);\n                beats.Add(4L);\n            }\
    \ else if (music.Length > 0 && music[0] == '|') {\n                music = music.Substring(1);\n\
    \                beats.Add(2L);\n            } else if (music.Length > 3 && music[0]\
    \ == '|') {\n                music = music.Substring(1);\n                beats.Add(1L);\n\
    \            } else if (music.Length > 0 && music[0] == '.') {\n             \
    \   music = music.Substring(1);\n                temp_beats.Add(1L);\n       \
    \     } else if (music.Length > 0 && music[0] == 'o') {\n                music\
    \ = music.Substring(1);\n                temp_beats.Add(2L);\n            } else\
    \ if (music.Length > 0 && music[0] == '|') {\n                music = music.Substring(1);\n\
    \                temp_beats.Add(4L);\n            } else if (music.Length > 0\
    \ && music[0] == 'o|') {\n                music = music.Substring(1);\n      \
    \          temp_beats.Add(4L);\n            } else if (music.Length > 0 && music[0]\
    \ == 'o|') {\n                music = music.Substring(1);\n                temp_beats.Add(4L);\n\
    \            } else if (music.Length > 0 && music[0] == 'o|') {\n            \
    \    music = music.Substring(1);\n                temp_beats.Add(4L);\n      \
    \      } else if (music.Length > 0 && music[0] == 'o|') {\n                music\
    \ = music.Substring(1);\n                temp_beats.Add(4L);\n            } else\
    \ {\n                music = music.Substring(1);\n                beats.Add(1L);\n\
    \            }\n        }\n        List<long> beats_return = new List<long>();\n\
    \        beats_return.AddRange(beats);\n        beats_return.AddRange(temp_beats);\n\
    \        return beats_return;", "        List<long> beats = new List<long>();\n\
    \        StringBuilder sb = new StringBuilder();\n        StringBuilder temp =\
    \ new StringBuilder();\n        char note;\n        long beat = 0;\n        int\
    \ i = -1;\n        bool lastNote = false;\n        foreach (char ch in music_string)\
    \ {\n            ++i;\n            if (ch == '.') {\n                if (!lastNote)\
    \ {\n                    lastNote = true;\n                    sb.Append(\" \"\
    );\n                }\n                else {\n                    lastNote =\
    \ false;\n                    sb.Append(\"| \");\n                }\n        \
    \    }\n            else if (ch == '|') {\n                lastNote = false;\n\
    \                sb.Append(\" \");\n            }\n            else if (ch ==\
    \ 'o') {\n                lastNote = false;\n                sb.Append(\" \");\n\
    \            }\n            else if (lastNote == false) {\n                note\
    \ = ch;\n                sb.Append(ch);\n                lastNote = true;\n  \
    \              beat = 0;\n            }\n            else {\n                int\
    \ length = sb.Length - 1;\n                beat = (long.Parse(sb.ToString()) /\
    \ length) * length;\n                if (lastNote == true)\n                 \
    \   beats.Add(beat);\n                sb.Clear();\n                sb.Append(ch);\n\
    \                lastNote = false;\n            }\n        }\n        if (sb.Length\
    \ > 0)\n            beats.Add(long.Parse(sb.ToString()));\n        return beats;",
  "        List<long> beats = new List<long>();\n\n        if (music_string == null)\n\
    \            return beats;\n\n        music_string = music_string.Replace(Environment.NewLine,\
    \ \"\");\n\n        music_string = music_string.Replace(\"|\", \"\");\n\n    \
    \    string[] parts = music_string.Split(new string[]{\" \", \",\"}, StringSplitOptions.None);\n\
    \n        if (parts.Length < 2)\n            return beats;\n\n        music_string\
    \ = \"\";\n\n        foreach (string part in parts) {\n            music_string\
    \ += part;\n        }\n\n        music_string = music_string.TrimEnd(' ');\n\n\
    \        music_string = music_string.TrimEnd(',');\n\n        music_string = music_string.Replace(\"\
    o\", \"o o\");\n        music_string = music_string.Replace(\"|\", \"o o|\");\n\
    \        music_string = music_string.Replace(\".|\", \"o o|\");\n\n        music_string\
    \ = music_string.Replace(\"o|\", \"o o|\");\n        music_string = music_string.Replace(\"\
    o o\", \"o\");\n\n        music_string = music_string.Replace(\"o o \", \"o o\
    \ \");\n        music_string = music_string.Replace(\"o .\", \"o . \");\n\n  \
    \      int index = 0;\n        int len = music_string.Length;\n\n        while(index<len)\
    \ {\n            char ch = music_string[index];\n            string next_string\
    \ = music_string.Substring(index+1, len-index-1);\n            int next_len =\
    \ next_string.Length;\n            int beats_counter = 0;\n            bool next_note\
    \ = false;\n\n            if (ch == 'o' && next_len == 1) {\n                beats_counter\
    \ += 4;\n                next_note = true;\n            }\n            if (ch\
    \ == 'o' && next_len == 2) {\n                beats_counter += 2;\n          \
    \      next_note = true;\n            }\n            if (ch == 'o' && next_len\
    \ == 3) {\n                beats_counter += 1;\n                next_note = true;\n\
    \            }\n            if (ch == 'o' && next_len == 4) {\n              \
    \  beats_counter += 1;\n                next_note = true;\n            }\n   \
    \         if (ch == 'o' && next_len == 5) {\n                beats_counter +=\
    \ 1;\n                next_note = true;\n            }\n            if (ch ==\
    \ '|' && next_len == 1) {\n                beats_counter += 2;\n             \
    \   next_note = true;\n            }\n            if (ch == '|' && next_len ==\
    \ 2) {\n                beats_counter += 1;\n                next_note = true;\n\
    \            }\n            if (ch == '|' && next_len == 3) {\n              \
    \  beats_counter += 1;\n                next_note = true;\n            }\n   \
    \         if (ch == '|' && next_len == 4) {\n", "        List<long> notes = new\
    \ List<long>();\n        Music note = null;\n        char next_note = music_string[0];\n\
    \        Music last_note = null;\n        long last_beat = 0;\n        long beat\
    \ = 0;\n        bool has_new_note = music_string.Length > 0;\n        while (has_new_note)\
    \ {\n            note = new Music(last_note, next_note, beat);\n            if\
    \ (note != null) {\n                notes.Add(note);\n                last_beat\
    \ = beat;\n                note = null;\n            } else {\n              \
    \  last_note = new Music(last_note, next_note, beat);\n            }\n       \
    \     beat++;\n            next_note = music_string[0];\n            music_string\
    \ = music_string.Substring(1);\n            has_new_note = music_string.Length\
    \ > 0;\n        }\n        return notes;", "        // TODO: Implement this function\n\
    \        return new List<long>();", "        // YOUR CODE HERE\n        string\
    \ music_notes = \"o o| .| o| o| .| .| .| .| o o\";\n        string delimiter =\
    \ \"|\";\n        List<long> notes = new List<long>();\n        foreach (char\
    \ note in music_notes) {\n            bool is_last_note = (note.Equals(\"|\"));\n\
    \            bool is_third_note = (note.Equals(\"o\"));\n            string note_string\
    \ = is_third_note ? note.Replace(\"|\", \"\") : note;\n            int beats_per_note\
    \ = 0;\n            if (note_string.Contains(delimiter)) {\n                beats_per_note\
    \ = (note_string.Split(delimiter).Length);\n                note_string = note_string.Replace(delimiter,\
    \ \"\");\n            }\n            notes.Add(beats_per_note);\n        }\n \
    \       List<long> return_list = new List<long>();\n        foreach (int number_of_beats\
    \ in notes) {\n            return_list.Add(number_of_beats);\n        }\n    \
    \    return return_list;", "        if (music_string == null || !music_string.Contains(\"\
    \ \") && (music_string.Length % 2) != 0) throw new ArgumentNullException(\"music_string\"\
    );\n\n        List<long> beats = new List<long>(music_string.Length / 2); // List\
    \ of beats\n        StringBuilder music_builder = new StringBuilder(); // Accumulator\
    \ for parsed string\n        Music current_note = new Music(music_string); //\
    \ Current music note\n\n        // First two characters are 'o o' notes, they\
    \ will add up as one music note\n        if (music_string[0] == 'o' && music_string[1]\
    \ == 'o') {\n            Music note = new Music(\"o\");\n            for (int\
    \ i = 2; i < music_string.Length; i++) {\n                music_builder.Append(music_string[i]);\n\
    \                note.Append(music_string[i]);\n            }\n            current_note.Append(note);\n\
    \        }\n        else if (music_string[0] == 'o' && music_string[1] == '|')\
    \ {\n            Music note = new Music(\"o\");\n            for (int i = 2; i\
    \ < music_string.Length; i++) {\n                music_builder.Append(music_string[i]);\n\
    \                note.Append(music_string[i]);\n            }\n            current_note.Append(note);\n\
    \        }\n        else if (music_string[0] == '|' && music_string[1] == '|')\
    \ {\n            Music note = new Music(\"|\");\n            for (int i = 2; i\
    \ < music_string.Length; i++) {\n                music_builder.Append(music_string[i]);\n\
    \                note.Append(music_string[i]);\n            }\n            current_note.Append(note);\n\
    \        }\n        else if (music_string[0] == '.' && music_string[1] == '|')\
    \ {\n            Music note = new Music(\".\");\n            for (int i = 2; i\
    \ < music_string.Length; i++) {\n                music_builder.Append(music_string[i]);\n\
    \                note.Append(music_string[i]);\n            }\n            current_note.Append(note);\n\
    \        }\n        else if (music_string[0] == '.' && music_string[1] == '|')\
    \ {\n            Music note = new Music(\".\");\n            for (int i = 2; i\
    \ < music_string.Length; i++) {\n                music_builder.Append(music_string[i]);\n\
    \                note.Append(music_string[i]);\n            }\n            current_note.Append(note);\n\
    \        }\n\n        // Everything else is a music note with a length of 1 beat\n\
    \        else {\n            Music note = new Music(\"o\");\n            for (int\
    \ i = 2; i < music_string.Length; i++) {\n                music_builder.Append(music_string[i]);\n\
    \                note.Append(music_string[i]);\n            }\n            current_note.Append(",
  "        var note_counter = new Dictionary<string, long>();\n\n        // First,\
    \ let's find out what kind of music we are dealing with.\n        // We can use\
    \ regular expressions to look for patterns in music string\n        // We use\
    \ look-behind so we don't match pattern before note\n        // We use look-ahead\
    \ to not match pattern after note\n        // This approach is not recommended\
    \ if there is a lot of different music strings and patterns\n        // For small\
    \ amount of music patterns it may be enough to match all possible patterns and\
    \ notes\n        // For large amount of music patterns you can use more sophisticated\
    \ approach, like regex\n        // and use some kind of tree structure to match\
    \ patterns\n        var music_patterns = new List<string>();\n        music_patterns.AddRange(music_string.Split(new[]\
    \ { \",\" }, StringSplitOptions.RemoveEmptyEntries));\n        var music_patterns_regex\
    \ = string.Join(\"|\", music_patterns);\n\n        var music_notes = new List<string>();\n\
    \        music_notes.AddRange(music_string.Split(new[] { \"/\" }, StringSplitOptions.RemoveEmptyEntries));\n\
    \n        // Now, let's use regular expression to find all the patterns in the\
    \ string\n        var music_patterns_matches =\n            music_notes.Select(music\
    \ => Regex.Match(music, music_patterns_regex));\n\n        // Now, let's find\
    \ out what kind of note we are dealing with.\n        // We use look-ahead to\
    \ find out if next character is whitespace\n        // We use look-behind to find\
    \ out if previous character is whitespace\n        // If next character is not\
    \ whitespace but previous one is, than we found a note\n        // If next character\
    \ is not whitespace and previous one is not whitespace, than we found a chord\n\
    \        // If next character is whitespace and previous one is not whitespace,\
    \ than we found a rest\n        // If next character is not whitespace and previous\
    \ one is, than we found a rest\n        // We also use look-around so we don't\
    \ match pattern before note\n        // We use look-ahead again to not match pattern\
    \ after note\n        // We use look-ahead to find out if next character is whitespace\n\
    \        // We use look-behind to find out if previous character is whitespace\n\
    \        // If next character is not whitespace but previous one is, than we found\
    \ a note\n        // If next character is not whitespace and previous one is not\
    \ whitespace, than we found a chord\n        // If next character is whitespace\
    \ and previous one is not whitespace, than we found a rest\n        // If next\
    \ character is not whitespace and previous one is, than we found a rest\n    \
    \    var music_notes_matches =\n            music_patterns_matche", "        var\
    \ list = new List<long>();\n        var note = music_string.ToCharArray();\n \
    \       for (int i = 0; i < note.Length; i++) {\n            var last_note = note[i];\n\
    \            if (last_note == \"o\") {\n                for (int k = 1; k <= 4;\
    \ k++) {\n                    list.Add(4 * k);\n                }\n          \
    \  } else if (last_note == \"o|\") {\n                for (int k = 1; k <= 2;\
    \ k++) {\n                    list.Add(2 * k);\n                }\n          \
    \  } else if (last_note == \".|\") {\n                list.Add(1);\n         \
    \   } else {\n                throw new Exception(\"Unexpected note type encountered:\
    \ \" + last_note);\n            }\n        }\n        return list;", "       \
    \ // Write your code here\n        List<long> beats = new List<long>();\n    \
    \    string currentNote = null;\n        string nextNote = null;\n        bool\
    \ noteIsLong = false;\n        int noteLength = 0;\n        for (int i = 0; i\
    \ < music_string.Length; i++) {\n            if (music_string[i] == '.') {\n \
    \               nextNote = currentNote;\n                if (noteIsLong) {\n \
    \                   beats.Add(noteLength * 4);\n                    noteLength\
    \ = 0;\n                    noteIsLong = false;\n                } else {\n  \
    \                  noteLength++;\n                }\n                currentNote\
    \ = null;\n                continue;\n            }\n\n            if (music_string[i]\
    \ == '|') {\n                if (nextNote != null) {\n                    noteIsLong\
    \ = true;\n                    noteLength++;\n                } else {\n     \
    \               currentNote = music_string.Substring(0, i + 1);\n            \
    \    }\n                nextNote = null;\n                noteLength = 0;\n  \
    \              continue;\n            }\n\n            if (music_string[i] ==\
    \ 'o') {\n                if (nextNote != null) {\n                    noteIsLong\
    \ = true;\n                    noteLength++;\n                } else {\n     \
    \               currentNote = music_string.Substring(0, i + 1);\n            \
    \    }\n                nextNote = null;\n                noteLength = 0;\n  \
    \              continue;\n            }\n\n            if (nextNote == null) {\n\
    \                currentNote = music_string.Substring(0, i + 1);\n           \
    \     continue;\n            }\n        }\n\n        beats.Add(noteLength * 4);\n\
    \        return beats;", "        char[] symbols = music_string.ToCharArray();\n\
    \        List<long> beats = new List<long>(new long[]{0, 0, 0, 0, 0, 0, 0});\n\
    \        List<char> notes = new List<char>();\n        int beat = 0;\n       \
    \ foreach (char symbol in symbols) {\n            switch (symbol) {\n        \
    \        case 'o':\n                case 'O':\n                    notes.Add(symbol);\n\
    \                    beat += 4;\n                    break;\n                case\
    \ '|':\n                    notes.Add(symbol);\n                    beat += 2;\n\
    \                    break;\n                case '.':\n                    notes.Add(symbol);\n\
    \                    beat = 1;\n                    break;\n                case\
    \ '.|':\n                    notes.Add(symbol);\n                    beat += 1;\n\
    \                    break;\n                default:\n                    throw\
    \ new ArgumentOutOfRangeException(\"music_string\");\n            }\n        \
    \    beats.Add(beat);\n        }\n        return beats;", "        // First we\
    \ split the string into music notes.\n        music_string = new string(music_string.Where(c\
    \ => c >= 'o' && c <= 'o+').ToArray());\n        music_string = new string(music_string.Where(c\
    \ => c >= '.' && c <= '+').ToArray());\n        List<long> results = new List<long>();\n\
    \        // Next we parse each music note and calculate how many beats does it\
    \ last.\n        List<long> notes = new List<long>();\n        foreach(char c\
    \ in music_string) {\n            if (c >= 'o' && c <= 'o+')\n               \
    \ notes.Add((long)4);\n            else if (c >= '.' && c <= '+')\n          \
    \      notes.Add((long)2);\n            else\n                notes.Add((long)1);\n\
    \        }\n        // Finally we sum the total beats for each music note.\n \
    \       long total = 0;\n        foreach(long note in notes)\n            total\
    \ += note;\n        results.Add(total);\n        return results;", "        List<long>\
    \ notes_beats = new List<long>();\n        string note = null;\n        string\
    \ last_note = null;\n        bool last_note_is_chord = false;\n        int i =\
    \ 0;\n        int count = 0;\n        // Iterate over music string\n        foreach\
    \ (char c in music_string) {\n            // If c is not equal to space\n    \
    \        if (c != ' ') {\n                // Create new note for chord\n     \
    \           if (c == '.') {\n                    if (last_note != null && !last_note_is_chord)\
    \ {\n                        notes_beats.Add(i);\n                    }\n    \
    \                last_note_is_chord = true;\n                    i++;\n      \
    \          }\n                // Create new note for rest\n                if\
    \ (c == 'o') {\n                    if (last_note != null && !last_note_is_chord)\
    \ {\n                        notes_beats.Add(i);\n                    }\n    \
    \                last_note_is_chord = false;\n                    i++;\n     \
    \           }\n                // Create new note for unrecognised symbol\n  \
    \              if (last_note != null && last_note_is_chord == false) {\n     \
    \               if (last_note.Length == 1) {\n                        notes_beats.Add(i);\n\
    \                    }\n                    last_note = null;\n              \
    \      i++;\n                }\n                // Add note to list\n        \
    \        note = c;\n                i++;\n            }\n            else {\n\
    \                // If c is space, add note to list\n                if (note\
    \ != null && !last_note_is_chord && note != '.') {\n                    notes_beats.Add(i);\n\
    \                }\n                note = null;\n            }\n            last_note\
    \ = note;\n        }\n        return notes_beats;", "        // Your code goes\
    \ here\n        long notesCount = 0;\n        List<long> beatsCount = new List<long>();\n\
    \        List<long> firstBeat = new List<long>();\n        List<long> secondBeat\
    \ = new List<long>();\n        List<long> thirdBeat = new List<long>();\n    \
    \    List<long> fourthBeat = new List<long>();\n        List<long> fifthBeat =\
    \ new List<long>();\n        foreach (char c in music_string) {\n            notesCount\
    \ += long.TryParse(c.ToString(), out long notesCount);\n            if (c == '\
    \ ') {\n                beatsCount.Add(notesCount);\n                notesCount\
    \ = 0;\n                beatsCount.Remove(beatsCount.Count - 1);\n           \
    \ } else if (c == '|') {\n                notesCount *= 2;\n                beatsCount.Add(notesCount);\n\
    \                notesCount = 0;\n            } else if (c == 'o') {\n       \
    \         firstBeat.Add(notesCount);\n            } else if (c == '.') {\n   \
    \             secondBeat.Add(notesCount);\n            } else if (c == '|o') {\n\
    \                thirdBeat.Add(notesCount);\n            } else if (c == '|.')\
    \ {\n                fourthBeat.Add(notesCount);\n            } else if (c ==\
    \ '|.|') {\n                fifthBeat.Add(notesCount);\n            }\n      \
    \  }\n        return beatsCount;", "        var strings = music_string.Split('|');\n\
    \        var music = new List<long>();\n        var last_octave = -1;\n      \
    \  for (var i = 0, len = strings.Length; i < len; ++i) {\n            var string\
    \ = \"\";\n            var current_note = null;\n            var last_note = null;\n\
    \            var octave = 0;\n            for (var j = 0, len_j = strings[i].Length;\
    \ j < len_j; ++j) {\n                var c = strings[i][j];\n                if\
    \ (c == 'o') {\n                    string += c;\n                    current_note\
    \ = string;\n                    last_note = string;\n                } else if\
    \ (c == '.') {\n                    var index = strings[i + 1].IndexOf('o');\n\
    \                    if (index == -1) {\n                        string += c;\n\
    \                    } else {\n                        string += string.Concat(strings[i\
    \ + 1].Take(index).Select(x => x == 'o' ? 'o' : '.'));\n                     \
    \   string += c;\n                        current_note = string;\n           \
    \             last_note = string;\n                    }\n                   \
    \ last_octave = ++octave;\n                } else if (c == '|') {\n          \
    \          string += c;\n                    current_note = string;\n        \
    \            last_note = string;\n                    last_octave = ++octave;\n\
    \                } else if (current_note != null) {\n                    string\
    \ += c;\n                }\n            }\n            if (current_note != null)\
    \ {\n                music.Add(current_note.ToNote(last_note, octave));\n    \
    \        }\n        }\n        return music;", "        var music_notes = new\
    \ List<long>();\n        for (int i = 0; i < music_string.Length; ++i) {\n   \
    \         var symbol = music_string[i];\n            switch (symbol) {\n     \
    \           case 'o':\n                    music_notes.Add(i * 4);\n         \
    \           break;\n                case 'o|':\n                    music_notes.Add(i\
    \ * 4);\n                    music_notes.Add(i * 2 + 1);\n                   \
    \ break;\n                case '.|':\n                    music_notes.Add(i *\
    \ 1);\n                    break;\n                default:\n                \
    \    throw new InvalidDataException(\"Input contains invalid symbol: \" + symbol);\n\
    \            }\n        }\n        return music_notes;", "        music_string\
    \ = music_string.Replace(\" \", \"\");\n        music_string = music_string.Replace(\"\
    o\", \"\");\n        music_string = music_string.Replace(\"|\", \"\");\n     \
    \   music_string = music_string.Replace(\".|\", \"\");\n        music_string =\
    \ music_string.Replace(\" \", \"\");\n\n        List<long> music_list = new List<long>();\n\
    \        bool prev_is_double = false;\n        bool prev_is_single = false;\n\
    \        long prev_beat = 0;\n        char prev_char = 'o';\n        music_list.Add((long)0);\n\
    \        for (int i = 0; i < music_string.Length; i++) {\n            char current\
    \ = music_string[i];\n            if (current == 'o') {\n                music_list.Add((long)4);\n\
    \                music_list.Add((long)4);\n                music_list.Add((long)4);\n\
    \            } else if (current == '|') {\n                music_list.Add((long)2);\n\
    \                music_list.Add((long)2);\n            } else if (current == '.')\
    \ {\n                music_list.Add((long)1);\n            }\n\n            bool\
    \ double = current == 'o';\n            bool single = double && !prev_is_double\
    \ && !prev_is_single;\n            if (double) {\n                music_list.Add(prev_beat);\n\
    \                music_list.Add(prev_beat);\n                music_list.Add(prev_beat);\n\
    \                prev_beat = 0;\n            } else if (single) {\n          \
    \      music_list.Add(prev_beat);\n                prev_beat = 0;\n          \
    \  }\n\n            if (prev_char == 'o') {\n                prev_beat = musiclist.Last();\n\
    \            }\n\n            prev_char = current;\n            prev_is_double\
    \ = double;\n            prev_is_single = single;\n        }\n\n        return\
    \ music_list;", "        List<long> result = new List<long>();\n        int note_len\
    \ = music_string.Length;\n        foreach (char c in music_string) {\n       \
    \     int beats = 0;\n            if (c == '.') {\n                beats = 2;\n\
    \            } else if (c == 'o') {\n                if (note_len % 2 == 0) {\n\
    \                    beats = 4;\n                } else {\n                  \
    \  beats = 2;\n                }\n            } else if (c == 'o|') {\n      \
    \          if (note_len % 2 == 0) {\n                    beats = 2;\n        \
    \        } else {\n                    beats = 1;\n                }\n       \
    \     } else {\n                throw new ApplicationException(\"Unrecognized\
    \ music note.\");\n            }\n            result.Add((long)beats);\n     \
    \       note_len -= beats;\n        }\n        return result;", "        // Your\
    \ code here\n        List<long> notes = new List<long>();\n        foreach(string\
    \ note in music_string.Split()) {\n            if(!notes.Contains(note)) {\n \
    \               notes.Add(0);\n            }\n            string note_letter =\
    \ note.Substring(0, 1);\n            if(note_letter == '.') {\n              \
    \  notes.Add(4);\n            }\n            else if(note_letter == 'o') {\n \
    \               notes.Add(4);\n            }\n            else if(note_letter\
    \ == '|') {\n                notes.Add(2);\n            }\n            else {\n\
    \                notes.Add(1);\n            }\n        }\n        return notes;",
  "        var beats = new List<long>();\n        // we split on newline character\
    \ so each music note will be on its own line\n        var music_notes = music_string.Split(new[]\
    \ { '\\n' });\n        // we remove empty notes to avoid throwing exception\n\
    \        music_notes = music_notes.Where(x => x.Trim().Length > 0).ToArray();\n\
    \        foreach (var note in music_notes) {\n            // we remove all characters\
    \ which are not letters or dots\n            // and convert it to lowercase so\
    \ it will match '.' as dot\n            var current_note = note.Replace(\n   \
    \             new string(Enumerable.Range(0, note.Length).Where(x => char.IsLetter(x)\
    \ || char.IsDigit(x)).ToArray()),\n                char.ToLower());\n        \
    \    // we split note into two halves\n            var first_half = current_note.Substring(0,\
    \ current_note.Length / 2);\n            var second_half = current_note.Substring(current_note.Length\
    \ / 2);\n            // we compute number of beats needed to play this note\n\
    \            var beats_needed = first_half.Length + (first_half.Length / 2);\n\
    \            // if note has even length, we compute number of beats needed to\
    \ play last note\n            if (second_half.Length % 2 != 0) {\n           \
    \     beats_needed += 1;\n            }\n            beats.Add(beats_needed);\n\
    \        }\n        return beats;", "        List<long> beats = new List<long>();\n\
    \        // Your code goes here\n        var music_string = music_string.Replace('|',\
    \ ' ').Replace('o', '').Replace(' ', '');\n        int note = 0;\n        for\
    \ (int i = 0; i < music_string.Length; i++) {\n            switch (music_string[i])\
    \ {\n                case 'o':\n                    note++;\n                \
    \    break;\n                case '|':\n                    note = note == 4 ?\
    \ 0 : 4;\n                    break;\n                case ' ':\n            \
    \        beats.Add(note);\n                    note = 0;\n                   \
    \ break;\n                default:\n                    throw new InvalidOperationException(\"\
    Unexpected symbol\");\n            }\n        }\n        return beats;", "   \
    \     int n = music_string.Length;\n        List<long> l = new List<long>();\n\
    \        long beat_length = 64;\n        long b = 0;\n        string note = \"\
    \";\n\n        for (int i = 0; i < n; i++) {\n            if (music_string[i]\
    \ == '|') {\n                l.Add(beat_length);\n                beat_length\
    \ /= 2;\n                b = 1;\n                continue;\n            }\n  \
    \          note += music_string[i];\n            if (note == \".|\") {\n     \
    \           beat_length = 64;\n                l.Add(beat_length);\n         \
    \       beat_length *= 2;\n            }\n            if (note == \"o\") {\n \
    \               l.Add(b);\n                b = 0;\n            }\n        }\n\
    \        return l;", "        if (music_string == null) {\n            throw new\
    \ ArgumentNullException(\"music_string\");\n        }\n\n        var music_array\
    \ = music_string.Split(new string[] { \" \" }, StringSplitOptions.RemoveEmptyEntries).Select(n\
    \ => n.ToCharArray()).ToArray();\n\n        var result = new List<long>();\n \
    \       foreach (var music in music_array) {\n            switch (music[0]) {\n\
    \                case 'o':\n                    if (music.Count() == 2) {\n  \
    \                      result.Add(4L);\n                    }\n              \
    \      break;\n                case 'o|':\n                    if (music.Count()\
    \ == 3) {\n                        result.Add(2L);\n                    }\n  \
    \                  break;\n                case '.|':\n                    if\
    \ (music.Count() == 1) {\n                        result.Add(1L);\n          \
    \          }\n                    break;\n                default:\n         \
    \           throw new FormatException(\"Invalid music string\");\n           \
    \ }\n        }\n\n        return result;"]
stop_tokens:
- "\n    }\n"
