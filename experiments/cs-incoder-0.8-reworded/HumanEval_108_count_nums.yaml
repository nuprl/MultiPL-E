name: HumanEval_108_count_nums
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function count_nums which takes a list of integers and\
  \ returns\n    // the number of elements which has a sum of digits > 0.\n    //\
  \ If a number is negative, then its first signed digit will be negative:\n    //\
  \ e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n\
  \    // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,\
  \ (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new\
  \ List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))\
  \ == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,\
  \ (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))\
  \ == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,\
  \ (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
completions: ["        long sum = 0L;\n        long digit;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            digit = arr[i];\n            if (i < arr.Count\
    \ - 1 && arr[i + 1] >= 0) {\n                digit += arr[i + 1];\n          \
    \  }\n            if (i % 2 == 1) {\n                sum += digit;\n         \
    \   }\n        }\n        if (arr.Count == 0) {\n            return 0L;\n    \
    \    }\n        if (arr.Count == 1) {\n            if (arr[0] >= 0) {\n      \
    \          sum += arr[0];\n            }\n            return sum;\n        }\n\
    \        return sum / arr.Count;", "        var res = new Dictionary<int, int>();\n\
    \        foreach (var item in arr.Where(item => (item > 0).ToList())) {\n    \
    \        var tmp = 0;\n            foreach (var v in item.ToString().Select(x\
    \ => int.Parse(x.ToString()))) {\n                tmp += v * Math.Pow(10.0, (int)Math.Floor(Math.Log10(v)));\n\
    \            }\n            if (!res.ContainsKey(tmp)) {\n                res.Add(tmp,\
    \ 1);\n            } else {\n                res[tmp]++;\n            }\n    \
    \    }\n        double min = 0;\n        foreach (var item in res) {\n       \
    \     if (min > item.Key) min = item.Key;\n        }\n        var ans = 0;\n \
    \       foreach (var item in res) {\n            var v = item.Key - min;\n   \
    \         if (v >= 0) {\n                ans += 1;\n            }\n        }\n\
    \        return (long)ans;", "        var sign = arr[0].IsSigned ? (long?)null\
    \ : arr[0] % 10;\n        return arr.Where(i => i >= 0).Select(i => sign == null\
    \ ? (i % 10).GetDigits(10).Count() > 0 ?\n            (long)Math.Abs(i) - (long)sign\
    \ : ((i / 10).GetDigits(10).Count() > 0 ? Math.Abs(i) : (i + sign)).GetDigits(10).Count()).Sum();",
  "        Debug.Assert(arr.Count != 0);\n        var zeroCount = 0;\n        var\
    \ negativeCount = 0;\n        long result = 0;\n        bool isNegative = false;\n\
    \        foreach (var el in arr)\n        {\n            if (el > 0)\n       \
    \     {\n                result += el;\n            }\n            else\n    \
    \        {\n                isNegative = true;\n                result += el;\n\
    \                result += el * -1;\n            }\n        }\n        if (isNegative)\n\
    \        {\n            negativeCount = arr.Count;\n            result += negativeCount;\n\
    \        }\n        else\n        {\n            result += arr.Count * 2;\n  \
    \          result += zeroCount;\n        }\n        if (result < 0)\n        {\n\
    \            isNegative = true;\n        }\n        if (isNegative)\n        {\n\
    \            return -result;\n        }\n        else\n        {\n           \
    \ return result;\n        }", "        long sum = 0;\n        long sum2 = 0;\n\
    \        foreach (var number in arr) {\n            sum += number;\n         \
    \   sum2 += Math.Abs(number);\n        }\n        if (sum2 <= 0) return 0;\n \
    \       if (sum < 0) {\n            while (sum2 > 0) {\n                sum2 -=\
    \ Math.Abs(sum2);\n            }\n            return 1;\n        } else {\n  \
    \          while (sum2 > 0) {\n                sum2 -= Math.Abs(sum2);\n     \
    \       }\n            return arr.Count();\n        }", "        Debug.Assert(arr.Count\
    \ >= 1);\n        long ans = arr.First();\n        long sum = ans;\n        int\
    \ len = arr.Count;\n        for (int i = 1; i < len; i++) {\n            long\
    \ cur = arr[i];\n            sum += cur;\n            if ((cur >= 0) &&\n    \
    \            (sum < 0L)) {\n                sum += (long)Math.Pow(10, len);\n\
    \            }\n        }\n        return ans;", "        Debug.Assert(arr !=\
    \ null);\n        long sum = 0;\n        List<long> sums = new List<long>();\n\
    \        long num = arr.First();\n        long remain = 0;\n        int digit\
    \ = 0;\n\n        do {\n            digit = num % 10;\n            sum += digit;\n\
    \            sum = sum - digit;\n            remain = num / 10;\n            arr.RemoveAt(arr.Count\
    \ - 1);\n\n            // Keep track of the sums so we know when to stop adding\
    \ them.\n            if (sum != 0) {\n                sums.Add(sum);\n       \
    \     }\n            sum += remain;\n            sum = sum - remain;\n       \
    \     num = remain;\n        } while (num != 0);\n\n        // Keep track of the\
    \ sums so we know when to stop adding them.\n        foreach (long sum in sums)\
    \ {\n            if (sum > 0) {\n                return sum;\n            }\n\
    \        }\n        return 0;", "        if (arr.Count == 0) {\n            return\
    \ 0;\n        }\n        // Initialize two temporary variables to hold the digit\
    \ sums \n        // and digit counts:\n        long sum = 0, count = 0;\n    \
    \    // For each of the numbers in arr:\n        foreach (long i in arr) {\n \
    \           // If the number i is negative:\n            if (i < 0) {\n      \
    \          sum = -(sum * 10);\n                count--;\n                // Increment\
    \ the sum by its first signed digit:\n                sum += (arr[i] - '0');\n\
    \            } else {\n                // Add the next digit to sum:\n       \
    \         sum += i;\n                // Increment the count, and repeat if i >=\
    \ 10:\n                count++;\n                if (i >= 10) {\n            \
    \        // Repeat until the total is >= 10:\n                    i += i / 10;\n\
    \                    count++;\n                }\n            }\n            //\
    \ If sum is >= 10, then it consists of at least 10 digits:\n            if (sum\
    \ >= 10) {\n                // Return count:\n                return count;\n\
    \            }\n        }\n        // Return zero:\n        return 0;", "    \
    \    // base case: empty list or all zeros\n        if (arr == null || arr.Count\
    \ <= 0) return 0L;\n        // count the number of zeros in the first number\n\
    \        long numZeros = arr[0] & 1;\n        // the new count is just the old\
    \ count plus one\n        long count = numZeros + 1;\n        // go through the\
    \ rest of the list and sum the digits of each\n        // number\n        for\
    \ (int i = 1; i < arr.Count; i++) {\n            // get the next number\n    \
    \        long next = arr[i];\n            // add the digits of the number to the\
    \ current count\n            count += next % 10;\n            // remove the digits\
    \ from that number\n            next /= 10;\n            // add the remaining\
    \ digits to the current count\n            count += next % 10;\n            //\
    \ remove the digits from that number\n            next /= 10;\n        }\n   \
    \     // return the result\n        return count;", '        return arr.Where((x)
    => x > 0).Sum(x => BitConverter.ToInt64(BitConverter.GetBytes(x), 0)) - 1;', " \
    \       var sum = arr.Sum();\n        if (sum < 0) {\n            var sign = sum\
    \ / 10;\n            var num = sum % 10;\n            arr[0] = sign * 10;\n  \
    \          arr[1] = num;\n            sum = arr.Sum();\n        }\n        return\
    \ sum;", "        long total = 0;\n        long firstNum = arr.First();\n    \
    \    // Deal with negative numbers first.\n        long first = firstNum < 0 ?\
    \ arr.First() : (firstNum < 0 ? firstNum : (firstNum % 10));\n        int firstSign\
    \ = first < 0 ? 1 : 0;\n        // For each element, add its digits, subtract\
    \ digits that came before\n        // it (since the first digit was negative)\
    \ and add it to the total.\n        foreach (long num in arr) {\n            long\
    \ digits = 0;\n            for (int i = firstSign; i < firstSign + int.MaxValue;\
    \ i--)\n                digits += num % 10;\n            digits -= num;\n    \
    \        total += digits;\n        }\n        return total;", "        long ret\
    \ = 0;\n        for (int i = 0; i < arr.Count; ++i) {\n            long num =\
    \ arr[i];\n            long sum = num;\n            while (sum > 0) {\n      \
    \          sum += num % 10;\n                num /= 10;\n            }\n     \
    \       ret += sum;\n        }\n        return ret;", "        long count = 0;\n\
    \        if (arr == null || arr.Count < 1) {\n            return 0;\n        }\n\
    \        var sums = arr.Select(x => x.ToString(\"N0\")).ToList();\n        sums.Sort();\n\
    \        // Convert to ints to perform sums\n        var ints = sums.Select(x\
    \ => Convert.ToInt32(x)).ToList();\n        // Now loop through the array and\
    \ increment count as we find an\n        // element that has a sum of digits that\
    \ are greater than 0\n        foreach (var x in ints) {\n            var digits\
    \ = arr.Select(y => (y - x).ToString().Length).ToList();\n            digits.Sort();\n\
    \            if (digits.Take(2).Sum() > 1) {\n                count++;\n     \
    \       }\n        }\n        return count;", "        if (arr.Count < 1) {\n\
    \            throw new ArgumentException(\"Array must have at least one element\"\
    );\n        }\n        long sum = 0;\n        var n = arr.Count;\n        // Sum\
    \ all of the digits, starting with the last one.\n        while (n > 1) {\n  \
    \          var d = n % 10;\n            sum += d * Math.Pow(10.0, n);\n      \
    \      n /= 10;\n        }\n        // Now sum the last digit.\n        sum +=\
    \ arr[arr.Count - 1] % 10;\n        return sum;", "        long sum = 0;\n   \
    \     long digitSum = 0;\n        foreach (long n in arr) {\n            sum +=\
    \ n;\n            digitSum += n / 10;\n        }\n        if (sum < 0)\n     \
    \       digitSum *= -1;\n        long ans = arr.FindAll(x => (x / digitSum) >\
    \ 0);\n        if (ans.Count == 0)\n            return 0L;\n        else\n   \
    \         return ans.Count;", "        long sum = 0;\n        long sign = 1;\n\
    \        foreach (long a in arr) {\n            sum += sign * (long)Math.Abs(a);\n\
    \            sign *= -1;\n        }\n        return sum;", "        long ret =\
    \ 0;\n        bool isPositive = arr.FirstOrDefault()>0;\n        long maxFirstDig\
    \ = arr.FirstOrDefault()<0 ? -(long)arr.FirstOrDefault() : arr.FirstOrDefault();\n\
    \        foreach (var num in arr) {\n            long digitSum = num % 10;\n \
    \           var n = (long)Math.Abs(num);\n            long firstDigit = n % 10;\n\
    \            n = n / 10;\n            long secondDigit = n % 10;\n           \
    \ n = n / 10;\n            long thirdDigit = n % 10;\n            n = n / 10;\n\
    \            long fourthDigit = n % 10;\n            n = n / 10;\n           \
    \ long fivethDigit = n % 10;\n            n = n / 10;\n            long sixthDigit\
    \ = n % 10;\n            n = n / 10;\n            long seventhDigit = n % 10;\n\
    \            n = n / 10;\n            long eightDigit = n % 10;\n            n\
    \ = n / 10;\n            long ninethDigit = n % 10;\n            n = n / 10;\n\
    \            long tenthDigit = n % 10;\n            n = n / 10;\n\n          \
    \  long d = maxFirstDig;\n            if (isPositive) {\n                d +=\
    \ firstDigit;\n            }\n            d += secondDigit;\n            d +=\
    \ thirdDigit;\n            d += fourthDigit;\n            d += fivethDigit;\n\
    \            d += sixthDigit;\n            d += seventhDigit;\n            d +=\
    \ eightDigit;\n            d += ninethDigit;\n            d += tenthDigit;\n \
    \           if (d > 0 || digitSum > 0) {\n                ret += 1;\n        \
    \    }\n        }\n        return ret;", "        if (arr.Count == 0)\n      \
    \      return 0;\n        var digitSum = arr.Sum(d => d > 0 ? d : -d < 0 ? -d\
    \ : -d * 10);\n        return arr.Count\n            .Where(d => d > 0).Select(d\
    \ => d > 0 ?\n                d < 0 ? -d - digitSum : digitSum - d)\n        \
    \    .Count();", "        if (arr.Count == 0)\n            return 0L;\n      \
    \  long ret = 0;\n        Debug.Assert(arr.Count == 1 || arr.Count == 0);\n  \
    \      if (arr.Count == 1) {\n            long val = arr[0];\n            bool\
    \ isNegative = val < 0L;\n            if (isNegative)\n                val = -val;\n\
    \            long sum = 0;\n            while (val != 0L) {\n                sum\
    \ += val % 10;\n                val /= 10;\n            }\n            Debug.Assert(sum\
    \ != 0);\n            if (sum > 0) {\n                ret++;\n               \
    \ if (isNegative)\n                    ret += (10 - sum);\n            }\n   \
    \     }\n        else {\n            long sum = 0;\n            long digitSum\
    \ = 0;\n            for (int i = 0; i < arr.Count - 1; i++) {\n              \
    \  long n = arr[i];\n                long d = arr[i + 1];\n                long\
    \ dSum = 0;\n                while (n != 0L) {\n                    digitSum +=\
    \ n % 10;\n                    n /= 10;\n                }\n                sum\
    \ += digitSum;\n                digitSum = dSum;\n            }\n            Debug.Assert(sum\
    \ != 0);\n            if (sum > 0) {\n                ret++;\n               \
    \ long digitDifference = sum - digitSum;\n                if (digitDifference\
    \ < 0) {\n                    ret += (digitDifference + 10 - (digitDifference\
    \ % 10));\n                }\n            }\n        }\n        return ret;",
  "        var result = arr.Aggregate((c, n) => c + (n >= 0 ? n % 10 : -n % 10));\n\
    \        return result < 0 ? result * -1L : result;", "        // base case\n\
    \        if (arr.Count == 0) return 0;\n        // first element is the sign of\
    \ the number\n        long sign = arr[0];\n        // remove it and call recursively\
    \ on the rest of the list\n        long res = arr.Remove(0) * ((arr.Count > 0)\
    \ ? CountNums(arr) : 1);\n        // add the sign back\n        res += sign *\
    \ (arr.Count > 0 ? arr.Count : 1);\n        return res;", "        long total\
    \ = 0;\n        if (arr.Count > 0) {\n            long total = 0;\n          \
    \  long firstDigit = 0;\n            for (int i = 0; i < arr.Count; i++) {\n \
    \               if (arr[i] < 0) {\n                    if (firstDigit < 0) {\n\
    \                        firstDigit = arr[i];\n                    }\n       \
    \             else {\n                        total += firstDigit - arr[i];\n\
    \                    }\n                }\n                else {\n          \
    \          total += arr[i];\n                }\n            }\n            total\
    \ = total + firstDigit;\n        }\n        return total;", "        var digits\
    \ = arr.Sum(x => x);\n        var firstPositive = arr.First(x => x > 0);\n   \
    \     if (firstPositive < 0)\n            firstPositive = -firstPositive;\n  \
    \      return digits + firstPositive;", "        var sum = 0;\n        var n =\
    \ arr.Count;\n        for(int i=0;i<n;i++)\n        {\n            if((arr[i]>0L)\
    \ || (arr[i]<0L) && arr[i]>=-(long)Math.Pow(10, (arr.Count-i))) \n           \
    \ sum += arr[i];\n        }\n        return sum;", "        if (arr == null ||\
    \ arr.Count == 0) {\n            return 0;\n        }\n        var n = arr.Count;\n\
    \        var count = 0;\n        for (int i = 0; i < n; i++) {\n            long\
    \ num = 0;\n            int j = 0;\n            while (arr[i] != 0) {\n      \
    \          num += (arr[i] % 10L);\n                arr[i] /= 10;\n           \
    \     j++;\n            }\n            if (num > 0) {\n                int sign\
    \ = 1;\n                if (arr[i] < 0) {\n                    sign = -1;\n  \
    \              }\n                if (j > 0 && num > 0) {\n                  \
    \  num *= sign;\n                    for (int k = 1; k < j; k++) {\n         \
    \               num /= 10;\n                    }\n                }\n       \
    \         count += num;\n            }\n        }\n        return count;", " \
    \       long count = 0L;\n        if (arr.Any()) {\n            long sum = 0L;\n\
    \            foreach (long i in arr) {\n                sum += i;\n          \
    \      count += SumDigits(sum);\n            }\n        }\n        return count;",
  "        long nums = 0;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            sum += i;\n            if (sum > 0) {\n                nums++;\n\
    \                sum = 0;\n            }\n        }\n        return nums;", " \
    \       if (arr.Count < 1) return 0L;\n        long sum = 0;\n        foreach\
    \ (long i in arr)\n            sum += i;\n        var digitSum = GetSumOfDigits(sum);\n\
    \        if (digitSum < 0) sum += (-1L);\n        return digitSum;", "       \
    \ long cnt = 0L;\n        long sum = 0L;\n        foreach (var n in arr)\n   \
    \     {\n            sum += (n < 0L ? -n + 10 : n);\n            cnt += arr[n]\
    \ >= 0 ? 1 : 0;\n        }\n        return cnt;", "        long nums = arr.Count();\n\
    \        long sum = 0;\n        // if negative, first element will be negative\n\
    \        long first = arr.ElementAt(0);\n        if (first < 0)\n            first\
    \ = -first;\n        if (first < 10) {\n            for (int i = 0; i < nums;\
    \ i++) {\n                sum += (long)Math.Pow(10.0, first);\n              \
    \  first--;\n            }\n        } else if (first < 100) {\n            for\
    \ (int i = 0; i < nums; i++) {\n                sum += (long)Math.Pow(100.0, first);\n\
    \                first--;\n            }\n        } else if (first < 1000) {\n\
    \            for (int i = 0; i < nums; i++) {\n                sum += (long)Math.Pow(1000.0,\
    \ first);\n                first--;\n            }\n        } else if (first <\
    \ 10000) {\n            for (int i = 0; i < nums; i++) {\n                sum\
    \ += (long)Math.Pow(10000.0, first);\n                first--;\n            }\n\
    \        } else if (first < 100000) {\n            for (int i = 0; i < nums; i++)\
    \ {\n                sum += (long)Math.Pow(100000.0, first);\n               \
    \ first--;\n            }\n        } else if (first < 1000000) {\n           \
    \ for (int i = 0; i < nums; i++) {\n                sum += (long)Math.Pow(1000000.0,\
    \ first);\n                first--;\n            }\n        } else if (first <\
    \ 10000000) {\n            for (int i = 0; i < nums; i++) {\n                sum\
    \ += (long)Math.Pow(10000000.0, first);\n                first--;\n          \
    \  }\n        } else if (first < 100000000) {\n            for (int i = 0; i <\
    \ nums; i++) {\n                sum += (long)Math.Pow(100000000.0, first);\n \
    \               first--;\n            }\n        } else if (first < 1000000000)\
    \ {\n            for (int i = 0; i < nums; i++) {\n                sum += (long)Math.Pow(1000000000.0,\
    \ first);\n                first--;\n            }\n        } else {\n       \
    \     for (int i = 0; i < nums; i++) {\n                sum += (long)Math.Pow(10000000000.0,\
    \ first);\n                first--;\n            }\n        }\n        return\
    \ sum;", "        long sum = 0L;\n        long digit = 0L;\n        long num =\
    \ 0L;\n        int count = 0;\n        for (long n; !arr.TryGetValue(n - 1, out\
    \ n); n++)\n            sum += n;\n        while(sum > 0) {\n            digit\
    \ = sum % 10;\n            num = sum / 10;\n            if (arr.Contains(num))\n\
    \                count++;\n            sum = num;\n        }\n        return count;",
  "        long sum = 0;\n        long countZero = 0;\n        long countNegative\
    \ = 0;\n        bool isNegative = false;\n        foreach(long num in arr) {\n\
    \            sum += num;\n            if(num < 0) {\n                isNegative\
    \ = true;\n                countNegative += num;\n            } else {\n     \
    \           countZero += num;\n            }\n        }\n        if(sum > 0)\n\
    \            return countZero - countNegative;\n        else\n            return\
    \ isNegative ? countNegative : countZero;", "        long sum = 0;\n        foreach\
    \ (long l in arr)\n            if (l > 0)\n                sum += GetNum(l);\n\
    \        return sum;", "        if (arr == null || arr.Count == 0) return 0L;\n\
    \        long n = 0L;\n        foreach (long num in arr) {\n            n = n\
    \ + GetDigits(num).Count() > 0 ? num : (long)0;\n        }\n        return n;",
  "        long count = 0;\n        long sumOfDigits = 0;\n        int i = arr.Count;\n\
    \        while (i-- > 0) {\n            long num = arr[i];\n            sumOfDigits\
    \ += num;\n            if (num < 0) {\n                sumOfDigits = -sumOfDigits;\n\
    \            }\n        }\n        // Console.WriteLine(arr.Count);\n        //\
    \ Console.WriteLine(sumOfDigits);\n        if (sumOfDigits > 0) {\n          \
    \  count++;\n        }\n        Debug.Assert(sumOfDigits == arr.Sum());\n    \
    \    return count;", "        if (arr == null)\n            return 0L;\n     \
    \   var result = new Dictionary<long, long>();\n        foreach (var i in arr)\n\
    \            result.Add((long)i, 1);\n        long total = 0L;\n        foreach\
    \ (var i in result.Where(x => x.Value > 0L).Select(x => x.Key))\n            total\
    \ += i;\n        return total;", "        long result = 0;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                result\
    \ += arr[i] % 10;\n                if (arr[i] >= 0) {\n                    result\
    \ -= 10;\n                }\n            } else {\n                result += arr[i];\n\
    \            }\n        }\n        return result;", "        var digitSums = new\
    \ Dictionary<long, long>();\n\n        foreach (var number in arr) {\n       \
    \     long total = 0;\n            foreach (var digit in number.ToString().ToCharArray())\
    \ {\n                total += (long)Math.Pow(10.0, digit);\n            }\n  \
    \          if (total > 0) {\n                digitSums[total] += 1;\n        \
    \    }\n        }\n\n        var num = 0;\n        foreach (var value in digitSums)\
    \ {\n            num += value.Value * Math.Pow(10.0, value.Key);\n        }\n\n\
    \        return num;", "        bool firstSigned = true;\n        long numSum\
    \ = arr.Sum();\n        long result = 0;\n        foreach (var item in arr) {\n\
    \            if (item > 0 && firstSigned) {\n                result += (item <\
    \ 0) ? -item : item;\n            } else if (item > 0) {\n                firstSigned\
    \ = false;\n                result += item;\n            }\n        }\n      \
    \  return numSum - result;", "        long result = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            long num = arr[i];\n            if (num <\
    \ 0) {\n                num = num * -1;\n            }\n            result +=\
    \ num % 10;\n        }\n        return result;", "        long result = 0;\n \
    \       foreach (var number in arr) {\n            if (number < 0)\n         \
    \       number *= (-1);\n            else\n                number %= 10;\n   \
    \         result += Math.Abs(number);\n        }\n        return result;", " \
    \       long n = 0;\n        foreach (long d in arr.Where(x => x >= 0))\n    \
    \        if (arr.Where(y => y == d).Count() > 0)\n                n++;\n     \
    \   return n;", "        long nums = 0;\n        if (arr.Count == 0) return 0;\n\
    \        long num = arr.First();\n        long sign = num >= 0 ? 1 : -1;\n   \
    \     int signs = -1;\n        while(num >= 10) {\n            nums ++;\n    \
    \        num += num / 10;\n            if (num >= 10) num += num / 10;\n     \
    \       signs = 1;\n        }\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] < 0)\n                arr[i] = -arr[i];\n            long\
    \ temp = 0;\n            int mult = 1;\n            for(int j = 0; j < signs;\
    \ j++) {\n                temp += mult * arr[i] * Math.Pow(10, j);\n         \
    \       mult *= 10;\n            }\n            nums += temp;\n        }\n   \
    \     return nums;", "        long count = 0;\n        for(long x = -1L; x < arr.Count;\
    \ x++) {\n            if((x < 0) && (arr.ElementAt(x) < 0)) x *= -1;\n       \
    \     int n = Convert.ToInt32(Math.Truncate(x));\n            if((n < 0) || (n\
    \ > 9)) {\n                count += n;\n            } else {\n               \
    \ count += n;\n                count += n % 10;\n            }\n        }\n  \
    \      return count;", "        // Return early if there are no elements\n   \
    \     if (arr.Count == 0)\n            return 0L;\n\n        long num = 0L;\n\
    \        bool negative = false;\n\n        // Add all numbers, signs and negatives\n\
    \        foreach (long num2 in arr)\n        {\n            num |= num2;\n   \
    \         if (num2 > 0)\n                num |= 1;\n            if (num2 < 0)\n\
    \                negative = true;\n        }\n\n        // Return early if there\
    \ are no non-negative elements\n        if (num == 0)\n            return num;\n\
    \n        // Use an enumerator to go through the array once\n        IEnumerable<long>\
    \ enumerator = arr.GetEnumerator();\n        enumerator.MoveNext();\n        long\
    \ sum = 0;\n        long total = 0;\n\n        // Go through the array once to\
    \ count the numbers\n        // and their signs (negative or positive) and a sum.\n\
    \        // If the current number is negative, add it to the sum and continue\n\
    \        // from the beginning of the array (skip the first element).\n      \
    \  // If the current number is positive, add it to the sum and continue\n    \
    \    // from the next element (skip the current element).\n        while (enumerator.MoveNext())\n\
    \        {\n            long n = enumerator.Current;\n            if (n != 0)\n\
    \            {\n                if (negative)\n                    sum += n +\
    \ 1;\n                else\n                    sum += n;\n            }\n   \
    \         else\n            {\n                total += sum;\n               \
    \ sum = 0;\n            }\n        }\n\n        // If the total was negative,\
    \ add it to the sum.\n        // This will handle negative numbers correctly.\n\
    \        if (negative && sum > 0)\n            sum += num;\n\n        // Return\
    \ the sum\n        return total;", "        bool neg = false;\n        long sum\
    \ = 0;\n        foreach (long d in arr) {\n            int num = Convert.ToInt32(Math.Abs(d));\n\
    \            int sig = (num < 0) ? num : num % 10;\n            if (sig > 0) {\n\
    \                sum += sig;\n            } else {\n                neg = true;\n\
    \                break;\n            }\n        }\n\n        return neg ? Convert.ToInt64(Math.Abs(sum))\
    \ : sum;", "        Debug.Assert(arr.Count > 0);\n        if (arr.Count == 1)\
    \ {\n            if (arr[0] < 0)\n                return ((long)arr[0]) * (-1L);\n\
    \            return arr[0];\n        }\n        int sign = arr[0] < 0 ? 1 : 0;\n\
    \        int n = arr.Count - 1;\n        long sum = 0;\n        double x = 0;\n\
    \        while (n >= 0) {\n            sum += sign * (arr[n] % 10);\n        \
    \    x /= 10.0;\n            n = n - 1;\n        }\n        if (sum > 0)\n   \
    \         sum = (long)Math.Abs(sum);\n        return sum * x;", "        // If\
    \ there are no numbers, then return zero.\n        if(arr.Count == 0)\n      \
    \      return 0L;\n        // Keep a running total of the number of numbers whose\
    \ sum\n        // has at least one positive digit.\n        long total = 0L;\n\
    \        bool first = true;\n        // For each number in the array:\n      \
    \  foreach(long num in arr) {\n            \n            // If there is a negative\
    \ number, then first\n            // set the sign for the number.\n          \
    \  if(num < 0)\n                num = num * -1;\n            // Get the first\
    \ digit from the number.\n            long digit = Math.Abs(num % 10);\n     \
    \       // If it is greater than zero, then the total\n            // count the\
    \ number of numbers with a sum which\n            // has at least one positive\
    \ digit.\n            if(!first)\n                total += digit;\n          \
    \  // If the number is positive, then we are\n            // counting numbers\
    \ with a sum of positive\n            // digits, so we set first = false\n   \
    \         else\n                first = false;\n        }\n        return total;",
  "        if (arr == null || arr.Count == 0)\n            return 0L;\n\n        if\
    \ (arr.Count == 1) {\n            long x = arr[0];\n            if (x < 0)\n \
    \               return (x / 10);\n            return 1;\n        }\n\n       \
    \ long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long\
    \ x = arr[i];\n            int sign = x < 0 ? -1 : 1;\n            long digit\
    \ = sign * ((x / 10) % 10);\n            sum += digit;\n        }\n        return\
    \ sum;", "        if (arr.Count == 0) {\n            return 0L;\n        }\n \
    \       var sum = 0;\n        var isPositive = true;\n        foreach (var num\
    \ in arr) {\n            sum += num;\n            if (sum < 0) {\n           \
    \     isPositive = false;\n                sum = -sum;\n            }\n      \
    \  }\n        var count = (isPositive ? arr.Count: arr.Count()) - 1;\n       \
    \ var positiveSum = sum;\n        var numDigits = arr[0].ToString().Length;\n\
    \        var positiveSumDigits = sum.ToString().Length;\n        foreach (var\
    \ num in arr) {\n            if (sum < 0) {\n                numDigits--;\n  \
    \              positiveSumDigits--;\n            } else {\n                positiveSumDigits++;\n\
    \            }\n            if (sum >= num) {\n                count--;\n    \
    \        }\n            sum += num;\n        }\n        return (count * positiveSum)\
    \ + (positiveSumDigits * (numDigits - positiveSumDigits));", "        if (arr\
    \ == null || arr.Count == 0)\n            return 0L;\n        var sum = 0L;\n\
    \        var sign = GetSign(arr.First());\n        for (var i = 1; i < arr.Count;\
    \ ++i) {\n            var x = GetDigit(arr.ElementAt(i), sign);\n            sum\
    \ += (x > 9) ? x-9 : x;\n            sign = GetSign(arr.ElementAt(i));\n     \
    \   }\n        return sum;", "        long sum = 0;\n        long sign = arr[0]\
    \ < 0 ? -(arr[0] % 10) : 0;\n        List<long> arr = arr.OrderBy(a => a % 10).ToList();\n\
    \        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] <=\
    \ 0) return 0;\n            sum += arr[i] - sign;\n        }\n        return sum;",
  "        var ret = 0;\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   var num = arr[i];\n            if (num < 0) {\n                num *= -1;\n\
    \                for (int j = 0; j < i; j++) {\n                    if (arr[j]\
    \ > 0)\n                        break;\n                }\n            }\n   \
    \         ret += num;\n        }\n        return ret;", "        long ans = 0;\n\
    \        long sum = 0;\n        foreach (long n in arr) {\n            sum +=\
    \ n;\n            if (sum < 0) {\n                ans += Math.Abs(sum);\n    \
    \            sum = 0;\n            } else if (sum > 0) {\n                ans\
    \ += 1;\n                sum = 0;\n            }\n        }\n        return ans;",
  "        int sum = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \        }\n        if (sum < 0)\n            sum += -sum;\n        return arr.Where(i\
    \ => i > 0).Count();", "        if (arr.Count == 0) return 0;\n        long firstDigit\
    \ = 0;\n        long secondDigit = 0;\n        long sumOfDigits = 0;\n       \
    \ foreach (long a in arr) {\n            firstDigit += a % 10;\n            secondDigit\
    \ += a / 10;\n            sumOfDigits += firstDigit + secondDigit;\n        }\n\
    \        if (firstDigit < 0 && secondDigit < 0) {\n            firstDigit = firstDigit\
    \ * -1;\n            secondDigit = secondDigit * -1;\n        }\n        if (sumOfDigits\
    \ == 0) return 0;\n        return 1 + sumOfDigits;", "        var sum = 0;\n \
    \       var digits = new List<long>();\n        var negative = false;\n      \
    \  foreach (var i in arr) {\n            if (i < 0) {\n                negative\
    \ = true;\n                digits.Add((-i)%10);\n            } else {\n      \
    \          digits.Add(i%10);\n            }\n            sum += digits.Sum();\n\
    \        }\n        var negCount = 0;\n        for (var j = 0; j < arr.Count;\
    \ j++) {\n            var sumNegative = arr.ElementAt(j) < 0;\n            var\
    \ neg = true;\n            if (sumNegative) {\n                neg = negative\
    \ ^ (arr.ElementAt(j) < 0);\n            }\n            if (sum == (long)negCount)\
    \ {\n                return neg;\n            }\n            negCount++;\n   \
    \     }\n        return 0;", '        return arr.Count(x => x > 0);', "      \
    \  if (arr.Count < 1)\n            return 0;\n        long nums = 1;\n       \
    \ bool hasNegative = arr.First() > 0;\n        List<int> digits = new List<int>();\n\
    \        foreach (long num in arr) {\n            int digit = 0;\n           \
    \ while (num > 0) {\n                digit = (int)(num % 10);\n              \
    \  num = (long)(num / 10);\n                digits.Add(digit);\n            }\n\
    \            if (hasNegative) {\n                digit = digits[digits.Count -\
    \ 1];\n                if (digit < 0)\n                    digit = -digit;\n \
    \           }\n            nums *= (long)Math.Pow(10, digits.Count);\n       \
    \ }\n        return nums;", "        if (arr == null || arr.Count <= 0) { return\
    \ 0; }\n        long sum = 0L;\n        long nums = (long)Math.Pow(10, arr.Count);\n\
    \        foreach (long n in arr.ToArray()) {\n            sum += n % nums;\n \
    \       }\n        return sum;", "        return arr.Count(num => {\n        \
    \    var digitSum = num.ToString().Aggregate(1, (acc, digit) => {\n          \
    \      int digitValue = int.Parse(digit);\n                return digitValue *\
    \ 10 + acc;\n            });\n            return digitSum >= 0;\n        });",
  "        Debug.WriteLine(\"Counting: \" + arr.Count);\n        var nums = arr.ToArray();\n\
    \        long cnt = 0;\n        for (int i = 0; i < nums.Length; i++) {\n    \
    \        cnt += nums[i] % 10;\n        }\n        if (cnt < 0) {\n           \
    \ cnt += -(cnt % 10);\n        }\n        return cnt;", "        List<long> sums\
    \ = new List<long>();\n        var ans = new List<long>();\n\n        foreach\
    \ (var x in arr) {\n            var sum = 0;\n            var i = 0;\n       \
    \     while (x > 0) {\n                sum += (x % 10L);\n                x /=\
    \ 10;\n                ++i;\n            }\n            sums.Add(sum);\n     \
    \   }\n\n        foreach (var x in arr) {\n            long y = 0;\n         \
    \   if (sums.Contains(y)) {\n                ans.Add(x);\n            }\n    \
    \    }\n\n        return ans.Count > 0 ? ans.Count : 0;", "        long res =\
    \ arr.Sum(n => (n%10==0)?1:0);\n        for (int i=0; i<arr.Count; i++) {\n  \
    \          int sum = 0;\n            int neg = (int)((arr[i]%10)*-1)%10;\n   \
    \         int neg2 = (arr[i]%10)*-1;\n            int mul = 1;\n            for\
    \ (int j=0; j<10; j++) {\n                mul*=(arr[i]%10);\n                arr[i]\
    \ = arr[i]/10;\n            }\n            arr[i] = mul;\n            if (arr[i]>0)\
    \ {\n                sum = (sum + neg) + (arr[i]-neg)*(sum+neg2);\n          \
    \  }\n        }\n        return ((arr.Count<=0)||(arr.Sum(n => (n%10==0)?1:0)<=0))?\
    \ 0L : (res / 10);", "        var arr = arr.Where(a => a > 0).ToArray();\n   \
    \     if (arr.Any(a => a < 0))\n            arr = arr.Select(a => (a * -1L)).ToArray();\n\
    \        var sum = 0;\n        for (int i = 0; i < arr.Length; i++)\n        \
    \    sum += arr[i];\n        return sum;", "        long result = 0;\n       \
    \ foreach(long num in arr) {\n            result += count_nums(num);\n       \
    \ }\n        return result;", "        long count = 0;\n        double sum = 0;\n\
    \        foreach(var i in arr) {\n            sum += i;\n            if(sum >\
    \ 0) count++;\n        }\n        return count;", "        long count = 0;\n \
    \       long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     sum += arr[i];\n            if (sum > 0) {\n                count += (int)(sum\
    \ % 10 == 0);\n            }\n        }\n        return count;", "        long\
    \ result = 0;\n        foreach (long i in arr) {\n            Debug.Assert(i >=\
    \ 0);\n            if (i > 0)\n                result += i % 10;\n           \
    \ else\n                result -= i % 10;\n        }\n        return result;",
  "        long result = 0;\n        long negative;\n        foreach (var item in\
    \ arr) {\n            if (item < 0) {\n                negative = item;\n    \
    \        }\n            else {\n                long digit;\n                for\
    \ (digit = item; digit > 0; digit /= 10L) {\n                    result += (digit\
    \ % 10);\n                }\n            }\n        }\n        if (negative >\
    \ 0) {\n            result -= (negative % 10);\n        }\n        return result;",
  "        // TODO write your answer here\n        long count=0L;\n        foreach(long\
    \ num in arr)\n        {\n            if((num<0L) && (num%10<0))\n           \
    \ {\n                num = num%10;\n            }\n            else\n        \
    \    {\n                num = num/10;\n            }\n            count+=num;\n\
    \        }\n        return count;", "        if (arr.Count == 0) {\n         \
    \   return 0L;\n        }\n        long sum = 0;\n        for (int i = 1; i <\
    \ arr.Count; i++) {\n            sum += arr[i];\n            while (sum < 0) {\n\
    \                sum += 10;\n            }\n        }\n        return sum;", " \
    \       var sum = 0;\n        foreach (var v in arr) {\n            if (v > 0)\
    \ {\n                sum = sum + v;\n            }\n        }\n        return\
    \ (long)Math.Abs(sum - Math.Abs(sum % 10));", "        var result = arr.Where(x\
    \ => x > 0).Sum();\n        var sum = arr.Sum();\n        var sign = sum > 0 ?\
    \ 1 : 0;\n        result -= sign * long.MaxValue;\n        return result;", " \
    \       // Write your code here.\n        if (arr.Count == 0) return 0;\n    \
    \    long ans = 0;\n        long sum = 0;\n        foreach (long n in arr)\n \
    \       {\n            if (n > 0)\n            {\n                sum += n;\n\
    \                if (sum >= 10)\n                {\n                    ans++;\n\
    \                    sum = 0;\n                }\n            }\n            else\n\
    \            {\n                ans += (n / 10);\n                if (ans % 10\
    \ != 0)\n                    ans -= ans % 10;\n                sum = 0;\n    \
    \        }\n        }\n        return ans;", "        long ans = 0;\n        foreach\
    \ (var v in arr) {\n            ans += (v.Abs() % 9 == 0) ? 0 : 1;\n        }\n\
    \        return ans;", "        long nums = 0;\n        long curr = arr.First();\n\
    \        foreach (long a in arr) {\n            nums += a - curr;\n          \
    \  curr = a;\n        }\n        return nums;", "        if (arr.Count == 0)\n\
    \            return 0L;\n        if (arr.Count == 1)\n            return 1L;\n\
    \        long first = arr.First();\n        int digits = 0;\n        foreach (long\
    \ num in arr)\n        {\n            long digit;\n            if (num < 0)\n\
    \                num = num + Math.Abs(num);\n            else\n              \
    \  num = num;\n            digit = num % 10;\n            digits = (int)(Math.Abs(digits)\
    \ + digits * Math.Abs(digit));\n        }\n        return Math.Abs(digits);",
  "        long sum = 0;\n        long num = 0;\n        long i = 0;\n        foreach\
    \ (var item in arr)\n        {\n            i = -(i + 1);\n            num = num\
    \ * 10 + i;\n            if (num > 0)\n                sum += num;\n        }\n\
    \        return sum;", "        long sum = 0;\n        foreach (var num in arr)\n\
    \        {\n            sum += num;\n        }\n        return sum;", "      \
    \  long result = 0;\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   if (arr[i] > 0) {\n                result += arr[i];\n            }\n    \
    \    }\n        return result;", "        // Write your code here\n        long\
    \ x = 0;\n        bool b1 = false, b2 = false;\n        bool b3 = false, b4 =\
    \ false;\n        long n = 0;\n        long sum = 0;\n        if (arr.Count <\
    \ 1) {\n            return 0;\n        }\n        \n        foreach (long i in\
    \ arr) {\n            sum += i;\n            n++;\n        }\n        \n     \
    \   if (n < 10) {\n            return 0;\n        }\n        \n        if (sum\
    \ < 10) {\n            return 0;\n        }\n        \n        \n        \n  \
    \      \n        bool flag = true;\n        \n        \n        \n        \n \
    \       \n        //Console.WriteLine(\"Enter a digit > 0 to continue\");\n  \
    \      //long x = Convert.ToInt64();\n        foreach (long i in arr) {\n    \
    \        b1 = false;\n            b2 = false;\n            b3 = false;\n     \
    \       b4 = false;\n            n = 0;\n            sum = 0;\n            \n\
    \            \n            \n            \n            if (flag) {\n         \
    \       if (sum == 0) {\n                    b1 = true;\n                }\n \
    \               else {\n                    b1 = true;\n                }\n  \
    \              \n                if (sum > 0) {\n                    b2 = true;\n\
    \                }\n                else {\n                    b2 = true;\n \
    \               }\n                \n                if (sum > 10) {\n       \
    \             b3 = true;\n                }\n                else {\n        \
    \            b3 = true;\n                }\n                \n               \
    \ if (sum > 100) {\n                    b4 = true;\n                }\n      \
    \          else {\n                    b4 = true;\n                }\n       \
    \         \n                \n                \n            }\n            else\
    \ {\n                if (sum < 0) {\n                    b1 = true;\n        \
    \        }\n                else {\n                    b1 = true;\n         \
    \       }\n                \n                if (sum > 0) {\n                \
    \    b2 = true;\n                }\n                else {\n                 \
    \   b2 = true;\n                }\n                \n                if (sum >\
    \ 10) {\n                    b3 = true;\n                }\n                else\
    \ {\n                    b3 = true;\n                }\n                \n   \
    \             if (sum > 100) {\n                    b4 = true;\n             \
    \   }\n                else {\n                    b4 = true;\n              \
    \  }\n                \n                \n                \n            }\n  \
    \          \n            if (sum == 0 && flag) {\n                x = i;\n   \
    \             flag = false;\n            }\n            else {\n             \
    \   if (b1 == true) {\n                    x = i;\n                    flag =\
    \ false;\n                }\n                else if (b2 == true) {\n        \
    \            x = i;\n                    flag = false;\n                }\n  \
    \              else if (b3 == true) {\n                    x = i;\n          \
    \          flag = false;\n                }\n                else if (b4 == true)\
    \ {\n                    x = i;\n                    flag = false;\n         \
    \       }\n            }\n            \n            \n            \n         \
    \   \n            \n            \n            \n        }\n        \n        \n\
    \        if (b1) {\n            n = 1;\n        }\n        if (b2) {\n       \
    \     n = 2;\n        }\n        if (", "        long counter = 0;\n        long\
    \ total = 0;\n        long product = 1;\n        bool neg = false;\n        if\
    \ (arr.Count == 0) {\n            return counter;\n        }\n        foreach\
    \ (long n in arr) {\n            if (n < 0) {\n                neg = true;\n \
    \               n = -n;\n            }\n            total += n;\n            product\
    \ *= n;\n        }\n        if (neg) {\n            counter = total % 10;\n  \
    \          total /= 10;\n        }\n        while ((total > 0) && (arr.Count >\
    \ 0)) {\n            counter++;\n            total -= (int)Math.Floor(Math.Log(total,\
    \ 10));\n            long digit = total % 10;\n            total = (long)Math.Floor(total\
    \ / 10);\n            if (digit > 1) {\n                counter--;\n         \
    \       product *= digit;\n            }\n        }\n        return counter;",
  "        long cnt = 0;\n        bool first = true;\n        bool negative = false;\n\
    \n        if (arr.Count == 0)\n            return 0;\n\n        // Find the first\
    \ non-negative number\n        long firstNum = arr.First();\n        long firstNumSign\
    \ = 0;\n        while (firstNum > 0) {\n            if (firstNumSign < 0)\n  \
    \              firstNumSign = firstNum % 10;\n            if (firstNum < 0)\n\
    \                firstNum *= 10;\n            firstNum -= firstNumSign;\n    \
    \        first = true;\n        }\n\n        // Find the first signed digit greater\
    \ than zero\n        int firstSignedDigit = 0;\n        while (firstNum > 0) {\n\
    \            firstSignedDigit += firstNum % 10;\n            firstNum /= 10;\n\
    \        }\n\n        // Count all the numbers with non-zero first digit\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            long num = arr[i];\n\
    \            long numSign = 0;\n\n            // First check to see if it is negative\n\
    \            if (num < 0)\n                num = num * -1;\n            else if\
    \ (num < 10)\n                numSign = 1;\n            else\n               \
    \ numSign = num % 10;\n\n            // If it is not negative\n            if\
    \ (!negative)\n                if (firstSignedDigit < 0)\n                   \
    \ num *= -1;\n                else\n                    num *= firstSignedDigit;\n\
    \n            // Add it to the count\n            if (num > 0)\n             \
    \   cnt += num;\n        }\n\n        return cnt;", "        long nums = 0L;\n\
    \        long i = 0;\n        string x = \"\";\n        while (i < arr.Count &&\
    \ arr.ElementAt(i) > 0) {\n            if (arr.ElementAt(i) > 0) {\n         \
    \       nums += arr.ElementAt(i);\n            }\n            i += 1;\n      \
    \  }\n        while (i < arr.Count) {\n            int digit = arr.ElementAt(i)\
    \ % 10;\n            x += digit.ToString();\n            if (digit > 0) {\n  \
    \              nums += (long)Math.Pow(10, arr.ElementAt(i) - digit);\n       \
    \     }\n            i += 1;\n        }\n        int sum = 0;\n        foreach\
    \ (char c in x.ToCharArray()) {\n            sum += (int)c - 48;\n        }\n\
    \        nums += sum;\n        if (nums < 0) {\n            nums *= -1;\n    \
    \    }\n        return nums;", "        var zeros = arr.Sum(x => x > 0 ? 0 : 1);\n\
    \        var digits = arr.Sum(x => x < 0 ? -x : x);\n        var nums = digits\
    \ / zeros;\n        return nums % 2 == 0 ? nums + 1 : nums + 2;", "        if\
    \ (arr.Count <= 0) return 0L;\n        var result = 0;\n        bool neg = false;\n\
    \        if (arr.First() < 0) neg = true;\n        long sum = 0;\n        foreach\
    \ (var n in arr.Skip(1)) {\n            sum += n;\n            if (sum > 0) {\n\
    \                result++;\n                sum -= n % 10;\n            }\n  \
    \      }\n        return neg ? -result : result;", "        var sum = 0;\n   \
    \     long firstDigit = arr.FirstOrDefault(d => d < 0);\n        if (firstDigit\
    \ < 0) return 0L;\n        var lastDigit = arr.Last();\n        var digitCount\
    \ = 10;\n        while (digitCount <= lastDigit) {\n            var digits = new\
    \ List<long>();\n            foreach (var i in Enumerable.Range(0, digitCount))\
    \ {\n                var digit = (long)Math.Floor(i / Math.Sqrt(digitCount));\n\
    \                var digitValue = arr.Count(a => a < Math.Abs(digit))\n      \
    \              + (a < 0 ? 0 : arr[a] - Math.Abs(digit))\n                    -\
    \ (a >= Math.Abs(digit) ? digit : 0);\n                digits.Add(digitValue);\n\
    \            }\n            var digitSum = digits.Sum();\n            if (digitSum\
    \ >= firstDigit) {\n                sum += digitSum;\n                digitCount\
    \ = 10;\n            }\n            else {\n                digitCount /= 10;\n\
    \            }\n        }\n        return sum;", "        // Initialize some variables\n\
    \        long count = 0;\n        long sum = 0;\n        long lastVal = arr.FirstOrDefault();\n\
    \        long firstVal = arr.FirstOrDefault();\n\n        // Go through the list\
    \ until you get to the end OR until the sum of\n        // digits in the numbers\
    \ before the last is > 0.\n        while (arr.Count > 0) {\n            sum +=\
    \ lastVal;\n            lastVal = arr.FirstOrDefault();\n            if (sum >\
    \ 0) {\n                count += 1;\n            }\n        }\n\n        return\
    \ count;", "        int count = 0;\n        long sum = 0;\n        long temp =\
    \ 0;\n        foreach (long n in arr)\n        {\n            sum += n;\n    \
    \        if (sum > 0)\n            {\n                count++;\n             \
    \   sum -= n;\n            }\n        }\n        return count;", '        return
    arr.Where(i => (int)i >= 0).Count(i => i >= 0);', '        return arr.Sum(x =>
    numDigits(x));', "        long ret = 0;\n        if (arr.Count == 0) return ret;\n\
    \        long max = 0;\n        long sum = 0;\n        foreach (var x in arr)\
    \ {\n            sum += x;\n            if (sum > max) max = sum;\n        }\n\
    \        foreach (var x in arr) {\n            sum += x;\n            if (sum\
    \ > max) max = sum;\n        }\n        foreach (var x in arr) {\n           \
    \ sum += x;\n            if (sum > max) max = sum;\n        }\n        foreach\
    \ (var x in arr) {\n            sum += x;\n            if (sum > max) max = sum;\n\
    \        }\n        foreach (var x in arr) {\n            sum += x;\n        \
    \    if (sum > max) max = sum;\n        }\n        foreach (var x in arr) {\n\
    \            sum += x;\n            if (sum > max) max = sum;\n        }\n   \
    \     foreach (var x in arr) {\n            sum += x;\n            if (sum > max)\
    \ max = sum;\n        }\n        foreach (var x in arr) {\n            sum +=\
    \ x;\n            if (sum > max) max = sum;\n        }\n        foreach (var x\
    \ in arr) {\n            sum += x;\n            if (sum > max) max = sum;\n  \
    \      }\n        foreach (var x in arr) {\n            sum += x;\n          \
    \  if (sum > max) max = sum;\n        }\n        foreach (var x in arr) {\n  \
    \          sum += x;\n            if (sum > max) max = sum;\n        }\n     \
    \   foreach (var x in arr) {\n            sum += x;\n            if (sum > max)\
    \ max = sum;\n        }\n        foreach (var x in arr) {\n            sum +=\
    \ x;\n            if (sum > max) max = sum;\n        }\n        foreach (var x\
    \ in arr) {\n            sum += x;\n            if (sum > max) max = sum;\n  \
    \      }\n        foreach (var x in arr) {\n            sum += x;\n          \
    \  if (sum > max) max = sum;\n        }\n        foreach (var x in arr) {\n  \
    \          sum += x;\n            if (sum > max) max = sum;\n        }\n     \
    \   foreach (var x in arr) {\n            sum += x;\n            if (sum > max)\
    \ max = sum;\n        }\n        foreach (var x in arr) {\n            sum +=\
    \ x;\n            if (sum > max) max = sum;\n        }\n        foreach (var x\
    \ in arr) {\n            sum += x;\n            if (sum > max) max = sum;\n  \
    \      }\n        foreach (var x in arr) {\n            sum += x;\n          \
    \  if (sum > max) max = sum;\n        }\n        foreach (var x in arr) {\n  \
    \          sum += x;\n            if (sum > max) max = sum;\n        }\n     \
    \   foreach (var x in arr) {\n            sum += x;\n            if (sum > max)\
    \ max = sum;\n        }\n        foreach (var x in arr", "        var sum = 0;\n\
    \        var sign = (arr[0] < 0) ? -arr[0] : arr[0];\n        if (arr.Count ==\
    \ 0)\n            return (sign == 0) ? 0 : (sign == -1) ? arr.Count - 1 : 0;\n\
    \        foreach (var num in arr) {\n            sum += num;\n            if (sum\
    \ > 9)\n                sum = sum % 10;\n        }\n        return (sign != 0)\
    \ ? (sum == 0 ? 0 : arr.Count - 1) : (arr.Count - 1);", "        long result =\
    \ 0;\n        int count = 0;\n        for(int i = 0; i<arr.Count; i++){\n    \
    \        if(arr[i] > 0)\n                result += arr[i];\n            else\n\
    \                if(arr[i] < 0){\n                    result += arr[i]*(arr[i]%10);\n\
    \                    count++;\n                }\n        }\n        if(count\
    \ > 0)\n            Console.WriteLine(\"Number of elements which has a sum of\
    \ digits > 0: \" + count);\n        else\n            Console.WriteLine(\"Number\
    \ of elements which has a sum of digits > 0: \"\n                + \"This number\
    \ does not exist. \");\n        return result;", "        List<int> arr = arr.Select(n\
    \ => Convert.ToInt32(n)).ToList();\n        bool result = true;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0)\n                result\
    \ = result && arr[i] == Convert.ToInt32(Math.Floor(arr[i]));\n            else\n\
    \                result = result && arr[i] < 0;\n        }\n        return result\
    \ ? arr.Count : 0;", "        if (arr.Count == 0)\n            return 0L;\n  \
    \      long sum = 0L;\n        foreach (long num in arr)\n            if (num\
    \ > 0L)\n                sum += Convert.ToInt64(Math.Floor(Math.Log10(num)) +\
    \ 1);\n        return sum;", "        if (arr.Count == 0)\n            return\
    \ 0L;\n        long sum = 0L;\n        long firstSign = 0;\n        if (arr.Count\
    \ > 0)\n            firstSign = arr[0] < 0 ? arr.Take(1).Select(x => x < 0 ? -x\
    \ : x).FirstOrDefault() : arr[0];\n        for (var i = 1; i < arr.Count; i++)\n\
    \            sum += firstSign < arr[i] ? -firstSign - arr[i] : firstSign - arr[i];\n\
    \        return sum;", "        var result = arr.Where(a => a > 0).Sum();\n  \
    \      return result == 0 ? 0 : (long)Math.Abs(result) / 10;", "        long total\
    \ = 0;\n        bool neg = false;\n        foreach (long i in arr) {\n       \
    \     int k = i;\n            total += k;\n            if (i < 0) {\n        \
    \        neg = true;\n                k = (-i)+1;\n            }\n           \
    \ total += k;\n        }\n        return neg ? total : -total;", "        long\
    \ digitCount = 0;\n        long digitSum = 0;\n        long firstSignedDigit =\
    \ 0;\n        long tempSum = 0;\n        foreach (long num in arr) {\n       \
    \     if (num > 0) {\n                digitSum += num % 10;\n                digitCount++;\n\
    \            }\n            else {\n                firstSignedDigit -= num %\
    \ 10;\n                digitSum += num % 10;\n                digitCount++;\n\
    \            }\n            tempSum = digitSum;\n            digitSum = 0;\n \
    \       }\n        if (firstSignedDigit < 0) {\n            tempSum = digitSum;\n\
    \            digitSum = 0;\n            foreach (long num in arr) {\n        \
    \        if (num < 0) {\n                    digitSum += num % 10;\n         \
    \           digitCount++;\n                }\n            }\n        }\n     \
    \   return digitCount;", "        if (arr.Count == 0) return 0L;\n\n        long\
    \ sum = 0L;\n        long negative = arr[0] < 0L ? -arr[0] : 0L;\n        long\
    \ pow = Convert.ToInt32(Math.Pow(10, arr.Count - 1));\n        long sign = arr.Sum(x\
    \ => x * Math.Pow(10, arr.Count - 1 - x.ToString().Length)) - negative;\n\n  \
    \      foreach (long num in arr.Where(x => x >= 0L)) {\n            sum += sign\
    \ * num / pow;\n            sign *= sign;\n        }\n        return sum;", " \
    \       long count = 0;\n        long num = arr.First();\n        Console.WriteLine(num);\n\
    \        do {\n            long x = num;\n            long y = num / 10;\n   \
    \         num -= y;\n            int digit = Convert.ToInt32(Math.Floor(Math.Abs(x)));\n\
    \            int carry = 0;\n            while (digit >= 0 && digit <= 9) {\n\
    \                carry = carry + digit * 10;\n                digit -= 1;\n  \
    \          }\n            int sum = 0;\n            sum += carry + 1;\n      \
    \      if (sum > 9) {\n                carry = 1L;\n                sum += carry;\n\
    \            }\n            Console.WriteLine(carry + \" \" + sum);\n        \
    \    count += sum;\n        } while (num > 0);\n        return count;", "    \
    \    if (arr.Count == 0)\n            return 0L;\n        var nSum = arr.Sum();\n\
    \        var sign = arr.First() > 0 ? 1 : -1;\n        if (arr[0].ToString().Length\
    \ > 0)\n            arr[0] = sign * Convert.ToInt64(arr[0].ToString()[0], CultureInfo.InvariantCulture);\n\
    \        var count = sign * (nSum / 36);\n        for (int i = 1; i < arr.Count;\
    \ i++)\n            count += sign * (nSum / 36);\n        if (arr[0].ToString().Length\
    \ > 0)\n            count += sign * (nSum / 36);\n        return count;", "  \
    \      long result = 0;\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            sum += arr[i];\n        }\n        if (sum < 0) {\n         \
    \   for (int i = 0; i < arr.Count; i++) {\n                arr[i] *= -1;\n   \
    \             sum += arr[i];\n            }\n        }\n        long result2 =\
    \ 0;\n        int pos = 0;\n        int digits = 1;\n        bool sign = true;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long tmp = arr[i];\n\
    \            if (tmp < 0) {\n                tmp = tmp * -1;\n               \
    \ sign = !sign;\n            }\n            while (tmp >= Math.Pow(10, digits))\
    \ {\n                result2 += (tmp % Math.Pow(10, digits)) * (sign ? 1 : -1);\n\
    \                tmp /= Math.Pow(10, digits);\n                digits++;\n   \
    \         }\n            if (tmp > 0) {\n                result2 += (tmp % Math.Pow(10,\
    \ digits)) * (sign ? 1 : -1);\n            }\n        }\n        result = result2;\n\
    \        return result;", "        long sum = 0;\n        long count = 0;\n  \
    \      long minus_count = 0;\n\n        if (arr.Count == 0) {\n            return\
    \ 0;\n        }\n\n        long negative = 0;\n        long negative_count = 0;\n\
    \        long negative_carry = 0;\n        long minus_sum = 0;\n\n        long\
    \ carry = 1;\n\n        foreach (long num in arr) {\n            sum = sum + num;\n\
    \            count++;\n\n            if (sum < minus_sum) {\n                minus_sum\
    \ = sum;\n                minus_count = count;\n            }\n\n            if\
    \ (sum < minus_sum + carry) {\n                carry = sum - minus_sum;\n    \
    \            sum = 0;\n            }\n            else {\n                carry\
    \ = 1;\n            }\n        }\n\n        if (carry > 0) {\n            sum\
    \ = sum + carry;\n            count++;\n        }\n\n        if (sum > 0) {\n\
    \            sum += minus_sum;\n            count++;\n        }\n\n        if\
    \ (sum < 0) {\n            sum += negative;\n            count++;\n          \
    \  minus_count -= negative_count;\n        }\n\n        return count;", '        return
    arr.Where(e => e > 0L).Count();', '        return arr.Where(x => x%10 > 0).Count();',
  "        long sum = 0;\n        arr.ForEach(x => sum += x);\n        return sum;",
  "        if (arr == null)\n            throw new ArgumentNullException(\"arr\");\n\
    \n        long count = 0;\n\n        foreach (long x in arr) {\n            if\
    \ (x < 0)\n                count += x - Math.Abs(x);\n            else\n     \
    \           count += x * x;\n        }\n\n        return count;", "        //\
    \ Write your code here.\n        var sum = 0;\n        foreach (var a in arr)\
    \ {\n            sum += a;\n        }\n        return sum;", "        long count\
    \ = 0;\n        foreach (var num in arr) {\n            var digitSum = 0;\n  \
    \          while (num > 0) {\n                digitSum += num % 10;\n        \
    \        num /= 10;\n            }\n            if (digitSum > 0) {\n        \
    \        count++;\n            }\n        }\n        return count;", "       \
    \ long[] sum = arr.SelectMany((x, i) => Enumerable\n            .Range(0, x.ToString().Length)\n\
    \            .Where(y => x % Math.Pow(10, y) == 0)\n            .Select(z => x\
    \ * Math.Pow(10, z)))\n            .ToArray();\n        long[] digits = sum.Where(x\
    \ => x >= 0).ToArray();\n        long sum2 = 0;\n        foreach (long num in\
    \ sum) {\n            sum2 += num;\n        }\n        long sum3 = (sum2 % Math.Pow(10,\
    \ digits.Length));\n        return sum3 < 0 ? sum3 - sum : sum3;", "        long\
    \ nums = 0;\n        if (arr != null && arr.Count > 0) {\n            arr\n  \
    \              .Where(a => a > 0)\n                .ForEach(a => a <= Math.Abs(a)\
    \ ? nums += 1 : 0);\n        }\n        return nums;", "        long sum = 0;\n\
    \        long lastDigit = 0;\n        bool negative = false;\n        if (arr.Count\
    \ > 0) {\n            long[] arrDigits = arr.ConvertAll(x => long.Parse(x.ToString()));\n\
    \            if (arrDigits.Length == 1) {\n                sum += arrDigits[0];\n\
    \            } else if (arrDigits.Length > 1) {\n                // The first\
    \ element of the array is negative\n                negative = arrDigits[0] <\
    \ 0;\n                if (negative)\n                    arrDigits[0] *= -1;\n\
    \                lastDigit = arrDigits[arrDigits.Length - 1];\n              \
    \  arr.RemoveAt(arrDigits.Length - 1);\n                arrDigits = arr.ConvertAll(x\
    \ => long.Parse(x.ToString()));\n            }\n            long[] arrSums = arrDigits.Select(x\
    \ => x - lastDigit).ToArray();\n            int count = 0;\n            for (long\
    \ sumDigit : arrSums) {\n                if (sumDigit != 0) {\n              \
    \      sum += sumDigit;\n                    count++;\n                }\n   \
    \         }\n            if (negative)\n                sum *= -1;\n        }\n\
    \        return sum;", "        long sum = 0;\n        bool negative = false;\n\
    \        foreach (var i in arr) {\n            sum += i;\n            if (sum\
    \ > 0) {\n                negative = false;\n                break;\n        \
    \    }\n            if (sum < 0) {\n                sum *= -1;\n             \
    \   negative = true;\n                break;\n            }\n        }\n     \
    \   return (arr.Any() ? arr.Sum(x => x > 0 ? x % 10 : 0) : 0) + (negative ? -sum\
    \ : 0);", "        long[] result = new long[arr.Count];\n        long[] sums =\
    \ new long[arr.Count];\n        long[] digits = numsToDigits(arr);\n        long\
    \ sum = 0;\n        long pos = 0;\n        bool hasNegative = false;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n     \
    \           hasNegative = true;\n                sum += -arr[i];\n           \
    \     pos = i;\n                continue;\n            }\n            sum += arr[i];\n\
    \            while (pos != i && sums[pos] < 0) {\n                sum += sums[pos];\n\
    \                pos--;\n            }\n            result[i] = sum;\n       \
    \     sums[pos] = sum;\n        }\n        long nums = sums.Where(s => s > 0).Count();\n\
    \        if (hasNegative) {\n            nums--;\n        }\n        return nums;",
  "        long ans = 0;\n        long sign = 1;\n        foreach(long x in arr) {\n\
    \            long y = x;\n            while(y != 0) {\n                if(y %\
    \ 10 == 1) y = (y / 10) * 10;\n                else\n                    y = (y\
    \ * 10) + (y % 10);\n            }\n            if(x < 0) {\n                sign\
    \ += x / (int)(Math.Abs(x));\n            } else {\n                sign += x;\n\
    \            }\n            ans += sign;\n        }\n        return ans;", " \
    \       // The sum of digits is given by sum of the first digit and the\n    \
    \    // remaining digits:\n        //\n        // The sum is positive when the\
    \ sum of digits to its left is positive:\n        //\n        //     -123    \
    \  --> -1+2+3\n        //     +123      --> -1+2+3\n        //\n        // The\
    \ sum is negative when the sum of digits to its left is negative:\n        //\n\
    \        //     -123      --> -1+2-3\n        //     +123      --> -1+2+3\n  \
    \      //\n        // The sum is 0 when all digits are zero.\n        //\n   \
    \     long sum = 0;\n        if (arr.Count == 0)\n            return 0L;\n   \
    \     long first = arr[0];\n        if (first < 0)\n            first = -first;\n\
    \        if (first == 0)\n            return arr.Count < 1 ? 1L : arr.Count;\n\
    \        bool firstPositive = true;\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            long next = arr[i];\n            if (next < 0)\n            \
    \    next = next * -1; // First signed digit is negative.\n            long digit\
    \ = next / 10;\n            next = next % 10;\n            if (digit + next <\
    \ 0) {\n                if (!firstPositive)\n                    return arr.Count\
    \ < 1 ? 1L : arr.Count;\n                firstPositive = false;\n            }\
    \ else {\n                sum += digit;\n            }\n        }\n        //\
    \ The sum is only valid when all digits were positive.\n        if (!firstPositive)\n\
    \            return arr.Count < 1 ? 1L : arr.Count;\n        return sum;", " \
    \       if (arr == null || arr.Count <= 0)\n            return 0L;\n        long\
    \ result = 0L;\n        long[] sum = new long[arr.Count];\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            long val = arr[i];\n            if (val\
    \ < 0) {\n                sum[i] = -val;\n                val = -val;\n      \
    \      }\n            sum[i] = (int)val * (int)Math.Pow(10, (int)Math.Log10(val)\
    \ + 1);\n        }\n        int max = Math.Min(sum.Max(), arr.Count);\n      \
    \  for (int i = 0; i < max; i++)\n            if (sum[i] > 0)\n              \
    \  result++;\n        return result;", "        if (arr.Count == 0) return 0L;\n\
    \        if (arr.Count == 1) return (long)arr[0];\n        var sum = 0;\n    \
    \    var s = arr.Sum();\n        if (s > 0) {\n            sum += (long)(Math.Log10(s)\
    \ * arr.Count);\n        }\n        arr[0] += ((long) s.ToString().Length - 1L);\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            sum += arr[i] - arr[i\
    \ - 1];\n        }\n        return sum;", "        long sum = 0, counter = 0;\n\
    \        if (arr.Count <= 0) return 0;\n        if (arr.Count == 1) return 1;\n\
    \n        for (int i = 0; i < arr.Count; i++)\n            counter += arr[i] <\
    \ 0 ? -(arr[i]) : (arr[i]);\n\n        bool negative = counter < 0;\n        if\
    \ (negative) {\n            for (int i = 0; i < arr.Count; i++) {\n          \
    \      counter += arr[i] < 0 ? -(arr[i]) : (arr[i]);\n                if (counter\
    \ < 0) counter = (long) (-counter);\n            }\n            counter *= -1;\n\
    \        }\n        int shift = Convert.ToInt32(Math.Log(arr.Count, 2));\n   \
    \     if (shift != 0)\n            arr = arr.Skip(shift).ToList();\n\n       \
    \ foreach (var n in arr)\n            sum += (n * n);\n        return arr.Where(x\
    \ => (x * x) == sum).Count();", "        long n = 0;\n        foreach (var x in\
    \ arr) {\n            n += x.ToString(CultureInfo.InvariantCulture).Count();\n\
    \        }\n        return n;", "        long count = 0L;\n        foreach (long\
    \ num in arr)\n            count += count_digits(num);\n        return count;",
  "        if (arr.Count == 0) {\n            throw new ArgumentException(\"arr cannot\
    \ be empty\");\n        }\n        long sum = 0;\n        int cnt = 0;\n     \
    \   foreach (long num in arr) {\n            if (num > 0) {\n                int\
    \ digit = num % 10;\n                sum += digit;\n                cnt += (digit\
    \ > 0);\n            } else {\n                sum -= num % 10;\n            \
    \    cnt += (num < 0);\n            }\n        }\n        return cnt;", "    \
    \    if (arr.Count == 0) return 0;\n        var s = arr.Sum(x => Math.Abs(x));\n\
    \        if (s <= 0) return 0;\n        long result = 0;\n        var nums = arr.Where(x\
    \ => x > 0).ToList();\n        for (int i = 0; i < nums.Count - 1; i++) {\n  \
    \          long x = nums[i];\n            long y = nums[i + 1];\n            long\
    \ sum = x - (long)Math.Floor(x / y);\n            if (sum > 0) {\n           \
    \     result += nums.Sum(x => Math.Abs(x));\n            }\n        }\n      \
    \  return result;", "        if (arr == null || arr.Count < 1) {\n           \
    \ return 0L;\n        }\n        // Get the first digit of the positive number\n\
    \        var pos = GetPositiveDigit(arr[0]);\n        if (pos == -1L) {\n    \
    \        return 0L;\n        }\n\n        // Sum the remaining digits\n      \
    \  var total = 0;\n        foreach (var l in arr.Skip(1).Take(arr.Count - 1))\
    \ {\n            var d = GetPositiveDigit(l);\n            if (d == -1L) {\n \
    \               return 0L;\n            }\n            total += d;\n        }\n\
    \n        // Check the first digit of the negative number\n        if (arr.Take(1).Any())\
    \ {\n            var negDig = GetPositiveDigit(arr.First());\n            if (negDig\
    \ == -1L) {\n                return 0L;\n            }\n            return total\
    \ - negDig;\n        }\n        return total;", "        var sum = 0;\n      \
    \  foreach (var el in arr)\n            sum += el;\n        if (sum < 0)\n   \
    \         sum = -sum;\n        int cnt = 0;\n        foreach (var el in arr)\n\
    \            cnt += (int)(el / Math.Pow(10, Math.Abs(sum).ToString().Length));\n\
    \        return cnt;", "        var result = arr.Sum(x => x.ToString().Where(c\
    \ => c >= '0' && c <= '9').Count());\n        if (arr.Any(x => x < 0)) return\
    \ -arr.Sum(x => x.ToString().First().ToCharArray()[0]) - 1;\n        return result;",
  "        // TODO: Use an ArrayList rather than a List<T>\n        long cnt = 0;\n\
    \        foreach (long n in arr)\n        {\n            long sum = CountDigits(n);\n\
    \            if (sum > 0) cnt++;\n        }\n        return cnt;", "        if\
    \ (arr.Count == 0) {\n            return 0;\n        }\n        var sum = arr.FirstOrDefault();\n\
    \        var res = 0;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     sum += arr[i];\n            if (sum < 0) {\n                sum = (sum /\
    \ 10) * ((sum % 10) + 1);\n            }\n            res = res + sum;\n     \
    \   }\n        return res;", "        var sum = 0;\n        foreach (var val in\
    \ arr) {\n            long num = val;\n            if (num < 0) {\n          \
    \      num = num < 0 ? -num : 0;\n            }\n            sum += num;\n   \
    \     }\n        return sum;", "        if (arr.Count <= 0) return 0L;\n     \
    \   var result = new HashSet<long>();\n        var sum = 0;\n        foreach (var\
    \ num in arr) {\n            sum += num;\n            if (!sum.Equals(0) && !result.Contains(sum))\
    \ {\n                result.Add(sum);\n            }\n        }\n        return\
    \ result.Count;", "        if (arr.Count == 0) { return (0L); }\n        long\
    \ firstSignedDigit = arr.First();\n        long sum = 0;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            long num = arr[i];\n            if (num\
    \ < 0) {\n                num ^= firstSignedDigit;\n            }\n          \
    \  sum += num;\n        }\n        return (sum);", "        Debug.Assert(arr.Count\
    \ > 0);\n\n        // count the number of numbers in the list\n        long count\
    \ = arr.Count;\n        // keep track of sum of the digits in each number.\n \
    \       long digitsum = 0;\n        foreach (var n in arr) {\n            long\
    \ digits = n.ToString().Select(x => Convert.ToInt64(x))\n                .TakeWhile(x\
    \ => x > 0)\n                .Sum();\n            digitsum += digits;\n      \
    \      count -= 1;\n            if (digits > 0)\n                break;\n    \
    \    }\n        // return a sum of digits greater than zero\n        return digitsum;",
  '        return arr.Sum(x => x >= 0 ? x - x.SignedMidDigit() : 0);', "        bool\
    \ firstSigned = true;\n        long result = 0;\n        long sum = 0;\n     \
    \   if (arr.Count == 0)\n            throw new ArgumentException(\"Invalid input\
    \ list\");\n        for (int i = 0; i < arr.Count; i++) {\n            long num\
    \ = arr[i];\n            if (firstSigned && num > 0)\n                firstSigned\
    \ = false;\n            else\n                sum += num;\n        }\n       \
    \ if (firstSigned)\n            result += -(long)Math.Abs(sum);\n        return\
    \ result;", "        if (arr.Count < 2) {\n            return (long)0;\n     \
    \   }\n        var d0 = arr.First();\n        var d1 = arr.Last();\n        var\
    \ sign = Math.Abs(d0) > Math.Abs(d1) ? 1 : 0;\n        if (sign != 0 && d0 < 0\
    \ && d1 >= 0) {\n            return 1L;\n        }\n        if (sign != 0 && d0\
    \ >= 0 && d1 < 0) {\n            return -1L;\n        }\n        long[] arr2 =\
    \ arr.ToArray();\n        var sum = 0;\n        for (var index = 0; index < arr2.Length;\
    \ index++) {\n            sum += arr2[index] / (10 * Math.Pow(10, index + 1));\n\
    \        }\n        var count = (long)Math.Round(Math.Floor(Math.Abs(sum)) + 1);\n\
    \        if (count > 0 && sign != 0) {\n            return -1L;\n        }\n \
    \       return count;", "        long nums = arr.Count();\n        long sum =\
    \ 0;\n        foreach (long n in arr) {\n            sum += n;\n            if\
    \ (sum > 0) {\n                nums--;\n            }\n        }\n        return\
    \ nums;", "        var sum = 0;\n        arr.ForEach(x => {\n            var num\
    \ = x.ToString(CultureInfo.InvariantCulture);\n            var numDigits = num.Length;\n\
    \            if (numDigits > 1) {\n                sum++;\n            }\n   \
    \         foreach (var i in Enumerable.Range(0, numDigits)) {\n              \
    \  var digit = num[numDigits - 1 - i];\n                sum += digit < '9' ? 10\
    \ - digit : digit;\n            }\n        });\n        return sum;", "      \
    \  if (arr == null || arr.Count == 0) {\n            return 0L;\n        }\n \
    \       bool firstNegative = true;\n        long sum = 0;\n        bool positive\
    \ = true;\n        for (int i = 0; i < arr.Count; i++) {\n            long num\
    \ = arr[i];\n            long digit = num;\n            if (num < 0) {\n     \
    \           firstNegative = false;\n                num *= -1;\n            }\n\
    \            if (firstNegative) {\n                digit = num / 10;\n       \
    \     }\n            int shift = 0;\n            while (shift < 30 && num != 0)\
    \ {\n                digit = (num % 10) * 10;\n                num = (num / 10);\n\
    \                ++shift;\n            }\n            if (shift > 30) {\n    \
    \            digit = 0;\n                --shift;\n            }\n           \
    \ if (positive) {\n                sum += digit;\n            }\n            else\
    \ if (num < 0) {\n                sum += -digit;\n            }\n            else\
    \ {\n                sum += digit;\n            }\n            positive = num\
    \ > 0;\n        }\n        return sum;", "        if (arr == null || arr.Count\
    \ == 0) return 0L;\n        long result = 0L;\n        for (int i = arr.Count\
    \ - 1; i >= 0; --i) {\n            long num = arr[i];\n            if (num < 0)\
    \ num = -num;\n            int numDigits = (int) Math.Floor(Math.Log10(num)) +\
    \ 1;\n            long rem = num % 10;\n            int remDigits = (int) Math.Floor(Math.Log10(rem))\
    \ + 1;\n            result += numDigits + remDigits;\n        }\n        return\
    \ result;", "        var result = arr\n            .Select(i => i.ToString().ToCharArray()\n\
    \                    .Aggregate(0, (a, digit) => a + digit.ToInt()))\n       \
    \     .Where(i => i > 0)\n            .Where(i => i < (arr.Count + 1))\n     \
    \       .Sum();\n        if (result < 0) {\n            return -result;\n    \
    \    }\n        return result;", "        long total = 0;\n        long num =\
    \ arr.Count;\n        if (num == 0) return total;\n\n        bool negative = num\
    \ < 0;\n        int positive = Convert.ToInt32(Math.Abs(num));\n\n        for\
    \ (int i = 1; i <= positive; i++) {\n            long sum = 0;\n            long\
    \ current = arr[i];\n            int digits = 0;\n            do {\n         \
    \       sum += current % 10;\n                current = current / 10;\n      \
    \          digits++;\n            } while (current != 0);\n\n            if (sum\
    \ > 0) total += Math.Abs(sum) * (10 * digits);\n        }\n\n        if (negative\
    \ && total == 0) {\n            total = 1;\n            arr.Add(-1);\n       \
    \ }\n        return total;", "        Debug.Assert(arr.Count >= 0);\n        long\
    \ sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long val\
    \ = arr[i];\n            while (val > 0) {\n                sum += val % 10;\n\
    \                val /= 10;\n            }\n        }\n        return sum;", " \
    \       if (arr == null)\n            return 0L;\n        long ans = 0;\n    \
    \    foreach (long i in arr)\n            if (i >= 0) ans += i;\n        return\
    \ ans;", "        long count = (arr.Count > 0) ? 1L : 0L;\n        long sum =\
    \ 0;\n        foreach (var num in arr) {\n            sum = num == 0 ? 0 : (sum\
    \ + num);\n            if (sum < 0) {\n                sum = sum * -1;\n     \
    \           count++;\n            }\n        }\n        return count;", '        return
    arr.Count(m => m > 0 ? m % 10 == 0 : m < 0);', "        long sum = 0;\n      \
    \  for(int i = 0; i < arr.Count; i++) {\n            long digit = arr[i];\n  \
    \          long sign = digit < 0 ? -digit : digit;\n            sum += sign;\n\
    \        }\n        return sum;", "        long sum = 0;\n        foreach (long\
    \ num in arr)\n            sum += NumSignDigits(num);\n        return sum;", " \
    \       var digits = arr.TakeWhile(l=>l>0L).Select(x => x*x).ToArray();\n    \
    \    var digitCount = digits.Where(x => x > 0).Count();\n        return digitCount;",
  "        long sum = 0;\n        int count = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long temp = arr[i];\n            if (temp > 0) {\n     \
    \           sum += temp;\n                count++;\n            } else {\n   \
    \             long temp1 = temp;\n                while (temp1 > 0) {\n      \
    \              count += temp1 % 10 == 0 ? 1 : 0;\n                    temp1 /=\
    \ 10;\n                }\n                sum += count;\n                count\
    \ = 0;\n            }\n        }\n        return sum;", "        var sum = 0;\n\
    \        foreach (var n in arr.Where(x => x >= 0)) {\n            sum += n;\n\
    \        }\n        if (sum < 0) {\n            sum = -sum;\n        }\n     \
    \   return sum;", "        var res = 0;\n        for(int i = 0; i < arr.Count;\
    \ i++) {\n            long n = arr[i];\n            var digitSum = 0;\n      \
    \      for(int k = 0; k < n.ToString().Length; k++) {\n                int digit\
    \ = (int)Char.GetNumericValue(n);\n                if(digit < 0)\n           \
    \         digit *= -1;\n                digitSum += digit;\n                n--;\n\
    \            }\n            if(digitSum > 0)\n                res++;\n       \
    \ }\n        return res;", "        long result = 0;\n        long lastDigit =\
    \ arr.First();\n        arr.RemoveAt(0);\n        foreach (long n in arr) {\n\
    \            result += Math.Pow(10, -(int)Math.Floor(Math.Log10(n) / Math.Log10(lastDigit)));\n\
    \            lastDigit = n;\n        }\n        return result;", "        long\
    \ sum = 0;\n        foreach(long i in arr) {\n            int num = i;\n     \
    \       while(num > 0) {\n                num /= 10;\n                sum += num;\n\
    \            }\n        }\n        return sum;", "        long cnt = 0;\n    \
    \    for(int i = 0; i < arr.Count; i++) {\n            if((arr[i] - arr[i] % 10)\
    \ > 0) cnt++;\n        }\n        return cnt;", "        long cnt = 0;\n     \
    \   List<long> newArr = new List<long>(arr);\n        long neg = 0;\n        if(arr.Count\
    \ > 0 && arr.Count == arr.Sum(x => x))\n        {\n            for(int i = 0;\
    \ i < arr.Count; ++i)\n            {\n                if(arr[i] > 0)\n       \
    \         {\n                    if(arr[i] > int.MaxValue - neg)\n           \
    \         {\n                        newArr.Add(-arr[i]);\n                  \
    \      neg = -neg;\n                    }\n                    else\n        \
    \            {\n                        newArr.Add(arr[i]);\n                \
    \    }\n                }\n            }\n            cnt = newArr.Count;\n  \
    \      }\n        return cnt;", "        Debug.Assert(arr != null);\n\n      \
    \  long sum = 0;\n        Debug.Assert(arr.Count > 0);\n\n        // The first\
    \ element is a special case: it is not a number.\n        if (arr[0] == -arr[0])\
    \ arr.RemoveAt(0);\n\n        foreach (var i in arr)\n        {\n            sum\
    \ += i;\n            if (sum > 0) break;\n        }\n\n        return sum;", " \
    \       long sum = 0;\n        long n = arr.Count;\n        for (int i = 0; i\
    \ < n; i++) {\n            long x = arr[i];\n            bool negative = x < 0;\n\
    \            int firstDig = negative ? -(Math.Abs(x) + 1) : Math.Abs(x);\n   \
    \         sum = sum + firstDig;\n            sum = sum % 10;\n        }\n    \
    \    return sum;", "        if (arr == null)\n            return 0L;\n       \
    \ var result = new HashSet<long>();\n        long sum = 0L;\n        long num\
    \ = 1;\n        foreach (var num in arr) {\n            var sign = num < 0 ? num\
    \ : Math.Abs(num);\n            var digits = Convert.ToInt64(sign);\n        \
    \    var count = Convert.ToInt64(Math.Floor(Math.Abs(num) / Math.Pow(10, digits)));\n\
    \            sum += sign * count;\n            for (var i = 0; i < digits; i++)\
    \ {\n                result.Add(sum);\n                sum += num;\n         \
    \   }\n        }\n        return result.Count > 0 ? result.Count : 0L;", "   \
    \     if (arr.Count == 0) {\n            return 0L;\n        }\n        long total\
    \ = 0L;\n        for (int i = 0; i < arr.Count; i++) {\n            total += (arr.ElementAt(i)\
    \ * Math.Pow(10, arr.Count - 1 - i));\n        }\n        return total;", "  \
    \      if (arr.Count == 0) {\n            return 0L;\n        }\n        if (arr.Count\
    \ == 1) {\n            return arr.Single();\n        }\n        long sum = 0L;\n\
    \        var digits = arr.Select(x=> new int[]{x%10, x%100}).ToArray();\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            int count = digits[i].Length;\n\
    \            var value = arr.ElementAt(i);\n            var digit = value % 10;\n\
    \            sum += digits[count].TakeWhile((d) => d < digit).Count();\n     \
    \       if (value < 0) {\n                var sign = value > 0 ? 1L : -1L;\n \
    \               sum += sign * digits[count].TakeWhile((d) => d > digit).Count();\n\
    \            }\n        }\n        return sum;", "        if (arr == null) {\n\
    \            throw new ArgumentNullException(\"arr\");\n        }\n        long\
    \ res = 0;\n        bool first = true;\n        bool negative = false;\n     \
    \   long sum = 0;\n        foreach (long x in arr) {\n            if (x >= 0)\
    \ {\n                if (!first) {\n                    sum = 0;\n           \
    \     }\n                sum += x;\n                first = false;\n         \
    \   }\n            else {\n                if (!first) {\n                   \
    \ sum = 0;\n                }\n                if (sum < 0) {\n              \
    \      if (sum > 0 && sum < 1) {\n                        sum = 1;\n         \
    \           }\n                    negative = true;\n                }\n     \
    \           sum += x;\n                first = true;\n            }\n        }\n\
    \        if (negative) {\n            sum = -sum;\n        }\n        res = sum;\n\
    \        return res;", "        if (arr.Count == 0)\n            return 0L;\n\
    \        long n = arr[0];\n        if (n < 0)\n            n = -n;\n        long\
    \ sum = 0L;\n        for (int i = 1; i < arr.Count; i++) {\n            int carry\
    \ = 0;\n            long temp = n; //temp is n's value\n            long sumOfDigits\
    \ = temp;\n            //if the number has all its digits in one group\n     \
    \       while (sumOfDigits > 9) {\n                carry = sumOfDigits % 10;\n\
    \                sumOfDigits = sumOfDigits / 10;\n            }\n            sum\
    \ += carry * 10 + sumOfDigits;\n        }\n        return sum;", "        // Your\
    \ code goes here\n        long result = 0;\n        foreach (var item in arr)\
    \ {\n            if (item < 0) {\n                item *= -1;\n            }\n\
    \            while (item >= 10) {\n                result += item % 10;\n    \
    \            item /= 10;\n            }\n            result += item;\n       \
    \ }\n        return result;", "        var ret = 0;\n        var digitSum = 0;\n\
    \        foreach (var i in arr) {\n            if (i >= 0) {\n               \
    \ digitSum += (int)i;\n            }\n            else {\n                // Negative\
    \ number: first digit is negative\n                digitSum += (int)Math.Abs(i)\
    \ * ((Math.Sign(i) * 2) - 1);\n                digitSum += (int)Math.Abs(i) *\
    \ ((int)Math.Sign(i) * 2);\n            }\n            if (digitSum > 9) {\n \
    \               // We only need to check digits which are > 9\n              \
    \  ret += Math.Abs(i) * ((int)Math.Sign(i) * 2);\n            }\n            else\
    \ if (digitSum < 0) {\n                // We need to check all the digits:\n \
    \               // 1. if the sign of the first digit is < 0 (negative number),\
    \ \n                // then just sum the absolute value of the number.\n     \
    \           // 2. if the sign of the first digit is >= 0, then we need to \n \
    \               // sum the absolute value of the number (with first digit as \n\
    \                // positive) multiplied by 2.\n                // 3. if the sign\
    \ of the first digit is < 0, then we need to \n                // sum the absolute\
    \ value of the number (with first digit as \n                // negative) multiplied\
    \ by 2.\n                // We are basically doing the following in each iteration:\n\
    \                // if (sign(i) < 0) {\n                //     ret += i;\n   \
    \             //     continue;\n                // }\n                // ret +=\
    \ sign(i) * i;\n                // ret += sign(i) * (abs(i) * 2);\n          \
    \      // ret += sign(i) * (abs(i) * (sign(i) * 2));\n                if (Math.Sign(i)\
    \ < 0) {\n                    ret += i;\n                    continue;\n     \
    \           }\n                ret += Math.Abs(i) * 2;\n                ret +=\
    \ Math.Abs(i) * (Math.Sign(i) * 2);\n            }\n        }\n        return\
    \ ret;", "        int cnt = 0;\n        long sum = 0;\n        foreach (long x\
    \ in arr) {\n            sum += x;\n            if (sum > 0) {\n             \
    \   cnt++;\n            }\n        }\n        if (arr.First() > 0) cnt -= 1; //\
    \ remove the first negative number\n        return cnt;", "        var zeros =\
    \ arr.Where(z => z > 0).Count();\n        if (zeros == 0) return 0L;\n       \
    \ var negatives = arr.Where(z => z < 0).Count();\n        if (negatives == 0 &&\
    \ zeros > 0) return 0L;\n        var firstSignedDigit = arr.Select(z => Math.Abs(z)).Take(1).Sum();\n\
    \        if (firstSignedDigit < 0) return arr.Count() - negatives;\n        return\
    \ arr.Count() - negatives + zeros + firstSignedDigit;", "        // If there are\
    \ no elements in the array, then return 0\n        if (arr.Count == 0)\n     \
    \       return 0;\n        // If there is only one element, then return 1\n  \
    \      if (arr.Count == 1)\n            return 1;\n        // If there are two\
    \ elements and one of them is negative, then return\n        // -1 if that element\
    \ is negative, 1 otherwise.\n        if (arr.Count == 2) {\n            // If\
    \ the first element is a negative number, then return -1 if that\n           \
    \ // element is negative, 1 otherwise.\n            if (arr[0] < 0)\n        \
    \        return -1;\n            if (arr[0] == 0)\n                return 1;\n\
    \            // Otherwise, if the second element is negative, then return -1 if\n\
    \            // that element is negative, 1 otherwise.\n            if (arr[1]\
    \ < 0)\n                return -1;\n            if (arr[1] == 0)\n           \
    \     return 1;\n            // Otherwise, return 1 if all elements are positive,\
    \ 0 otherwise.\n            return 0;\n        }\n\n        // Otherwise, if the\
    \ first element is negative, then return -1 if that\n        // element is negative,\
    \ 1 otherwise.\n        if (arr[0] < 0)\n            return -1;\n        if (arr[0]\
    \ == 0)\n            return 1;\n        // Otherwise, if the second element is\
    \ negative, then return -1 if\n        // that element is negative, 1 otherwise.\n\
    \        if (arr[1] < 0)\n            return -1;\n        if (arr[1] == 0)\n \
    \           return 1;\n\n        // Otherwise, if the sum of the first and second\
    \ elements is negative,\n        // then return -1 if the first element is negative,\
    \ 1 otherwise.\n        if (arr[0] + arr[1] < 0)\n            return -1;\n   \
    \     if (arr[0] + arr[1] == 0)\n            return 1;\n        // Otherwise,\
    \ return 1 if all elements are positive, 0 otherwise.\n        return 0;", " \
    \       long sum = 0;\n        long i = 0;\n        List<long> digits = new List<long>();\n\
    \        while (i < arr.Count) {\n            digits = new List<long>(arr.Take(i).Select(n\
    \ => Convert.ToInt64(n)).ToList());\n            sum += digits.Sum();\n      \
    \      i++;\n        }\n        if (sum > 0)\n            return sum;\n      \
    \  else\n            return digits[0].Sign * digits.Sum();", "        long sum\
    \ = 0;\n        foreach (long number in arr) {\n            long val = number;\n\
    \            long digits = 0;\n            while (val != 0) {\n              \
    \  val *= 10;\n                ++digits;\n            }\n            if (digits\
    \ > 0) {\n                sum += (long)Math.Abs(digits);\n            }\n    \
    \    }\n        return sum;", "        return arr.Sum(x => \n            (x <\
    \ 0) ? Math.Abs(x)\n                : x > 0 ? Convert.ToInt32(Math.Floor(Math.Log10(x))\
    \ + 1)\n                    : (x < 0 ? -x : 0)\n        );", "        long n =\
    \ 0;\n        foreach (var v in arr)\n        {\n            if (v < 0) \n   \
    \             n += Math.Abs(v) % 10 + 10;\n            else\n                n\
    \ += Math.Abs(v);\n        }\n        return n;", "        if (arr == null ||\
    \ arr.Count < 1)\n            return 0;\n        long sum = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            sum += arr[i];\n        }\n      \
    \  if (sum < 0)\n            sum *= -1;\n        int count = 0;\n        foreach\
    \ (long i in arr) {\n            long sumOfDigits = i;\n            while (sumOfDigits\
    \ > 0) {\n                sumOfDigits /= 10;\n                count++;\n     \
    \       }\n        }\n        return count;", "        // Debug.Assert(arr.Any());\n\
    \        // Debug.Assert(arr.Count>0);\n        var first = arr.First();\n   \
    \     if (first < 0)\n        {\n            // first < 0\n            first =\
    \ -first;\n        }\n        long sum = 0;\n        long lastDigit = first %\
    \ 10;\n        long lastTmp = first;\n        foreach (long n in arr)\n      \
    \  {\n            if (n < 0)\n            {\n                // n < 0\n      \
    \          n = -n;\n            }\n            long tmp = (n % 10) + lastTmp;\n\
    \            sum += tmp;\n            tmp = (n / 10) + lastTmp;\n            sum\
    \ += tmp;\n            lastTmp = tmp;\n        }\n        return sum;", "    \
    \    long numsSoFar = 0;\n        long pow = 1;\n        bool first = true;\n\
    \        bool firstDigitNegative = false;\n        long firstDigit = 0;\n    \
    \    long currentDigit = 0;\n        foreach (long num in arr) {\n           \
    \ if (num < 0) {\n                if (firstDigitNegative) {\n                \
    \    return 0;\n                }\n                firstDigitNegative = true;\n\
    \                firstDigit = num;\n            }\n            pow *= 10;\n  \
    \          currentDigit += num % (long)Math.Pow(10, power);\n            numsSoFar\
    \ += currentDigit;\n            if (first) {\n                first = false;\n\
    \            }\n            else {\n                currentDigit = 0;\n      \
    \      }\n        }\n        if (firstDigitNegative) {\n            return -1;\n\
    \        }\n        return numsSoFar;", "        return arr.Where(i => i > 0L).Aggregate(new\
    \ long[]{0L}, (a, b) => { \n            if (b[0] < 0)\n                b[0] +=\
    \ 10;\n            if (b[0] < 10)\n                return new long[] { b[0] };\
    \ \n            int sum = 0; \n            int n = b.Length; \n            while\
    \ (--n >= 0) { \n                sum += (int)b[n]; \n            } \n        \
    \    return new long[] { (int)Math.Abs(sum), sum }; \n        }).Where(a => a[0]\
    \ > 0).Count();", "        // Your code here\n        return arr.Select(x => x.ToString().TakeWhile(y\
    \ => y > 0).Sum()).Sum();", "        int n = arr.Count;\n        long res = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            long sum = 0;\n          \
    \  foreach (long num in arr)\n                if (num != 0)\n                \
    \    sum += num / Math.Pow(10, i--);\n            if (sum > 0)\n             \
    \   res += sum;\n        }\n        return res;", "        // count number of\
    \ elements with an odd sum\n        long count = 0;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            int nSum = 0;\n            for (int j = 0;\
    \ j < arr.Count; j++) {\n                nSum = nSum + arr[j];\n            }\n\
    \            if (nSum > 0) {\n                int nSign = (int)Math.Sign(Math.Abs(nSum));\n\
    \                if (nSign >= 0) {\n                    if (nSum < 0) {\n    \
    \                    nSum *= -1;\n                    }\n                    nSum\
    \ *= nSign;\n                } else {\n                    nSum *= nSign * -1;\n\
    \                }\n                if (nSum > 0) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  int sum = 0;\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) return 0;\n        for (int i = 0; i != arr.Count; i++) {\n          \
    \  long v = arr[i];\n            if (v > 0) {\n                sum += v;\n   \
    \             if (sum < 0) {\n                    sum += v + 1;\n            \
    \    }\n            }\n        }\n        result.Add(arr.Count);\n        if (sum\
    \ < 0 || sum > 9) {\n            int index = sum / 10;\n            result.Add(index);\n\
    \            return result.Sum();\n        }\n        return result.Sum();", " \
    \       // This is O(n), but you might want a better algorithm for large\n   \
    \     // n.\n        var result = new long[arr.Count];\n        var cur = 0;\n\
    \        for (var i = 0; i < arr.Count; i++) {\n            var num = arr[i];\n\
    \            var sum = num;\n            while (sum > 0) {\n                var\
    \ digit = sum % 10;\n                sum += digit < 0 ? -digit : digit;\n    \
    \            result[cur++] = num;\n                num -= digit;\n           \
    \ }\n        }\n        var n = 0;\n        for (var i = arr.Count - 1; i >= 0;\
    \ i--) {\n            if (result[i] == 0)\n                n++;\n            else\n\
    \                break;\n        }\n        return n;", "        if (arr == null\
    \ || arr.Count == 0)\n            return 0;\n        List<long> list = arr.ToList();\n\
    \        long sum = 0;\n        int size = arr.Count;\n        for (int i = 0;\
    \ i < size; ++i) {\n            long num = list[i];\n            if (num < 0)\n\
    \                num *= -1;\n            if (num != 0)\n                sum +=\
    \ (long)Math.Abs(num);\n        }\n        return (sum > 0 ? sum : 0);", "   \
    \     if (arr.Count <= 0)\n            return 0L;\n        long ret = 0L;\n  \
    \      long digitSum = 0;\n        for (int i = arr.Count - 1; i >= 0; i--) {\n\
    \            long num = arr[i];\n            if (num > 0) {\n                digitSum\
    \ = digitSum + num % 10;\n            }\n            int rest = num / 10;\n  \
    \          if (rest > 0) {\n                digitSum = digitSum + rest % 10;\n\
    \            }\n            ret = Math.Max(ret, digitSum);\n            digitSum\
    \ = 0;\n        }\n        return ret;", "        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            int digit = num;\n            while (num >\
    \ 0) {\n                sum += (num % 10);\n                num = num / 10;\n\
    \            }\n            if (sum > 0) {\n                sum += digit;\n  \
    \          }\n        }\n        return sum;", "        if (arr.Count == 0)\n\
    \            return 0;\n        var len = arr.Count;\n        var sum = 0;\n \
    \       bool first = true;\n        long curr;\n        long cnt = 0;\n      \
    \  long num = arr[0];\n        foreach (var i in arr)\n            sum += i;\n\
    \        for (int i = 1; i < len; ++i) {\n            curr = arr[i];\n       \
    \     if (curr < 0)\n                curr += num;\n            if (curr > num)\
    \ {\n                if (first) {\n                    cnt += curr;\n        \
    \            first = false;\n                } else {\n                    cnt\
    \ -= (curr - num);\n                }\n            } else {\n                cnt\
    \ += curr;\n            }\n            num = curr;\n        }\n        if (first)\n\
    \            return cnt;\n        long[] ans = num < 0 ? new long[len] : Enumerable.Repeat(num,\
    \ len).Select(t => (long)(Math.Abs(t) + 1)).ToArray();\n        for (int i = 0;\
    \ i < len; ++i)\n            ans[i] -= num;\n        return cnt + Enumerable.Sum(ans);",
  "        if (arr.Count < 2)\n            return 0;\n        if (arr.Count > 1000)\n\
    \            return new List<long>().Count;\n        long n = 0;\n        bool\
    \ isNeg = false;\n        long digitSum = 0;\n        foreach (long v in arr)\n\
    \        {\n            digitSum += v;\n            if (v < 0)\n            {\n\
    \                if (v == -(long)v)\n                    isNeg = !isNeg;\n   \
    \             if (v < 0)\n                    n--;\n            }\n          \
    \  else\n            {\n                if (digitSum <= 0)\n                 \
    \   break;\n                if (digitSum > 9)\n                {\n           \
    \         long lSum = digitSum;\n                    digitSum = 0;\n         \
    \           while (lSum > 0)\n                    {\n                        digitSum\
    \ += (v % 10);\n                        lSum -= 10;\n                    }\n \
    \               }\n                else\n                {\n                 \
    \   n++;\n                }\n            }\n        }\n        if (isNeg)\n  \
    \          n--;\n        return n;", "        return arr.Sum(x => {\n        \
    \    long ret = 0;\n            int d = (int)x;\n            bool neg = false;\n\
    \            if (x < 0) {\n                neg = true;\n                d = -d;\n\
    \            }\n            int c = 0;\n            while (c <= d / 10) {\n  \
    \              ret += c;\n                c = c + 1;\n            }\n        \
    \    if (neg) ret = (-1) - ret;\n            return ret;\n        });", "    \
    \    long total = 0;\n        foreach (long n in arr) {\n            total +=\
    \ (n > 0) ? n : -n;\n        }\n        return total;", "        long result =\
    \ arr.FirstOrDefault();\n        if (result < 0) return result;\n        if (arr.Count\
    \ == 1) return arr.First();\n        long sum = 0;\n        for (long i = 1; i\
    \ < arr.Count; i++) {\n            if (sum > 0) sum += (arr[i]%10);\n        \
    \    else sum += arr[i]%10;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0) {\n            return 0L;\n        }\n        var res = new List<long>();\n\
    \        foreach (var i in arr) {\n            if (i.Equals(Int64.MinValue)) {\n\
    \                // First signed digit will be negative\n                if (i\
    \ >= 0) {\n                    res.Add(-1L);\n                }\n            \
    \    else {\n                    res.Add(-2L);\n                }\n          \
    \      res.Add(-2L);\n            }\n            else {\n                var sum\
    \ = 0;\n                while (i > 1) {\n                    sum += i % 10;\n\
    \                    i /= 10;\n                }\n                if (sum > 0)\
    \ {\n                    res.Add(sum);\n                }\n            }\n   \
    \     }\n        return res.Count;", "        long nums = arr.Count();\n     \
    \   long totalSum = 0;\n        for (int i = nums-1; i >= 0; i--) {\n        \
    \    long digit = arr[i];\n            totalSum += digit;\n            if (totalSum\
    \ > 0) {\n                nums--;\n            }\n            else {\n       \
    \         return nums;\n            }\n        }\n        return nums;", "   \
    \     long result = 0;\n        for (int i = arr.Count - 1; i >= 0; i--) {\n \
    \           int digits = 0;\n            long num = arr[i];\n            while\
    \ (num >= 10) {\n                digits += (int)Math.Abs((num % 10));\n      \
    \          num /= 10;\n            }\n            if (digits > 0) result += digits;\n\
    \        }\n        return result;", "        var num = arr.FirstOrDefault();\n\
    \        if (num < 0) num = -num;\n        if (num < 1) return 0;\n        var\
    \ ans = 0;\n        var digit = num / 100;\n        ans += digit;\n        var\
    \ remainder = num % 100;\n        while (digit-- > 0) {\n            remainder\
    \ /= 10;\n            ans += remainder;\n        }\n        return ans;", "  \
    \      long counter = 0;\n        long sum = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long num = arr[i];\n            if (num < 0)\n         \
    \       num *= -1;\n            sum += num;\n            if (sum > 0)\n      \
    \          counter++;\n        }\n        return counter;", "        // Write\
    \ your code here\n        long num = 0;\n        long sum = 0;\n        arr.ForEach(n\
    \ => sum += n);\n        \n        if (sum < 0)\n        {\n            sum *=\
    \ -1;\n            num |= (long)0x80000;\n        }\n        \n        foreach\
    \ (var l in arr.Where(x => x >= 0))\n        {\n            if (sum >= 10)\n \
    \           {\n                int digit = sum / 10;\n                sum += digit\
    \ * 10;\n                num |= (long)digit << 16;\n            }\n          \
    \  else\n                num += sum;\n        }\n        return num;", "     \
    \   long sum = 0;\n        bool first = true;\n        arr.ForEach(x => {\n  \
    \          if (first && x == 0) return;\n            if (!first) sum += x;\n \
    \           if (x >= 10) {\n                if (sum > 0) return sum;\n       \
    \         first = false;\n                sum = 0;\n            }\n        });\n\
    \        return sum;", "        var sum = 0;\n        foreach (var num in arr)\
    \ {\n            sum += num;\n        }\n        if (sum >= 0) {\n           \
    \ return arr.Where(x => x > 0).Count();\n        } else {\n            return\
    \ arr.Where(x => x < 0).Count();\n        }"]
stop_tokens:
- "\n    }\n"
