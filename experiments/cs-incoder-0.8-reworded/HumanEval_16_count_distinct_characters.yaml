name: HumanEval_16_count_distinct_characters
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n\
  \    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n   \
  \ public static long CountDistinctCharacters(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
  \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
  \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
  aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY\
  \ JeRRRY\")) == (5L));\n    }\n\n}\n"
completions: ["        long numDistinctCharacters = 0;\n        foreach (char character\
    \ in str)\n        {\n            char c = character;\n            if (char.IsUpper(c))\n\
    \            {\n                numDistinctCharacters += 2;\n            }\n \
    \           else if (char.IsLower(c))\n            {\n                numDistinctCharacters\
    \ += 1;\n            }\n            else\n            {\n                numDistinctCharacters\
    \ += 1;\n            }\n        }\n        return numDistinctCharacters;", " \
    \       if (string.IsNullOrEmpty(str)) {\n            return 0;\n        }\n \
    \       string lowerStr = str.ToLowerInvariant();\n        Dictionary<string,\
    \ long> dict = new Dictionary<string, long>();\n        foreach (char c in lowerStr)\
    \ {\n            if (!dict.ContainsKey(c)) {\n                long currentVal;\n\
    \                if (dict.TryGetValue(c, out currentVal)) {\n                \
    \    dict[c] = currentVal + 1;\n                } else {\n                   \
    \ dict[c] = 1;\n                }\n            }\n        }\n        return dict.Select(x\
    \ => x.Value).Distinct().Count();", "        Dictionary<string, long> charCounts\
    \ = new Dictionary<string, long>();\n        foreach (var c in str)\n        \
    \    charCounts.Add(c.ToLower(), (charCounts.ContainsKey(c.ToLower()) ? charCounts[c.ToLower()]\
    \ + 1 : 1));\n        return charCounts.Keys.Distinct().Count();", "        Dictionary<char,\
    \ int> distinctChars = new Dictionary<char, int>();\n        foreach(var item\
    \ in str) {\n            char charToCheck = char.ToLower(item);\n            if(distinctChars.ContainsKey(charToCheck))\
    \ {\n                distinctChars[charToCheck]++;\n            } else {\n   \
    \             distinctChars.Add(charToCheck, 1);\n            }\n        }\n \
    \       return distinctChars.Count;", "        long n = 0;\n        foreach (char\
    \ c in str) {\n            n = n*26 + c - 'a';\n        }\n        return n;",
  "        var result = str.Aggregate((seed, next) =>\n            seed.Equals(next)\n\
    \                ? seed\n                : new string(seed.Concat(next).ToArray()),\
    \ string.Empty);\n        return result.Distinct().Count();", "        var sb\
    \ = new StringBuilder();\n        foreach (var ch in str) {\n            if (!sb.Contains(ch))\
    \ {\n                sb.Append(ch);\n            }\n        }\n        return\
    \ sb.ToString().Length;", "        if (str == null) {\n            return 0;\n\
    \        }\n        var result = new Dictionary<char, int>();\n        foreach\
    \ (char c in str.ToLower()) {\n            if (result.ContainsKey(c)) {\n    \
    \            result[c]++;\n            }\n            else {\n               \
    \ result.Add(c, 1);\n            }\n        }\n        return result.Count;",
  "        // Return 0 if string is null or empty\n        if (str == null || str.Length\
    \ == 0) {\n            return 0;\n        }\n        // Initialization\n     \
    \   HashSet<char> hs = new HashSet<char>();\n        // Iterate through input\
    \ string\n        foreach (char c in str) {\n            // Add current char to\
    \ HashSet if current char not present already\n            if (!hs.Contains(c))\
    \ {\n                hsAdd(hs, c);\n            }\n        }\n        // Return\
    \ length of HashSet\n        return hs.Count;", "        long distinctCharCount\
    \ = 0;\n        foreach(char c in str) {\n            distinctCharCount += str.IndexOf(c,\
    \ StringComparison.OrdinalIgnoreCase) != -1;\n        }\n        return distinctCharCount;",
  "        HashSet<string> seen = new HashSet<string>();\n        StringBuilder sb\
    \ = new StringBuilder();\n        foreach (string c in str)\n            if (seen.Add(c))\n\
    \                sb.Append(c);\n        long result = sb.Length;\n        return\
    \ result;", "        List<char> chars = new List<char>(str.ToCharArray());\n \
    \       List<char> distinctChars = new List<char>();\n        chars.Sort();\n\
    \        foreach (char c in chars) {\n            if (distinctChars.Contains(c))\n\
    \                continue;\n            distinctChars.Add(c);\n            distinctChars.Sort();\n\
    \        }\n        return distinctChars.Count;", "        HashSet<long> charCounts\
    \ = new HashSet<long>();\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         long c = charCounts[str[i]];\n            if (c == 0)\n            \
    \    charCounts.Add(1);\n            else\n                charCounts[str[i]]++;\n\
    \        }\n        return charCounts.Count;", "        HashSet<string> hs = new\
    \ HashSet<string>();\n        foreach (char c in str) {\n            hs.Add(c.ToString());\n\
    \        }\n        return hs.Count;", "        long count = 1;\n        foreach\
    \ (char c in str)\n            count += (str.IndexOf(c, StringComparison.OrdinalIgnoreCase)\
    \ + 1).GetHashCode();\n        return count;", "        var chars = new HashSet<char>();\n\
    \        var length = str.Length;\n        for (int i = 0; i < length; i++) {\n\
    \            if (chars.Contains(str[i])) chars.Remove(str[i]);\n            else\
    \ chars.Add(str[i]);\n        }\n        return chars.Count;", "        long count\
    \ = 1;\n        foreach(char c in str)\n            count *= Math.Pow(26,(str.Length-1)-str.IndexOf(c));\n\
    \        return count;", "        HashSet<char> hs = new HashSet<char>(StringComparer.OrdinalIgnoreCase);\n\
    \        foreach (char c in str)\n            hs.Add(c);\n        return hs.Count;",
  "        HashSet<char> set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(c);\n        }\n        return set.Count;", "       \
    \ HashSet<string> hash = new HashSet<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            hash.Add(str.Substring(i));\n        }\n        return hash.Count;",
  "        long count = 0;\n        foreach (char c in str.ToCharArray()) {\n    \
    \        count += 1;\n        }\n        return count;", "        StringBuilder\
    \ sb = new StringBuilder(str);\n        string temp;\n        long count = 1;\n\
    \        while (sb.Length > 0)\n        {\n            temp = sb.ToString();\n\
    \            sb = new StringBuilder();\n            foreach (char c in temp)\n\
    \            {\n                sb.Append(Char.ToUpperInvariant(c));\n       \
    \         sb.Append(Char.ToLowerInvariant(c));\n                sb.Append(c);\n\
    \            }\n            if (sb.Length > 0)\n            {\n              \
    \  count++;\n            }\n        }\n        return count;", "        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in str) {\n            sb.Append(c);\n\
    \        }\n        return CountDistinctCharacters(sb);", "        char[] chars\
    \ = str.ToLower().ToCharArray();\n        long result = 0;\n        foreach (char\
    \ c in chars)\n            result += (long)c;\n        return result;", "    \
    \    long distinctCharacters = 0;\n        foreach (char c in str)\n         \
    \   if (char.IsLetterOrDigit(c)) distinctCharacters++;\n        return distinctCharacters;",
  "        long result = 0;\n        foreach (char c in str)\n            result +=\
    \ CountDistinctCharactersOfChar(c);\n        return result;", "        long count\
    \ = 1, i = 0;\n        if (string.IsNullOrEmpty(str)) {\n            return 0;\n\
    \        }\n        while (i < str.Length) {\n            if (char.IsUpper(str[i])\
    \ || char.IsLower(str[i])) {\n                count++;\n            }\n      \
    \      i++;\n        }\n        return count;", "        string result = new string(str.ToLower());\n\
    \        List<long> characterCount = new List<long>();\n        long count = 0;\n\
    \        foreach (char c in result)\n        {\n            if (characterCount.Contains(c))\n\
    \            {\n                characterCount.Remove(c);\n                count++;\n\
    \            }\n            else\n            {\n                characterCount.Add(c);\n\
    \            }\n        }\n        return count;", "        Dictionary<char, long>\
    \ count = new Dictionary<char, long>();\n        long result = 1;\n        foreach\
    \ (char c in str) {\n            if (!count.ContainsKey(c)) {\n              \
    \  count[c] = 1;\n            } else {\n                count[c]++;\n        \
    \    }\n        }\n        foreach (char c in count) {\n            if (count[c]\
    \ > 1) {\n                result++;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string, int> charDistinct = new Dictionary<string,\
    \ int>();\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < str.Length; i++) {\n            sb.Append(str[i]);\n            if\
    \ (!charDistinct.ContainsKey(sb.ToString()))\n                charDistinct.Add(sb.ToString(),\
    \ 0);\n            charDistinct[sb.ToString()] += 1;\n        }\n        long\
    \ countDistinct = 0;\n        foreach (KeyValuePair<string, int> kvp in charDistinct)\
    \ {\n            countDistinct += kvp.Value;\n        }\n        return countDistinct;",
  "        if (str == null) return 0L;\n\n        long count = 1L;\n\n        foreach\
    \ (char c in str) {\n            count += (c >= 'A' && c <= 'Z') + (c >= 'a' &&\
    \ c <= 'z') + (c >= '0' && c <= '9');\n        }\n\n        return count;", '        return
    HashHelpers.GetDistinctHashCodes().Count(str => str == str.ToLowerInvariant()
    || str == str.ToUpperInvariant());', "        var result = new HashSet<char>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            var c = str[i];\n\
    \            result.Add(c);\n        }\n        return result.Count;", "     \
    \   if (String.IsNullOrWhiteSpace(str))\n            throw new ArgumentException(\"\
    str\");\n\n        HashSet<char> hs = new HashSet<char>();\n        long ret =\
    \ 0;\n\n        for (int i = 0; i < str.Length; i++) {\n            hs.Add(str[i].ToString().ToLowerInvariant());\n\
    \        }\n\n        for (int i = 0; i < str.Length; i++) {\n            bool\
    \ isDuplicate = true;\n\n            for (int j = 0; j < i; j++) {\n         \
    \       if (hs.Contains(str[j].ToString().ToLowerInvariant())) {\n           \
    \         isDuplicate = false;\n                    break;\n                }\n\
    \            }\n            if (isDuplicate)\n                ret++;\n       \
    \ }\n\n        return ret;", "        long countDistinctCharacters = 0;\n    \
    \    foreach (char c in str) {\n            countDistinctCharacters = countDistinctCharacters\
    \ + str.Count(c).ToList().Distinct().Count();\n        }\n        return countDistinctCharacters;",
  "        long ret = 0;\n        foreach(char c in str)\n            if((int)c >\
    \ 96 && (int)c < 123)\n                ret++;\n        return ret;", "       \
    \ char[] strArray = str.ToCharArray();\n        HashSet<char> hashSet = new HashSet<char>();\n\
    \        long count = 0, length = 0;\n        foreach(char c in strArray) {\n\
    \            hashSet.Add(c);\n        }\n        foreach(char c in hashSet) {\n\
    \            count++;\n            length += c.Length;\n        }\n        return\
    \ count;", "        HashSet<string> hs = new HashSet<string>();\n        int count\
    \ = str.Length;\n        for (int i = 0; i < count; i++) {\n            hs.Add(str[i].ToString());\n\
    \        }\n        return hs.Count;", "        HashSet<string> chars = new HashSet<string>();\n\
    \        long count = 0;\n        foreach(char c in str) {\n            chars.Add(c.ToString());\n\
    \        }\n        foreach(string s in chars) {\n            count += s.Length;\n\
    \        }\n        return count;", "        // Return 0 if no string given or\
    \ string is empty\n        if (string.IsNullOrEmpty(str))\n            return\
    \ 0;\n        // Get unique characters\n        var chars = str.ToCharArray().Distinct();\n\
    \        // Find out how many characters there are\n        return chars.Count();",
  "        // Use HashSet<T> to ensure no duplicates\n        var h = new HashSet<char>();\n\
    \        var count = 0;\n        // Iterate over every character in string and\
    \ add it to our HashSet\n        foreach (var c in str) {\n            if (h.Add(c))\n\
    \                count++;\n        }\n        // Return the number of distinct\
    \ characters found\n        return count;", '        return str.Distinct().Count();',
  "        char[] charArray = str.ToLowerInvariant().ToCharArray();\n        Dictionary<char,\
    \ long> distinctChars = new Dictionary<char, long>();\n        long sum = 0;\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (!distinctChars.ContainsKey(charArray[i]))\n\
    \                distinctChars.Add(charArray[i], 1);\n            else\n     \
    \           distinctChars[charArray[i]]++;\n        }\n        foreach (KeyValuePair<char,\
    \ long> kvp in distinctChars) {\n            sum += kvp.Value;\n        }\n  \
    \      return sum;", "        string s = str;\n        HashSet<string> set = new\
    \ HashSet<string>();\n        foreach (char c in s) {\n            set.Add(c.ToString());\n\
    \        }\n        return set.Count;", "        if (str == null) return 0L;\n\
    \        var count = HashSet<char>.CreateSet();\n        foreach (var c in str)\n\
    \            if (char.IsLetterOrDigit(c))\n                count.Add(c);\n   \
    \     return count.Count;", "        char[] chars = str.ToLower().ToCharArray();\n\
    \        long ret = 0;\n        int i = 0;\n        while (i < chars.Length) {\n\
    \            int j = 0;\n            while (j < chars.Length) {\n            \
    \    if (chars[i] == chars[j]) {\n                    ++j;\n                }\
    \ else {\n                    break;\n                }\n            }\n     \
    \       if (j == chars.Length) {\n                ++i;\n                ++ret;\n\
    \            }\n        }\n        return ret;", "        if (String.IsNullOrEmpty(str))\
    \ return 0;\n\n        char[] chars = str.ToCharArray();\n        Array.Sort(chars);\n\
    \n        var hash = new Dictionary<char, int>();\n\n        foreach (char c in\
    \ chars) {\n            int count;\n            if (hash.TryGetValue(c, out count))\
    \ {\n                hash[c] = count + 1;\n            } else {\n            \
    \    hash[c] = 1;\n            }\n        }\n\n        long ans = 0;\n\n     \
    \   foreach (KeyValuePair<char, int> kvp in hash) {\n            ans += (kvp.Value\
    \ - 1);\n        }\n\n        return ans;", "        Debug.Assert(str != null);\n\
    \        Debug.Assert(str.Length > 0);\n        char[] chars = str.ToCharArray();\n\
    \        int len = str.Length;\n\n        // First, count how many different characters\
    \ are in the given string\n        var counts = new HashSet<char>();\n       \
    \ foreach (char c in chars)\n            counts.Add(c);\n\n        long distinctCharacters\
    \ = 0;\n        foreach (char c in chars) {\n            distinctCharacters +=\
    \ (counts.Contains(c) ? 1 : 0);\n        }\n        return distinctCharacters;",
  "        if (String.IsNullOrEmpty(str))\n            return 0L;\n\n        long[]\
    \ charDistinctCharacters = new long[26]; // A-Z a-z\n        StringBuilder builder\
    \ = new StringBuilder();\n        bool isChar = false;\n\n        foreach(char\
    \ c in str) {\n            if (Char.IsUpper(c))\n                isChar = true;\n\
    \            else\n                isChar = false;\n\n            char ch = (char)c;\n\
    \n            if (isChar)\n                charDistinctCharacters[(c - 'A')] =\
    \ charDistinctCharacters[(c - 'A')] + (1L);\n            else\n              \
    \  charDistinctCharacters[(ch - 'a')] = charDistinctCharacters[(ch - 'a')] + (1L);\n\
    \        }\n\n        List<long> list = new List<long>();\n\n        // find all\
    \ distinct characters in the list\n        foreach (long c in charDistinctCharacters)\
    \ {\n            if (list.Contains(c))\n                continue;\n          \
    \  else\n                list.Add(c);\n        }\n\n        return list.Count;",
  "        long count = 0;\n        foreach (var c in str) {\n            ++count;\n\
    \            count = count + (str.IndexOf(c.ToUpper()) != str.IndexOf(c.ToLower())\
    \ ? 1 : 0);\n        }\n        return count;", "        if (str == null) {\n\
    \            return 0;\n        }\n        long ret = 0L;\n        HashSet<Char>\
    \ h = new HashSet<Char>();\n        foreach (char c in str.ToLower()) {\n    \
    \        h.Add(c);\n        }\n        foreach (char c in str.ToUpper()) {\n \
    \           if (h.Contains(c))\n                ret++;\n        }\n        return\
    \ ret;", "        Dictionary<char, long> charMap = new Dictionary<char, long>();\n\
    \n        // Add each char to the dictionary.\n        foreach (char c in str)\n\
    \            charMap.Add(c, charMap.ContainsKey(c) ? charMap[c] + 1 : 1);\n\n\
    \        // Return the number of distinct chars.\n        return charMap.Keys.Distinct().Count();",
  "        HashSet<string> chars = new HashSet<string>();\n        foreach (var c\
    \ in str)\n        {\n            if (chars.Contains(c))\n            {\n    \
    \            chars.Add(c);\n            }\n            else\n            {\n \
    \               chars.Add(c.ToLower());\n                chars.Add(c.ToUpper());\n\
    \            }\n        }\n        return (long)chars.Count;", "        long result\
    \ = 0;\n        foreach (char c in str) {\n            result = result * 128 +\
    \ Char.ToLower(c).GetHashCode();\n        }\n        return result;", "      \
    \  long distinctCharacters = 0;\n        HashSet<char> hashSet = new HashSet<char>();\n\
    \        for (int i = 0; i < str.Length; i++)\n        {\n            hashSet.Add(str[i]);\n\
    \            distinctCharacters += hashSet.Count;\n        }\n        return distinctCharacters;",
  "        if (str == null)\n            return 0;\n        HashSet<string> set =\
    \ new HashSet<string>(str);\n        return set.Count;", "        var seen = new\
    \ HashSet<char>();\n        foreach (var c in str) {\n            if (seen.Contains(c))\n\
    \                continue;\n            seen.Add(c);\n        }\n        return\
    \ seen.Count;", "        if (str == null)\n            return 0;\n        var\
    \ strArray = str.ToLower().ToCharArray();\n        HashSet<char> hashSet = new\
    \ HashSet<char>();\n        foreach (char c in strArray)\n            hashSet.Add(c);\n\
    \        return hashSet.Count;", "        if (String.IsNullOrEmpty(str)) {\n \
    \           return 0;\n        }\n\n        var chars = str.ToCharArray();\n \
    \       var hash = HashAlgorithm.Create(\"MD5\");\n        var hashValue = hash.ComputeHash(Encoding.ASCII.GetBytes(str));\n\
    \        var buffer = new byte[hashValue.Length];\n        for (var i = 0; i <\
    \ buffer.Length; i++) {\n            buffer[i] = hashValue[i];\n        }\n  \
    \      hash.Clear();\n        hashValue = hash.ComputeHash(buffer);\n        hash\
    \ = HashAlgorithm.Create(\"MD5\");\n        for (var i = 0; i < buffer.Length;\
    \ i++) {\n            buffer[i] = hashValue[i];\n        }\n\n        var count\
    \ = 0;\n        for (var i = 0; i < buffer.Length; i++) {\n            var c =\
    \ buffer[i];\n            if (chars.Contains(c)) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long distinctCount\
    \ = 0;\n        foreach (char c in str.ToLower()) {\n            if (Char.IsLetter(c))\
    \ {\n                distinctCount++;\n            }\n        }\n        return\
    \ distinctCount;", "        // Convert str to char[] and store in a Hashtable\n\
    \        var hash = new Hashtable();\n        foreach (var c in str.ToCharArray())\
    \ hash.Add(c, 0L);\n        // Now count the number of distinct chars\n      \
    \  var distinctCount = hash\n            .Where(x => x.Value > 0)\n          \
    \  .Select(x => x.Key)\n            .Distinct()\n            .Count();\n     \
    \   return distinctCount;", "        var hash = new HashSet<char>();\n       \
    \ foreach(char c in str) {\n            hash.Add(c);\n        }\n        return\
    \ hash.Count;", "        HashSet<string> hs = new HashSet<string>();\n       \
    \ foreach (char c in str)\n            hs.Add(c.ToString());\n\n        return\
    \ hs.Count;", "        char[] c = str.ToLowerInvariant().ToCharArray();\n    \
    \    HashSet<string> hs = new HashSet<string>();\n        foreach (char c in c)\
    \ {\n            hs.Add(c.ToString());\n        }\n        return hs.Count;",
  "        long len = 0;\n        foreach (char c in str)\n            len += (Convert.ToInt64(c).GetTypeInfo().IsUnicode\
    \ ? 1 : 0);\n        return (int)len;", "        var count = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (Char.IsLetter(str[i]))\n    \
    \            count++;\n        }\n        return count;", "        long distinctCount\
    \ = 0;\n        // count distinct characters\n        foreach (char c in str)\
    \ {\n            if (str.ToLower() == str.ToUpper()) {\n                distinctCount++;\n\
    \            }\n            distinctCount++;\n        }\n        return distinctCount;",
  "        string lowerCaseStr = str.ToLower();\n        long result = 1;\n      \
    \  for (int i = 0; i < lowerCaseStr.Length; i++) {\n            if (lowerCaseStr[i]\
    \ != lowerCaseStr[i].ToUpper())\n                result += (lowerCaseStr.Length\
    \ - i - 1);\n        }\n        return result;", "        var lookup = str.ToLowerInvariant().ToLookup(c\
    \ => c);\n        return str.Length + 1 -\n            lookup\n              \
    \  .Where(x => x.Key.Length > 1)\n                .Select(x => x.Key.Length)\n\
    \                .Sum();", "        // Create a HashSet (which will only contain\
    \ the distinct letters in the input string)\n        // and return the count of\
    \ the number of items in the hashset.\n        HashSet<string> h = new HashSet<string>(str);\n\
    \        long length = 0;\n        foreach (string s in h)\n            length++;\n\
    \        return length;", "        // Find first and last characters\n       \
    \ char firstChar = str.First();\n        char lastChar = str.Last();\n\n     \
    \   // Count the number of characters between first and last\n        return str.SkipWhile(c\
    \ => c != firstChar).TakeWhile(c => c != lastChar).Count();", "        HashSet<char>\
    \ chars = new HashSet<char>();\n        chars.AddRange(str.ToCharArray().OrderBy(c\
    \ => c).Distinct());\n        return chars.Count;", "        long ret = 0;\n \
    \       foreach (var c in str.ToLowerInvariant()) {\n            ret = ret + 1;\n\
    \        }\n        return ret;", "        var dict = new Dictionary<char, long>();\n\
    \        char? key = null;\n        string str2 = str;\n        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in str) {\n            if\
    \ (dict.ContainsKey(c)) {\n                dict[c]++;\n            }\n       \
    \     else {\n                dict[c] = 1;\n            }\n        }\n       \
    \ int counter = 0;\n        foreach (KeyValuePair<char, long> entry in dict) {\n\
    \            if (entry.Value > 1) {\n                sb.Append(entry.Key);\n \
    \               counter++;\n            }\n        }\n        return Convert.ToInt64(sb.ToString(),\
    \ 10);", "        string lowerCase = str.ToLower();\n        long result = lowerCase.Count(c\
    \ => char.IsLetter(c));\n        result = result ^ lowerCase.Length;\n       \
    \ return result;", "        // Initialize result (counter) to 0.\n        long\
    \ result = 0;\n        // Convert strings into char arrays to determine distinct\
    \ characters in the string.\n        char[] chars = str.ToCharArray();\n     \
    \   // Initialize a Dictionary of characters with \"0\" as a default value for\
    \ each character\n        IDictionary<char, long> counter = new Dictionary<char,\
    \ long>();\n        // Iterate through each character in string.\n        foreach\
    \ (char c in chars) {\n            // If character exists in dictionary, increment\
    \ counter.\n            if (counter.ContainsKey(c)) {\n                counter[c]++;\n\
    \            }\n            // If character does not exist in dictionary, add\
    \ it to the dictionary and initialize it's counter to 1.\n            else {\n\
    \                counter.Add(c, 1);\n            }\n        }\n        // Iterate\
    \ through dictionary to determine distinct characters.\n        foreach (KeyValuePair<char,\
    \ long> kvp in counter) {\n            // If current character exists in dictionary\
    \ add it to the result counter.\n            if (counter.ContainsKey(kvp.Key))\
    \ {\n                result++;\n            }\n        }\n        // Return result.\n\
    \        return result;", "        if (str == null || str.Length == 0)\n     \
    \       return 0;\n        bool flag;\n        long count = 0;\n        char[]\
    \ c = str.ToCharArray();\n        char temp;\n        for (int i = 0; i < c.Length;\
    \ i++) {\n            flag = false;\n            for (int j = i + 1; j < c.Length;\
    \ j++) {\n                temp = c[j];\n                if (Char.IsUpper(temp))\
    \ {\n                    c[i] = c[i].ToUpper();\n                    c[j] = c[j].ToUpper();\n\
    \                    flag = true;\n                    break;\n              \
    \  } else if (Char.IsLower(temp)) {\n                    c[i] = c[i].ToLower();\n\
    \                    c[j] = c[j].ToLower();\n                    flag = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (flag)\n                count++;\n        }\n        return count;", "     \
    \   long count = 0;\n        char ch;\n        int i = 0;\n        while (i <\
    \ str.Length) {\n            ch = str[i];\n            if (i == 0) {\n       \
    \         count = countDistinctCharactersHelper(str, i, ch);\n               \
    \ i++;\n            } else if (str[i-1] != ch) {\n                count += countDistinctCharactersHelper(str,\
    \ i, ch);\n                i++;\n            } else {\n                i++;\n\
    \            }\n        }\n        return count;", "        var distinctCharacters\
    \ = str.ToCharArray().Distinct();\n        return distinctCharacters.Length;",
  "        // Write your code here.\n        StringComparer comparer = StringComparer.OrdinalIgnoreCase;\n\
    \        char ch;\n        char[] charArray = str.ToCharArray();\n        var\
    \ distinctChars = new List<char>();\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            ch = charArray[i];\n            if (!distinctChars.Contains(ch))\
    \ {\n                distinctChars.Add(ch);\n            }\n        }\n      \
    \  return distinctChars.Count;", "        long result = 1;\n        if (str ==\
    \ null)\n            return result;\n        foreach (char ch in str) {\n    \
    \        result *= 2;\n            result += (ch & 0x20) == 0;\n        }\n  \
    \      return result * str.CompareTo(\"\"); // the multiplication here is because\
    \ we only care about upper case characters", '        return str.Distinct().Count();',
  "        long result = 0;\n        char[] charArray = str.ToCharArray();\n     \
    \   char[] sortedCharArray = charArray.OrderBy(c => c).ToArray();\n        for\
    \ (int i = 0; i < sortedCharArray.Length - 1; i++) {\n            for (int j =\
    \ i + 1; j < sortedCharArray.Length; j++) {\n                if (sortedCharArray[i]\
    \ == sortedCharArray[j]) {\n                    result++;\n                }\n\
    \            }\n        }\n        return result;", "        StringBuilder builder\
    \ = new StringBuilder();\n        foreach (char c in str.ToCharArray()) {\n  \
    \          builder.Append(c);\n        }\n        return DistinctCharactersInBuilder(builder).Distinct().Count();",
  "        long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        int currentChar = str[i];\n            char previousChar = i > 0 ? str[i\
    \ - 1] : char.MinValue;\n            if (currentChar == previousChar) {\n    \
    \            result++;\n            }\n        }\n        return result;", " \
    \       if (str == null) throw new ArgumentNullException(str);\n        long count\
    \ = 0;\n        int len = str.Length;\n        if (len == 0) return count;\n \
    \       char c0 = str[0];\n        for (int i = 1; i < len; i++) {\n         \
    \   char c1 = str[i];\n            if ((c0.ToLower() == c1.ToLower()) && c0 !=\
    \ c1) {\n                count += 2;\n                c0 = c1;\n            }\
    \ else {\n                if (c0.ToLower() != c1) count += 1;\n              \
    \  c0 = c1;\n            }\n        }\n        return count;", "        long result\
    \ = 0;\n        string temp = \"\";\n        foreach (char c in str) {\n     \
    \       temp = temp + c;\n        }\n        List<char> newList = new List<char>();\n\
    \        foreach (char c in temp.ToUpperInvariant()) {\n            newList.Add(c);\n\
    \        }\n\n        foreach (char c in newList) {\n            result += Math.Pow(26,\
    \ (newList.IndexOf(c) / 2));\n        }\n        return result;", "        long\
    \ distinctCount = 0;\n        foreach (var character in str)\n        {\n    \
    \        distinctCount = (distinctCount + 1) ^ ((long)character & 0xff); // Add\
    \ character to the count\n        }\n        return distinctCount;", "       \
    \ var result = new Dictionary<string, int>();\n        foreach (var c in str)\
    \ {\n            if (result.ContainsKey(c)) {\n                result[c]++;\n\
    \            }\n            else {\n                result.Add(c, 1);\n      \
    \      }\n        }\n        return result.Values.Sum();", "        long count\
    \ = 0;\n        foreach (var c in str)\n            count += ((int)c).ToString().Distinct().Count();\n\
    \n        return count;", "        long distinctCharacterCount = 0;\n        foreach\
    \ (var c in str.ToLowerInvariant()) {\n            distinctCharacterCount += HashSet<string>.Parse(c.ToString()).Count;\n\
    \        }\n        return distinctCharacterCount;", "        bool upperCase =\
    \ false;\n        bool lowerCase = false;\n        bool numeric = false;\n   \
    \     bool special = false;\n        long sum = 0;\n        foreach (char c in\
    \ str) {\n            bool isUppercase = char.IsUpper(c);\n            bool isLowercase\
    \ = char.IsLower(c);\n            bool isNumeric = char.IsDigit(c);\n        \
    \    bool isSpecial = char.IsLetterOrDigit(c);\n            if (isUppercase &&\
    \ !upperCase) {\n                upperCase = true;\n                sum += 1;\n\
    \            } else if (isLowercase && !lowerCase) {\n                lowerCase\
    \ = true;\n                sum += 1;\n            } else if (isNumeric && !numeric)\
    \ {\n                numeric = true;\n                sum += 1;\n            }\
    \ else if (isSpecial && !special) {\n                special = true;\n       \
    \         sum += 1;\n            }\n        }\n        return (sum);", "     \
    \   long count = 0;\n        string str = str.ToLower();\n        char[] chars\
    \ = str.ToCharArray();\n        foreach (char c in chars)\n        {\n       \
    \     if (Char.IsLetterOrDigit(c)) count++;\n        }\n        return count;",
  "        if (str == null || str.Length == 0)\n            return 0;\n        StringBuilder\
    \ sb = new StringBuilder(str);\n        long hash = 0;\n        int length = sb.Length;\n\
    \        for (int i = 0; i < length; i++) {\n            hash += GetHash(sb.Substring(i,\
    \ 1).ToLower());\n        }\n        return hash;", "        // Your code here...\n\
    \        return str.Distinct().Count();", "        var chars = str.ToCharArray();\n\
    \        var dictionary = new Dictionary<long, int>();\n        foreach (var c\
    \ in chars) {\n            if (!dictionary.ContainsKey(c)) {\n               \
    \ dictionary.Add(c, 1);\n            } else {\n                dictionary[c]++;\n\
    \            }\n        }\n        return dictionary.Keys.Count;", "        char[]\
    \ chars = str.ToCharArray();\n        Array.Sort(chars);\n\n        StringBuilder\
    \ builder = new StringBuilder();\n        foreach (char c in chars) {\n      \
    \      builder.Append(c);\n        }\n\n        return builder.Distinct().Count();",
  "        var distinct = str.Select(c => c).Distinct().ToList();\n        return\
    \ distinct.Count;", "        Dictionary<char, long> charMap = new Dictionary<char,\
    \ long>();\n        bool allLowercase = true;\n        bool allUppercase = true;\n\
    \        foreach (char ch in str) {\n            char chAsChar = Char.ToLower(ch);\n\
    \            bool chAsCharLowercase = Char.IsLower(ch);\n            bool chAsCharUppercase\
    \ = Char.IsUpper(ch);\n            if (allLowercase && chAsCharLowercase)\n  \
    \              allLowercase = false;\n            if (allUppercase && chAsCharUppercase)\n\
    \                allUppercase = false;\n            if (charMap.ContainsKey(chAsChar))\n\
    \                charMap[chAsChar]++;\n            else {\n                charMap[chAsChar]\
    \ = 1;\n            }\n        }\n        return charMap.Count;", "        long\
    \ result = 0;\n        long count = 1;\n        foreach (char c in str) {\n  \
    \          if (char.ToLower(c) != char.ToUpper(c)) {\n                count++;\n\
    \            }\n            else {\n                result++;\n            }\n\
    \        }\n        return result * count;", "        if (str == null) return\
    \ 0;\n        string input = str.ToLower();\n        int result = new int[256];\n\
    \        bool foundChar = false;\n        int pos = 0;\n        while (pos < input.Length)\
    \ {\n            char c = input[pos];\n            if (c < 'a' || c > 'z') pos++;\n\
    \            else if (foundChar) {\n                result += (result << 1) |\
    \ ((result >> 63) & 1);\n            }\n            if (pos >= input.Length) {\n\
    \                foundChar = true;\n                pos++;\n            }\n  \
    \          else if (foundChar) {\n                result += (result << 1) | ((result\
    \ >> 63) & 1);\n            }\n            if (c < 'A' || c > 'Z') pos++;\n  \
    \          else {\n                result[c] = 1;\n            }\n           \
    \ pos++;\n        }\n        return (long)result;", "        long[] count = new\
    \ long[256];\n        string tmp;\n        int i;\n\n        for (i = 0; i < str.Length;\
    \ i++)\n            count[(int)str[i]]++;\n\n        tmp = string.Empty;\n   \
    \     for (i = 0; i < 256; i++)\n            tmp += string.Format(\"{0:#0{1}X}\"\
    , (i << 24) & 0xFF, 3);\n\n        return Convert.ToInt64(md5.ComputeHash(tmp).Aggregate(new\
    \ StringBuilder(), (sb, _) => sb.Append(Convert.ToString(_, 3)))).ToString(\"\
    N3\");", "        HashSet<string> hashSet = new HashSet<string>();\n        foreach(char\
    \ c in str)\n            hashSet.add(c);\n        return hashSet.Count;", "  \
    \      string lowercase = str;\n        lowercase = lowercase.ToLower();\n   \
    \     var count = lowercase.Distinct().Count();\n        return count;", "   \
    \     long len = (long)str.Length;\n        long numDistinctCharacters = 0;\n\
    \        int[] chars = new int[100];\n        Arrays.Fill<char>(chars, -1);\n\
    \        char c;\n        for (int i = 0; i < len; i++) {\n            c = str[i];\n\
    \            if (chars[c] >= 0) {\n                numDistinctCharacters++;\n\
    \            }\n            chars[c] = i;\n        }\n        return numDistinctCharacters;",
  "        long result = 0;\n        if (str != null) {\n            StringBuilder\
    \ sb = new StringBuilder(str);\n            foreach (char c in str.ToCharArray())\
    \ {\n                if (Char.IsUpper(c) || Char.IsLower(c))\n               \
    \     result++;\n            }\n        }\n        return result;", "        if\
    \ (str == null || str.Length == 0) {\n            return 0;\n        }\n\n   \
    \     string s = str.ToLower();\n        long count = 0;\n        StringBuilder\
    \ sBuilder = new StringBuilder();\n\n        foreach (char c in s) {\n       \
    \     count = count + 1;\n            sBuilder.Append(c);\n        }\n\n     \
    \   return count;", "        // Find the length of the string\n        long length\
    \ = str.Length;\n        long ret = 0;\n        bool isFirstCharCapital = str.IsFirstCharUpper();\n\
    \        bool isLastCharCapital = str.IsLastCharUpper();\n        bool isFirstCharSmall\
    \ = str.IsFirstCharLower();\n        bool isLastCharSmall = str.IsLastCharLower();\n\
    \        bool isFirstCharSpecialChar = str.IsFirstCharSpecial();\n        bool\
    \ isLastCharSpecialChar = str.IsLastCharSpecial();\n        bool isFirstCharCapital\
    \ = str.IsFirstCharUpper();\n        bool isLastCharCapital = str.IsLastCharUpper();\n\
    \        bool isFirstCharSmall = str.IsFirstCharLower();\n        bool isLastCharSmall\
    \ = str.IsLastCharLower();\n        bool isFirstCharSpecialChar = str.IsFirstCharSpecial();\n\
    \        bool isLastCharSpecialChar = str.IsLastCharSpecial();\n        // Keep\
    \ incrementing the counter for each distinct character\n        // until we get\
    \ to the end of the string\n        // If any character is special or first or\
    \ last, then this must be the end of the string\n        while (length > 0) {\n\
    \            char ch = (char)length;\n            if (isFirstCharCapital && isLastCharCapital)\n\
    \                ret += str.FirstOrDefault().ToUpper().ToLower().Count();\n  \
    \          else if (isFirstCharSmall && isLastCharSmall)\n                ret\
    \ += str.FirstOrDefault().ToLower().Count();\n            else if (isFirstCharSpecialChar\
    \ && isLastCharSpecialChar)\n                ret += str.FirstOrDefault().ToLower();\n\
    \            else\n                ret += str.FirstOrDefault().Count();\n    \
    \        // If the next character is capital, the previous character was capital,\n\
    \            // so this must be the start of the next character\n            if\
    \ (isFirstCharCapital) {\n                isFirstCharCapital = !str.IsFirstCharUpper();\n\
    \                isFirstCharSmall = !str.IsFirstCharLower();\n               \
    \ isFirstCharSpecialChar = !str.IsFirstCharSpecial();\n                isLastCharCapital\
    \ = !str.IsLastCharUpper();\n                isLastCharSmall = !str.IsLastCharLower();\n\
    \                isLastCharSpecialChar = !str.IsLastCharSpecial();\n         \
    \   }\n            // If the next character is small, the previous character was\
    \ small,\n            // so this must be the start of the next character\n   \
    \         if (isFirstCharSmall) {\n                isFirstCharCapital = !str.IsFirstCharUpper();\n\
    \                isFirstCharSmall = !str.IsFirstCharLower", "        var result\
    \ = new List<char>();\n        foreach (var c in str)\n            if (char.IsUpperOrLower(c))\n\
    \                result.Add(c);\n            else\n                result.Add('\
    \ ');\n        return result.Distinct().Count();", "        long count = str.Length;\n\
    \        long charCount = 0;\n        foreach (char c in str)\n            charCount\
    \ += CountCharInStr(str, c);\n        return count;", "        // Count the number\
    \ of times each character is found\n        var distinctCount = new Dictionary<char,\
    \ int>();\n        foreach (var c in str.ToCharArray()) {\n            if (!distinctCount.ContainsKey(c))\
    \ {\n                distinctCount.Add(c, 1);\n            }\n            else\
    \ {\n                distinctCount[c] += 1;\n            }\n        }\n      \
    \  // Return the distinct count of the string\n        return distinctCount.Count;",
  "        char[] buffer = str.ToCharArray();\n        Array.Sort(buffer);\n     \
    \   long distinctCharacters = 1;\n        foreach (char c in buffer) {\n     \
    \       if (c.Equals(char.ToLowerInvariant(c))) {\n                distinctCharacters\
    \ *= 2;\n            }\n            else {\n                distinctCharacters++;\n\
    \            }\n        }\n        return distinctCharacters;", '        return
    str.GroupBy(x => x).SelectMany(x => x.Count()).Distinct().Count();', "       \
    \ int n = str.Length;\n        int c = 0;\n        long total = 0;\n        foreach(char\
    \ ch in str)\n        {\n            total += (int)(int)ch;\n        }\n     \
    \   return total;", "        long count = 1;\n        foreach (char c in str)\
    \ {\n            if (char.IsLower(c)) count++;\n        }\n        return count;",
  "        long count = 0;\n        HashSet<Character> hashSet = new HashSet<Character>();\n\
    \        foreach (char c in str.ToCharArray()) {\n            hashSet.Add(c);\n\
    \            count += hashSet.Count;\n        }\n        return count;", "   \
    \     var hash = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n    \
    \    foreach (var c in str) {\n            hash.Add(c);\n        }\n        return\
    \ hash.Count;", "        string lower = str.ToLower();\n        char[] buffer\
    \ = new char[lower.Length];\n        HashSet<char> hashset = new HashSet<char>();\n\
    \        bool started = false;\n        for (int i = 0; i < lower.Length; i++)\
    \ {\n            if (lower[i] == '(') {\n                started = true;\n   \
    \         } else if (lower[i] == ')') {\n                hashset.Add(')');\n \
    \           } else if (lower[i] == ' ') {\n                hashset.Add(' ');\n\
    \            } else if (started) {\n                hashset.Add(lower[i]);\n \
    \           }\n        }\n        return hashset.Count;", "        // Initialize\
    \ result\n        long result = 0;\n\n        // Check each character in string,\
    \ add to result\n        foreach (char c in str) {\n            if (char.IsUpper(c))\n\
    \                result += 1; // One distinct character is upper case\n      \
    \      if (char.IsLower(c))\n                result += 1; // One distinct character\
    \ is lower case\n            if (char.IsDigit(c))\n                result += 1;\
    \ // One distinct character is numeric\n        }\n\n        return result;",
  "        long totalCount = 0;\n        long distinctCount = 0;\n        foreach\
    \ (char c in str.ToLower()) {\n            if (Char.IsLetter(c)) {\n         \
    \       distinctCount += 1;\n            }\n            totalCount += 1;\n   \
    \     }\n        return distinctCount;", "        char firstLetter = str.First();\n\
    \        long result = 0;\n        foreach (char c in str)\n        {\n      \
    \      if (c != firstLetter)\n            {\n                result += 1;\n  \
    \          }\n        }\n        return result;", "        long distinctCount\
    \ = 0;\n        foreach (var item in str)\n            if (Char.IsLetter(item))\n\
    \                distinctCount++;\n        return distinctCount;", "        char[]\
    \ chars = str.ToCharArray();\n        Array.Sort(chars);\n\n        long count\
    \ = 0;\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i]\
    \ == chars[i - 1]) {\n                count++;\n            } else {\n       \
    \         break;\n            }\n        }\n        return count;", "        //\
    \ Your code goes here\n        // You will need to define some variables.\n  \
    \      string lowerString = str.ToLower();\n        char[] lowerCharArray = lowerString.ToCharArray();\n\
    \        Dictionary<char, int> charDictionary = new Dictionary<char, int>();\n\
    \        for (int i = 0; i < lowerCharArray.Length; i++) {\n            char lowerChar\
    \ = lowerCharArray[i];\n            if (charDictionary.ContainsKey(lowerChar))\
    \ {\n                charDictionary[lowerChar] = charDictionary[lowerChar] + 1;\n\
    \            } else {\n                charDictionary.Add(lowerChar, 1);\n   \
    \         }\n        }\n        return charDictionary.Count;", "        // If\
    \ there are no characters to count, return 0\n        if (string.IsNullOrEmpty(str))\
    \ {\n            return 0;\n        }\n\n        // Count the characters in the\
    \ string, adding it to an array \n        var charCount = new long[128];\n   \
    \     for (int i = 0; i < str.Length; i++) {\n            charCount[str[i]]++;\n\
    \        }\n\n        // Iterate over the characters in the array \n        long\
    \ distinctChars = 0;\n        for (int i = 0; i < 128; i++) {\n            distinctChars\
    \ += charCount[i];\n        }\n        return distinctChars;", "        long num\
    \ = 0;\n        var distinctChars = new HashSet<char>();\n        foreach (var\
    \ c in str) {\n            distinctChars.Add(c);\n            num++;\n       \
    \ }\n        return num;", "        long numDistinctCharacters = 0;\n        //\
    \ Count how many times each character is repeated\n        Dictionary<char, long>\
    \ charCounts = new Dictionary<char, long>();\n        foreach (char c in str)\
    \ {\n            long currCount;\n            if (charCounts.TryGetValue(c, out\
    \ currCount))\n                charCounts[c] = currCount + 1L;\n            else\n\
    \                charCounts[c] = 1;\n        }\n\n        foreach (var key in\
    \ charCounts) {\n            // Ignore the case when there are repeated characters,\
    \ e.g. \"A\", \"a\", \"b\", etc.\n            if (charCounts[key] > 1)\n     \
    \           numDistinctCharacters += charCounts[key];\n        }\n\n        return\
    \ numDistinctCharacters;", "        long n = str.Length;\n        long nDistinct\
    \ = 0;\n        long m = 1;\n        Dictionary<long, long> table = new Dictionary<long,\
    \ long>();\n        for (int i = 0; i < n; i++) {\n            char c = str[i];\n\
    \            if (table[c] == 0) {\n                table[c] = m;\n           \
    \     nDistinct++;\n                m += 1;\n            } else {\n          \
    \      table[c] += 1;\n            }\n        }\n        return nDistinct;", " \
    \       if (str == null)\n            throw new ArgumentNullException(\"str\"\
    );\n\n        return str.Distinct().Count();", "        long count = 0;\n    \
    \    foreach (char c in str) {\n            int idx = c.ToLower().GetHashCode();\n\
    \            if (idx == 0) {\n                throw new ArgumentException(\"Input\
    \ string must contain at least one non-zero character\", nameof(str));\n     \
    \       }\n            count += (idx & 1) + (idx >> 1) + (idx >> 2) + (idx >>\
    \ 4) + (idx >> 8) + (idx >> 16);\n        }\n        return count;", "       \
    \ StringBuilder sb = new StringBuilder();\n\n        foreach (char c in str) {\n\
    \            if (char.IsLower(c))\n                sb.Append(c);\n           \
    \ else\n                sb.Append(Char.ToUpper(c));\n        }\n\n        char[]\
    \ charArray = sb.ToString().ToCharArray();\n        Array.Sort(charArray);\n\n\
    \        int count = 0;\n        foreach (char c in charArray) {\n           \
    \ if (char.IsUpper(c))\n                count += 1;\n        }\n        return\
    \ count;", "        string sTemp = \"\";\n        long length = 0;\n        foreach\
    \ (var item in str) {\n            sTemp += item.ToString();\n            length++;\n\
    \        }\n        char[] arrTemp = sTemp.ToCharArray();\n        Array.Sort(arrTemp);\n\
    \        long count = 0;\n        for (int i = 0; i < (arrTemp.Length - 1); i++)\
    \ {\n            string sTemp2 = \"\";\n            for (int j = i + 1; j < (arrTemp.Length\
    \ - 1); j++) {\n                sTemp2 += arrTemp[j].ToString();\n           \
    \ }\n            arrTemp = sTemp2.ToCharArray();\n            Array.Sort(arrTemp);\n\
    \            if (sTemp2.ToLowerInvariant() == sTemp.ToLowerInvariant()) {\n  \
    \              count += 1;\n            }\n        }\n        return count;",
  "        // This takes more time than a pure string lookup, since we need to do\
    \ a case insensitive compare\n        // for every character\n        var hashSet\
    \ = new HashSet<char>(StringComparer.OrdinalIgnoreCase);\n        foreach (char\
    \ c in str) {\n            hashSet.Add(c);\n        }\n        return hashSet.Count;",
  "        if (str.Length == 0) return 0;\n        // Convert the input string to\
    \ a character array and sort it.\n        var charArray = str.ToCharArray();\n\
    \        Array.Sort(charArray);\n\n        // Now sort the characters in the string\
    \ and keep a track of which characters are distinct.\n        var distinctCharacters\
    \ = new HashSet<char>();\n        for (int i = 0; i < charArray.Length; i++) {\n\
    \            if (distinctCharacters.Add(charArray[i])) {\n                distinctCharacters.Remove(charArray[i]);\n\
    \            }\n        }\n\n        // return the number of distinct characters\n\
    \        return distinctCharacters.Count;", "        if (str == null)\n      \
    \      throw new ArgumentNullException(\"str\");\n        StringBuilder result\
    \ = new StringBuilder();\n        foreach (char c in str) {\n            result.Append(c);\n\
    \        }\n        char[] array = result.ToString().ToCharArray();\n        return\
    \ array.Distinct().Count();", "        StringBuilder builder = new StringBuilder();\n\
    \        foreach (char c in str.ToCharArray()) {\n            builder.Append(c);\n\
    \        }\n\n        var distinctChars = builder.Distinct().ToList();\n     \
    \   return distinctChars.Count;", "        SortedSet<char> distinctCharacters\
    \ = new SortedSet<char>();\n        char[] charArray = str.ToCharArray();\n\n\
    \        // Convert lower case and upper case characters separately\n        foreach\
    \ (char character in charArray) {\n            if (char.IsLower(character)) {\n\
    \                distinctCharacters.Add('z' - 'a' + 1);\n            } else {\n\
    \                distinctCharacters.Add('Z' - 'A' + 1);\n            }\n     \
    \       distinctCharacters.Add(character);\n        }\n\n        return distinctCharacters.Count;",
  "        return str.Where(s => s != ' ').Distinct().Count();", "        char[] c\
    \ = str.ToCharArray();\n        return c.Distinct().Count();", "        var hash\
    \ = str.ToLower().ToCharArray().GroupBy(c => c).ToDictionary(c => c, c => c.Count());\n\
    \        return (long)hash.GetEnumerator().Where(x => x.Value > 1).Select(x =>\
    \ x.Key).Count();", "        long count = 0;\n        foreach (char c in str)\n\
    \            count = count + ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')\
    \ ? 1 : 0);\n        return count;", "        long result = 0;\n        foreach\
    \ (char c in str) {\n            result += c;\n        }\n        return result;",
  "        var charSet = str.ToCharArray();\n        var strAsHashSet = new HashSet<char>(charSet.Count());\n\
    \n        foreach (var c in charSet) {\n            strAsHashSet.Add(c);\n   \
    \     }\n\n        return strAsHashSet.Count();", "        HashSet<string> set\
    \ = new HashSet<string>();\n        foreach (char c in str) {\n            set.Add(Convert.ToString(c.ToString()));\n\
    \        }\n        return (set.Count());", "        if (string.IsNullOrEmpty(str))\
    \ return 0;\n        var counts = new List<string>();\n        var chars = str.ToCharArray();\n\
    \        foreach (var c in chars) {\n            if (!counts.Contains(c)) {\n\
    \                counts.Add(c);\n            }\n        }\n        return counts.Distinct().Count();",
  "        Debug.Assert(str.Length > 0, \"String must not be empty.\");\n        long\
    \ result = 0;\n        foreach (var item in str) {\n            if (Char.IsLower(item)\
    \ || Char.IsUpper(item)) {\n                result ++;\n            }\n      \
    \  }\n        return result;", "        byte[] bytes = Encoding.ASCII.GetBytes(str);\n\
    \        BigInteger result = 1;\n        foreach (byte b in bytes)\n         \
    \   result *= b;\n        return result.ToString(\"N\", CultureInfo.InvariantCulture);",
  "        if (str == null)\n            return 0;\n\n        HashSet<char> hs = new\
    \ HashSet<char>();\n        foreach (char c in str)\n        {\n            if\
    \ (hs.Contains(c))\n            {\n                hs.Remove(c);\n           \
    \ }\n            else\n            {\n                hs.Add(c);\n           \
    \ }\n        }\n        \n        return (long)hs.Count;", '        return str.ToCharArray().Distinct().Count();',
  "        var hashset = new HashSet<char>();\n        foreach (char c in str.ToLower())\
    \ {\n            if (hashset.Contains(c))\n                hashset.Remove(c);\n\
    \            else\n                hashset.Add(c);\n        }\n        return\
    \ hashset.Count;", "        if (str == null || str.Length == 0)\n            return\
    \ 0L;\n        HashSet<string> distinctChars = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\
    \        foreach (char c in str)\n            distinctChars.Add(c.ToString());\n\
    \        return distinctChars.Count;", "        if (str == null) throw new ArgumentNullException(\"\
    str\");\n        long count = 0;\n        // Count unique characters, ignoring\
    \ case\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i]\
    \ != str[i].ToUpper())\n                count++;\n        }\n        return count;",
  "        HashSet<string> hs = new HashSet<string>();\n        int count = 0;\n \
    \       foreach (char c in str.ToUpper()) {\n            hs.Add(c.ToString());\n\
    \            count++;\n        }\n        return count;", "        var hash =\
    \ str.ToUpper().Aggregate((s1, s2) => s1 + s2.ToUpper());\n        return str.Length\
    \ / HashFunctions.GetHashSize(hash) * HashFunctions.GetHashSize(hash);", "   \
    \     // Initialize a hashtable to store all character counts (lower cased and\
    \ excluding spaces)\n        var hash = new Hashtable<char, long>();\n       \
    \ // Loop through the string\n        for (int i = 0; i < str.Length; i++) {\n\
    \            // If the character is not whitespace, add it to the hashtable\n\
    \            if (char.IsLetter(str[i])) {\n                hash.Add(str[i], 1);\n\
    \            }\n        }\n        // Count the number of distinct characters\
    \ (ignoring case)\n        var distinctCharacters = hash.Keys.Distinct().Count();\n\
    \        return distinctCharacters;", "        HashSet<Character> set = new HashSet<Character>();\n\
    \        foreach (var ch in str.ToLowerInvariant())\n            set.Add(ch);\n\
    \        return set.Count;", "        char[] chars = str.ToCharArray();\n    \
    \    Dictionary<char, long> counts = new Dictionary<char, long>();\n        foreach(char\
    \ c in chars)\n        {\n            if(!counts.ContainsKey(c))\n           \
    \ {\n                counts.Add(c, 1L);\n            }\n            else\n   \
    \         {\n                counts[c]++;\n            }\n        }\n        return\
    \ counts.Select(x => x.Value).Distinct().Count();", "        long count = 0;\n\
    \        foreach (char ch in str) {\n            count += Char.GetNumericValue(ch);\n\
    \        }\n        return count;", "        var counter = new Dictionary<char,\
    \ long>(); \n        foreach (var c in str) { \n            if (!counter.ContainsKey(c))\
    \ { \n                counter[c] = 1;\n            } else {\n                counter[c]++;\n\
    \            }\n        }\n        return counter.Count();", "        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char c in str)\n            sb.Append(c);\n\
    \        StringBuilder sb2 = new StringBuilder();\n        foreach (char c in\
    \ sb.ToString())\n            sb2.Append(c.ToString());\n        Dictionary<char,\
    \ long> dictionary = new Dictionary<char, long>();\n        foreach (char c in\
    \ sb2.ToString())\n            dictionary[c] = 1;\n        long sum = 0;\n   \
    \     foreach (char c in sb2.ToString()) {\n            dictionary.TryGetValue(c,\
    \ out long v);\n            sum += v;\n        }\n        return sum;", "    \
    \    if (str == null) throw new ArgumentNullException(nameof(str));\n        if\
    \ (str.Length == 0) return 0;\n        long distinctChars = 1;\n        char[]\
    \ chars = str.ToArray();\n        char[] cs = new char[chars.Length];\n      \
    \  foreach (char c in chars) cs[cs.IndexOf(c)] = 1;\n        for (int i = 0; i\
    \ < cs.Length; ++i) ++distinctChars;\n        for (int i = 0; i < cs.Length; ++i)\
    \ distinctChars -= cs[i] * (i + 1);\n        return distinctChars;", "       \
    \ long ret = 0;\n        char[] c = str.ToCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        foreach (char x in c) {\n            sb.Append(x);\n\
    \            ret++;\n        }\n        sb.Remove(sb.Length - 1, 1);\n       \
    \ foreach (string s in sb.ToString().ToLowerInvariant().Replace(\"'\", string.Empty).Split('\\\
    ''))\n            ret += c.Count(x => x == s);\n        return ret;", "      \
    \  long result = 0L;\n\n        foreach (char c in str)\n            result =\
    \ result + (int)Char.GetNumericValue(c);\n\n        return result;", '        return
    str.Length.ToString().ToLong();', "        char[] charArray = str.ToCharArray();\n\
    \        int charCount = charArray.Length;\n        char[] charDictionary = new\
    \ char[charCount];\n\n        // Use a dictionary to store the characters and\
    \ their count values\n        Dictionary<char, int> dict = new Dictionary<char,\
    \ int>();\n\n        // Iterate through each character in the string\n       \
    \ foreach (char c in charArray) {\n            dict[c] = dict.ContainsKey(c) ?\
    \ dict[c] + 1 : 1;\n        }\n\n        // Return the count of the distinct characters\n\
    \        return dict.Values.Distinct().Count();", "        long distinctCharacterCount\
    \ = 0;\n        foreach (var item in str)\n        {\n            distinctCharacterCount\
    \ += System.Text.ASCIIEncoding.ASCII.GetChars(System.Text.Encoding.ASCII.GetBytes(item)).Length;\n\
    \        }\n        return distinctCharacterCount;", "        long distinctCharacters\
    \ = 0;\n        foreach (var c in str) {\n            distinctCharacters += (c.ToLower()\
    \ == c).Count * c.Length;\n        }\n        return distinctCharacters;", " \
    \       long result = 0;\n        foreach (var c in str.ToCharArray()) {\n   \
    \         result += (c >= 'A' && c <= 'Z') ? (ulong)c - 'A' : (c == ' ' ? 1 :\
    \ 0);\n        }\n        return result;", "        int len = str.Length;\n  \
    \      HashSet<string> set = new HashSet<string>();\n        StringBuilder sb\
    \ = new StringBuilder();\n\n        // Loop over each character and add it to\
    \ the set\n        for (int i = 0; i < len; i++) {\n            char c = str[i];\n\
    \            if (!set.Contains(c)) {\n                set.Add(c);\n          \
    \      // If we've reached a new character, then write the string to the string\
    \ builder\n                // and clear it\n                if (i == (len - 1))\
    \ {\n                    sb.Append(c);\n                    sb.Clear();\n    \
    \            } else {\n                    sb.Append(c);\n                }\n\
    \            }\n        }\n\n        // Return the number of distinct characters\
    \ in the string builder\n        return set.Count;", "        Debug.WriteLine(string.Format(\"\
    Input string: {0}\", str));\n        string lowerCaseStr = str.ToLower();\n  \
    \      long distinctCharacters = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (str[i] == lowerCaseStr[i]) {\n                distinctCharacters++;\n\
    \            }\n        }\n        return distinctCharacters;", "        long\
    \ retVal = 0;\n\n        for (int i = 0; i < str.Length; i++) {\n            char\
    \ currentChar = str[i];\n            retVal += CountDistinctCharacters(currentChar,\
    \ 0);\n        }\n\n        return retVal;", "        long result = 1;\n     \
    \   foreach (char c in str) {\n            if (char.IsLower(c)) {\n          \
    \      result += 1;\n            } else {\n                result += (result <<\
    \ 1);\n            }\n        }\n        return result;", "        long retVal\
    \ = 0;\n        foreach (char c in str) {\n            long curVal = 1;\n    \
    \        while (c.Equals(str[retVal], StringComparison.InvariantCultureIgnoreCase))\
    \ {\n                curVal++;\n                retVal++;\n            }\n   \
    \         retVal += curVal;\n        }\n        return retVal;", "        HashSet<string>\
    \ set = new HashSet<string>();\n        foreach (char c in str)\n            set.Add(c.ToString());\n\
    \        return set.Count;", "        return str.Length\n            + str.GroupBy(c\
    \ => c).Select(g => g.Key).Distinct().Count();", "        long[] count = new long[26];\n\
    \        char[] characters = str.ToLower().ToCharArray();\n        foreach (char\
    \ c in characters) {\n            count[c - 'a']++;\n        }\n        long ans\
    \ = 0;\n        long j = 0;\n        for (int i = 0; i < count.Length; i++) {\n\
    \            ans += count[i] * Math.Pow(26, i);\n        }\n        return ans;",
  "        HashSet<string> charSet = new HashSet<string>();\n        foreach (char\
    \ c in str) {\n            charSet.Add(c.ToString());\n        }\n        return\
    \ charSet.Count;", "        var list = new List<char>();\n        foreach (var\
    \ c in str) {\n            list.Add(c);\n        }\n        var distinctChar =\
    \ list.Distinct();\n        return distinctChar.Count();", "        long result\
    \ = 0;\n        foreach(char c in str)\n            result += (byte)c;\n     \
    \   return result;", "        long distinctCharacters = 0;\n\n        // Remove\
    \ spaces\n        str = str.Replace(\" \", \"\");\n\n        // If string only\
    \ contains one character, it's distinct\n        if (str.Length == 1)\n      \
    \      distinctCharacters = 1;\n\n        // For each character in string and\
    \ append it to the list if the character is not already in it\n        foreach\
    \ (char c in str) {\n            if (!str.Contains(c))\n                distinctCharacters\
    \ += 1L;\n        }\n\n        return distinctCharacters;", "        string lowerStr\
    \ = str.ToLower();\n        string upperStr = str.ToUpper();\n        return lowerStr.Count()\
    \ - upperStr.Count();", "        long ret = 0;\n        foreach (char c in str.ToCharArray().OrderBy(x\
    \ => x))\n            ret = ret + (c < 128 && char.IsLower(c) ? c | 32 : c | 64);\n\
    \        return ret;", "        HashSet<char> hs = new HashSet<char>();\n    \
    \    foreach(char c in str) {\n            hs.Add(c);\n        }\n        return\
    \ hs.Count;", "        StringBuilder builder = new StringBuilder();\n        foreach\
    \ (char c in str) {\n            builder.Append(c);\n        }\n        StringBuilder\
    \ builder2 = new StringBuilder();\n        foreach (char c in builder) {\n   \
    \         builder2.Append(c);\n        }\n        HashSet<char> set = new HashSet<char>(builder2);\n\
    \        return set.Count;", "        if (str.Length < 2)\n            return\
    \ 0;\n        HashSet<char> hs = new HashSet<char>();\n        char[] buffer =\
    \ new char[str.Length];\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        buffer[i] = str[i];\n            hs.Add(buffer[i]);\n        }\n    \
    \    return hs.Count;", "        if (string.IsNullOrEmpty(str))\n            return\
    \ 0L;\n        var set = new HashSet<char>();\n        foreach (char c in str)\
    \ {\n            if (Char.IsLower(c))\n                set.Add('a'-'A');\n   \
    \         else\n                set.Add(c);\n        }\n        return set.Count;",
  "        var result = new StringBuilder();\n        foreach (var character in str)\n\
    \            result.Append(character);\n        var charArray = result.ToString().ToCharArray();\n\
    \        Array.Sort(charArray);\n        return charArray.Length;", "        if\
    \ (str == null) throw new ArgumentNullException(\"str\");\n        char[] charArray\
    \ = str.ToCharArray();\n        long count = 0;\n        for (int i = 0; i < charArray.Length;\
    \ i++)\n            count += HashCounter.GetCountForValue(charArray[i]);\n   \
    \     return count;", "        char[] charArray = str.ToCharArray();\n       \
    \ long distinctChars = charArray.Distinct().Count();\n        return distinctChars;",
  "        char[] charArray = str.ToCharArray();\n        Array.Sort(charArray);\n\
    \        char[] charArrayCopy = new char[charArray.Length];\n        Array.Sort(charArrayCopy);\n\
    \        long result = 0;\n        long cur = 0;\n        foreach (char c in charArrayCopy)\n\
    \        {\n            if (c != charArray[cur])\n            {\n            \
    \    result++;\n            }\n            cur++;\n        }\n        return result;",
  "        Dictionary<char, long> charCounts = new Dictionary<char, long>();\n   \
    \     foreach (char c in str.ToLower()) {\n            long count = charCounts.TryGetValue(c,\
    \ out long countValue) ? countValue + 1 : 1;\n            charCounts.Add(c, count);\n\
    \        }\n        return charCounts.Keys.Count();", "        HashSet<Character>\
    \ hs = new HashSet<Character>();\n        foreach (char c in str.ToCharArray())\n\
    \            hs.Add(c);\n        return hs.Count;", "        if (string.IsNullOrEmpty(str))\
    \ return 0;\n        long[] count = new long[256];\n        int index = 0;\n \
    \       int length = str.Length;\n        for (int i = 0; i < length; i++)\n \
    \           count[(int)str[i]]++;\n\n        for (int i = 0; i < length; i++)\n\
    \            count[(int)str[i]]--;\n\n        for (int i = 0; i < length; i++)\n\
    \            if (count[(int)str[i]] == 0)\n                index++;\n\n      \
    \  return index;", "        var count = GetCharCount(str);\n        var distinctCount\
    \ = GetDistinctCharCount(str);\n        return (long)Math.Floor((double)(distinctCount\
    \ * count) / GetCharCount(str));", "        HashSet<char> hs = new HashSet<char>();\n\
    \        foreach (char c in str)\n            hs.Add(c);\n        return hs.Count;",
  "        long result = 0L;\n        foreach (var ch in str) {\n            if (Char.IsUpper(ch))\
    \ {\n                result++;\n            }\n            else {\n          \
    \      if (Char.IsLower(ch)) {\n                    result++;\n              \
    \  }\n                else {\n                    result += 2;\n             \
    \   }\n            }\n        }\n        return result;", "        string lowerCaseStr\
    \ = str.ToLower();\n        string chars = \"\";\n        string nonChars = \"\
    \";\n\n        int i;\n        int index;\n        int count = 1;\n        for\
    \ (i = 0, index = 0; i < lowerCaseStr.Length; i++) {\n            if (lowerCaseStr[i]\
    \ != chars[i]) {\n                chars += chars[index];\n                nonChars\
    \ += lowerCaseStr[i];\n                index = i;\n                count++;\n\
    \            }\n        }\n        return count;", "        HashSet<Character>\
    \ distinct = new HashSet<Character>();\n        foreach (char c in str) {\n  \
    \          distinct.Add(c);\n        }\n        return distinct.Count;", "   \
    \     // Make an array of string with all characters in the string\n        char[]\
    \ arr = str.ToCharArray();\n        // Make a HashSet where every distinct character\
    \ is counted\n        HashSet<char> set = new HashSet<char>();\n        long sum\
    \ = 0;\n        // loop through all characters in the string\n        foreach\
    \ (char c in arr) {\n            // If the character already exists, add one to\
    \ the sum\n            if (set.Contains(c)) {\n                sum++;\n      \
    \      // If not, add it to the hash set\n            } else {\n             \
    \   set.Add(c);\n            }\n        }\n        return sum;", "        long\
    \ n = str.Length;\n        long hash = 0;\n        Dictionary<char, long> charcount\
    \ = new Dictionary<char, long>();\n        foreach (char c in str)\n         \
    \   if (charcount.ContainsKey(c)) {\n                charcount[c]++;\n       \
    \     } else {\n                charcount.Add(c, 1L);\n            }\n       \
    \     hash = hash * 31 + charcount[c];\n        return hash;"]
stop_tokens:
- "\n    }\n"
