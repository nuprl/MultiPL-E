language: cs
name: HumanEval_131_digits
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // Find last digit
    by doing integer division by 10. First digit\n        // is the least significant
    one and last digit is the\n        // most significant one.\n        long lastDigit
    = n / 10;\n\n        // Find product of first digits and multiply by 2\n        //
    then add products of next digits and multiply by 3\n        // and so on until
    we reach to last digit.\n        long product = 1;\n        while (lastDigit >
    0) {\n            product *= lastDigit;\n            product += lastDigit % 2
    == 1 ? lastDigit / 2 : 1;\n            lastDigit /= 10;\n        }\n        //
    We have reached at one digit so the product\n        // will be multiplied by
    2 and we must add 1.\n        product *= 2;\n        product += 1;\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b6a886d87d94edaad7d456b17bd8e66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b6a886d87d94edaad7d456b17bd8e66>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n != 0) {\n            int digit = n % 10;\n            product
    *= digit;\n            n /= 10;\n        }\n        return product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvflp9hu8.cs(21,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976846
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var x = n;\n        long
    result = 0;\n        long temp = x;\n        while (x > 0) {\n            temp
    = x / 10;\n            if (temp % 2 == 1) {\n                result = result *
    temp;\n            }\n            x = temp;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3ffa644b9f44f3290bb25e7bfde8d04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3ffa644b9f44f3290bb25e7bfde8d04>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long digits = 0;\n
    \       long result = 0;\n        while (n) {\n            digits += n % 10;\n
    \           n /= 10;\n        }\n        digits = digits % 2 == 0 ? digits : digits
    - 1;\n        while (digits) {\n            result = result * 10 + digits;\n            digits
    /= 2;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvualtwlo.cs(21,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpvualtwlo.cs(26,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976846
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ret = 0;\n
    \       while (n > 0) {\n            ret += (n % 10) * (n / 10);\n            n
    = n / 10;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b451ce2fe3a4667a317ae0840f9ac6e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6b451ce2fe3a4667a317ae0840f9ac6e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    n;\n        bool isOdd = true;\n        while (isOdd) {\n            isOdd = n
    % 2 != 0;\n            product *= n;\n            n = n / 2;\n        }\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae114a3fbd3c477884b0249635cbbfcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae114a3fbd3c477884b0249635cbbfcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        Debug.Assert(n
    != 0);\n        if (n == 0) {\n            return 0;\n        }\n        if (n
    % 2 == 0) {\n            return n * Digits(n / 2);\n        }\n        long m
    = n / 2;\n        while (m % 2 == 0) {\n            m = m / 2;\n        }\n        long
    res = 1;\n        while (m != 0) {\n            res = res * m % 10;\n            m
    = m / 10;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c863970752a4686bee2e0dbc33a1fdf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c863970752a4686bee2e0dbc33a1fdf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       while (n > 0) {\n            result *= n % 10;\n            n /= 10;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <451edd305b9c47a783833c0cd951a9ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <451edd305b9c47a783833c0cd951a9ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long x = 0;\n        while
    (n > 0)\n        {\n            long d = n % 10;\n            n /= 10;\n            if
    (d % 2 == 1)\n                return 0;\n            x *= d;\n        }\n        return
    x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2921677408744ecbee53161ca8c3105>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2921677408744ecbee53161ca8c3105>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        long[] digits = n.ToString().Select(x => (long)x).ToArray();\n        long
    sum = 0;\n        for (int i = 0; i < digits.Length; i++)\n            if (digits[i]
    % 2 != 0)\n                sum += digits[i];\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452364d6bd214df9a851e2caa1591310>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452364d6bd214df9a851e2caa1591310>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // Use a HashSet
    to store the digits so we don't have to compute them twice.\n        HashSet<long>
    digits = new HashSet<long>();\n        // Make sure the number is positive.\n
    \       if (n < 1) {\n            return 0;\n        }\n        // Add the odd
    digits using recursion.\n        if (n >= 10) {\n            digits.add(n % 10);\n
    \           return Digits(n / 10);\n        }\n        // The number is even.\n
    \       if (n % 2 == 0) {\n            // Add the even digit.\n            digits.add(n
    / 2);\n            return digits.Aggregate((x, y) => x * y);\n        } else {\n
    \           // All digits are even.\n            return 0;\n        }\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpngzgbq09.cs(27,20): error CS1061: ''HashSet<long>'' does not contain a
    definition for ''add'' and no accessible extension method ''add'' accepting a
    first argument of type ''HashSet<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpngzgbq09.cs(33,20): error CS1061: ''HashSet<long>'' does not contain a
    definition for ''add'' and no accessible extension method ''add'' accepting a
    first argument of type ''HashSet<long>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976846
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long sum = 0;\n
    \       while (n > 0) {\n            long d = n % 10;\n            sum += (d %
    2 == 0) ? d : d * 3;\n            n = n / 10;\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b37358d33f641c788129bfe31edfeaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b37358d33f641c788129bfe31edfeaf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int count = 1;\n
    \       int ncopy = n;\n        while (ncopy != 0) {\n            count++;\n            ncopy
    /= 10;\n        }\n        if (count == 0) {\n            count = 1;\n        }\n
    \       return count * new BigInteger(n).Factorial(new BigInteger(count - 1).ToString());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe0yrgulm.cs(20,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe0yrgulm.cs(28,42): error CS1061: ''BigInteger'' does not contain a definition
    for ''Factorial'' and no accessible extension method ''Factorial'' accepting a
    first argument of type ''BigInteger'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976846
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ret = 1;\n
    \       while (n > 0) ret *= (n % 10);\n        if (n & 1) return 0;\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4itnbbqq.cs(21,13): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976846
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0) return
    0;\n        if (n < 0) {\n            if (n % 2 == 0) return 0;\n            n
    = -n;\n        }\n        long ret = 1;\n        int ndigits = 0;\n        while
    (n != 0) {\n            int digit = n % 10;\n            n /= 10;\n            long
    tmp = (ret*digit);\n            if (tmp > Math.Pow(10, ndigits)) {\n                ret
    = tmp;\n                ndigits += 1;\n            }\n        }\n        return
    ret*Math.Pow(10, ndigits);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxyzteuww.cs(27,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxyzteuww.cs(35,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976846
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n <= 0) return
    0;\n        var result = 1;\n        while (n) {\n            int digit = n /
    10;\n            if (n % 10 == 1) result += digit;\n            n /= 10;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpju4ot98j.cs(21,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpju4ot98j.cs(22,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976846
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n % 10 == 0)
    {\n            n = n / 10;\n        }\n        while (n != 0) {\n            int
    t = n % 10;\n            if (t % 2 == 0) {\n                n /= 10;\n                return
    n * t;\n            }\n            n /= 10;\n        }\n        return 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcbs1o599.cs(23,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976846
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // Initialize result
    with 1L if number is odd.\n        long result = 1L + (n % 2L);\n        \n        //
    Divide by two until we reach 1.\n        while (n % 2L == 0L) {\n            result
    *= 2L;\n            n /= 2L;\n        }\n        \n        // Return the result.\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b27f5a56c083432d8cfaa6de50665b44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b27f5a56c083432d8cfaa6de50665b44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ret = 1L;\n
    \       while (n > 0) {\n            long temp = n / 10;\n            if (temp
    % 2 != 0) {\n                return (temp * ret);\n            }\n            n
    = temp;\n            ret++;\n        }\n        return (ret);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bede150b6a2d4bdea113050b57d3db0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bede150b6a2d4bdea113050b57d3db0b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 1L) {\n
    \           return 0L;\n        }\n        StringBuilder b = new StringBuilder(n.ToString());\n
    \       long d = 0;\n        while (n > 1L) {\n            int digit = b.Length
    - 1;\n            int factor = 2;\n            while (b.Length > 1) {\n                while
    (factor < b.Length) {\n                    if (digit + factor > b.Length - 1)
    {\n                        b.Remove(factor);\n                    } else {\n                        long
    nextDigit = (long)b[digit] + b[digit + factor];\n                        if (nextDigit
    > 9) {\n                            nextDigit -= 9;\n                        }\n
    \                       b[digit] = nextDigit;\n                        b.Remove(digit
    + factor);\n                        break;\n                    }\n                    factor++;\n
    \               }\n                factor = 2;\n                digit--;\n            }\n
    \           long nextDigit = (long)b[digit];\n            if (nextDigit > 9) {\n
    \               nextDigit -= 9;\n            }\n            d++;\n            if
    (nextDigit % 2 != 0) {\n                return 0L;\n            }\n            n
    = n - nextDigit;\n        }\n        return Math.Pow(2, d);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy4v2a3xc.cs(30,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''length'' of ''StringBuilder.Remove(int, int)''

    /tmp/tmpy4v2a3xc.cs(32,30): error CS0136: A local or parameter named ''nextDigit''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpy4v2a3xc.cs(36,36): error CS0266: Cannot implicitly convert type ''long''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpy4v2a3xc.cs(37,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''length'' of ''StringBuilder.Remove(int, int)''

    /tmp/tmpy4v2a3xc.cs(55,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976846
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long res = 0;\n
    \       bool even = n % 2 == 0;\n        if (even) n /= 2;\n        for (long
    i = 1; i <= n; i++)\n        {\n            bool odd = n % i == 0;\n            if
    (odd)\n            {\n                res = res * i + 1;\n            }\n            n
    = n - i;\n        }\n        return even? 0L : res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd55c51010bf46cabb735a3bbe73e192>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd55c51010bf46cabb735a3bbe73e192>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int digits = 0;\n
    \       while (n > 9) {\n            digits += n % 10;\n            n /= 10;\n
    \       }\n        if (n != 0) {\n            digits += n % 10;\n        }\n        return
    digits;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxuuf93k0.cs(21,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxuuf93k0.cs(25,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976846
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var sum = 0;\n
    \       var remainder = 0;\n        var quotient = 0;\n        while (n > 0) {\n
    \           remainder = n % 10;\n            sum = sum * remainder;\n            n
    = n / 10;\n            quotient = quotient * 10 + remainder;\n        }\n        if
    (sum == 0 && quotient != 0) {\n            sum = quotient;\n        }\n        if
    (sum == 0) {\n            return 0;\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8f7r80yt.cs(23,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976846
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long sum = 0;\n
    \       while (n>0) {\n            int digit = n / 10;\n            int remainder
    = n % 10;\n            sum = sum * 10 + remainder;\n            n = digit;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk6qpzta5.cs(21,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpk6qpzta5.cs(22,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       long sum = 0;\n        while (n>0)\n        {\n            sum = sum *
    n % 10;\n            n = n / 10;\n        }\n        if (sum == 0)\n        {\n
    \           return 0;\n        }\n        else\n        {\n            return
    result;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2078a062a0e94db0a499aeb5deaaf282>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2078a062a0e94db0a499aeb5deaaf282>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ans = 0;\n
    \       while (n>0) {\n            int digit = n%10;\n            n = n/10;\n
    \           if (digit % 2 == 1)\n                ans = ans*10 + digit;\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo4x2lsm7.cs(21,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976847
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // The product
    of the odd digits can be calculated as:\n        // n = n * n \xD7 n \xD7 n\n
    \       // To find the product, we will repeatedly multiply the product by the
    number itself until we reach\n        // an odd number and then move on to the
    next odd number.\n        // If we reach the end of the number before the number
    itself is odd, then we will add all the\n        // odd numbers and then subtract
    the even numbers. We will subtract the even numbers because we have\n        //
    already added them to the odd numbers before moving on to the next odd number.\n
    \       long product = 1;\n        long lastOdd = 2;\n        bool even = true;\n
    \       while (true) {\n            long square = lastOdd * lastOdd;\n            if
    (square > n) {\n                return 0;\n            } else if (square == n)
    {\n                return product;\n            } else if (square == n && even)
    {\n                even = false;\n                product -= n;\n            }
    else if (square == n && !even) {\n                even = true;\n                product
    -= n;\n            }\n            lastOdd++;\n            if (lastOdd > 9) {\n
    \               lastOdd = 2;\n            }\n        }\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <209a0b5c15d54008b50fe44afb90baee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <209a0b5c15d54008b50fe44afb90baee>:0
    \n"
  stdout: None
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n != 0) {\n            product *= n % 10;\n            n /=
    10;\n        }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3bdd61fc4b7408fb97d79f85b8d427f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3bdd61fc4b7408fb97d79f85b8d427f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        bool even = true;\n
    \       if (n < 10) \n            return n;\n        long result = 1;\n        while
    (n > 1) {\n            result *= n % 10;\n            n /= 10;\n            even
    = !even;\n        }\n        if (even)\n            return 0;\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19e409e069ad4f0c8807bde73a65ac14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19e409e069ad4f0c8807bde73a65ac14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var product = n;\n
    \       var digits = n.ToString().Select(d => (d - '0'));\n        var oddDigits
    = digits.Where(d => d % 2 == 1).ToList();\n        var evenDigits = digits.Where(d
    => d % 2 == 0).ToList();\n\n        if (oddDigits.Count > 0 && evenDigits.Count
    > 0) {\n            return product * oddDigits.First();\n        }\n\n        if
    (oddDigits.Count > 0 && evenDigits.Count == 0) {\n            return 0;\n        }\n\n
    \       if (oddDigits.Count == 0 && evenDigits.Count > 0) {\n            return
    product * evenDigits.First();\n        }\n\n        if (oddDigits.Count == 0 &&
    evenDigits.Count == 0) {\n            return 0;\n        }\n\n        return product;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36e0e42d15994417b4585926dad793dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36e0e42d15994417b4585926dad793dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // Return 0 if
    n is 0.\n        if (n < 1L) return 0L;\n        // Return n if n is 1, because
    all digits are even.\n        if (n == 1L) return 1L;\n        // Find all digits
    of n.\n        var digits = n.ToString().Select(x => (long)x).ToList();\n        //
    Find even digits, and multiply by 2.\n        var evens = digits.Where(x => x
    % 2 == 0L).Select(x => x * 2L);\n        // Return product of even digits.\n        return
    (evens.Aggregate((x, y) => x * y));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.Digits (System.Int64 n) [0x000a0] in <7e525aed6a8c43cca6dce9a10398915b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <7e525aed6a8c43cca6dce9a10398915b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Aggregate[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`3[T1,T2,TResult] func) [0x00030] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.Digits (System.Int64 n) [0x000a0] in <7e525aed6a8c43cca6dce9a10398915b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <7e525aed6a8c43cca6dce9a10398915b>:0
    \n"
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if ((n & 1) ==
    0)\n            return 0;\n        long res = 0;\n        while (n > 0)\n        {\n
    \           if (n % 2 == 0)\n                res *= (n / 2);\n            n /=
    2;\n        }\n        return res;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a66188d712d047339ee01d5761a6fa78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a66188d712d047339ee01d5761a6fa78>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // Solve with BigInteger\n
    \       var result = new BigInteger(n.ToString(), 10);\n        var evens = result.ToString().Where(x
    => x % 2 != 0);\n        if (evens.Count() == result.ToString().Length) {\n            return
    0L;\n        }\n        return result.ToString().Select(x => Convert.ToInt32(x)).Aggregate((x,
    y) => x * y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptp_p8c24.cs(20,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.ReadOnlySpan<byte>''

    /tmp/tmptp_p8c24.cs(20,51): error CS1503: Argument 2: cannot convert from ''int''
    to ''bool''

    '
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       while (n > 0) {\n            result = result * n % 10;\n            n
    = n / 10;\n        }\n        if (result % 2 == 0) return 0;\n        else return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ef7020d86fe4a0ebb4640c8bc9fa992>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ef7020d86fe4a0ebb4640c8bc9fa992>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n <= 0)\n            return
    0;\n        long result = 0;\n        while (n > 1) {\n            result *= n
    % 10;\n            n /= 10;\n        }\n        if (n == 1)\n            return
    result;\n        \n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2b1a2e4a06c4818a53c765ec4a922a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2b1a2e4a06c4818a53c765ec4a922a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long p = 1;\n        while
    (n > 1) {\n            if (n % 10 >= 2) {\n                p += n % 10;\n            }\n
    \           n = n / 10;\n        }\n        if (n != 0) {\n            p += n;\n
    \       }\n        return p;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a80f372a32246d098a6252d6d77aeba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a80f372a32246d098a6252d6d77aeba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0) return
    0;\n        var digits = n.ToString().Select(x => Convert.ToInt32(x)).ToArray();\n
    \       int odd = digits[digits.Length - 1] % 2 == 1;\n        long result = digits[0];\n
    \       for (int i = 1; i < digits.Length; i++) {\n            if (digits[i] %
    2 == 0 && odd)\n                result *= 2;\n            else\n                result
    *= 10;\n            odd *= (digits[i] % 2 == 1);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpany2ye09.cs(21,19): error CS0029: Cannot implicitly convert type ''bool''
    to ''int''

    /tmp/tmpany2ye09.cs(24,17): error CS0019: Operator ''&&'' cannot be applied to
    operands of type ''bool'' and ''int''

    /tmp/tmpany2ye09.cs(28,13): error CS0019: Operator ''*='' cannot be applied to
    operands of type ''int'' and ''bool''

    '
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long sum = 0;\n
    \       long product = 1;\n        while (n > 0) {\n            int digit = n
    % 10;\n            product = product * (long)Math.Pow(digit, 2);\n            sum
    = sum + product;\n            n = n / 10;\n        }\n        return sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3axo5o0.cs(22,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        // The product of the digits of n\n        long productOfDigits =
    0;\n        while(n > 0) {\n            productOfDigits = productOfDigits * n
    % 10;\n            n = n/10;\n        }\n        // Check if all digits are even\n
    \       if (productOfDigits % 2 == 0) {\n            return 0;\n        }\n        product
    = product * productOfDigits;\n        return product;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90944c93c91c4cc2a91feabb4cf0b7e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90944c93c91c4cc2a91feabb4cf0b7e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1, digit = n;\n        while (digit > 0) {\n            if ((digit % 2) == 0)
    {\n                product *= digit;\n            }\n            digit /= 2;\n
    \       }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c156a5035ca846d1aae3ad1174d9fca1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c156a5035ca846d1aae3ad1174d9fca1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 1L) return
    0L;\n        long digit = 1L;\n        do {\n            digit = digit * n % 10;\n
    \           n /= 10;\n        } while (n-- > 0);\n        return digit;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <09f5a642e53744cf8284c2fb2e5f24d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <09f5a642e53744cf8284c2fb2e5f24d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        long res = n;\n        long mask = 1;\n        while (mask != 0) {\n
    \           if (res % 2 == 1)\n                res /= 2;\n            else\n                res
    *= 3;\n            mask /= 10;\n        }\n        if (res == 0)\n            return
    1;\n        else\n            return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf0f6cd54d0643cd82a9509eb9c8ca1e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf0f6cd54d0643cd82a9509eb9c8ca1e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long[] digits =
    new long[32];\n        string s = n.ToString();\n        for (int i = 0; i < s.Length;
    i++) {\n            digits[(s[i]-'0')] |= 1L << i;\n        }\n        long product
    = 1L;\n        for (int i = 0; i < digits.Length; i++) {\n            product
    *= digits[i];\n        }\n        return product;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6fd526384a41468abbf9ea298e6963>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d6fd526384a41468abbf9ea298e6963>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long prod = 1L;\n
    \       while (n > 0L) {\n            if (n % 2L == 0L)\n                prod
    = prod * n;\n            n = n / 2L;\n        }\n        return prod;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5034dc73e39641279ce57713b9b7a1fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5034dc73e39641279ce57713b9b7a1fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976847
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n != 0) {\n            int digit = n % 10;\n            if
    (digit % 2 != 0) {\n                product *= digit;\n            }\n            n
    = n / 10;\n        }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_yxbqgqd.cs(21,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976847
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        var d = n % 10;\n        var r = Digits(n / 10);\n        return (d
    * r) % 1000;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <393cb7b45ec44197a548d0bd96f151af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <393cb7b45ec44197a548d0bd96f151af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n <= 0)\n            return
    0;\n        if (n < 10)\n            return (long)n * 1;\n        var sum = 0;\n
    \       while (n > 1) {\n            sum += n % 10;\n            n /= 10;\n        }\n
    \       return sum * n;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr9d58lx8.cs(25,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        var digits = new List<long>();\n        while (n > 9) {\n            digits.Add(n
    % 10);\n            n = n / 10;\n        }\n        if (digits.Count % 2 == 1)\n
    \           return 0;\n        long product = 1;\n        foreach (var digit in
    digits) {\n            product *= digit;\n        }\n        return product;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4caf8c133384f9abfde50954ac59bfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4caf8c133384f9abfde50954ac59bfb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long oddDigits
    = 0;\n        long digit = n;\n        while (digit > 0) \n        {\n            long
    lastDigit = digit;\n            if (digit % 2 == 1) oddDigits *= lastDigit;\n
    \           digit = digit / 2;\n        }\n        return oddDigits;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <731580ecdbac427e8b7a9e8b64f91ccd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <731580ecdbac427e8b7a9e8b64f91ccd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // Fill this in.\n
    \       var result = 0;\n        while (n>0) {\n            var digit = n % 10;\n
    \           if (digit > 0)\n                result *= digit;\n            n /=
    10;\n        }\n        if (result == 0)\n            return 0;\n        else\n
    \           return result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp62lylk8t.cs(24,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // This implementation
    is similar to that of Divide() in DivideAndConquer.\n        // It uses the fact
    that if n has all even digits, then the product is \n        // even, so the only
    \"interesting\" digits involve n's odd digits.\n        // The \"interesting\"
    digits are the ones that are less than n's \n        // absolute value, and that
    have not yet been multiplied.\n        long product = 1;\n        long oddDigits
    = n.Abs();\n        while (oddDigits > 0) {\n            // If this digit is greater
    than all digits multiplied so far, \n            // add it to the product.\n            product
    *= oddDigits;\n            // Remove that digit from the product, and shift it
    left one.\n            product /= oddDigits % 10;\n            oddDigits /= 10;\n
    \       }\n        // If the product is even, zero it.\n        if (product %
    2 == 0)\n            product = 0;\n        return product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8k7ygtuk.cs(25,28): error CS1061: ''long'' does not contain a definition
    for ''Abs'' and no accessible extension method ''Abs'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long digits = 0;\n
    \       while (n > 0)\n            digits *= n % 10;\n        return digits %
    2 == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdvf8vzz5.cs(22,16): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        Debug.Assert(n
    > 0);\n        long s = 0;\n        while ((n % 10) != 0) {\n            s +=
    n % 10;\n            n /= 10;\n        }\n        if (n % 2 == 0) {\n            s
    += n % 10;\n            n /= 10;\n        }\n        return n * s;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2cdad4e068a4ac9acfbaec903818610>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2cdad4e068a4ac9acfbaec903818610>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long p = n;\n        long
    q = n % 1000;\n        long r = n % 1000;\n        p = p*10 + q;\n        r =
    r*10 + q;\n        return p*10 + r;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7db79d40ca14e3fb22c8be73973fdb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7db79d40ca14e3fb22c8be73973fdb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 0) {\n
    \           return 0;\n        }\n\n        long x = 0;\n        long n2 = n;\n
    \       int bits = 1;\n        while (n2 > 0) {\n            if (n2 & 1)\n                x
    = x * bits;\n            bits *= 2;\n            n2 >>= 1;\n        }\n\n        return
    x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphjdw2uc6.cs(27,17): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        long remainder;\n        long digit;\n        for(long x = n; x !=
    0; x /= 2) {\n            remainder = x % 10;\n            digit = remainder %
    2;\n            product *= digit;\n            product *= remainder;\n        }\n
    \       if(product == 0) return 0;\n        return product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <569fa96b3d224c3397cf704000ab2e43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <569fa96b3d224c3397cf704000ab2e43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 0) {\n
    \           return 0;\n        }\n        if (n <= 9) {\n            return n;\n
    \       }\n        long p = 0;\n        long remainder = n % 10;\n        while
    (remainder > 0) {\n            long next = remainder % 10;\n            p += next
    * next; // This line is the culprit!\n            remainder = remainder / 10;\n
    \       }\n        if (remainder > 0) {\n            p += 1;\n        }\n        return
    p;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2d8663db1ad4bad973a4578f97f19c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2d8663db1ad4bad973a4578f97f19c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n\n        long ret = 1;\n        while (n > 0) {\n            long tmp = (n
    % 10) * ret;\n            if (tmp > 10)\n                ret = tmp;\n            else\n
    \               ret = tmp + 1;\n            n = n / 10;\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5e3de43855c4033a89975d60341d1d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b5e3de43855c4033a89975d60341d1d4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var digits = n.ToString().Select(c
    => c - '0').ToList();\n        var sum = 0;\n        foreach (var d in digits)
    {\n            sum += d * 2;\n        }\n        return sum % 10;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1254ad979dd34fa89a5331bb06ef9c49>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1254ad979dd34fa89a5331bb06ef9c49>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long prod = 0;\n
    \       long digits = 0;\n        long max = 0;\n        long min = 0;\n        while
    (n!=0){\n            digits = n%10;\n            n /= 10;\n            if (digits
    > 0)\n                prod+=digits*Math.Pow(10,digits);\n        }\n        if
    (prod>0)\n            prod = Math.Pow(prod,2);\n        return prod;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp47zy8vmc.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp47zy8vmc.cs(30,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp47zy8vmc.cs(21,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp47zy8vmc.cs(22,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    '
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        int digit;\n        int digitPosition;\n        long tempNum;\n\n
    \       if (n < 10)\n            return n;\n\n        digitPosition = 0;\n        while
    ((n % 10) != 0) {\n            digit = n / 10;\n            tempNum = digitPosition
    * 10;\n            while (tempNum < digit) {\n                tempNum = tempNum
    * 10;\n            }\n\n            if (digit % 2 != 0) {\n                product
    = product * tempNum;\n            }\n            digitPosition++;\n            n
    = n % 10;\n        }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp01jwa4ho.cs(29,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        List<long> digits
    = new List<long>();\n        while (n != 0) {\n            digits.Add(n % 10);\n
    \           n /= 10;\n        }\n        return digits.Aggregate((x, y) => x *
    y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96488b0a69914fec9c313e843428e4d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96488b0a69914fec9c313e843428e4d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        string s = n.ToString();\n
    \       long prod = 1;\n        bool even = true;\n        foreach (char c in
    s) {\n            prod *= (long)Math.Pow(10, s.IndexOf(c) + 1);\n            even
    ^= true;\n        }\n        return even ? prod : 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2efb7707bc9e44a38ff3e7a66c111270>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2efb7707bc9e44a38ff3e7a66c111270>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var d = n % 10;\n
    \       long product = 1;\n        while ((n /= 10) > 0) {\n            product
    *= (n % 10);\n            n /= 10;\n        }\n        if (product % 2 == 0) {\n
    \           return 0;\n        }\n        return product;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e36eb4a14e6b49fd95064b9305312762>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e36eb4a14e6b49fd95064b9305312762>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var t = n % 10;\n
    \       if (t > 2) {\n            t -= 2;\n        }\n        long res = 0;\n
    \       while (t != 0) {\n            res += t % 10;\n            t /= 10;\n        }\n
    \       return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ff96df5277b495aad3990d0f2b64eee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ff96df5277b495aad3990d0f2b64eee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        const long maxLong
    = long.MaxValue;\n        List<long> digits = new List<long>();\n        while
    (n != 0) {\n            digits.Add(n % 10);\n            n /= 10;\n        }\n
    \       if (digits.Count % 2 == 1) {\n            return 0;\n        }\n        long
    result = 1;\n        foreach (long d in digits) {\n            result *= d;\n
    \       }\n        return result < maxLong ? result : long.MaxValue;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a17ec2f513e422aa40fdcbfa7ea3846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a17ec2f513e422aa40fdcbfa7ea3846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0 || n
    == 1)\n            return 1;\n        long product = 1;\n        while (n != 0)
    {\n            int digit = n % 10;\n            product *= digit;\n            n
    /= 10;\n        }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fbh_up7.cs(23,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        long maxDigit = n.ToString().Length;\n\n        // If all digits are
    even, return 0\n        if (maxDigit % 2 != 0) {\n            return 0;\n        }\n\n
    \       // Digits by power of 2\n        long pow2 = 1;\n        for (int i =
    1; i <= maxDigit; i++) {\n            pow2 = pow2 * 2;\n        }\n\n        //
    Calculate odd digits in n\n        for (int i = 1; i <= maxDigit; i += 2) {\n
    \           product = product * n.ToString().Substring(i - 1, 1);\n        }\n\n
    \       // Return product * pow2\n        return product * pow2;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp79x_5avh.cs(35,23): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''long'' and ''string''

    '
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        if (n % 2 == 0) {\n            n = n / 2;\n        }\n        while
    (n > 0) {\n            product = product * n % 10;\n            n = n / 10;\n
    \       }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce8373a8080e4cf88d142f793b6ed559>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce8373a8080e4cf88d142f793b6ed559>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976848
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 10)\n            return
    n;\n        var digits = n.ToString().Select(c => (byte)Char.GetNumericValue(c)).ToArray();\n
    \       var sum = 0;\n        var m = digits.Length;\n        for (var i = 1;
    i < m; i++)\n        {\n            var d = digits[i] - digits[i - 1];\n            if
    (d == 2)\n            {\n                sum += digits[i];\n            }\n            else
    if (d == -2)\n            {\n                sum -= digits[i];\n            }\n
    \           else\n            {\n                sum += d / 2;\n                sum
    -= d / 2 * digits[i - 1];\n            }\n        }\n        return sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe04f9c053fd46769db5a74d14bef72e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fe04f9c053fd46769db5a74d14bef72e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long even = 0;\n
    \       long odd = 0;\n        if (n == 0L) return 0L;\n        string str = n.ToString();\n
    \       List<long> digits = str.Select(x => Convert.ToInt64(Math.Floor(Math.Log10(x)
    + 1))).ToList();\n        foreach (long digit in digits) {\n            even +=
    digit % 2 == 0 ? digit : 0L;\n            odd += digit % 2 == 1 ? digit : 0L;\n
    \       }\n        if (even > 0) return even * Math.Pow(10, digits.Count - 1);\n
    \       return 0L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps56bb_uj.cs(28,30): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int sum = 0;\n
    \       while (n > 0)\n        {\n            sum += n % 10;\n            n =
    n / 10;\n        }\n        if (sum % 2 == 0)\n            return 0L;\n        else\n
    \           return 1L * sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0vaadp3w.cs(22,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n % 10 == 0)
    { return 0L; }\n        var product = n;\n        var oddDigit = 0;\n        string
    str = n.ToString();\n        foreach (var c in str.Reverse()) {\n            if
    (c == '1') { oddDigit++; }\n            product *= Math.Pow(10, oddDigit);\n        }\n
    \       return product;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1k11ijm_.cs(25,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var result = 1;\n
    \       while (n > 9) {\n            n /= 10;\n            result = (result *
    10) + n % 10;\n        }\n        if (n % 2 == 0) return 0;\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiloskw3o.cs(22,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976848
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // Convert n to
    an array of ints\n        long[] digits = n.ToDigitsArray();\n        // Add each
    odd digit to product\n        long product = 1;\n        for (int i = 0; i < digits.Length;
    i++)\n            if (digits[i] % 2 != 0) product *= digits[i];\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq7cxat1m.cs(20,27): error CS1061: ''long'' does not contain a definition
    for ''ToDigitsArray'' and no accessible extension method ''ToDigitsArray'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 0) {\n
    \           return 0;\n        }\n        var d = new BigInteger(\"0\", 10);\n
    \       while (n > d) {\n            d = d.Multiply(d);\n            n = n.Divide(2);\n
    \       }\n        return d;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc_tfkw6p.cs(22,32): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.ReadOnlySpan<byte>''

    /tmp/tmpc_tfkw6p.cs(22,37): error CS1503: Argument 2: cannot convert from ''int''
    to ''bool''

    /tmp/tmpc_tfkw6p.cs(24,19): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpc_tfkw6p.cs(25,19): error CS1061: ''long'' does not contain a definition
    for ''Divide'' and no accessible extension method ''Divide'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpc_tfkw6p.cs(27,16): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while ((n /= 10) != 0) product = product * n % 10;\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97a4a4a93c1d48c88bf6f4549fe49260>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97a4a4a93c1d48c88bf6f4549fe49260>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var d = n % 10;\n
    \       if (d == (n / 10) % 2)\n            return 0L;\n        else\n            return
    d * Digits(n / 10);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a65a3910d5804a0793116437838be8a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a65a3910d5804a0793116437838be8a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 10)\n            return
    n;\n        long[] digits = n.ToString().Select(c => c - '0').ToArray();\n        bool
    even = true;\n        long result = 0;\n        for (int i = 0; i < digits.Length;
    i++) {\n            if ((even ? digits[i] : -digits[i]) % 2 != 0)\n                return
    0;\n            result *= digits[i] / 2;\n            even = !even;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2yeucsgl.cs(21,25): error CS0029: Cannot implicitly convert type ''int[]''
    to ''long[]''

    '
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int ret = 0;\n
    \       int start = 0;\n        for (int i = 0; i < n; i++) {\n            while
    (start < i) {\n                ret += n % 10;\n                n /= 10;\n            }\n
    \           ret *= n % 2;\n            n /= 2;\n            start++;\n        }\n
    \       return (long)ret;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl562fi3e.cs(23,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpl562fi3e.cs(26,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        const long ten
    = 1000000;\n        // Check for even digits first.\n        if (n % 2 == 0) {\n
    \           return 0;\n        }\n        long product = 1;\n        // The odd
    digits are the product of dividing by 2.\n        while (n > 0) {\n            product
    *= n / ten;\n            n -= ten;\n        }\n        return product;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <684f16d85c74421e8091e574d85472b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <684f16d85c74421e8091e574d85472b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long p = 1;\n        while
    ((n /= 10) != 0) {\n            p = p * n % 10;\n        }\n        return p;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdf6aca1737a4d90a19b36885f5ce019>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdf6aca1737a4d90a19b36885f5ce019>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var result = new
    List<long>();\n        while (n > 10) {\n            result.Add(n % 10);\n            n
    = n / 10;\n        }\n        if (n == 1) return 1;\n        if (n % 2 == 0) {\n
    \           return 0;\n        }\n        var remain = n % 2;\n        while (n
    > 0) {\n            result.Add(n % 10);\n            n = n / 10;\n        }\n
    \       if (remain > 1) {\n            int count = result.Count - 1;\n            if
    (count < 1) {\n                return 0;\n            }\n            var lastDigit
    = result[count];\n            while (result.Count > 1) {\n                var
    lastTwoDigits = result.Take(2).ToArray();\n                if (lastTwoDigits.All(a
    => a == 0)) break;\n                var lastDigitProduct = lastTwoDigits.Select(a
    => lastDigit).Aggregate(0, (a, b) => a * b) % 10;\n                if (lastDigitProduct
    == 0) break;\n                lastDigit = lastDigitProduct;\n                result.RemoveAt(count);\n
    \               count--;\n            }\n        }\n        return result.Aggregate((a,
    b) => a * b) % 10;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6oe09ih6.cs(42,100): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp6oe09ih6.cs(42,100): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long digits = 0;\n
    \       while (n > 0) {\n            long tmp = n % 10;\n            digits *=
    (int)(tmp % 2);\n            n /= 10;\n        }\n        if (digits == 0) return
    0;\n        return digits;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51fa48a6dae241c4b72b40ee62e7efac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51fa48a6dae241c4b72b40ee62e7efac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        var result = 1;\n        while (n != 0) {\n            var tmp = n
    % 10;\n            if (tmp % 2 == 1) {\n                result *= tmp;\n            }\n
    \           n /= 10;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbertvml6.cs(25,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long d = 0;\n        while
    (n > 0) {\n            d = d * 10 + (n % 10);\n            n /= 10;\n        }\n
    \       return d % 2 == 0 ? d / 2 : d;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69bd1412ef8e4d3c9c36f84113ca9793>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69bd1412ef8e4d3c9c36f84113ca9793>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        if (n < 10) {\n            return n;\n        }\n        if (n < 1000)
    {\n            return 0;\n        }\n        if (n >= 1000 && n % 100 == 0) {\n
    \           return 1;\n        }\n        int remainder = n % 10;\n        if
    (remainder == 0) {\n            return 1;\n        }\n        long temp = 0;\n
    \       long remainderProduct = 1;\n        while (remainder > 0) {\n            temp
    *= 10;\n            temp += remainder;\n            product *= temp;\n            remainder
    = n % 10;\n        }\n        return (product % 10) == 0 ? product : product%10;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7xqbvb1q.cs(29,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7xqbvb1q.cs(39,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7xqbvb1q.cs(34,14): warning CS0219: The variable ''remainderProduct''
    is assigned but its value is never used

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 10)\n            return
    1L;\n        if (n % 2 == 0)\n            return 0L;\n        long d = n, product
    = 1L;\n        while (d > 10) {\n            d /= 10;\n            product *=
    (d % 2 == 1 ? 1L : 0L);\n        }\n        return product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b9ca6cbff414b6eae16173d400974df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b9ca6cbff414b6eae16173d400974df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int count = 0;\n
    \       long product = 1;\n        while (n!=0) {\n            count += (n%10)/2;\n
    \           product = (product*(n%10)%10) + count*1;\n            n /= 10;\n        }\n
    \       return product;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7a_7pgiu.cs(22,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        bool even = true;\n
    \       long product = 0;\n        long temp = n;\n        do {\n            temp
    = temp / 10;\n            product += temp % 10;\n        } while (temp != 0);\n
    \       if (even)\n            return 0;\n        return product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71cb652e59a9489a9985a0073cd47f4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71cb652e59a9489a9985a0073cd47f4f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0) return
    0;\n        if (n % 2 == 1) return 0;\n        long res = 0;\n        while (n
    != 0) {\n            long lastDigit = n % 10;\n            res *= lastDigit;\n
    \           n /= 10;\n        }\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f119a560bf24d9a92739ba012c57b4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f119a560bf24d9a92739ba012c57b4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long prod = 0;\n
    \       while (n > 0) {\n            prod *= n % 10;\n            n /= 10;\n        }\n
    \       if (n == 0)\n            return prod;\n        else\n            return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d672fe701374e9185c3db3543ba4b43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d672fe701374e9185c3db3543ba4b43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0L) {\n
    \           return 0L;\n        }\n        var result = 1L;\n        while (n
    > 0L) {\n            long product = n % 10L;\n            if (product % 2 != 0L)
    {\n                return 0L;\n            }\n            result = (result * product)
    / 10L;\n            n /= 10L;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8e8f88c6c5a4969bafe37239ee086d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8e8f88c6c5a4969bafe37239ee086d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 0)\n            return
    0;\n\n        long p = 1;\n        while (n > 1) {\n            long d = n % 10;\n
    \           n = n / 10;\n            if (d % 2 == 1)\n                p *= 10;\n
    \           p /= d;\n        }\n        return p;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cd6abef67c441559c706756f0114a47>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cd6abef67c441559c706756f0114a47>:0
    \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by
    zero.\n  at Problem.Digits (System.Int64 n) [0x00036] in <3cd6abef67c441559c706756f0114a47>:0
    \n  at Problem.Main (System.String[] args) [0x00024] in <3cd6abef67c441559c706756f0114a47>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted to
    divid"
  stdout: ''
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var product = n;\n
    \       while (product % 10 == 0) {\n            product /= 10;\n        }\n        if
    (product % 2 != 0)\n            return 0;\n        else\n            return product;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8d0ab4bf32b48c7b8afecb391f3bc56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8d0ab4bf32b48c7b8afecb391f3bc56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        return n.ToString().Where(char.IsOdd).Aggregate((x,
    c) => x * c - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp1ojzfo5.cs(19,40): error CS0117: ''char'' does not contain a definition
    for ''IsOdd''

    '
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long prod = n;\n
    \       while (n > 0) {\n            int digit = n % 10;\n            n = n /
    10;\n            if (digit % 2 == 1) {\n                prod *= digit;\n            }\n
    \       }\n        return prod;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn1jlefv_.cs(21,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var sum = 0L;\n
    \       while (n != 0L) {\n            int c = (int)((n % 10) * 2);\n            sum
    += c;\n            n /= 10;\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2f911f655904e42ad3a33a100548753>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2f911f655904e42ad3a33a100548753>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        if (n == 0) return 0;\n        char ch = (char)n;\n        for (;
    ch != '0'; ch = ch / 10)\n            product = product * Convert.ToInt64(ch);\n
    \       return product;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg3agyd00.cs(22,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n % 2 == 0)
    {\n            return 0;\n        } else {\n            long product = 1;\n            for
    (int i = 3; i <= Math.Floor(Math.Sqrt(n)); i += 2) {\n                product
    *= i;\n            }\n            return product;\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99e90095b97a4a48943333a2cf720768>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99e90095b97a4a48943333a2cf720768>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ret = 0;\n
    \       bool even = true;\n\n        for (int i = 0; i < 64; i++) {\n            long
    d = (n % 10L) * even;\n            n /= 10;\n            even = !even;\n            if
    (n != 0L && d == 0L) return 0L;\n            ret = ret * 10 + (long)d;\n        }\n\n
    \       return ret; \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpob85a0sl.cs(23,22): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''long'' and ''bool''

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ret = 1;\n
    \       while (n > 0) {\n            ret *= n % 10;\n            n /= 10;\n        }\n
    \       if (ret % 2 == 1) return 0;\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ab13fe86f74f30933b9954fa83f72b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ab13fe86f74f30933b9954fa83f72b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        Debug.Assert(n
    >= 0L);\n        long res = 1L;\n        while (n!=0L) {\n            if (n %
    2 == 1L)\n                res *= n % 2L;\n            n /= 2L;\n        }\n        if
    (n == 0L)\n            return res;\n        return res*-1;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdfd79a93a5c49b8b9e159a6a2fc12cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cdfd79a93a5c49b8b9e159a6a2fc12cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n > 0) {\n            product *= n % 10;\n            n /=
    10;\n        }\n        return product % 2 == 0 ? 0 : product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9649d84a02254fb99755a431b3e3de3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9649d84a02254fb99755a431b3e3de3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0L) return
    0L;\n        var res = new int[32];\n        int sum = 0;\n        while (n !=
    0L) {\n            int digit = Math.DivRem(n / 10, 2, out int remainder);\n            res[digit]
    += remainder;\n            sum += res[digit] * 2L;\n            n = n % 10;\n
    \       }\n        return sum % 2 == 1 ? res[0] : 0L;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr59zc1bu.cs(23,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpr59zc1bu.cs(25,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976849
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 10) {\n
    \           return n;\n        }\n        BigInteger x = new BigInteger(n.ToString());\n
    \       var product = 1;\n        for (int i = 0; i < x.Divide(2).Exponent; i++)
    {\n            product *= x.Divide(2).Exponent;\n            product /= 2;\n        }\n
    \       return product;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4yyrqdaa.cs(22,39): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp4yyrqdaa.cs(24,31): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmp4yyrqdaa.cs(25,26): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n <= 0) {\n
    \           return 0;\n        }\n\n        var d = (int)n;\n        long product
    = 1;\n        while (d > 0) {\n            if (d % 2 == 1) {\n                product
    *= 10;\n            }\n            d /= 2;\n        }\n        return product;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f32437e71fa4b94959247c382bf6603>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f32437e71fa4b94959247c382bf6603>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long sum = 0;\n
    \       long digit = 1;\n        while (n!=0)\n        {\n            sum = sum
    * digit;\n            n = n / 10;\n            digit = 2 * digit;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0085e451ab034ccebc29e302783299ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0085e451ab034ccebc29e302783299ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n\n        if (n % 2 == 0)\n            return 0;\n\n        // Store the remainder
    in \"odd\" while computing\n        // the product. \n        long odd = n % 10;\n
    \       n = n / 10;\n\n        // While n has remaining digits\n        while
    (n > 0)\n        {\n            long result = n * odd;\n            odd = (n %
    10) * odd;\n            n = n / 10;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7tvywcr.cs(37,16): error CS0103: The name ''result'' does not exist in
    the current context

    '
  timestamp: 1659976849
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       while (n>0) {\n            result *= n % 10;\n            n /= 10;\n        }\n
    \       if (n % 2 == 0) {\n            result = 0;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3de856ec6556480ba6cdc07d59c3deb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3de856ec6556480ba6cdc07d59c3deb4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    0;\n        // The algorithm below is intentionally slow to test the correctness\n
    \       // of the algorithm.\n        for (int i = 0; i < n; i++) {\n            long
    digit = i % 10;\n            if ((product * digit) % 2 == 0) {\n                product
    *= digit;\n            }\n        }\n        return product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <032f72b287964fae8f6b2b33cbcc69fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <032f72b287964fae8f6b2b33cbcc69fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var odd = n % 10;\n
    \       return n < 10 ? 0\n            : odd % 2 == 1 ? n * 10 + odd // return
    product of even digits\n            : n\n            % 2 == 0\n            ? n
    * 10 + DigitsOfOddFactors(n) // return product of odd and even digits\n            :
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp80u2mlvb.cs(24,24): error CS0103: The name ''DigitsOfOddFactors'' does
    not exist in the current context

    '
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n != 0) {\n            int digit = n % 10;\n            n =
    n / 10;\n            product = product * digit;\n        }\n        return product;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0h9725qg.cs(21,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // Use a recursive
    solution\n        long p = 1;\n        while (n > 0) {\n            long digit
    = n % (10L);\n            n = n / 10;\n            digit = (digit*2) + (digit*1);\n
    \           p = p * digit;\n        }\n        return p;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bcd0f7ca5bb4c1d88bfacd51b65ae58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bcd0f7ca5bb4c1d88bfacd51b65ae58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n % 2 == 1)
    return 0;\n\n        var result = 0;\n\n        while (n > 0) {\n            var
    digit = (n % 10); // Get the last digit\n            result += (ulong)digit; //
    Add this to the result\n            n = n / 10;\n        }\n\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpldcisaxa.cs(25,13): error CS0034: Operator ''+='' is ambiguous on operands
    of type ''int'' and ''ulong''

    '
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n % 2 == 0)\n
    \           return 0;\n        List<long> arr = new List<long>();\n        while
    (n > 10) {\n            arr.Add(n / 10);\n            n -= arr[0] * 10;\n        }\n
    \       long product = 1;\n        for (int i = arr.Count - 1; i >= 0; i--)\n
    \           product *= arr[i];\n        return product;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9cca513b99b47168f44b160a688ffd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9cca513b99b47168f44b160a688ffd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n\n        long prod = 0;\n        while (n) {\n            prod *= n % 10;\n
    \           n /= 10;\n        }\n\n        if (prod % 2 == 0)\n            return
    0;\n\n        return prod / 2;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc_acsm_1.cs(23,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n <= 0) return
    0;\n        long ans = 1;\n        long temp = n;\n        while (temp > 0) {\n
    \           ans *= temp % 10;\n            temp /= 10;\n        }\n        if
    (ans % 2 == 1) return 0;\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc920425d4f747848f9d90ca21f879ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc920425d4f747848f9d90ca21f879ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        if (n == 0) return product;\n        var remainder = (n % 10);\n        long
    digit = n / 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n
    \           while (digit > 0)\n            {\n                digit--;\n                product
    *= (remainder % 10);\n                remainder /= 10;\n            }\n        }\n
    \       return product;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <594d0b63963b4aac8e74a9b929b04781>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <594d0b63963b4aac8e74a9b929b04781>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int count = 0;\n
    \       long product = 1;\n        while (n != 0) {\n            count = (int)(Math.Log(n,
    10)) + 1;\n            product *= (int)(n % 10);\n            n /= 10;\n        }\n
    \       if (count == 0)\n            return product;\n        else\n            return
    (product * (long)Math.Pow(10, count));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ceceeabacee4486ba24e31a5886213ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ceceeabacee4486ba24e31a5886213ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long even = n;\n
    \       long sum = 0;\n        while ((n % 2) == 0) {\n            even = even
    / 2;\n            sum += even;\n            n = n/2;\n        }\n        if (n
    == 1)\n            return 1;\n        return sum * n;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc4c3d1c93f8493186ad9ff7aecd9672>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc4c3d1c93f8493186ad9ff7aecd9672>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long sum = 0;\n
    \       while (n > 1) {\n            if (n % 2 == 1) {\n                sum +=
    1 * n % 10;\n                n /= 10;\n            }\n            else\n                n
    /= 10;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f35af9d5ce064006b9f469d9bd395626>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f35af9d5ce064006b9f469d9bd395626>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 0)\n            throw
    new ArgumentOutOfRangeException(\"n\");\n        long res = 1;\n        while
    (n > 9) {\n            n = n / 10;\n            res = res * n % 10;\n        }\n
    \       if (n != 0)\n            res = res * n % 10;\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a2c850b46644facb3e93d7ab984d27a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a2c850b46644facb3e93d7ab984d27a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var remainder =
    n % 10;\n        int sum = 0;\n        while (remainder > 0) {\n            sum
    += Math.Pow(remainder, 2);\n            remainder = n % 10;\n            n /=
    10;\n        }\n        return n * Math.Pow(sum, -1);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptc3mmo7m.cs(22,13): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptc3mmo7m.cs(26,16): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ret = 0;\n
    \       while (n != 0) {\n            ret += (n % 10) * Math.Pow(2, n % 5);\n
    \           n /= 10;\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwg20o1l3.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976850
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    0;\n        long digit = n;\n        while (n >= 0) {\n            product +=
    (n % 10) * ((digit = n / 10) % 2 == 0 ? 1 : 0);\n        }\n        return product;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976855
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        long product = 1;\n        while (n != 0) {\n            if (n % 2
    == 1)\n                product *= n % 10;\n            n /= 10;\n        }\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de90f070e7fd424ab300a576f0b8c9e9>:0
    \n"
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 0;\n
    \       int counter = 0;\n        while (n) {\n            int remainder = n %
    10;\n            if (remainder % 2 == 0)\n                result *= Math.Pow(2,
    counter);\n            n /= 10;\n            counter++;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp79s4f8u0.cs(21,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmp79s4f8u0.cs(22,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp79s4f8u0.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        bool allOdd = true;\n
    \       long ret = 1;\n        while (n) {\n            if ((n & 1) == 1) {\n
    \               allOdd = false;\n            }\n            n = n / 10;\n            ret
    = (ret * 10) + (n % 10);\n        }\n        if (allOdd) {\n            ret =
    0;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwqls8yrt.cs(21,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long p = 1;\n        for
    (long i = 1; i <= n; i++) p *= n % i;\n        if (n % 2 == 1) return 0;\n        return
    p;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cf59bc2c64c462b9d74e1effe7d7fb5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cf59bc2c64c462b9d74e1effe7d7fb5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        List<long> digits
    = new List<long>();\n        long total = 0;\n        while (n > 0) {\n            digits.Add(n
    % 10);\n            n = n / 10;\n        }\n        digits.Reverse();\n        foreach
    (long d in digits) {\n            if (d % 2 == 0) {\n                total *=
    d;\n            }\n        }\n        return total;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23dc3f64c2774f8ab6191ad9138c4e73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23dc3f64c2774f8ab6191ad9138c4e73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        int result = 1;\n        for (int i = 0; i < n; i++)\n            result
    *= (i%2 == 0 ? i : 0);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <745d3041453944a1b66560bff3956813>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <745d3041453944a1b66560bff3956813>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n>0) {\n            product *= n % 10 + 1;\n            n /=
    10;\n        }\n        if (product % 2 == 0) {\n            return 0;\n        }\n
    \       return product;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b042788589f0424eb03ddd24a17b9161>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b042788589f0424eb03ddd24a17b9161>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        long d = 0;\n        while (n > 0) {\n            d = n % 10;\n            product
    = (product * d) % m;\n            n = n / 10;\n        }\n        return product;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu74643qs.cs(23,39): error CS0103: The name ''m'' does not exist in the
    current context

    '
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // We want to find
    the product of all odd-digit numbers.\n        // The first number is (n-1)/2
    + 1,\n        // the second is (n-1)/2 + 2, and so on until we reach 1\n        //
    The odd number product is ((n-1)/2+1)*( (n-1)/2+2)*( (n-1)/2+3)...*((n-1)/2+n-1)\n
    \       //\n        // We are going to calculate this product by working out the\n
    \       // sum of all the odd digits, and the sum of the first digit, plus\n        //
    the product of all the other digits\n        //\n        // The sum of a number
    x is defined as the sum of all the digits\n        // of the number's binary representation
    (we only need the decimal digits,\n        // so we're not actually computing
    the number's binary representation).\n        // For example, we can add 1 to
    a binary number (represented as a string\n        // of digits) by first converting
    it to an integer and then adding 1.\n        //\n        // For example, given
    x = 123, the sum is 1+2+3 = 6\n        // The first digit of x is 1, which is
    3 in base 10\n        // The sum of the digits is 6\n        // 6*100 + 6*10 +
    6 = 126, the answer\n        //\n        // We can use the fact that there are
    an infinite number of possible sums\n        // to work out the answer:\n        //\n
    \       // Sum of digits of n's binary representation = ((n-1)/2+1)*((n-1)/2+2)*...*((n-1)/2+n-1)\n
    \       //\n        // For example, for n = 123:\n        //\n        // Sum of
    digits of n's binary representation = (12/2+1)*12*(12/2+2)*...*(12/2+12)\n        //
    Sum of digits of 123's binary representation = (121/2+1)*121*12*(121/2+2)*...*(121/2+121)\n
    \       //\n        // Therefore, the sum of all odd digits is (((-1) + (-1))/2+1)*(((-1)
    + (-1))/2+2)*...*(((-1) + (-1))/2+(-1)\n        // The sum of all the first digits
    is (((-1) + (-1))/2+1) * (((-1) + (-1))/2+2)...*(((-1) + (-1))/2+(-1))\n        //\n
    \       // Therefore, we can use the formula to work out the answer:\n        //
    (((-1) + (-1))/2+1) * ...*(((-1) + (-1))/2+(-1)) = (n-1)/2+1)*...*((n-1)/2+(n-1))\n
    \       //\n        // If we know what a factorial is, then we can work out the
    product of all\n        // the odd digits by working out the factorial, and dividing
    the result\n        // by that factorial\n        //\n        // So, we know what
    a factorial is:\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg_beji34.cs(18,24): error CS0161: ''Problem.Digits(long)'': not all code
    paths return a value

    '
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       while (n != 0) {\n            result *= n % 10;\n            n /= 10;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c972a302ac214dc4be78f9532240a4f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c972a302ac214dc4be78f9532240a4f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var str = n.ToString();\n
    \       if (str.Length < 2) return 0;\n        long odd = str.Where(d => d % 2
    != 0).First();\n        long even = str.Where(d => d % 2 == 0).First();\n        return
    odd * even / 10;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1daa20168fb24f199caa9ffb67d1847a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1daa20168fb24f199caa9ffb67d1847a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 10)\n            return
    n*n;\n        long ret = 1;\n        while (n > 0) {\n            int digit =
    n % 10;\n            long t = ret*digit;\n            if (t > 9)\n                ret
    *= (t - 9);\n            n /= 10;\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ivh95_s.cs(23,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var ans = 0;\n
    \       var digits = new List<long> { 1 };\n\n        while (n) {\n            var
    m = n % 10;\n            digits[m] *= 10;\n            ans += digits[m];\n            n
    /= 10;\n        }\n\n        if (digits.All(x => x % 2 == 0)) {\n            return
    0;\n        }\n        return ans;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdx6tzher.cs(22,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpdx6tzher.cs(24,20): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdx6tzher.cs(25,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int digit = 0;\n
    \       while (n != 0) {\n            digit = n % 10;\n            n = n / 10;\n
    \       }\n        long product = 1;\n        for (int i = 3; i <= digit; i +=
    2) {\n            product *= i;\n        }\n        return product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp228pp7_i.cs(21,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976850
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ans = 1;\n
    \       long currentDigit = 0;\n        while (n > 0) {\n            currentDigit
    = n % 10;\n            n /= 10;\n            ans *= currentDigit;\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <378a79c1d49946eaaa642ab8761c6b2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <378a79c1d49946eaaa642ab8761c6b2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n > 0) {\n            int remainder = n % 10;\n            if
    (remainder == 0) {\n                product *= remainder;\n            }\n            n
    /= 10;\n        }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppnv4zis5.cs(21,29): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976850
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n\n        long m = 1;\n\n        for (int i = n.ToString().Length; i > 0;
    i--)\n        {\n            long d = Convert.ToInt64(n.ToString().Substring(i,
    1));\n            m *= d;\n            if (m > int.MaxValue / 2)\n            {\n
    \               m = 1;\n            }\n        }\n        return m;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length
    must refer to a location within the string.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.Digits (System.Int64 n) [0x00029] in <12e6aa02b5f24ad0ae303e758c73b735>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <12e6aa02b5f24ad0ae303e758c73b735>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    and length must refer to a location within the string.\nParameter name: length\n
    \ at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Digits (System.Int64 n)
    [0x00029] in <12e6aa02b5f24ad0ae303e758c73b735>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <12e6aa02b5f24ad0ae303e758c73b735>:0 \n"
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        return n.ToString().Aggregate(1,
    (acc, i) => acc * Math.Pow(10, (i - 1) * 2));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn8wvdc39.cs(19,54): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpn8wvdc39.cs(19,54): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var num = new BigInteger(n.ToString());\n
    \       // If all digits are even\n        if (num.IsEven) return 0;\n\n        //
    If all digits are odd\n        var digits = num.ToString().ToCharArray().Select(x
    => x.ToString()).ToArray();\n        var maxDigit = digits.Max(x => x.Length);\n
    \       var products = new List<BigInteger>();\n        for (var i = maxDigit
    - 1; i >= 0; i--) {\n            if (digits.Count(x => x != i) % 2 == 1) {\n                products.Add(new
    BigInteger(string.Join(\"\", digits.Take(digits.Count(x => x == i)).ToArray())));\n
    \           }\n        }\n        return products.Sum(x => x.Value).ToLong();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7eqgg780.cs(19,34): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp7eqgg780.cs(28,35): error CS0019: Operator ''!='' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmp7eqgg780.cs(29,91): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''int''

    /tmp/tmp7eqgg780.cs(32,36): error CS1061: ''BigInteger'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''BigInteger'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        long digit = 1;\n        while (n > digit) {\n            product
    *= digit;\n            n -= digit;\n            digit *= 10;\n        }\n        if
    (n < digit) {\n            product *= digit;\n        }\n        return product;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fec139de5b049f3bfeb146ea6323989>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fec139de5b049f3bfeb146ea6323989>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        bool even = true;\n
    \       var nums = n.ToString().Select(x => Convert.ToInt64(x));\n        long
    mul = 1;\n        foreach (var num in nums) {\n            mul *= num;\n            if
    (mul < mul)\n                return 0;\n            mul = mul / 10;\n            if
    (even) {\n                even = !even;\n            }\n        }\n        return
    mul;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cda9190062884c7db46bb2edee4066d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cda9190062884c7db46bb2edee4066d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n) {\n            product *= n % 10;\n            n = n / 10;\n
    \       }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6o97sbdm.cs(20,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0) return
    0;\n        long even = 0;\n        long odd = 1;\n        while (n > 1) {\n            n
    = n / 10;\n            even = even * 10 + (n % 10);\n            odd = odd * 10
    + (n / 10 % 10);\n        }\n        return even > 0 ? even : odd;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a1652ef72b94862a4cd20425df982f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a1652ef72b94862a4cd20425df982f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0) return
    0;\n        var digits = (long) Math.Abs(n);\n        var result = (long) Math.Pow(10,
    digits % 10);\n        while (digits/2 >= 10) {\n            digits /= 10;\n            result
    *= (long) Math.Pow(10, digits % 10);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e26396dc81de4d1ab3e57e5de240a935>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e26396dc81de4d1ab3e57e5de240a935>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var sb = new StringBuilder();\n
    \       var product = 1;\n        for (int i = 0; i < n; i++) {\n            sb.Append(n
    % 10);\n            n = n / 10;\n        }\n        sb.Reverse();\n        foreach
    (var c in sb.ToString()) {\n            product = product * Math.Pow(2, (int)
    c);\n        }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzapzyzyo.cs(25,12): error CS1061: ''StringBuilder'' does not contain a
    definition for ''Reverse'' and no accessible extension method ''Reverse'' accepting
    a first argument of type ''StringBuilder'' could be found (are you missing a using
    directive or an assembly reference?)

    /tmp/tmpzapzyzyo.cs(27,23): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long sum = 1;\n
    \       while (n > 0) {\n            long temp = n % 10;\n            if (temp
    % 2 == 0) return 0;\n            sum += temp;\n            n /= 10;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ca9801e9c374704876d665a8699cc6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5ca9801e9c374704876d665a8699cc6b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0) return
    0;\n        long result = 0;\n        while (n>0) {\n            if (n % 2 ==
    1) {\n                result = result * 10 + (n % 10);\n            }\n            n
    = n / 10;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b74902eaa2044250ad3a6e72bc8e4e4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b74902eaa2044250ad3a6e72bc8e4e4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long res = n;\n
    \       int count = 0;\n\n        while (n > 0) {\n            n = n / 10;\n            count++;\n
    \       }\n\n        long temp = res;\n        res = 1;\n\n        for (int i
    = count; i > 0; i--) {\n            long product = temp * res / 10;\n            res
    = product;\n            temp *= 10;\n        }\n\n        return res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b766effb14cc44f190789975ff5fc2e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b766effb14cc44f190789975ff5fc2e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long res = 0;\n
    \       long last = 0;\n        long first = 1;\n        while ((n % 10) != 0)
    {\n            last = n % 10;\n            res += last / first;\n            first
    *= 10;\n            n = n / 10;\n        }\n        if (n % 10 != 0) {\n            throw
    new Exception(\"n has non-integer digits\");\n        }\n        return res *
    first;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4bea725f2754295b4009514850e8cab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4bea725f2754295b4009514850e8cab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while ((n /= 10) > 0) {\n            product *= n % 10;\n        }\n
    \       if (product % 2 == 0) {\n            return 0;\n        }\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e60b4001c54e493aa44073aa07bcd3b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e60b4001c54e493aa44073aa07bcd3b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var result = 0;\n
    \       var bitArray = new byte[8];\n        var mask = (byte)0xff;\n        var
    nBits = n;\n        Debug.Assert(nBits > 0);\n        while (nBits >= 8) {\n            bitArray
    = GetBits(nBits);\n            nBits -= 8;\n            result += bitArray[1]
    * bitArray[2] * bitArray[4] * bitArray[6] * bitArray[7];\n        }\n        if
    (nBits > 0) {\n            bitArray = GetBits(nBits);\n            result += bitArray[1]
    * bitArray[2] * bitArray[4] * bitArray[6] * bitArray[7];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1yr0yxe3.cs(25,24): error CS0103: The name ''GetBits'' does not exist
    in the current context

    /tmp/tmp1yr0yxe3.cs(30,24): error CS0103: The name ''GetBits'' does not exist
    in the current context

    /tmp/tmp1yr0yxe3.cs(21,13): warning CS0219: The variable ''mask'' is assigned
    but its value is never used

    '
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ret = 1;\n
    \       while (n > 9) {\n            n /= 10;\n            ++ret;\n        }\n
    \       if (n == 1) return ret;\n        if (n == 0) return 0;\n        bool lastOdd
    = true;\n        while (n != 0) {\n            long temp, temp2;\n            temp
    = n % 10;\n            temp2 = ret % 10;\n            if (lastOdd) {\n                temp2
    += temp;\n            }\n            else {\n                temp2 -= temp;\n
    \           }\n            n = n / 10;\n            lastOdd = temp % 2;\n            ret
    = temp2;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpufmw4n7l.cs(38,23): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       long prev = 1;\n        while (n != 0) {\n            if (n % 2 == 1)
    {\n                result += prev;\n            }\n            prev *= n /= 2;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f9084d333f14ffb9f066956b3f99cd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f9084d333f14ffb9f066956b3f99cd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        long product = 1;\n        while (n > 0)\n        {\n            long
    d = n % 10;\n            product = (product * d) % 10;\n            n /= 10;\n
    \       }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <187e0cb3cf674175b6c683f599cda005>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <187e0cb3cf674175b6c683f599cda005>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long prod = 1L;\n
    \       while (n > 0) {\n            long mod = n % 10;\n            n = n / 10;\n
    \           if (mod > 1L) {\n                prod = prod * mod - (1L * prod);\n
    \           }\n        }\n        return prod;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ee607d42c6042b0900d4d432cf99e10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ee607d42c6042b0900d4d432cf99e10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int count = 1;\n
    \       long odds = 0;\n        while (n > 0)\n        {\n            int digit
    = n % 10;\n            if (digit % 2 == 0)\n            {\n                odds
    += digit;\n                n /= 10;\n            }\n            else\n            {\n
    \               odds *= count;\n                count *= 10;\n            }\n
    \       }\n        return odds == 0 ? 0 : odds;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl2wqqv9s.cs(23,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        var digits = n.ToString().Select(d
    => Convert.ToInt64(Math.Floor(Math.Log10(d)))).ToList();\n        if (digits.Count
    % 2 == 0) {\n            return 0L;\n        }\n        var result = 1L;\n        for
    (var i = digits.Count - 1; i >= 0; i--) {\n            var digit = digits[i];\n
    \           var remainder = digit % 2;\n            result *= (long)Math.Pow(2,
    remainder);\n            digit /= 2;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c390799aa314c619b46a398a52c4161>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c390799aa314c619b46a398a52c4161>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        // The \"odd\"
    product of 0 should be 0\n        if (n == 0)\n            return 0;\n        //
    The product of the odd digits of n is simply the product of the odd digits of
    the remainder\n        // of n divided by 2, and the product of the even digits
    of n divided by 4.\n        // The product is zero if the remainder is even.\n
    \       long product = 1;\n        while (n > 0) {\n            // The remainder
    of the product is the last odd digit of n, divided by 2\n            long remainder
    = n % 10;\n            // The product of odd digits of n is the product of the
    odd digits of the remainder\n            // divided by the product of the even
    digits of n\n            product *= (remainder % 2) == 0 ? 1 : 2;\n            //
    The product of even digits of n is the product of the even digits of the remainder\n
    \           // divided by the product of the odd digits of n\n            product
    *= (remainder % 4) == 0 ? 1 : 4;\n            n = n / 10;\n        }\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ba60f4293fc4aadb0930d483b2e8693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ba60f4293fc4aadb0930d483b2e8693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        Debug.Assert(n
    >= 0);\n        long res = 0;\n        while (n > 0) {\n            res *= n %
    10;\n            n /= 10;\n        }\n        return (res == 0) ? 0 : res;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e76fa3d8b50d4716986997dabbaf0638>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e76fa3d8b50d4716986997dabbaf0638>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 10) return
    1;\n        if (n < 100) return n;\n        if (n < 10000) return n * Digits(n
    / 10);\n        if (n < 100000) return n * Digits(n / 100) * Digits(n / 10);\n
    \       if (n < 1000000) return n * Digits(n / 1000) * Digits(n / 100) * Digits(n
    / 10);\n        if (n < 100000000) return n * Digits(n / 10000) * Digits(n / 1000)
    * Digits(n / 100) * Digits(n / 10);\n        if (n < 1000000000) return n * Digits(n
    / 100000) * Digits(n / 1000) * Digits(n / 100) * Digits(n / 10);\n        if (n
    < 10000000000) return n * Digits(n / 1000000) * Digits(n / 1000) * Digits(n /
    100) * Digits(n / 10) * Digits(n / 10);\n        if (n < 100000000000) return
    n * Digits(n / 10000000) * Digits(n / 1000) * Digits(n / 100) * Digits(n / 10)
    * Digits(n / 10) * Digits(n / 10);\n        if (n < 1000000000000) return n *
    Digits(n / 100000000) * Digits(n / 1000) * Digits(n / 100) * Digits(n / 10) *
    Digits(n / 10) * Digits(n / 10) * Digits(n / 10);\n        if (n < 10000000000000)
    return n * Digits(n / 1000000000) * Digits(n / 1000) * Digits(n / 100) * Digits(n
    / 10) * Digits(n / 10) * Digits(n / 10) * Digits(n / 10);\n        if (n < 100000000000000)
    return n * Digits(n / 10000000000) * Digits(n / 1000) * Digits(n / 100) * Digits(n
    / 10) * Digits(n / 10) * Digits(n / 10) * Digits(n / 10);\n        if (n < 1000000000000000)
    return n * Digits(n / 100000000000) * Digits(n / 1000) * Digits(n / 100) * Digits(n
    / 10) * Digits(n / 10) * Digits(n / 10) * Digits(n / 10);\n        if (n < 10000000000000000)
    return n * Digits(n / 1000000000000) * Digits(n / 1000) * Digits(n / 100) * Digits(n
    / 10) * Digits(n / 10) * Digits(n / 10) * Digits(n / 10);\n        if (n < 100000000000000000)
    return n * Digits(n / 10000000000000) * Digits(n / 1000) * Digits(n / 100) * Digits(n
    / 10) * Digits(n / 10) * Digits(n / 10) * Digits(n / 10) * Digits(n / 10);\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx87t5kic.cs(18,24): error CS0161: ''Problem.Digits(long)'': not all code
    paths return a value

    '
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 10) {\n
    \           return n;\n        }\n\n        long ans = 1;\n        while (n >
    0) {\n            ans = (ans * n) % 100;\n            n /= 10;\n        }\n\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d83c1808a35467c9bbdaa4c37c33249>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7d83c1808a35467c9bbdaa4c37c33249>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long m = n;\n        long[]
    evenDigits = { 0, 0 };\n        for (long i = 2; i <= Math.Sqrt(n); i += 2) {\n
    \           if (n % i == 0) {\n                m /= i;\n                evenDigits[(int)i]
    = 1;\n            }\n        }\n        return evenDigits.All(b => b) ? 0 : m
    * oddToDecimal(n % Math.Sqrt(n));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxw9rpmhv.cs(27,36): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpxw9rpmhv.cs(27,36): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpxw9rpmhv.cs(27,49): error CS0103: The name ''oddToDecimal'' does not exist
    in the current context

    '
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n % 2 == 0)
    {\n            n = n / 2;\n            while (n % 2 == 0) {\n                n
    = n / 2;\n            }\n            return 0;\n        }\n        long prod =
    0;\n        while (n) {\n            prod *= n % 10;\n            n = n / 10;\n
    \       }\n        return prod;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmput7w26vb.cs(27,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976851
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0 || n
    == 1)\n            return n;\n\n        // Store the largest digit index\n        int
    maxIndex = 0;\n        long prod = 0;\n        long d = 0;\n\n        while (n
    > 0) {\n            d = n % 10;\n            n /= 10;\n\n            if (d % 2
    == 1) {\n                // Even digit\n                // If the largest digit
    so far is non-zero\n                // and the new digit (by index) is odd, then\n
    \               // multiply the product by the new digit.\n                if
    (prod > 0 && d > 0)\n                    prod *= d;\n            }\n            else
    {\n                // Odd digit\n                // If the largest digit so far
    is non-zero,\n                // multiply the product by the new digit.\n                if
    (prod > 0)\n                    prod *= d;\n            }\n\n            maxIndex++;\n
    \       }\n\n        // Return 0 if all digits were even\n        if (prod ==
    0 && maxIndex == 0)\n            return 0;\n\n        return prod;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b73ea6c84204b59a7a1dd087dfacefc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b73ea6c84204b59a7a1dd087dfacefc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0) return
    0;\n        long product = n;\n        while (product / 2 > 0)\n            product
    /= 2;\n        return product;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) ==
    (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9c7f31ffd6840fb9d7b795bcfd125eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9c7f31ffd6840fb9d7b795bcfd125eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    0;\n        while (n) {\n            if (n % 2 == 1)\n                product
    *= 2;\n            n /= 2;\n        }\n        return product;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3vuqwwka.cs(20,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    '
  timestamp: 1659976851
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    0;\n        while (n>0) {\n            if (n%2==1) product *= 10;\n            int
    d = (int)Math.Floor(n/10);\n            product += d*(d-1);\n            n = n%10;\n
    \       }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi46qqym1.cs(22,31): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Floor(decimal)'' and ''Math.Floor(double)''

    '
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long ret = 1;\n
    \       while (n > 0) {\n            n /= 10;\n            ret *= n % 2 == 1 ?
    0 : 1;\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eae891ec95894a36b24cba2d1e4aecbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eae891ec95894a36b24cba2d1e4aecbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        int digitCount = 0;\n        while (n != 0) {\n            digitCount++;\n
    \           long nRem = n % 10;\n            n /= 10;\n            if (nRem %
    2 == 1) {\n                product = (product * nRem) + digitCount;\n            }\n
    \       }\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0a4d3b5f9834aebab5f34c583321d8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0a4d3b5f9834aebab5f34c583321d8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       while (n > 10) {\n            result *= n % 10;\n            n /= 10;\n
    \       }\n        if (n % 2 == 0) {\n            return 0;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05e660a1524242ecac36b8ac33043406>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05e660a1524242ecac36b8ac33043406>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       while (n > 0) {\n            result *= n % 10;\n            n /= 10;\n
    \       }\n        if (n == 0)\n            result = 0;\n        return (long)result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8641a913a031466ba31aaa58b371cac0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8641a913a031466ba31aaa58b371cac0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long digits = 0;\n
    \       while (n > 0) {\n            digits = n * 10 + (n % 10);\n            n
    /= 10;\n        }\n        if (n % 2 == 0) return 0;\n        if (digits > 0)
    return digits;\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b04c1057c614be899b1014df873c687>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b04c1057c614be899b1014df873c687>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long sum = 1;\n
    \       while (n > 0) {\n            long temp = n % 10;\n            sum *= temp;\n
    \           n /= 10;\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3e3b8ad5c4a4492bba358b99085eaae1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3e3b8ad5c4a4492bba358b99085eaae1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        BigInteger x =
    n;\n        BigInteger y = BigInteger.Zero;\n        while (x > 0) {\n            y
    = y.Multiply(x);\n            x = x / 10;\n        }\n        if (y == BigInteger.Zero)\n
    \           return (long)0;\n        else\n            return y;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpag7vtxek.cs(22,19): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpag7vtxek.cs(28,20): error CS0266: Cannot implicitly convert type ''System.Numerics.BigInteger''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long odd = 0;\n
    \       while (n != 0) {\n            if (n % 2 == 1) {\n                odd *=
    10;\n                odd += n % 10;\n            }\n            n /= 10;\n        }\n
    \       return odd;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4f09d1ec8e54e50abb424c3541e654d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4f09d1ec8e54e50abb424c3541e654d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int digit = 0;\n
    \       long product = 1;\n        while (n) {\n            digit = n % 10;\n
    \           if (digit % 2 != 0) product *= digit;\n            n /= 10;\n        }\n
    \       return product;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm4ug87zw.cs(21,16): error CS0029: Cannot implicitly convert type ''long''
    to ''bool''

    /tmp/tmpm4ug87zw.cs(22,21): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 0;\n
    \       while (n > 0)\n        {\n            long tens = n / 10;\n            result
    += (n % 10) * tens;\n            n = tens;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <badb5bed971749918f06b64889314afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <badb5bed971749918f06b64889314afd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        long remainder;\n        while (n > 0) {\n            remainder =
    n % 10;\n            product = product * remainder;\n            n = n / 10;\n
    \       }\n        return (product % 2) == 0 ? product : 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3c08537259044789022e21399759ae4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f3c08537259044789022e21399759ae4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        long evenDigits = 0;\n        while (n != 0) {\n            int digit
    = n % 10;\n            n /= 10;\n            if (digit % 2 != 0) {\n                evenDigits
    *= 10;\n                evenDigits += digit;\n            }\n            product
    *= digit;\n        }\n        // If all digits are even, return 0\n        if
    (evenDigits == 0)\n            return 0;\n        // Otherwise return the product
    of the even digits\n        return product;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_ftkh36k.cs(22,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        bool isEven = (n
    % 2L == 0L);\n        long remainder = 0;\n        long digits = 0;\n        while
    (n != 0L) {\n            int digit = n % 10;\n            remainder *= digit;\n
    \           n = n / 10;\n            digits++;\n        }\n        long result
    = 0;\n        if (!isEven) {\n            result = remainder;\n        }\n        while
    (digits > 1) {\n            result *= digits;\n            digits--;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9nm2db0d.cs(23,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 0;\n
    \       while (n != 0) {\n            long temp = n;\n            if (temp % 2
    == 0) {\n                temp -= 1;\n            }\n            result *= temp;\n
    \           n /= 10;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b0e3be8640444159b50bb2afba4a6c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b0e3be8640444159b50bb2afba4a6c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long product =
    1;\n        while (n > 0) {\n            long remainder = n % 10;\n            product
    *= (remainder % 2 == 1 ? remainder : 0);\n            n /= 10;\n        }\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb7985220c0b4e30a26501e979bb2a07>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb7985220c0b4e30a26501e979bb2a07>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n\n        var lastDig = n % 10;\n\n        if ((n / 10) % 2 == 0)\n            return
    lastDig * lastDig;\n\n        var sum = 0;\n\n        while (n >= 10) {\n            sum
    += n % 10;\n            n = n / 10;\n        }\n\n        return sum * sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5xbysmfp.cs(30,13): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 10) return
    n * n;\n        int digits = (int)(Math.Log10(n) + 1);\n        long sum = 0;\n
    \       long mult = 1;\n        for (int i = 0; i < digits; i++){\n            int
    digit = n % 10;\n            sum += mult * digit;\n            mult = mult * 10;\n
    \           n /= 10;\n        }\n        return sum % 10 == 0 ? sum : 0;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Digits((5L)) ==
    (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpefhsbh7d.cs(24,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n % 2 == 0)\n
    \           return 0;\n        int k = n / 10;\n        if (k % 2 == 0)\n            return
    0L;\n        long p = 2;\n        while (k > 0) {\n            p = p * 10 + (k
    % 2);\n            k /= 2;\n        }\n        return p;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf6s5ntm0.cs(21,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long p = n;\n        while
    ((n /= 10) > 1) {\n            p /= 10;\n        }\n        if (n % 2 == 0) {\n
    \           p *= 2;\n        }\n        return p;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L))
    == (5L));\n    Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L))
    == (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38d9bb29d26a4c6f8bcd361f9b0b3556>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38d9bb29d26a4c6f8bcd361f9b0b3556>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0) return
    0;\n        long product = 1;\n        while (n != 0) {\n            long left
    = Math.DivRem(n % 10, 2, out remainder);\n            if (left == 0) left += 1;\n
    \           product *= left;\n            n = remainder;\n        }\n        return
    product;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6he3lsp.cs(22,52): error CS0103: The name ''remainder'' does not exist
    in the current context

    /tmp/tmpz6he3lsp.cs(25,17): error CS0103: The name ''remainder'' does not exist
    in the current context

    '
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        BigInteger value
    = new BigInteger(n.ToString());\n        BigInteger two = new BigInteger(\"2\");\n
    \       BigInteger product = BigInteger.One;\n        BigInteger oddNumbers =
    BigInteger.Zero;\n        BigInteger remainder;\n\n        if (value.ToString().All(b
    => b == '1')) {\n            return 0;\n        }\n\n        bool isOdd = true;\n\n
    \       while (value > BigInteger.Zero) {\n            remainder = value.Subtract(BigInteger.One);\n
    \           if (remainder.ToString().All(b => b == '1')) {\n                isOdd
    = false;\n            }\n            else {\n                if (isOdd) {\n                    oddNumbers
    = oddNumbers.Multiply(two);\n                    isOdd = true;\n                }\n
    \               else {\n                    oddNumbers = oddNumbers.Multiply(BigInteger.One);\n
    \               }\n            }\n            product = product.Multiply(remainder);\n
    \           value = value.Divide(two);\n        }\n\n        return product.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvqednahb.cs(19,43): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpvqednahb.cs(20,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpvqednahb.cs(32,31): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Subtract(BigInteger,
    BigInteger)''

    /tmp/tmpvqednahb.cs(38,45): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpvqednahb.cs(42,45): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpvqednahb.cs(45,31): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''right'' of ''BigInteger.Multiply(BigInteger,
    BigInteger)''

    /tmp/tmpvqednahb.cs(46,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmpvqednahb.cs(49,16): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    '
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int div = n;\n
    \       long result = 1;\n        while (div > 0) {\n            int rem = div
    % 10;\n            result *= rem + 1;\n            div /= 10;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfuefuukn.cs(19,19): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return
    0;\n        var d = n % 10;\n        if (d == 0) {\n            if (n % 2 == 0)\n
    \               return 0L;\n            else\n                return 1L;\n        }\n
    \       long d0 = n % 10;\n        int k = 0;\n        for (int i = d; i < 10;
    i = i * 2)\n            k += 2;\n        long result = 0;\n        while (k <
    9) {\n            result = (result + d0) % 10;\n            k = (k + 1) % 10;\n
    \       }\n        if (k == 9)\n            return 0;\n        else\n            return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbknood4k.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        int result = 0;\n
    \       while (n>0) {\n            int digit = n % 10;\n            if (digit%2
    != 0) {\n                result *= (digit);\n            }\n            n /= 10;\n
    \       }\n        if (n==0) {\n            return 0;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpww5zv3z1.cs(21,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976852
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        if (n < 0) return
    0;\n        long result = 0;\n        while (n-- > 0) {\n            result *=
    10;\n            if (n % 2 == 1) result += (n / 2) % 10;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd9ef2e8461a47dd982eff4f4b3ed0f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bd9ef2e8461a47dd982eff4f4b3ed0f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        Debug.Assert(n
    > 0);\n        var digits = 0;\n        while (n > 0) {\n            n /= 10;\n
    \           digits++;\n        }\n        if (digits % 2 == 1) {\n            return
    0;\n        }\n        else {\n            return (n % 2 == 0) ? 0 : 1;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))
    == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))
    == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))
    == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))
    == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4513c89fab7454b8e866dbc874f5f81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4513c89fab7454b8e866dbc874f5f81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976853
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive integer n, return the product of the odd digits.\n
    \   // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n
    \   // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n
    \   // (15L)\n    public static long Digits(long n) {\n        long result = 1;\n
    \       while (n != 0) {\n            if (n % 2 == 1) {\n                result
    = (result * 10) + (n % 10);\n            }\n            n /= 10;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Digits((5L)) == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n
    \   Debug.Assert(Digits((120L)) == (1L));\n    Debug.Assert(Digits((5014L)) ==
    (5L));\n    Debug.Assert(Digits((98765L)) == (315L));\n    Debug.Assert(Digits((5576543L))
    == (2625L));\n    Debug.Assert(Digits((2468L)) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba625802a8d748b7b48007d72d78ada0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba625802a8d748b7b48007d72d78ada0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976853
