language: cs
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberList = numbers.Split(' ').Select(x => Convert.ToInt32(x)).ToList();\n
    \       var sorted = numberList.Sort(Comparer<Int32>.Create((x, y) => Comparer.Default.Compare(x,
    y)));\n        return string.Join(\" \", sorted);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn2cwuv6o.cs(16,71): error CS0305: Using the generic type ''Comparer<T>''
    requires 1 type arguments

    /tmp/tmpn2cwuv6o.cs(16,13): error CS0815: Cannot assign void to an implicitly-typed
    variable

    '
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       ArrayList numberList = new ArrayList();\n        string[] splitNumbers
    = numbers.Split(' ');\n        foreach (string number in splitNumbers) {\n            numberList.Add(number);\n
    \       }\n\n        string[] sortedNumbers = numberList.OrderBy(num => Int32.Parse(num)).ToArray();\n
    \       return string.Join(\" \", sortedNumbers);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjquddjzf.cs(15,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpjquddjzf.cs(15,36): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null) {\n            return null;\n        }\n        int
    n = numbers.Length;\n        if (n == 0) {\n            return null;\n        }\n
    \       int[] numberArray = numbers.Split(' ').Select(n => Convert.ToInt32(n)).ToArray();\n
    \       if (numberArray.Length != n) {\n            return null;\n        }\n
    \       Array.Sort(numberArray);\n        return numbers.Replace(' ', string.Empty)
    + String.Join(\" \", numberArray);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnn_snt3m.cs(27,37): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659976389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<char> list = numbers.ToCharArray().ToList();\n        list.Sort();\n
    \       StringBuilder result = new StringBuilder();\n        for (int i = 0; i
    < list.Count; i++) {\n            result.Append(list[i]);\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a8d587564a048bbabf767433739f7be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a8d587564a048bbabf767433739f7be>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Return input string unchanged if nothing to sort\n        if (string.IsNullOrWhiteSpace(numbers))
    {\n            return numbers;\n        }\n\n        // Create array of numbers
    from the input string\n        var numberArray = numbers.Split(' ')\n            .Select(n
    => Convert.ToInt32(n))\n            .OrderBy(n => n)\n            .ToArray();\n\n
    \       // Convert array of numbers to array of string numbers\n        var stringArray
    = numberArray\n            .Select(n => Convert.ToString(n))\n            .ToArray();\n\n
    \       // Sort the array of numbers in place\n        Array.Sort(numberArray);\n\n
    \       // Convert array of string numbers to string\n        return string.Join(\"
    \", stringArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <3ff0507f13dd48bbb0cb6cfc7a437289>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray
    () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00064] in <3ff0507f13dd48bbb0cb6cfc7a437289>:0 \n  at
    Problem.Main (System.String[] args) [0x0001b] in <3ff0507f13dd48bbb0cb6cfc7a437289>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0"
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numberWords = numbers.Split(new[] { ' ', '\\t' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       string result = \"\";\n        foreach (string num in numberWords) {\n
    \           var value = Convert.ToInt32(num);\n            if (value == 0) continue;\n
    \           result = result + ((value % 10) < 2 ? \"one\" : \"two\") + ((value
    % 10) < 4 ? \"three\" : \"four\") + ((value % 10) < 6 ? \"five\" : \"six\") +
    ((value % 10) < 8 ? \"seven\" : \"eight\") + ((value % 10) < 10 ? \"nine\" : \"zero\");\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0002f] in <4481af4be50b423fb20b9d04565edbac>:0 \n  at
    Problem.Main (System.String[] args) [0x0001b] in <4481af4be50b423fb20b9d04565edbac>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0002f] in <4481af4be50b423fb20b9d04565edbac>:0 \n  at
    Problem.Main (System.String[] args) [0x0001b] in <4481af4be50b423fb20b9d04565edbac>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       HashSet<String> seen = new HashSet<String>();\n        foreach (string
    n in numbers.Split(' ').OrderBy(s => s))\n        {\n            if (seen.Contains(n))
    continue;\n            seen.Add(n);\n            Console.WriteLine(n);\n        }\n
    \       Console.WriteLine(numbers.Split(' ').OrderBy(s => s).Aggregate((s, n)
    => s + \" \" + n));\n        Console.ReadLine();\n        return numbers.Split('
    ').OrderBy(s => s).Aggregate((s, n) => s + \" \" + n);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01f89ea2b7894a15855b68e9d9e94e6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01f89ea2b7894a15855b68e9d9e94e6a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: '


    three

    three

    five

    nine

    three

    five nine three

    eight

    five

    four

    nine

    seven

    zero

    eight five four nine seven zero

    five

    four

    one

    six

    three

    two

    zero

    five four one six three two zero

    '
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = \"\";\n\n        string numberText = numbers;\n\n
    \       string[] numberWords = numberText.Split(new string[] { \" \" }, StringSplitOptions.RemoveEmptyEntries);\n\n
    \       int[] sortedNumberWords = new int[numberWords.Length];\n\n        int
    index = 0;\n\n        foreach (string numberWord in numberWords) {\n            int
    parsedNumber = int.Parse(numberWord);\n            sortedNumberWords[index] =
    parsedNumber;\n            index++;\n        }\n\n        Array.Sort(sortedNumberWords);\n\n
    \       foreach (int sortedNumberWord in sortedNumberWords) {\n            sortedNumbers
    = sortedNumbers + \" \";\n            sortedNumbers = sortedNumbers + sortedNumberWord.ToString();\n
    \       }\n\n        sortedNumbers = sortedNumbers.Trim();\n\n        return sortedNumbers;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0003c] in <3103dac7575943ab9e15fded555702de>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <3103dac7575943ab9e15fded555702de>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0003c] in <3103dac7575943ab9e15fded555702de>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <3103dac7575943ab9e15fded555702de>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       ArrayList arr=new ArrayList();\n        foreach (string s in numbers.Split('
    ')) {\n            int num=Convert.ToInt32(s);\n            arr.Add(num);\n        }\n
    \       Array.Sort(arr);\n        StringBuilder sb=new StringBuilder();\n        foreach
    (int i in arr) {\n            sb.Append(Convert.ToString(i));\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ws75wjk.cs(15,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp6ws75wjk.cs(15,27): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberList;\n        string result = \"\";\n        string[]
    strArray;\n        string[] strArray2;\n        strArray = numbers.Split(\" \");\n
    \       strArray2 = strArray[0].Split(\" \");\n        string[] strArray3 = strArray[0].Split(\"
    \");\n        strArray3[0] = strArray3[0].Replace(\"zero\",\"\");\n        strArray3[1]
    = strArray3[1].Replace(\"one\",\"\");\n        strArray3[2] = strArray3[2].Replace(\"two\",\"\");\n
    \       strArray3[3] = strArray3[3].Replace(\"three\",\"\");\n        strArray3[4]
    = strArray3[4].Replace(\"four\",\"\");\n        strArray3[5] = strArray3[5].Replace(\"five\",\"\");\n
    \       strArray3[6] = strArray3[6].Replace(\"six\",\"\");\n        strArray3[7]
    = strArray3[7].Replace(\"seven\",\"\");\n        strArray3[8] = strArray3[8].Replace(\"eight\",\"\");\n
    \       strArray3[9] = strArray3[9].Replace(\"nine\",\"\");\n        numberList
    = new List<int>();\n        for (int i = 0; i < strArray2.Length; i++) {\n            numberList.Add(Int32.Parse(strArray2[i]));\n
    \       }\n        numberList.Sort(Compare);\n        foreach (int number in numberList)
    {\n            result = result + \" \" + number.ToString();\n        }\n        if
    (strArray.Length > 1) {\n            strArray = strArray[1].Split(\" \");\n            strArray2
    = strArray[0].Split(\" \");\n            strArray3[0] = strArray3[0].Replace(\"zero\",\"\");\n
    \           strArray3[1] = strArray3[1].Replace(\"one\",\"\");\n            strArray3[2]
    = strArray3[2].Replace(\"two\",\"\");\n            strArray3[3] = strArray3[3].Replace(\"three\",\"\");\n
    \           strArray3[4] = strArray3[4].Replace(\"four\",\"\");\n            strArray3[5]
    = strArray3[5].Replace(\"five\",\"\");\n            strArray3[6] = strArray3[6].Replace(\"six\",\"\");\n
    \           strArray3[7] = strArray3[7].Replace(\"seven\",\"\");\n            strArray3[8]
    = strArray3[8].Replace(\"eight\",\"\");\n            strArray3[9] = strArray3[9].Replace(\"nine\",\"\");\n
    \           for (int i = 0; i < strArray2.Length; i++) {\n                numberList.Add(Int32.Parse(strArray2[i]));\n
    \           }\n            numberList.Sort(Compare);\n            foreach (int
    number in numberList) {\n                result = result + \" \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeuc1wv5s.cs(58,35): error CS1010: Newline in constant

    /tmp/tmpeuc1wv5s.cs(58,37): error CS1002: ; expected

    /tmp/tmpeuc1wv5s.cs(60,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpeuc1wv5s.cs(68,2): error CS1513: } expected

    '
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == \"\") return \"\";\n        var numberList = numbers.Split(new
    char[]{' '}, StringSplitOptions.RemoveEmptyEntries);\n        var sortedNumberList
    = new List<string>();\n\n        if (numberList.Length <= 1 || numberList[0] !=
    \"zero\") {\n            sortedNumberList.Add(\"zero\");\n            numberList.RemoveAt(0);\n
    \       }\n\n        for (var i = numberList.Length - 1; i >= 0; i--) {\n            var
    number = Convert.ToInt32(numberList[i]);\n            if (number > 9) {\n                throw
    new InvalidOperationException(\"Invalid input\");\n            }\n            var
    digit = number % 10;\n            sortedNumberList.Add(digit.ToString());\n            number
    /= 10;\n        }\n        sortedNumberList.Reverse();\n\n        return String.Join(\"
    \", sortedNumberList);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5gjjg3hr.cs(21,24): error CS1061: ''string[]'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''string[]'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       HashSet<string> numberSet = new HashSet<string>();\n        HashSet<string>
    sortedSet = new HashSet<string>();\n        foreach (string num in numbers.Split(new
    char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)) {\n            if (int.TryParse(num,
    out int n) && n < 10) {\n                numberSet.Add(num);\n            } else
    {\n                throw new ArgumentException(\"Invalid Number\");\n            }\n
    \       }\n\n        foreach (string num in numberSet) {\n            sortedSet.Add(num);\n
    \       }\n        foreach (string num in sortedSet) {\n            numberSet.Remove(num);\n
    \           sortedSet.Remove(num);\n            numberSet.Add(num);\n        }\n
    \       return string.Join(\" \", numberSet);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid Number\n  at
    Problem.SortNumbers (System.String numbers) [0x00053] in <a5670de127944b86a8f7040ca009aed0>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <a5670de127944b86a8f7040ca009aed0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid Number\n
    \ at Problem.SortNumbers (System.String numbers) [0x00053] in <a5670de127944b86a8f7040ca009aed0>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <a5670de127944b86a8f7040ca009aed0>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null)\n            throw new ArgumentNullException(\"numbers\",
    \"numbers is null\");\n        if (numbers.Length < 1)\n            throw new
    ArgumentOutOfRangeException(\"numbers\", \"numbers is empty\");\n        if (numbers.IndexOf('
    ') >= 0)\n            throw new ArgumentException(\"numbers\", \"numbers can not
    contain spaces\");\n\n        // Use Linq to split on spaces, then use ToArray
    to convert to an array.\n        int[] arr = numbers.Split(' ').Select(n => int.Parse(n)).ToArray();\n\n
    \       Array.Sort(arr);\n\n        return string.Join(\" \", arr);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: numbers is
    empty\nParameter name: numbers\n  at Problem.SortNumbers (System.String numbers)
    [0x00026] in <70a2b953320b4ae4bfb3c5e7c998d2a0>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <70a2b953320b4ae4bfb3c5e7c998d2a0>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: numbers is empty\nParameter name:
    numbers\n  at Problem.SortNumbers (System.String numbers) [0x00026] in <70a2b953320b4ae4bfb3c5e7c998d2a0>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <70a2b953320b4ae4bfb3c5e7c998d2a0>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null)\n            throw new ArgumentNullException(\"numbers\");\n\n
    \       string newNumbers = numbers;\n        char[] letters = newNumbers.ToCharArray();\n
    \       Array.Sort(letters);\n        return string.Join(\" \", letters);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7eb4909b74b84174b33be56304c76976>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7eb4909b74b84174b33be56304c76976>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       Console.Write(\"Input: \");\n        string input = Console.ReadLine();\n
    \       Console.Write(\"\\nOutput: \");\n        // Sort from smallest to largest\n
    \       return input.Split().OrderBy(x => x).Aggregate((first, second) => (first
    + \" \" + second));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.SortNumbers (System.String numbers)
    [0x00023] in <be444d176c0945988444ffc2bc591c2f>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <be444d176c0945988444ffc2bc591c2f>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.NullReferenceException: Object reference not set to an instance
    of an object\n  at Problem.SortNumbers (System.String numbers) [0x00023] in <be444d176c0945988444ffc2bc591c2f>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <be444d176c0945988444ffc2bc591c2f>:0
    \n"
  stdout: "Input: \nOutput: "
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var list = numbers.Split(' ')\n            .Select(x => Convert.ToInt32(x)).ToList();\n
    \       list.Sort();\n        string result = string.Join(\" \", list);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String x) [0x00000] in <40b5360024794b2b97779c3d8afe8555>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList
    () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <40b5360024794b2b97779c3d8afe8555>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <40b5360024794b2b97779c3d8afe8555>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String x) [0x00000] in <40b5360024794b2b97779c3d8afe8555>:0 \n "
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var result = \"\";\n        foreach (string number in numbers.Split('
    ')) result = result.Replace(number, number.Length > 2 ? number + \".\" : number);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: String cannot be of zero
    length.\nParameter name: oldValue\n  at System.String.Replace (System.String oldValue,
    System.String newValue) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at
    Problem.SortNumbers (System.String numbers) [0x00033] in <d3b280eb60024275b3680df859da75b1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d3b280eb60024275b3680df859da75b1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: String cannot be
    of zero length.\nParameter name: oldValue\n  at System.String.Replace (System.String
    oldValue, System.String newValue) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00033] in <d3b280eb60024275b3680df859da75b1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d3b280eb60024275b3680df859da75b1>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberList = numbers.Split(' ');\n        int[] numberListAsInts
    = Array.ConvertAll(numberList, int.Parse);\n        Array.Sort(numberListAsInts);\n
    \       string numberListAsStrings = numberList.Select(x => x.ToString()).Aggregate((a,
    b) => a + \" \" + b).Trim();\n        return numberListAsStrings;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Array.ConvertAll[TInput,TOutput] (TInput[] array, System.Converter`2[TInput,TOutput]
    converter) [0x00029] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0000b] in <3619ed48b21f4017a5366e2d0af3b10c>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <3619ed48b21f4017a5366e2d0af3b10c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Array.ConvertAll[TInput,TOutput] (TInput[] array, System.Converter`2[TInput,TOutput]
    converter) [0x00029] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0000b] in <3619ed48b21f4017a5366e2d0af3b10c>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <3619ed48b21f4017a5366e2d0af3b10c>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var list = numbers.Split(' ');\n\n        Debug.Assert(list.Count() ==
    8);\n\n        List<int> nums = new List<int>();\n        for (int i = 0; i <
    8; i++)\n            nums.Add(0);\n\n        for (int i = 0; i < list.Count();
    i++)\n            nums[int.Parse(list[i])] = 1;\n\n        int[] sorted = nums.OrderBy(i
    => i).ToArray();\n\n        return string.Join(\" \", sorted.Select(i => i.ToString()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.SortNumbers (System.String numbers) [0x00000] in <5fd2fe4edb8a42f983db41f7af9224ac>:0
    \n  at Problem.Main (System.String[] args) [0x00000] in <5fd2fe4edb8a42f983db41f7af9224ac>:0
    \n\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0003f] in <5fd2fe4edb8a42f983db41f7af9224ac>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5fd2fe4edb8a42f983db41f7af9224ac>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    s"
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var sorted = new List<int>();\n        foreach(var n in numbers.Split('
    ')){\n            int num;\n            if(Int32.TryParse(n, out num)){\n                sorted.Add(num);\n
    \           }\n            else\n            {\n                // TODO: Handle
    invalid input here\n                throw new Exception(\"Invalid input\");\n
    \           }\n        }\n        sorted.Sort();\n        return string.Join(\"
    \", sorted.Select(a=>a.ToString()));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Exception: Invalid input\n  at Problem.SortNumbers
    (System.String numbers) [0x00037] in <7e0b8cf4d2bc4bb184b3feedc51284b8>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <7e0b8cf4d2bc4bb184b3feedc51284b8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Invalid input\n  at Problem.SortNumbers
    (System.String numbers) [0x00037] in <7e0b8cf4d2bc4bb184b3feedc51284b8>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <7e0b8cf4d2bc4bb184b3feedc51284b8>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       StringBuilder builder = new StringBuilder();\n        foreach (string
    line in numbers.Split(' '))\n            builder.AppendLine(SortNumbers(line));\n
    \       return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> list = new List<int>();\n        foreach (string number in numbers.Split('
    ')) list.Add(Convert.ToInt32(number));\n        list.Sort();\n        StringBuilder
    builder = new StringBuilder();\n        foreach (int value in list) {\n            builder.Append(value.ToString());\n
    \           builder.Append(\" \");\n        }\n        builder.Remove(builder.Length
    - 1, 1);\n        return builder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0001b] in <1f571d5a3451473a8c2deec776a8e9ef>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <1f571d5a3451473a8c2deec776a8e9ef>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0001b] in <1f571d5a3451473a8c2deec776a8e9ef>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <1f571d5a3451473a8c2deec776a8e9ef>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Extract the number list from the string and convert to int array.\n
    \       int[] numberArray = numbers.Split(' ').Select(int.Parse).ToArray();\n
    \       Array.Sort(numberArray);\n\n        // Create the sorted string with numbers
    in sorted order.\n        StringBuilder sortedNumber = new StringBuilder();\n
    \       for (int i = 0; i < numberArray.Length; i++) {\n            sortedNumber.Append(numberArray[i].ToString());\n
    \           if (i < numberArray.Length - 1)\n                sortedNumber.Append(\"
    \");\n        }\n        return sortedNumber.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0001b] in <81fb17f40cc149a2b5668be73ee909a9>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <81fb17f40cc149a2b5668be73ee909a9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0001b] in <81fb17f40cc149a2b5668be73ee909a9>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <81fb17f40cc149a2b5668be73ee909a9>:0
    \n"
  stdout: ''
  timestamp: 1659976389
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> values = new List<int>();\n        foreach (string number in
    numbers.Split(' ')) values.Add(Convert.ToInt32(number));\n        values.Sort();\n
    \       return string.Join(\" \", values.Select(n => n.ToString()));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0001a] in <f9cb2dc211e54f2782932506dd09c02b>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <f9cb2dc211e54f2782932506dd09c02b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0001a] in <f9cb2dc211e54f2782932506dd09c02b>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <f9cb2dc211e54f2782932506dd09c02b>:0
    \n"
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int[] nums = strings.Split(\" \").Select(a => Convert.ToInt32(a)).ToArray();\n
    \       Array.Sort(nums);\n        return strings.Join(\" \", nums);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplye0z79s.cs(15,22): error CS0103: The name ''strings'' does not exist
    in the current context

    /tmp/tmplye0z79s.cs(17,16): error CS0103: The name ''strings'' does not exist
    in the current context

    '
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int[] nums = numbers.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(n
    => Convert.ToInt32(n)).ToArray();\n        Array.Sort(nums);\n        return string.Join(\"
    \", nums);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <54855a8f216f4c8a84427edb098c4cd5>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray
    () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00037] in <54855a8f216f4c8a84427edb098c4cd5>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <54855a8f216f4c8a84427edb098c4cd5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <54855a8f216f4c8a84427edb098c4cd5>:0 "
  stdout: ''
  timestamp: 1659976390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> nums = new List<int>();\n        foreach (var x in numbers.Split('
    ')) {\n            int n;\n            if (int.TryParse(x, out n))\n                nums.Add(n);\n
    \       }\n        nums.Sort();\n        StringBuilder sb = new StringBuilder();\n
    \       foreach (var x in nums) {\n            sb.Append(x);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <740a6a632a944e26999c50e751b9eb87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <740a6a632a944e26999c50e751b9eb87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = \"\";\n        List<string> intList = new List<string>();\n
    \       string[] parts = numbers.Split(new char[] {' '});\n        foreach (string
    part in parts) {\n            int num;\n            if (int.TryParse(part, out
    num)) {\n                intList.Add(num.ToString());\n            }\n        }\n
    \       int[] ints = new int[intList.Count];\n        for (int i = 0; i < intList.Count;
    i++) {\n            ints[i] = Convert.ToInt32(intList[i]);\n        }\n        Array.Sort(ints);\n
    \       for (int i = 0; i < ints.Length; i++) {\n            sortedNumbers +=
    intList[i];\n            if (i < ints.Length - 1) sortedNumbers += \" \";\n        }\n
    \       return sortedNumbers;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c99b4563d43a471181ffddda281fe08f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c99b4563d43a471181ffddda281fe08f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberList = numbers.Split(' ');\n        string[] sortedNumberList
    = new string[numberList.Length];\n\n        // Sort smallest to largest\n        Array.Sort(numberList);\n
    \       for (int i = 0; i < numberList.Length; i++)\n            sortedNumberList[i]
    = numberList[i];\n\n        // Return sorted numbers\n        return String.Join(\"
    \", sortedNumberList);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8dcdc2e4d0848e7890aa7d7a06c61d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8dcdc2e4d0848e7890aa7d7a06c61d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       Debug.Assert(numbers != null);\n        Debug.Assert(numbers.Length >
    0);\n        Debug.Assert(numbers.Length <= 9);\n        Debug.Assert(numbers.Contains(\"
    \"));\n        List<int> arr = new List<int>(9);\n        string[] strArr = numbers.Split(new
    char[] { ' ' });\n        foreach (string str in strArr) {\n            int[]
    nums = str.Split().Select(s => int.Parse(s)).ToArray();\n            for (int
    i = 0; i < nums.Length; i++) {\n                arr[i] = Math.Min(arr[i], nums[i]);\n
    \           }\n        }\n        for (int i = arr.Count - 1; i >= 0; i--) {\n
    \           arr[i] = Math.Max(arr[i], arr[i + 1]);\n        }\n        return
    string.Join(\" \", arr.Select(n => n.ToString()).OrderBy(n => n).ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.SortNumbers (System.String numbers) [0x00000] in <381000bda78d413d98fe119eab783de7>:0
    \n  at Problem.Main (System.String[] args) [0x00000] in <381000bda78d413d98fe119eab783de7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.SortNumbers (System.String numbers) [0x00000] in <381000bda78d413d98fe119eab783de7>:0
    \n  at Problem.Main (System.String[] args) [0x00000] in <381000bda78d413d98fe119eab783de7>:0
    \n\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (Syste"
  stdout: ''
  timestamp: 1659976390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] sortedNumbers = numbers.Split(' ')\n            .Select(x =>
    x.Trim())\n            .OrderBy(n => n)\n            .ToArray();\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < sortedNumbers.Length; i++)
    {\n            if (i == 0)\n                sb.Append(sortedNumbers[i]);\n            else
    if (sortedNumbers[i] != sortedNumbers[i - 1] + sortedNumbers[i - 1])\n                sb.Append(sortedNumbers[i]
    + \" \");\n        }\n        return sb.ToString().Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c52afad5ad7e49858c3f91874673560a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c52afad5ad7e49858c3f91874673560a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Your code here\n        return numbers;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0282f3583f34ed19ba037631dcbc94f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f0282f3583f34ed19ba037631dcbc94f>:0
    \n"
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int[] digits = numbers.Split(' ').Select(n => Convert.ToInt32(n)).ToArray();\n
    \       Array.Sort(digits);\n        return numbers.Replace(' ', string.Empty).Replace(\"zero\",
    \"one\").Replace(\"one\", \"two\").Replace(\"two\", \"three\").Replace(\"three\",
    \"four\").Replace(\"four\", \"five\").Replace(\"five\", \"six\").Replace(\"six\",
    \"seven\").Replace(\"seven\", \"eight\").Replace(\"eight\", \"nine\").Replace(\"nine\",
    \"zero\").Replace(\"zero\", \"one\").Replace(\"one\", \"two\").Replace(\"two\",
    \"three\").Replace(\"three\", \"four\").Replace(\"four\", \"five\").Replace(\"five\",
    \"six\").Replace(\"six\", \"seven\").Replace(\"seven\", \"eight\").Replace(\"eight\",
    \"nine\").Replace(\"nine\", \"zero\");\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc4ujfxsi.cs(17,37): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = \"\";\n        string sorted = \"\";\n        string
    currentNumber;\n        List<string> allNumbers = new List<string>();\n        foreach
    (string number in numbers.Split(' '))\n            allNumbers.Add(number);\n        allNumbers.Sort();\n
    \       foreach (string number in allNumbers)\n            sortedNumbers += number;\n
    \       currentNumber = sortedNumbers.Substring(0, 1);\n        while (sortedNumbers.Length
    > 1) {\n            sortedNumbers = sortedNumbers.Substring(1, sortedNumbers.Length
    - 1);\n            currentNumber = sortedNumbers.Substring(0, 1);\n            sorted
    = sorted + currentNumber;\n            foreach (string number in allNumbers)\n
    \               if (number > currentNumber)\n                    sorted = sorted
    + \" \" + number;\n        }\n        return sorted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpps_1eu2q.cs(30,21): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659976390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == \"\") {\n            return \"\";\n        }\n        string[]
    strs = numbers.Split(new char[] { ' ' });\n        if (strs.Length < 2) {\n            return
    numbers;\n        }\n        Array.Sort(strs);\n        foreach (string str in
    strs) {\n            Console.Write(str);\n        }\n        return numbers;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8c7fb4bc833466fabb94b65ecc7bd2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8c7fb4bc833466fabb94b65ecc7bd2f>:0
    \n"
  stdout: fiveninethreeeightfivefourninesevenzerofivefouronesixthreetwozero
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null) {\n            return null;\n        }\n        if
    (numbers.Length == 0) {\n            return \"\";\n        }\n        var numberList
    = numbers.Split(' ');\n        if (numberList.All(x => string.Equals(x, \"zero\",
    StringComparison.OrdinalIgnoreCase))) {\n            return numbers.Replace(\"zero
    \", \"zero \");\n        }\n        var orderedNumbers = new List<string>();\n
    \       int maxIndex = numberList.Count() - 1;\n        for (int i = 0; i < numberList.Count();
    i++) {\n            string number = numberList[i].Trim();\n            if (!string.Equals(number,
    \"\", StringComparison.OrdinalIgnoreCase)) {\n                orderedNumbers.Add(number);\n
    \           }\n        }\n        StringBuilder result = new StringBuilder();\n
    \       for (int i = 1; i < orderedNumbers.Count(); i++) {\n            string
    smallest = orderedNumbers[i - 1];\n            string largest = orderedNumbers[i];\n
    \           if (string.Equals(smallest, largest, StringComparison.OrdinalIgnoreCase))
    {\n                continue;\n            }\n            bool smallestBigger =
    false;\n            bool largestSmaller = false;\n            foreach (string
    n in orderedNumbers) {\n                if (string.Equals(n, smallest, StringComparison.OrdinalIgnoreCase))
    {\n                    if (smallestBigger) {\n                        break;\n
    \                   }\n                    if (string.Equals(n, largest, StringComparison.OrdinalIgnoreCase))
    {\n                        largestSmaller = true;\n                        break;\n
    \                   }\n                    if (string.Equals(n, largest, StringComparison.OrdinalIgnoreCase)
    && smallestBigger) {\n                        largestSmaller = true;\n                        smallestBigger
    = false;\n                        break;\n                    }\n                    largestSmaller
    = true;\n                    smallestBigger = true;\n                }\n                if
    (string.Equals(n, largest, StringComparison.OrdinalIgnoreCase)) {\n                    if
    (largestSmaller) {\n                        break;\n                    }\n                    if
    (string.Equals(n, smallest, StringComparison.OrdinalIgnoreCase)) {\n                        smallestBigger
    = true;\n                        break;\n                    }\n                    if
    (string.Equals(n, smallest, StringComparison.OrdinalIgnoreCase) && largestSmaller)
    {\n                        largestSmaller = true;\n                        smallestBigger
    = false;\n                        break;\n                    }\n                    largestSmaller
    = true;\n                    smallestBigger = true;\n                }\n            }\n
    \           if (largestSmaller && smallestBigger) {\n                result.Append(largest);\n
    \           } else if (largestSmaller) {\n                result.Append(smallest);\n
    \           } else if (smallestBigger) {\n                result.Append(smallest);\n
    \               result.Append(largest);\n            } else {\n                result.Append(largest);\n
    \           }\n            result.Append(\" \");\n        }\n        return result.ToString().Trim\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjqu56ilu.cs(88,38): error CS1002: ; expected

    '
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int zero = 0;\n        int one = 1;\n        int two = 2;\n        int
    three = 3;\n        int four = 4;\n        int five = 5;\n        int six = 6;\n
    \       int seven = 7;\n        int eight = 8;\n        int nine = 9;\n        ArrayList
    al = new ArrayList();\n        string[] tokens = numbers.Split(' ');\n        int
    length = tokens.Length;\n        foreach (string s in tokens)\n            al.Add(Convert.ToInt32(s)
    + zero);\n        Array.Sort(al);\n        string result = \"\";\n        for
    (int i = 0; i < length; i++)\n            result += ((i + 1) + \" \" + tokens[i]).Replace(\"
    \ \", \" \");\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1_hs1ep6.cs(25,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp1_hs1ep6.cs(25,28): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp1_hs1ep6.cs(16,13): warning CS0219: The variable ''one'' is assigned but
    its value is never used

    /tmp/tmp1_hs1ep6.cs(17,13): warning CS0219: The variable ''two'' is assigned but
    its value is never used

    /tmp/tmp1_hs1ep6.cs(18,13): warning CS0219: The variable ''three'' is assigned
    but its value is never used

    /tmp/tmp1_hs1ep6.cs(19,13): warning CS0219: The variable ''four'' is assigned
    but its value is never used

    /tmp/tmp1_hs1ep6.cs(20,13): warning CS0219: The variable ''five'' is assigned
    but its value is never used

    /tmp/tmp1_hs1ep6.cs(21,13): warning CS0219: The variable ''six'' is assigned but
    its value is never used

    /tmp/tmp1_hs1ep6.cs(22,13): warning CS0219: The variable ''seven'' is assigned
    but its value is never used

    /tmp/tmp1_hs1ep6.cs(23,13): warning CS0219: The variable ''eight'' is assigned
    but its value is never used

    /tmp/tmp1_hs1ep6.cs(24,13): warning CS0219: The variable ''nine'' is assigned
    but its value is never used

    '
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int[] numberArray = numbers.Split(null).Select(Int32.Parse).ToArray();\n
    \       Array.Sort(numberArray);\n        return string.Join(null, numberArray);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00019] in <9bc4135515724abcb69d261fa5b07fbf>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <9bc4135515724abcb69d261fa5b07fbf>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00019] in <9bc4135515724abcb69d261fa5b07fbf>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <9bc4135515724abcb69d261fa5b07fbf>:0
    \n"
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int[] arrNumbers = numbers.Split(' ').Select(Int32.Parse).ToArray();\n
    \       Array.Sort(arrNumbers);\n        string result = \"\";\n        for (int
    i = 0; i < arrNumbers.Length; i++) {\n            result += \" \" + arrNumbers[i];\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0001b] in <d80f8a108cd849bf93aadb94c603caa7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d80f8a108cd849bf93aadb94c603caa7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0001b] in <d80f8a108cd849bf93aadb94c603caa7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d80f8a108cd849bf93aadb94c603caa7>:0
    \n"
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int[] numberArray = numbers.Split(' ').Select(x => int.Parse(x)).ToArray();\n
    \       Array.Sort(numberArray);\n        string sortedNumbers = string.Join(\"
    \", numberArray);\n        return sortedNumbers;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <e4bf6277ad0043f38051d3d6c88d164d>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <e4bf6277ad0043f38051d3d6c88d164d>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <e4bf6277ad0043f38051d3d6c88d164d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <e4bf6277ad0043f38051d3d6c88d164d>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6"
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> numbersList = new List<string>();\n        string[] numberList
    = numbers.Split(' ');\n\n        int maxIndex = numberList.Length - 1;\n\n        foreach
    (string number in numberList) {\n            int indexOfMax = numberList.IndexOf(number);\n
    \           if (indexOfMax < maxIndex) {\n                numbers[indexOfMax]
    = numbers[indexOfMax + 1];\n                numberList.RemoveAt(indexOfMax + 1);\n
    \           }\n        }\n\n        for (int i = 0; i < maxIndex; i++) {\n            numbersList.Add(numberList[i]);\n
    \       }\n        return numbersList.Aggregate((x, y) => x + \" \" + y);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5vnv9hyk.cs(21,41): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp5vnv9hyk.cs(23,17): error CS0200: Property or indexer ''string.this[int]''
    cannot be assigned to -- it is read only

    /tmp/tmp5vnv9hyk.cs(24,28): error CS1061: ''string[]'' does not contain a definition
    for ''RemoveAt'' and no accessible extension method ''RemoveAt'' accepting a first
    argument of type ''string[]'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Find the longest length\n        string maxLength = \"\";\n        foreach
    (string s in numbers.Split(' ')) {\n            if (s.Length > maxLength.Length)\n
    \               maxLength = s;\n        }\n\n        string newString = \"\";\n
    \       List<string> nums = new List<string>();\n\n        // Find the positions
    of the numbers in numbers, ignoring zero\n        for (int i = 0; i < numbers.Length;
    i++) {\n            if (numbers[i] == '0')\n                nums.Add(i);\n        }\n\n
    \       // Sort the numbers from the smallest to largest\n        for (int i =
    0; i < nums.Count; i++) {\n            string thisNum = numbers.Substring(nums[i],
    maxLength.Length);\n            int thisInt = 0;\n            bool validNum =
    false;\n\n            // If the number doesn't start with zero or one,\n            //
    the number is not valid.\n            if (nums.StartsWith(\"zero or one\")) {\n
    \               validNum = true;\n            }\n            else {\n                try
    {\n                    thisInt = Convert.ToInt32(thisNum);\n                    validNum
    = true;\n                }\n                catch (FormatException) {\n                    validNum
    = false;\n                }\n            }\n\n            if (!validNum) {\n                try
    {\n                    // If it's a string, just use it\n                    thisInt
    = Convert.ToInt32(thisNum);\n                }\n                catch (FormatException)
    {\n                    Debug.Assert(false, \"This shouldn't happen!\");\n                }\n
    \           }\n\n            // Add the number to the list\n            newString
    += \" \" + thisInt;\n            nums.Remove(nums[i]);\n        }\n\n        //
    Now sort the numbers\n        for (int i = 0; i < nums.Count; i++) {\n            newString
    += \" \" + nums[i];\n        }\n\n        // Recreate the string with the sorted
    numbers\n        return newString.TrimEnd(' ');\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvpg9kq_j.cs(28,26): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpvpg9kq_j.cs(33,48): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpvpg9kq_j.cs(39,22): error CS1061: ''List<string>'' does not contain a
    definition for ''StartsWith'' and no accessible extension method ''StartsWith''
    accepting a first argument of type ''List<string>'' could be found (are you missing
    a using directive or an assembly reference?)

    '
  timestamp: 1659976390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] numArray = numbers.ToCharArray();\n        Array.Sort(numArray);\n
    \       return new string(numArray);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02a60ad1cdbc4d408a2af776bb38df60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02a60ad1cdbc4d408a2af776bb38df60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var s = \"\";\n        foreach (var n in numbers.Split(' ').OrderByDescending(x=>x))
    {\n            var d = Convert.ToInt32(n);\n            if (d == 0) {\n                s
    += \"zero\";\n                continue;\n            }\n            if (d > 9)
    {\n                s += \"nine\";\n                continue;\n            }\n
    \           if (d > 8) {\n                s += \"eight\";\n                continue;\n
    \           }\n            if (d > 7) {\n                s += \"seven\";\n                continue;\n
    \           }\n            if (d > 6) {\n                s += \"six\";\n                continue;\n
    \           }\n            if (d > 5) {\n                s += \"five\";\n                continue;\n
    \           }\n            if (d > 4) {\n                s += \"four\";\n                continue;\n
    \           }\n            if (d > 3) {\n                s += \"three\";\n                continue;\n
    \           }\n            if (d > 2) {\n                s += \"two\";\n                continue;\n
    \           }\n            if (d > 1) {\n                s += \"one\";\n                continue;\n
    \           }\n            if (d == 1) {\n                s += \"one\";\n                continue;\n
    \           }\n        }\n        return s;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00048] in <ca4285c5fe0a441999c6356f34d2bb3f>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <ca4285c5fe0a441999c6356f34d2bb3f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00048] in <ca4285c5fe0a441999c6356f34d2bb3f>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <ca4285c5fe0a441999c6356f34d2bb3f>:0
    \n"
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null ||\n            numbers.Trim() == \"\") {\n            return
    null;\n        }\n        int[] nums = new int[10];\n        char[] separators
    = new char[] { ' ' };\n        string[] splits = numbers.Split(separators);\n
    \       for (int i = 0; i < splits.Length; i++) {\n            int tmp = Convert.ToInt32(splits[i].Trim());\n
    \           for (int j = 0; j < nums.Length; j++) {\n                if (tmp <
    nums[j]) {\n                    for (int k = 0; k < nums.Length; k++) {\n                        if
    (nums[k] > tmp) {\n                            nums[k + 1] = nums[k];\n                            nums[k]
    = tmp;\n                        }\n                    }\n                }\n
    \           }\n        }\n        StringBuilder builder = new StringBuilder();\n
    \       for (int i = 0; i < nums.Length; i++) {\n            builder.Append((char)(nums[i]
    + '0'));\n        }\n        return builder.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <262c8244fd47451d877c6c3ca94073b7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <262c8244fd47451d877c6c3ca94073b7>:0
    \n"
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string input = numbers;\n        string[] choices = { \"zero\", \"one\",
    \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"
    };\n        string[] inputParts = input.Split(' ');\n        Array.Sort(inputParts);\n
    \       StringBuilder output = new StringBuilder();\n        foreach (string part
    in inputParts) {\n            output.Append(choices[int.Parse(part)]);\n        }\n
    \       return output.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00084] in <5974a8396bd54083bbb6ed59575b29aa>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5974a8396bd54083bbb6ed59575b29aa>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00084] in <5974a8396bd54083bbb6ed59575b29aa>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <5974a8396bd54083bbb6ed59575b29aa>:0
    \n"
  stdout: ''
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberArray = numbers.Split(' ');\n\n        var result = new
    List<int>();\n        for (int i = 0; i < numberArray.Length; i++)\n            result.Add((int)NumberFormatInfo.InvariantInfo.ToInt32(numberArray[i]));\n\n
    \       return string.Join(string.Empty, result.OrderBy(i => i).Select(i => i.ToString()));\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7qt4g0fg.cs(19,29): error CS0103: The name ''NumberFormatInfo'' does not
    exist in the current context

    '
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> sortedList = new List<string>();\n        foreach (string
    s in numbers) {\n            int num = Convert.ToInt32(s);\n            if (num
    >= 1 && num <= 9) {\n                sortedList.Add(s.ToString());\n            }\n
    \       }\n        sortedList.Sort();\n        return string.Join(\" \", sortedList);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb05iy_ks.cs(16,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numbersList = new List<int>();\n        foreach (string number
    in numbers.Split(' '))\n        {\n            int number = Int32.Parse(number);\n
    \           numbersList.Add(number);\n        }\n        numbersList.Sort();\n
    \       string newString = new string();\n        for (int i = 0; i < numbersList.Count;
    i++)\n        {\n            newString += numbersList[i] + \" \";\n        }\n
    \       return newString;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe2g_8r3b.cs(18,17): error CS0136: A local or parameter named ''number''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpe2g_8r3b.cs(18,38): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpe2g_8r3b.cs(22,32): error CS1729: ''string'' does not contain a constructor
    that takes 0 arguments

    /tmp/tmpe2g_8r3b.cs(18,38): error CS0165: Use of unassigned local variable ''number''

    '
  timestamp: 1659976390
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = \"\";\n        if (numbers == null) return result;\n        char[]
    chars = numbers.ToCharArray();\n        Array.Sort(chars);\n        for (int i
    = 0; i < numbers.Length; i++) {\n            result += chars[i];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fd047b7441845128eda0330fc907503>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8fd047b7441845128eda0330fc907503>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberArray = numbers.Split(' ');\n        int min = 0;\n        int
    max = numberArray.Length;\n        if (max < 1) return \"\";\n        while(true)
    {\n            int index = min + max/2;\n            if (index >= numberArray.Length)
    break;\n            string temp = numberArray[index];\n            numberArray[index]
    = numberArray[max];\n            numberArray[max] = temp;\n            if (index
    == 0) return string.Join(\" \", numberArray);\n            if (numberArray[index]
    < numberArray[index - 1]) min = index + 1;\n            else max = index - 1;\n
    \       }\n        return string.Join(\" \", numberArray);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgcpwvfi3.cs(26,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''string'' and ''string''

    '
  timestamp: 1659976390
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> numberList = numbers.Split(' ')\n            .Select(x =>
    x.Trim())\n            .ToList();\n\n        List<int> intList = numberList\n
    \           .Select(x => Convert.ToInt32(x))\n            .OrderBy(x => x)\n            .ToList();\n\n
    \       StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i <
    intList.Count; i++)\n        {\n            if (i < intList.Count - 1)\n                sb.Append(intList[i].ToString()
    + \" \");\n            sb.Append(intList[i].ToString());\n        }\n\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_1
    (System.String x) [0x00000] in <c8b7872e7dda415a8ddad1f61838e4e3>:0 \n  at System.Linq.Enumerable+SelectListIterator`2[TSource,TResult].ToArray
    () [0x00034] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].ToList () [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0007d] in <c8b7872e7dda415a8ddad1f61838e4e3>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <c8b7872e7dda415a8ddad1f61838e4e3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00"
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numberWords = numbers.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\n
    \       var sortedWords = numberWords.Select(num => new { \n            Value
    = int.Parse(num), \n            Letter = num.Substring(0, 1).ToUpperInvariant()
    }).OrderBy(num => num.Value);\n        var sb = new StringBuilder();\n        foreach
    (var number in sortedWords)\n            sb.Append(number.Letter);\n\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String num) [0x00000] in <0636048e59744f8d88b76a008282aad0>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext
    () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00084] in <0636048e59744f8d88b76a008282aad0>:0 \n  at
    Problem.Main (System.String[] args) [0x0001b] in <0636048e59744f8d88b76a008282aad0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String num) [0x00000] in <0636048e59744f8d88b76a008282aad0>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at Sy"
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var ordered = new Dictionary<string, int>();\n        int i, j, t;\n        var
    results = new StringBuilder();\n        foreach (string number in numbers.Split('
    '))\n        {\n            if (number.Length > 0)\n            {\n                i
    = ordered[number];\n                if (!ordered.ContainsKey(number))\n                {\n
    \                   ordered[number] = i;\n                    results.Append(number);\n
    \               }\n                else\n                {\n                    j
    = i;\n                    while ((j > 0) && (ordered[j - 1] > i))\n                    {\n
    \                       j--;\n                    }\n                    results.Append(string.Format(\"{0}
    \", j));\n                }\n            }\n        }\n        return results.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp52_2kfz0.cs(31,48): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmp52_2kfz0.cs(16,19): warning CS0168: The variable ''t'' is declared but
    never used

    '
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Split the string into a list of numbers. We use a list to maintain\n
    \       // the original order.\n        var numberList = numbers.Split(new char[]
    { ' ' });\n\n        // Sort the list using the smallest to largest algorithm.\n
    \       Array.Sort(numberList);\n\n        // Convert each number to a string
    and insert into the return string.\n        return String.Join(\" \", numberList.Select(number
    => number.ToString()));\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78f3a9563c3f487388e11acd93853c2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78f3a9563c3f487388e11acd93853c2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberList = new List<int>();\n        for (int i = 0; i < numbers.Length;
    i++) {\n            if (numbers.Substring(i, 1).Equals(' ')) break;\n            int
    number = Convert.ToInt32(numbers.Substring(i, 1));\n            if (number >=
    0 && number <= 9) {\n                numberList.Add(number);\n            }\n
    \       }\n        numberList.Sort();\n        numbers = \"\";\n        int startIndex
    = 0;\n        int endIndex = numberList.Count;\n        for (int i = 0; i < endIndex;
    i++) {\n            if (i == startIndex) numbers += Convert.ToString(numberList[i])
    + \" \";\n            else {\n                int min = i;\n                for
    (int j = i + 1; j < endIndex; j++) {\n                    if (numberList[j] <
    numberList[min]) min = j;\n                }\n                numbers += Convert.ToString(numberList[min])
    + \" \";\n            }\n        }\n        return numbers;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00030] in <7bbbf1cb7afb4b8aa3293698f98d613a>:0 \n  at
    Problem.Main (System.String[] args) [0x0001b] in <7bbbf1cb7afb4b8aa3293698f98d613a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00030] in <7bbbf1cb7afb4b8aa3293698f98d613a>:0 \n  at
    Problem.Main (System.String[] args) [0x0001b] in <7bbbf1cb7afb4b8aa3293698f98d613a>:0
    \n"
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string s = numbers;\n        string[] words = s.Split(' ');\n        foreach
    (string w in words) {\n            long num;\n            if (long.TryParse(w,
    out num)) {\n                string sorted = num.ToString();\n                Array.Sort(sorted);\n
    \               Console.WriteLine(\"{0}\", sorted);\n                words = words.Where(w
    => w != sorted).ToArray();\n            }\n        }\n        return string.Join(\"
    \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppzybtu2w.cs(21,28): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.Array''

    '
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       bool negative;\n        string numberString = \"\";\n        string positiveNumbers
    = \"\";\n        foreach (char c in numbers.ToLower()) {\n            if (c ==
    '-') {\n                negative = true;\n            } else if (c == '+') {\n
    \               negative = false;\n            } else {\n                string
    digit = c.ToString();\n                if (numberString.Contains(digit)) {\n                    numberString
    += digit;\n                } else {\n                    string newNumberString
    = numberString + digit;\n                    if (numberString.Contains(\"100\")
    || numberString.Contains(\"010\") || numberString.Contains(\"001\")) {\n                        positiveNumbers
    += newNumberString;\n                    } else {\n                        numberString
    = newNumberString;\n                    }\n                }\n            }\n
    \       }\n        string sortedNumbers = \"\";\n        bool isZero = false;\n
    \       foreach (char c in numberString) {\n            if (c == '0') {\n                isZero
    = true;\n            } else if (isZero && c == '1') {\n                isZero
    = false;\n            } else {\n                sortedNumbers += c.ToString();\n
    \           }\n        }\n        return positiveNumbers + \"-\" + sortedNumbers;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a728a5a8baea4b70812ee6c4e6b29128>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a728a5a8baea4b70812ee6c4e6b29128>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       numbers = numbers.Replace(\" \", \"\").Replace(\",\", \"\");\n        var
    numbersList = numbers.Split(' ');\n        var numbersString = \"\";\n        foreach
    (var number in numbersList) {\n            var numString = number.Trim();\n            Debug.WriteLine(\"Number:
    \" + numString);\n            var numArray = numString.Select(n => Convert.ToInt32(n)).ToArray();\n
    \           Debug.WriteLine(\"Numbers Array: \" + numArray.GetType().FullName);\n
    \           var sortedNumbers = numArray.OrderBy(n => n);\n            Debug.WriteLine(\"Sorted
    Numbers Array: \" + sortedNumbers.GetType().FullName);\n            numbersString
    += sortedNumbers.First().ToString();\n            Debug.WriteLine(\"Numbers String:
    \" + numbersString);\n        }\n        return numbersString;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Number: \nNumbers Array: System.Int32[]\nSorted Numbers Array: System.Linq.OrderedEnumerable`2[[System.Int32,
    mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Int32,
    mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\n\nUnhandled
    Exception:\nSystem.InvalidOperationException: Sequence contains no elements\n
    \ at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x000ea] in <e12ccb6d26944434a14caee4974ec4f9>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <e12ccb6d26944434a14caee4974ec4f9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x000ea] in <e12ccb6d26944434a14caee4974ec4f9>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <e12ccb6d26944434a14caee4974ec4f9>:0
    \n"
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string output = string.Empty;\n        foreach (string number in numbers.Split('
    ')) {\n            if (number.Length > 0) {\n                Int32 num = Int32.Parse(number);\n
    \               if (num == 0)\n                    output = \"zero\";\n                else
    if (num == 1)\n                    output = \"one\";\n                else if
    (num < 10)\n                    output = number + \"s\";\n                else
    if (num < 100)\n                    output = number + \"es\";\n                else
    if (num < 1000)\n                    output = number + \"s\";\n                else
    if (num < 10000)\n                    output = number + \"es\";\n                else
    if (num < 100000)\n                    output = number + \"s\";\n                else
    if (num < 1000000)\n                    output = number + \"es\";\n                else
    if (num < 10000000)\n                    output = number + \"s\";\n                else
    if (num < 100000000)\n                    output = number + \"es\";\n                else
    if (num < 1000000000)\n                    output = number + \"s\";\n                else
    if (num < 10000000000)\n                    output = number + \"es\";\n                else
    if (num < 100000000000)\n                    output = number + \"s\";\n                else
    if (num < 1000000000000)\n                    output = number + \"es\";\n                else
    if (num < 1000000000000)\n                    output = number + \"s\";\n                else
    if (num < 10000000000000)\n                    output = number + \"es\";\n                else
    if (num < 10000000000000)\n                    output = number + \"s\";\n                else
    if (num < 1000000000000000)\n                    output = number + \"es\";\n                else
    if (num < 1000000000000000)\n                    output = number + \"s\";\n                else
    if (num < 10000000000000000)\n                    output = number + \"es\";\n
    \               else if (num < 10000000000000000)\n                    output
    = number + \"s\";\n                else if (num < 100000000000000000)\n                    output
    = number + \"es\";\n                else if (num < 100000000000000000)\n                    output
    = number + \"s\";\n                else if (num < 1000000000000000000)\n                    output
    = number + \"es\";\n                else\n                    output = number
    + \"s\";\n            }\n        }\n        return output;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <47675a6b60b64caf9c4eab058ed88a53>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <47675a6b60b64caf9c4eab058ed88a53>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <47675a6b60b64caf9c4eab058ed88a53>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <47675a6b60b64caf9c4eab058ed88a53>:0
    \n"
  stdout: ''
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] splitNums = numbers.Split(new[] { \" \" }, StringSplitOptions.None);\n
    \       Array.Sort(splitNums);\n        string result = \"\";\n        foreach
    (string number in splitNums)\n            result += number + \" \";\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be99e2997abe4276bdaba847b7035330>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be99e2997abe4276bdaba847b7035330>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] charArray = numbers.ToCharArray();\n        Array.Sort(charArray);\n
    \       return new string(charArray);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <040acc5f8d51484c904bf9d04e89c9b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <040acc5f8d51484c904bf9d04e89c9b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       numbers = numbers.Trim();\n        IEnumerable<string> splitNumbers =
    numbers.Split(' ');\n        IEnumerable<int> ints = new List<int>();\n        foreach
    (string s in splitNumbers) {\n            if (int.TryParse(s, out int i)) ints.Add(i);\n
    \       }\n        Array.Sort(ints);\n        string result = \"\";\n        foreach
    (int i in ints) {\n            result += i.ToString();\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd0xyt388.cs(19,50): error CS1061: ''IEnumerable<int>'' does not contain
    a definition for ''Add'' and no accessible extension method ''Add'' accepting
    a first argument of type ''IEnumerable<int>'' could be found (are you missing
    a using directive or an assembly reference?)

    /tmp/tmpd0xyt388.cs(21,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<int>''
    to ''System.Array''

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] validChars = new char[] { '0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9' };\n        string[] numberArr = numbers.Split(' ');\n        List<int>
    sortedNumbers = new List<int>();\n        foreach (string number in numberArr)
    {\n            char[] numberArr = number.ToCharArray();\n            int i = 0;\n
    \           for (i = 0; i < numberArr.Length; i++) {\n                int number
    = numberArr[i] - '0';\n                while (number < 0 || number > 9) {\n                    int
    newNumber = Int32.Parse(number.ToString());\n                    numberArr[i]
    = newNumber + '0';\n                    number = Int32.Parse(number.ToString());\n
    \               }\n            }\n            sortedNumbers.Add(Int32.Parse(number.ToString()));\n
    \       }\n        List<string> sortedStr = new List<string>();\n        foreach
    (int number in sortedNumbers) {\n            sortedStr.Add(number.ToString());\n
    \       }\n        string sortedString = \"\";\n        foreach (string number
    in sortedStr) {\n            sortedString += number + \" \";\n        }\n        return
    sortedString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcr2p2fc6.cs(19,20): error CS0136: A local or parameter named ''numberArr''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpcr2p2fc6.cs(22,21): error CS0136: A local or parameter named ''number''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpcr2p2fc6.cs(25,36): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string outputString = \"\";\n        char[] delimiters = { ' ' };\n        string[]
    words = numbers.Split(delimiters);\n        foreach (string word in words) {\n
    \           if (word == \"nine\") {\n                output.Insert(outputString.Length
    + 1, \"\");\n                break;\n            }\n            Decimal decimalNumber
    = Decimal.Parse(word);\n            ArrayList sortedNumbers = new ArrayList();\n
    \           Decimal tempDecimal;\n            foreach (char c in word)\n            {\n
    \               tempDecimal = (Decimal)c;\n                sortedNumbers.Add(tempDecimal);\n
    \           }\n            sortedNumbers.Sort();\n            foreach (Decimal
    sortedNumber in sortedNumbers)\n            {\n                outputString +=
    sortedNumber.ToString();\n            }\n        }\n        return outputString;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmor66oei.cs(20,17): error CS0103: The name ''output'' does not exist in
    the current context

    /tmp/tmpmor66oei.cs(24,13): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpmor66oei.cs(24,43): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Use a Dictionary to store the 'numbers' we find.\n        Dictionary<string,
    int> numbers = new Dictionary<string, int>();\n        int[] nums = new int[numbers.Length];\n
    \       int digits = numbers.Length;\n        StringBuilder sb = new StringBuilder();\n
    \       // Iterate over all numbers we find.\n        for (int i = 0; i < numbers.Length;
    i++) {\n            // Convert string to a number.\n            int number;\n
    \           if (!Int32.TryParse(numbers[i], out number)) {\n                string
    key = numbers[i];\n                // If we can't convert the string to a number,
    store the\n                // string as the key with the lowest index as the value.\n
    \               if (numbers.ContainsKey(key))\n                    numbers.Remove(key);\n
    \               else {\n                    numbers.Add(key, i);\n                    break;\n
    \               }\n            }\n            // Add the number to the array.\n
    \           nums[i] = number;\n        }\n        // Sort the numbers in descending
    order.\n        Array.Sort(nums);\n        // Iterate over all numbers we find.\n
    \       for (int i = 0; i < nums.Length; i++) {\n            // Get the digit
    value to store it in a string.\n            int digit = nums[i] % 10;\n            //
    Get the remainder, for formatting purposes.\n            int remainder = nums[i]
    / 10;\n            // Convert number to string.\n            string key = remainder.ToString();\n
    \           // If we've not seen the key before, use it.\n            if (!numbers.ContainsKey(key))\n
    \               numbers.Add(key, i + 1);\n        }\n        // Iterate over the
    sorted keys.\n        foreach (string key in numbers.Keys)\n            sb.Append(key);\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyfrgqkya.cs(16,33): error CS0136: A local or parameter named ''numbers''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpyfrgqkya.cs(17,38): error CS1061: ''Dictionary<string, int>'' does not
    contain a definition for ''Length'' and no accessible extension method ''Length''
    accepting a first argument of type ''Dictionary<string, int>'' could be found
    (are you missing a using directive or an assembly reference?)

    /tmp/tmpyfrgqkya.cs(18,30): error CS1061: ''Dictionary<string, int>'' does not
    contain a definition for ''Length'' and no accessible extension method ''Length''
    accepting a first argument of type ''Dictionary<string, int>'' could be found
    (are you missing a using directive or an assembly reference?)

    /tmp/tmpyfrgqkya.cs(21,37): error CS1061: ''Dictionary<string, int>'' does not
    contain a definition for ''Length'' and no accessible extension method ''Length''
    accepting a first argument of type ''Dictionary<string, int>'' could be found
    (are you missing a using directive or an assembly reference?)

    /tmp/tmpyfrgqkya.cs(24,41): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpyfrgqkya.cs(25,38): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       StringBuilder result = new StringBuilder();\n        string[] numberStrings
    = numbers.Split(' ');\n        foreach (string s in numberStrings) {\n            int
    intValue = Int32.Parse(s);\n            string ordered = Convert.ToString(intValue);\n
    \           result.Append(ordered);\n        }\n        return result.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0001e] in <9c267808ace44710b3a86a41005e03de>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <9c267808ace44710b3a86a41005e03de>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0001e] in <9c267808ace44710b3a86a41005e03de>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <9c267808ace44710b3a86a41005e03de>:0
    \n"
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string numberString = \"\";\n        int numberStringLength = numbers.Length;\n
    \       int[] sortedNumbers = new int[numberStringLength];\n        string stringForResult
    = string.Empty;\n        foreach (string numberString in numbers.Split(' ')) //split
    and loop through each number\n        {\n            sortedNumbers[numberStringLength
    - numberStringLength - 1] = Convert.ToInt32(numberString);\n            numberStringLength--;\n
    \       }\n        numberStringLength = numberStringLength + 1;\n        for (int
    i = 0; i < sortedNumbers.Length; i++)\n        {\n            stringForResult
    += sortedNumbers[i] + \" \";\n        }\n        return stringForResult;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6kwf5uzv.cs(19,25): error CS0136: A local or parameter named ''numberString''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6kwf5uzv.cs(15,16): warning CS0219: The variable ''numberString'' is assigned
    but its value is never used

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> numberList = numbers.Split(' ').ToList();\n        numberList.Add(\"\");\n
    \       List<int> sorted = new List<int>();\n        sorted = numberList.ConvertAll(x
    => (int)x.ToString()).OrderBy(x => x).ToList();\n        return string.Join(\"
    \", sorted.ConvertAll(x => x.ToString()));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyw2ns7_0.cs(18,45): error CS0030: Cannot convert type ''string'' to ''int''

    '
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = \"\";\n        if (numbers != null && numbers.Length >
    0)\n        {\n            var chars = \"zero,one,two,three,four,five,six,seven,eight,nine\";\n
    \           var list = numbers.Split(' ');\n            var len = list.Length;\n
    \           foreach (string s in list)\n            {\n                result
    += (len > 1) ? \"\" : chars.Split(',')[1];\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b11e3ed629c541ec82b22f844b5397d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b11e3ed629c541ec82b22f844b5397d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numbers = numbers.Split(' ');\n        var result = new List<int>();\n
    \       foreach(var number in numbers) {\n            number = number.Trim();\n
    \           var isNegative = false;\n            if(number.StartsWith(\"-\"))
    {\n                isNegative = true;\n                number = number.Trim();\n
    \           }\n            try {\n                int.Parse(number);\n            }
    catch {\n                throw new ArgumentException(string.Format(\"Invalid number
    '{0}'. Use only 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',
    'eight' or 'nine'!\", number));\n            }\n            var value = isNegative
    ? -int.Parse(number) : int.Parse(number);\n            result.Add(value);\n        }\n
    \       result.Sort();\n        var sb = new StringBuilder();\n        foreach(var
    item in result) {\n            sb.Append(item.ToString());\n            if(result.Count
    != 0) sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe2lj0x3a.cs(15,13): error CS0136: A local or parameter named ''numbers''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpe2lj0x3a.cs(15,23): error CS0841: Cannot use local variable ''numbers''
    before it is declared

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] strs = numbers.Split(' ');\n        int[] ints = new int[strs.Length];\n
    \       for (int i = 0; i < strs.Length; i++)\n            ints[i] = int.Parse(strs[i]);\n
    \       int minInt = int.MaxValue;\n        Array.Sort(ints, (x, y) => { int d
    = x - y; if (d < minInt) minInt = d; return d; });\n        string result = \"\";\n
    \       for (int i = 0; i < ints.Length; i++)\n            result += strs[ints[i]]
    + \" \";\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0001f] in <0ede7cbf9aee413fb10b71c767615451>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0ede7cbf9aee413fb10b71c767615451>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0001f] in <0ede7cbf9aee413fb10b71c767615451>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0ede7cbf9aee413fb10b71c767615451>:0
    \n"
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Get the set of valid numbers, excluding 'zero' and 'one'.\n        //
    This must be done in a way that does not produce false positives,\n        //
    i.e. exclude 'zero' if the numbers contains 'one'.\n        var validNumbers =
    new HashSet<string> {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\",
    \"six\", \"seven\", \"eight\", \"nine\"};\n\n        // Convert the input to a
    set of numbers.\n        // If there are multiple inputs, each of them is converted
    to a number.\n        // If there are multiple numbers in a string all are converted
    to the same number.\n        var numberSet = numbers.Split(' ')\n                            .Select(x
    => validNumbers.Contains(x) ? int.Parse(x) : x);\n\n        // Sort the numbers
    in-place.\n        numberSet.OrderBy(x => x);\n\n        // Convert the numbers
    into their original values.\n        // This preserves the original ordering of
    'zero' and 'one'.\n        return string.Join(\" \", numberSet);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp02a9037i.cs(24,42): error CS0173: Type of conditional expression cannot
    be determined because there is no implicit conversion between ''int'' and ''string''

    '
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberStrings = numbers.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       string[] sortedNumbers = new string[numberStrings.Length];\n        numberStrings.CopyTo(sortedNumbers,
    0);\n\n        Array.Sort(sortedNumbers);\n        return string.Join(\" \", sortedNumbers);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77a8a049bb86449c8e0428e591faf085>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77a8a049bb86449c8e0428e591faf085>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberList = numbers.Split(' ').Select(x => Convert.ToInt32(x)).ToList();\n
    \       numberList = numberList.OrderBy(i => i).ToList();\n        StringBuilder
    result = new StringBuilder();\n        for (int i = 0; i < numberList.Count; i++)\n
    \       {\n            if (result.Length != 0)\n            {\n                result.Append(\"
    \");\n            }\n            result.Append(numberList[i].ToString());\n        }\n
    \       return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String x) [0x00000] in <d863b872b6c8448da902ce2fa646d5cf>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList
    () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <d863b872b6c8448da902ce2fa646d5cf>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <d863b872b6c8448da902ce2fa646d5cf>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String x) [0x00000] in <d863b872b6c8448da902ce2fa646d5cf>:0 \n "
  stdout: ''
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null) return null;\n        char[] c = numbers.ToCharArray();\n
    \       Array.Sort(c);\n        string s = string.Join(\" \", c);\n        return
    s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <662b3d2957974bdfb87f3134df836ef7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <662b3d2957974bdfb87f3134df836ef7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Initialize variables\n        List<int> numbersInOrder = new List<int>();\n
    \       List<int> numbersInReverseOrder = new List<int>();\n        string answer
    = \"\";\n        bool flag = false;\n\n        int[] numArray = numbers.Split('
    ').Select(n => Convert.ToInt32(n)).ToArray();\n        Array.Sort(numArray);\n\n
    \       // Sort numbers in reverse order\n        foreach (int item in numArray)
    {\n            if (item > 0) {\n                numbersInOrder.Add(item);\n            }\n
    \       }\n        numbersInOrder = numbersInOrder.OrderByDescending(i => i).ToArray();\n\n
    \       // Reverse array and reverse order of numbers\n        Array.Reverse(numArray);\n
    \       foreach (int item in numArray) {\n            if (item > 0) {\n                numbersInReverseOrder.Add(item);\n
    \           }\n        }\n        numbersInReverseOrder = numbersInReverseOrder.OrderByDescending(i
    => i).ToArray();\n\n        // Sort numbers in order again\n        foreach (int
    item in numbersInOrder) {\n            if (item > 0) {\n                flag =
    true;\n            }\n        }\n\n        if (flag) {\n            foreach (int
    item in numbersInOrder) {\n                if (item > 0) {\n                    answer
    += item;\n                }\n            }\n            foreach (int item in numbersInReverseOrder)
    {\n                answer += item;\n            }\n        }\n        return answer;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8mpq5604.cs(30,26): error CS0029: Cannot implicitly convert type ''int[]''
    to ''System.Collections.Generic.List<int>''

    /tmp/tmp8mpq5604.cs(39,33): error CS0029: Cannot implicitly convert type ''int[]''
    to ''System.Collections.Generic.List<int>''

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] nums = numbers.Split(' ');\n        nums = nums.Select(n => Convert.ToInt32(n)).OrderBy(n
    => n).Select(n => n.ToString()).ToArray();\n        return string.Join(\" \",
    nums);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <b09752f8179348478ae8297eb09a96d3>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray
    () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext
    () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].PreallocatingToArray
    (System.Int32 count) [0x00035] in <e540098dd111461e919c5863f6975c29>:0 \n  at
    System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].ToArray ()
    [0x00023] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00078] in <b09752f8179348478ae8297eb09a96d3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <b09752f8179348478ae8297eb09a96d3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a"
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (string.IsNullOrEmpty(numbers)) return null;\n        var sorted =
    new List<int>();\n        foreach (string n in numbers.Split(' ')) sorted.AddRange(Enumerable.Range(0,
    9).OrderBy(x => Convert.ToInt32(x.ToString())).ToArray());\n        return string.Join(\"
    \", sorted.Select(x => x.ToString()));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <46159958381246a39d6d268335f523f3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <46159958381246a39d6d268335f523f3>:0
    \n"
  stdout: ''
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var sortedNumbers = numbers.Split(' ').OrderBy(x => x).ToList();\n        return
    string.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2fd32061a614dc5863822585ac855fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2fd32061a614dc5863822585ac855fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var list = numbers.Split(' ')\n            .Select(x => new BigInteger(x));\n
    \       var ordered = list.OrderBy(x => x);\n        string result = string.Join(\"
    \", ordered);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppblvfgpn.cs(16,41): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = string.Empty;\n        foreach (string word in
    numbers.Split(' '))\n        {\n            if (word == \"zero\")\n                sortedNumbers
    = sortedNumbers + \"0\";\n            else if (word == \"one\")\n                sortedNumbers
    = sortedNumbers + \"1\";\n            else if (word == \"two\")\n                sortedNumbers
    = sortedNumbers + \"2\";\n            else if (word == \"three\")\n                sortedNumbers
    = sortedNumbers + \"3\";\n            else if (word == \"four\")\n                sortedNumbers
    = sortedNumbers + \"4\";\n            else if (word == \"five\")\n                sortedNumbers
    = sortedNumbers + \"5\";\n            else if (word == \"six\")\n                sortedNumbers
    = sortedNumbers + \"6\";\n            else if (word == \"seven\")\n                sortedNumbers
    = sortedNumbers + \"7\";\n            else if (word == \"eight\")\n                sortedNumbers
    = sortedNumbers + \"8\";\n            else if (word == \"nine\")\n                sortedNumbers
    = sortedNumbers + \"9\";\n            else\n            {\n                SortedDictionary
    dictionary = new SortedDictionary();\n                for (int i = 0; i < 9; i++)\n
    \               {\n                    dictionary.Add(Convert.ToInt32(word), i);\n
    \               }\n                List<int> list = new List<int>();\n                foreach
    (int key in dictionary.Keys)\n                    list.Add(key);\n                Collections.Sort(list);\n
    \               foreach (int key in list)\n                {\n                    sortedNumbers
    = sortedNumbers + \" \" + key + \" \";\n                }\n            }\n        }\n
    \       return sortedNumbers;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hm4o2lt.cs(40,17): error CS0305: Using the generic type ''SortedDictionary<TKey,
    TValue>'' requires 2 type arguments

    /tmp/tmp7hm4o2lt.cs(40,51): error CS0305: Using the generic type ''SortedDictionary<TKey,
    TValue>'' requires 2 type arguments

    /tmp/tmp7hm4o2lt.cs(48,17): error CS0103: The name ''Collections'' does not exist
    in the current context

    '
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberParts = numbers.Split(' ');\n        Array.Sort(numberParts);\n
    \       return string.Join(\" \", numberParts);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df71e36d0641bea024dc54384dece4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df71e36d0641bea024dc54384dece4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       Debug.Assert(numbers != null);\n        Debug.Assert(numbers.Count() ==
    numbers.Split(\" \").Length);\n        Debug.Assert(numbers.All(n => string.IsNullOrWhiteSpace(n)
    || n.Length >= 1));\n\n        // Find the smallest and the largest number\n        int[]
    numberList = new int[numbers.Split(\" \").Length];\n        foreach (string s
    in numbers.Split(\" \").Select(n => n.Trim().ToLower())) {\n            if (!numbers.Contains(\"zero\"))\n
    \               numberList.Add(numbers.IndexOf(s));\n        }\n        int smallestIndex
    = numberList.IndexOf(numberList[0]);\n        int largestIndex = numberList.IndexOf(numberList.Max());\n
    \       int smallest = numberList[smallestIndex];\n        int largest = numberList[largestIndex];\n\n
    \       // Sort numbers within the range\n        Array.Sort(numberList);\n\n
    \       // Return the string with the numbers sorted from smallest to largest\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < numberList.Length;
    ++i) {\n            if (numberList[i] == largest)\n                sb.Append(largest.ToString());\n
    \           else if (numberList[i] == smallest)\n                sb.Append(smallest.ToString());\n
    \           else\n                sb.Append(numberList[i].ToString());\n        }\n\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9titiey9.cs(17,65): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp9titiey9.cs(17,73): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp9titiey9.cs(23,28): error CS1061: ''int[]'' does not contain a definition
    for ''Add'' and no accessible extension method ''Add'' accepting a first argument
    of type ''int[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp9titiey9.cs(25,40): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmp9titiey9.cs(26,39): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numArray = numbers.Split(' ');\n        Array.Sort(numArray);\n
    \       return String.Join(\" \", numArray);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8b629c5afb449578eaa4125bb1c2f7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8b629c5afb449578eaa4125bb1c2f7b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       numbers = numbers.Trim();\n        string result;\n        if (numbers.Contains(\"-\"))
    {\n            result = numbers.Replace(\"-\", string.Empty) + string.Empty;\n
    \       } else {\n            result = numbers + string.Empty;\n        }\n        int
    count = 0;\n        List<int> numberList;\n        if (int.TryParse(result, out
    numberList)) {\n            result = string.Join(\" \", numberList.OrderBy(i =>
    i).ToArray());\n        } else {\n            string numbersList = result.Split(new
    char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(s => int.Parse(s)).ToList();\n
    \           numberList = numberList.OrderBy(i => i).ToList();\n            numberList.Insert(0,
    0);\n            string sortedNumbers = string.Join(\" \", numberList.Select(n
    => n.ToString()).ToArray());\n            result = sortedNumbers + \" \";\n        }\n
    \       string str = string.Empty;\n        foreach (char c in result) {\n            if
    (Char.IsDigit(c)) {\n                str = str + c;\n                count++;\n
    \           }\n        }\n        return str + \" \";\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph16u2zlp.cs(24,38): error CS1503: Argument 2: cannot convert from ''out
    System.Collections.Generic.List<int>'' to ''out int''

    /tmp/tmph16u2zlp.cs(27,34): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<int>''
    to ''string''

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Get the string as a collection of strings.\n        var collection
    = numbers.Split(' ');\n\n        // Remove any whitespace from the beginning/end.\n
    \       foreach (var item in collection) {\n            if (item.StartsWith(\"'\")
    || item.EndsWith(\"'\"))\n                collection.Remove(item);\n        }\n\n
    \       // Remove any empty strings.\n        collection = collection.Where(x
    => !String.IsNullOrWhiteSpace(x)).ToList();\n\n        // Convert the strings
    to numbers and sort.\n        var numbers = collection.Select(x => Convert.ToInt32(x)).OrderBy(x
    => x).ToList();\n\n        // Convert back to a string.\n        return String.Join(\"
    \", numbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmyg3zpqe.cs(16,26): error CS0841: Cannot use local variable ''numbers''
    before it is declared

    /tmp/tmpmyg3zpqe.cs(28,13): error CS0136: A local or parameter named ''numbers''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       ArrayList numberArray = new ArrayList();\n        string[] wordArray =
    numbers.Split(' ');\n        foreach (string word in wordArray) {\n            int
    number = int.Parse(word);\n            numberArray.Add(number);\n        }\n        Array.Sort(numberArray);\n
    \       StringBuilder sb = new StringBuilder();\n        foreach (int number in
    numberArray) {\n            sb.Append(number.ToString());\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppnkk48fc.cs(15,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmppnkk48fc.cs(15,37): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers.Length < 2) {\n            return numbers;\n        }\n        Dictionary<string,
    int> numberCounts = new Dictionary<string, int>();\n        for (int i = 0; i
    < numbers.Length; i++) {\n            int number = Int32.Parse(numbers[i]);\n
    \           if (number == 0) {\n                numberCounts[\"0\"]++;\n            }
    else if (number == 1) {\n                numberCounts[\"1\"]++;\n            }
    else if (number == 2) {\n                numberCounts[\"2\"]++;\n            }
    else if (number == 3) {\n                numberCounts[\"3\"]++;\n            }
    else if (number == 4) {\n                numberCounts[\"4\"]++;\n            }
    else if (number == 5) {\n                numberCounts[\"5\"]++;\n            }
    else if (number == 6) {\n                numberCounts[\"6\"]++;\n            }
    else if (number == 7) {\n                numberCounts[\"7\"]++;\n            }
    else if (number == 8) {\n                numberCounts[\"8\"]++;\n            }
    else if (number == 9) {\n                numberCounts[\"9\"]++;\n            }
    else if (number == 10) {\n                numberCounts[\"10\"]++;\n            }
    else if (number == 11) {\n                numberCounts[\"11\"]++;\n            }
    else if (number == 12) {\n                numberCounts[\"12\"]++;\n            }
    else if (number == 13) {\n                numberCounts[\"13\"]++;\n            }
    else if (number == 14) {\n                numberCounts[\"14\"]++;\n            }
    else if (number == 15) {\n                numberCounts[\"15\"]++;\n            }
    else if (number == 16) {\n                numberCounts[\"16\"]++;\n            }
    else if (number == 17) {\n                numberCounts[\"17\"]++;\n            }
    else if (number == 18) {\n                numberCounts[\"18\"]++;\n            }
    else if (number == 19) {\n                numberCounts[\"19\"]++;\n            }
    else if (number == 20) {\n                numberCounts[\"20\"]++;\n            }
    else if (number == 21) {\n                numberCounts[\"21\"]++;\n            }
    else if (number == 22) {\n                numberCounts[\"22\"]++;\n            }
    else if (number == 23) {\n                numberCounts[\"23\"]++;\n            }
    else if (number == 24) {\n                numberCounts[\"24\"]++;\n            }
    else if (number == 25) {\n                numberCounts[\"25\"]++;\n            }
    else if (number == 26) {\n                numberCounts[\"26\"]++;\n            }
    else if (number == 27) {\n                numberCounts[\"27\"]++;\n            }
    else if (number == 28) {\n                numberCounts[\"28\"]++;\n            }
    else if (number == 29) {\n                numberCounts[\"29\"]++;\n            }
    else if (number == 30) {\n                numberCounts[\"30\"]++;\n            }
    else if (number == 31) {\n                numberCounts[\"31\"]++;\n            }
    else if (number == 32) {\n                numberCounts[\"32\"]++;\n            }
    else if (number == 33) {\n                numberCounts[\"33\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8c93j__s.cs(88,30): error CS1010: Newline in constant

    /tmp/tmp8c93j__s.cs(88,33): error CS1003: Syntax error, '']'' expected

    /tmp/tmp8c93j__s.cs(88,33): error CS1002: ; expected

    /tmp/tmp8c93j__s.cs(90,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8c93j__s.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = String.Empty;\n        foreach (string number in
    numbers.Split(' ')) {\n            string numberAsString = (Convert.ToInt32(number)).ToString();\n
    \           int numberAsInt = Convert.ToInt32(numberAsString);\n            sortedNumbers
    += numberAsInt + \"\\n\";\n        }\n        int sortedNumbersLength = sortedNumbers.Length;\n
    \       int currentNumber = 0;\n        bool done = false;\n        while (current
    != sortedNumbersLength && !done) {\n            if (currentNumber < sortedNumbersLength)
    {\n                char nextChar = Convert.ToChar(sortedNumbers[currentNumber]);\n
    \               currentNumber += 1;\n                sortedNumbers += nextChar;\n
    \           }\n            else\n                done = true;\n        }\n        return
    sortedNumbers;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppecr1ytq.cs(24,16): error CS0103: The name ''current'' does not exist
    in the current context

    '
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Create a string array of valid choices.\n        char[] choices = new
    char[10];\n        choices[10] = 'nine';\n        choices[8] = 'eight';\n        choices[7]
    = 'seven';\n        choices[6] = 'six';\n        choices[5] = 'five';\n        choices[4]
    = 'four';\n        choices[3] = 'three';\n        choices[2] = 'two';\n        choices[1]
    = 'one';\n        choices[0] = 'zero';\n\n        // Split up the input string\n
    \       string[] numberList = numbers.Split(\" \".ToCharArray());\n        List<int>
    numbersSorted = new List<int>();\n        for (int i = 0; i < numberList.Length;
    i++) {\n            int currentNumber = Convert.ToInt32(numberList[i]);\n            numbersSorted.Add(currentNumber);\n
    \       }\n        numbersSorted = numbersSorted.OrderBy(i => i).ToList();\n\n
    \       // Convert the sorted numbers back to a string with valid choices.\n        string
    sortedNumbers = \"\";\n        for (int i = 0; i < numbersSorted.Count; i++) {\n
    \           sortedNumbers += choices[numbersSorted[i]] + \" \";\n        }\n        return
    sortedNumbers;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhuttywq.cs(17,23): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(18,22): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(19,22): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(20,22): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(21,22): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(22,22): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(23,22): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(24,22): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(25,22): error CS1012: Too many characters in character literal

    /tmp/tmpbhuttywq.cs(26,22): error CS1012: Too many characters in character literal

    '
  timestamp: 1659976391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> list = new List<string>();\n        foreach (string n in
    numbers.Split(' ')) list.Add(n);\n        return list.OrderBy(i => i).Select(i
    => i).Aggregate((i, j) => i + \" \" + j);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c62f08d0df74677997e88b8219b4591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c62f08d0df74677997e88b8219b4591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers.Length == 0) {\n            return \"\";\n        }\n\n        var
    numberArray = numbers.Split(\" \").Select(Numbers.Parse).ToArray();\n\n        //
    Convert each number to its ASCII code, then sort them.\n        Array.Sort(numberArray);\n\n
    \       // Convert to a string with spaces between them.\n        return string.Join(\"
    \", numberArray.Select(x => x.ToString(\"x\")));\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd6ycq3sc.cs(19,53): error CS0103: The name ''Numbers'' does not exist
    in the current context

    '
  timestamp: 1659976392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] chars = numbers.ToCharArray();\n        List<int> numberList =
    new List<int>();\n        foreach (char c in chars) {\n            if (c == 'n'
    || c == '9') {\n                if (numberList.Count < 9) numberList.Add(0);\n
    \           }\n            else {\n                int number = Convert.ToInt32(c);\n
    \               if (number >= 0 && number <= 9) numberList.Add(number);\n            }\n
    \       }\n        Array.Sort(numberList.ToArray());\n        string result =
    \"\";\n        for (int i = numberList.Count - 1; i >= 0; i--)\n            result
    += Convert.ToChar(numberList[i]);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d60772f7b3d48c596c51b0a5befe3ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d60772f7b3d48c596c51b0a5befe3ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       HashSet<string> results = new HashSet<string>();\n        var strings
    = new List<string>();\n        foreach(var item in numbers.Split(new[] {\" \"},StringSplitOptions.RemoveEmptyEntries))\n
    \       {\n            if(item != \"zero\" && item != \"one\" && item != \"two\"
    && item != \"three\" && item != \"four\" && item != \"five\" && item != \"six\"
    && item != \"seven\" && item != \"eight\" && item != \"nine\")\n            {\n
    \               strings.add(item);\n            }\n        }\n        var sortedStrings
    = strings.OrderBy(i => i).ToList();\n        for(int index = 0; index < sortedStrings.Count;
    index++)\n        {\n            results.Add(sortedStrings[index]);\n        }\n
    \       foreach(var item in results)\n        {\n            Console.WriteLine(item);\n
    \       }\n        return String.Join(\" \",sortedStrings);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuf8r5y09.cs(21,25): error CS1061: ''List<string>'' does not contain a
    definition for ''add'' and no accessible extension method ''add'' accepting a
    first argument of type ''List<string>'' could be found (are you missing a using
    directive or an assembly reference?)

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int startIndex = 1;\n        int endIndex = numbers.Length;\n        while
    (startIndex < endIndex) {\n            char one = Convert.ToChar(numbers.Substring(startIndex,
    1));\n            char two = Convert.ToChar(numbers.Substring(startIndex + 1,
    1));\n            int oneValue = 0;\n            int twoValue = 0;\n            try
    {\n                oneValue = Convert.ToInt32(one);\n                twoValue
    = Convert.ToInt32(two);\n            } catch {\n                // If we can't
    parse these numbers, skip to the next number\n                startIndex += 1;\n
    \               continue;\n            }\n            if (oneValue < twoValue)
    {\n                string temp = numbers.Substring(startIndex, 1);\n                numbers
    = numbers.Substring(0, startIndex) + numbers.Substring(startIndex + 2, 1) + temp;\n
    \               startIndex += 3;\n            } else {\n                startIndex
    += 2;\n            }\n        }\n        return numbers;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00010] in <10852971b6524da5bc26167709a5742e>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <10852971b6524da5bc26167709a5742e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00010] in <10852971b6524da5bc26167709a5742e>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <10852971b6524da5bc26167709a5742e>:0
    \n"
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var allNumbers = new List<int>();\n        foreach (var word in numbers.Split('
    ').Select(int.Parse))\n            allNumbers.Add(word);\n        Array.Sort(allNumbers);\n
    \       return string.Join(\" \", allNumbers.Select(n => n.ToString()).OrderBy(n
    => n));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqu_9etoo.cs(18,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberArray = new List<int>();\n        numbers = numbers.Trim();\n
    \       foreach (string s in numbers.Split(' '))\n            numberArray.Add((int)s);\n
    \       Array.Sort(numberArray);\n        StringBuilder sb = new StringBuilder();\n
    \       foreach (int n in numberArray)\n            sb.Append(n.ToString());\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk30vhz7n.cs(18,29): error CS0030: Cannot convert type ''string'' to ''int''

    /tmp/tmpk30vhz7n.cs(19,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sorted = \"\";\n        foreach(string number in numbers.Split('
    ')) sorted += number;\n        sorted = Sort(sorted);\n        return sorted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsmv2c70x.cs(17,18): error CS0103: The name ''Sort'' does not exist in
    the current context

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var sortedNumbers = numbers.Split(' ').OrderBy(n => Convert.ToInt32(n)).ToList();\n
    \       return String.Join(\" \", sortedNumbers);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <6cf7192115b34e519a566c4b355117a8>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys
    (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements,
    System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort
    (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement]
    buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].ToList
    () [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <6cf7192115b34e519a566c4b355117a8>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <6cf7192115b34e519a566c4b355117a8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001"
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numbersList = numbers.Split(' ');\n        double currentNumber =
    0.0;\n        string sortedString = null;\n        foreach (string numberString
    in numbersList) {\n            currentNumber = Convert.ToDouble(numberString);\n
    \           SortedList sortedList = new SortedList();\n            while (sortedList.ContainsKey(currentNumber))
    {\n                currentNumber = sortedList.Pop();\n            }\n            sortedList.Add(currentNumber,
    numberString);\n            sortedString = string.Join(\" \", sortedList.Values);\n
    \       }\n        return sortedString;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpss0ot1es.cs(20,13): error CS0305: Using the generic type ''SortedList<TKey,
    TValue>'' requires 2 type arguments

    /tmp/tmpss0ot1es.cs(20,41): error CS0305: Using the generic type ''SortedList<TKey,
    TValue>'' requires 2 type arguments

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null) {\n            return null;\n        }\n        var
    list = numbers.Split(\" \".ToCharArray());\n        return list.OrderByDescending(x
    => Int32.Parse(x)).Select(x => x.ToString()).Aggregate(\" \".ToCharArray(), (current,
    x) => current + x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp54piijjr.cs(19,131): error CS0029: Cannot implicitly convert type ''string''
    to ''char[]''

    /tmp/tmp54piijjr.cs(19,131): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int[] numbersList = numbers.Split(' ').Select(s => Int32.Parse(s)).OrderBy(n
    => n).ToArray();\n        string sortedNumbers = string.Join(\" \", numbersList.Select(n
    => n.ToString()).OrderBy(n => n).ToArray());\n        return sortedNumbers;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <86dea521ee1b4cfc87a0da6d4777a91a>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00052] in <86dea521ee1b4cfc87a0da6d4777a91a>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <86dea521ee1b4cfc87a0da6d4777a91a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <86dea521ee1b4cfc87a0da6d4777a91a>:0
    \n  at System."
  stdout: ''
  timestamp: 1659976392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] splitNumbers = numbers.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\n
    \       // If there are no numbers, return an empty string\n        if (splitNumbers.Length
    == 0) {\n            return \"\";\n        }\n\n        // If there is only one
    number, return that number\n        if (splitNumbers.Length == 1) {\n            return
    splitNumbers[0];\n        }\n\n        // If all the numbers are zero, return
    the empty string\n        if (splitNumbers.All(n => n.Equals(\"zero\"))) {\n            return
    \"\";\n        }\n\n        // If all numbers are ones, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"one\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If all numbers are twos, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"two\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If all numbers are threes, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"three\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If all numbers are fours, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"four\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If all numbers are fives, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"five\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If all numbers are sixes, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"six\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If all numbers are sevens, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"seven\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If all numbers are eights, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"eight\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If all numbers are nines, return that number\n        if
    (splitNumbers.All(n => n.Equals(\"nine\"))) {\n            return splitNumbers[0];\n
    \       }\n\n        // If there are a mixture of numbers and letters, return
    the number\n        return splitNumbers.Aggregate((s1, s2) => s1 + \" \" + s2);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c58215556c364d239dfe80f276c5d52b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c58215556c364d239dfe80f276c5d52b>:0
    \n"
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] numberChars = numbers.ToCharArray();\n        int smallest = 0;\n
    \       int largest = 0;\n        int largestInside = 0;\n        int smallestInside
    = 0;\n        List<int> numberList = new List<int>();\n        for (int i = 0;
    i < numberChars.Length; i++) {\n            if (numberChars[i] == 'nine') {\n
    \               if (numberList[0] != 9)\n                {\n                    largestInside
    = numberList[0];\n                    smallestInside = numberList[numberList.Count
    - 1];\n                    numberList.Clear();\n                }\n                else\n
    \               {\n                    return string.Empty;\n                }\n
    \           }\n            else if (numberChars[i] == 'zero') {\n                if
    (numberList[0] != 0)\n                {\n                    largestInside = numberList[0];\n
    \                   smallestInside = numberList[numberList.Count - 1];\n                    numberList.Clear();\n
    \               }\n                else\n                {\n                    return
    string.Empty;\n                }\n            }\n            else if (numberChars[i]
    == 'one') {\n                if (numberList[0] != 1)\n                {\n                    largestInside
    = numberList[0];\n                    smallestInside = numberList[numberList.Count
    - 1];\n                    numberList.Clear();\n                }\n                else\n
    \               {\n                    return string.Empty;\n                }\n
    \           }\n            else if (numberChars[i] == 'two') {\n                if
    (numberList[0] != 2)\n                {\n                    largestInside = numberList[0];\n
    \                   smallestInside = numberList[numberList.Count - 1];\n                    numberList.Clear();\n
    \               }\n                else\n                {\n                    return
    string.Empty;\n                }\n            }\n            else if (numberChars[i]
    == 'three') {\n                if (numberList[0] != 3)\n                {\n                    largestInside
    = numberList[0];\n                    smallestInside = numberList[numberList.Count
    - 1];\n                    numberList.Clear();\n                }\n                else\n
    \               {\n                    return string.Empty;\n                }\n
    \           }\n            else if (numberChars[i] == 'four') {\n                if
    (numberList[0] != 4)\n                {\n                    largestInside = numberList[0];\n
    \                   smallestInside = numberList[numberList.Count - 1];\n                    numberList.Clear();\n
    \               }\n                else\n                {\n                    return
    string.Empty;\n                }\n            }\n            else if (numberChars[i]
    == 'five') {\n                if (numberList[0] != 5)\n                {\n                    largestInside
    = numberList[0];\n                    smallestInside = numberList[numberList.Count
    - 1];\n                    numberList.Clear();\n                }\n                else\n
    \               {\n                    return string.Empty;\n                }\n
    \           }\n            else if (numberChars[i] == 'six') {\n                if
    (numberList[0] != 6)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ru3wiq9.cs(22,35): error CS1012: Too many characters in character literal

    /tmp/tmp4ru3wiq9.cs(34,40): error CS1012: Too many characters in character literal

    /tmp/tmp4ru3wiq9.cs(46,40): error CS1012: Too many characters in character literal

    /tmp/tmp4ru3wiq9.cs(58,40): error CS1012: Too many characters in character literal

    /tmp/tmp4ru3wiq9.cs(70,40): error CS1012: Too many characters in character literal

    /tmp/tmp4ru3wiq9.cs(82,40): error CS1012: Too many characters in character literal

    /tmp/tmp4ru3wiq9.cs(94,40): error CS1012: Too many characters in character literal

    /tmp/tmp4ru3wiq9.cs(106,40): error CS1012: Too many characters in character literal

    /tmp/tmp4ru3wiq9.cs(107,40): error CS1525: Invalid expression term ''}''

    /tmp/tmp4ru3wiq9.cs(107,40): error CS1002: ; expected

    /tmp/tmp4ru3wiq9.cs(109,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp4ru3wiq9.cs(117,2): error CS1513: } expected

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       numbers = numbers.Replace(\" \", \"\");\n        List<int> numberList
    = numbers.ToLower().Split(' ').Select(p => Convert.ToInt32(p)).ToList();\n        List<int>
    sortedList = new List<int>(numberList);\n        sortedList.Sort();\n        int
    i = 0;\n        string ret = \"\";\n        foreach (int n in sortedList)\n        {\n
    \           ret = ret + \" \" + n;\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String p) [0x00000] in <b20abc1d109f4dd096bb74e9757f3185>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList
    () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00045] in <b20abc1d109f4dd096bb74e9757f3185>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <b20abc1d109f4dd096bb74e9757f3185>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String p) [0x00000] in <b20abc1d109f4dd096bb74e9757f3185>:0 \n "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberList = numbers.Split(' ').Select(n => Convert.ToInt32(n)).ToList();\n
    \       numberList.Sort();\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < numberList.Count; i++) {\n            sb.Append(numberList[i]);\n
    \           if (i < numberList.Count - 1) {\n                sb.Append(\" \");\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <8f11df42b65d45f586408ce895c38c70>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList
    () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <8f11df42b65d45f586408ce895c38c70>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8f11df42b65d45f586408ce895c38c70>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <8f11df42b65d45f586408ce895c38c70>:0 \n "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var sorted = new List<int>();\n        var splits = numbers.Split(' ').Select(n
    => int.Parse(n));\n        foreach (var split in splits)\n            sorted.Insert(sorted.Count,
    split);\n        sorted.Sort();\n        var stringBuilder = new StringBuilder();\n
    \       foreach (var num in sorted)\n        {\n            if (num != 0)\n                stringBuilder.Append(num);\n
    \       }\n        return stringBuilder.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f94a346d8ac0457c9e20a2d53a847e9b>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].MoveNext
    () [0x0003a] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00056] in <f94a346d8ac0457c9e20a2d53a847e9b>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <f94a346d8ac0457c9e20a2d53a847e9b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f94a346d8ac0457c9e20a2d53a847e9b>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].MoveNext
    () [0x0003a] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00056] in <f94a346d8ac0457c9e20a2d53a847e9b>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <f94a346d8ac0457c9e20a2d53a847e9b>:0
    \n"
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] chars = numbers.ToCharArray();\n        int largest = int.MaxValue;\n
    \       foreach (char c in chars) {\n            int i = int.Parse(c.ToString());\n
    \           if (i > largest)\n                largest = i;\n        }\n        char[]
    sortedChars = new char[chars.Length];\n        foreach (char c in chars) {\n            sortedChars[(int.Parse(c.ToString())
    - largest)] = c;\n        }\n        return new string(sortedChars);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00024] in <f8307a7789c44679a8902ddea98a22b7>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <f8307a7789c44679a8902ddea98a22b7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00024] in <f8307a7789c44679a8902ddea98a22b7>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <f8307a7789c44679a8902ddea98a22b7>:0
    \n"
  stdout: ''
  timestamp: 1659976392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Your code goes here\n        var sorted = new List<int>();\n        foreach
    (var num in numbers.Split(' ')) {\n            int number;\n            int.TryParse(num,
    out number);\n            sorted.Add(number);\n        }\n        sorted.Sort();\n
    \       StringBuilder builder = new StringBuilder();\n        foreach (int number
    in sorted) {\n            builder.Append(number.ToString());\n        }\n        return
    builder.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c1c3117413a4758a523480b1f6fe01d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c1c3117413a4758a523480b1f6fe01d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var nums = numbers.Split(' ')\n            .Select(n => Convert.ToInt32(n.Trim()))\n
    \           .OrderBy(n => n)\n            .Select(n => n.ToString())\n            .ToArray();\n
    \       return string.Join(\" \", nums);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00006] in <0ea0c24e82264b6d87511d8ac11e93ff>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray
    () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext
    () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].PreallocatingToArray
    (System.Int32 count) [0x00035] in <e540098dd111461e919c5863f6975c29>:0 \n  at
    System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].ToArray ()
    [0x00023] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00076] in <0ea0c24e82264b6d87511d8ac11e93ff>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0ea0c24e82264b6d87511d8ac11e93ff>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a"
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = \"\";\n        bool inDigit = false;\n        foreach
    (string number in numbers.Split(\" \".ToCharArray())) {\n            if (int.TryParse(number,
    out int n)) {\n                if (!inDigit) {\n                    result = n;\n
    \                   inDigit = true;\n                } else {\n                    result
    = n + \" \" + result;\n                }\n            } else {\n                inDigit
    = false;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl8re860l.cs(20,30): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659976392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = \"\";\n        if (numbers == \"\") return \"\";\n
    \       string[] numberParts = numbers.Split(new string[] { \" \" }, StringSplitOptions.RemoveEmptyEntries);\n
    \       string[] sortedNumberParts = numberParts.OrderBy(x => x).ToArray();\n
    \       sortedNumbers = string.Join(\" \", sortedNumberParts);\n        return
    sortedNumbers;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39899c22818d45a6a7d9f6635067c21d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39899c22818d45a6a7d9f6635067c21d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberStrings = numbers.Split(' ');\n        List<int> numberList
    = new List<int>();\n        for (int i = 0; i < numberStrings.Length; i++) {\n
    \           numberList.Add(Convert.ToInt32(numberStrings[i]));\n        }\n        Array.Sort(numberList);\n
    \       StringBuilder builder = new StringBuilder();\n        builder.Append(numberList.First());\n
    \       for (int i = 0; i < numberList.Count - 1; i++) {\n            builder.Append(\"
    \");\n            builder.Append(numberList[i + 1]);\n        }\n        return
    builder.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz02z4j00.cs(20,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> result = new List<string>();\n        foreach (string number
    in numbers.Split(' ')) result.Add(number);\n        result.Sort();\n        return
    string.Join(\" \", result);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c09158a8e706420f80101de9d213d5b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c09158a8e706420f80101de9d213d5b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int min = 0;\n        int max = numbers.Length;\n        List<int> ints
    = new List<int>();\n        foreach (string number in numbers.Split(' '))\n            ints.Add(Int32.Parse(number));\n
    \       int len = ints.Count;\n        ints.Sort();\n        StringBuilder sb
    = new StringBuilder();\n        int count = 0;\n        foreach (int i in ints)
    {\n            sb.Append(ints.ElementAt(count));\n            count++;\n            if
    (count >= len) {\n                count = 0;\n                sb.Append(' ');\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00028] in <3f8c5176f26447c29e01067a3150ba7e>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <3f8c5176f26447c29e01067a3150ba7e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00028] in <3f8c5176f26447c29e01067a3150ba7e>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <3f8c5176f26447c29e01067a3150ba7e>:0
    \n"
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> result = new List<string>();\n        foreach (var item in
    numbers.Split(' ')) {\n            try {\n                result.Add(item.Trim());\n
    \           } catch {\n                Console.WriteLine(\"Invalid input: {0}\",
    item);\n                return \"ERROR\";\n            }\n        }\n        Array.Sort(result);\n
    \       StringBuilder builder = new StringBuilder();\n        foreach (var item
    in result) {\n            builder.Append(item);\n        }\n        return builder.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw1pvdi3m.cs(24,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''System.Array''

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] nums = numbers.Split(' ');\n        List<int> numberList = new
    List<int>();\n        List<int> sortedNumList = new List<int>();\n\n        for
    (int i = 0; i < nums.Length; i++)\n        {\n            numberList.Add(Convert.ToInt32(nums[i]));\n
    \       }\n\n        sortedNumList.AddRange(numberList.OrderBy(n => n));\n        sortedNumList.AddRange(numberList.OrderByDescending(n
    => n));\n        StringBuilder sb = new StringBuilder();\n\n        for (int i
    = 0; i < sortedNumList.Count; i++)\n        {\n            if (i > 0)\n                sb.Append('
    ');\n            sb.Append(sortedNumList[i]);\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0001d] in <3b6c654637fa4e9c849a81965076f8e1>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <3b6c654637fa4e9c849a81965076f8e1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0001d] in <3b6c654637fa4e9c849a81965076f8e1>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <3b6c654637fa4e9c849a81965076f8e1>:0
    \n"
  stdout: ''
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = \"\";\n        string[] array = numbers.Split(' ');\n
    \       Array.Reverse(array);\n        foreach (string s in array) {\n            result
    += (s + \" \");\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40eb36b9f5c34a8ca31c34ff3f15d718>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40eb36b9f5c34a8ca31c34ff3f15d718>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> numbersList = new List<string>();\n        foreach (string
    n in numbers.Split(' ')) {\n            if (n == \"zero\") numbersList.Add(\"zero\");\n
    \           if (n == \"one\") numbersList.Add(\"one\");\n            if (n ==
    \"two\") numbersList.Add(\"two\");\n            if (n == \"three\") numbersList.Add(\"three\");\n
    \           if (n == \"four\") numbersList.Add(\"four\");\n            if (n ==
    \"five\") numbersList.Add(\"five\");\n            if (n == \"six\") numbersList.Add(\"six\");\n
    \           if (n == \"seven\") numbersList.Add(\"seven\");\n            if (n
    == \"eight\") numbersList.Add(\"eight\");\n            if (n == \"nine\") numbersList.Add(\"nine\");\n
    \       }\n        string[] numberStrings = numbersList.ToArray();\n        Array.Sort(numberStrings);\n
    \       string res = string.Join(\" \", numberStrings);\n        return res;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0db678143ae84ea596da7561ba5f4b70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0db678143ae84ea596da7561ba5f4b70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Convert the string to an int array\n        int[] array = numbers.Split('
    ').Select(num => Convert.ToInt32(num)).ToArray();\n        // Sort the array\n
    \       Array.Sort(array);\n        // Reconstruct the string from the sorted
    array\n        return string.Join(\" \", array.Select(n => n.ToString()));\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String num) [0x00000] in <cd226cfc904047ef8840e83e7803d0b8>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray
    () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <cd226cfc904047ef8840e83e7803d0b8>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <cd226cfc904047ef8840e83e7803d0b8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String num) [0x00000] in <cd226cfc904047ef8840e83e7803d0b8"
  stdout: ''
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = \"\";\n        if (numbers == null) {\n            return
    null;\n        }\n        string[] numberArray = numbers.Split(\" \");\n        int[]
    intArray = new int[numberArray.Length];\n        for (int i = 0; i < numberArray.Length;
    i++) {\n            int num;\n            if (int.TryParse(numberArray[i], out
    num)) {\n                intArray[i] = num;\n            } else {\n                return
    \"Invalid input. \" + numbers + \" is invalid.\";\n            }\n        }\n
    \       int largest = intArray.Length - 1;\n        for (int i = 0; i < intArray.Length;
    i++) {\n            if (intArray[i] > intArray[largest]) {\n                largest
    = i;\n            }\n        }\n        for (int i = 0; i < intArray.Length; i++)
    {\n            if (i == largest) {\n                sortedNumbers += intArray[i].ToString();\n
    \           } else {\n                sortedNumbers += intArray[i].ToString()
    + \" \";\n            }\n        }\n        return sortedNumbers;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8dd534deb12435ca8d1b24d85343575>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a8dd534deb12435ca8d1b24d85343575>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       Debug.Assert(numbers.Length > 0, \"Input string is empty.\");\n        List<int>
    numbersAsInt = new List<int>();\n        string[] numberStrings = numbers.Split('
    ');\n        for (int i = 0; i < numberStrings.Length; i++) {\n            numbersAsInt.Add(Int32.Parse(numberStrings[i]));\n
    \       }\n        Array.Sort(numbersAsInt);\n        string sorted = String.Join(\"
    \", numbersAsInt.Select(n => n.ToString()));\n        return sorted;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmzykfpsy.cs(21,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       StringBuilder sb = new StringBuilder();\n        numbers = numbers.Trim();\n
    \       int i = 0;\n        while (numbers.Length > 0) {\n            int j =
    0;\n            while (numbers.Length > 0) {\n                sb.Append(numbers[i]);\n
    \               if (j == numbers.Length - 1) {\n                    break;\n                }\n
    \               i++;\n                j++;\n            }\n            numbers
    = numbers.Substring(0, i);\n        }\n        return sb.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SortNumbers (System.String numbers) [0x00019]
    in <532f1af9bf9d44839505b27d32ea5ca3>:0 \n  at Problem.Main (System.String[] args)
    [0x0001b] in <532f1af9bf9d44839505b27d32ea5ca3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.IndexOutOfRangeException: Index was outside the bounds of the array.\n
    \ at Problem.SortNumbers (System.String numbers) [0x00019] in <532f1af9bf9d44839505b27d32ea5ca3>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <532f1af9bf9d44839505b27d32ea5ca3>:0
    \n"
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var sortedNumbers = numbers.Split(' ').Select(x => int.Parse(x)).OrderBy(x
    => x).ToArray();\n        return string.Join(\" \", sortedNumbers);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <4fe92728b3be484bbd081ca0bdf6e07b>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00052] in <4fe92728b3be484bbd081ca0bdf6e07b>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <4fe92728b3be484bbd081ca0bdf6e07b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <4fe92728b3be484bbd081ca0bdf6e07b>:0
    \n  at System."
  stdout: ''
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberStrings = numbers.Split(' ');\n\n        string[] stringArray
    = new string[numberStrings.Length];\n        for (int i = 0; i < numberStrings.Length;
    i++) {\n            stringArray[i] = Convert.ToString(numberStrings[i]);\n        }\n\n
    \       Array.Sort(stringArray);\n\n        string result = \"\";\n\n        foreach
    (string s in stringArray) {\n            result += s + \" \";\n        }\n\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d916f87bbbc43c9976561a36f623fc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d916f87bbbc43c9976561a36f623fc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = \"\";\n        foreach (string num in numbers.Split('
    ')) \n            result += num + \", \";\n        if (result.Length > 0) {\n
    \           result = result.Substring(0, result.Length - 2);\n        }\n        else
    {\n            result = \"zero zero zero\";\n        }\n        result += \"\\n\"
    + \"\\n\";\n        result = result.Replace(\",\", \" \");\n        Array.Sort(new
    int[result.Length / 2]);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b22f02a392440a3a9346fa7a7f63317>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b22f02a392440a3a9346fa7a7f63317>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       SortedList<int, string> digits = new SortedList<int, string>();\n        foreach
    (var digitString in numbers.Trim().Split(' ').Where(c => c != '')) {\n            digits.Add(int.Parse(digitString),
    digitString);\n        }\n        StringBuilder sb = new StringBuilder();\n        foreach
    (var digit in digits) {\n            sb.Append(digit.Key);\n            sb.Append(\"
    \");\n        }\n        return sb.ToString();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ukmw3a4.cs(16,79): error CS1011: Empty character literal

    '
  timestamp: 1659976392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> words = new List<string>();\n        string[] nums = numbers.Split('
    ');\n        foreach (string number in nums) {\n            string temp = number;\n
    \           string result = \"\";\n            while (temp.Length > 0) {\n                int
    number = Convert.ToInt32(temp, 10);\n                string numberAsString = Convert.ToString(number);\n
    \               temp = temp.Substring(0, temp.Length - 1);\n                result
    += (number < 10 ? \"0\" : \"\") + numberAsString;\n            }\n            words.Add(result);\n
    \       }\n        Array.Sort(words);\n        StringBuilder sb = new StringBuilder();\n
    \       foreach (string word in words) {\n            sb.Append(word);\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmakicdq4.cs(21,21): error CS0136: A local or parameter named ''number''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpmakicdq4.cs(28,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<string>''
    to ''System.Array''

    '
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numbers = numbers.Trim().ToLower();\n        var numberStrings = numbers.Split('
    ');\n        var sortedStrings = new List<string>();\n        foreach (var number
    in numberStrings) {\n            int i;\n            int digit = int.TryParse(number,
    out i) ? i : 0;\n            while (digit != 0) {\n                var newDigit
    = (digit%10)+1;\n                digit /= 10;\n                sortedStrings.Add($\"{newDigit}
    {number}\");\n            }\n        }\n        sortedStrings.Sort();\n        return
    String.Join(\" \", sortedStrings);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7odr_blc.cs(15,13): error CS0136: A local or parameter named ''numbers''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7odr_blc.cs(15,23): error CS0841: Cannot use local variable ''numbers''
    before it is declared

    /tmp/tmp7odr_blc.cs(16,37): error CS1061: ''int'' does not contain a definition
    for ''Split'' and no accessible extension method ''Split'' accepting a first argument
    of type ''int'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp7odr_blc.cs(15,23): error CS0165: Use of unassigned local variable ''numbers''

    '
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var intArray = numbers.Split(' ')\n                               .Select(x
    => Convert.ToInt32(x))\n                               .OrderBy(x => x).ToArray();\n
    \       return string.Join(\" \", intArray);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String x) [0x00000] in <9ebb4e0cc69847659535c86f985fdfdb>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray
    () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00052] in <9ebb4e0cc69847659535c86f985fdfdb>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <9ebb4e0cc69847659535c86f985fdfdb>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0"
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = string.Empty;\n        int[] numbersList = numbers.Split('
    ').Select(n => Convert.ToInt32(n)).ToArray();\n        Array.Sort(numbersList);\n
    \       sortedNumbers = numbersList.Aggregate((a, b) => a.ToString() + \" \" +
    b.ToString());\n        return sortedNumbers;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppc83h_d0.cs(18,57): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    /tmp/tmppc83h_d0.cs(18,57): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Split the input string into an array of numbers \n        // using
    whitespaces as the delimiter. \n        // The Split method returns an array of
    strings.\n        var numberArray = numbers.Split();\n        // Sort the array
    in descending order by comparing the strings \"numbers\" to each other using CompareTo.\n
    \       // The CompareTo method returns an Int32 that indicates the relative position
    of \"numbers\" within \"numbersArray\".\n        var numberArraySorted = numberArray.OrderByDescending(s
    => s).ToArray();\n        // Join each number from the array into a single string
    using the \" \" string delimiter.\n        // The Join method joins all the strings
    returned by the Select method into a single string.\n        var result = string.Join(\"
    \", numberArraySorted);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eead9e8ad1f64d66bd36b708f375c02b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eead9e8ad1f64d66bd36b708f375c02b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberArray = numbers.Split(' ');\n        Array.Sort(numberArray);\n
    \       string result = \"\";\n        for (int i = 0; i < numberArray.Length;
    i++) {\n            result = result + \" \" + numberArray[i];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b26037df35f47d7a3311f4eb93200d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0b26037df35f47d7a3311f4eb93200d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numberArray = numbers.Split(' ');\n        var numberArrayLength =
    numberArray.Length;\n        var largest = numberArray[0];\n        var smallest
    = numberArray[0];\n        var largestIndex = 0;\n        var smallestIndex =
    0;\n\n        // Find the greatest and smallest numbers, respectively.\n        //
    We've already calculated largestIndex and smallestIndex, so\n        // don't
    repeat these calculations.\n        while (true) {\n            smallest = numberArray[smallestIndex];\n
    \           smallestIndex++;\n\n            if (smallest < largest) {\n                break;\n
    \           }\n        }\n\n        while (true) {\n            largest = numberArray[largestIndex];\n
    \           largestIndex++;\n\n            if (smallest > largest) {\n                break;\n
    \           }\n        }\n\n        // Now that we've gotten the smallest and
    largest\n        // numbers, we can do the sorting in place, updating\n        //
    the indices as we go.\n        for (var i = 0; i <= largestIndex; i++) {\n            for
    (var j = smallestIndex; j >= i; j--) {\n                if (numberArray[j] < largest)
    {\n                    var tmp = numberArray[j];\n                    numberArray[j]
    = largest;\n                    largest = tmp;\n                    numberArray[j]
    = largest;\n                }\n            }\n        }\n\n        return numberArray.join('
    ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph3h6gln0.cs(29,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''string'' and ''string''

    /tmp/tmph3h6gln0.cs(38,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''string''

    /tmp/tmph3h6gln0.cs(48,21): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''string'' and ''string''

    /tmp/tmph3h6gln0.cs(57,28): error CS1061: ''string[]'' does not contain a definition
    for ''join'' and no accessible extension method ''join'' accepting a first argument
    of type ''string[]'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberArray = numbers.Trim().Split(' ');\n        Array.Sort(numberArray);\n
    \       StringBuilder sb = new StringBuilder();\n        foreach (string s in
    numberArray)\n        {\n            sb.Append(s);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3665a8a9881e43d19f445ae39f51ae18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3665a8a9881e43d19f445ae39f51ae18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberList = new List<int>();\n        foreach(string number
    in numbers.Split(' ')) {\n            numberList.Add((int)Convert.ChangeType(number,
    typeof(int)));\n        }\n        numberList.Sort();\n        return string.Join(\"
    \", numberList.Select(n => n.ToString()));\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.Globalization.NumberStyles
    style, System.IFormatProvider provider) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Convert.ToInt32 (System.String value, System.IFormatProvider provider)
    [0x00005] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.System.IConvertible.ToInt32
    (System.IFormatProvider provider) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Convert.ChangeType (System.Object value, System.Type conversionType,
    System.IFormatProvider provider) [0x000e0] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Convert.ChangeType (System.Object value, System.Type conversionType)
    [0x00007] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String
    numbers) [0x0001b] in <f2a9bc433ca149159153f37ee9f984a7>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <f2a9bc433ca149159153f37ee9f984a7>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.Globalization.NumberStyles
    style, System.IFormatProvider provider) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Convert.ToInt32 (System.String val"
  stdout: ''
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numbersList = numbers.Split(\" \");\n        Array.Sort(numbersList);\n
    \       return string.Join(\" \", numbersList);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9529f56b6bd24fd1b792c8ad4e2ca537>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9529f56b6bd24fd1b792c8ad4e2ca537>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var results = new List<int>();\n        foreach (string number in numbers.Split(new[]
    {' '}, StringSplitOptions.RemoveEmptyEntries)) {\n            int number;\n            if
    (int.TryParse(number, out number)) {\n                results.Add(number);\n            }
    else {\n                string message = $\"Invalid number {number} in string:
    {numbers}\";\n                throw new ArgumentException(message);\n            }\n
    \       }\n        Array.Sort(results);\n        return string.Join(\" \", results.Select(a
    => a.ToString()).OrderBy(a => a).Reverse());\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfftwq2c9.cs(17,17): error CS0136: A local or parameter named ''number''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfftwq2c9.cs(18,30): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpfftwq2c9.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    /tmp/tmpfftwq2c9.cs(18,30): error CS0165: Use of unassigned local variable ''number''

    '
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = \"\";\n        List<char> charArray = numbers.ToCharArray().ToList();\n
    \       charArray.Sort();\n        foreach (char c in charArray) {\n            result
    += c;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b920cbd11d10413c8206b4f0c9fc4f81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b920cbd11d10413c8206b4f0c9fc4f81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Split our input string into an array of strings\n        // One for
    each number in the input\n        string[] inputNumbers = numbers.Split(' ');\n
    \       \n        // Create a temporary array of integers, to store our numbers\n
    \       int[] inputNumbersAsIntegers = new int[inputNumbers.Length];\n        \n
    \       // Set our input numbers to their corresponding integers\n        for
    (int i = 0; i < inputNumbers.Length; i++)\n            inputNumbersAsIntegers[i]
    = Convert.ToInt32(inputNumbers[i]);\n        \n        // Sort our input array
    with the Sorting algorithm\n        Array.Sort(inputNumbersAsIntegers);\n        \n
    \       // Return our sorted array of numbers\n        return string.Join(\" \",
    inputNumbersAsIntegers);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00018] in <03ffbf14b29e4d7590a01d3efa01a72c>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <03ffbf14b29e4d7590a01d3efa01a72c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00018] in <03ffbf14b29e4d7590a01d3efa01a72c>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <03ffbf14b29e4d7590a01d3efa01a72c>:0
    \n"
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string output = \"\";\n        List<string> numbersList = new List<string>(numbers.Split('
    '));\n        int[] numbersInt = new int[numbersList.Count];\n        numbersList\n
    \           .Select((item, index) => new { item = item, index = index })\n            .ToList()\n
    \           .ForEach((x) => {\n                numbersInt[x.index] = Convert.ToInt32(x.item);\n
    \           });\n        Array.Sort(numbersInt);\n        output = numbersList.Aggregate((x,
    y) => x + \" \" + y);\n        return output;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__1
    (<>f__AnonymousType0`2[<item>j__TPar,<index>j__TPar] x) [0x00013] in <411058f667654411bec31ae780dc4278>:0
    \n  at System.Collections.Generic.List`1[T].ForEach (System.Action`1[T] action)
    [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String
    numbers) [0x00057] in <411058f667654411bec31ae780dc4278>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <411058f667654411bec31ae780dc4278>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c__DisplayClass0_0.<SortNumbers>b__1
    (<>f__AnonymousType0`2[<item>j__TPar,<index>j__TPar] x) [0x00013] in <411058f667654411bec31ae780dc4278>:0
    \n  at System.Collections.Generic.List`1[T]."
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // If no numbers provided just return 'null'\n        if (numbers == null)
    return null;\n        // If the numbers provided are less than two characters
    or less than 'nine' return 'null'\n        if (numbers.Length < 2 || numbers.Length
    < 9) return null;\n        // Create a list to hold our sorted numbers\n        List<int>
    nums = new List<int>();\n        // Split the numbers string into an array\n        string[]
    numsArray = numbers.Split(\" \");\n        // Convert the strings into ints\n
    \       foreach (string s in numsArray) {\n            int value = Convert.ToInt32(s);\n
    \           // Add each integer to the list\n            nums.Add(value);\n        }\n
    \       // Sort the list from smallest to largest\n        nums.Sort();\n        //
    Return the sorted list of ints\n        return String.Join(\" \", nums.ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <71151ba248fe4ac7b7f6b5e38cc8ce33>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <71151ba248fe4ac7b7f6b5e38cc8ce33>:0
    \n"
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int min = int.MaxValue;\n        int max = int.MinValue;\n\n        foreach
    (string number in numbers.Split(' ')) {\n            int value = int.Parse(number);\n
    \           if (value < min)\n                min = value;\n            if (value
    > max)\n                max = value;\n        }\n\n        List<int> numberList
    = new List<int>();\n        for (int i = 1; i <= max; i++)\n            numberList.Add(i);\n
    \       for (int i = min; i <= 9; i++)\n            numberList.Add(i);\n\n        numberList
    = numberList.OrderBy(i => i).ToList();\n\n        StringBuilder sb = new StringBuilder();\n
    \       foreach (int n in numberList)\n            sb.Append(n + \" \");\n\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00026] in <49167bbdc4204ff9aee175631d6efe55>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <49167bbdc4204ff9aee175631d6efe55>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00026] in <49167bbdc4204ff9aee175631d6efe55>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <49167bbdc4204ff9aee175631d6efe55>:0
    \n"
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       Debug.Assert(numbers != null && numbers.Length > 0 && numbers.Contains(\"zero\")
    && numbers.Contains(\"nine\"));\n\n        var numberArray = numbers.Split(' ').Select(x
    => Int32.Parse(x)).ToArray();\n        var numberList = numberArray.ToList();\n
    \       numberList.Sort();\n\n        var numberStrings = numberList.Select(n
    => n.ToString());\n        return string.Join(\" \", numberStrings);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.SortNumbers (System.String numbers) [0x00000] in <dca0945767f94496bf02a37edb176607>:0
    \n  at Problem.Main (System.String[] args) [0x00000] in <dca0945767f94496bf02a37edb176607>:0
    \n\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <dca0945767f94496bf02a37edb176607>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0005b] in <dca0945767f94496bf02a37edb176607>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <dca0945767f944"
  stdout: ''
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] numbers_chars = numbers.ToCharArray();\n        Array.Sort(numbers_chars);\n
    \       return new string(numbers_chars);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06fc8d0c73494bab8f1e6f87340b036f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06fc8d0c73494bab8f1e6f87340b036f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string outputString = \"\";\n        char[] numberArray = numbers.Split('
    ');\n        for (int i = 0; i < numberArray.Length; i++) {\n            int number
    = int.Parse(numberArray[i]);\n            int sorted = (number * 9) % 10;\n            outputString
    += numberArray[i - 1] + \" \";\n        }\n        return outputString;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnobcz4js.cs(16,30): error CS0029: Cannot implicitly convert type ''string[]''
    to ''char[]''

    /tmp/tmpnobcz4js.cs(18,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Initialize an array to hold the numbers\n        int[] numberArray
    = new int[numbers.Length];\n        int i = 0;\n        while (i < numbers.Length)
    {\n            numberArray[i] = Convert.ToInt32(numbers[i]);\n            i++;\n
    \       }\n\n        // Sort the numbers in ascending order\n        Array.Sort(numberArray);\n\n
    \       // Return string\n        string sortedNumbers = \"\";\n        for (int
    j = 0; j < numberArray.Length; j++) {\n            sortedNumbers += numberArray[j];\n
    \           if (j < numberArray.Length - 1) {\n                sortedNumbers +=
    \" \";\n            }\n        }\n        return sortedNumbers;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c5d64f5d8d745f5b60740823e6a2313>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c5d64f5d8d745f5b60740823e6a2313>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Use a List<> for storing all the numbers in our string\n        var
    numberList = numbers.Split(' ').Select(n => Convert.ToInt32(n)).ToList();\n\n
    \       // Create a List<> of ints that will hold the numbers as they are sorted\n
    \       var sortedNumbers = new List<int>();\n        \n        // Add all numbers
    to the sortedNumbers list\n        foreach(var n in numberList) {\n            //
    Add numbers until we run out of numbers to sort\n            while(sortedNumbers.Count
    < n) {\n                sortedNumbers.Add(0);\n            }\n            \n            //
    Add the current number to the sortedNumbers list\n            sortedNumbers.Add(n);\n
    \       }\n\n        // Sort the numbers in the list and return them in a string\n
    \       return String.Join(\" \", sortedNumbers).ToLower();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <623869c10cfb4606964ff55d1a138d8a>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList
    () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <623869c10cfb4606964ff55d1a138d8a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <623869c10cfb4606964ff55d1a138d8a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String n) [0x00000] in <623869c10cfb4606964ff55d1a138d8a>:0 \n "
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numbers = numbers.Split();\n        Array.Sort(numbers);\n        return
    string.Join(\" \", numbers);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupauwrql.cs(15,18): error CS0136: A local or parameter named ''numbers''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpupauwrql.cs(15,36): error CS1061: ''string[]'' does not contain a definition
    for ''Split'' and no accessible extension method ''Split'' accepting a first argument
    of type ''string[]'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpupauwrql.cs(15,28): error CS0165: Use of unassigned local variable ''numbers''

    '
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Your code here\n        List<int> ints = new List<int>();\n        foreach
    (string num in numbers.Split(' ')){\n            try{\n                int num
    = Convert.ToInt32(num);\n                ints.Add(num);\n            }catch(FormatException
    e){\n                Console.WriteLine(\"{0} is an invalid choice.\", num);\n
    \           }\n        }\n        ints.Sort();\n        return string.Join(\"
    \", ints);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm2j562zr.cs(19,21): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpm2j562zr.cs(19,43): error CS0165: Use of unassigned local variable ''num''

    /tmp/tmpm2j562zr.cs(21,36): warning CS0168: The variable ''e'' is declared but
    never used

    '
  timestamp: 1659976393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       bool isPositive = true;\n        List<int> numbersList = numbers.Split('
    ').ToList();\n        numbersList.Sort(delegate (int x, int y) {\n            if
    (isPositive) {\n                return x < y;\n            } else {\n                return
    x > y;\n            }\n        });\n        string output = \"\";\n        foreach
    (int n in numbersList) {\n            output += n;\n        }\n        return
    output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2hesnkqq.cs(16,33): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<string>''
    to ''System.Collections.Generic.List<int>''

    /tmp/tmp2hesnkqq.cs(19,24): error CS0029: Cannot implicitly convert type ''bool''
    to ''int''

    /tmp/tmp2hesnkqq.cs(19,24): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmp2hesnkqq.cs(21,24): error CS0029: Cannot implicitly convert type ''bool''
    to ''int''

    /tmp/tmp2hesnkqq.cs(21,24): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] charArray = numbers.ToCharArray();\n        List<int> intArray
    = new List<int>();\n        foreach (char c in charArray) {\n            intArray.Add(Int32.Parse(c.ToString()));\n
    \       }\n        Array.Sort(intArray);\n        string sorted = string.Join(\"
    \", intArray);\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgc9wk6iq.cs(20,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] stringNumbers = numbers.Split(\" \");\n        Array.Sort(stringNumbers);\n
    \       return string.Join(\" \", stringNumbers);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c154fa8ef1b4448e836ab6d4eb9ded23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c154fa8ef1b4448e836ab6d4eb9ded23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = \"\";\n        string[] numberList = numbers.Split(' ');\n\n
    \       // Add all the numbers together\n        long sum = 0;\n        foreach
    (string number in numberList) {\n            sum += Convert.ToInt64(number);\n
    \       }\n        long highest = sum;\n        foreach (string number in numberList)
    {\n            sum += Convert.ToInt64(number);\n            if (sum > highest)
    {\n                result = numberList;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp93lq12b5.cs(27,26): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var nums = numbers.Split(' ').Select(int.Parse).OrderBy(x => x);\n        var
    res = String.Join(\" \", nums);\n        return res;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext
    () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.JoinCore[T]
    (System.Char* separator, System.Int32 separatorLength, System.Collections.Generic.IEnumerable`1[T]
    values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.String.Join[T]
    (System.String separator, System.Collections.Generic.IEnumerable`1[T] values)
    [0x0001b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String
    numbers) [0x00040] in <cf3359dc8de54a9eadfa54b26c6bf4e2>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <cf3359dc8de54a9eadfa54b26c6bf4e2>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Sy"
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int j = 0;\n        string sorted = \"\";\n        string input;\n        string[]
    numberSplits;\n        string[] sortedNumberSplits;\n        string number;\n
    \       // Parse input into a list of numbers\n        if (numbers != null) {\n
    \           numberSplits = numbers.Split(' ');\n            for (int i = 0; i
    < numberSplits.Length; i++) {\n                number = numberSplits[i];\n                sortedNumberSplits
    = number.OrderBy(x => x.ToString()).ToArray();\n                j = 0;\n                //
    Sort each number individually\n                for (int k = 0; k < sortedNumberSplits.Length;
    k++) {\n                    sortedNumberSplits[k] = sortedNumberSplits[k].Replace(\"
    \", \"\");\n                }\n                for (int k = 0; k < sortedNumberSplits.Length;
    k++) {\n                    if (j > 0) {\n                        sorted += \"
    \";\n                    }\n                    sorted += sortedNumberSplits[k];\n
    \                   j++;\n                }\n            }\n        }\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ccq75ls.cs(26,38): error CS0029: Cannot implicitly convert type ''char[]''
    to ''string[]''

    /tmp/tmp4ccq75ls.cs(17,16): warning CS0168: The variable ''input'' is declared
    but never used

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> ints = new List<int>();\n        foreach(string n in numbers.Split('
    ')) ints.Add(Convert.ToInt32(n));\n\n        int min = ints.Min();\n        int
    max = ints.Max();\n        ints.Sort();\n        string result = \"\";\n        for(int
    i : ints) {\n            if(i != min) {\n                result += i.ToString()
    + \" \";\n            }\n        }\n        if(result.Length > 0) {\n            result
    = result.Substring(0, result.Length-1);\n        } else {\n            result
    = min.ToString();\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptt6wgw94.cs(22,19): error CS1002: ; expected

    /tmp/tmptt6wgw94.cs(22,19): error CS1525: Invalid expression term '':''

    /tmp/tmptt6wgw94.cs(22,19): error CS1001: Identifier expected

    '
  timestamp: 1659976393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers.Contains(\"zero\")) {\n            return \"zero\";\n        }\n
    \       if (numbers.Contains(\"one\")) {\n            return \"one\";\n        }\n
    \       if (numbers.Contains(\"two\")) {\n            return \"two\";\n        }\n
    \       if (numbers.Contains(\"three\")) {\n            return \"three\";\n        }\n
    \       if (numbers.Contains(\"four\")) {\n            return \"four\";\n        }\n
    \       if (numbers.Contains(\"five\")) {\n            return \"five\";\n        }\n
    \       if (numbers.Contains(\"six\")) {\n            return \"six\";\n        }\n
    \       if (numbers.Contains(\"seven\")) {\n            return \"seven\";\n        }\n
    \       if (numbers.Contains(\"eight\")) {\n            return \"eight\";\n        }\n
    \       if (numbers.Contains(\"nine\")) {\n            return \"nine\";\n        }\n
    \       if (numbers.Contains(\" zero \")) {\n            return \"zero\";\n        }\n
    \       if (numbers.Contains(\" one \")) {\n            return \"one\";\n        }\n
    \       if (numbers.Contains(\" two \")) {\n            return \"two\";\n        }\n
    \       if (numbers.Contains(\" three \")) {\n            return \"three\";\n
    \       }\n        if (numbers.Contains(\" four \")) {\n            return \"four\";\n
    \       }\n        if (numbers.Contains(\" five \")) {\n            return \"five\";\n
    \       }\n        if (numbers.Contains(\" six \")) {\n            return \"six\";\n
    \       }\n        if (numbers.Contains(\" seven \")) {\n            return \"seven\";\n
    \       }\n        if (numbers.Contains(\" eight \")) {\n            return \"eight\";\n
    \       }\n        if (numbers.Contains(\" nine \")) {\n            return \"nine\";\n
    \       }\n        string sortedNumbers = \"\";\n        string currentNumber;\n
    \       string[] currentNumbers = numbers.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n
    \       Array.Sort(currentNumbers);\n        foreach (string n in currentNumbers)
    {\n            currentNumber = n;\n            sortedNumbers = sortedNumbers +
    currentNumber + \" \";\n        }\n        return sortedNumbers;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0eafeaa4d4934ccdb8fe26ba9f2ca741>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0eafeaa4d4934ccdb8fe26ba9f2ca741>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = string.Empty;\n        foreach (string number in numbers.Split('
    ')) {\n            string[] pieces = number.Split(' ');\n            int value
    = 0;\n            if (pieces.Length > 0) {\n                int.TryParse(pieces[0],
    out value);\n            }\n            if (value > 9) {\n                throw
    new Exception(\"You can't use 'nine' as a number\");\n            }\n            result
    += value + \"\";\n        }\n        string sortedString = string.Empty;\n        foreach
    (char c in result) {\n            if (char.IsDigit(c)) {\n                sortedString
    += c;\n            } else {\n                throw new Exception(\"You can't use
    'nine' as a number\");\n            }\n        }\n        sortedString = sortedString.Substring(0,
    sortedString.Length - 1);\n        return sortedString;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0464cb1297754f89a8c1728a02f04d43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0464cb1297754f89a8c1728a02f04d43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] chars = numbers.ToCharArray();\n        var result = new List<char>();\n
    \       foreach (var c in chars) {\n            result.Add((int)c);\n        }\n
    \       return result.OrderBy(x => x).ToArray().Select(x => (char) x).ToString(\"
    \");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6hgom92t.cs(18,24): error CS1503: Argument 1: cannot convert from ''int''
    to ''char''

    /tmp/tmp6hgom92t.cs(20,71): error CS1501: No overload for method ''ToString''
    takes 1 arguments

    '
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] tokens = numbers.Split(' ');\n        Array.Sort(tokens);\n        string
    sorted = String.Join(\" \", tokens);\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2fc6be418fb49749368532ec6287025>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c2fc6be418fb49749368532ec6287025>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = string.Empty;\n        Dictionary<int, int> dict
    = \n            new Dictionary<int, int>();\n        foreach(string s in numbers.Split(new
    char[] { ' ' })) {\n            if(!dict.ContainsKey(s)) {\n                dict[s]
    = 1;\n            } else {\n                dict[s] += 1;\n            }\n        }\n
    \       foreach(int x in dict.Keys.OrderBy(k => k)) {\n            sortedNumbers
    += \" \" + x;\n        }\n        return sortedNumbers.Trim();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42b_o33j.cs(19,34): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp42b_o33j.cs(20,22): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp42b_o33j.cs(22,22): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int[] numberArray = numbers.Split(' ').Select(x => Convert.ToInt32(x)).ToArray();\n
    \       Array.Sort(numberArray);\n        return String.Join(\" \", numberArray);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String x) [0x00000] in <0cd24739100643168ecbcdc86bff2b37>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray
    () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <0cd24739100643168ecbcdc86bff2b37>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0cd24739100643168ecbcdc86bff2b37>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String x) [0x00000] in <0cd24739100643168ecbcdc86bff2b37>:0 "
  stdout: ''
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numberArray = numbers.Split(' ');\n        Array.Sort(numberArray);\n
    \       return string.Join(\" \", numberArray);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ad778bf8d8a4b329aebd48431fb8327>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3ad778bf8d8a4b329aebd48431fb8327>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numberArray = numbers.Split(' ');\n        var numberArraySorted =
    numberArray.OrderBy(n => n);\n        return numberArraySorted.Aggregate((i, j)
    => i + \" \" + j);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa2caea4a60f4379a7bc4929576953d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aa2caea4a60f4379a7bc4929576953d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var arr = numbers.Split(' ');\n        var dict = new Dictionary<string,int>();\n
    \       var max = arr.Max();\n        var min = arr.Min();\n        for (int i
    = 0; i < arr.Length; i++) {\n            dict.Add(arr[i], 0);\n        }\n        foreach
    (var num in dict) {\n            int index = num.Key - min;\n            if (index
    >= 0) {\n                dict[index] += 1;\n            }\n        }\n        var
    result = string.Empty;\n        for (int i = 0; i < arr.Length; i++) {\n            result
    += arr[i];\n            if (dict[i] > 0) {\n                result += \" \" +
    dict[i];\n                dict[i] -= 1;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnpfjsrmk.cs(23,25): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''string'' and ''string''

    /tmp/tmpnpfjsrmk.cs(25,22): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpnpfjsrmk.cs(31,22): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpnpfjsrmk.cs(32,38): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpnpfjsrmk.cs(33,22): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       Debug.Assert(numbers.Contains(\"zero\") || numbers.Contains(\"one\") ||
    numbers.Contains(\"two\") || numbers.Contains(\"three\") || numbers.Contains(\"four\")
    || numbers.Contains(\"five\") || numbers.Contains(\"six\") || numbers.Contains(\"seven\")
    || numbers.Contains(\"eight\") || numbers.Contains(\"nine\"));\n        var sorted
    = numbers.Split(' ')\n            .OrderBy(n => n, StringComparer.OrdinalIgnoreCase);\n
    \       return string.Join(\" \", sorted);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.SortNumbers (System.String numbers) [0x00000] in <fa3f63b7b10340e594bc54b568c2ace9>:0
    \n  at Problem.Main (System.String[] args) [0x00000] in <fa3f63b7b10340e594bc54b568c2ace9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa3f63b7b10340e594bc54b568c2ace9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <49"
  stdout: ''
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] charArray = numbers.ToCharArray();\n        Array.Sort(charArray);\n
    \       return new string(charArray);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <040acc5f8d51484c904bf9d04e89c9b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <040acc5f8d51484c904bf9d04e89c9b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976391
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers.Length == 0) {\n            throw new ArgumentException(\"numbers\",
    \"No numbers provided\");\n        }\n        int i = 0;\n        string output
    = \"\";\n        foreach (string n in numbers.Split(' ')) {\n            if (i
    == 0) {\n                if (n == \"\") {\n                    throw new ArgumentException(\"numbers\",
    \"No numbers provided\");\n                }\n                output += n;\n                i++;\n
    \           } else {\n                if (n == \"\") {\n                    output
    += n;\n                } else {\n                    output += \" \" + n;\n                }\n
    \               i++;\n            }\n        }\n        string s = output.Trim();\n
    \       char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        return
    new string(chars);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: numbers\nParameter name:
    No numbers provided\n  at Problem.SortNumbers (System.String numbers) [0x00011]
    in <c32e3199cc2349dc87b8b8814c472039>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <c32e3199cc2349dc87b8b8814c472039>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentException: numbers\nParameter name: No numbers provided\n  at Problem.SortNumbers
    (System.String numbers) [0x00011] in <c32e3199cc2349dc87b8b8814c472039>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <c32e3199cc2349dc87b8b8814c472039>:0
    \n"
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       Debug.Assert(numbers.Length > 0, \"Invalid input: string cannot be empty\");\n
    \       List<int> nums = new List<int>();\n        foreach (string s in numbers.Split('
    ')) nums.Add(Int32.Parse(s));\n        Array.Sort(nums);\n        List<string>
    result = new List<string>();\n        foreach (int i in nums) result.Add(i.ToString());\n
    \       return string.Join(\" \", result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbt3s5fzk.cs(18,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numberList = new List<int>();\n        foreach (var num in numbers.Split('
    ')) numberList.Add(Convert.ToInt32(num));\n        numberList = numberList.Sort().ToList();\n
    \       return numbers.Replace(' ', string.Empty) + \" \" + numberList.Aggregate(new
    StringBuilder(), (current, n) => current.Append(n.ToString()), new StringBuilder()
    ).ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_v_v47a8.cs(17,39): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    /tmp/tmp_v_v47a8.cs(18,37): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    /tmp/tmp_v_v47a8.cs(18,70): error CS0411: The type arguments for method ''Enumerable.Aggregate<TSource,
    TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource,
    TAccumulate>, Func<TAccumulate, TResult>)'' cannot be inferred from the usage.
    Try specifying the type arguments explicitly.

    '
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string sortedNumbers = \"\";\n        string[] numberArray = numbers.Split('
    ');\n        string[] sortedNumberArray = numberArray.OrderBy(c => c).ToArray();\n
    \       foreach (string number in sortedNumberArray) {\n            sortedNumbers
    += number + \" \";\n        }\n        return sortedNumbers;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27101650ef0344148706e64e4f578f4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27101650ef0344148706e64e4f578f4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       bool sorted = false;\n        string result = \"\";\n        while(!sorted)
    {\n            sorted = true;\n            for(int i = 0; i < numbers.Length;
    i++) {\n                if(numbers.IndexOf(' ') + 1 == numbers[i].Length && numbers[i]
    != ' ') {\n                    bool found = false;\n                    for(int
    j = 0; j < numbers.Length - 1; j++) {\n                        if(numbers[j] ==
    numbers[i] && numbers[j + 1] == numbers[i]) {\n                            found
    = true;\n                            numbers.Remove(j, 1);\n                            numbers.Remove(j
    + 1, 1);\n                            sorted = false;\n                            break;\n
    \                       }\n                    }\n                    if(!found)
    {\n                        numbers.Insert(i, numbers[i]);\n                        sorted
    = false;\n                    }\n                }\n            }\n        }\n
    \       for(int i = 0; i < numbers.Length; i++) {\n            result += numbers[i]
    + \" \";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2chl3iy.cs(20,59): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpu2chl3iy.cs(32,43): error CS1503: Argument 2: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var numberList = numbers.Split(' ').Select(int.Parse);\n        var sorted
    = numberList.OrderBy(i => i);\n        var stringBuilder = new StringBuilder();\n
    \       for (int i = 0; i < sorted.Count(); i++)\n            stringBuilder.Append(sorted[i]);\n
    \       return stringBuilder.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpseebw5xd.cs(19,34): error CS0021: Cannot apply indexing with [] to an
    expression of type ''IOrderedEnumerable<int>''

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Use BigInteger to convert string to int\n        BigInteger n = BigInteger.Parse(numbers);\n
    \       // Convert string into array of ints\n        int[] ints = n.ToString().Select(c
    => (int)char.GetNumericValue(c)).ToArray();\n        // Sort ints from smallest
    to largest\n        Array.Sort(ints);\n        // Convert the ints back to string\n
    \       return ints.Select(i => char.ConvertFromUtf32(i)).Aggregate(string.Empty,
    (c, i) => c + i);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: The value could not be
    parsed.\n  at System.Numerics.BigNumber.ParseBigInteger (System.ReadOnlySpan`1[T]
    value, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo
    info) [0x0001e] in <60e4143c0cb74cd7b46ca0d0274780b4>:0 \n  at System.Numerics.BigNumber.ParseBigInteger
    (System.String value, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo
    info) [0x00014] in <60e4143c0cb74cd7b46ca0d0274780b4>:0 \n  at System.Numerics.BigInteger.Parse
    (System.String value, System.Globalization.NumberStyles style, System.IFormatProvider
    provider) [0x00008] in <60e4143c0cb74cd7b46ca0d0274780b4>:0 \n  at System.Numerics.BigInteger.Parse
    (System.String value, System.Globalization.NumberStyles style) [0x00007] in <60e4143c0cb74cd7b46ca0d0274780b4>:0
    \n  at System.Numerics.BigInteger.Parse (System.String value) [0x00000] in <60e4143c0cb74cd7b46ca0d0274780b4>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00001] in <4fe225fe29ee40caa8961d44c1ff8d5b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <4fe225fe29ee40caa8961d44c1ff8d5b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: The value could not
    be parsed.\n  at System.Numerics.BigNumber.ParseBigInteger (System.ReadOnlySpan`1[T]
    value, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo
    info) [0x0001e] in <60e4143c0cb74cd7b46ca0d0274780b4>:0 \n  at System.Numerics.BigNumber.ParseBigInteger
    (System.String value, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo
    info) [0x00014] in <60e4143c0cb74cd7b46ca0d0274780b4>:0 \n  at System.Numerics.BigInteger.Parse
    (System.String value, System.Globalization.NumberStyles style, System.IFormatProvider
    provider) [0x00008] in <60e4143c0cb74cd7b46ca0d0274780b4>:0 \n  at System.Numerics.BigInteger.Parse
    (System.String value, System.Globalization.NumberStyles style) [0x00007] in <60e4143c0cb74cd7b46ca0d0274780b4>:0
    \n  at System.Numerics.BigInteger.Parse (System.String value) [0"
  stdout: ''
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var parts = numbers.Split(' ');\n        var ordered = parts.OrderBy(x
    => x);\n        return string.Join(\" \", ordered);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1163c0d6590496db05965b247b2325f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1163c0d6590496db05965b247b2325f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // We assume that the numbers are in lexicographical order\n        string[]
    numberStrings = numbers.Split(' ');\n\n        // We need to find the positions
    of the numbers in the array\n        int[] positions = new int[numberStrings.Length];\n
    \       for (int i = 0; i < numberStrings.Length; i++) {\n            positions[i]
    = i;\n        }\n\n        // Sort the numbers in reverse order and \n        //
    then reverse the array to match the input order\n        // This way the first
    number will match the input order\n        Array.Sort(positions, (a, b) => { \n
    \           return numberStrings[b].CompareTo(numberStrings[a]); \n        });\n
    \       Array.Sort(numberStrings, (a, b) => { \n            return positions[b].CompareTo(positions[a]);
    \n        });\n\n        // Convert our sorted array to a string by adding each
    number to the string in a new line and \n        // returning the string with
    line breaks\n        string result = string.Join(Environment.NewLine, numberStrings);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0l2bvz9p.cs(31,20): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    /tmp/tmp0l2bvz9p.cs(31,43): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string numbersWithNumbers = String.Empty;\n        foreach (char c in
    numbers.ToCharArray()) {\n            if (numbersWithNumbers.Length > 0) {\n                numbersWithNumbers
    += \" \";\n            }\n            numbersWithNumbers += c;\n        }\n\n
    \       numbersWithNumbers = numbersWithNumbers.Replace(\" \", String.Empty);\n
    \       List<int> numberArray = numbersWithNumbers.Split().Select(x => Convert.ToInt32(x)).ToList();\n
    \       Array.Sort(numberArray);\n        string sortedNumbers = String.Empty;\n
    \       foreach (int number in numberArray) {\n            sortedNumbers += number
    + \" \"; // TODO: use StringBuilder\n        }\n        return sortedNumbers.Trim();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsora7fay.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] nums = numbers.Split(' ');\n        Array.Sort(nums);\n        return
    String.Join(\" \", nums);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <859e371b9f5e4ede8b5948c0094b0d41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <859e371b9f5e4ede8b5948c0094b0d41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       int digitCount = numbers.Count() + 1;\n        int numDigits = digits
    - 1;\n        int[] numberArray = new int[digitCount];\n        bool isNegative
    = false;\n        if (numbers.StartsWith(\"-\")) {\n            isNegative = true;\n
    \           numbers = numbers.Substring(1);\n        }\n        string[] tokens
    = numbers.Split(' ');\n        if (tokens.Length != digitCount) {\n            throw
    new ArgumentException(\"Expecting \" + digitCount + \" numbers but got \" + tokens.Length);\n
    \       }\n        for (int i = 0; i < tokens.Length; i++) {\n            int
    number = Int32.Parse(tokens[i]);\n            int decimal = Convert.ToInt32(Math.Truncate(number
    / Math.Pow(10, numDigits)));\n            int fraction = number - (decimal * Math.Pow(10,
    numDigits));\n            numberArray[numDigits--] = decimal;\n        }\n        Array.Sort(numberArray);\n
    \       if (isNegative) {\n            numberArray[0] = numberArray[1] * -1;\n
    \       }\n        StringBuilder result = new StringBuilder(numbers);\n        for
    (int i = numberArray.Length - 1; i >= 0; i--) {\n            if (numberArray[i]
    > 0) {\n                result.Append(Convert.ToString(numberArray[i]));\n                if
    (i != 0) {\n                    result.Append(\" \");\n                }\n            }\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1k5jner.cs(29,17): error CS1001: Identifier expected

    /tmp/tmp_1k5jner.cs(29,17): error CS1002: ; expected

    /tmp/tmp_1k5jner.cs(29,25): error CS1001: Identifier expected

    /tmp/tmp_1k5jner.cs(30,38): error CS1525: Invalid expression term ''decimal''

    /tmp/tmp_1k5jner.cs(31,40): error CS1525: Invalid expression term ''decimal''

    '
  timestamp: 1659976394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] chars = numbers.ToCharArray();\n        Array.Sort(chars);\n        return
    string.Join(\" \", chars);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59e2ec0e238f4d78911b9da03196d63c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59e2ec0e238f4d78911b9da03196d63c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       numbers = numbers.Trim();\n        var sorted = numbers.Split(' ')\n            .Select(number
    => Convert.ToInt32(number))\n            .OrderBy(number => number)\n            .Select(number
    => number.ToString())\n            .ToList();\n        return string.Join(\" \",
    sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String number) [0x00000] in <186b7dff27c143478fba24755af96fa1>:0 \n  at
    System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray () [0x00012]
    in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext
    () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].ToList
    () [0x00052] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0007e] in <186b7dff27c143478fba24755af96fa1>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <186b7dff27c143478fba24755af96fa1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globali"
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       ArrayList numbersList = new ArrayList();\n        foreach (char c in numbers.ToCharArray())
    {\n            numbersList.Add(c);\n        }\n        Array.Sort(numbersList);\n
    \       string result = \"\";\n        foreach (char c in numbersList) {\n            result
    = result + c;\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8lo4w4io.cs(15,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp8lo4w4io.cs(15,37): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659976395
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberArray = numbers.Split(' ');\n\n        var sorted = numberArray.OrderBy(x
    => x);\n        return string.Join(\" \", sorted);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96a77344b71b45f1b40503897a994a0f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <96a77344b71b45f1b40503897a994a0f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers.Length < 1) {\n            throw new Exception(\"Invalid input
    string\");\n        }\n        Dictionary<string, int> dict = new Dictionary<string,
    int>();\n        foreach (string s in numbers.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries))
    {\n            int temp;\n            try {\n                temp = Convert.ToInt32(s);\n
    \           } catch {\n                throw new Exception(\"Invalid input string
    \" + s);\n            }\n            if (dict.ContainsKey(s)) {\n                dict[s]
    += temp;\n            } else {\n                dict[s] = temp;\n            }\n
    \       }\n        List<int> sortedList = new List<int>();\n        foreach (KeyValuePair<string,
    int> kvp in dict) {\n            sortedList.Add(kvp.Value);\n        }\n        sortedList.Sort();\n
    \       StringBuilder result = new StringBuilder();\n        for (int i = 0; i
    < sortedList.Count; ++i) {\n            result.Append(sortedList[i]);\n            if
    (i < sortedList.Count - 1) {\n                result.Append(\" \");\n            }\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Exception: Invalid input string\n  at Problem.SortNumbers
    (System.String numbers) [0x0000f] in <8b7d3bfa290f4a0ab1a1ada62c8c775b>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <8b7d3bfa290f4a0ab1a1ada62c8c775b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Invalid input string\n
    \ at Problem.SortNumbers (System.String numbers) [0x0000f] in <8b7d3bfa290f4a0ab1a1ada62c8c775b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <8b7d3bfa290f4a0ab1a1ada62c8c775b>:0
    \n"
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       var list = numbers.Trim().Split(' ');\n        return list.Select(x =>
    int.Parse(x.ToString())).OrderBy(x => x).ToArray().ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00006] in <2668413cac2d46ce93e9e21833076398>:0
    \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray ()
    [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x00059] in <2668413cac2d46ce93e9e21833076398>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <2668413cac2d46ce93e9e21833076398>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00006] in <2668413cac2d46ce93e9e21833076398>:0
    \n  at System."
  stdout: ''
  timestamp: 1659976395
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string[] numberArray = numbers.Split(new char[] { ' ' });\n        Array.Sort(numberArray);\n
    \       return string.Join(\" \", numberArray);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87619a3d1e9b465db807e8fe3482d851>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87619a3d1e9b465db807e8fe3482d851>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null)\n            throw new ArgumentNullException(nameof(numbers));\n\n
    \       char[] delimiters = new char[] { ' ' };\n        List<string> numbersList
    = numbers.Split(delimiters).Select(s => Convert.ToInt32(s)).OrderBy(n => n).Select(n
    => n.ToString()).ToList();\n        return string.Join(\" \", numbersList.ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String s) [0x00000] in <0921a26dce414e20b8699c3c45128a60>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToArray
    () [0x00012] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Buffer`1[TElement]..ctor
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0000a] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext
    () [0x0001e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable+SelectIPartitionIterator`2[TSource,TResult].ToList
    () [0x00052] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00093] in <0921a26dce414e20b8699c3c45128a60>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0921a26dce414e20b8699c3c45128a60>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalizatio"
  stdout: ''
  timestamp: 1659976395
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // Write your code here.\n        string[] numberArray = numbers.Split('
    ');\n        Array.Sort(numberArray);\n        string sortedNumbers = String.Join(\"
    \", numberArray);\n        return sortedNumbers;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1857eeeab66743d781cef83ed278920e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1857eeeab66743d781cef83ed278920e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<string> numberList = numbers.Split(' ').ToList();\n        int[]
    numberArray = new int[numberList.Count];\n        for (int i = 0; i < numberList.Count;
    i++) {\n            numberArray[i] = Convert.ToInt32(numberList[i]);\n        }\n
    \       Array.Sort(numberArray);\n        string result = \"\";\n        for (int
    i = 0; i < numberArray.Length; i++) {\n            if (i > 0) result += (\" \");\n
    \           result += numberArray[i].ToString();\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0002a] in <76a49856a340443f84acb5fa54040b4b>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <76a49856a340443f84acb5fa54040b4b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers
    (System.String numbers) [0x0002a] in <76a49856a340443f84acb5fa54040b4b>:0 \n  at
    Problem.Main (System.String[] args) [0x00001] in <76a49856a340443f84acb5fa54040b4b>:0
    \n"
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberList = numbers.Split(' ').Select(a => Convert.ToInt32(a)).ToList();\n\n
    \       foreach (int number in numberList) {\n            int max = numberList.Max();\n
    \           int min = numberList.Min();\n\n            if (number > max && number
    < min) {\n                numberList.Remove(number);\n            }\n        }\n\n
    \       string numbersAsString = string.Join(\" \", numberList.OrderByDescending(a
    => a).ThenByDescending(a => a));\n\n        return numbersAsString;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String a) [0x00000] in <75edf33a9cce4e12b2f7582d7bf834ac>:0 \n  at System.Linq.Enumerable+SelectArrayIterator`2[TSource,TResult].ToList
    () [0x00014] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToList[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x0002e] in <75edf33a9cce4e12b2f7582d7bf834ac>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <75edf33a9cce4e12b2f7582d7bf834ac>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String
    value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0
    (System.String a) [0x00000] in <75edf33a9cce4e12b2f7582d7bf834ac>:0 \n "
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result=\"\";\n        // Scan through the string one character
    at a time and build an array to store the digits of each number.\n        int[]
    digits = new int[numbers.Length];\n        for(int i=0;i<numbers.Length;i++) {\n
    \           int digit;\n            if(numbers.Substring(i, 1, out digit)!=null
    && numbers!=null && numbers.Length > i) {\n                digits[i-1] = digit;\n
    \           }\n        }\n        // Sort the digits from smallest to largest.\n
    \       Array.Sort(digits);\n        // Put them back together into a string with
    spaces between each one.\n        for(int i=0;i<numbers.Length;i++) {\n            if(digits[i]>9)
    {\n                result+=' '+((char)((int)digits[i]+9));\n            } else
    {\n                result+=((char)digits[i]);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb240zdei.cs(20,24): error CS1501: No overload for method ''Substring''
    takes 3 arguments

    '
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       string result = string.Empty;\n        List<int> ints = new List<int>();\n\n
    \       foreach (string s in numbers.Split(' '))\n            ints.Add(Int32.Parse(s));\n\n
    \       ints.Sort();\n\n        result = String.Join(\" \", ints);\n\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00021] in <534674c47bad4a9d8c9a596ca3f779b9>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <534674c47bad4a9d8c9a596ca3f779b9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was
    not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SortNumbers (System.String numbers) [0x00021] in <534674c47bad4a9d8c9a596ca3f779b9>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <534674c47bad4a9d8c9a596ca3f779b9>:0
    \n"
  stdout: ''
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       char[] charArray = numbers.ToCharArray();\n        int[] intArray = Enumerable.Range(0,
    numbers.Length).Select(i => (int)charArray[i]).ToArray();\n        intArray.Sort(new
    Comparison<int>((x, y) => { return int.Parse(numbers[int.Parse(numbers)].ToString())
    - int.Parse(numbers[int.Parse(numbers)].ToString()); }));\n        return new
    string(charArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvb399a0x.cs(17,23): error CS1503: Argument 1: cannot convert from ''System.Comparison<int>''
    to ''System.Array''

    '
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null)\n            return null;\n        List<int> results
    = new List<int>();\n        string[] words = numbers.Split(\" \");\n        foreach
    (string word in words) {\n            int number;\n            try {\n                number
    = int.Parse(word);\n            } catch (FormatException) {\n                return
    \"InvalidNumber\";\n            }\n            results.Add(number);\n        }\n
    \       Array.Sort(results);\n        StringBuilder sb = new StringBuilder();\n
    \       foreach (int number in results) {\n            sb.Append(number);\n            sb.Append(\"
    \");\n        }\n        return sb.ToString().Trim();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6bp48zm.cs(28,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<int>''
    to ''System.Array''

    '
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       List<int> numberList = new List<int>();\n        for (int i = 0; i < numbers.Length;
    i++) {\n            numberList.Add(Convert.ToInt32(numbers[i]))\n        }\n\n
    \       // Now sort the numbers in decending order.\n        numberList.Sort();\n\n
    \       // Now join the numbers into a string, separated by spaces.\n        return
    String.Join(\" \", numberList);\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp98r9tet4.cs(17,56): error CS1002: ; expected

    '
  timestamp: 1659976394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       if (numbers == null || numbers.Length == 0) {\n            throw new ArgumentException();\n
    \       }\n        var chars = new List<char>();\n        int num = int.Parse(numbers.Split('
    ').First());\n        for (int i = 0; i < numbers.Length; ++i) {\n            int
    digit = Convert.ToInt32(numbers[i]);\n            if (digit == num) {\n                chars.Add(numbers[i]);\n
    \           } else {\n                var last = num;\n                while (num
    > 0 && num % 10 == last) num = (num / 10).ToString();\n                var rem
    = num.ToString();\n                chars.Insert(0, rem.ToCharArray()[0]);\n                num
    = digit;\n            }\n        }\n        return new string(chars.ToArray());\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy32ws75e.cs(26,59): error CS0029: Cannot implicitly convert type ''string''
    to ''int''

    '
  timestamp: 1659976395
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       HashSet<string> numberSet = new HashSet<string>();\n        numberSet.Add(\"zero\");\n
    \       numberSet.Add(\"one\");\n        numberSet.Add(\"two\");\n        numberSet.Add(\"three\");\n
    \       numberSet.Add(\"four\");\n        numberSet.Add(\"five\");\n        numberSet.Add(\"six\");\n
    \       numberSet.Add(\"seven\");\n        numberSet.Add(\"eight\");\n        numberSet.Add(\"nine\");\n
    \       foreach (string s in numbers) {\n            numberSet.Add(s);\n        }\n
    \       string[] numberArray = numbers.Split(new char[] { ' ' });\n        List<string>
    numberList = new List<string>();\n        foreach (string s in numberArray) {\n
    \           numberList.Add(s);\n        }\n        List<string> sortedNumberList
    = new List<string>();\n        sortedNumberList = numberList.OrderBy(x => x).ToList();\n
    \       StringBuilder sb = new StringBuilder();\n        foreach (string s in
    sortedNumberList) {\n            sb.Append(s);\n            sb.Append(\" \");\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n
    \   Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n
    \   Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero
    four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four
    three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv32xshvd.cs(26,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1659976395
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input is a space-delimited string of numberals from 'zero' to
    'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',
    'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted
    from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    //
    (\"one three five\")\n    public static string SortNumbers(string numbers) {\n
    \       // First split the input into a list of numbers. \n        // 'three',
    'one', 'five'\n        var numberArray = numbers.Split(' ');\n        // Now sort
    it.\n        Array.Sort(numberArray);\n        // Now join it back up into a string.\n
    \       return String.Join(\" \", numberArray);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n
    \   Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three
    five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five
    zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n
    \   Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero
    one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <219b2606071142e1b3b4b33caa17fdc4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <219b2606071142e1b3b4b33caa17fdc4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976395
