name: HumanEval_13_greatest_common_divisor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return a greatest common divisor of two integers a and b\n \
  \   // >>> GreatestCommonDivisor((3L), (5L))\n    // (1L)\n    // >>> GreatestCommonDivisor((25L),\
  \ (15L))\n    // (5L)\n    public static long GreatestCommonDivisor(long a, long\
  \ b) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GreatestCommonDivisor((3L),\
  \ (7L)) == (1L));\n    Debug.Assert(GreatestCommonDivisor((10L), (15L)) == (5L));\n\
  \    Debug.Assert(GreatestCommonDivisor((49L), (14L)) == (7L));\n    Debug.Assert(GreatestCommonDivisor((144L),\
  \ (60L)) == (12L));\n    }\n\n}\n"
completions: ["        if (a == 0) return b;\n        if (b == 0) return a;\n    \
    \    return GreatestCommonDivisor(b, a % b);", "        long gcd = 1;\n      \
    \  while (a != 0) {\n            if (b % a == 0) {\n                gcd = a;\n\
    \                break;\n            }\n            a /= b;\n        }\n     \
    \   return gcd;", '        return a.Mod(b);', "        // If the divisors are\
    \ equal, return 0\n        if (b == 0) {\n            return a;\n        }\n \
    \       // If the dividend is greater, divide it by its divisor\n        if (a\
    \ > b) {\n            long gcd1 = GreatestCommonDivisor(a % b, b);\n         \
    \   if (gcd1 > 0) {\n                long gcd2 = GreatestCommonDivisor(b, a %\
    \ b);\n                if (gcd2 > 0) {\n                    return gcd1;\n   \
    \             }\n            }\n        }\n        // If the dividend is less,\
    \ divide it by the divisor\n        if (a < b) {\n            long gcd1 = GreatestCommonDivisor(a\
    \ % b, b);\n            if (gcd1 > 0) {\n                long gcd2 = GreatestCommonDivisor(b,\
    \ a % b);\n                if (gcd2 > 0) {\n                    return gcd2;\n\
    \                }\n            }\n        }\n        // If both are same, return\
    \ 0\n        return 0;", "        // Compute the greatest common divisor of 'a'\
    \ and 'b'\n        // First, compute a%b using integer division:\n        long\
    \ gcd = a % b;\n        // Now compute the remainder of 'a' / 'b':\n        a\
    \ = a / b;\n        // Finally, compute the remainder of 'a' / 'gcd ':\n     \
    \   a = a / gcd;\n        return a;", "        long gcd = 1;\n        while (b\
    \ > 0) {\n            if (b & 1) gcd = (b & a) == a ? a : gcd;\n            b\
    \ >>= 1;\n        }\n        return gcd;", "        if (a > b) {\n           \
    \ return GreatestCommonDivisor(b, a);\n        }\n        long gcd = 1;\n    \
    \    while (a % b != 0) {\n            gcd = b * gcd;\n            a = a % b;\n\
    \        }\n        return gcd;", '        return b == 0 ? a : GreatestCommonDivisor(b,
    a % b);', "        while (b > 0) {\n            long t = b;\n            b = a\
    \ % b;\n            a = t;\n        }\n        return a;", "        long result\
    \ = a % b;\n        while (result != 0) {\n            result = b % result;\n\
    \        }\n        return result;", "        long x;\n        long y;\n     \
    \   for (; b > 0; b--) {\n            x = a;\n            y = b;\n           \
    \ while (y > 0) {\n                if (x % y == 0) {\n                    break;\n\
    \                }\n                x /= y;\n                --y;\n          \
    \  }\n            if (y == 0) {\n                break;\n            }\n     \
    \       a = x;\n        }\n        return a;", "        while (b != 0) {\n   \
    \         long temp = b;\n            b = a % b;\n            a = temp;\n    \
    \    }\n        return a;", "        // Initialize variables that will be used\
    \ to calculate the GCD\n        long g = a, h = b; // gcd\n\n        // The loop\
    \ will run while one of the numbers is > 0\n        while (b > 0) {\n        \
    \    // If b is 0, then the next line will set g to be the remainder of a\n  \
    \          // divided by b, so g will be the gcd of a and b.\n            g =\
    \ b; // gcd\n            h = a % b; // remainder\n\n            // If a is 0,\
    \ then the next line will set b to be the remainder of a\n            // divided\
    \ by b, so b will be the gcd of a and b.\n            b = h; // b\n          \
    \  a = g; // a\n        }\n        return h;", "        if (a < b) var t = a;\
    \ a = b; b = t;\n        return (b % a) / a;", '        return ((a % b) == 0)
    ? b : GreatestCommonDivisor(b, a % b);', "        long gcd = 1;\n        while\
    \ (a != 0) {\n            long remainder = a;\n            a = b%a;\n        \
    \    b /= gcd;\n            gcd *= b;\n        }\n        return gcd;", "    \
    \    while (b != 0) {\n            if (b / a > 0)\n                a = a % b;\n\
    \            else\n                b = b % a;\n        }\n        return a;",
  "        long gcd = 1;\n        while (b != 0) {\n            long temp = b;\n \
    \           b %= a;\n            a = temp;\n            gcd = (b > 0) ? gcd :\
    \ -gcd ;\n        }\n        return gcd ;", "        if (a>b)\n            return\
    \ GreatestCommonDivisor(b,a);\n        long gcd = 1;\n        while (b != 0) {\n\
    \            long temp = b;\n            b = a % b;\n            a = temp;\n \
    \           gcd *= b;\n        }\n        return gcd;", "        long gcd = 1;\n\
    \        for (long temp = a; temp <= b; temp++) {\n            if (temp % gcd\
    \ == 0) {\n                return gcd;\n            }\n            gcd = (gcd\
    \ % temp);\n        }\n        return gcd;", "        if (a < b) Swap(a, b);\n\
    \        long remainder = 0;\n        while (b != 0) {\n            if (a > b)\
    \ {\n                a %= b;\n                remainder += b;\n              \
    \  b = a / b;\n            } else {\n                b %= a;\n               \
    \ remainder += a;\n                a = b / a;\n            }\n        }\n    \
    \    return remainder;", "        long gcd;\n        do {\n            gcd = a\
    \ % b;\n            a /= b;\n            b /= gcd;\n        } while (b != 0);\n\
    \        return gcd;", "        while (b > 0) {\n            long c = a % b;\n\
    \            a = b;\n            b = c;\n        }\n        return a;", "    \
    \    if (a==0 || b==0)\n            return 0;\n        long gcd = GreatestCommonDivisor(b,\
    \ a % b);\n        if (a/gcd == b)\n            return gcd;\n        else\n  \
    \          return a % b;", "        if (a == 0) {\n            if (b == 0) {\n\
    \                return a;\n            } else {\n                return b;\n\
    \            }\n        }\n        if (b == 0) {\n            return a;\n    \
    \    }\n        return GreatestCommonDivisor(a % b, b);", "        if (a == 0\
    \ || b == 0)\n            return 0;\n        if (a == 1)\n            return b;\n\
    \        if ((a % b) == 0)\n            return b;\n        long c = 1;\n     \
    \   while (a != 0) {\n            if (a % b == 0)\n                c++;\n    \
    \        a /= b;\n        }\n        return c;", "        if (a < b) Swap(a, b);\n\
    \        long n = 1;\n        while ((a % n) != 0 || (b % n) != 0) {\n       \
    \     n <<= 1;\n        }\n        while (a % n != 0) {\n            a >>= 1;\n\
    \            b >>= 1;\n            n <<= 1;\n        }\n        while (b % n !=\
    \ 0) {\n            b >>= 1;\n            n <<= 1;\n        }\n        if (a <\
    \ b) return a;\n        return b;", '        return a % b;', '        return (b
    == 0) ? a : GreatestCommonDivisor(b, a % b);', "        if (a * b == 0) return\
    \ b;\n        if (a * b == 1) return a;\n        return GreatestCommonDivisor(b,\
    \ a % b);", "        if (a%b == 0) return b;\n        if (a%b != 0) return GreatestCommonDivisor(b,a%b);\n\
    \        return 1;", "        // http://stackoverflow.com/questions/916000/fast-greatestcommondivisor-function\n\
    \        long p = a;\n        long q = b;\n        while (q != 0) {\n        \
    \    long r = p % q;\n            p = q;\n            q = r;\n        }\n    \
    \    return p;", "        // Only if both a & b are larger than 0\n        if\
    \ (a <= 0 || b <= 0) {\n            return 0L;\n        }\n        if (b == 1)\
    \ {\n            return a;\n        }\n        else {\n            long gcd =\
    \ GreatestCommonDivisor(b, a % b);\n            return b == gcd ? a : gcd;\n \
    \       }", "        if (a%b == 0) return a;\n        else return GreatestCommonDivisor(b,a%b);",
  "        while (a != 0) {\n            if (a > b) a %= b;\n            else\n  \
    \              b = (b % a); \n        }\n        return b;", "        long n =\
    \ a;\n        while (n > b)\n            n = n % b;\n        return b;", '        return
    (b == 0) ? a : GreatestCommonDivisor(b, a%b);', "        long temp;\n        while\
    \ (b > 0) {\n            if (a > b) {\n                temp = a;\n           \
    \     a = b;\n                b = temp;\n            }\n            temp = b;\n\
    \            b = temp / a;\n        }\n        return a;", "        if (a == 0)\
    \ {\n            return b;\n        }\n        if (b == 0) {\n            return\
    \ a;\n        }\n        if ((a % b) == 0) {\n            return GreatestCommonDivisor(b,\
    \ a / b);\n        }\n        return GreatestCommonDivisor(b, (a % b));", "  \
    \      if (b == 0) {\n            return a;\n        } else {\n            return\
    \ GreatestCommonDivisor(b, a % b);\n        }", "        while (a != 0) {\n  \
    \          long g = a % b;\n            a = b;\n            b = g;\n        }\n\
    \        return b;", "        if ((a != 0) && (b != 0)) {\n            return\
    \ GreatestCommonDivisor(b, a % b);\n        } else if ((a == 0) && (b == 0)) {\n\
    \            return 1;\n        } else {\n            throw new ArgumentException(\"\
    Invalid parameters for GreatestCommonDivisor\");\n        }", '        return
    (a * b) / (a % b);', "        while (a != 0) {\n            long remainder = a;\n\
    \            a = b % a;\n            b = remainder;\n        }\n        return\
    \ b;", "        long c = a;\n        while (c > 0 && b > 0) {\n            long\
    \ t = c;\n            c = b;\n            b = t;\n        }\n        if (c > 0)\n\
    \            return c;\n        return b;", "        long a = Convert.ToInt64(a);\n\
    \        long b = Convert.ToInt64(b);\n        long gcd = 1;\n        while (b\
    \ > 0) {\n            long rr = a % b;\n            a = b;\n            b = rr;\n\
    \            gcd = b;\n        }\n        return gcd;", "        if (a==0)\n \
    \           return b;\n        else if (b==0)\n            return a;\n       \
    \ else\n            return GreatestCommonDivisor(b, a % b);", '        return
    b == 0 ? a : GreatestCommonDivisor(b, a % b);', "        // a is always less or\
    \ equal to b.\n        if (a > b) {\n            long temp = b;\n            b\
    \ = a;\n            a = temp;\n        }\n        // If the numbers are equal,\
    \ a is always the lower number\n        if (a==b) return a;\n        // Find the\
    \ highest common divisor of the numbers\n        for (long i = 1;;i++) {\n   \
    \         // If a is divisible by i, the result is the answer\n            if\
    \ (a % i == 0) {\n                return i;\n            }\n            // If\
    \ b is divisible by i, the result is the answer\n            if (b % i == 0) {\n\
    \                return i;\n            }\n            // If a and b are not divisible\
    \ by i, swap a and b and try again.\n            long temp = a;\n            a\
    \ = b;\n            b = temp;\n        }", "        int remainder;\n        while\
    \ ((a & 1) == 0) {\n            a >>= 1;\n            b >>= 1;\n        }\n  \
    \      while ((b & 1) == 0) {\n            b >>= 1;\n            a >>= 1;\n  \
    \      }\n        if ((a & 1) == b) {\n            return a;\n        }\n    \
    \    while (b != 0) {\n            int t = b;\n            b = a & b;\n      \
    \      a = t;\n        }\n        return a;", "        long result = 1;\n    \
    \    while (b != 0) {\n            long r = a % b;\n            a = b;\n     \
    \       b = r;\n        }\n        return result;", "        // If either integer\
    \ is zero, return 0\n        if (b == 0)\n            return a;\n        // Otherwise,\
    \ return GreatestCommonDivisor(Remainder(a, b))\n        else\n            return\
    \ GreatestCommonDivisor(Remainder(a, b), b);", '        return a.LCM(b);', " \
    \       // if either a or b is zero then return zero\n        if (a==0 || b==0)\
    \ {\n            return 0;\n        }\n        // else if a is zero then return\
    \ b\n        if (a==0) {\n            return b;\n        }\n        // else if\
    \ b is zero then return a \n        if (b==0) {\n            return a;\n     \
    \   }\n        \n        // else if both are odd, then return a and b divided\
    \ by 2\n        if ((a & 1)==1) {\n            return GreatestCommonDivisor(b,\
    \ a >> 1);\n        }\n        \n        // else if both are even, then return\
    \ their greatest common divisor\n        return GreatestCommonDivisor(a, (a >>\
    \ 1) | (b >> 1));", "        long greatestCommonDivisor = 0;\n        for (long\
    \ divisor = 1; divisor <= b; divisor++) {\n            if (a % divisor == 0 &&\
    \ b % divisor == 0) {\n                greatestCommonDivisor = divisor;\n    \
    \        }\n        }\n        return greatestCommonDivisor;", "        long gcd\
    \ = 1;\n        while (a > 0) {\n            if ((a % b) == 0) {\n           \
    \     gcd = b;\n                break;\n            }\n            else {\n  \
    \              gcd = (a % b);\n            }\n            a = a / b;\n       \
    \ }\n        return gcd;", "        long res = 1;\n        while (a > 1) {\n \
    \           if (b % a != 0) {\n                a /= 2;\n                res =\
    \ Math.Max(res, a);\n            } else {\n                b /= 2;\n         \
    \       res = Math.Max(res, b);\n            }\n        }\n        return res;",
  "        // Initialize greatest common divisor to zero\n        long gcd = 1;\n\n\
    \        // Iterate through the smaller of the two numbers until a number is\n\
    \        // found that is divisible by the current gcd number\n        while (a\
    \ % gcd != 0 || b % gcd != 0) {\n            // If the current gcd number is larger\
    \ than the current number\n            // being tested, set the new gcd number\
    \ to that number\n            if (gcd > b)\n                gcd = b;\n       \
    \     // If the current gcd number is less than the current number\n         \
    \   // being tested, set the new gcd number to that number\n            else if\
    \ (gcd < a)\n                gcd = a;\n        }\n\n        // If there is only\
    \ one number in the gcd between a and b, return\n        // that number\n    \
    \    return gcd;", "        long r = 1;\n        while (b != 0) {\n          \
    \  long c = a % b;\n            a = b;\n            b = c;\n        }\n      \
    \  return r;", "        while (b != 0) {\n            if (a > b) {\n         \
    \       a %= b;\n            } else {\n                b %= a;\n            }\n\
    \        }\n        return a;", "        if (a<b) {\n            return GreatestCommonDivisor(b,\
    \ a);\n        }\n        if (b==0) {\n            return a;\n        }\n    \
    \    int gcd = 1;\n        while (a != b) {\n            if ((a & 1) == 0) {\n\
    \                gcd = a;\n                a = a >> 1;\n            }\n      \
    \      else {\n                gcd = b;\n                b = b >> 1;\n       \
    \     }\n        }\n        return gcd;", "        if (a * b == 0) {\n       \
    \     return 0;\n        }\n\n        while (b != 0) {\n            long temp\
    \ = a;\n            a = b;\n            b = temp % b;\n        }\n        return\
    \ a;", "        if (b == 0) {\n            return a;\n        }\n        else\
    \ {\n            return GreatestCommonDivisor(b, (a%b));\n        }", "      \
    \  long x = a;\n        long y = b;\n        long gcd = 1;\n\n        while (y\
    \ != 0) {\n            long temp = (x % y);\n            x = y;\n            y\
    \ = temp;\n            gcd++;\n        }\n        return gcd;", "        long\
    \ x = 1;\n        long y = 1;\n        while (b > 0) {\n            if (b%2 ==\
    \ 1) {\n                x = a*x;\n            }\n            else {\n        \
    \        y = b*y;\n            }\n            b /= 2;\n        }\n        return\
    \ y;", "        // Special cases\n        if (a == 0) return b;\n        if (b\
    \ == 0) return a;\n\n        // Calculate the GCD (Greatest Common Divisor) of\
    \ two numbers a and b\n        // a / gcd(a, b) =  (a / gcd(b, a)) * (b / gcd(b,\
    \ a))\n        // So gcd(a, b) >= gcd(b, a) >= b\n        // The greatest common\
    \ divisor is thus gcd(a, b) = gcd(b, a)\n        long gcdA = GreatestCommonDivisor(b,\
    \ a % b);\n        long gcdB = GreatestCommonDivisor(b, a % gcdA);\n        return\
    \ gcdA * gcdB;", '        return a == 0 ? b : GreatestCommonDivisor(b % a, a);',
  "        // Euclid's algorithm to compute GCD\n        // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \        long remainder;\n        long d;\n        while (a != 0) {\n        \
    \    d = a % b;\n            a = b;\n            b = d;\n        }\n        return\
    \ a;", "        long gcd = 0;\n        // We are working with unsigned integers,\
    \ so a >= 0\n        while (b != 0) {\n            long temp = b;\n          \
    \  b = a % b;\n            a = temp;\n            gcd = (gcd > a) ? gcd : a;\n\
    \        }\n        return gcd;", "        if (b == 0) {\n            return a;\n\
    \        }\n        return GreatestCommonDivisor(b, a % b);", "        long gcd\
    \ = 0;\n        while (a != 0) {\n            gcd = a % b; a = b;\n          \
    \  b = gcd;\n        }\n        return gcd;", "        long gcd = 0;\n       \
    \ while (b != 0) {\n            gcd = b > 0 ? a % b : (a / b) * b;\n         \
    \   a = b;\n            b = gcd;\n        }\n        return gcd;", "        if\
    \ (a < 0 || b < 0) {\n            throw new ArgumentOutOfRangeException(\"Parameter\
    \ must be positive\");\n        }\n        while (b > 0) {\n            long temp\
    \ = b;\n            b = a % b;\n            a = temp;\n        }\n        return\
    \ a;", "        long res = 1;\n        while (b != 0) {\n            long x =\
    \ a;\n            a = b;\n            b = x % b;\n            res = res;\n   \
    \     }\n        return res;", "        // Test for validity\n        if (a ==\
    \ 0 || b == 0) {\n            return 0;\n        }\n        // Divide both numbers\
    \ and check remainder\n        long r = a / b;\n        if ((a % b) != 0) {\n\
    \            return b;\n        }\n        return r;", "        while (a % b !=\
    \ 0) {\n            a /= b;\n        }\n        return a;", "        // Initialize\
    \ result to 1\n        long result = 1;\n        // If either a or b is zero,\
    \ return result\n        if (a == 0 || b == 0) {\n            return result;\n\
    \        }\n        // If both are less than or equal to 1, return a\n       \
    \ if (a <= 1 || b <= 1) {\n            return a;\n        }\n        // Initialize\
    \ remainder to zero\n        long remainder = 0;\n        // While b is less than\
    \ or equal to a\n        while (b < a) {\n            // Update remainder\n  \
    \          remainder = b % a;\n            // Update b\n            b = a;\n \
    \           // Update a\n            a = remainder;\n        }\n        // Return\
    \ remainder\n        return result;", "        long r;\n        if (a < b)\n \
    \           (a, b) = (b, a);\n        while (b > 0) {\n            r = a % b;\n\
    \            a = b;\n            b = r;\n        }\n        return a;", "    \
    \    long p = 1;\n        while (a % b != 0) {\n            a /= b;\n        \
    \    p *= b;\n        }\n        return a;", "        long gcd = 1;\n        while\
    \ (b > 0) {\n            gcd = b;\n            b = a % b;\n            a = gcd;\n\
    \        }\n        return gcd;", "        if (a * b == 0)\n            return\
    \ a;\n        else\n            return GreatestCommonDivisor(b, a % b);", "  \
    \      long p = 1;\n        while (b > 0) {\n            long temp = b;\n    \
    \        long rem = 0;\n            while (b > 0) {\n                b = b % temp;\n\
    \                rem++;\n            }\n            p = p * rem;\n        }\n\
    \        return p;", "        long n1 = a; \n        long n2 = b;\n        long\
    \ gcd;\n        long m = n1;\n        long r = n2;\n        while (m != 0) {\n\
    \            gcd = m; \n            m = r; \n            r = gcd;\n        }\n\
    \        return r;", "        int _a = a;\n        int _b = b;\n        while\
    \ (_a != 0) {\n            long _divisor = _a % _b;\n            if (_divisor\
    \ == 0) {\n                return _b;\n            }\n            _a = _b;\n \
    \           _b = _divisor;\n        }\n        return 1;", '        return a %
    b == 0 ? b : GreatestCommonDivisor(b, a % b);', '        return a % b == 0 ? b
    : GreatestCommonDivisor(b, a % b);', "        long a = a % b;\n        while (b\
    \ != 0) {\n            if (b == a)\n                return a;\n            b =\
    \ b % a;\n        }\n        return a;", "        long x = 0;\n        while (a\
    \ > 0) {\n            x %= a;\n            x /= a;\n            a--;\n       \
    \ }\n        while (b > 0) {\n            x %= b;\n            x /= b;\n     \
    \       b--;\n        }\n        return x;", "        if (a == 0 || b == 0) {\n\
    \            return 0;\n        }\n\n        long r = a;\n        while (a % b\
    \ != 0) {\n            a = a - b;\n            r = r;\n        }\n\n        return\
    \ b;", "        long temp = 0;\n        while (b > 0) {\n            long remainder\
    \ = b % a;\n            if (remainder == 0) {\n                return b;\n   \
    \         }\n            b = remainder;\n            a++;\n        }\n       \
    \ return a;", "        if (b == 0)\n            return a;\n        return GreatestCommonDivisor(b,\
    \ a % b);", "        long result = 0;\n        while (a != 0) {\n            if\
    \ (b == 0) break;\n            if (b % a > 0)\n                result -= a;\n\
    \            a /= b;\n        }\n        return result;", "        if ((b % 2)\
    \ == 0) {\n            return GreatestCommonDivisor(a % b, b);\n        } else\
    \ {\n            return (a * b) / GreatestCommonDivisor(a, b);\n        }", " \
    \       // Compute GCD(a, b) using the Euclidean algorithm for GCD\n        if\
    \ (b == 0) {\n            return a;\n        }\n        long gcdRemainder = GreatestCommonDivisor(b,\
    \ a % b);\n        return a / gcd (a, b);", "        if (b == 0) {\n         \
    \   return a;\n        }\n        return GreatestCommonDivisor(b, a % b);", " \
    \       if (a * b == 0)\n            return a;\n        if (b == 0)\n        \
    \    return b;\n        if (a == 0)\n            return b;\n        if (a == b)\n\
    \            return a;\n        return GreatestCommonDivisor(a % b, b);", "  \
    \      long x = a, y = b;\n        while (!IsZero(x) && !IsZero(y)) {\n      \
    \      long temp = x;\n            x = y;\n            y = temp;\n        }\n\
    \        while (!IsZero(x)) {\n            long temp = x;\n            x = y;\n\
    \            y = temp;\n        }\n        while (!IsZero(y)) {\n            long\
    \ temp = x;\n            x = y;\n            y = temp;\n        }\n        return\
    \ x;", "        if (a%b == 0) {\n            return b;\n        }\n        return\
    \ GreatestCommonDivisor(b,a%b);", "        int c;\n        while (b != 0) {\n\
    \            c = a % b;\n            a = b;\n            b = c;\n        }\n \
    \       return a;", "        long x = 1;\n        while (a != 0) {\n         \
    \   long y = a % b;\n            x -= y;\n            a = b;\n            b =\
    \ y;\n        }\n        return x;", "        // a >= b\n        if (a>b) return\
    \ GreatestCommonDivisor(b, a);\n        if (a==0) return b;\n        long r =\
    \ 1; \n        while (r < a) {\n            r = r*b;\n        }\n        return\
    \ r;", "        if (b == 0)\n            return a;\n\n        long result = GreatestCommonDivisor(b,\
    \ a % b);\n\n        if (result == 0)\n            return b;\n\n        return\
    \ result;", '        return a >= b ? a : GreatestCommonDivisor(b, a%b);', "  \
    \      long d = 1L;\n        while (a != 0) {\n            long next = b / a;\n\
    \            if (next > d) {\n                d = next;\n            }\n     \
    \       a = a - b;\n            b = next;\n        }\n        return d;", "  \
    \      long gcd;\n        while (b != 0) {\n            gcd = a % b;\n       \
    \     a = b;\n            b = gcd;\n        }\n        return a;", "        long\
    \ g = a % b;\n        while (a != b) {\n            if (b != 0) {\n          \
    \      g = b % a;\n            }\n            a = b;\n            b = g;\n   \
    \     }\n        return g;", "        long n = a;\n        while (n != 0) {\n\
    \            long temp = b;\n            b = a % b;\n            a = temp;\n \
    \           n = a / b;\n        }\n        return b;", "        while (b != 0)\
    \ {\n            long remainder = a % b;\n            a = b;\n            b =\
    \ remainder;\n        }\n        return a;", "        while (b != 0L) {\n    \
    \        long temp = b;\n            b = a % b;\n            a = temp;\n     \
    \   }\n        return a;", "        // Implement your solution here\n        if\
    \ (a == 0 || b == 0)\n            return 0;\n\n        long aMinusB = a % b;\n\
    \n        if (aMinusB == 0)\n            return b;\n\n        if (b == 1)\n  \
    \          return a;\n\n        long temp;\n        long remainder;\n\n      \
    \  do {\n            temp = a % b;\n            remainder = a;\n            a\
    \ = b;\n            b = temp;\n        } while (aMinusB != 0);\n\n        if (a\
    \ == 1)\n            return b;\n\n        if (b != 1)\n            return remainder;\n\
    \n        throw new InvalidOperationException(\"No GCD found.\");", "        long\
    \ gcd;\n        while (b != 0L) {\n            gcd = 0L;\n            while (a\
    \ != 0L) {\n                gcd = MathF.GCD(a, gcd);\n                a /= 10;\n\
    \            }\n            b /= 10;\n        }\n        return gcd;", "     \
    \   // Get gcd as a long rather than a long (long overflows so need to store this\
    \ instead)\n        long gcdOfA = a > 0 ? a : -a;\n        long gcdOfB = b > 0\
    \ ? b : -b;\n        long gcdOfThem = gcdOfA * gcdOfB;\n\n        // Find greatest\
    \ common divisor\n        while (true) {\n            if (gcdOfThem == 0)\n  \
    \              return 0L;\n            else\n                gcdOfThem /= gcdOfA;\n\
    \        }", "        long n = a;\n        while (n > b)\n        {\n        \
    \    n -= b;\n        }\n        if (a == 1)\n            return b;\n        if\
    \ (b == 1)\n            return a;\n        return GreatestCommonDivisor(b, a %\
    \ b);", "        if( b == 0) {\n            return a;\n        }\n        return\
    \ GreatestCommonDivisor(b, a % b);", "        long gcd = 1;\n        long temp;\n\
    \        while (a > 0) {\n            temp = a % b;\n            a = b;\n    \
    \        b = temp;\n            gcd = (gcd > temp) ? gcd : temp;\n        }\n\
    \        return gcd;", '        return (b == 0) ? a : GreatestCommonDivisor(b,
    a%b);', "        var gcd = 1;\n        while (b > 0) {\n            if (b%2 ==\
    \ 1) {\n                b = b / 2;\n                gcd *= 2;\n            }\n\
    \            else {\n                b = b >> 1;\n                gcd *= b;\n\
    \            }\n        }\n        return gcd;", "        while (b != 0) {\n \
    \           long remainder = b % a;\n            a = b;\n            b = remainder;\n\
    \        }\n        return a;", "        var m = new List<long>();\n        while\
    \ (a > 0) {\n            long remDivisor = a % b;\n            long tmp = a;\n\
    \            a = b;\n            b = remDivisor;\n            tmp = a;\n     \
    \       a.Add(b);\n            m.Add(tmp);\n        }\n        List<long> max\
    \ = new List<long>();\n        foreach (var x in m) {\n            if (max.Count\
    \ == 0 || x > max[0])\n                max.Add(x);\n        }\n        if (max.Count\
    \ != 1)\n            throw new Exception(\"No GCD\");\n        return max[0];",
  "        Debug.Assert(b > 0L);\n        Debug.Assert(a > 0L);\n        if (a * b\
    \ > 0L) {\n            return 1;\n        }\n        if (a > 1L) {\n         \
    \   return a;\n        }\n        if (b > 1L) {\n            return b;\n     \
    \   }\n        long greatestCommonDivisor = 1L;\n        while (a != 1L) {\n \
    \           if (b / a > 0) {\n                greatestCommonDivisor = a;\n   \
    \         }\n            a = a * a;\n            b = b * b - 1;\n        }\n \
    \       return greatestCommonDivisor;", "        long result = 1;\n        long\
    \ temp = a > b ? a : b;\n        while (temp != 0) {\n            long remainder\
    \ = temp % result;\n            temp /= result;\n            result = remainder;\n\
    \        }\n        return result;", "        long gcd = 0;\n        while (a\
    \ != 0) {\n            if (b % a == 0) {\n                gcd = a;\n         \
    \       a = a / b;\n            } else {\n                a = a / b;\n       \
    \     }\n        }\n        return gcd;", "        long remainder;\n        while\
    \ (a != 0) {\n            remainder = a % b;\n            a = b;\n           \
    \ b = remainder;\n        }\n        return b;", "        long x = 1;\n      \
    \  while (a != 0) {\n            long temp = a;\n            a = b;\n        \
    \    b = temp % b;\n            x = b;\n        }\n        return x;", "     \
    \   if (a < b) {\n            long gcd = a;\n            while (gcd < b) {\n \
    \               gcd *= a;\n            }\n            a = b;\n            b =\
    \ gcd;\n        }\n        while (b > 0) {\n            long temp = b;\n     \
    \       b -= temp;\n            a /= temp;\n        }\n        return a;", " \
    \       if (a * b == 0)\n            return 0;\n        int common = (int) Math.Floor(Math.Sqrt((double)\
    \ a * b));\n        return a / common;", "        if (a * b == 0)\n          \
    \  throw new DivideByZeroException();\n        long greatestCommonDivisor = 1;\n\
    \        while (a != 0) {\n            long remainder = a % b;\n            a\
    \ = b;\n            b = remainder;\n            greatestCommonDivisor = greatestCommonDivisor\
    \ * b;\n        }\n        return greatestCommonDivisor;", "        if (a <= 0\
    \ || b <= 0 || a > b) {\n            throw new ArgumentOutOfRangeException(\"\
    Argument out of range\");\n        }\n        while (b != 0) {\n            long\
    \ c = a;\n            a = b;\n            b = c;\n        }\n        return a;",
  "        long gcd = 1;\n        for (long i = 1; i < b; i++) {\n            if (a\
    \ % i == 0) {\n                gcd = i;\n            }\n        }\n        return\
    \ gcd;", "        // if b > a, swap them\n        if (b > a) {\n            long\
    \ tmp = a;\n            a = b;\n            b = tmp;\n        }\n        // this\
    \ loop will run at most log2n times, and is thus optimal\n        long gcd = 1;\n\
    \        while (a != 0) {\n            long newGcd = a % b; // the least common\
    \ multiple of b and a\n            gcd = (long)newGcd > gcd ? newGcd : gcd;\n\
    \            a = a / b;\n        }\n        // if gcd is 1, we've just found the\
    \ greatest common divisor\n        return gcd;", '        return a > b ? GreatestCommonDivisor(b,
    a) : a;', "        if ((a < 0L) || (b < 0L))\n            throw new ArgumentException(\"\
    The values should be positive\");\n\n        while (a != 0L) {\n            long\
    \ remainder = a % b;\n            a = b;\n            b = remainder;\n       \
    \ }\n        return b;", "        long l1 = a / b;\n        long l2 = b / a;\n\
    \        if (l1 == l2) return a;\n        long l = 0;\n        while (a != 0)\
    \ {\n            a = a % b;\n            if (a == 0) return b;\n            b\
    \ = b % a;\n            l++;\n        }\n        return l;", "        long gcd\
    \ = 1;\n        // Start with a\n        long remainderA = a;\n        // Move\
    \ a down while a divides b\n        while (remainderA % b != 0) {\n          \
    \  gcd *= b;\n            remainderA /= b;\n        }\n        // Do a reverse\
    \ iteration to reduce GCD as we go\n        while (gcd != 1 && remainderA != 0)\
    \ {\n            gcd /= remainderA;\n            remainderA %= gcd ;\n       \
    \ }\n        return gcd;", "        while (b != 0) {\n            long temp =\
    \ b;\n            b = a % b;\n            a = temp;\n        }\n        return\
    \ a;", "        if (b == 0) {\n            return a;\n        } else {\n     \
    \       return GreatestCommonDivisor(b, a % b);\n        }", "        if (a%b\
    \ == 0) {\n            return b;\n        }\n        return GreatestCommonDivisor(b,\
    \ a % b);", "        int divisor = a % b;\n        if (a * b == divisor)\n   \
    \         return divisor;\n        else\n            return GreatestCommonDivisor(b,\
    \ a % b);", "        // Find the highest common dividor of a and b.\n        //\
    \ If a and b are equal, return their minimum.\n        // If a > b, return b.\n\
    \        // If a < b, return a.\n        if ((b > 0L) && (a >= b)) {\n       \
    \     return b;\n        }\n        if ((a > 0L) && (b >= a)) {\n            return\
    \ a;\n        }\n\n        // Find the greatest common divisor of ab and ac.\n\
    \        // If a > b, return b.\n        // If a < b, return a.\n        long\
    \ ab = a > b ? b : a;\n        long ac = a > b ? a : b;\n        while (ab !=\
    \ 0L) {\n            if (ab % ac == 0L) {\n                return ab;\n      \
    \      }\n            ab /= ac;\n        }\n        return b;", "        long\
    \ greatestCommonDivisor = a;\n        while (b > 0) {\n            if (b % 2 ==\
    \ 0)\n                greatestCommonDivisor = b / 2;\n            else\n     \
    \           greatestCommonDivisor = (b - 1) / 2;\n            b = greatestCommonDivisor;\n\
    \        }\n        return greatestCommonDivisor;", "        if (a == 0) return\
    \ b;\n        if (b == 0) return a;\n        long gcd = GreatestCommonDivisor(a\
    \ % b, b);\n        if (gcd == 0) return a;\n        return gcd;", "        //\
    \ This is an optimized version of gcd function\n        // It takes only 2 operations\
    \ to get the GCD\n        // It works on any integers and only involves dividing\
    \ numbers once\n        // For large numbers, it works faster\n        long n\
    \ = b;\n        while (a % n != 0L) n = n / 2;\n        while (a % n == 0L) n\
    \ = n / 2;\n        return n;", "        // Initialize variables to 0\n      \
    \  long gcd = 1L;\n        long temp;\n        // Initialize a with 1\n      \
    \  while(b > 0) {\n            temp = a % b;\n            a = b;\n           \
    \ b = temp;\n            gcd *= b;\n        }\n        return gcd;", "       \
    \ long result = 0;\n        while (a != 0) {\n            long tmp = a;\n    \
    \        a = b%a;\n            b = tmp;\n        }\n        return b;", "    \
    \    while (a != 0) {\n            long r = a % b;\n            a = b;\n     \
    \       b = r;\n        }\n        return b;", "        long gcd = 0;\n      \
    \  while (a != 0) {\n            long r = a % b;\n            a = b;\n       \
    \     b = r;\n        }\n        return b;", "        if (b > 0) {\n         \
    \   long temp = a % b;\n            while (temp != 0) {\n                a = b;\n\
    \                b = temp;\n                temp = a % b;\n            }\n   \
    \         return b;\n        }\n        else {\n            return a;\n      \
    \  }", "        if ((a > 1L) && (b > 1L)) {\n            long r = 0L;\n      \
    \      long s = a % b;\n            while ((a > 0) && (b > 0)) {\n           \
    \     if (s == 0L) {\n                    return b;\n                }\n     \
    \           s = s % b;\n                a = a / b;\n            }\n          \
    \  return s;\n        }\n        return 0;", "        // If the divisor is zero\
    \ or if the dividend is negative, then return the dividend\n        if ((a % b)\
    \ == 0 || (a < 0) || (b < 0)) {\n            return a;\n        }\n        //\
    \ If the dividend is zero or the divisor is positive, then return zero\n     \
    \   if ((a % b) > 0) {\n            return 0;\n        }\n        // Loop from\
    \ the largest to the smallest of the two numbers and perform the GCD\n       \
    \ while (a > b) {\n            long temp = a;\n            a = b;\n          \
    \  b = temp;\n        }\n        // Return the GCD\n        return b;", "    \
    \    if ((a % b) == 0) return b;\n        return GreatestCommonDivisor(b, a %\
    \ b);", "        if (b == 0)\n            return a;\n        return GreatestCommonDivisor(b,\
    \ a % b);", "        long greatestCommonDivisor = 0;\n        if (a < b) { \n\
    \            while (a % b != 0) {\n                greatestCommonDivisor = b;\n\
    \                b = a % b;\n                a = b;\n            }\n        }\
    \ else {\n            while (a % b != 0) {\n                greatestCommonDivisor\
    \ = a;\n                a = a % b;\n                b = b;\n            }\n  \
    \      }\n        return greatestCommonDivisor;", "        if (a < b)\n      \
    \      return GreatestCommonDivisor(b, a);\n        return b;", "        if (a==0)\
    \ return b;\n        if (b==0) return a;\n        return GreatestCommonDivisor(b,\
    \ a % b);", "        long gcd = 1;\n        while (b != 0) {\n            long\
    \ temp = b;\n            b = a % b;\n            a = temp;\n            gcd++;\n\
    \        }\n        return gcd;", '        return b == 0 ? a : GreatestCommonDivisor(b,
    a % b);', "        if (a == 0 || b == 0) return 0;\n        return a / GreatestCommonDivisor(b,\
    \ a % b);", "        if ((a < b)) {\n            int temp = a;\n            a\
    \ = b;\n            b = temp;\n        }\n        if (b == 0)\n            return\
    \ a;\n        long temp = b;\n        b = a;\n        a = temp;\n        while\
    \ (b != 0) {\n            long c = a % b;\n            a = b;\n            b =\
    \ c;\n        }\n        return a;", "        if (b == 0) return a;\n        if\
    \ (a == 0) return b;\n        return GreatestCommonDivisor(b, a%b);", "      \
    \  if (a == 0 || b == 0) return 0;\n        while (true) {\n            long x\
    \ = a / b;\n            if (x == 0) return b;\n            if (x == 1) return\
    \ a;\n            long y = b / x;\n            if (y == 0) return x;\n       \
    \     if (y == 1) return b;\n            a = x;\n            b = y;\n        }",
  "        long a = a % b; //get remainder for division without exceeding long limits\n\
    \        if (a == 0)\n            return b;\n        else\n            return\
    \ GreatestCommonDivisor(b, a % b); // Recursive call", "        long n = 1;\n\
    \        while (b != 0) {\n            int r = a % b;\n            a = b;\n  \
    \          b = r;\n            n++;\n        }\n        return n;", "        long\
    \ gcd = 1L;\n        while (a % gcd == 0L && b%gcd == 0L)\n            gcd = gcd\
    \ * b; //gcd = b\n        while (a % gcd == 0L)\n            gcd *= a; //gcd =\
    \ a\n        while (b % gcd == 0L)\n            gcd *= b; //gcd = a\n        return\
    \ gcd;", "        while (a != 0) {\n            long temp = a;\n            a\
    \ = b%a;\n            b = temp;\n        }\n        return b;", "        int rem\
    \ = a % b;\n        long gcd = a / b;\n        if (rem == 0) {\n            return\
    \ gcd;\n        }\n        return GreatestCommonDivisor(b, gcd);", "        //\
    \ a is greater than or equal to 0\n        if (a >= b) { return a; }\n       \
    \ // b is greater than or equal to 0\n        if ((a > 0) && (b > 0)) { return\
    \ b; }\n        // both a and b are 0\n        if ((a > 0) && (b == 0)) { return\
    \ a; }\n        // a is 0\n        if ((a < 0) && (b > 0)) { return b; }\n   \
    \     // b is 0\n        if ((a > 0) && (b < 0)) { return a; }\n        // a and\
    \ b are negative\n        if ((a < 0) && (b < 0)) { return GreatestCommonDivisor(-a,\
    \ -b); }\n        // a is negative\n        if ((a < 0) && (b > 0)) { return GreatestCommonDivisor(-a,\
    \ -b); }\n        // b is negative\n        if ((a > 0) && (b < 0)) { return GreatestCommonDivisor(-a,\
    \ -b); }\n        // a and b are equal\n        return a;", "        long n =\
    \ 0;\n        long r1 = 1;\n        long r2 = 1;\n        while (a != 0) {\n \
    \           if (a > b) {\n                r1 = b;\n                r2 = a;\n \
    \           }\n            else {\n                r1 = a;\n                r2\
    \ = b;\n            }\n            n++;\n            a = r1 / r2;\n        }\n\
    \        return n;", "        if (a > b)\n            return GreatestCommonDivisor(b,\
    \ a);\n        if (b == 0)\n            return a;\n        if (a == 0)\n     \
    \       return b;\n        long x = 0;\n        while (a != 0) {\n           \
    \ long y = a % b;\n            a = b;\n            b = y;\n            x++;\n\
    \        }\n        return x;", "        if (a < b)\n            return GreatestCommonDivisor(b,\
    \ a);\n        if ((a % b) == 0)\n            return b;\n        long x = a %\
    \ b;\n        long y = GreatestCommonDivisor(b, x) + 1;\n        while (b != 0)\
    \ {\n            if (b == x)\n                return y;\n            y = y;\n\
    \            b = b % b;\n            x = x % b;\n        }\n        return y;",
  "        if ((a < 0) || (b < 0)) {\n            throw new ArgumentException(\"Negative\
    \ numbers!\");\n        }\n        long r = a;\n        while (a > 0) {\n    \
    \        long m = a / b;\n            if (m == 0) {\n                b = a % b;\n\
    \            } else {\n                a = m;\n                r = b;\n      \
    \      }\n        }\n        return r;", "        if(b == 0) return a;\n     \
    \   long gcd = GreatestCommonDivisor(b, a % b);\n        if(b % gcd == 0) return\
    \ gcd;\n        return b;", "        long temp;\n        while (a != 0) {\n  \
    \          temp = a % b;\n            a = b;\n            b = temp;\n        }\n\
    \        return b;", "        long[] a = a, b = b;\n        long[] u = new long[]\
    \ { 1L, (long)Math.Sqrt(a[0]) };\n        long[] v = new long[] { 1L, (long)Math.Sqrt(b[0])\
    \ };\n        while (b[1] > 0) {\n            for (long y = 1; y <= b[1]; y++)\
    \ {\n                long[] t = new long[u.Length];\n                System.Buffer.BlockCopy(u,\
    \ y * u.Length, t, 0, t.Length);\n                System.Buffer.BlockCopy(v, y\
    \ * v.Length, t, t.Length, t.Length);\n                u = t;\n            }\n\
    \            u[1] = Math.Min(u[1], v[1]);\n            v[1] = Math.Min(v[1], u[1]);\n\
    \        }\n        return u[1] % v[1];", "        long gcd = 1;\n        while\
    \ (b > 0) {\n            long t = a;\n            a = b;\n            b = t;\n\
    \            gcd = b > 0 ? gcd : gcd;\n        }\n        return gcd;", "    \
    \    long gcd = 1;\n        while (a != 0) {\n            if (b % a == 0) {\n\
    \                gcd = a;\n                break;\n            }\n           \
    \ a = a / b;\n        }\n        return gcd;", "        if (a==0 || b==0)\n  \
    \          return 0;\n        if (a>b)\n            return GreatestCommonDivisor(b,a);\n\
    \        long gcd = 1;\n        while (b>0) {\n            if (b%a != 0) {\n \
    \               gcd *= a;\n                b = a/a;\n            }\n         \
    \   else\n                a /= b;\n        }\n        return gcd;", "        long\
    \ c = a % b;\n        while ((c > 0L) && (b != 0L)) {\n            c = c % b;\n\
    \        }\n        return c;", "        if (a == 0 || b == 0)\n            return\
    \ 0;\n        long result = a;\n        while (a != 0) {\n            if (b%a\
    \ == 0)\n                a /= b;\n            else\n                a = a % b;\n\
    \        }\n        return result;", "        var n = Convert.ToInt64(Math.Abs(b));\n\
    \        while(b > 0) {\n            var t = a % n;\n            a = n;\n    \
    \        n = t;\n            b /= n;\n        }\n        return a;", "       \
    \ if (a==0 || b==0)\n            return 0;\n        long gcd = GreatestCommonDivisor(b,\
    \ a % b);\n        if (a%gcd==0)\n            return gcd;\n        else\n    \
    \        return GreatestCommonDivisor(a, b);", "        int a0 = a >> 32;\n  \
    \      int a1 = a & FFFFFFFF;\n        int b0 = b >> 32;\n        int b1 = b &\
    \ FFFFFFFF;\n        while (b1 > 0) {\n            long c0 = b1 >> 32;\n     \
    \       long c1 = b1 & FFFFFFFF;\n            long c2 = a1 & c1;\n           \
    \ if (c2 != 0) {\n                a1 ^= c2;\n                b1 ^= c2;\n     \
    \           c2 >>= 32;\n            }\n            long gcd0 = a0 & b0;\n    \
    \        if (c0 != 0) {\n                a0 ^= c0;\n                b0 ^= c0;\n\
    \                c0 >>= 32;\n            }\n            long gcd1 = a1 & b1;\n\
    \            if (c1 != 0) {\n                a1 ^= c1;\n                b1 ^=\
    \ c1;\n                c1 >>= 32;\n            }\n            a0 += (int)gcd0;\n\
    \            a1 += (int)gcd1;\n            b0 += (int)gcd0;\n            b1 +=\
    \ (int)gcd1;\n            c0 += (int)gcd0;\n            c1 += (int)gcd1;\n   \
    \         b1 >>= 32;\n            a1 >>= 32;\n            a0 >>= 32;\n       \
    \     b0 >>= 32;\n        }\n        return (int)(a0 & a1);", "        // Initialize\
    \ result to zero\n        long result = 0;\n        // Get modulus of \"a\" (\"\
    b\" is \"a\"'s remainder)\n        long remainder = a;\n        // If \"b\" is\
    \ 0, return \"a\"\n        if (b == 0) {\n            return a;\n        }\n \
    \       // If \"a\" is 0, return \"b\"\n        if (a == 0) {\n            return\
    \ b;\n        }\n        // If \"a\" is greater than \"b\" then repeat \"b\" times\n\
    \        while (b > 0) {\n            // Get \"b\" remainder\n            long\
    \ temp = b;\n            // Get \"a\" divided by \"b\"\n            long quotient\
    \ = a / temp;\n            // Get \"a\" modulus \"temp\"\n            a = a %\
    \ temp;\n            // Get \"b\" divided by \"temp\"\n            b = temp %\
    \ temp;\n            // Add quotient to \"result\"\n            result = result\
    \ + quotient;\n        }\n        // Return result\n        return result;", " \
    \       if (b > 0) {\n            return GreatestCommonDivisor(b, (a%b));\n  \
    \      }\n        return a;", "        while (b > 0) {\n            long t = a;\n\
    \            a = b;\n            b = t;\n        }\n        return a;", "    \
    \    long gcd = 1;\n        while (a > 0 && b > 0) {\n            if (a % b ==\
    \ 0) {\n                gcd = b;\n            }\n            b = b - (a % b);\n\
    \            a = a / b;\n        }\n        return gcd;", "        // Initialize\
    \ answer as greatest common divisor of both a and b\n        long gcd = 0;\n \
    \       // While a or b is not zero:\n        while (!(b == 0L) && (a != 0L))\
    \ {\n            // If a is zero:\n            if (a == 0L) {\n              \
    \  // Return b.\n                return b;\n            }\n            // If b\
    \ is zero:\n            else if (b == 0L) {\n                // Return a.\n  \
    \              return a;\n            }\n            // Update gcd.\n        \
    \    gcd = (a % b == 0 ? b : (a % b) + b) % gcd;\n            // Update a.\n \
    \           a = a / b;\n        }\n        // Return gcd.\n        return gcd;",
  "        // Assume a >= b\n        // Recursively call function GreatestCommonDivisor()\
    \ until\n        // no common divisor is found\n        long gcd;\n        do\
    \ {\n            gcd = GreatestCommonDivisor(b, a % b);\n            a = b;\n\
    \            b = gcd;\n        } while (a != 1L);\n        return b;", '        return
    b == 0 ? a : GreatestCommonDivisor(b, a%b);', "        if(b == 0) {\n        \
    \    return a;\n        }\n\n        long g = GreatestCommonDivisor(b, a % b);\n\
    \        if(b % g == 0) {\n            return g;\n        }\n        return (b\
    \ % g);", "        if (a == 0 || b == 0)\n            return 0;\n        if (a\
    \ == b)\n            return a;\n        return GreatestCommonDivisor(b, a % b);",
  "        // Handle negative numbers\n        if (b < a)\n            return (b >\
    \ 0) ? a : b;\n        long gcd = 1;\n        // Loop from highest bit to lowest\
    \ bit\n        while (b > 0) {\n            if (a & 1 == 1)\n                gcd\
    \ = b;\n            b /= 2;\n        }\n        return gcd;", "        // The\
    \ Greatest Common Divisor is the largest integer that divides both a and b.\n\
    \        // It's called the GCD and is defined as follows:\n        // gcd(a,b)\
    \ = the largest number that divides a by b, \n        //          if b is positive\
    \ or equal to zero\n        // gcd(a,0) = a.\n        // gcd(0,b) = 1.\n     \
    \   if (b == 0)\n            return a;\n        else\n            return GreatestCommonDivisor(b,\
    \ a%b);", "        int n = a;\n        int m = b;\n        long res = 0;\n   \
    \     while (m != 0) {\n            if (m % n == 0) {\n                res = m;\n\
    \            }\n            m /= n;\n        }\n        return res;", "      \
    \  if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n  \
    \          return a;\n        }\n        return GreatestCommonDivisor(b, a % b);",
  "        long remainder;\n        if (b == 0)\n            return a;\n        if\
    \ (a == 0)\n            return b;\n\n        remainder = ((a % b));\n        if\
    \ (remainder == 0)\n            return GreatestCommonDivisor(b, a-1);\n      \
    \  else\n            return GreatestCommonDivisor(a, b-remainder);", "       \
    \ int min = (a % b) + ((b > 0) ? (a / b) : 0);\n        return min;", "      \
    \  // a & b are positive\n        if (a > b) \n        {\n            a %= b;\n\
    \            b %= a;\n        } else\n        {\n            b %= a;\n       \
    \ }\n        // Repeat until a is divisible by b\n        while (a % b != 0) \n\
    \        {\n            a %= b;\n        }\n        return a;", "        if (b\
    \ == 0)\n            return a;\n        else\n            return GreatestCommonDivisor(b,\
    \ a%b);", "        Debug.Assert(a != 0L && b != 0L);\n        if (a * b == 0)\
    \ {\n            return 1L;\n        }\n        int gcdRemainder;\n        long\
    \ gcd;\n        while ((gcdRemainder = a%b) != 0L) {\n            gcd = gcdRemainder;\n\
    \            a = b;\n            b = gcd;\n        }\n        return gcd;", " \
    \       long gcd = 0;\n        while (b > 0) {\n            gcd = (b % a);\n \
    \           b = a % b;\n            a = gcd;\n        }\n        return gcd;"]
stop_tokens:
- "\n    }\n"
