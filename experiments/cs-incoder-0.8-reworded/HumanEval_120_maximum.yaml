name: HumanEval_120_maximum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list arr of integers and a positive integer k, return\
  \ a sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
  \ Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
  \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n\
  \    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,\
  \ (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
  \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
  \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
  \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
  \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
  \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
  \ Maximum(List<long> arr, long k) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
  \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
  \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
  \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
  \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
  \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
  \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
  \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
  \    }\n\n}\n"
completions: ["        Array.Sort(arr);\n        var res = new List<long>();\n   \
    \     var maxPos = arr.Count - 1;\n        while (maxPos >= k) {\n           \
    \ res.Insert(maxPos, arr[maxPos]);\n            maxPos -= 1;\n        }\n    \
    \    return res;", "        Dictionary<long, long> dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in arr)\n        {\n            long max\
    \ = 0;\n            if (dict.TryGetValue(item, out max))\n            {\n    \
    \            if (max < 0)\n                    max = -max;\n                if\
    \ (max > k)\n                {\n                    dict.Add(item, max);\n   \
    \             }\n            }\n            else\n            {\n            \
    \    dict.Add(item, item);\n            }\n        }\n        return dict.Values.ToList();",
  "        int size = arr.Count;\n        List<long> result = new List<long>();\n\
    \        long max = -Long.MaxValue;\n        long min = -Long.MaxValue;\n    \
    \    long cur = 0;\n        for (long i = 0; i < size; i++) {\n            cur\
    \ += arr[i];\n            if (cur > max) {\n                max = cur;\n     \
    \       }\n            else if (cur < min) {\n                min = cur;\n   \
    \         }\n        }\n        if (max > k) {\n            result.Add(k);\n \
    \       }\n        if (min == Long.MinValue) {\n            result.Add(k);\n \
    \       }\n        if (min >= k) {\n            min = k - 1;\n        }\n    \
    \    result.Add(min);\n        result.AddRange(arr.Skip(1).Take(Math.Max(Math.Min(size\
    \ - k, k), 1)));\n        return result;", "        List<long> answer = new List<long>();\n\
    \        if (arr.Count < k) {\n            throw new ArgumentException(\"The list\
    \ size must be greater than or equal to the given key.\");\n        }\n      \
    \  if (k > arr.Count) {\n            throw new ArgumentException(\"The given key\
    \ must be less than or equal to the list size.\");\n        }\n        Array.Sort(arr);\n\
    \        answer.AddRange(arr.Take(k));\n        return answer;", "        long\
    \ maxVal = arr.First();\n        List<long> result = new List<long>();\n     \
    \   foreach(long val in arr.Skip(1)){\n            if(val >= maxVal){\n      \
    \          result.Add(val);\n            }else if(val < maxVal){\n           \
    \     maxVal = val;\n                result.Add(maxVal);\n            }else if(k\
    \ == 1){\n                break;\n            }else if(val >= maxVal + k){\n \
    \               maxVal += k;\n                result.Add(maxVal);\n          \
    \  }\n        }\n        return result;", "        if (k == 0)\n            return\
    \ arr;\n        long curMax = arr.Max();\n        if (curMax == 0)\n         \
    \   return arr;\n        long maxIndex = -1;\n        List<long> maxList = new\
    \ List<long>();\n        long curSum = 0;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            long cur = arr[i];\n            curSum += cur;\n       \
    \     if (curSum > curMax) {\n                maxList.Add(cur);\n            \
    \    maxIndex = i;\n                curSum -= curMax;\n                if (maxIndex\
    \ == k)\n                    break;\n                curMax = arr[maxIndex];\n\
    \            }\n        }\n        return maxList;", "        if (k > arr.Count)\
    \ {\n            throw new ArgumentException(\"k\", \"k must be less than or equal\
    \ to the length of arr\");\n        }\n\n        long[] nums = new long[k];\n\
    \        long[] maxs = new long[k];\n        long[] tmp = new long[k];\n\n   \
    \     for (int i = 0; i < nums.Length; i++) {\n            nums[i] = arr[i];\n\
    \            maxs[i] = nums[i];\n        }\n\n        for (int i = nums.Length;\
    \ i < k; i++) {\n            tmp[i - nums.Length] = maxs[i - 1];\n        }\n\n\
    \        int index = 0;\n        long tmpMax = tmp[0];\n        for (int i = 0;\
    \ i < k; i++) {\n            if (tmp[i] > tmpMax) {\n                tmpMax =\
    \ tmp[i];\n                index = i;\n            }\n        }\n\n        nums[index]\
    \ = Math.Abs(tmpMax);\n        for (int i = index + 1; i < k; i++) {\n       \
    \     nums[i] = Math.Max(nums[i - 1], nums[i]);\n        }\n\n        List<long>\
    \ res = new List<long>(k);\n        for (int i = 0; i < k; i++) {\n          \
    \  res.Add(nums[i]);\n        }\n        return res;", "        var n = arr.Count;\n\
    \        if (k > n) {\n            k = n;\n        }\n        var result = new\
    \ List<long>();\n        var maxVal = arr[0];\n        long maxIndex = -1;\n \
    \       for (int i = 1; i < k; i++) {\n            long curr = arr[i];\n     \
    \       if (curr > maxVal) {\n                maxVal = curr;\n               \
    \ maxIndex = i;\n            }\n        }\n        while (maxIndex > 0) {\n  \
    \          result.Add(maxVal);\n            maxIndex--;\n            maxVal =\
    \ arr[maxIndex];\n        }\n        return result;", "        var ans = new List<long>();\n\
    \        if (k <= 0 || arr.Count < k) {\n            return ans;\n        }\n\n\
    \        var count = arr.Count;\n\n        var index = 0;\n        for (long i\
    \ = 0; i < count - 1; ++i) {\n            while (index < count - 1 && arr[index]\
    \ >= arr[index + 1]) {\n                ++index;\n            }\n\n          \
    \  if (index == count - 1) {\n                ans.Add(arr[i]);\n            }\
    \ else {\n                var max = arr[index];\n                arr[index] =\
    \ arr[i + 1];\n                arr[i + 1] = max;\n                ++index;\n \
    \           }\n        }\n\n        while (index < count && arr[index] >= k) {\n\
    \            ++index;\n        }\n        ans.AddRange(arr.GetRange(index, count\
    \ - index));\n\n        return ans;", "        if (arr.Count() < k) {\n      \
    \      return new List<long>();\n        }\n        var max = new List<long>();\n\
    \        // sort the array\n        Array.Sort(arr);\n        // get the max nums\n\
    \        max = arr.Take(k).ToList();\n        // remove the same nums\n      \
    \  var arr2 = arr.Skip(arr.FindIndex((x) => x == max[0])).ToList();\n        return\
    \ arr2.ToList();", "        List<long> result = new List<long>();\n        if\
    \ (k == 0) return result;\n        int left = 0, right = arr.Count - 1;\n    \
    \    long max = arr[0];\n        while (left < right) {\n            while (left\
    \ < right && arr[left] >= max) left++;\n            while (left < right && arr[right]\
    \ <= max) right--;\n            if (left > right) break;\n            max = Math.Max(max,\
    \ arr[left]);\n            max = Math.Max(max, arr[right]);\n            result.Add(max);\n\
    \            left += right - left + 1;\n            right -= left + 1;\n     \
    \   }\n        return result;", "        long max = 0;\n        long[] s = new\
    \ long[k];\n        for (int i = 0; i <= arr.Count - 1; i++) {\n            s[i]\
    \ = arr[i].ToString();\n            max = Math.Max(max, Convert.ToInt64(s[i]));\n\
    \        }\n        for (int i = 0; i <= k - 1; i++) {\n            s[i] = max;\n\
    \        }\n        string ret = \"\";\n        foreach (var e in s) {\n     \
    \       ret += e.ToString() + \", \";\n        }\n        return new List<long>(ret.Split(',').OrderByDescending(s\
    \ => s).ToArray());", "        long max = 0;\n        bool flag = false;\n   \
    \     int n = arr.Count;\n        for (int i = 0; i <= n; i++) {\n           \
    \ if (arr[i] > max)\n                max = arr[i];\n        }\n        List<long>\
    \ arr = new List<long>();\n        for (int i = 0; i < n; i++) {\n           \
    \ if (arr[i] > max)\n                arr.Add(arr[i]);\n            else {\n  \
    \              flag = true;\n                arr.Add(max);\n            }\n  \
    \      }\n        if (flag == true)\n            arr.Add(max);\n        if (arr.Count\
    \ < k) {\n            for (int i = arr.Count - 1; i >= k; i--)\n             \
    \   arr.Add(0);\n        }\n        List<long> result = new List<long>();\n  \
    \      for (int i = 0; i < k; i++)\n            result.Add(arr[i]);\n        return\
    \ result;", "        var list = new List<long>();\n        if (arr == null ||\
    \ arr.Count < 1)\n            return list;\n        long l = arr.First();\n  \
    \      long max = l;\n        arr.Remove(l);\n        var sorted = new List<long>();\n\
    \        while (arr.Count > 0) {\n            sorted.Add(max);\n            max\
    \ = Math.Max(max, arr.First());\n            arr.Remove(max);\n        }\n   \
    \     sorted.Add(max);\n        sorted.Sort();\n        int count = 0;\n     \
    \   bool flag = false;\n        foreach (var i in sorted) {\n            if (count\
    \ < k) {\n                if (i < sorted[count])\n                    count++;\n\
    \            } else {\n                flag = true;\n                break;\n\
    \            }\n        }\n        if (flag)\n            list = sorted.Take(k\
    \ - 1).ToList();\n        else\n            list.AddRange(sorted.Take(k - 1).ToList());\n\
    \        return list;", "        HashSet<long> nums = new HashSet<long>();\n \
    \       List<long> max = new List<long>(new long[arr.Count]);\n        long largest\
    \ = arr[0];\n        long current;\n        long min;\n        long mid;\n   \
    \     for (int i = 1; i < arr.Count; i++) {\n            current = arr[i];\n \
    \           min = arr[0];\n            mid = current / 2;\n            if (mid\
    \ > 1) {\n                min = mid;\n            }\n            nums.Add(current);\n\
    \            if (nums.Count >= k) {\n                current = Math.Max(current,\
    \ min);\n            }\n            if (current > largest) {\n               \
    \ largest = current;\n            }\n        }\n        foreach (long num in nums)\
    \ {\n            max.Add(num);\n        }\n        return max;", "        var\
    \ res = arr.GetRange(0, k).OrderByDescending(i => i).ToList();\n        while\
    \ (k <= res.Count) {\n            k = k + 1;\n            res = res.GetRange(0,\
    \ k).OrderByDescending(i => i).ToList();\n        }\n        return res;", " \
    \       // write your code here\n        List<long> result = new List<long>(arr.Count);\n\
    \        List<long> sorted = new List<long>(k);\n        long max = 0;\n     \
    \   for (long i : arr) {\n            sorted.Add(i);\n            if (max < i)\
    \ {\n                max = i;\n            }\n        }\n        long len = k;\n\
    \        if (sorted.Count != k) {\n            len = sorted.Count;\n        }\n\
    \        if (k == sorted.Count) {\n            long cur = sorted[0];\n       \
    \     for (int i = 1; i < len; i++) {\n                if (sorted[i] < cur) {\n\
    \                    cur = sorted[i];\n                }\n            }\n    \
    \        result.Add(cur);\n        } else if (k == sorted.Count - 1) {\n     \
    \       for (int i = 0; i < len; i++) {\n                if (sorted[i] > sorted[i\
    \ + 1]) {\n                    result.Add(sorted[i]);\n                }\n   \
    \         }\n        } else {\n            for (int i = 0; i < len; i++) {\n \
    \               result.Add(sorted[i]);\n            }\n        }\n        return\
    \ result;", "        if (k == 0)\n            return arr;\n        if (k > arr.Count\
    \ || k < 1)\n            throw new ArgumentOutOfRangeException(\"k\");\n     \
    \   var arr = arr.ToList();\n        var r = new List<long>();\n        var m\
    \ = arr.Max();\n        var a = arr.Max() - m;\n        var c = m - k;\n     \
    \   r.Add(m);\n        var k2 = k;\n        while (k2 > 0) {\n            if (a\
    \ < 0)\n                a = arr.Max() - arr.Count;\n            if (c <= 0)\n\
    \                c = 0;\n            if (a >= arr.Count)\n                a =\
    \ arr.Count - c;\n            if (r.Count < k2) {\n                r.Add(arr[(int)Math.Max(-a,\
    \ 0)]);\n                k2--;\n            }\n            else {\n          \
    \      r.Add(Math.Max(r[(int)Math.Max(-a, 0)], arr[(int)Math.Max(-a, 0)]));\n\
    \                k2--;\n            }\n            c--;\n            a--;\n  \
    \      }\n        r.Sort();\n        return r;", "        HashSet<long> results\
    \ = new HashSet<long>();\n        arr.Sort();\n        for (int i = 0; i < k;\
    \ i++) {\n            if (results.Contains(arr[i]))\n                results.Remove(arr[i]);\n\
    \            else\n                results.Add(arr[i]);\n        }\n        return\
    \ new List<long>(results);", "        bool flag = false;\n        var max_arr\
    \ = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (flag) {\n                max_arr.Add(arr[i]);\n                break;\n\
    \            } else if (arr[i] > arr[i + 1]) {\n                max_arr.Add(arr[i]);\n\
    \                flag = true;\n            }\n        }\n        if (max_arr.Count\
    \ >= k) {\n            return max_arr;\n        } else {\n            return null;\n\
    \        }", "        if (k > arr.Count)\n            k = arr.Count;\n       \
    \ Array.Sort(arr);\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < k; i++)\n            result.Add(arr[i]);\n        return result;",
  "        if (k > arr.Count) k = arr.Count;\n        Array.Sort(arr);\n        if\
    \ (k > arr.Count) return new List<long>();\n        if (arr.Count > k) return\
    \ Maximum(arr.GetRange(0, k), k);\n        return arr;", "        List<long> result\
    \ = new List<long>();\n        long maxNum = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            long num = (long)Math.Min(Math.Max(arr[i], 0),\
    \ k);\n            if (maxNum == -1 || num > maxNum) {\n                result.Clear();\n\
    \                maxNum = num;\n            }\n            result.Add(num);\n\
    \        }\n        return result;", "        if (arr == null || k == 0) {\n \
    \           return null;\n        }\n        // Find the length of arr\n     \
    \   long m = arr.Count();\n        if (m > k) {\n            k = m;\n        }\n\
    \        List<long> ans = new List<long>(k);\n        long total = 0;\n      \
    \  // Sort the array in descending order\n        arr.Sort((a, b) => b - a);\n\
    \        bool flag = false;\n        // Find the first element larger than k\n\
    \        long first = 0;\n        for (int i = 0; i < arr.Count(); ++i) {\n  \
    \          if (arr[i] > k) {\n                flag = true;\n                break;\n\
    \            }\n        }\n        // Find the first element smaller than k\n\
    \        if (k <= arr[0]) {\n            flag = true;\n        }\n        while\
    \ (flag) {\n            int i = arr.IndexOf(arr[first], first, k);\n         \
    \   if (i > 0) {\n                ans[i - 1] = arr[i - 1];\n                first\
    \ += 1;\n            }\n            else {\n                flag = false;\n  \
    \          }\n        }\n        Console.WriteLine(\"first=\" + first);\n    \
    \    Console.WriteLine(\"k=\" + k);\n        Console.WriteLine(\"m==\" + m);\n\
    \        Console.WriteLine(\"ans=\" + ans.Count);\n        return ans;", "   \
    \     int[] bucket = new int[k];\n        long[] vals = new long[k];\n       \
    \ int valIdx;\n        long[] sorted = new long[k];\n        for (int i = 0; i\
    \ < k; i++) {\n            bucket[i] = 0;\n            valIdx = 0;\n         \
    \   for (int j = 0; j < arr.Count; j++) {\n                if (arr[j] >= vals[valIdx])\
    \ {\n                    valIdx = j;\n                }\n            }\n     \
    \       vals[i] = arr[valIdx];\n            bucket[i]++;\n        }\n        long\
    \ largest = 0;\n        for (int i = 0; i < bucket.Length; i++) {\n          \
    \  if (bucket[i] > 0 && vals[i] < largest) {\n                largest = vals[i];\n\
    \            }\n        }\n        for (int i = 0; i < k; i++) {\n           \
    \ if (vals[i] > 0 && bucket[i] > 0) {\n                sorted[i] = vals[i];\n\
    \                sorted[bucket[i] - 1] = largest;\n            }\n        }\n\
    \        return new List<long>(sorted);", "        if (arr.Count == 0 || arr.Count\
    \ <= k)\n            return arr;\n        var dict = new Dictionary<long, List<long>>();\n\
    \        var max = new List<long>();\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (dict.Keys.Contains(arr[i]))\n                dict[arr[i]].Add(arr[i]);\n\
    \            else {\n                var list = new List<long>();\n          \
    \      list.Add(arr[i]);\n                dict[arr[i]] = list;\n            }\n\
    \        }\n\n        foreach (var v in dict.Values) {\n            var maxIndex\
    \ = 0;\n            for (int j = 0; j < v.Count; j++) {\n                if (j\
    \ == maxIndex) continue;\n                if (v.Max() < v[j])\n              \
    \      maxIndex = j;\n            }\n\n            max.Add(v[maxIndex]);\n   \
    \         v.RemoveAt(maxIndex);\n        }\n        return max;", "        int[]\
    \ arr = arr.OrderBy(a => a).ToArray();\n        List<long> res = new List<long>();\n\
    \        Array.Sort(arr, (a, b) => a > b ? 1 : (a < b ? -1 : 0));\n        var\
    \ maxk = arr.Length;\n        for (int i = 0; i < k; i++) {\n            if (maxk\
    \ == i)\n                break;\n            else\n                maxk = maxk\
    \ - 1;\n        }\n        Array.Sort(arr, (a, b) => a > b ? 1 : (a < b ? -1 :\
    \ 0));\n        var maxk2 = new List<long>();\n        foreach (var item in arr)\
    \ {\n            if (maxk2 == item)\n                break;\n            else\n\
    \                maxk2.Add(item);\n        }\n        for (int i = 0; i < maxk;\
    \ i++) {\n            res.Add(maxk2[i]);\n        }\n        return res;", " \
    \       List<long> list = new List<long>(arr.Count);\n        list.AddRange(arr);\n\
    \        return list.FindLast(x => list.Count() > k);", "        if (k == 0) return\
    \ new List<long>();\n        if (arr.Count == 0) return new List<long>();\n  \
    \      if (k == arr.Count) return arr;\n        long[] tmpArr = arr.ToArray();\n\
    \        long[] tmpK = k.ToArray();\n        Array.Sort(tmpArr);\n        Array.Sort(tmpK);\n\
    \        List<long> result = Maximum(tmpArr, tmpK.Length).Take(tmpK.Length).ToList();\n\
    \        return result.Union(arr).Take(result.Count).ToList();", "        double\
    \ average = arr.Average();\n        double median = arr.Average((i, j) => (j -\
    \ i) * 0.5);\n        double stDev = arr.Average((i, j) => Math.Pow((j - i), 2));\n\
    \n        var maxList = new List<long>();\n\n        double minValue = arr.Min();\n\
    \        double maxValue = arr.Max();\n        double rangeMax = maxValue - minValue;\n\
    \n        int n = arr.Count;\n        for (int i = 0; i < n; i++)\n        {\n\
    \            double avgDiff = Math.Pow(arr[i] - average, 2);\n            double\
    \ medianDiff = Math.Pow(arr[i] - median, 2);\n            double stDevDiff = Math.Pow(arr[i]\
    \ - stDev, 2);\n\n            var diff = Math.Max(avgDiff, Math.Max(medianDiff,\
    \ stDevDiff));\n            if (diff == 0)\n            {\n                maxList.Add(arr[i]);\n\
    \            }\n            else if (diff > rangeMax)\n            {\n       \
    \         maxList.Add(arr[i]);\n            }\n            else\n            {\n\
    \                if (k > 1)\n                {\n                    maxList.Add(arr[i]);\n\
    \                    k--;\n                }\n            }\n        }\n\n   \
    \     return maxList;", "        Debug.Assert(k <= arr.Count);\n        List<long>\
    \ ret = new List<long>(k);\n        Array.Sort(arr.ToArray(), (l, r) => { return\
    \ (l > r) ? 1 : ((l == r) ? 0 : -1); });\n        for (int i = 0; i < k; i++)\
    \ {\n            if (i < arr.Count) ret.Add(arr[i]);\n            else ret[i]\
    \ = 0L;\n        }\n        return ret;", "        // Initialize result with the\
    \ first k elements of the input array\n        List<long> result = new List<long>(arr.Take(k));\n\
    \        \n        // If k is less than or equal to the length of the input array,\
    \ return\n        // the input array. \n        if (k <= result.Count) {\n   \
    \         return result;\n        }\n\n        // Calculate the size of the result\
    \ list using binary search. \n        long size = k - 1;\n        while (size\
    \ > 0) {\n            long index = BinarySearch(k - 1, arr, size);\n         \
    \   \n            if (index >= result.Count) {\n                break;\n     \
    \       }\n            \n            // Add the element at the appropriate index\
    \ to the result list. \n            result.Insert(index, arr[index]);\n      \
    \      size--;\n        }\n        return result;", "        List<long> max =\
    \ new List<long>();\n        Array.Sort(arr);\n        foreach (var x in arr.Skip(k))\
    \ {\n            max.Add(x);\n        }\n        return max;", "        List<long>\
    \ res = new List<long>();\n        long max = -10000L;\n        long tempMax =\
    \ -10000L;\n        foreach (long item in arr)\n        {\n            temp =\
    \ item;\n            if (item > max)\n            {\n                max = temp;\n\
    \            }\n            if (item > tempMax)\n            {\n             \
    \   tempMax = temp;\n            }\n        }\n        if (max != -10000L)\n \
    \       {\n            for (long i = 0; i < arr.Count; i++)\n            {\n \
    \               if (arr[i] > temp)\n                {\n                    tempMax\
    \ = temp;\n                }\n            }\n        }\n        else\n       \
    \ {\n            for (int i = 0; i < arr.Count; i++)\n            {\n        \
    \        tempMax = temp;\n                if (arr[i] > temp)\n               \
    \ {\n                    tempMax = temp;\n                }\n            }\n \
    \       }\n        if (k > tempMax)\n        {\n            for (int i = k - tempMax;\
    \ i >= 0; i--)\n            {\n                res.Add(max);\n            }\n\
    \        }\n        else\n        {\n            for (int i = 0; i < k - tempMax;\
    \ i++)\n            {\n                res.Add(max);\n            }\n        }\n\
    \        return res;", "        List<long> arrMax = new List<long>(k);\n     \
    \   int len = arr.Count;\n        long max = -1000L;\n        for (int i = 0;\
    \ i < len; i++)\n        {\n            if (arr[i] > max)\n            {\n   \
    \             max = arr[i];\n            }\n        }\n        long currMax =\
    \ -1000L;\n        int cnt = 0;\n        for (int i = 0; i < len; i++)\n     \
    \   {\n            if (arr[i] >= max)\n            {\n                arrMax[cnt]\
    \ = arr[i];\n                cnt++;\n            }\n            if (arr[i] > max\
    \ && arr[i] > currMax)\n            {\n                currMax = arr[i];\n   \
    \         }\n        }\n        arrMax = arrMax.Distinct().ToList();\n       \
    \ return arrMax;", "        long m = arr.Min();\n        if (k > arr.Count) return\
    \ new List<long>();\n        if (k == 0) return new List<long>() { m };\n    \
    \    List<long> r = Maximum(arr.Skip(1).Take(k - 1), k - 1).Take(1).ToList();\n\
    \        if (k > 1)\n            r.Insert(0, m);\n        return r;", "      \
    \  int[] nums = new int[k];\n        int count = 0;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] > nums[count]) {\n             \
    \   nums[count] = arr[i];\n                count++;\n            }\n        }\n\
    \        List<long> max = new List<long>();\n        for (int i = 0; i < k; i++)\n\
    \            max.Add(nums[i]);\n        return max;", "        int n = arr.Count;\n\
    \        if (n <= k)\n            return arr;\n        if (k == 0)\n         \
    \   return arr.ToList();\n\n        long max = 0;\n        foreach (long x in\
    \ arr) {\n            max = Math.Max(max, x);\n        }\n\n        int mid =\
    \ (k + n - 1) / 2;\n        List<long> res = new List<long>();\n        res.Add(max);\n\
    \        long max_ind = arr.Count - 1;\n        for (int i = mid; i >= 0; i--)\
    \ {\n            long next = arr[i];\n            if (next > max) {\n        \
    \        max = next;\n                max_ind = i;\n            }\n          \
    \  if (next > arr[max_ind] && i != max_ind)\n                max = arr[max_ind];\n\
    \            if (i == 0)\n                break;\n        }\n        res.AddRange(arr.Skip(max_ind).Take(k\
    \ - 1).ToList());\n        return res;", "        Debug.Assert(arr.Count >= 1\
    \ && arr.Count <= 1000 && k > 0 && k <= arr.Count);\n        int[] ids = new int[k];\n\
    \        List<long> results = new List<long>();\n        long max = long.MinValue;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (max < arr[i])\
    \ {\n                max = arr[i];\n            }\n            ids[(arr[i] - max)\
    \ % k] = i;\n        }\n        Debug.Assert(max <= arr.Max() && ids.Count <=\
    \ k);\n        for (int i = 0; i < ids.Count; i++) {\n            results.Add(arr[ids[i]]);\n\
    \        }\n        return results;", "        List<long> result = new List<long>();\n\
    \        long nums[] = new long[k];\n        int count = 0;\n        long max\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j\
    \ = 0; j < k; j++) {\n                max = Math.Max(max, arr[i]);\n         \
    \   }\n            nums[j] = max;\n            if (max > arr[i]) {\n         \
    \       result.Add(max);\n            }\n            max = 0;\n        }\n   \
    \     return result;", "        long[] arr = arr.ToArray();\n        long max\
    \ = arr[0];\n        long min = 0;\n        for (int i = 1; i < arr.Length; i++)\
    \ {\n            max = Math.Max(max, arr[i]);\n            min = Math.Min(min,\
    \ arr[i]);\n        }\n        long[] tmp = new long[k];\n        int i = 0;\n\
    \        while (tmp.Length - 1 < k) {\n            if (max < k) {\n          \
    \      for (int j = i; j < arr.Length && arr[j] <= k; j++) {\n               \
    \     tmp[tmp.Length - 1] = arr[j];\n                }\n                i++;\n\
    \            } else {\n                for (int j = i; j < arr.Length && arr[j]\
    \ > k; j++) {\n                    tmp[tmp.Length - 1] = arr[j];\n           \
    \     }\n                i++;\n            }\n        }\n        if (tmp.Length\
    \ > k) {\n            tmp[k] = Math.Max(tmp[k], max);\n            max = tmp[k];\n\
    \        }\n        if (min > 0) {\n            tmp[k] = Math.Max(tmp[k], min);\n\
    \        }\n        if (tmp.Length > 0) {\n            List<long> res = new List<long>(tmp);\n\
    \            return res;\n        } else {\n            return new List<long>();\n\
    \        }", "        List<long> result = new List<long>();\n\n        if (k >\
    \ arr.Count) return result;\n\n        List<long> list = new List<long>();\n\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            list.Add(arr[i]);\n\
    \            if (list.Count == k) break;\n        }\n\n        for (int i = 0;\
    \ i < list.Count - 1; i++) {\n            if (list[i] > list[i + 1]) {\n     \
    \           long temp = list[i];\n                list[i] = list[i + 1];\n   \
    \             list[i + 1] = temp;\n            }\n        }\n\n        result.AddRange(list);\n\
    \n        return result;", "        Debug.Assert(k <= arr.Count);\n        Debug.Assert(k\
    \ >= 0);\n        if (arr.Count == 0) return new List<long>();\n        long sum\
    \ = 0;\n        long min = 0;\n        long max = 0;\n        List<long> res =\
    \ new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n         \
    \   sum += arr[i];\n            if (sum >= k) {\n                max = sum - k;\n\
    \                if (max > k) {\n                    min = sum - k + 1;\n    \
    \            } else {\n                    min = sum - k;\n                }\n\
    \            }\n            res.Add(max);\n            if (min <= k) {\n     \
    \           res.Add(min);\n            }\n            sum = 0;\n        }\n  \
    \      if (max > k) {\n            int count = arr.Count - k;\n            long\
    \ max1 = arr.GetRange(0, k).Max();\n            long max2 = arr.GetRange(k, arr.Count).Max();\n\
    \            while (max <= k) {\n                if (max1 < max2) {\n        \
    \            res.Add(max1);\n                    max1 = max2;\n              \
    \  } else {\n                    res.Add(max2);\n                    max2 = max1;\n\
    \                }\n                max++;\n            }\n        }\n       \
    \ return res;", "        List<long> ret = new List<long>();\n        if (arr.Count\
    \ < k) {\n            k = arr.Count;\n        }\n        if (k == 0 || arr.Count\
    \ == 0) {\n            return ret;\n        }\n        Dictionary<long, long>\
    \ dic = new Dictionary<long, long>();\n        List<long> max = new List<long>();\n\
    \        int min = 0;\n        for (int i = 0; i < k; i++) {\n            long\
    \ value = arr[i];\n            if (dic.ContainsKey(value)) {\n               \
    \ value = dic[value];\n            }\n            if (max != null && (max[i] <\
    \ value || max[i] == value && value < min)) {\n                min = value;\n\
    \            }\n            if (value == min) {\n                dic.Add(value,\
    \ value);\n            } else {\n                dic.Add(value, min);\n      \
    \      }\n            max.Add(value);\n        }\n        if (k == max.Count)\
    \ {\n            ret.AddRange(max);\n        } else {\n            ret.AddRange(max);\n\
    \            ret.AddRange(Maximum(ret, k - 1));\n        }\n        return ret;",
  "        List<long> res = new List<long>();\n        if (k > arr.Count || k < 1)\
    \ {\n            Console.WriteLine(\"Error\");\n            return res;\n    \
    \    }\n        var max_num = arr[k - 1];\n        var max_idx = k;\n        foreach\
    \ (var i in arr.Skip(1).Take(k - 1))\n        {\n            if (i > max_num)\n\
    \            {\n                max_num = i;\n                max_idx = k - 1;\n\
    \            }\n        }\n        res.Add(max_num);\n        Console.WriteLine(res.Count);\n\
    \        if (k <= max_idx)\n            return res;\n        return Maximum(arr,\
    \ max_idx - 1);", "        if (arr.Count < k)\n            return arr;\n     \
    \   if (k == 0)\n            return arr;\n        long ans = arr[0];\n       \
    \ bool needMore = k > 0;\n        List<long> ansList = new List<long>();\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr.Count > 0)\n\
    \                ans = Math.Max(ans, arr[i]);\n            else\n            \
    \    ans = Math.Max(ans, arr[i] % k);\n            if (needMore && ans > ansList[k\
    \ - 1])\n                ansList.Add(ans);\n            ans = Math.Max(ans, k\
    \ - ans);\n            needMore = ans > ansList[k - 1];\n        }\n        return\
    \ ansList;", "        if (k == 0) return arr;\n        long max = 0;\n       \
    \ long ans = 0;\n        if (arr.Count > k) {\n            max = arr.ElementAtOrDefault(arr.Count\
    \ - k);\n            ans = arr.Take(arr.Count - k).Max().Value;\n            arr\
    \ = arr.Skip(arr.Count - k).ToList();\n        }\n        return arr.OrderByDescending(x\
    \ => x).Take(Math.Abs(ans)).Concat(new List<long>() { max }).ToList();", "   \
    \     var max = new List<long>(arr);\n        var n = new List<long>(new long[]\
    \ { -1000, 1000 });\n        // Find out the maximum number in arr\n        long\
    \ maxn = Math.Max(arr.First(), arr.Last());\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            int index = maxn - arr[i];\n            if (index < 0)\n\
    \                index = (index + 1000) % (1000 - k);\n            else if (index\
    \ > 1000)\n                index = (index - 1000 + k) % (1000 - k);\n        \
    \    max.Insert(i, index);\n        }\n        return max;", "        int n =\
    \ arr.Count;\n        if (k > n) {\n            throw new ArgumentException(\"\
    k is greater than the length of arr.\");\n        }\n        long[] ans = new\
    \ long[k];\n        int maxIndex = k - 1;\n        for (int i = 0; i < n; ++i)\
    \ {\n            ans[maxIndex--] = arr[i];\n        }\n        if (k == n) {\n\
    \            return arr;\n        }\n        Array.Sort(ans);\n        List<long>\
    \ result = new List<long>(ans);\n        for (int i = k - 1, j = n - 1, maxIndex\
    \ = 0; i >= 0 || j >= 0 || maxIndex < k - 1; --i, --j, ++maxIndex) {\n       \
    \     if (i > 0 || j > 0 || maxIndex < k - 1) {\n                if (ans[maxIndex]\
    \ > ans[j]) {\n                    result.Insert(maxIndex, ans[j]);\n        \
    \            j = j - 1;\n                } else {\n                    result.Insert(maxIndex,\
    \ ans[i]);\n                    i = i - 1;\n                }\n            }\n\
    \        }\n        return result;", "        long max = arr.ElementAt(0);\n \
    \       arr.Remove(arr.First());\n        var list = new List<long>();\n     \
    \   list.Add(max);\n        foreach (var num in arr)\n        {\n            if\
    \ (num > max)\n            {\n                max = num;\n            }\n    \
    \        list.Add(num);\n        }\n        list = list.OrderByDescending(i =>\
    \ i).Take(k).ToList();\n        return list;", "        Debug.Assert(k <= arr.Count);\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++)\n            result.Add(arr.Max());\n        return result;", "       \
    \ var res = new List<long>();\n        var length = arr.Count;\n        if (length\
    \ == 0) {\n            return res;\n        }\n        Array.Sort(arr);\n    \
    \    var maxIndex = -1;\n        var maxValue = arr[0];\n        for (var i =\
    \ 1; i < length; i++) {\n            var curValue = arr[i];\n            if (curValue\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = curValue;\n\
    \            }\n        }\n        var result = new List<long>();\n        if\
    \ (maxIndex - k >= 0) {\n            result.AddRange(arr.Take(maxIndex - k));\n\
    \        }\n        if (maxIndex + k <= length) {\n            result.AddRange(arr.Skip(maxIndex\
    \ + k));\n        }\n        res.AddRange(result);\n        return res;", "  \
    \      Debug.Assert(k > 0 && k <= arr.Count);\n        long[] arr = arr.ToArray();\n\
    \        var results = new List<long>();\n        int[] visited = new int[k];\n\
    \        for (int i = 0; i < arr.Length; i++) {\n            if (visited[i] !=\
    \ 0) {\n                for (int j = i; j < arr.Length; j++) {\n             \
    \       if (visited[j] != 0) break;\n                    if (arr[j] > arr[i])\
    \ break;\n                    if (arr[j] == arr[i]) results.Add(arr[j]);\n   \
    \             }\n                for (int j = i; j < arr.Length; j++) {\n    \
    \                if (visited[j] != 0) break;\n                    if (arr[j] <\
    \ arr[i]) break;\n                    if (arr[j] == arr[i]) results.Add(arr[j]);\n\
    \                }\n            }\n        }\n        return results.Count > k\
    \ ? results.Take(k) : results;", "        if (arr == null || arr.Count < 1 ||\
    \ k <= 0) return null;\n        long s = arr.Max();\n        long t = 0;\n   \
    \     var res = new List<long>(k);\n        var arr2 = arr.Select((x,i) => new\
    \ { x, i }).GroupBy(x => x.x).Select(g => new { key = g.Key, values = g.Select(x\
    \ => x.x) });\n        foreach (var item in arr2) {\n            t = Math.Max(t,\
    \ item.values.Max());\n            long i = (long)Math.Floor(item.keys.Max() /\
    \ s);\n            while (t < item.values.Max() && i >= 0) {\n               \
    \ res.Add(item.values[i]);\n                i--;\n            }\n        }\n \
    \       return res.Where(x => x != 0).ToList();", "        List<long> res = new\
    \ List<long>();\n        int num = 0;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (num == k) {\n                break;\n            }\n\
    \            if (arr[i] > arr[num]) {\n                num++;\n              \
    \  res.Add(arr[i]);\n            } else {\n                res.Add(arr[num]);\n\
    \                num++;\n            }\n        }\n        return res;", "   \
    \     var result = new List<long>();\n        var m = arr.Count;\n        Debug.Assert(k\
    \ > 0 && k <= m, \"k should be greater than 0 and less than or equal to arr count\"\
    );\n        long kMax = k - 1;\n        for (int i = 0; i < m; i++) {\n      \
    \      long currMax = arr[i];\n            long maxNum = i;\n            for (int\
    \ j = i + 1; j < m; j++) {\n                if (arr[j] > currMax) {\n        \
    \            currMax = arr[j];\n                    maxNum = j;\n            \
    \    }\n            }\n            if (maxNum != i) {\n                result.Add(arr[maxNum]);\n\
    \            }\n        }\n        if (k == 1) {\n            return result;\n\
    \        }\n        // Sort after popping off the first element\n        result.Sort(Comparer.Default);\n\
    \        for (int i = 1; i < kMax; i++) {\n            k = k - 1;\n          \
    \  if (k == 0) {\n                break;\n            }\n            k = k / 2;\n\
    \            long midVal = result[k];\n            int k2 = k;\n            for\
    \ (int j = 0; j < m; j++) {\n                if (result[j] > midVal) {\n     \
    \               result[k2] = result[j];\n                    k2 = j;\n       \
    \         }\n            }\n            result[k2] = midVal;\n        }\n    \
    \    return result;", "        long num = arr.Count;\n        var arr = arr.OrderByDescending(x\
    \ => x).ToList();\n        if (k > num)\n            return arr.Take(1);\n   \
    \     else if (k == num)\n            return arr;\n        else if (k < num)\n\
    \            return arr.Take(k).ToList();\n        else\n            return arr;",
  "        Debug.Assert(arr.Count >= k);\n        Debug.Assert(0 <= k);\n        Debug.Assert(k\
    \ <= arr.Count);\n        Debug.Assert(arr.All(x => x >= -1000L) && (arr.All(x\
    \ => x <= 1000L)));\n        var sorted = arr.OrderByDescending(x => x).Take(k).ToList();\n\
    \        Debug.Assert(sorted.Count > 0);\n        return sorted;", "        var\
    \ n = arr.Count;\n        if (n == 0 || k <= 0) return arr;\n\n        var res\
    \ = new List<long>();\n        var tmp = new List<long>();\n        var m = 0;\n\
    \        var a = 0;\n        var b = 0;\n        var max = 0;\n\n        while\
    \ (true) {\n            tmp = new List<long>(arr.Count);\n            tmp.AddRange(arr);\n\
    \            max = tmp.Count;\n            for (a = 0; a < max; a++)\n       \
    \         tmp.RemoveAt(tmp.Count - 1);\n\n            if (tmp.Count < k) break;\n\
    \            for (b = 0; b < k; b++) {\n                var x = tmp.Take(b).Max();\n\
    \                tmp.Remove(x);\n                tmp.Insert(tmp.Count - 1, x);\n\
    \            }\n            tmp.Remove(max);\n            tmp.Insert(0, max);\n\
    \            tmp.Insert(tmp.Count - 1, max);\n            for (b = 0; b < max;\
    \ b++)\n                tmp.Insert(tmp.Count - 1, max);\n            tmp.Remove(max);\n\
    \            for (a = 0; a < k; a++)\n                if (tmp.Contains(a))\n \
    \                   res.Add(a);\n                else\n                    res.Add(0L);\n\
    \        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      sum += arr[i];\n            if (sum > k)\n                result.Add(sum\
    \ - k);\n            else\n                result.Add(arr[i]);\n        }\n  \
    \      return result;", "        List<long> res = new List<long>();\n\n      \
    \  long[] arr = arr.ToArray();\n\n        Array.Sort(arr);\n\n        for (int\
    \ i = 0; i < k; i++) {\n            res.Add(arr[i]);\n        }\n\n        return\
    \ res;", "        int low = 0;\n        int high = arr.Count - 1;\n        List<long>\
    \ result = new List<long>();\n        while (high > low) {\n            int mid\
    \ = (low + high) / 2;\n            if (arr[mid] > k) {\n                high =\
    \ mid - 1;\n            } else if (arr[mid] < k) {\n                low = mid\
    \ + 1;\n            } else {\n                result.Add(arr[mid]);\n        \
    \        low = mid + 1;\n                high = mid - 1;\n            }\n    \
    \    }\n        return result;", "        if (k == 0)\n            return arr;\n\
    \        var s = new Stack<long>();\n        var ret = new List<long>();\n   \
    \     for (int i = 0; i < arr.Count; ++i) {\n            if (s.Count < k)\n  \
    \              s.Push(arr[i]);\n            else {\n                if (arr[i]\
    \ > s.Peek())\n                    ret.Add(s.Pop());\n                ret.Add(arr[i]);\n\
    \            }\n        }\n        if (s.Count > 0)\n            ret.AddRange(s.Pop());\n\
    \        return ret;", "        // Write your code here\n        if(arr.Count>k)\n\
    \        {\n            var max = new List<long>();\n            int count=0;\n\
    \            foreach (var a in arr)\n            {\n                count++;\n\
    \                if(count==k)\n                {\n                    max.Add(a);\n\
    \                    count--;\n                }\n                else if(count>k)\n\
    \                {\n                    break;\n                }\n          \
    \  }\n            return max;\n        }\n        return arr;", "        Array.Sort(arr);\n\
    \n        var max = new List<long>();\n        var maxCount = 1;\n\n        foreach\
    \ (var x in arr) {\n            long cnt = 0;\n            long y = x;\n\n   \
    \         while (y != 0) {\n                cnt += y % 10;\n                y\
    \ /= 10;\n            }\n\n            if (cnt > maxCount) {\n               \
    \ maxCount = cnt;\n                max = new[] { x };\n            } else if (cnt\
    \ == maxCount) {\n                max.Add(x);\n            }\n        }\n\n  \
    \      if (max.Count < k) {\n            var tmp = Maximum(max, k);\n        \
    \    max.AddRange(tmp);\n        }\n\n        return max;", "        if (arr.Count\
    \ < 1 || k < 1 || k > arr.Count) {\n            throw new ArgumentOutOfRangeException(\"\
    k\");\n        }\n        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        long min = arr[0];\n        foreach (long num in arr) {\n\
    \            if (num > max) {\n                max = num;\n            }\n   \
    \         if (num < min) {\n                min = num;\n            }\n      \
    \  }\n        if (max >= k) {\n            result.AddRange(arr.Take(max));\n \
    \       }\n        if (min >= k) {\n            result.AddRange(arr.Skip(min).Take(k\
    \ - min + 1));\n        }\n        return result;", "        List<long> ans =\
    \ new List<long>();\n        List<long> max = new List<long>();\n        long\
    \ num = 0;\n        if (k == 0) {\n            for (int i = 0; i < arr.Count;\
    \ i++) {\n                if (arr[i] > num) {\n                    num = arr[i];\n\
    \                }\n            }\n            max.Add(num);\n            return\
    \ max;\n        }\n        long curr = arr[0];\n        long max = 0;\n      \
    \  for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > curr) {\n \
    \               curr = arr[i];\n            }\n            max = Math.Max(max,\
    \ curr);\n        }\n        num = curr;\n        max.Add(num);\n        foreach\
    \ (var n in max)\n            ans.Add(n);\n        foreach (var n in arr)\n  \
    \          ans.Add(n);\n        return ans;", "        if (k <= 0 || k > arr.Count)\n\
    \            return new List<long>();\n\n        Array.Sort(arr);\n\n        Array.Sort(arr.Take(arr.Count\
    \ - k).ToArray());\n\n        return arr.Take(arr.Count - k).ToList();", "   \
    \     List<long> result = new List<long>();\n        long n = arr.Count;\n   \
    \     long s = 0;\n        long max = 0;\n        long i;\n        // Find max\
    \ number\n        foreach(long a in arr) {\n            max = Math.Max(max, a);\n\
    \        }\n        s -= max;\n        if (k == 0) return arr.ToList();\n    \
    \    long d = k;\n        while (d > 0) {\n            n /= d;\n            d\
    \ -= 1;\n        }\n        for (i = 0; i < n; i++) {\n            long a = arr[i];\n\
    \            long b = 0;\n            while (a != 0) {\n                b ^= a;\n\
    \                a /= 10;\n            }\n            s -= b;\n            result.Add(b);\n\
    \        }\n        while (k > 0) {\n            result.Add(0);\n            k\
    \ /= 10;\n        }\n        result.Sort();\n        return result;", "      \
    \  // Write your code here\n        long[] res = new long[k];\n        List<long>\
    \ ans = new List<long>();\n        var max = new List<long>();\n        int index\
    \ = 0;\n        arr.Sort();\n        for (int i = 0; i < arr.Length; i++) {\n\
    \            res[i] = arr[i];\n            if (res[i] > max.Count) {\n       \
    \         max = res;\n                index = i;\n            }\n        }\n \
    \       ans.Add(max[index]);\n        for (int i = index; i < k; i++) {\n    \
    \        if (res[i] > res[i - 1])\n                ans.Add(res[i]);\n        }\n\
    \        return ans;", "        // Write your code here\n        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        int low =\
    \ 0;\n        int high = arr.Count - 1;\n        while (low < high) {\n      \
    \      int mid = (low + high) / 2;\n            if (arr[mid] >= k) {\n       \
    \         low = mid + 1;\n            } else {\n                high = mid;\n\
    \            }\n        }\n        return arr.Skip(low).Take(high - low).ToList();",
  "        var result = new List<long>();\n        long max = 0;\n        long min\
    \ = 0;\n        long sum = 0;\n        foreach (var item in arr)\n        {\n\
    \            if (sum == 0) sum += item;\n            else if (sum < 0) sum -=\
    \ item;\n            else if (sum > 0) sum += item;\n            max = Math.Max(max,\
    \ item);\n            min = Math.Min(min, item);\n            sum += item;\n \
    \       }\n        if (k < min)\n        {\n            k = min - 1;\n       \
    \ }\n        long temp;\n        long cur = k;\n        long sum1 = 0;\n     \
    \   long sum2 = 0;\n        while (cur > 0)\n        {\n            temp = sum2;\n\
    \            sum2 = sum1;\n            sum1 = sum;\n            sum += temp;\n\
    \            cur--;\n            if (sum == sum1 && sum1 == sum2) result.Add(temp);\n\
    \        }\n        return result;", "        if (arr.Count == 0 || k > arr.Count\
    \ || k < 1) {\n            throw new ArgumentException();\n        }\n       \
    \ List<long> max = new List<long>(arr.Count);\n        long curMax = -1000000000L;\n\
    \        int index = 0;\n        bool isNegative = false;\n        for (int i\
    \ = 0; i < arr.Count && k > 0; i++) {\n            isNegative = arr[i] < 0;\n\
    \            long cur = arr[i];\n            if (isNegative) {\n             \
    \   cur = -cur;\n            }\n            if (cur > curMax) {\n            \
    \    curMax = cur;\n                max[index++] = cur;\n                k--;\n\
    \            } else if (cur == curMax) {\n                max[index++] = cur;\n\
    \            }\n        }\n        if (k == 0 && max[index - 1] < 1000000000)\
    \ {\n            max.Add(1000000000);\n        } else if (k == 1) {\n        \
    \    max.Add(curMax);\n        }\n        return max;", "        if (arr.Count\
    \ < 1 || k < 1 || k > arr.Count) {\n            throw new ArgumentException();\n\
    \        }\n        List<long> result = new List<long>();\n        arr.Sort();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n    \
    \    }\n        return result;", "        List<long> maxs = new List<long>();\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i >=\
    \ max && maxs.Count < k) {\n                max = i;\n                maxs.Clear();\n\
    \                maxs.Add(i);\n            }\n            if (i >= max) {\n  \
    \              maxs.Add(i);\n            }\n        }\n        long last = maxs[maxs.Count\
    \ - 1];\n        for (int i = maxs.Count - 1; i >= 0; i--) {\n            if (maxs[i]\
    \ > last + 1) {\n                long a = maxs[i];\n                maxs[i] =\
    \ last + 1;\n                maxs[i - 1] = max;\n                last = maxs[i\
    \ - 1];\n                max = a;\n            } else {\n                last\
    \ += 1;\n            }\n        }\n        return maxs;", "        int len1 =\
    \ arr.Count - 1; \n        int len2 = k - len1;\n        List<long> lst = new\
    \ List<long>();\n        long max1 = arr[0], max2 = max1;\n        for (int i\
    \ = 0; i < len1; i++) {\n            if (arr[i] > max1) {\n                max1\
    \ = arr[i];\n            }\n        }\n        long cur1 = max1, cur2 = max1;\n\
    \        for (int i = len1; i < len2; i++) {\n            if (arr[i] > cur2) {\n\
    \                cur2 = cur1;\n            }\n            cur1 = arr[i];\n   \
    \     }\n        lst = new List<long>() { max2, cur2 };\n        if (cur1 > max2)\
    \ {\n            lst.Add(cur1);\n        }\n        return lst;", "        if\
    \ (arr.Count < k)\n            throw new ArgumentOutOfRangeException(\"k\");\n\
    \        if (k > arr.Count)\n            throw new ArgumentException(\"k out of\
    \ range\");\n        var maximums = new List<long>();\n        long temp = -9223372036854775808L;\n\
    \        long[] max = new long[arr.Count];\n        int count = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > temp) {\n      \
    \          temp = (arr[i] + temp) / (2.0 + i);\n                maximums.Add((long)temp);\n\
    \                count++;\n                max[i] = arr[i];\n            }\n \
    \       }\n        if (count == k) {\n            maximums.AddRange(max);\n  \
    \      } else if (count == k - 1) {\n            maximums.Add(temp);\n       \
    \ }\n        return maximums;", "        if (k > arr.Count) {\n            k =\
    \ arr.Count;\n        }\n        long[] max = new long[k];\n        Array.Sort(arr.ToArray(),\
    \ max);\n        var result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++) {\n            result.Add(max[i]);\n        }\n        return result;",
  "        // Your code here\n        long maxSoFar = 0;\n        List<long> maximum\
    \ = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (maxSoFar < arr[i]) {\n                maxSoFar = arr[i];\n         \
    \   }\n        }\n        long[] tempList = new long[k];\n        maximum.Add(maxSoFar);\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (maxSoFar <= arr[i])\
    \ {\n                tempList[i] = maxSoFar;\n            }\n            if (arr[i]\
    \ < maxSoFar) {\n                tempList[i] = arr[i];\n                maxSoFar\
    \ = arr[i];\n            }\n        }\n        Array.Reverse(tempList);\n    \
    \    Array.Reverse(maximum);\n        for (int i = 0; i < k; i++) {\n        \
    \    maximum.Add(tempList[i]);\n        }\n        return maximum;", "       \
    \ if (k == 0) {\n            return arr;\n        }\n\n        var result = new\
    \ List<long>();\n        long best = 0;\n\n        for (int i = 0; i < k; i++)\
    \ {\n            best = Math.Max(best, arr[i]);\n        }\n\n        for (int\
    \ i = k; i < arr.Count; i++) {\n            best = Math.Max(best, Math.Max(arr[i],\
    \ best));\n            result.Add(best);\n        }\n\n        return result;",
  "        if (k == 0) return new List<long>();\n        if (arr.Count <= k) return\
    \ arr;\n        if (arr.Count == k) return arr.OrderByDescending(x => x).ToList();\n\
    \n        var ans = new List<long>();\n        var max = new long[arr.Count];\n\
    \        long curMax = 0;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         max[i] = Math.Max(max[i], arr[i]);\n            if (max[i] > curMax)\
    \ \n                ans.Add(max[i]);\n        }\n        for (int i = arr.Count;\
    \ i < k; i++) {\n            ans.Add(max[i]);\n        }\n        return ans;",
  "        int n = arr.Count;\n        long max = 0;\n        long maxPos = 0;\n \
    \       List<long> ans = new List<long>();\n        for(int i = 0; i < n; i++)\
    \ {\n            if(max < arr[i]) {\n                max = arr[i];\n         \
    \       maxPos = i;\n            }\n        }\n        for(int i = 0; i < n; i++)\
    \ {\n            if(i == maxPos) continue;\n            if(max < arr[i]) {\n \
    \               ans.Add(arr[i]);\n                max++;\n            }\n    \
    \    }\n        if(ans.Count < k) {\n            ans.Add(arr[maxPos]);\n     \
    \       ans.RemoveRange(max+1, k - ans.Count);\n        }\n        return ans;",
  "        if (arr.Count < 1 || k < 1 || k > arr.Count) return null;\n        List<long>\
    \ res = new List<long>();\n        long max = arr[0];\n        long maxIndex =\
    \ arr.Count - 1;\n        long minIndex = 0;\n        while (maxIndex - minIndex\
    \ > 1) {\n            long mid = (maxIndex + minIndex) / 2;\n            if (arr[mid]\
    \ > max) {\n                max = arr[mid];\n                maxIndex = mid;\n\
    \            }\n            else {\n                minIndex = mid + 1;\n    \
    \        }\n        }\n        res.Add(max);\n        long left = 0;\n       \
    \ long right = 0;\n        for (long i = maxIndex - 1; i >= minIndex; i--) {\n\
    \            if (arr[i] > arr[i + 1])\n                left = arr[i];\n      \
    \      else\n                right = arr[i];\n            if (left > max)\n  \
    \              max = left;\n            else\n                max = right;\n \
    \       }\n        res.Add(max);\n        return res;", "        if (k <= 0 ||\
    \ k >= arr.Count) return new List<long>();\n        var list = new List<long>(arr.Count);\n\
    \        arr.Sort();\n        var max = arr[0];\n        for (var i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n   \
    \         }\n        }\n        var result = new List<long>();\n        for (var\
    \ i = k - 1; i >= 0; i--) {\n            if (max < arr[i]) {\n               \
    \ list.Add(arr[i]);\n                max = Math.Max(max, arr[i]);\n          \
    \  } else {\n                break;\n            }\n        }\n        if (result.Count\
    \ > 0) list.Add(max);\n        return list;", "        if (k <= 0 || k > arr.Count)\
    \ return null;\n        long maxValue = (long)int.MaxValue;\n        List<long>\
    \ ans = new List<long>(arr.Count);\n        for (int i = 0; i < arr.Count && maxValue\
    \ < k; i++) {\n            maxValue = Math.Max(maxValue, arr[i]);\n          \
    \  ans.Add(maxValue);\n        }\n        return ans;", "        var arrMax =\
    \ new List<long>();\n        long max = arr[0];\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n   \
    \         }\n        }\n        for (long i = 0; i < max; i++) {\n           \
    \ arrMax.Add(i);\n        }\n        long max2 = arr[0];\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] >= max2) {\n              \
    \  arrMax.Add(arr[i]);\n            }\n        }\n        var tmp = new int[k];\n\
    \        for (int i = 0; i < k; i++) {\n            int index = 0;\n         \
    \   for (int j = 0; j < arr.Count; j++) {\n                if (arr[j] == tmp[i])\
    \ {\n                    index++;\n                    if (index >= arrMax.Count)\
    \ {\n                        arrMax.Add(arr[j]);\n                        index\
    \ = 0;\n                    }\n                    break;\n                }\n\
    \            }\n        }\n        return arrMax;", "        Dictionary<long,\
    \ List<long>> dic = new Dictionary<long, List<long>>();\n\n        foreach(var\
    \ item in arr) {\n            long curKey = item.ToString(CultureInfo.InvariantCulture).PadLeft(32,\
    \ '0');\n            List<long> list = dic.TryGetValue(curKey, out List<long>\
    \ list) ? list : new List<long>();\n            list.Add(item);\n            dic[curKey]\
    \ = list;\n        }\n\n        var curKey = arr.Last().ToString(CultureInfo.InvariantCulture).PadLeft(32,\
    \ '0');\n        List<long> list = dic.TryGetValue(curKey, out List<long> list)\
    \ ? list : new List<long>();\n        list.Add(arr.Last());\n        dic[curKey]\
    \ = list;\n\n        var ret = Enumerable.Range(1, k + 1)\n            .Select(i\
    \ => (long)i)\n            .ToList()\n            .Select(x => arr[x])\n     \
    \       .OrderByDescending(x => x)\n            .Take(k);\n\n        return ret;",
  "        if (k > arr.Count) {\n            k = arr.Count;\n        }\n        List<long>\
    \ result = new List<long>(k);\n        long maxValue = 0;\n        for (int i\
    \ = 0; i < k; i++) {\n            long currentValue = arr[i];\n            while\
    \ (currentValue > maxValue) {\n                maxValue = currentValue;\n    \
    \            int index = result.FindIndex(x => x == maxValue);\n             \
    \   if (index >= 0) {\n                    result.RemoveAt(index);\n         \
    \       }\n                else {\n                    result.Insert(i, maxValue);\n\
    \                }\n                currentValue = arr[++i];\n            }\n\
    \        }\n        return result;", "        if (k > arr.Count) return new List<long>();\n\
    \        HashSet<long> hs = new HashSet<long>();\n        List<long> res = new\
    \ List<long>();\n        long m = 0;\n        int start = 0;\n        foreach\
    \ (long num in arr) {\n            hs.Add(num);\n            if (hs.Count > m)\
    \ {\n                m = hs.Count;\n                start = hs.Count - k;\n  \
    \          }\n        }\n        List<long> newArray = arr.Take(start).Concat(arr.Skip(start\
    \ + m)).ToList();\n        long max = newArray.Min();\n        foreach (long num\
    \ in newArray) {\n            if (num > max) {\n                max = num;\n \
    \           }\n        }\n        while (m < k) {\n            hs.Add(max);\n\
    \            m += 1;\n            long max = newArray.Min();\n            foreach\
    \ (long num in newArray) {\n                if (num > max) {\n               \
    \     max = num;\n                }\n            }\n            newArray.Add(max);\n\
    \        }\n        foreach (long num in newArray) {\n            res.Add(num);\n\
    \        }\n        return res;", "        if (k > arr.Count || k == 0) {\n  \
    \          return new List<long>();\n        }\n        List<long> res = new List<long>();\n\
    \        if (arr.Count > 1) {\n            Array.Sort(arr, arr.GetLowerBound(0),\
    \ arr.GetUpperBound(0));\n            List<long> res = new List<long>();\n   \
    \         long maxval = arr[0];\n            for (long i = 0; i < arr.Count -\
    \ 1; ++i) {\n                if (maxval < arr[i + 1]) {\n                    maxval\
    \ = arr[i + 1];\n                    res.Add(maxval);\n                }\n   \
    \         }\n            return res;\n        } else {\n            List<long>\
    \ res = new List<long>();\n            long maxval = arr.First();\n          \
    \  for (long i = 0; i < arr.Count - 1; ++i) {\n                if (maxval < arr[i\
    \ + 1]) {\n                    maxval = arr[i + 1];\n                    res.Add(maxval);\n\
    \                }\n            }\n            return res;\n        }", "    \
    \    Debug.Assert(k > 0 && k < arr.Count, $\"The length of k should be > 0 & <\
    \ the length of arr.\");\n        Debug.Assert(arr.All(i => i >= -1000 && i <\
    \ 1000), $\"The elements in the list should be in range [-1000, 1000]\");\n\n\
    \        int N = arr.Count;\n        long maxVal = -1000 * N;\n        List<long>\
    \ maxArr = new List<long>(k);\n        long[] arrVals = new long[N];\n       \
    \ for (int i = 0; i < k; i++) {\n            arrVals[i] = arr[i];\n        }\n\
    \n        Array.Sort(arrVals);\n        for (int i = 0; i < N; i++) {\n      \
    \      if (arrVals[i] >= maxVal) {\n                maxVal = arrVals[i];\n   \
    \             maxArr.Clear();\n                for (int j = i; j < N; j++)\n \
    \                   if (arrVals[j] >= maxVal)\n                        maxArr.Add(arrVals[j]);\n\
    \            }\n        }\n\n        return maxArr;", "        // Solution 1:\n\
    \        // Find the k largest elements using heap \n        Array.Sort(arr.OrderByDescending(x\
    \ => x).Take(k));\n\n        // Solution 2:\n        // Find the k largest elements\
    \ using heap \n        // List<long> arr = new List<long>(arr.OrderByDescending(x\
    \ => x).Take(k));\n\n        // Solution 3:\n        // Sort the array and take\
    \ the first k elements.\n        // List<long> arr = new List<long>(arr.OrderByDescending(x\
    \ => x).Take(k));\n\n        // Solution 4:\n        // Sort the array and find\
    \ the index of the k largest elements\n        // List<long> arr = new List<long>(arr.OrderByDescending(x\
    \ => x).Take(k));\n\n        // Solution 5:\n        // Sort the array and return\
    \ the k largest elements\n        // List<long> arr = new List<long>(arr.OrderByDescending(x\
    \ => x).Take(k));\n\n        // Solution 6:\n        // Sort the array and return\
    \ the k largest elements\n        // var arr = arr.OrderByDescending(x => x).Take(k);\n\
    \n        // Solution 7:\n        // Sort the array and find the index of the\
    \ k largest elements\n        // var arr = arr.OrderByDescending(x => x).Take(k);\n\
    \n        // Solution 8:\n        // Sort the array and return the k largest elements\n\
    \        // var arr = arr.OrderByDescending(x => x).Take(k);\n        return arr;",
  "        \n        List<long> res = new List<long>();\n        \n        long max\
    \ = 0;\n        \n        for (int i = 0; i <= k; i++) {\n            max = arr[i]>max?arr[i]:max;\n\
    \        }\n        \n        for (int i = 0; i < k; i++) {\n            max =\
    \ Math.Max(max, arr[i]);\n        }\n        \n        Array.Sort(arr);\n    \
    \    \n        for (int i = 0; i < k; i++) {\n            \n            res.Add(arr[i]);\n\
    \            \n            if (arr[i] > max)\n                max = arr[i];\n\
    \        }\n        \n        for (int i = k; i < arr.Count; i++) {\n        \
    \    \n            res.Add(arr[i]);\n            \n            if (arr[i] > max)\n\
    \                max = arr[i];\n        }\n        \n        return res;", " \
    \       List<long> list = new List<long>();\n        long max = 0;\n        long\
    \ current = 0;\n        foreach (long i in arr)\n            if (max < i) {\n\
    \                max = i;\n                current = i;\n            }\n     \
    \   while (current < max && list.Count < k) {\n            list.Add(current);\n\
    \            current++;\n        }\n        if (list.Count > k)\n            list\
    \ = list.Take(k).ToList();\n        return list;", "        // initialize result\n\
    \        var result = new List<long>();\n        // set first element as max,\
    \ add it to result\n        result.Add(arr[0]);\n        // set initial length\n\
    \        var length = arr.Count;\n        // loop until length is less than k\n\
    \        while (result.Count < k) {\n            // loop until length >= k\n \
    \           while (length >= k) {\n                // loop until first element\
    \ is greater than or equal to maximum element\n                while (arr.FirstOrDefault()\
    \ > result.LastOrDefault()) {\n                    // remove first element\n \
    \                   result.RemoveAt(0);\n                    // decrease length\n\
    \                    length--;\n                }\n                // add last\
    \ element\n                result.Add(arr[length]);\n                // increase\
    \ length\n                length++;\n            }\n        }\n        // return\
    \ result\n        return result;", "        List<long> result = new List<long>();\n\
    \        var len = arr.Count;\n        // sort all elements in descending order\
    \ \n        arr.Sort((x, y) => y.CompareTo(x));\n        long max = 0;\n     \
    \   for (int i = 0; i < len; ++i) {\n            // get max number in the list\
    \ \n            if (arr[i] > max) {\n                max = arr[i];\n         \
    \   }\n        }\n        // get k numbers greater than max number \n        List<long>\
    \ res1 = arr.Where(x => x > max).Take(k).ToList();\n        // sort k numbers\
    \ greater than max number \n        res1.Sort((x, y) => y.CompareTo(max));\n \
    \       // insert max number at the end of the list \n        result.Insert(0,\
    \ max);\n        // merge k numbers greater than max number to result list \n\
    \        int startIndex = 1;\n        result.AddRange(res1);\n        while (startIndex\
    \ + 1 < res1.Count) {\n            long x = res1[startIndex];\n            long\
    \ y = res1[startIndex + 1];\n            if (x > y) {\n                result.Add(x);\n\
    \                ++startIndex;\n            } else {\n                result.Add(y);\n\
    \                ++startIndex;\n            }\n        }\n        return result;",
  "        Debug.Assert(k <= arr.Count && k > 0, \"k must be positive and k must be\
    \ greater than zero.\");\n        long temp = 0L;\n        List<long> result =\
    \ new List<long>();\n        while (k >= temp) {\n            temp = temp.Max();\n\
    \            result.Add(temp);\n        }\n        return result;", "        //\
    \ write your code here\n        if (k > arr.Count) k = arr.Count;\n        Array.Sort(arr);\n\
    \        if (arr.Count > k) {\n            arr.RemoveRange(0, arr.Count - k);\n\
    \        }\n        return arr;", "        Debug.Assert(arr.Count > 0);\n    \
    \    Debug.Assert(0 <= k && k <= arr.Count);\n        Array.Sort(arr);\n     \
    \   Array.Sort(arr.Take(k));\n        return arr.Take(k);", "        if (arr.Count\
    \ == 0)\n            return new List<long>();\n        if (k > arr.Count)\n  \
    \          return Maximum(arr, arr.Count - 1);\n        if (k == 0)\n        \
    \    return new List<long>(arr.OrderByDescending(o => o).Take(arr.Count));\n\n\
    \        // find the maximum element in the list\n        var max = arr.OrderByDescending(o\
    \ => o).First();\n        var maxIndex = 0;\n\n        // iterate over remaining\
    \ list\n        for (var i = 1; i < k; i++) {\n            if (arr[i] > max)\n\
    \                max = arr[i];\n            if (arr[i] == max)\n             \
    \   maxIndex = i;\n        }\n\n        // replace all the elements with the maximum\
    \ number\n        var newArray = arr.Where(o => o != max).ToArray();\n       \
    \ var newList = Maximum(newArray, maxIndex + 1);\n\n        return newList.Concat(newArray.Take(maxIndex)).ToList();",
  "        List<long> ret = new List<long>();\n\n        if (k > arr.Count) throw\
    \ new ArgumentOutOfRangeException(\"k\", \"k can't be greater or equal than arr.Count\"\
    );\n        if (k > arr.Count) return ret;\n        // sort the arr\n        long[]\
    \ arr = arr.OrderBy(o => o).ToArray();\n\n        // find max k\n        long\
    \ max = arr[k-1];\n        long index = 0;\n        while (index < k) {\n    \
    \        if (arr[index] > max)\n                max = arr[index];\n          \
    \  index++;\n        }\n        ret.Add(max);\n\n        // find the k-1 element\
    \ with max value\n        max = arr[index-1];\n        index = 1;\n        while\
    \ (index < k) {\n            if (arr[index] > max)\n                max = arr[index];\n\
    \            index++;\n        }\n        ret.Add(max);\n\n        return ret;",
  "        if (k <= 0 || arr.Count == 0 || k > arr.Count || arr.Count < 2)\n     \
    \       return arr;\n        List<long> result = new List<long>(k);\n        long\
    \ max_value = 0;\n        for (int i = 0; i < arr.Count; ++i) {\n            if\
    \ (arr[i] > max_value) {\n                max_value = arr[i];\n            }\n\
    \        }\n        for (int i = 0; i < k; ++i) {\n            result.Add(max_value);\n\
    \        }\n        return result;", "        bool sorted = true;\n        List<long>\
    \ results = new List<long>();\n        foreach (long num in arr) {\n         \
    \   if (sorted) {\n                long maxnum = results.Max();\n            \
    \    if (num > maxnum) {\n                    maxnum = num;\n                }\n\
    \                results.Add(maxnum);\n            } else {\n                if\
    \ (num > results.Max()) {\n                    results.Add(num);\n           \
    \     }\n            }\n            sorted = true;\n        }\n        List<long>\
    \ resarry = new List<long>();\n        foreach (long x in results) {\n       \
    \     resarry.Add(x);\n        }\n        if (k > resarry.Count) {\n         \
    \   k = resarry.Count;\n        }\n        resarry = resarry.OrderBy(x => x).Take(k).ToList();\n\
    \        return resarry;", "        if (k > arr.Count) {\n            return null;\n\
    \        }\n        long n = arr.Count;\n        long maxValue = arr[0];\n   \
    \     List<long> result = new List<long>();\n        List<long> sorted = new List<long>();\n\
    \        for (long i = 1; i < n; i++) {\n            if (arr[i] > maxValue) {\n\
    \                maxValue = arr[i];\n            }\n        }\n        maxValue\
    \ = maxValue * (long) Math.Pow(2, k);\n        while (true) {\n            long\
    \ maxLong = maxValue;\n            if (maxValue > long.MaxValue) {\n         \
    \       maxValue = maxValue >> 1;\n            } else {\n                break;\n\
    \            }\n        }\n        while (maxValue / 2L > long.MaxValue) {\n \
    \           maxValue >>= 1L;\n        }\n        for (int i = 0; i < k; i++) {\n\
    \            long tmpMaxValue = 0;\n            while (maxValue >= tmpMaxValue)\
    \ {\n                maxValue -= tmpMaxValue;\n                maxLong += tmpMaxValue;\n\
    \                if (maxLong > long.MaxValue) {\n                    tmpMaxValue\
    \ = maxLong >> 1;\n                }\n            }\n            result.Add(tmpMaxValue);\n\
    \        }\n        bool flag = false;\n        foreach (var item in result) {\n\
    \            if (item < n * (long) Math.Pow(2, k)) {\n                sorted.Add(item);\n\
    \            }\n        }\n        foreach (var item in sorted) {\n          \
    \  result.Remove(item);\n        }\n        return result;", "        long count\
    \ = 0;\n        long max = arr[0];\n        List<long> result = new List<long>(k);\n\
    \        foreach (long num in arr) {\n            if (count >= k) {\n        \
    \        break;\n            }\n            else if (num > max) {\n          \
    \      max = num;\n            }\n            count++;\n        }\n        if\
    \ (count < k) {\n            for (long i = k; i < count; i++) {\n            \
    \    result.Add(max);\n            }\n        }\n        else {\n            result.Add(max);\n\
    \        }\n        return result;", "        int m = arr.Count;\n        List<long>\
    \ temp = new List<long>();\n        arr.Sort();\n        // Find the first k elements\
    \ that have bigger than the largest k.\n        for (int i = 0; i < k; i++) {\n\
    \            if (arr[i] > temp[temp.Count - 1]) {\n                temp.Add(arr[i]);\n\
    \            }\n        }\n        Array.Reverse(temp);\n        List<long> returnList\
    \ = new List<long>();\n        if (k == 1) {\n            returnList = temp;\n\
    \        }\n        else if (k == 2) {\n            returnList = temp;\n     \
    \       if (arr[1] > arr[2]) {\n                returnList.Insert(0, arr[1]);\n\
    \            }\n            else if (arr[2] > arr[1]) {\n                returnList.Insert(0,\
    \ arr[2]);\n            }\n        }\n        else if (k == 3) {\n           \
    \ returnList = temp;\n            if (arr[1] > arr[2]) {\n                if (arr[1]\
    \ > arr[3]) {\n                    if (arr[1] > arr[4]) {\n                  \
    \      if (arr[1] > arr[5]) {\n                            if (arr[1] > arr[6])\
    \ {\n                                returnList.Insert(0, arr[1]);\n         \
    \                   }\n                            else if (arr[2] > arr[4]) {\n\
    \                                returnList.Insert(0, arr[2]);\n             \
    \               }\n                            else if (arr[3] > arr[4]) {\n \
    \                               returnList.Insert(0, arr[3]);\n              \
    \              }\n                            else if (arr[4] > arr[3]) {\n  \
    \                              returnList.Insert(0, arr[4]);\n               \
    \             }\n                            else if (arr[5] > arr[4]) {\n   \
    \                             returnList.Insert(0, arr[5]);\n                \
    \            }\n                            else if (arr[6] > arr[5]) {\n    \
    \                            returnList.Insert(0, arr[6]);\n                 \
    \           }\n                        }\n                        else if (arr[2]\
    \ > arr[3]) {\n                            if (arr[2] > arr[4]) {\n          \
    \                      if (arr[2] > arr[5]) {\n                              \
    \      if (arr[2] > arr[6]) {\n                                        returnList.Insert(0,\
    \ arr[2]);\n                                    }\n                          \
    \          else if (arr[3] > arr[5]) {\n                                     \
    \   returnList.Insert(0, arr[3]);\n                                    }\n   \
    \                                 else if (arr[4] > arr[5]) {\n              \
    \                          returnList.Insert(0, arr[4]);\n                   \
    \                 }\n                                    else if (arr[6] > arr[5])\
    \ {\n                                        returnList.Insert(0, arr[6]);\n \
    \                                   }\n                                }\n   \
    \                             else if (arr[3] > arr[4]) {\n                  \
    \                  if (arr[3] > arr[5]) {\n                                  \
    \      if (arr[3] > arr[6]) {\n                                            returnList.Insert(0,\
    \ arr[3]);\n                                        }\n                      \
    \                  else if (arr[4] > arr[5]) {\n                             \
    \               returnList.Insert(0, arr[4]);\n                              \
    \          }\n                                        else if (arr[6] > arr[5])\
    \ {\n                                            returnList.Insert(0, arr[6]);\n\
    \                                        }", "        // Write your code here\n\
    \        List<long> max = new List<long>();\n        if (arr.Count <= 0) return\
    \ max;\n        if (k <= 0) { return max; }\n        int count = 0;\n        int\
    \ i = 0;\n        while (i < arr.Count && count < k) {\n            long curr\
    \ = arr[i];\n            if (curr > (max[count])) max[count] = curr;\n       \
    \     count++;\n            i++;\n        }\n        if (count == k) {\n     \
    \       List<long> copy = new List<long>(max);\n            copy.Add(arr[arr.Count\
    \ - 1]);\n            max = copy;\n        }\n        return max;", "        int\
    \ k1 = (int)k;\n        List<long> result = new List<long>(k1);\n        List<long>\
    \ tmp = new List<long>(k1);\n        long max = 0;\n        long tmp2 = 0;\n \
    \       bool flag = true;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (i < k1) flag = false;\n            tmp = arr.Skip(i).Take(k1).ToList();\n\
    \            max = Math.Max(max, tmp[0]);\n            long tmp3 = tmp[0];\n \
    \           if (flag) {\n                if (tmp2 == max) {\n                \
    \    result.Add(tmp2);\n                } else {\n                    if (tmp2\
    \ > max) {\n                        result.Add(tmp2);\n                    }\n\
    \                    result.Add(max);\n                }\n                max\
    \ = tmp3;\n                tmp2 = 0;\n            }\n            tmp2 = tmp3;\n\
    \        }\n        if (tmp2 > max) {\n            result.Add(tmp2);\n       \
    \ } else {\n            if (tmp2 > max) {\n                result.Add(tmp2);\n\
    \            }\n            result.Add(max);\n        }\n        return result;",
  "        if (k > arr.Count) return new List<long>();\n        int k1 = k == 0 ?\
    \ 1 : k;\n        if (k1 > arr.Count)\n            return Maximum(arr, k1);\n\
    \        List<long> result = new List<long>();\n        bool change = false;\n\
    \        for (int i = 0; i < arr.Count - 1; i++) {\n            long max1 = arr[i];\n\
    \            long max2 = arr[i + 1];\n            if (max1 > max2) {\n       \
    \         if (max1 > 0 && max2 > 0)\n                    max1 = (long)Math.Max(max1,\
    \ max2);\n                else\n                    max2 = (long)Math.Max(max1,\
    \ max2);\n            } else if (max1 < max2) {\n                max1 = (long)Math.Min(max1,\
    \ max2);\n            } else {\n                max1 = (long)Math.Max(max1, max2);\n\
    \                max2 = (long)Math.Max(max1, max2);\n            }\n         \
    \   if (max1 != max2) {\n                change = true;\n                result.Add(max1);\n\
    \                result.Add(max2);\n            } else {\n                result.Add(max1);\n\
    \            }\n        }\n        if (change && !result.Contains(arr[result.Count\
    \ - 1]))\n            result.Add(arr[result.Count - 1]);\n        if (k > result.Count)\n\
    \            return Maximum(result, k);\n        return result;", "        long[]\
    \ vals = arr.ToArray();\n        Array.Sort(vals);\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(vals[i]);\n\
    \        }\n        return result;", "        var ans = new List<long>();\n  \
    \      var arr = arr.OrderByDescending(x=>x);\n        \n        int m = arr.Count;\n\
    \        int n = arr.Min(a => a);\n        int k1 = arr.Min(a => a) - n;\n   \
    \     int k2 = arr.Min(a => a) - n;\n        int k3 = arr.Min(a => a) - n;\n \
    \       int k4 = arr.Min(a => a) - n;\n        \n        \n        \n        //Console.WriteLine(\"\
    k1: \" + k1 + \", k2: \" + k2 + \", k3: \" + k3 + \", k4: \" + k4);\n        \n\
    \        if (k1 == 0)\n            ans.Add(arr.Min(a => a));\n        else if\
    \ (k2 == 0)\n            ans.Add(arr.Min(a => a));\n        else if (k3 == 0)\n\
    \            ans.Add(arr.Min(a => a));\n        else if (k4 == 0)\n          \
    \  ans.Add(arr.Min(a => a));\n        else\n        {\n            //int ki =\
    \ arr.Min(a => a) - n;\n            //int mi = k1 + k2 + k3 + k4;\n          \
    \  //int j = (k1 * k2) + (k3 * k4) + (ki * k4);\n            //Console.WriteLine(\"\
    k1: \" + k1 + \", k2: \" + k2 + \", k3: \" + k3 + \", k4: \" + k4);\n        \
    \    //Console.WriteLine(\"mi: \" + mi + \", j: \" + j);\n            int mi =\
    \ k1 + k2 + k3 + k4;\n            int j = (k1 * k2) + (k3 * k4);\n           \
    \ if (j >= mi)\n            {\n                ans.Add(arr.Min(a => a));\n   \
    \         }\n            else\n            {\n                //Console.WriteLine(\"\
    mi: \" + mi + \", j: \" + j);\n                \n                if (j < mi)\n\
    \                {\n                    ans.Add(arr.Min(a => a));\n          \
    \          \n                    int ki = arr.Min(a => a) - n;\n             \
    \       ans.Add(arr.Min(a => a));\n                    \n                    ans.Add(arr.Min(a\
    \ => a));\n                }\n                else\n                {\n      \
    \              int ki = arr.Min(a => a) - n;\n                    ans.Add(arr.Min(a\
    \ => a));\n                    \n                    ans.Add(arr.Min(a => a));\n\
    \                    \n                    ans.Add(arr.Min(a => a));\n       \
    \             \n                }\n                \n            }\n        }\n\
    \        \n        return ans;", "        if (arr.Count < k) {\n            return\
    \ arr.Take(k).ToList();\n        }\n        List<long> result = new List<long>();\n\
    \        long max = arr.Max();\n        long n = arr.Count;\n        long min\
    \ = arr.Min();\n        long middle = max / 2;\n        long sum = 0;\n      \
    \  long cnt = 0;\n        foreach (long i in arr) {\n            if (i < middle)\
    \ {\n                if (cnt < k) {\n                    cnt = cnt + 1;\n    \
    \                sum++;\n                }\n                result.Add(i);\n \
    \           }\n            else {\n                sum = sum - Math.Abs(i - middle);\n\
    \                if (sum > 0) {\n                    result.Add(i);\n        \
    \        }\n            }\n        }\n        if (sum > 0) {\n            result.Add(max);\n\
    \        }\n        return result;", "        if (arr.Count < 1 || k > arr.Count)\
    \ {\n            throw new ArgumentOutOfRangeException(\"arr or k is out of range\"\
    );\n        }\n        long max = arr.Max();\n        long[] nums = arr.ToArray();\n\
    \        int n = nums.Length;\n        long[] ans = new long[k];\n        for\
    \ (int i = 1; i < n; i++) {\n            for (int j = 0; j < k - 1; j++) {\n \
    \               if (nums[j] > max) {\n                    ans[j] = nums[j];\n\
    \                    break;\n                }\n            }\n            if\
    \ (j == k - 1) {\n                ans[j] = nums[j];\n            }\n        }\n\
    \        return ans.ToList();", "        int start = 0;\n        int end = arr.Count\
    \ - 1;\n\n        while (start <= end) {\n            int mid = (start + end)\
    \ / 2;\n            if (arr[mid] > k)\n                end = mid - 1;\n      \
    \      else if (arr[mid] < k)\n                start = mid + 1;\n            else\n\
    \                return arr.Take(mid).ToList();\n        }\n        return arr.Take(start).ToList();",
  "        // Write your code here\n        var resultList = new List<long>();\n \
    \       for (int i = 1; i <= k; i++) {\n            long maxElement = arr.Min();\n\
    \            for (int j = i; j <= arr.Count; j++) {\n                if (arr[j]\
    \ > maxElement) {\n                    maxElement = arr[j];\n                }\n\
    \            }\n            resultList.Add(maxElement);\n        }\n        return\
    \ resultList;", "        if (k == 1) {\n            return arr;\n        }\n \
    \       if (k > arr.Count) {\n            k = arr.Count;\n        }\n\n      \
    \  List<long> ret = new List<long>();\n\n        for (int i = 0; i < k; i++) {\n\
    \            long maxValue = arr.Max();\n            if (maxValue == 0) {\n  \
    \              maxValue = -1L;\n            }\n            ret.Add(maxValue);\n\
    \            arr = arr.OrderByDescending(x => x).ToList();\n            if (arr.Count\
    \ == 0) {\n                break;\n            }\n        }\n        return ret;",
  "        // write your code here\n        return arr.OrderByDescending(a => a).Take(k).ToList();",
  "        List<long> result = new List<long>();\n        List<long> arr = arr.OrderBy(c\
    \ => (int)c).ToList();\n        // For each element, check if it exceeds k. If\
    \ yes, add the element to the result.\n        foreach (long element in arr) {\n\
    \            if (k > element) {\n                result.Add(element);\n      \
    \          k -= element;\n            }\n            if (k <= 0) {\n         \
    \       break;\n            }\n        }\n        return result;", "        List<long>\
    \ res = new List<long>();\n        Array.Sort(arr, (x, y) => {\n            long\
    \ xMax = x;\n            long yMax = y;\n            if(xMax < yMax) {\n     \
    \           return -1;\n            }\n            return 1;\n        });\n  \
    \      for(int i = 0; i <= k; i++) {\n            if(i < arr.Count) {\n      \
    \          res.Add(arr[i]);\n            }\n            else if(arr.Count == 0)\
    \ {\n                break;\n            }\n            else {\n             \
    \   long tempMax = arr[0];\n                for(int j = 1; j < arr.Count; j++)\
    \ {\n                    if(arr[j] > tempMax) {\n                        tempMax\
    \ = arr[j];\n                    }\n                }\n                res.Add(tempMax);\n\
    \                arr.RemoveAt(0);\n            }\n        }\n        return res;",
  "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            result.Add(0);\n        }\n        long maxValue = arr[0]; //\
    \ Initialize max value with first element in the list.\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n              \
    \  maxValue = arr[i];\n            }\n            result[i] = maxValue;\n    \
    \    }\n        return result;", "        if (k > arr.Count) {\n            k\
    \ = arr.Count;\n        }\n        List<long> result = new List<long>(k);\n  \
    \      result.AddRange(arr.OrderByDescending(n => n).Take(k));\n        return\
    \ result;", "        // init arr pointer\n        long max = arr[0];\n       \
    \ long index = 1;\n        while (index < arr.Count) {\n            if (max <\
    \ arr[index]) {\n                max = arr[index];\n            }\n          \
    \  index++;\n        }\n        // copy arr to return arr\n        List<long>\
    \ ret = new List<long>();\n        while (index > 0) {\n            ret.Add(max);\n\
    \            index--;\n            max = arr[index];\n        }\n        return\
    \ ret;", "        long[] num = new long[k];\n        long m = 0;\n        long\
    \ max = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (m ==\
    \ 0) {\n                m = arr[i];\n                max = arr[i];\n         \
    \   }\n            if (arr[i] > max) {\n                m = arr[i];\n        \
    \        max = arr[i];\n            }\n        }\n        if (m == 0) {\n    \
    \        num[0] = max;\n        } else {\n            int j = 0;\n           \
    \ while (j < k) {\n                num[j] = max;\n                if (max > num[j])\
    \ {\n                    j++;\n                } else {\n                    break;\n\
    \                }\n            }\n        }\n        return num.OrderByDescending().ToList();",
  "        long ans = 0;\n        List<long> result = new List<long>();\n\n      \
    \  if (k > arr.Count || k == 0) {\n            return result;\n        }\n\n \
    \       if (k == arr.Count) {\n            ans = arr.Last();\n            return\
    \ result;\n        }\n\n        double maxValue = 0;\n        for (int i = 0;\
    \ i < k; i++) {\n            double x = arr.ElementAt(i);\n            if (x >\
    \ maxValue) {\n                maxValue = x;\n            }\n        }\n     \
    \   ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n            double\
    \ x = arr.ElementAt(i);\n            if (x > maxValue) {\n                maxValue\
    \ = x;\n            }\n        }\n        ans = maxValue;\n\n        for (int\
    \ i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n           \
    \ if (x > maxValue) {\n                maxValue = x;\n            }\n        }\n\
    \        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n          \
    \  double x = arr.ElementAt(i);\n            if (x > maxValue) {\n           \
    \     maxValue = x;\n            }\n        }\n        ans = maxValue;\n\n   \
    \     for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n\
    \            if (x > maxValue) {\n                maxValue = x;\n            }\n\
    \        }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n\
    \            double x = arr.ElementAt(i);\n            if (x > maxValue) {\n \
    \               maxValue = x;\n            }\n        }\n        ans = maxValue;\n\
    \n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n\
    \            if (x > maxValue) {\n                maxValue = x;\n            }\n\
    \        }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n\
    \            double x = arr.ElementAt(i);\n            if (x > maxValue) {\n \
    \               maxValue = x;\n            }\n        }\n        ans = maxValue;\n\
    \n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n\
    \            if (x > maxValue) {\n                maxValue = x;\n            }\n\
    \        }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n\
    \            double x = arr.ElementAt(i);\n            if (x > maxValue) {\n \
    \               maxValue = x;\n            }\n        }\n        ans = maxValue;\n\
    \n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n\
    \            if (x > maxValue) {\n                maxValue = x;\n            }\n\
    \        }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n\
    \            double x = arr.ElementAt(i);\n            if (x > maxValue) {\n \
    \               maxValue = x;\n            }\n        }\n        ans = maxValue;\n\
    \n        for (int i = 0; i < k; i++) {\n            double x = arr.ElementAt(i);\n\
    \            if (x > maxValue) {\n                maxValue = x;\n            }\n\
    \        }\n        ans = maxValue;\n\n        for (int i = 0; i < k; i++) {\n\
    \            double x = arr.ElementAt(i);\n            if (x > ", "        //\
    \ sort arr\n        Array.Sort(arr);\n        // construct kth number list\n \
    \       List<long> kth = new List<long>();\n        for (int i = k; i > 0; i--)\n\
    \            kth.Add(arr[i - 1]);\n        // reverse kth list\n        for (int\
    \ i = k; i > 0; i--)\n            kth[i - 1] *= -1;\n        // copy all elements\
    \ except kth number\n        List<long> res = new List<long>();\n        for (int\
    \ i = 0; i < arr.Length - k + 1; i++)\n            res.Add(arr[i]);\n        //\
    \ reverse the result list\n        res.Reverse();\n        // return the result\n\
    \        return kth;", "        if (arr.Count == 0) return null;\n        long\
    \ min = arr.Min();\n        long max = arr.Max();\n        if (min == max) return\
    \ arr;\n        List<long> results = new List<long>();\n        List<long> newArr\
    \ = new List<long>();\n        bool isAllGreaterThanMin = true;\n        bool\
    \ isAllLessThanMax = true;\n        bool isAllEqual = true;\n        foreach (long\
    \ num in arr) {\n            if (num > min) {\n                newArr.Add(num);\n\
    \                if (num <= max) isAllGreaterThanMin = false;\n            } else\
    \ {\n                if (num >= min) {\n                    newArr.Add(num);\n\
    \                    if (num >= max) isAllLessThanMax = false;\n             \
    \   } else {\n                    isAllEqual = false;\n                }\n   \
    \         }\n        }\n        bool isGreaterThanMax = k <= arr.Max();\n    \
    \    bool isLessThanMin = k <= arr.Min();\n        if (!isGreaterThanMax && !isLessThanMin)\
    \ return arr;\n        if (isAllGreaterThanMin && isAllLessThanMax) {\n      \
    \      return newArr;\n        }\n        if (isAllEqual) return newArr;\n   \
    \     if (isGreaterThanMax) {\n            foreach (long num in newArr) {\n  \
    \              if (num <= max) results.Add(num);\n            }\n        } else\
    \ {\n            foreach (long num in newArr) {\n                if (num >= min)\
    \ results.Add(num);\n            }\n        }\n        return results.ToArray().OrderByDescending(num\
    \ => num).ToList();", "        if (k > arr.Count || k < 0) return null;\n    \
    \    List<long> maximums = new List<long>();\n        long max = 0;\n        foreach\
    \ (long num in arr) {\n            if (num > max) {\n                max = num;\n\
    \            }\n        }\n        foreach (long num in arr) {\n            if\
    \ (num == max) {\n                maximums.Add(num);\n                if (maximums.Count\
    \ > k) {\n                    maximums.RemoveAt(0);\n                }\n     \
    \       }\n        }\n        return maximums;", "        var ans = new List<long>();\n\
    \        var max = new List<long>();\n        var count = new Dictionary<long,\
    \ int>();\n        \n        foreach(var num in arr) {\n            if(!count.ContainsKey(num))\
    \ {\n                count.Add(num, 0);\n            }\n            \n       \
    \     var count = count[num];\n            if(count > 1) {\n                count.Value++;\n\
    \            } else {\n                count = 1;\n            }\n           \
    \ count[num] = count;\n            \n            if(count > max[maxIndex]) {\n\
    \                maxIndex = maxIndex == -1 ? 0 : maxIndex;\n                max[maxIndex]\
    \ = num;\n            }\n        }\n        \n        for(var i = 0; i < maxIndex;\
    \ i++) {\n            ans.Add(max[i]);\n        }\n        \n        return ans;",
  "        Dictionary<long, long> nums = new Dictionary<long, long>();\n        foreach\
    \ (var item in arr) {\n            if (nums.ContainsKey(item)) {\n           \
    \     nums[item] += 1;\n            } else {\n                nums.Add(item, 1L);\n\
    \            }\n        }\n        List<long> res = new List<long>();\n      \
    \  var maxCount = 0;\n        foreach (var num in nums) {\n            var count\
    \ = nums[num];\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                res.Clear();\n                res.Add(num);\n    \
    \        } else if (count == maxCount) {\n                res.Add(num);\n    \
    \        }\n        }\n        return res.Take(k).ToList();", "        long N\
    \ = arr.Count;\n        if (N < 1) return new List<long>();\n        long max\
    \ = arr[0];\n        for (int i = 1; i < N; i++) {\n            long curr = arr[i];\n\
    \            if (max < curr) {\n                max = curr;\n            }\n \
    \       }\n        return new List<long>(arr.Take(k).ToArray());", "        long\
    \ max = arr[0].ToLong();\n        List<long> result = new List<long>(k);\n   \
    \     long max = arr[0].ToLong();\n        for (int i = 0; i < arr.Count; ++i)\
    \ {\n            if (arr[i].ToLong() > max) {\n                max = arr[i].ToLong();\n\
    \            }\n            if (arr[i].ToLong() == max) {\n                result.Add(arr[i].ToLong());\n\
    \            }\n        }\n        return result;", "        int n = arr.Count;\n\
    \        long[] arr = arr.OrderByDescending(x => x).ToArray();\n        List<long>\
    \ max = new List<long>(k);\n        long max_num = arr[0];\n        for (int i\
    \ = 0; i < k; i++) {\n            if (max_num < arr[i]) {\n                max_num\
    \ = arr[i];\n            }\n        }\n        max.Add(max_num);\n        long[]\
    \ result_arr = max.OrderByDescending(x => x).ToArray();\n        return new List<long>(result_arr);",
  "        if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        int len = arr.Count;\n        List<long> result = new List<long>();\n\
    \        Array.Sort(arr);\n        if (k > arr.Count) {\n            k = arr.Count;\n\
    \        }\n        if (k == 0) {\n            return arr;\n        }\n      \
    \  while (k != 0) {\n            int i = 0;\n            long maxVal = arr[i];\n\
    \            for (int j = 0; j < k; j++) {\n                if (maxVal > arr[i])\
    \ {\n                    maxVal = arr[i];\n                }\n               \
    \ i++;\n            }\n            result.Add(maxVal);\n            k--;\n   \
    \     }\n        return result;", "        var list = new List<long>();\n    \
    \    var length = arr.Count;\n        long max = 0;\n        long min = long.MaxValue;\n\
    \        foreach (var num in arr) {\n            long cur = num;\n           \
    \ while (list.Contains(cur)) {\n                cur++;\n            }\n      \
    \      list.Add(cur);\n            if (cur > max) {\n                max = cur;\n\
    \            }\n            if (cur < min) {\n                min = cur;\n   \
    \         }\n        }\n        if (min == long.MinValue && max == long.MaxValue)\
    \ {\n            list.Add(1);\n        }\n        if (length == 0) {\n       \
    \     list.Add(1);\n        }\n        if (length == 1) {\n            list.Add(1);\n\
    \        }\n        if (length == 2) {\n            list.Add(1);\n        }\n\
    \        if (length == 3) {\n            list.Add(1);\n        }\n        if (length\
    \ == 4) {\n            list.Add(1);\n        }\n        if (length == 5) {\n \
    \           list.Add(1);\n        }\n        if (length == 6) {\n            list.Add(1);\n\
    \        }\n        if (length == 7) {\n            list.Add(1);\n        }\n\
    \        if (length == 8) {\n            list.Add(1);\n        }\n        if (length\
    \ == 9) {\n            list.Add(1);\n        }\n        if (length == 10) {\n\
    \            list.Add(1);\n        }\n        if (length == 11) {\n          \
    \  list.Add(1);\n        }\n        if (length == 12) {\n            list.Add(1);\n\
    \        }\n        if (length == 13) {\n            list.Add(1);\n        }\n\
    \        if (length == 14) {\n            list.Add(1);\n        }\n        if\
    \ (length == 15) {\n            list.Add(1);\n        }\n        if (length ==\
    \ 16) {\n            list.Add(1);\n        }\n        if (length == 17) {\n  \
    \          list.Add(1);\n        }\n        if (length == 18) {\n            list.Add(1);\n\
    \        }\n        if (length == 19) {\n            list.Add(1);\n        }\n\
    \        if (length == 20) {\n            list.Add(1);\n        }\n        if\
    \ (length == 21) {\n            list.Add(1);\n        }\n        if (length ==\
    \ 22) {\n            list.Add(1);\n        }\n        if (length == 23) {\n  \
    \          list.Add(1);\n        }\n        if (length == 24) {\n            list.Add(1);\n\
    \        }\n        if (length == 25) {\n            list.Add(1);\n        }\n\
    \        if (length == 26) {\n            list.Add(1);\n        }\n        if\
    \ (length == 27) {\n            list.Add(1);\n        }\n        if (length ==\
    \ 28) {\n            list.Add(1);\n        }\n        if (length == 29) {\n  \
    \          list.Add(1);\n        }\n        if (length == 30) {\n            list.Add(1);\n\
    \        }\n        if (length == 31) {\n            list.Add(1);\n        }",
  "        List<long> result = new List<long>();\n        Array.Sort(arr);\n     \
    \   int current = 0;\n        while (current < arr.Count && current + k > arr.Count)\
    \ {\n            result.Add(arr[arr.Count - 1]);\n            result.Add(arr[current]);\n\
    \            current++;\n        }\n        if (current < arr.Count) {\n     \
    \       for (int i = current; i < arr.Count && i + k < arr.Count; i++) {\n   \
    \             result.Add(arr[i]);\n            }\n        }\n        return result;",
  "        Debug.Assert(arr.Count > 0);\n        Debug.Assert(k <= arr.Count);\n \
    \       Debug.Assert(k <= 1000);\n        long sum = 0;\n        var rec = new\
    \ List<long>();\n        for (long i = 0; i < arr.Count; ++i) {\n            sum\
    \ += arr[i];\n            if (sum > k) {\n                sum -= k;\n        \
    \        Debug.Assert(sum >= 0);\n                rec.Add(k - sum);\n        \
    \        k = sum;\n            }\n            if (sum < k) {\n               \
    \ rec.Add(arr[i]);\n                k = sum;\n            }\n        }\n     \
    \   Debug.Assert(k == sum);\n        return rec;", "        long max = Math.Max(arr.FirstOrDefault(),\
    \ arr[0]);\n        var res = new List<long>(k);\n        for (int i = 1; i <\
    \ k; i++) {\n            var c = Math.Abs(arr[i] - max);\n            if (c >\
    \ 0) res.Add(max);\n            max = Math.Max(max, arr[i]);\n        }\n    \
    \    res.Add(max);\n        return res;", "        // initialize a list to store\
    \ the maximum k elements\n        List<long> maxK = new List<long>();\n      \
    \  // initialize a variable to store the maximum element in the input list\n \
    \       long maxElement = arr[0];\n        // traverse the list\n        foreach\
    \ (long element in arr) {\n            // compare the element with the max element\
    \ in the list\n            if (element > maxElement) {\n                // if\
    \ the max element in the list is greater than the current element\n          \
    \      // update the max element in the list with the current element\n      \
    \          maxElement = element;\n            }\n            // if the current\
    \ element in the list is equal to the max element in the list\n            //\
    \ add the current element to the max list \n            if (maxK.Count() == k\
    \ && maxK[maxK.Count() - 1] == maxElement) {\n                maxK.Add(element);\n\
    \            }\n        }\n        return maxK;", "        if (arr.Count < k)\
    \ {\n            throw new ArgumentException(\"Array length is shorter than k\"\
    );\n        }\n\n        List<long> res = new List<long>(arr.Count);\n\n     \
    \   for (int i = 0; i < k; i++) {\n            long max = 0;\n            for\
    \ (int j = 0; j < arr.Count; j++) {\n                if (arr[j] > max) {\n   \
    \                 max = arr[j];\n                }\n            }\n\n        \
    \    res.Add(max);\n        }\n\n        return res;", "        List<long> res\
    \ = new List<long>();\n        List<long> tmp = new List<long>();\n        long\
    \ m = 0, max = 0;\n        // find the max of arr\n        foreach (long i in\
    \ arr) {\n            if (i >= 0) {\n                max = Math.Max(max, i);\n\
    \            }\n        }\n        if (max > 0) {\n            // reserve k items\
    \ to put in res\n            while (k > 0) {\n                tmp.Add(0);\n  \
    \              k--;\n            }\n            // calculate the max number of\
    \ this k max numbers\n            for (int i = 0; i < arr.Count; i++) {\n    \
    \            long count = arr.ElementAt(i);\n                tmp[m++] = count;\n\
    \                for (int j = k - m; j > 0; j--) {\n                    if (count\
    \ > tmp[m]) {\n                        tmp[m] = count;\n                     \
    \   m++;\n                    }\n                    else {\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \         // put res to the res\n            for (int i = 0; i < tmp.Count; i++)\
    \ {\n                long count = tmp.ElementAt(i);\n                for (int\
    \ j = m; j > 0; j--) {\n                    if (count > tmp.ElementAt(j)) {\n\
    \                        break;\n                    }\n                    else\
    \ {\n                        tmp.RemoveAt(j);\n                        m--;\n\
    \                    }\n                }\n                res.Add(count);\n \
    \           }\n        }\n        return res;", "        List<long> res = new\
    \ List<long>();\n\n        // Using Sedgewick's Algorithm\n        // 1. Sort\
    \ the array using quick sort\n        arr = arr.OrderByDescending(x => x).ToList();\n\
    \n        // 2. Take the first k numbers from the sorted array\n        for (int\
    \ i = 0; i < k; i++)\n            res.Add(arr[0]);\n\n        // 3. Continue to\
    \ take numbers from the sorted array \n        // until the length of the sorted\
    \ array is less than k.\n        for (int i = 1; i < arr.Count; i++) {\n     \
    \       if (arr[i] > arr[i - 1]) {\n                res.Add(arr[i - 1]);\n   \
    \         }\n            else\n                break;\n        }\n\n        return\
    \ res;", "        long maxValue = 0;\n        List<long> result = new List<long>();\n\
    \        int l = arr.Count;\n        long arrSum = 0;\n        long[] a = new\
    \ long[l];\n        for (int i = 0; i < l; i++) {\n            arrSum += arr[i];\n\
    \            a[i] = arr[i] / arrSum;\n        }\n        for (int i = 0; i < l;\
    \ i++) {\n            long curr = a[i];\n            long max = 0;\n         \
    \   if (curr > maxValue) {\n                maxValue = curr;\n               \
    \ max = a[i];\n            }\n            long next = 0;\n            for (int\
    \ j = i + 1; j < l; j++) {\n                next = curr;\n                curr\
    \ = curr * arr[j];\n                if (curr > max) {\n                    max\
    \ = curr;\n                }\n            }\n            result.Add(max);\n  \
    \      }\n        return result;", "        if (arr.Count < k) {\n           \
    \ throw new ArgumentException(\"k\", \"k must be greater than or equal to length\
    \ of arr\");\n        }\n        int[] nums = new int[k];\n        int count =\
    \ 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >\
    \ nums[count]) {\n                nums[count] = arr[i];\n                count++;\n\
    \            }\n        }\n        List<long> res = new List<long>();\n      \
    \  for (int i = 0; i < nums.Length; i++) {\n            if (nums[i] != 0) {\n\
    \                res.Add(nums[i]);\n            }\n        }\n        return res;",
  "        if (k > arr.Count) {\n            throw new ArgumentException(\"k should\
    \ be less than arr.Count\");\n        }\n        List<long> result = new List<long>();\n\
    \        long maxNum = arr[k - 1];\n        for (int i = k; i < arr.Count; i++)\
    \ {\n            long num = arr[i];\n            if (num > maxNum) {\n       \
    \         maxNum = num;\n            }\n            else if (num < maxNum) {\n\
    \                result.Add(maxNum);\n                maxNum = num;\n        \
    \    }\n            else {\n                result.Add(num);\n            }\n\
    \        }\n        result.Add(maxNum);\n        return result;", "        long[]\
    \ ints = arr.ToArray();\n        ints.sort(new Comparison<int>() { \n        \
    \    // comparer\n            public int Compare(long x, long y) {\n         \
    \       long c = x - y;\n                if (c != 0)\n                    return\
    \ c;\n                c = x - y;\n                if (c != 0)\n              \
    \      return c;\n                c = x - y;\n                if (c != 0)\n  \
    \                  return c;\n                c = x - y;\n                if (c\
    \ != 0)\n                    return c;\n                c = x - y;\n         \
    \       if (c != 0)\n                    return c;\n                c = x - y;\n\
    \                if (c != 0)\n                    return c;\n                c\
    \ = x - y;\n                if (c != 0)\n                    return c;\n     \
    \           c = x - y;\n                if (c != 0)\n                    return\
    \ c;\n                c = x - y;\n                if (c != 0)\n              \
    \      return c;\n                c = x - y;\n                if (c != 0)\n  \
    \                  return c;\n                c = x - y;\n                if (c\
    \ != 0)\n                    return c;\n                c = x - y;\n         \
    \       if (c != 0)\n                    return c;\n                c = x - y;\n\
    \                if (c != 0)\n                    return c;\n                c\
    \ = x - y;\n                if (c != 0)\n                    return c;\n     \
    \           c = x - y;\n                if (c != 0)\n                    return\
    \ c;\n                c = x - y;\n                if (c != 0)\n              \
    \      return c;\n                c = x - y;\n                if (c != 0)\n  \
    \                  return c;\n                c = x - y;\n                if (c\
    \ != 0)\n                    return c;\n                c = x - y;\n         \
    \       if (c != 0)\n                    return c;\n                c = x - y;\n\
    \                if (c != 0)\n                    return c;\n                c\
    \ = x - y;\n                if (c != 0)\n                    return c;\n     \
    \           c = x - y;\n                if (c != 0)\n                    return\
    \ c;\n                c = x - y;\n                if (c != 0)\n              \
    \      return c;\n                c = x - y;\n                if (c != 0)\n  \
    \                  return c;\n                c = x - y;\n                if (c\
    \ != 0)\n                    return c;\n                c = x - y;\n         \
    \       if (c != 0)\n                    return c;\n                c = x - y;\n\
    \                if (c != 0)\n                    return c;\n                c\
    \ = x - y;\n                if (c != 0)\n                    return c;\n     \
    \           c = x - y;\n                if (c != 0)\n                    return\
    \ c;\n                c = x - y;\n                if (c != 0)\n              \
    \      return c;\n                c = x - y;\n                if (c != 0)\n  \
    \                  return c;\n                c = x - y;\n                if (c\
    \ != 0)\n                    return c;\n                c = x - y;\n         \
    \       if (c != 0)\n                    return c;\n                c = x - y;\n\
    \                if (c != 0)\n                    return c;\n                c\
    \ = x - y;\n                if (c != 0)\n                    return c;\n     \
    \           c = x - y;\n                if (c != 0)\n                    return\
    \ c;\n                c = x - y;\n                if (c != ", "        List<long>\
    \ result = new List<long>();\n        long max = long.MinValue;\n        long\
    \ min = long.MaxValue;\n        for (int i = 0; i < k; i++) {\n            if\
    \ (arr[i] > max) max = arr[i];\n            if (arr[i] < min) min = arr[i];\n\
    \        }\n        bool isAscending = max - min < 0;\n        while (isAscending)\
    \ {\n            for (int i = 0; i < k; i++) {\n                if (arr[i] > max)\
    \ max = arr[i];\n                if (arr[i] < min) min = arr[i];\n           \
    \ }\n            isAscending = max - min < 0;\n        }\n        result.Add(max);\n\
    \        for (int i = k - 1; i >= 0; i--) {\n            bool isDescending = arr[i]\
    \ < max;\n            while (isDescending) {\n                for (int j = k -\
    \ 1; j > i; j--) {\n                    if (arr[j] < max) max = arr[j];\n    \
    \            }\n                isDescending = arr[i] < max;\n            }\n\
    \            result.Add(arr[i]);\n        }\n        return result;", "      \
    \  if (arr.Count > k) {\n            List<long> res = _Maximum(arr, k, Enumerable.Range(0,\
    \ arr.Count).Select(x => 0));\n            Array.Sort(res.ToArray(), (x, y) =>\
    \ x - y);\n            return res;\n        } else {\n            return arr;\n\
    \        }", "        if (k > arr.Count || k < 0) {\n            throw new ArgumentException(\"\
    k\");\n        }\n        var answer = new List<long>(arr.Count);\n        var\
    \ max = arr.Max();\n        answer.Add(max);\n        foreach (var num in arr.Skip(1))\
    \ {\n            if (num > max) {\n                max = num;\n              \
    \  answer.Add(max);\n            } else {\n                answer.Add(num);\n\
    \            }\n        }\n        return answer.Take(k);", "        Debug.Assert(k\
    \ <= arr.Count);\n        if (k == 0) {\n            return arr;\n        }\n\
    \        List<long> maxK = new List<long>();\n        Array.Sort(arr);\n     \
    \   List<long> remaining = arr.Take(k).ToList();\n        for (int i = 0; i <\
    \ k; ++i) {\n            foreach (long number in maxK) {\n                long\
    \ maxNumber = Math.Abs(number - remaining.Sum());\n                if (maxNumber\
    \ >= arr[i]) {\n                    maxK.Add(arr[i]);\n                    remaining.Remove(arr[i]);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return maxK;", "        List<long> result = new List<long>();\n        if\
    \ (k <= arr.Count) {\n            result.AddRange(arr.Take(arr.Count - k));\n\
    \            for (int i = 0; i < k - result.Count; i++) {\n                result.Add(0);\n\
    \            }\n            result.AddRange(arr.Skip(arr.Count - k));\n      \
    \  }\n        return result;", "        var result = new List<long>();\n     \
    \   var buffer = new List<long>();\n        var pos = -1;\n        foreach (var\
    \ item in arr) {\n            if (pos == -1) pos = 0;\n            buffer.Add(item);\n\
    \            if (buffer.Count == k) {\n                buffer.Sort();\n      \
    \          var max = buffer.First();\n                for (int i = 1; i < buffer.Count;\
    \ i++) {\n                    if (max == buffer[i]) continue;\n              \
    \      buffer.RemoveAt(i);\n                    pos = i;\n                   \
    \ break;\n                }\n                result.Add(max);\n              \
    \  buffer.Clear();\n            }\n        }\n        if (buffer.Count > 0) buffer.Sort();\n\
    \        for (int i = 0; i < buffer.Count; i++) result.Add(buffer[i]);\n     \
    \   return result;", "        if (arr == null || arr.Count == 0)\n           \
    \ throw new ArgumentNullException(\"arr\");\n        if (k <= 0)\n           \
    \ throw new ArgumentOutOfRangeException(\"k\");\n        if (k > arr.Count)\n\
    \            throw new ArgumentOutOfRangeException(\"k\");\n\n        long l =\
    \ Math.Min(arr.Count, k);\n        var ret = new List<long>(l);\n        int j\
    \ = 0;\n        for (int i = 0; i < arr.Count && j < k; ++i)\n            if (arr[i]\
    \ > arr[j]) {\n                ret.Add(arr[i]);\n                ++j;\n      \
    \      }\n            else if (arr[i] < arr[j]) {\n                ++j;\n    \
    \        }\n            else\n                ;\n        if (j == k) {\n     \
    \       ret.AddRange(arr.Take(j));\n            return ret;\n        }\n     \
    \   else {\n            for (int i = 0; i < l; ++i) {\n                ret.Add(arr[i]);\n\
    \            }\n            return ret;\n        }", "        List<long> result\
    \ = new List<long>();\n        if (arr.Count > 0) {\n            for (int i =\
    \ 0; i < k; i++) {\n                long max = arr[0];\n                for (int\
    \ j = 1; j < arr.Count; j++) {\n                    if (max < arr[j]) {\n    \
    \                    max = arr[j];\n                    }\n                }\n\
    \                result.Add(max);\n            }\n        }\n        return result;",
  "        if (k == 0 || arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        if (k >= arr.Count) {\n            return new List<long>();\n\
    \        }\n        var max_item = arr.OrderByDescending(i => i).Take(k).ToList();\n\
    \        if (max_item.Count == 0) {\n            return new List<long>();\n  \
    \      }\n        return max_item;", "        if (k == 0) return new List<long>(arr);\n\
    \        if (k > arr.Count) return new List<long>(arr.Take(k).ToArray());\n  \
    \      var l = new List<long>(arr.Take(k).ToArray());\n        var m = l.Count;\n\
    \        if (arr.Count % k != 0) {\n            m = m + 1;\n            l.Add(arr.Last());\n\
    \        }\n        long m = Long.MinValue + 1;\n        long best = 0;\n    \
    \    long min = 1;\n        foreach (var i in arr) {\n            long n = m -\
    \ m * i / k;\n            if (n >= min) {\n                best = n;\n       \
    \     }\n            if (n > best) {\n                m = n;\n               \
    \ best = i;\n            }\n            min = Math.Min(Math.Abs(m), best);\n \
    \       }\n        l.Add(best);\n        return l;", "        var list = new List<long>();\n\
    \        var max = arr.Min();\n        foreach (var item in arr) {\n         \
    \   if (item > max) {\n                max = item;\n            }\n        }\n\
    \        var length = max - arr.Min();\n        List<long> ret = new List<long>();\n\
    \        if (k > length) k = length;\n        long minDiff = arr.Min() - k;\n\
    \        for (int i = 0; i < k; i++) {\n            long next = arr.Min() + i;\n\
    \            if (k - i < minDiff) {\n                minDiff = k - i;\n      \
    \      }\n            if (next < k) {\n                ret.Add(next);\n      \
    \      } else {\n                ret.Add(k);\n            }\n        }\n     \
    \   if (k > minDiff) ret.Add(k);\n        return ret;", "        long[] list =\
    \ new long[k];\n        for (int i = 0; i < k; i++)\n            list[i] = -1000\
    \ + i;\n        int[] arr = new int[k];\n        for (int i = 0; i < k; i++)\n\
    \            arr[i] = i;\n        List<long> result = new List<long>();\n    \
    \    for (long i : arr) {\n            for (long j : list) {\n               \
    \ if (j < i)\n                    continue;\n                long a = i + j;\n\
    \                long b = Math.Max(i, j);\n                if (b == a)\n     \
    \               continue;\n                long c = j - a; // the smaller number\n\
    \                if (c > 0) // if c is positive, the number is greater than the\
    \ current maximum\n                    continue;\n                // if a is greater\
    \ than b, then a is smaller than current maximum, we can just add j to the result\n\
    \                if (a > b)\n                    result.Add(j);\n            }\n\
    \        }\n        return result.OrderByDescending(x => x).ToList();", "    \
    \    List<long> result = new List<long>();\n        long ans = long.MinValue;\n\
    \        foreach (long num in arr) {\n            if (k < num) {\n           \
    \     k = num;\n            }\n            if (k == ans) {\n                break;\n\
    \            }\n            ans = k;\n            int j = arr.IndexOf(num);\n\
    \            arr.RemoveAt(j);\n            while (j >= 0 && arr.Count == 1) {\n\
    \                j--;\n                long temp = arr.ElementAt(0);\n       \
    \         result.Add(temp);\n                arr.RemoveAt(0);\n            }\n\
    \            if (j >= 0 && arr.Count > 0) {\n                k = j;\n        \
    \    }\n        }\n        result.Add(ans);\n        return result;", "      \
    \  var m = arr.Count - 1;\n        if (k > m) {\n            return new List<long>();\n\
    \        }\n        var max = new List<long>();\n        long[] p = new long[k];\n\
    \        int m = k;\n        Array.Sort(arr, (p1, p2) => { if (p1 > p2) return\
    \ 1; else if (p1 < p2) return -1; else return 0; });\n        for (int i = 0;\
    \ i < p[k] - k + 1 && !m; ++i) {\n            max = max.Concat(arr.GetRange(i\
    \ + k, k)).ToList();\n        }\n        if (m) {\n            var newArr = arr.GetRange(m,\
    \ k);\n            max = max.Concat(newArr).ToList();\n        }\n        return\
    \ max;", "        int n = arr.Count;\n        long[] sum = new long[n];\n    \
    \    long max = 0;\n        for (int i = 0; i < n; i++) {\n            sum[i]\
    \ = arr[i];\n        }\n        for (int i = 0; i < n - k + 1; i++) {\n      \
    \      long sumMax = max;\n            for (int j = i; j < i + k; j++) {\n   \
    \             sumMax = Math.Max(sumMax, sum[j]);\n            }\n            max\
    \ = Math.Max(sumMax, max);\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < n; i++) {\n            if (i == 0)\n            \
    \    result.Add(sum[0]);\n            else if (i == max)\n                result.Add(max);\n\
    \            else\n                result.Add(sum[i]);\n        }\n        return\
    \ result;", "        Dictionary<long, long> dict = new Dictionary<long, long>();\n\
    \        int maxLen = 0;\n        for (long cur : arr) {\n            if (dict.ContainsKey(cur))\
    \ {\n                dict[cur]++;\n                if (dict[cur] > maxLen) {\n\
    \                    maxLen = dict[cur];\n                }\n            } else\
    \ {\n                dict.Add(cur, 1);\n                if (dict.Count > maxLen)\
    \ {\n                    maxLen = dict.Count;\n                }\n           \
    \ }\n        }\n        List<long> result = new List<long>();\n        foreach\
    \ (long key in dict.Keys) {\n            long value = dict[key];\n           \
    \ for (int i = 0; i < value; i++) {\n                result.Add(key);\n      \
    \      }\n        }\n        result.RemoveAt(result.Count - 1);\n        if (result.Count\
    \ > k) {\n            return result.Take(k).ToList();\n        } else {\n    \
    \        return result;\n        }", "        Dictionary<long, long> d = new Dictionary<long,\
    \ long>();\n        for (int i = 0; i < arr.Count; i++) {\n            long num\
    \ = arr[i];\n            long cnt = 0;\n            if (d.TryGetValue(num, out\
    \ cnt)) {\n                d[num] = d[num] + 1;\n            }\n            else\
    \ {\n                d.Add(num, 1);\n            }\n            if (cnt == k)\
    \ {\n                return arr.Take(i).OrderByDescending(v => v).ToList();\n\
    \            }\n        }\n        throw new Exception(\"No solution found\");",
  "        if (k <= 0 || arr.Count <= 0) {\n            return new List<long>();\n\
    \        }\n        // 1. Initialize a dictionary to store the position of each\
    \ element\n        Dictionary<long, int> dic;\n        dic = arr.ToDictionary(e\
    \ => e, e => arr.IndexOf(e));\n        // 2. Initialize a stack to store element\n\
    \        Stack<long> st = new Stack<long>();\n        // 3. Get k numbers from\
    \ the stack and put them in the dictionary\n        for (int i = 0; i < k; i++)\
    \ {\n            st.Push(st.Peek());\n        }\n        dic = st.ToDictionary(e\
    \ => e, e => st.IndexOf(e));\n        // 4. Initialize an empty list for return\n\
    \        List<long> result = new List<long>();\n        // 5. Pop k numbers one\
    \ by one from the dictionary\n        while (st.Count > 0) {\n            long\
    \ temp = st.Pop();\n            result.Add(dic[temp]);\n        }\n        return\
    \ result;", "        // write your code here\n        List<long> list = new List<long>();\n\
    \        if (arr.Count > 0)\n        {\n            List<long> list = new List<long>();\n\
    \            list.AddRange(arr.Take(k));\n            list.Sort();\n         \
    \   list.AddRange(arr.Skip(k));\n            list.Sort();\n            list =\
    \ list.Distinct().ToList();\n        }\n        return list;", "        Debug.Assert(k\
    \ <= arr.Count);\n        List<long> res = new List<long>();\n        Dictionary<long,\
    \ List<long>> cache = new Dictionary<long, List<long>>();\n        foreach (long\
    \ n in arr) {\n            if (!cache.ContainsKey(n)) {\n                cache.Add(n,\
    \ new List<long>());\n            }\n            List<long> list = cache[n];\n\
    \            if (list.Count <= k) {\n                list.Add(n);\n          \
    \  }\n            else {\n                long max = 0;\n                foreach\
    \ (long m in list) {\n                    if (m > max) {\n                   \
    \     max = m;\n                    }\n                }\n                list.Add(max);\n\
    \            }\n        }\n        long max = 0;\n        foreach (KeyValuePair<long,\
    \ List<long>> pair in cache) {\n            if (pair.Value.Count > k) {\n    \
    \            max = pair.Key;\n            }\n        }\n        if (k == max)\n\
    \            return res;\n        long nextmax = Maximum(cache[k], k - 1).Max();\n\
    \        if (nextmax <= k)\n            return res;\n        while (true) {\n\
    \            List<long> list = new List<long>(cache.Values.Where(a => a.Count\
    \ > k).Select(a => a[k]));\n            if (list.Count <= k)\n               \
    \ break;\n            long max = 0;\n            foreach (long m in list)\n  \
    \              if (m > max)\n                    max = m;\n            list.Add(max);\n\
    \            cache.Remove(max);\n            res.AddRange(list);\n        }\n\
    \        return res;", "        List<long> list = new List<long>();\n        arr.Sort();\n\
    \        while (arr.Count > 0) {\n            long tempMax = arr.First();\n  \
    \          List<long> tempList = new List<long>();\n            foreach (long\
    \ num in arr)\n                if (num > tempMax)\n                    tempMax\
    \ = num;\n                else if (num == tempMax)\n                    tempList.Add(num);\n\
    \            list.AddRange(tempList);\n            arr = tempList;\n        }\n\
    \        list.Sort(new Comparison<long>((x, y) => x > y));\n        list.Reverse();\n\
    \        return list.Take(k).ToList();", "        List<long> results = new List<long>();\n\
    \        if (arr.Count > k) {\n            List<long> tmp = new List<long>(k);\n\
    \            tmp.AddRange(arr);\n            tmp.Sort();\n            tmp.Sort();\n\
    \            results.AddRange(tmp.Take(k));\n        }\n        else {\n     \
    \       results.AddRange(arr.Take(k));\n        }\n        return results;", " \
    \       List<long> res = new List<long>();\n        long max;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (i == 0) {\n                max\
    \ = arr[i];\n                res.Add(max);\n                continue;\n      \
    \      }\n            if (arr[i] > max)\n                max = arr[i];\n     \
    \   }\n        long rest = arr.Count - k;\n        if (rest > 0) {\n         \
    \   while (arr.Count > k) {\n                for (int i = 0; i < arr.Count; i++)\
    \ {\n                    if (i == 0)\n                        max = arr[i];\n\
    \                    if (arr[i] > max)\n                        max = arr[i];\n\
    \                }\n                res.Add(max);\n                max -= 1;\n\
    \            }\n            for (int i = 0; i < arr.Count; i++)\n            \
    \    arr[i] = arr[i] - 1;\n        }\n        return res;", "        long largest\
    \ = arr[0];\n        long temp = 0;\n        List<long> list = new List<long>();\n\
    \        foreach (long i in arr) {\n            temp = i;\n            if (temp\
    \ > largest) {\n                list.Add(temp);\n                largest = temp;\n\
    \            }\n        }\n\n        list.Add(largest);\n        if (list.Count\
    \ != k) return list;\n\n        // Move all items in the list from the front \n\
    \        // of the list to the end of the list \n        while (list.Count > k)\
    \ {\n            temp = list[k - 1];\n            list[k - 1] = list[list.Count\
    \ - 1];\n            list[list.Count - 1] = temp;\n            list.RemoveAt(list.Count\
    \ - 1);\n            k--;\n        }\n\n        return list;", "        if (arr.Count\
    \ < 1) return arr;\n\n        if (k < 1) return arr;\n\n        List<long> list\
    \ = new List<long>(k);\n        bool flag = false;\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        int count = 0;\n\n        for (int i =\
    \ 0; i < k; i++) {\n            if (arr[i] < min) {\n                list.Add(min);\n\
    \                flag = true;\n            }\n            else if (arr[i] > max)\
    \ {\n                list.Add(max);\n                flag = true;\n          \
    \  }\n            else {\n                if (flag) {\n                    list.Add(arr[count]);\n\
    \                }\n                else {\n                    list.Add(arr[i]);\n\
    \                }\n                count++;\n            }\n        }\n\n   \
    \     return list;", "        if (arr.Count < k)\n            throw new ArgumentException(\"\
    k > arr.Count\");\n        long[] largest = arr.OrderByDescending(n => n).Take(k).ToArray();\n\
    \        return new List<long>(largest);", "        // write your code here\n\
    \        List<long> ret = new List<long>();\n        int len = arr.Count;\n  \
    \      long[] ans = new long[len];\n        long[] arr0 = new long[len];\n   \
    \     List<long> tmp = new List<long>();\n        long max = 0L;\n        long\
    \ num = 0L;\n        long sum = 0L;\n        int k0 = k;\n        while (true)\
    \ {\n            if (k0 == 0 || k0 == len) {\n                ret.Add(max);\n\
    \                for (int i = 0; i < len; i++) {\n                    ans[i] =\
    \ arr[i];\n                }\n                return ret;\n            }\n   \
    \         if (k0 % 2 == 0) {\n                k0--;\n            } else {\n  \
    \              k0++;\n            }\n            max = arr[k0];\n            if\
    \ (max > sum) {\n                num = max - sum;\n                for (int i\
    \ = k0 - 1; i >= 0; i--) {\n                    arr0[i] = num + ans[i];\n    \
    \            }\n                for (int i = k0; i < len; i++) {\n           \
    \         arr0[i] = arr[i];\n                }\n                for (int i = 0;\
    \ i < len; i++) {\n                    ans[i] = arr0[i];\n                }\n\
    \                for (int i = 0; i < len; i++) {\n                    sum += ans[i];\n\
    \                }\n                k0 = k0 / 2;\n                tmp = Maximum(arr0,\
    \ k0);\n                ret.AddRange(tmp);\n                ret.Add(max);\n  \
    \              for (int i = 0; i < len; i++) {\n                    ans[i] = arr0[i];\n\
    \                }\n                for (int i = 0; i < len; i++) {\n        \
    \            sum += ans[i];\n                }\n                k0--;\n      \
    \          continue;\n            }\n            k = k0 - 1;\n            tmp\
    \ = Maximum(arr, k);\n            ret.AddRange(tmp);\n            ret.Add(max);\n\
    \            for (int i = 0; i < len; i++) {\n                ans[i] = arr[i];\n\
    \            }\n            max = sum;\n            for (int i = k0; i < len;\
    \ i++) {\n                arr0[i] = arr[i];\n            }\n            for (int\
    \ i = 0; i < len; i++) {\n                ans[i] = arr0[i];\n            }\n \
    \           sum -= ans[k0];\n            sum = sum + ans[k0];\n            k0--;\n\
    \        }", "        // write your code here\n        return arr.Take(k)\n  \
    \                .OrderByDescending(x => x)\n                  .ToList();", " \
    \       var max = new List<long>();\n        var min = new List<long>();\n   \
    \     List<long> res = new List<long>();\n        arr.Sort();\n        min = arr.Take(arr.Count\
    \ - k).OrderBy(n => n).ToList();\n        max = arr.Skip(arr.Count - k).Take(k).OrderByDescending(n\
    \ => n).ToList();\n        max = max.Concat(max).Concat(max).Concat(max).Concat(max).Concat(max).ToList();\n\
    \        res = min;\n        foreach (var n in max)\n        {\n            if\
    \ (res.IndexOf(n) != res.Count - 1)\n                res.Insert(res.IndexOf(n)\
    \ + 1, n);\n        }\n        return res;", "        if (arr.Count <= k) {\n\
    \            return arr;\n        }\n\n        var result = new List<long>();\n\
    \        var maxElement = arr[0];\n        var minElement = arr[0];\n\n      \
    \  // find the max element in the list\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxElement) {\n                maxElement =\
    \ arr[i];\n            }\n        }\n\n        // find the min element in the\
    \ list\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < minElement) {\n                minElement = arr[i];\n            }\n     \
    \   }\n\n        var maxRange = maxElement - minElement;\n        var minRange\
    \ = (long) Math.Ceiling((double) maxRange * k / arr.Count);\n\n        if (minRange\
    \ >= arr.Count) {\n            return arr;\n        }\n\n        var maxIndex\
    \ = arr.Count - 1;\n        var minIndex = arr.Count - 1;\n\n        // find the\
    \ max index between min index and max index\n        while (minIndex >= minIndex\
    \ - minRange) {\n            minIndex--;\n        }\n\n        while (maxIndex\
    \ <= maxIndex + minRange) {\n            maxIndex++;\n        }\n\n        //\
    \ find the max index between min index and max index\n        while (maxIndex\
    \ <= maxIndex + minRange) {\n            maxIndex++;\n        }\n\n        //\
    \ find the min index between min index and max index\n        while (minIndex\
    \ >= minIndex - minRange) {\n            minIndex--;\n        }\n\n        //\
    \ find the max element in arr\n        for (int i = minIndex; i <= maxIndex; i++)\
    \ {\n            if (arr[i] > maxElement) {\n                maxElement = arr[i];\n\
    \            }\n        }\n\n        // find the min element in arr\n        for\
    \ (int i = minIndex; i <= maxIndex; i++) {\n            if (arr[i] < minElement)\
    \ {\n                minElement = arr[i];\n            }\n        }\n\n      \
    \  long maxRange1 = maxElement - minElement;\n        long maxRange2 = (long)Math.Ceiling((double)\
    \ maxRange1 * k / arr.Count);\n\n        if (maxRange2 >= arr.Count) {\n     \
    \       return arr;\n        }\n\n        var rangeIndex = new List<int>();\n\n\
    \        rangeIndex.AddRange(Enumerable.Range(maxIndex - maxRange, maxRange));\n\
    \        rangeIndex.AddRange(Enumerable.Range(minIndex, maxRange));\n\n      \
    \  var resultArray = new List<long>();\n\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            for (int j = 0; j < rangeIndex.Count; j++) {\n         \
    \       if (arr[i + j] >= maxElement) {\n                    if (rangeIndex.Contains(j))\
    \ {\n                        resultArray.Add(arr[i + j]);\n                  \
    \      break;\n                    }\n                }\n            }\n     \
    \   }\n\n        List<long> result = new List<long>();\n        result.AddRange(arr.Except(resultArray).ToList());",
  "        List<long> res = new List<long>();\n        if (k > arr.Count) {\n    \
    \        k = arr.Count;\n        }\n        long maxNum = arr[0];\n        foreach\
    \ (long i in arr) {\n            if (i > maxNum) {\n                maxNum = i;\n\
    \            }\n        }\n        long start = 0;\n        for (long i = 0; i\
    \ < k; i++) {\n            int index = maxNum - i;\n            int j = start;\n\
    \            long max = 0;\n            while (j < arr.Count && index < arr.Count)\
    \ {\n                max = Math.Max(max, arr[j]);\n                j++;\n    \
    \            index++;\n            }\n            while (j < arr.Count) {\n  \
    \              max = Math.Max(max, arr[j]);\n                j++;\n          \
    \  }\n            max = Math.Max(max, maxNum);\n            res.Add(max);\n  \
    \      }\n        return res;", "        if (k == 0) return new List<long>();\n\
    \        if (k <= 0) return new List<long>();\n        \n        var arr = arr.OrderByDescending(t\
    \ => t).ToList();\n        \n        var arr = new List<long>();\n        arr.Add(0L);\n\
    \        var max = new List<long>();\n        var curr = new List<long>();\n \
    \       var curr_max = new List<long>();\n        var curr_max_size = 0;\n   \
    \     \n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > curr[curr.Count - 1]) {\n                curr.Add(arr[i]);\n             \
    \   if (curr.Count > curr_max_size) {\n                    curr_max = curr;\n\
    \                    curr_max_size = curr.Count;\n                }\n        \
    \    }\n            else {\n                if (curr.Count > curr_max_size) {\n\
    \                    curr_max = curr;\n                    curr_max_size = curr.Count;\n\
    \                }\n                if (curr.Count == curr_max_size) {\n     \
    \               if (k > curr_max_size) k -= curr_max_size;\n                 \
    \   max = curr_max.Where(t => t != 0L).Take(k).ToList();\n                   \
    \ max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size - k).Take(curr_max_size\
    \ - 1).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 1).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 2).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 3).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 4).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 5).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 6).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 7).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 8).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip(curr_max_size\
    \ - 9).ToList());\n                    max = max.Concat(max.Where(t => t != 0L).Skip",
  "        int n = arr.Count;\n        List<long> max = new List<long>();\n      \
    \  int low = 0;\n        long maxVal = arr[0];\n        for (int i = 0; i < n;\
    \ i++) {\n            if (maxVal < arr[i]) {\n                maxVal = arr[i];\n\
    \                low.Set(0, i);\n            }\n        }\n        for (int i\
    \ = n-1; i >= k; i--) {\n            if (arr[low] > arr[i]) {\n              \
    \  maxVal = arr[i];\n                for (int j = i+1; j < n; j++) {\n       \
    \             if (maxVal < arr[j]) {\n                        maxVal = arr[j];\n\
    \                        low = i;\n                    }\n                }\n\
    \            }\n        }\n        max.AddRange(arr.GetRange(low, k-1));\n   \
    \     return max;", "        if (k == 0 || arr.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        long maxVal = 0;\n        long maxIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long num =\
    \ arr[i];\n            if (num > maxVal) {\n                maxVal = num;\n  \
    \              maxIndex = i;\n            }\n        }\n        List<long> res\
    \ = new List<long>();\n        for (int i = 0; i < k; i++) {\n            res.Add(arr[maxIndex]);\n\
    \            maxIndex++;\n        }\n        return res;", "        // Write your\
    \ code here\n        long max = 0;\n        List<long> result = new List<long>();\n\
    \        bool flag = false;\n        if (k > arr.Count) {\n            result.AddRange(arr.OrderByDescending(x\
    \ => x).Take(arr.Count).ToList());\n        } else if (k == arr.Count) {\n   \
    \         flag = true;\n            result.AddRange(arr);\n        } else if (k\
    \ < arr.Count) {\n            max = arr.OrderByDescending(x => x).Take(k).Select(x\
    \ => x).Sum();\n            arr.RemoveAll(x => x == max);\n            flag =\
    \ true;\n        }\n        if (flag) {\n            int len = arr.Count;\n  \
    \          while (len > 0) {\n                long sum = arr.Take(len).Sum();\n\
    \                if (sum > max) {\n                    max = sum;\n          \
    \          result.AddRange(arr.Take(len));\n                }\n              \
    \  len--;\n            }\n        }\n        return result;", "        if (arr.Count\
    \ <= k) {\n            return arr;\n        }\n\n        List<long> maximums =\
    \ new List<long>(k);\n\n        long maxElem = arr.Max();\n\n        foreach (var\
    \ item in arr.Skip(k)) {\n            if (item > maxElem) {\n                maximums.Add(maxElem);\n\
    \                maxElem = item;\n            }\n        }\n\n        maximums.Add(maxElem);\n\
    \n        return maximums;", "        if (k > arr.Count || k < 0) return new List<long>();\n\
    \        var result = new List<long>();\n        // sort the array (O(n log n),\
    \ n times)\n        var arr = arr.OrderBy(v => v).ToArray();\n        var num\
    \ = 0;\n        // calculate the max k numbers in the array\n        foreach (var\
    \ v in arr) {\n            num ^= v;\n            if (num > k) {\n           \
    \     result.Add(v);\n                num -= v;\n            }\n            if\
    \ (num > k) break;\n        }\n        return result;", "        long n = arr.Count;\n\
    \        long m = k - 1;\n        List<long> max = new List<long>();\n       \
    \ if (n == 0 || m == 0) return max;\n\n        bool flag = arr.FirstOrDefault()\
    \ >= 0;\n        long min = arr.FirstOrDefault();\n        long max = arr.FirstOrDefault();\n\
    \        foreach (long i in arr) {\n            if (i > max) {\n             \
    \   max = i;\n                flag = true;\n            }\n            if (i <=\
    \ min) flag = false;\n        }\n        long temp = max;\n        max = k;\n\
    \        while (flag) {\n            max = k;\n            if (k == n - 1) {\n\
    \                while (temp < arr[0]) max++;\n                break;\n      \
    \      }\n            int i = (int)Math.Floor(k / 2);\n            temp.Add(max);\n\
    \            max = arr[i];\n            k = k - i;\n        }\n        foreach\
    \ (long i in temp) {\n            max.Add(i);\n        }\n        return max;",
  "        var arr = arr.OrderByDescending(x => x);\n        var temp = arr.Take(k);\n\
    \        return new List<long>(temp.OrderByDescending(x => x));", "        if\
    \ (k > arr.Count) k--;\n        List<long> res = new List<long>();\n        if\
    \ (k > 0) res.Add(arr[0]);\n        for (int i = 1; i < k; i++) {\n          \
    \  res.Add(Math.Max(arr[i], arr[i-1]));\n        }\n        if (k < arr.Count)\
    \ res.Add(arr[arr.Count-1]);\n        return res;", "        // Your code here\n\
    \        var sorted = arr.OrderByDescending(x => x).Take(k);\n        return sorted;",
  "        // Your code here\n        var list = new List<long>();\n        foreach\
    \ (var number in arr.Skip(k))\n        {\n            list.Add(number);\n    \
    \    }\n        list.Sort();\n        return list;", "        if (arr.Count <\
    \ 2)\n            throw new ArgumentException(\"Parameter k must be greater than\
    \ 1\");\n        List<long> result = new List<long>();\n        long max = arr[0];\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max)\
    \ {\n                max = arr[i];\n            }\n        }\n        List<long>\
    \ maxList = new List<long>();\n        for (int i = 0; i < k; i++) {\n       \
    \     long curMax = max;\n            List<long> nextList = new List<long>();\n\
    \            for (int j = i; j < arr.Count && j < k; j++) {\n                if\
    \ (arr[j] > curMax) {\n                    nextList.Add(arr[j]);\n           \
    \         curMax = arr[j];\n                }\n            }\n            maxList.Add(curMax);\n\
    \            maxList.AddRange(nextList);\n        }\n        return maxList;",
  "        if (k > arr.Count) throw new ArgumentOutOfRangeException(\"k\");\n    \
    \    List<long> result = new List<long>();\n        var maxElements = new List<long>(arr.Count);\n\
    \        var maxCount = 0;\n        var minElements = new List<long>(arr.Count);\n\
    \        var minCount = 0;\n        foreach (var element in arr) {\n         \
    \   maxElements.Add(element);\n            if (maxCount < maxElements.Count) {\n\
    \                maxCount = maxElements.Count;\n            }\n            if\
    \ (minCount < minElements.Count) {\n                minCount = minElements.Count;\n\
    \            }\n            if (maxElements.Count < minElements.Count) {\n   \
    \             minElements.Clear();\n            }\n            if (maxElements.Count\
    \ < minElements.Count) {\n                maxElements.Clear();\n            }\n\
    \            if (maxCount != maxElements.Count || minCount != minElements.Count)\
    \ {\n                maxElements.Clear();\n                maxCount = minElements.Count;\n\
    \                minElements.Clear();\n                minCount = minElements.Count;\n\
    \            }\n            maxElements.Remove(Math.Max(maxElements.Count, minElements.Count));\n\
    \            minElements.Remove(Math.Max(maxElements.Count, minElements.Count));\n\
    \        }\n        foreach (var element in arr) {\n            if (maxElements.Count\
    \ <= minElements.Count) {\n                result.Add(element);\n            \
    \    minElements.Add(element);\n            } else {\n                maxElements.Add(element);\n\
    \                if (maxElements.Count > maxCount) {\n                    maxCount\
    \ = maxElements.Count;\n                }\n                if (minElements.Count\
    \ < minCount) {\n                    minCount = minElements.Count;\n         \
    \       }\n                if (minElements.Count > minCount) {\n             \
    \       minElements.Clear();\n                }\n                if (maxElements.Count\
    \ < minElements.Count) {\n                    minElements.Clear();\n         \
    \       }\n                if (maxElements.Count < minElements.Count) {\n    \
    \                maxElements.Clear();\n                }\n            }\n    \
    \    }\n        return result;", "        int[] indices = new int[k];\n      \
    \  for (int i = 0; i < k; i++) {\n            indices[i] = 0;\n        }\n\n \
    \       List<long> result = new List<long>();\n        if (arr.Count < k) {\n\
    \            result = arr;\n            return result;\n        }\n\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            long left = arr[i];\n       \
    \     long right = 0;\n            int max = 0;\n            for (int j = 0; j\
    \ < k; j++) {\n                if (indices[j] < 0) {\n                    right\
    \ = arr[j];\n                    indices[j] = 0;\n                } else {\n \
    \                   right = arr[indices[j]];\n                }\n\n          \
    \      if (left > right) {\n                    max = j;\n                   \
    \ left = right;\n                }\n            }\n            indices.RemoveAt(max);\n\
    \            result.Add(left);\n        }\n\n        return result;", "      \
    \  long biggest = 0L;\n        var result = new List<long>(k);\n        var counter\
    \ = new Dictionary<long, int>();\n        foreach (var item in arr)\n        {\n\
    \            if (counter.ContainsKey(item))\n            {\n                counter[item]\
    \ = counter[item] + 1;\n                if (counter[item] > biggest)\n       \
    \         {\n                    biggest = counter[item];\n                }\n\
    \            }\n            else\n            {\n                counter.Add(item,\
    \ 1);\n                if (counter[item] > biggest)\n                {\n     \
    \               biggest = counter[item];\n                }\n            }\n \
    \       }\n        long tmp = 0;\n        for (int i = 0; i < k; i++)\n      \
    \  {\n            if (counter.ContainsKey(biggest))\n            {\n         \
    \       counter[biggest] = counter[biggest] + 1;\n                if (counter[biggest]\
    \ > biggest)\n                {\n                    biggest = counter[biggest];\n\
    \                }\n            }\n            else\n            {\n         \
    \       counter.Add(biggest, 1);\n                if (counter[biggest] > biggest)\n\
    \                {\n                    biggest = counter[biggest];\n        \
    \        }\n            }\n        }\n        foreach (var item in counter)\n\
    \        {\n            if (item.Value == biggest)\n            {\n          \
    \      tmp = item.Key;\n            }\n        }\n        result.Add(tmp);\n \
    \       return result;", "        // write your code here\n        if(arr.Count()\
    \ < k){\n            return new List<long>();\n        }\n        var result =\
    \ new List<long>();\n        int count = 1;\n        for(int i = 0; i < arr.Count;\
    \ i++){\n            if(i > k){\n                break;\n            }\n     \
    \       if(result.Count > result.Count - 1){\n                continue;\n    \
    \        }\n            if(arr[i] > result[k]){\n                result.Add(arr[i]);\n\
    \                count++;\n            }\n        }\n        if(result.Count >\
    \ result.Count - 1){\n            result.RemoveAt(result.Count - 1);\n       \
    \ }\n        return result;", "        List<long> results = new List<long>();\n\
    \        long maxNum = arr[0];\n        long curNum = arr[0];\n        foreach\
    \ (long num in arr) {\n            if (curNum <= k) {\n                if (num\
    \ > maxNum) {\n                    maxNum = num;\n                }\n        \
    \        curNum++;\n            } else {\n                if (num > maxNum) {\n\
    \                    maxNum = num;\n                }\n                results.Add(maxNum);\n\
    \                maxNum = arr[0];\n                curNum++;\n            }\n\
    \        }\n        if (maxNum > curNum) {\n            results.Add(maxNum);\n\
    \        }\n        return results;", "        // Write your code here.\n    \
    \    var max = new List<long>();\n        var max = arr.Take(k).ToList();\n  \
    \      max.Sort();\n        return max;", "        Debug.Assert(arr.Count > 0);\n\
    \        Debug.Assert(k > 0);\n        Debug.Assert(arr.Count <= 1000);\n    \
    \    Debug.Assert(k <= arr.Count);\n        List<long> list = new List<long>(k);\n\
    \        Debug.Assert(k == list.Count);\n        if (arr.Count == 1) {\n     \
    \       list[0] = arr[0];\n            return list;\n        }\n        long curMax\
    \ = arr[0];\n        long maxCount = 1;\n        long minCount = 1;\n        long\
    \ maxSum = curMax;\n        long minSum = curMax;\n        bool found = false;\n\
    \        long curSum = 0;\n        long curMaxIndex = 0;\n        for (long index\
    \ = 1; index < arr.Count; index++) {\n            curSum += arr[index];\n    \
    \        if (found) {\n                if (curSum > maxSum) {\n              \
    \      maxCount = maxCount + 1;\n                    maxSum = curSum;\n      \
    \              maxSumIndex = index;\n                }\n                if (curSum\
    \ < minSum) {\n                    minCount = minCount + 1;\n                \
    \    minSum = curSum;\n                    minSumIndex = index;\n            \
    \    }\n            } else {\n                if (curSum == maxSum) {\n      \
    \              maxCount = maxCount + 1;\n                    maxSum = curSum;\n\
    \                    maxSumIndex = index;\n                    found = true;\n\
    \                } else if (curSum == minSum) {\n                    minCount\
    \ = minCount + 1;\n                    minSum = curSum;\n                    minSumIndex\
    \ = index;\n                    found = true;\n                }\n           \
    \ }\n            if (k > maxCount) {\n                list.Add(arr[maxSumIndex]);\n\
    \                curMax = arr[maxSumIndex];\n                maxCount = 1;\n \
    \               maxSum = curMax;\n                maxSumIndex = maxSumIndex;\n\
    \                minCount = 1;\n                minSum = curMax;\n           \
    \     minSumIndex = minSumIndex;\n            } else if (k < minCount) {\n   \
    \             list.Add(arr[minSumIndex]);\n                curMax = arr[minSumIndex];\n\
    \                maxCount = 1;\n                maxSum = curMax;\n           \
    \     maxSumIndex = maxSumIndex;\n                minCount = 1;\n            \
    \    minSum = curMax;\n                minSumIndex = minSumIndex;\n          \
    \  } else {\n                list.Add(arr[maxSumIndex]);\n                curMax\
    \ = arr[maxSumIndex];\n                maxCount = 1;\n                maxSum =\
    \ curMax;\n                maxSumIndex = maxSumIndex;\n                minCount\
    \ = 1;\n                minSum = curMax;\n                minSumIndex = minSumIndex;\n\
    \            }\n        }\n        return list;", "        if (arr.Count < 1)\n\
    \            return arr;\n        if (arr.Count > 1000)\n            arr = arr.Take(1000).Concat(arr.Skip(999)).ToList();\n\
    \        if (k <= 0 || k > arr.Count)\n            throw new ArgumentOutOfRangeException(\"\
    k\", \n                                                    \"k should be less\
    \ than or equal to \" +\n                                                    \"\
    the length of arr.\");\n        long min = arr[0];\n        long max = arr[0];\n\
    \        int i = 0;\n        List<long> res = new List<long>(k);\n        do {\n\
    \            max = Math.Max(max, arr[i]);\n            min = Math.Min(min, arr[i]);\n\
    \            if (++i >= arr.Count) {\n                break;\n            }\n\
    \        } while (max >= min);\n        for (int j = (k - 1); j >= 0; j--) {\n\
    \            long el = arr[j];\n            if (el >= max && el > min) {\n   \
    \             res.Add(el);\n            }\n        }\n        return res;", " \
    \       Dictionary<long, List<long>> dict = new Dictionary<long, List<long>>();\n\
    \n        var len = arr.Count;\n\n        for(var i = 0; i < len; i++) {\n   \
    \         var value = arr[i];\n\n            if (dict.ContainsKey(value)) {\n\
    \                dict[value].Add(i);\n            } else {\n                var\
    \ list = new List<long> {i};\n                dict.Add(value, list);\n       \
    \     }\n        }\n\n        List<long> max = new List<long>();\n        long\
    \ index = 0;\n        long maxValue = 0;\n\n        foreach (var value in dict)\
    \ {\n            if (dict[key].Count > maxValue) {\n                maxValue =\
    \ dict[key].Count;\n                max = dict[key];\n                index =\
    \ dict[key].FirstOrDefault(a => a == 0) ?? -1;\n            }\n        }\n\n \
    \       if (maxValue > k) {\n            return Maximum(max.OrderByDescending(a\
    \ => a).Take(k), k);\n        } else {\n            return max.OrderByDescending(a\
    \ => a).Take(k);\n        }", "        long max;\n        List<long> list = new\
    \ List<long>();\n        long[] data = arr.ToArray();\n\n        for(int i = 0;\
    \ i < data.Length; i++) {\n            if (data[i] > max) {\n                max\
    \ = data[i];\n            }\n        }\n\n        if (k > max) {\n           \
    \ k = max;\n        }\n\n        for(int i = 0; k < data.Length && data.Length\
    \ > i; i++) {\n            if (data[i] > data[i + 1]) {\n                list.Add(data[i]);\n\
    \                data[data.Length - 1] = data[i];\n            }\n        }\n\n\
    \        return list;", "        int size = arr.Count;\n        List<long> res\
    \ = new List<long>();\n        if (k <= size) return arr;\n        long maxval\
    \ = arr[0];\n        for (int i = 1; i < size; i++) {\n            if (arr[i]\
    \ > maxval) maxval = arr[i];\n        }\n        int m = size / k;\n        for\
    \ (int i = 0; i < k; i++) {\n            long curval = maxval;\n            for\
    \ (int j = 0; j < m; j++) {\n                long pos = curval % size;\n     \
    \           curval = (curval / size) - arr[pos];\n                if (curval >\
    \ 0) {\n                    res.Add(curval);\n                }\n            }\n\
    \        }\n        return res;", "        int[] count = new int[k];\n       \
    \ List<long> result = new List<long>();\n        long cur = 0;\n        for (long\
    \ i : arr) {\n            count[i - cur]++;\n            cur = i;\n        }\n\
    \        int maxCount = 0;\n        long maxNum = arr[0];\n        for (int i\
    \ = 0; i < k; i++) {\n            maxCount = Math.Max(maxCount, count[i]);\n \
    \           if (count[i] > maxCount) {\n                maxCount = count[i];\n\
    \                maxNum = arr[i];\n            }\n        }\n        result.Add(maxNum);\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
